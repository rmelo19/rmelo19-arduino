
bin/reflex:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_vectors>:
 8000000:	18 43 01 20 5d 0b 00 08 59 0b 00 08 59 0b 00 08     .C. ]...Y...Y...
 8000010:	59 0b 00 08 59 0b 00 08 59 0b 00 08 00 00 00 00     Y...Y...Y.......
	...
 800002c:	59 0b 00 08 59 0b 00 08 00 00 00 00 59 0b 00 08     Y...Y.......Y...
 800003c:	59 0b 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     Y...Y...Y...Y...
 800004c:	59 0b 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     Y...Y...Y...Y...
 800005c:	59 0b 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     Y...Y...Y...Y...
 800006c:	59 0b 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     Y...Y...Y...Y...
 800007c:	59 0b 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     Y...Y...Y...Y...
 800008c:	59 0b 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     Y...Y...Y...Y...
 800009c:	59 0b 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     Y...Y...Y...Y...
 80000ac:	59 0b 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     Y...Y...Y...Y...
 80000bc:	59 0b 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     Y...Y...Y...Y...
 80000cc:	59 0b 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     Y...Y...Y...Y...
 80000dc:	8d 21 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     .!..Y...Y...Y...
 80000ec:	59 0b 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     Y...Y...Y...Y...
 80000fc:	59 0b 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     Y...Y...Y...Y...
 800010c:	59 0b 00 08 c9 21 00 08 0d 22 00 08 59 0b 00 08     Y....!..."..Y...
 800011c:	59 0b 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     Y...Y...Y...Y...
 800012c:	59 0b 00 08 59 0b 00 08 75 1b 00 08 59 0b 00 08     Y...Y...u...Y...
 800013c:	59 0b 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     Y...Y...Y...Y...
 800014c:	59 0b 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     Y...Y...Y...Y...
 800015c:	51 22 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     Q"..Y...Y...Y...
 800016c:	59 0b 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     Y...Y...Y...Y...
 800017c:	59 0b 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     Y...Y...Y...Y...
 800018c:	59 0b 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     Y...Y...Y...Y...
 800019c:	59 0b 00 08 59 0b 00 08 59 0b 00 08 59 0b 00 08     Y...Y...Y...Y...
	...

08000400 <__do_global_dtors_aux>:
 8000400:	b510      	push	{r4, lr}
 8000402:	4c05      	ldr	r4, [pc, #20]	; (8000418 <__do_global_dtors_aux+0x18>)
 8000404:	7823      	ldrb	r3, [r4, #0]
 8000406:	b933      	cbnz	r3, 8000416 <__do_global_dtors_aux+0x16>
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <__do_global_dtors_aux+0x1c>)
 800040a:	b113      	cbz	r3, 8000412 <__do_global_dtors_aux+0x12>
 800040c:	4804      	ldr	r0, [pc, #16]	; (8000420 <__do_global_dtors_aux+0x20>)
 800040e:	f3af 8000 	nop.w
 8000412:	2301      	movs	r3, #1
 8000414:	7023      	strb	r3, [r4, #0]
 8000416:	bd10      	pop	{r4, pc}
 8000418:	20000968 	.word	0x20000968
 800041c:	00000000 	.word	0x00000000
 8000420:	0800af4c 	.word	0x0800af4c

08000424 <frame_dummy>:
 8000424:	4b08      	ldr	r3, [pc, #32]	; (8000448 <frame_dummy+0x24>)
 8000426:	b510      	push	{r4, lr}
 8000428:	b11b      	cbz	r3, 8000432 <frame_dummy+0xe>
 800042a:	4808      	ldr	r0, [pc, #32]	; (800044c <frame_dummy+0x28>)
 800042c:	4908      	ldr	r1, [pc, #32]	; (8000450 <frame_dummy+0x2c>)
 800042e:	f3af 8000 	nop.w
 8000432:	4808      	ldr	r0, [pc, #32]	; (8000454 <frame_dummy+0x30>)
 8000434:	6803      	ldr	r3, [r0, #0]
 8000436:	b903      	cbnz	r3, 800043a <frame_dummy+0x16>
 8000438:	bd10      	pop	{r4, pc}
 800043a:	4b07      	ldr	r3, [pc, #28]	; (8000458 <frame_dummy+0x34>)
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0fb      	beq.n	8000438 <frame_dummy+0x14>
 8000440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000444:	4718      	bx	r3
 8000446:	bf00      	nop
 8000448:	00000000 	.word	0x00000000
 800044c:	0800af4c 	.word	0x0800af4c
 8000450:	2000096c 	.word	0x2000096c
 8000454:	0800afc0 	.word	0x0800afc0
 8000458:	00000000 	.word	0x00000000

0800045c <_mainCRTStartup>:
 800045c:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <_mainCRTStartup+0x58>)
 800045e:	2b00      	cmp	r3, #0
 8000460:	bf08      	it	eq
 8000462:	4b13      	ldreq	r3, [pc, #76]	; (80004b0 <_mainCRTStartup+0x54>)
 8000464:	469d      	mov	sp, r3
 8000466:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 800046a:	2100      	movs	r1, #0
 800046c:	468b      	mov	fp, r1
 800046e:	460f      	mov	r7, r1
 8000470:	4813      	ldr	r0, [pc, #76]	; (80004c0 <_mainCRTStartup+0x64>)
 8000472:	4a14      	ldr	r2, [pc, #80]	; (80004c4 <_mainCRTStartup+0x68>)
 8000474:	1a12      	subs	r2, r2, r0
 8000476:	f003 fa83 	bl	8003980 <memset>
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <_mainCRTStartup+0x5c>)
 800047c:	2b00      	cmp	r3, #0
 800047e:	d000      	beq.n	8000482 <_mainCRTStartup+0x26>
 8000480:	4798      	blx	r3
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <_mainCRTStartup+0x60>)
 8000484:	2b00      	cmp	r3, #0
 8000486:	d000      	beq.n	800048a <_mainCRTStartup+0x2e>
 8000488:	4798      	blx	r3
 800048a:	2000      	movs	r0, #0
 800048c:	2100      	movs	r1, #0
 800048e:	0004      	movs	r4, r0
 8000490:	000d      	movs	r5, r1
 8000492:	480d      	ldr	r0, [pc, #52]	; (80004c8 <_mainCRTStartup+0x6c>)
 8000494:	2800      	cmp	r0, #0
 8000496:	d002      	beq.n	800049e <_mainCRTStartup+0x42>
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <_mainCRTStartup+0x70>)
 800049a:	f004 fe89 	bl	80051b0 <atexit>
 800049e:	f003 f9ad 	bl	80037fc <__libc_init_array>
 80004a2:	0020      	movs	r0, r4
 80004a4:	0029      	movs	r1, r5
 80004a6:	f000 f813 	bl	80004d0 <main>
 80004aa:	f003 f997 	bl	80037dc <exit>
 80004ae:	bf00      	nop
 80004b0:	00080000 	.word	0x00080000
	...
 80004c0:	20000968 	.word	0x20000968
 80004c4:	2001031c 	.word	0x2001031c
 80004c8:	080051b1 	.word	0x080051b1
 80004cc:	08006545 	.word	0x08006545

080004d0 <main>:
#include "config.h"

int main()
{
 80004d0:	b508      	push	{r3, lr}
  init();
 80004d2:	f000 fa41 	bl	8000958 <init>
  printf("Starting...\n");
 80004d6:	4807      	ldr	r0, [pc, #28]	; (80004f4 <main+0x24>)
 80004d8:	f003 fb04 	bl	8003ae4 <puts>
  while(1)
  {
    errorService();
 80004dc:	f003 f914 	bl	8003708 <errorService>

    if (asyncUpdate())
 80004e0:	f003 f8a2 	bl	8003628 <asyncUpdate>
 80004e4:	2800      	cmp	r0, #0
 80004e6:	d0f9      	beq.n	80004dc <main+0xc>
    {
      printInfo(HAND_STATE_INFO);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 fa61 	bl	80009b0 <printInfo>
      // printf("All done, send via ethernet...\n");
      ethernetService();
 80004ee:	f001 fd8d 	bl	800200c <ethernetService>
 80004f2:	e7f3      	b.n	80004dc <main+0xc>
 80004f4:	0800a66c 	.word	0x0800a66c

080004f8 <setRegisterIMUs>:
  udelay(1000);
  
}

uint8_t setRegisterIMUs(uint8_t registerAddr, uint8_t data)
{
 80004f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t result = 0;
  for (int i = 0; i < NUM_IMUS; i++)
 80004fc:	2500      	movs	r5, #0
 80004fe:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8000534 <setRegisterIMUs+0x3c>
  udelay(1000);
  
}

uint8_t setRegisterIMUs(uint8_t registerAddr, uint8_t data)
{
 8000502:	4607      	mov	r7, r0
 8000504:	460e      	mov	r6, r1
  uint8_t result = 0;
 8000506:	462c      	mov	r4, r5
  for (int i = 0; i < NUM_IMUS; i++)
    result += setRegisterI2C(handPorts.imu[i], BNO055_ADDRESS_A, registerAddr, data);
 8000508:	f105 0328 	add.w	r3, r5, #40	; 0x28
 800050c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8000510:	2128      	movs	r1, #40	; 0x28
 8000512:	6858      	ldr	r0, [r3, #4]
 8000514:	463a      	mov	r2, r7
 8000516:	4633      	mov	r3, r6
 8000518:	f000 fccc 	bl	8000eb4 <setRegisterI2C>
}

uint8_t setRegisterIMUs(uint8_t registerAddr, uint8_t data)
{
  uint8_t result = 0;
  for (int i = 0; i < NUM_IMUS; i++)
 800051c:	3501      	adds	r5, #1
    result += setRegisterI2C(handPorts.imu[i], BNO055_ADDRESS_A, registerAddr, data);
 800051e:	4420      	add	r0, r4
}

uint8_t setRegisterIMUs(uint8_t registerAddr, uint8_t data)
{
  uint8_t result = 0;
  for (int i = 0; i < NUM_IMUS; i++)
 8000520:	2d04      	cmp	r5, #4
    result += setRegisterI2C(handPorts.imu[i], BNO055_ADDRESS_A, registerAddr, data);
 8000522:	b2c4      	uxtb	r4, r0
}

uint8_t setRegisterIMUs(uint8_t registerAddr, uint8_t data)
{
  uint8_t result = 0;
  for (int i = 0; i < NUM_IMUS; i++)
 8000524:	d1f0      	bne.n	8000508 <setRegisterIMUs+0x10>
    result += setRegisterI2C(handPorts.imu[i], BNO055_ADDRESS_A, registerAddr, data);
  return result == NUM_IMUS;
}
 8000526:	f1a4 0004 	sub.w	r0, r4, #4
 800052a:	fab0 f080 	clz	r0, r0
 800052e:	0940      	lsrs	r0, r0, #5
 8000530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000534:	20010074 	.word	0x20010074

08000538 <imuInit>:

// GLOBAL ALL FILES VARIABLE
imu_async_poll_state_t imu_poll_state[3] = {STATE_WAIT, STATE_WAIT, STATE_WAIT};

void imuInit()
{
 8000538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800053c:	b084      	sub	sp, #16
  uint8_t id[1] = {0};
 800053e:	ae04      	add	r6, sp, #16
 8000540:	2400      	movs	r4, #0
  uint8_t result;

  // initializing imus state
  printf("initializing imu state: \n");
 8000542:	484c      	ldr	r0, [pc, #304]	; (8000674 <imuInit+0x13c>)
// GLOBAL ALL FILES VARIABLE
imu_async_poll_state_t imu_poll_state[3] = {STATE_WAIT, STATE_WAIT, STATE_WAIT};

void imuInit()
{
  uint8_t id[1] = {0};
 8000544:	f806 4d04 	strb.w	r4, [r6, #-4]!
  uint8_t result;

  // initializing imus state
  printf("initializing imu state: \n");
 8000548:	f003 facc 	bl	8003ae4 <puts>
 800054c:	4f4a      	ldr	r7, [pc, #296]	; (8000678 <imuInit+0x140>)
 800054e:	f8df 8150 	ldr.w	r8, [pc, #336]	; 80006a0 <imuInit+0x168>
  for (int i = 0; i < NUM_IMUS; i++)
  {
    result = writeRegisterI2C(handPorts.imu[i], BNO055_ADDRESS_A, BNO055_CHIP_ID_ADDR);
 8000552:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000556:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800055a:	2128      	movs	r1, #40	; 0x28
 800055c:	6868      	ldr	r0, [r5, #4]
 800055e:	2200      	movs	r2, #0
 8000560:	f000 fc32 	bl	8000dc8 <writeRegisterI2C>
    result = readBytesI2C(handPorts.imu[i], BNO055_ADDRESS_A, 1, id);
 8000564:	6868      	ldr	r0, [r5, #4]
 8000566:	2128      	movs	r1, #40	; 0x28
 8000568:	2201      	movs	r2, #1
 800056a:	4633      	mov	r3, r6
 800056c:	f000 fcb0 	bl	8000ed0 <readBytesI2C>
    if(*id != BNO055_ID)
 8000570:	f89d 500c 	ldrb.w	r5, [sp, #12]
  // initializing imus state
  printf("initializing imu state: \n");
  for (int i = 0; i < NUM_IMUS; i++)
  {
    result = writeRegisterI2C(handPorts.imu[i], BNO055_ADDRESS_A, BNO055_CHIP_ID_ADDR);
    result = readBytesI2C(handPorts.imu[i], BNO055_ADDRESS_A, 1, id);
 8000574:	4686      	mov	lr, r0
    if(*id != BNO055_ID)
 8000576:	2da0      	cmp	r5, #160	; 0xa0
    {
      printf("\tIMU %d not found. ID: %d, Address: 0x%x Result: %d\n", i, id[0], BNO055_ADDRESS_A, result);
 8000578:	4840      	ldr	r0, [pc, #256]	; (800067c <imuInit+0x144>)
 800057a:	f8cd e000 	str.w	lr, [sp]
 800057e:	4621      	mov	r1, r4
 8000580:	462a      	mov	r2, r5
 8000582:	f04f 0328 	mov.w	r3, #40	; 0x28
  printf("initializing imu state: \n");
  for (int i = 0; i < NUM_IMUS; i++)
  {
    result = writeRegisterI2C(handPorts.imu[i], BNO055_ADDRESS_A, BNO055_CHIP_ID_ADDR);
    result = readBytesI2C(handPorts.imu[i], BNO055_ADDRESS_A, 1, id);
    if(*id != BNO055_ID)
 8000586:	d068      	beq.n	800065a <imuInit+0x122>
    {
      printf("\tIMU %d not found. ID: %d, Address: 0x%x Result: %d\n", i, id[0], BNO055_ADDRESS_A, result);
 8000588:	f003 fa58 	bl	8003a3c <printf>
      handStatus.imus[i] = 0;
 800058c:	eb08 0304 	add.w	r3, r8, r4
 8000590:	2200      	movs	r2, #0
 8000592:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  uint8_t id[1] = {0};
  uint8_t result;

  // initializing imus state
  printf("initializing imu state: \n");
  for (int i = 0; i < NUM_IMUS; i++)
 8000596:	3401      	adds	r4, #1
 8000598:	2c04      	cmp	r4, #4
 800059a:	d1da      	bne.n	8000552 <imuInit+0x1a>
      handStatus.imus[i] = 1;
    }
  }

  // set imu mode
  result = setRegisterIMUs(BNO055_OPR_MODE_ADDR, OPERATION_MODE_CONFIG);
 800059c:	2100      	movs	r1, #0
 800059e:	203d      	movs	r0, #61	; 0x3d
 80005a0:	f7ff ffaa 	bl	80004f8 <setRegisterIMUs>
  printf("\tSetting modes... Result: %s\n", result ? "SUCCESS" : "FAILED");
 80005a4:	4c36      	ldr	r4, [pc, #216]	; (8000680 <imuInit+0x148>)
 80005a6:	4d37      	ldr	r5, [pc, #220]	; (8000684 <imuInit+0x14c>)
 80005a8:	2800      	cmp	r0, #0
 80005aa:	bf14      	ite	ne
 80005ac:	4621      	movne	r1, r4
 80005ae:	4629      	moveq	r1, r5
 80005b0:	4835      	ldr	r0, [pc, #212]	; (8000688 <imuInit+0x150>)
 80005b2:	f003 fa43 	bl	8003a3c <printf>
  udelay(1000);
 80005b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ba:	f001 fd5f 	bl	800207c <udelay>

  // reset
  result = setRegisterIMUs(BNO055_SYS_TRIGGER_ADDR, 0x20);
 80005be:	2120      	movs	r1, #32
 80005c0:	203f      	movs	r0, #63	; 0x3f
 80005c2:	f7ff ff99 	bl	80004f8 <setRegisterIMUs>
  printf("\tReseting... Result: %s\n", result ? "SUCCESS" : "FAILED");
 80005c6:	2800      	cmp	r0, #0
 80005c8:	bf14      	ite	ne
 80005ca:	4621      	movne	r1, r4
 80005cc:	4629      	moveq	r1, r5
 80005ce:	482f      	ldr	r0, [pc, #188]	; (800068c <imuInit+0x154>)
 80005d0:	f003 fa34 	bl	8003a3c <printf>
  udelay(1000);
 80005d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d8:	f001 fd50 	bl	800207c <udelay>
  
   // set imu power mode
  result = setRegisterIMUs(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
 80005dc:	2100      	movs	r1, #0
 80005de:	203e      	movs	r0, #62	; 0x3e
 80005e0:	f7ff ff8a 	bl	80004f8 <setRegisterIMUs>
  printf("\tSetting power modes... Result: %s\n", result ? "SUCCESS" : "FAILED");
 80005e4:	2800      	cmp	r0, #0
 80005e6:	bf14      	ite	ne
 80005e8:	4621      	movne	r1, r4
 80005ea:	4629      	moveq	r1, r5
 80005ec:	4828      	ldr	r0, [pc, #160]	; (8000690 <imuInit+0x158>)
 80005ee:	f003 fa25 	bl	8003a3c <printf>
  udelay(1000);
 80005f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f6:	f001 fd41 	bl	800207c <udelay>
  
  // set page id
  result = setRegisterIMUs(BNO055_PAGE_ID_ADDR, 0);
 80005fa:	2100      	movs	r1, #0
 80005fc:	2007      	movs	r0, #7
 80005fe:	f7ff ff7b 	bl	80004f8 <setRegisterIMUs>
  printf("\tSetting page id... Result: %s\n", result ? "SUCCESS" : "FAILED");
 8000602:	2800      	cmp	r0, #0
 8000604:	bf14      	ite	ne
 8000606:	4621      	movne	r1, r4
 8000608:	4629      	moveq	r1, r5
 800060a:	4822      	ldr	r0, [pc, #136]	; (8000694 <imuInit+0x15c>)
 800060c:	f003 fa16 	bl	8003a3c <printf>
  udelay(1000);
 8000610:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000614:	f001 fd32 	bl	800207c <udelay>
  
  // set external crystal use id
  result = setRegisterIMUs(BNO055_SYS_TRIGGER_ADDR, 0x80);
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	203f      	movs	r0, #63	; 0x3f
 800061c:	f7ff ff6c 	bl	80004f8 <setRegisterIMUs>
  printf("\tSetting external crystal use... Result: %s\n", result ? "SUCCESS" : "FAILED");
 8000620:	2800      	cmp	r0, #0
 8000622:	bf14      	ite	ne
 8000624:	4621      	movne	r1, r4
 8000626:	4629      	moveq	r1, r5
 8000628:	481b      	ldr	r0, [pc, #108]	; (8000698 <imuInit+0x160>)
 800062a:	f003 fa07 	bl	8003a3c <printf>
  udelay(1000);
 800062e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000632:	f001 fd23 	bl	800207c <udelay>
  
  // set imu mode again
  result = setRegisterIMUs(BNO055_OPR_MODE_ADDR, OPERATION_MODE_NDOF);
 8000636:	210c      	movs	r1, #12
 8000638:	203d      	movs	r0, #61	; 0x3d
 800063a:	f7ff ff5d 	bl	80004f8 <setRegisterIMUs>
  printf("\tSetting modes... Result: %s\n", result ? "SUCCESS" : "FAILED");
 800063e:	2800      	cmp	r0, #0
 8000640:	bf14      	ite	ne
 8000642:	4621      	movne	r1, r4
 8000644:	4629      	moveq	r1, r5
 8000646:	4810      	ldr	r0, [pc, #64]	; (8000688 <imuInit+0x150>)
 8000648:	f003 f9f8 	bl	8003a3c <printf>
  udelay(1000);
 800064c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000650:	f001 fd14 	bl	800207c <udelay>
  
}
 8000654:	b004      	add	sp, #16
 8000656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      printf("\tIMU %d not found. ID: %d, Address: 0x%x Result: %d\n", i, id[0], BNO055_ADDRESS_A, result);
      handStatus.imus[i] = 0;
    }
    else
    {
      printf("\tIMU %d found. ID: %d, Address: 0x%x Result: %d\n", i, id[0], BNO055_ADDRESS_A, result);
 800065a:	462a      	mov	r2, r5
 800065c:	2328      	movs	r3, #40	; 0x28
 800065e:	480f      	ldr	r0, [pc, #60]	; (800069c <imuInit+0x164>)
 8000660:	4621      	mov	r1, r4
 8000662:	f003 f9eb 	bl	8003a3c <printf>
      handStatus.imus[i] = 1;
 8000666:	eb08 0304 	add.w	r3, r8, r4
 800066a:	2201      	movs	r2, #1
 800066c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8000670:	e791      	b.n	8000596 <imuInit+0x5e>
 8000672:	bf00      	nop
 8000674:	0800a688 	.word	0x0800a688
 8000678:	20010074 	.word	0x20010074
 800067c:	0800a6a4 	.word	0x0800a6a4
 8000680:	0800a678 	.word	0x0800a678
 8000684:	0800a680 	.word	0x0800a680
 8000688:	0800a710 	.word	0x0800a710
 800068c:	0800a730 	.word	0x0800a730
 8000690:	0800a74c 	.word	0x0800a74c
 8000694:	0800a770 	.word	0x0800a770
 8000698:	0800a790 	.word	0x0800a790
 800069c:	0800a6dc 	.word	0x0800a6dc
 80006a0:	200102e8 	.word	0x200102e8

080006a4 <imu_poll_nonblocking_tick>:
    0 -> Port I2C1
    1 -> Port SPI
    2 -> Port I2C3
*/
void imu_poll_nonblocking_tick(const uint8_t imuNumber)
{
 80006a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  imu_async_poll_state_t* state = (imu_async_poll_state_t*)&(imu_poll_state[imuNumber]);
  uint8_t values[8] = {0};

  switch(*state)
 80006a8:	4d37      	ldr	r5, [pc, #220]	; (8000788 <imu_poll_nonblocking_tick+0xe4>)
 80006aa:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
    0 -> Port I2C1
    1 -> Port SPI
    2 -> Port I2C3
*/
void imu_poll_nonblocking_tick(const uint8_t imuNumber)
{
 80006ae:	b085      	sub	sp, #20
  imu_async_poll_state_t* state = (imu_async_poll_state_t*)&(imu_poll_state[imuNumber]);
  uint8_t values[8] = {0};
 80006b0:	2300      	movs	r3, #0

  switch(*state)
 80006b2:	2a01      	cmp	r2, #1
    0 -> Port I2C1
    1 -> Port SPI
    2 -> Port I2C3
*/
void imu_poll_nonblocking_tick(const uint8_t imuNumber)
{
 80006b4:	4604      	mov	r4, r0
  imu_async_poll_state_t* state = (imu_async_poll_state_t*)&(imu_poll_state[imuNumber]);
  uint8_t values[8] = {0};
 80006b6:	9302      	str	r3, [sp, #8]
 80006b8:	9303      	str	r3, [sp, #12]

  switch(*state)
 80006ba:	d01c      	beq.n	80006f6 <imu_poll_nonblocking_tick+0x52>
 80006bc:	d30b      	bcc.n	80006d6 <imu_poll_nonblocking_tick+0x32>
 80006be:	3201      	adds	r2, #1
 80006c0:	d102      	bne.n	80006c8 <imu_poll_nonblocking_tick+0x24>
      break;
    default:
      *state = IMU_STATE_WAIT;
      break;
  }
 80006c2:	b005      	add	sp, #20
 80006c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }
      break;
    case IMU_STATE_WAIT:
      break;
    default:
      *state = IMU_STATE_WAIT;
 80006c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006cc:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
      break;
  }
 80006d0:	b005      	add	sp, #20
 80006d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch(*state)
  {
    case IMU_STATE_SET_REGISTER:
      // BNO055_EULER_H_LSB_ADDR
      // BNO055_QUATERNION_DATA_W_LSB_ADDR
      if (writeRegisterI2C(handPorts.imu[imuNumber], BNO055_ADDRESS_A, BNO055_QUATERNION_DATA_W_LSB_ADDR));
 80006d6:	4b2d      	ldr	r3, [pc, #180]	; (800078c <imu_poll_nonblocking_tick+0xe8>)
 80006d8:	f100 0228 	add.w	r2, r0, #40	; 0x28
 80006dc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80006e0:	2128      	movs	r1, #40	; 0x28
 80006e2:	6858      	ldr	r0, [r3, #4]
 80006e4:	2220      	movs	r2, #32
 80006e6:	f000 fb6f 	bl	8000dc8 <writeRegisterI2C>
        *state = ENCODER_STATE_READ_VALUES;
 80006ea:	2301      	movs	r3, #1
 80006ec:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
      break;
    default:
      *state = IMU_STATE_WAIT;
      break;
  }
 80006f0:	b005      	add	sp, #20
 80006f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (writeRegisterI2C(handPorts.imu[imuNumber], BNO055_ADDRESS_A, BNO055_QUATERNION_DATA_W_LSB_ADDR));
        *state = ENCODER_STATE_READ_VALUES;
      break;
    case IMU_STATE_READ_VALUES:
      // printf("Reading IMU: ");
      if(readBytesI2C(handPorts.imu[imuNumber], BNO055_ADDRESS_A, 8, values));
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <imu_poll_nonblocking_tick+0xe8>)
 80006f8:	f100 0228 	add.w	r2, r0, #40	; 0x28
 80006fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000700:	2208      	movs	r2, #8
 8000702:	2128      	movs	r1, #40	; 0x28
 8000704:	6858      	ldr	r0, [r3, #4]
 8000706:	eb0d 0302 	add.w	r3, sp, r2
 800070a:	f000 fbe1 	bl	8000ed0 <readBytesI2C>
        // {
        //   printf("0x%02x ", values[i]);
        // }
        // printf("\n");
        // for quaternions
        handState.imus[imuNumber*4] = (((uint16_t)values[1]) << 8) | ((uint16_t)values[0]);
 800070e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8000712:	f89d 8009 	ldrb.w	r8, [sp, #9]
 8000716:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <imu_poll_nonblocking_tick+0xec>)
        handState.imus[imuNumber*4 + 1] = (((uint16_t)values[3]) << 8) | ((uint16_t)values[2]);
 8000718:	f89d b00b 	ldrb.w	fp, [sp, #11]
 800071c:	f89d c00a 	ldrb.w	ip, [sp, #10]
        handState.imus[imuNumber*4 + 2] = (((uint16_t)values[5]) << 8) | ((uint16_t)values[4]);
 8000720:	f89d a00d 	ldrb.w	sl, [sp, #13]
 8000724:	f89d e00c 	ldrb.w	lr, [sp, #12]
        handState.imus[imuNumber*4 + 3] = (((uint16_t)values[7]) << 8) | ((uint16_t)values[6]);
 8000728:	f89d 900f 	ldrb.w	r9, [sp, #15]
 800072c:	f89d 700e 	ldrb.w	r7, [sp, #14]
        // {
        //   printf("0x%02x ", values[i]);
        // }
        // printf("\n");
        // for quaternions
        handState.imus[imuNumber*4] = (((uint16_t)values[1]) << 8) | ((uint16_t)values[0]);
 8000730:	00a2      	lsls	r2, r4, #2
 8000732:	f102 0664 	add.w	r6, r2, #100	; 0x64
 8000736:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 800073a:	ea41 2808 	orr.w	r8, r1, r8, lsl #8
        handState.imus[imuNumber*4 + 1] = (((uint16_t)values[3]) << 8) | ((uint16_t)values[2]);
        handState.imus[imuNumber*4 + 2] = (((uint16_t)values[5]) << 8) | ((uint16_t)values[4]);
 800073e:	f102 0166 	add.w	r1, r2, #102	; 0x66
 8000742:	9101      	str	r1, [sp, #4]
        // {
        //   printf("0x%02x ", values[i]);
        // }
        // printf("\n");
        // for quaternions
        handState.imus[imuNumber*4] = (((uint16_t)values[1]) << 8) | ((uint16_t)values[0]);
 8000744:	8871      	ldrh	r1, [r6, #2]
 8000746:	f8a6 8002 	strh.w	r8, [r6, #2]
        handState.imus[imuNumber*4 + 1] = (((uint16_t)values[3]) << 8) | ((uint16_t)values[2]);
        handState.imus[imuNumber*4 + 2] = (((uint16_t)values[5]) << 8) | ((uint16_t)values[4]);
 800074a:	9901      	ldr	r1, [sp, #4]
        //   printf("0x%02x ", values[i]);
        // }
        // printf("\n");
        // for quaternions
        handState.imus[imuNumber*4] = (((uint16_t)values[1]) << 8) | ((uint16_t)values[0]);
        handState.imus[imuNumber*4 + 1] = (((uint16_t)values[3]) << 8) | ((uint16_t)values[2]);
 800074c:	f102 0065 	add.w	r0, r2, #101	; 0x65
 8000750:	eb03 0040 	add.w	r0, r3, r0, lsl #1
        handState.imus[imuNumber*4 + 2] = (((uint16_t)values[5]) << 8) | ((uint16_t)values[4]);
 8000754:	eb03 0141 	add.w	r1, r3, r1, lsl #1
        //   printf("0x%02x ", values[i]);
        // }
        // printf("\n");
        // for quaternions
        handState.imus[imuNumber*4] = (((uint16_t)values[1]) << 8) | ((uint16_t)values[0]);
        handState.imus[imuNumber*4 + 1] = (((uint16_t)values[3]) << 8) | ((uint16_t)values[2]);
 8000758:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
        handState.imus[imuNumber*4 + 2] = (((uint16_t)values[5]) << 8) | ((uint16_t)values[4]);
        handState.imus[imuNumber*4 + 3] = (((uint16_t)values[7]) << 8) | ((uint16_t)values[6]);
 800075c:	3267      	adds	r2, #103	; 0x67
        //   printf("0x%02x ", values[i]);
        // }
        // printf("\n");
        // for quaternions
        handState.imus[imuNumber*4] = (((uint16_t)values[1]) << 8) | ((uint16_t)values[0]);
        handState.imus[imuNumber*4 + 1] = (((uint16_t)values[3]) << 8) | ((uint16_t)values[2]);
 800075e:	8846      	ldrh	r6, [r0, #2]
 8000760:	f8a0 c002 	strh.w	ip, [r0, #2]
        handState.imus[imuNumber*4 + 2] = (((uint16_t)values[5]) << 8) | ((uint16_t)values[4]);
        handState.imus[imuNumber*4 + 3] = (((uint16_t)values[7]) << 8) | ((uint16_t)values[6]);
 8000764:	eb03 0342 	add.w	r3, r3, r2, lsl #1
        // }
        // printf("\n");
        // for quaternions
        handState.imus[imuNumber*4] = (((uint16_t)values[1]) << 8) | ((uint16_t)values[0]);
        handState.imus[imuNumber*4 + 1] = (((uint16_t)values[3]) << 8) | ((uint16_t)values[2]);
        handState.imus[imuNumber*4 + 2] = (((uint16_t)values[5]) << 8) | ((uint16_t)values[4]);
 8000768:	ea4e 2e0a 	orr.w	lr, lr, sl, lsl #8
 800076c:	884a      	ldrh	r2, [r1, #2]
 800076e:	f8a1 e002 	strh.w	lr, [r1, #2]
        handState.imus[imuNumber*4 + 3] = (((uint16_t)values[7]) << 8) | ((uint16_t)values[6]);
 8000772:	8859      	ldrh	r1, [r3, #2]
 8000774:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
        // for euler
        // handState.imus[imuNumber*4] = 0;
        // handState.imus[imuNumber*4 + 1] = ((int16_t)values[0]) | (((int16_t)values[1]) << 8);
        // handState.imus[imuNumber*4 + 2] = ((int16_t)values[2]) | (((int16_t)values[3]) << 8);
        // handState.imus[imuNumber*4 + 3] = ((int16_t)values[4]) | (((int16_t)values[5]) << 8);
        *state = IMU_STATE_WAIT;
 8000778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800077c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
        // printf("\n");
        // for quaternions
        handState.imus[imuNumber*4] = (((uint16_t)values[1]) << 8) | ((uint16_t)values[0]);
        handState.imus[imuNumber*4 + 1] = (((uint16_t)values[3]) << 8) | ((uint16_t)values[2]);
        handState.imus[imuNumber*4 + 2] = (((uint16_t)values[5]) << 8) | ((uint16_t)values[4]);
        handState.imus[imuNumber*4 + 3] = (((uint16_t)values[7]) << 8) | ((uint16_t)values[6]);
 8000780:	805f      	strh	r7, [r3, #2]
      break;
    default:
      *state = IMU_STATE_WAIT;
      break;
  }
 8000782:	b005      	add	sp, #20
 8000784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000788:	20000004 	.word	0x20000004
 800078c:	20010074 	.word	0x20010074
 8000790:	200101fc 	.word	0x200101fc

08000794 <portsInit>:

// GLOBAL VARIABLES
volatile ports_t handPorts;

void portsInit()
{
 8000794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// for (int i = 0; i < NUM_FINGERS; ++i)
	// {
	// 	handPorts.takktile[i] = ...
	// }

	handPorts.takktile[0] = (uint32_t*) I2C1_BASE;
 8000798:	4b65      	ldr	r3, [pc, #404]	; (8000930 <portsInit+0x19c>)
	handPorts.takktile[1] = (uint32_t*) SPI1_BASE;
	handPorts.takktile[2] = (uint32_t*) I2C3_BASE;
 800079a:	4c66      	ldr	r4, [pc, #408]	; (8000934 <portsInit+0x1a0>)
	// for (int i = 0; i < NUM_FINGERS; ++i)
	// {
	// 	handPorts.takktile[i] = ...
	// }

	handPorts.takktile[0] = (uint32_t*) I2C1_BASE;
 800079c:	4d66      	ldr	r5, [pc, #408]	; (8000938 <portsInit+0x1a4>)

	handPorts.encoderI2CAddress[0] = AS5048_7BIT_ADDRESS;
	handPorts.encoderI2CAddress[1] = AS5048_7BIT_ADDRESS_SPI;
	handPorts.encoderI2CAddress[2] = AS5048_7BIT_ADDRESS;

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 800079e:	4a67      	ldr	r2, [pc, #412]	; (800093c <portsInit+0x1a8>)
	// {
	// 	handPorts.takktile[i] = ...
	// }

	handPorts.takktile[0] = (uint32_t*) I2C1_BASE;
	handPorts.takktile[1] = (uint32_t*) SPI1_BASE;
 80007a0:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000950 <portsInit+0x1bc>
	// for (int i = 0; i < NUM_FINGERS; ++i)
	// {
	// 	handPorts.takktile[i] = ...
	// }

	handPorts.takktile[0] = (uint32_t*) I2C1_BASE;
 80007a4:	601d      	str	r5, [r3, #0]
	handPorts.imu[1] = (uint32_t*) I2C3_BASE;
	handPorts.imu[2] = (uint32_t*) I2C3_BASE;
	handPorts.imu[3] = (uint32_t*) I2C3_BASE;


	handPorts.encoderI2CAddress[0] = AS5048_7BIT_ADDRESS;
 80007a6:	2140      	movs	r1, #64	; 0x40
	// {
	// 	handPorts.takktile[i] = ...
	// }

	handPorts.takktile[0] = (uint32_t*) I2C1_BASE;
	handPorts.takktile[1] = (uint32_t*) SPI1_BASE;
 80007a8:	f8c3 9004 	str.w	r9, [r3, #4]
	handPorts.takktile[2] = (uint32_t*) I2C3_BASE;
 80007ac:	609c      	str	r4, [r3, #8]

	handPorts.encoder[0] = (uint32_t*) I2C1_BASE;
 80007ae:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
	handPorts.encoder[1] = (uint32_t*) SPI1_BASE;
 80007b2:	f8c3 909c 	str.w	r9, [r3, #156]	; 0x9c
	handPorts.encoder[2] = (uint32_t*) I2C3_BASE;
 80007b6:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0

	// CORRECT, for now all IMUs connected to I2C bus 3
	handPorts.imu[0] = (uint32_t*) I2C3_BASE;
 80007ba:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	handPorts.imu[1] = (uint32_t*) I2C3_BASE;
 80007be:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	handPorts.imu[2] = (uint32_t*) I2C3_BASE;
 80007c2:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
	handPorts.imu[3] = (uint32_t*) I2C3_BASE;
 80007c6:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0


	handPorts.encoderI2CAddress[0] = AS5048_7BIT_ADDRESS;
 80007ca:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	handPorts.encoderI2CAddress[1] = AS5048_7BIT_ADDRESS_SPI;
 80007ce:	f883 10b5 	strb.w	r1, [r3, #181]	; 0xb5
	handPorts.encoderI2CAddress[2] = AS5048_7BIT_ADDRESS;
 80007d2:	f883 10b6 	strb.w	r1, [r3, #182]	; 0xb6

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 80007d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN |
	              RCC_APB1ENR_I2C3EN |
	              RCC_APB1ENR_SPI2EN;
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;

	pin_set_alternate_function(GPIOB, PORTB_I2C1_SCL, 4);
 80007d8:	4f59      	ldr	r7, [pc, #356]	; (8000940 <portsInit+0x1ac>)
	pin_set_alternate_function(GPIOB, PORTB_I2C1_SDA, 4);
	pin_set_output_type(GPIOB, PORTB_I2C1_SCL, PIN_OUTPUT_TYPE_OPEN_DRAIN);
	pin_set_output_type(GPIOB, PORTB_I2C1_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);

	pin_set_alternate_function(GPIOA, PORTA_I2C3_SCL, 4);
 80007da:	4e5a      	ldr	r6, [pc, #360]	; (8000944 <portsInit+0x1b0>)
	pin_set_alternate_function(GPIOC, PORTC_I2C3_SDA, 4);
 80007dc:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8000954 <portsInit+0x1c0>

	handPorts.encoderI2CAddress[0] = AS5048_7BIT_ADDRESS;
	handPorts.encoderI2CAddress[1] = AS5048_7BIT_ADDRESS_SPI;
	handPorts.encoderI2CAddress[2] = AS5048_7BIT_ADDRESS;

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 80007e0:	f043 030f 	orr.w	r3, r3, #15
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
	              RCC_AHB1ENR_GPIOBEN |
	              RCC_AHB1ENR_GPIOCEN |
	              RCC_AHB1ENR_GPIODEN;
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN |
 80007e6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80007e8:	f443 0320 	orr.w	r3, r3, #10485760	; 0xa00000
 80007ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f0:	6413      	str	r3, [r2, #64]	; 0x40
	              RCC_APB1ENR_I2C3EN |
	              RCC_APB1ENR_SPI2EN;
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80007f2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80007f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007f8:	6453      	str	r3, [r2, #68]	; 0x44

	pin_set_alternate_function(GPIOB, PORTB_I2C1_SCL, 4);
 80007fa:	4638      	mov	r0, r7
 80007fc:	2106      	movs	r1, #6
 80007fe:	2204      	movs	r2, #4
 8000800:	f002 fdb0 	bl	8003364 <pin_set_alternate_function>
	pin_set_alternate_function(GPIOB, PORTB_I2C1_SDA, 4);
 8000804:	4638      	mov	r0, r7
 8000806:	2107      	movs	r1, #7
 8000808:	2204      	movs	r2, #4
 800080a:	f002 fdab 	bl	8003364 <pin_set_alternate_function>
	pin_set_output_type(GPIOB, PORTB_I2C1_SCL, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 800080e:	4638      	mov	r0, r7
 8000810:	2106      	movs	r1, #6
 8000812:	2201      	movs	r2, #1
 8000814:	f002 fd98 	bl	8003348 <pin_set_output_type>
	pin_set_output_type(GPIOB, PORTB_I2C1_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 8000818:	4638      	mov	r0, r7
 800081a:	2107      	movs	r1, #7
 800081c:	2201      	movs	r2, #1
 800081e:	f002 fd93 	bl	8003348 <pin_set_output_type>

	pin_set_alternate_function(GPIOA, PORTA_I2C3_SCL, 4);
 8000822:	4630      	mov	r0, r6
 8000824:	2108      	movs	r1, #8
 8000826:	2204      	movs	r2, #4
 8000828:	f002 fd9c 	bl	8003364 <pin_set_alternate_function>
	pin_set_alternate_function(GPIOC, PORTC_I2C3_SDA, 4);
 800082c:	4640      	mov	r0, r8
 800082e:	2109      	movs	r1, #9
 8000830:	2204      	movs	r2, #4
 8000832:	f002 fd97 	bl	8003364 <pin_set_alternate_function>
	pin_set_output_type(GPIOA, PORTA_I2C3_SCL, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 8000836:	4630      	mov	r0, r6
 8000838:	2108      	movs	r1, #8
 800083a:	2201      	movs	r2, #1
 800083c:	f002 fd84 	bl	8003348 <pin_set_output_type>
	pin_set_output_type(GPIOC, PORTC_I2C3_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 8000840:	2201      	movs	r2, #1
 8000842:	4640      	mov	r0, r8
 8000844:	2109      	movs	r1, #9
 8000846:	f002 fd7f 	bl	8003348 <pin_set_output_type>

	//I2C1->CCR |= I2C_CCR_FS | // set fast mode
	//             35; // 42 MHz / (3 * 400 kHz) == 35
	//I2C1->TRISE = 42 * 300 / 1000 + 1; // not sure here.
	I2C1->CR2   |= APB_MHZ; // 42MHz -> 101010
 800084a:	88ab      	ldrh	r3, [r5, #4]
 800084c:	b29b      	uxth	r3, r3
 800084e:	f043 032a 	orr.w	r3, r3, #42	; 0x2a
 8000852:	80ab      	strh	r3, [r5, #4]
	I2C1->CCR   |= I2C_CCR; // I2C_CCR = 210
 8000854:	8bab      	ldrh	r3, [r5, #28]
 8000856:	b29b      	uxth	r3, r3
 8000858:	f043 03d2 	orr.w	r3, r3, #210	; 0xd2
 800085c:	83ab      	strh	r3, [r5, #28]
	I2C1->TRISE &= ~0x3f; // 0x3f = 0b00111111 -> 0b11000000, clearing register
 800085e:	8c2b      	ldrh	r3, [r5, #32]
 8000860:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000864:	041b      	lsls	r3, r3, #16
 8000866:	0c1b      	lsrs	r3, r3, #16
 8000868:	842b      	strh	r3, [r5, #32]
	I2C1->TRISE |= I2C_TRISE; // = I2C_TRISE = (APB_MHZ * 200 / 1000 + 1), maximum rise time
 800086a:	8c2b      	ldrh	r3, [r5, #32]
 800086c:	b29b      	uxth	r3, r3
 800086e:	f043 0309 	orr.w	r3, r3, #9
 8000872:	842b      	strh	r3, [r5, #32]
	I2C1->CR1   |= I2C_CR1_PE; // peripheral enable
 8000874:	882b      	ldrh	r3, [r5, #0]
 8000876:	b29b      	uxth	r3, r3
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	802b      	strh	r3, [r5, #0]

	I2C3->CR2   |= APB_MHZ;
 800087e:	88a3      	ldrh	r3, [r4, #4]
 8000880:	b29b      	uxth	r3, r3
 8000882:	f043 032a 	orr.w	r3, r3, #42	; 0x2a
 8000886:	80a3      	strh	r3, [r4, #4]
	I2C3->CCR   |= I2C_CCR;
 8000888:	8ba3      	ldrh	r3, [r4, #28]
 800088a:	b29b      	uxth	r3, r3
 800088c:	f043 03d2 	orr.w	r3, r3, #210	; 0xd2
 8000890:	83a3      	strh	r3, [r4, #28]
	I2C3->TRISE &= ~0x3f;
 8000892:	8c23      	ldrh	r3, [r4, #32]
 8000894:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000898:	041b      	lsls	r3, r3, #16
 800089a:	0c1b      	lsrs	r3, r3, #16
 800089c:	8423      	strh	r3, [r4, #32]
	I2C3->TRISE |= I2C_TRISE;
 800089e:	8c23      	ldrh	r3, [r4, #32]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	f043 0309 	orr.w	r3, r3, #9
 80008a6:	8423      	strh	r3, [r4, #32]
	I2C3->CR1   |= I2C_CR1_PE;
 80008a8:	8823      	ldrh	r3, [r4, #0]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	8023      	strh	r3, [r4, #0]

	// now, set up the spi-to-i2c bridges
	pin_set_output(GPIOC, PORTC_I2C_BRIDGE_RESET);
 80008b2:	4640      	mov	r0, r8
 80008b4:	210e      	movs	r1, #14
 80008b6:	f002 fd83 	bl	80033c0 <pin_set_output>
	pin_set_output(GPIOA, PORTA_BRIDGE0_CS);
 80008ba:	4630      	mov	r0, r6
 80008bc:	2104      	movs	r1, #4
 80008be:	f002 fd7f 	bl	80033c0 <pin_set_output>
	pin_set_output(GPIOB, PORTB_BRIDGE1_CS);
 80008c2:	4638      	mov	r0, r7
 80008c4:	2109      	movs	r1, #9
 80008c6:	f002 fd7b 	bl	80033c0 <pin_set_output>
	pin_set_output_level(GPIOA, PORTA_BRIDGE0_CS, 1);
 80008ca:	4630      	mov	r0, r6
 80008cc:	2104      	movs	r1, #4
 80008ce:	2201      	movs	r2, #1
 80008d0:	f002 fd86 	bl	80033e0 <pin_set_output_level>
	pin_set_output_level(GPIOA, PORTB_BRIDGE1_CS, 1);
 80008d4:	4630      	mov	r0, r6
 80008d6:	2109      	movs	r1, #9
 80008d8:	2201      	movs	r2, #1
 80008da:	f002 fd81 	bl	80033e0 <pin_set_output_level>

	pin_set_alternate_function(GPIOA, PORTA_BRIDGE0_MISO, 5);
 80008de:	4630      	mov	r0, r6
 80008e0:	2106      	movs	r1, #6
 80008e2:	2205      	movs	r2, #5
 80008e4:	f002 fd3e 	bl	8003364 <pin_set_alternate_function>
	pin_set_alternate_function(GPIOB, PORTB_BRIDGE0_MOSI, 5);
 80008e8:	2105      	movs	r1, #5
 80008ea:	460a      	mov	r2, r1
 80008ec:	4638      	mov	r0, r7
 80008ee:	f002 fd39 	bl	8003364 <pin_set_alternate_function>
	pin_set_alternate_function(GPIOA, PORTA_BRIDGE0_SCLK, 5);
 80008f2:	2105      	movs	r1, #5
 80008f4:	460a      	mov	r2, r1
 80008f6:	4630      	mov	r0, r6
 80008f8:	f002 fd34 	bl	8003364 <pin_set_alternate_function>
	pin_set_alternate_function(GPIOC, PORTC_BRIDGE1_MISO, 5);
 80008fc:	4640      	mov	r0, r8
 80008fe:	2102      	movs	r1, #2
 8000900:	2205      	movs	r2, #5
 8000902:	f002 fd2f 	bl	8003364 <pin_set_alternate_function>
	pin_set_alternate_function(GPIOC, PORTC_BRIDGE1_MOSI, 5);
 8000906:	4640      	mov	r0, r8
 8000908:	2103      	movs	r1, #3
 800090a:	2205      	movs	r2, #5
 800090c:	f002 fd2a 	bl	8003364 <pin_set_alternate_function>
	pin_set_alternate_function(GPIOD, PORTD_BRIDGE1_SCLK, 5);
 8000910:	2103      	movs	r1, #3
 8000912:	2205      	movs	r2, #5
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <portsInit+0x1b4>)
 8000916:	f002 fd25 	bl	8003364 <pin_set_alternate_function>
	          SPI_CR1_SSM  | // software slave-select mode
	          SPI_CR1_SSI  | // the value of this bit is forced onto the NSS pin and the IO value of the NSS pin is ignored.
	          SPI_CR1_SPE;   // SPI enable

	// bit rate = 42 mhz / 32 = 1.313 MHz
	SPI2->CR1 = SPI_CR1_BR_2 | // sclk = pclk/32
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <portsInit+0x1b8>)
	pin_set_alternate_function(GPIOD, PORTD_BRIDGE1_SCLK, 5);

	// SPI1
	// running from a 84 MHz pclk. set it up with
	// sclk = pclk/64 to stay within datasheet limits.
	SPI1->CR1 = SPI_CR1_BR_2 | // sclk = pclk/64
 800091c:	f240 316f 	movw	r1, #879	; 0x36f
	          SPI_CR1_SSM  | // software slave-select mode
	          SPI_CR1_SSI  | // the value of this bit is forced onto the NSS pin and the IO value of the NSS pin is ignored.
	          SPI_CR1_SPE;   // SPI enable

	// bit rate = 42 mhz / 32 = 1.313 MHz
	SPI2->CR1 = SPI_CR1_BR_2 | // sclk = pclk/32
 8000920:	f240 3267 	movw	r2, #871	; 0x367
	pin_set_alternate_function(GPIOD, PORTD_BRIDGE1_SCLK, 5);

	// SPI1
	// running from a 84 MHz pclk. set it up with
	// sclk = pclk/64 to stay within datasheet limits.
	SPI1->CR1 = SPI_CR1_BR_2 | // sclk = pclk/64
 8000924:	f8a9 1000 	strh.w	r1, [r9]
	          SPI_CR1_SSM  | // software slave-select mode
	          SPI_CR1_SSI  | // the value of this bit is forced onto the NSS pin and the IO value of the NSS pin is ignored.
	          SPI_CR1_SPE;   // SPI enable

	// bit rate = 42 mhz / 32 = 1.313 MHz
	SPI2->CR1 = SPI_CR1_BR_2 | // sclk = pclk/32
 8000928:	801a      	strh	r2, [r3, #0]
 800092a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800092e:	bf00      	nop
 8000930:	20010074 	.word	0x20010074
 8000934:	40005c00 	.word	0x40005c00
 8000938:	40005400 	.word	0x40005400
 800093c:	40023800 	.word	0x40023800
 8000940:	40020400 	.word	0x40020400
 8000944:	40020000 	.word	0x40020000
 8000948:	40020c00 	.word	0x40020c00
 800094c:	40003800 	.word	0x40003800
 8000950:	40013000 	.word	0x40013000
 8000954:	40020800 	.word	0x40020800

08000958 <init>:
#include "config.h"

void init()
{  
 8000958:	b508      	push	{r3, lr}
  systime_init();                  // sets the timing functions, important to be before anything else that uses time
 800095a:	f001 fb6d 	bl	8002038 <systime_init>
  udelay(1000000);                 // give some time for everything to power up
 800095e:	4812      	ldr	r0, [pc, #72]	; (80009a8 <init+0x50>)
 8000960:	f001 fb8c 	bl	800207c <udelay>
  
  consoleInit();                   // console for printf over UART
 8000964:	f000 fe10 	bl	8001588 <consoleInit>
  portsInit();                     // microcontroller and hand configuration
 8000968:	f7ff ff14 	bl	8000794 <portsInit>

  state_init();
 800096c:	f002 fde0 	bl	8003530 <state_init>

  takktileInit();                  // takktile
 8000970:	f002 fa1c 	bl	8002dac <takktileInit>
  encInit();                       // encoders
 8000974:	f002 fd3e 	bl	80033f4 <encInit>
  imuInit();
 8000978:	f7ff fdde 	bl	8000538 <imuInit>

  leds_init();
 800097c:	f000 fd76 	bl	800146c <leds_init>
  enet_init();
 8000980:	f000 fede 	bl	8001740 <enet_init>
  dmxl_init();
 8000984:	f001 fcba 	bl	80022fc <dmxl_init>
  fan_init();
 8000988:	f002 f9e8 	bl	8002d5c <fan_init>
  
  
  fan_on();                        // todo: be smarter. probably doesn't need to run all the time.
 800098c:	f002 f9f6 	bl	8002d7c <fan_on>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000990:	b662      	cpsie	i
  __enable_irq();
  dmxl_set_baud_rates();
 8000992:	f001 fed7 	bl	8002744 <dmxl_set_baud_rates>
  dmxl_set_status_return_levels();
 8000996:	f001 fe7d 	bl	8002694 <dmxl_set_status_return_levels>


  asyncInit();                     // initiate state machine
 800099a:	f002 fe21 	bl	80035e0 <asyncInit>

  printf("Hand initialization ended.\n");
 800099e:	4803      	ldr	r0, [pc, #12]	; (80009ac <init+0x54>)
}
 80009a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  dmxl_set_status_return_levels();


  asyncInit();                     // initiate state machine

  printf("Hand initialization ended.\n");
 80009a4:	f003 b89e 	b.w	8003ae4 <puts>
 80009a8:	000f4240 	.word	0x000f4240
 80009ac:	0800a7c0 	.word	0x0800a7c0

080009b0 <printInfo>:
}

void printInfo(uint type)
{
 80009b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch(type)
 80009b4:	4607      	mov	r7, r0

  printf("Hand initialization ended.\n");
}

void printInfo(uint type)
{
 80009b6:	b087      	sub	sp, #28
  switch(type)
 80009b8:	b330      	cbz	r0, 8000a08 <printInfo+0x58>
 80009ba:	2801      	cmp	r0, #1
 80009bc:	d121      	bne.n	8000a02 <printInfo+0x52>
      //   printf(" %d", handState.takktile_pressures[i]);
      // }
      // printf("\n");
      break;
    case HAND_STATUS_INFO:
      printf("Hand Status:\n");
 80009be:	485a      	ldr	r0, [pc, #360]	; (8000b28 <printInfo+0x178>)
 80009c0:	4d5a      	ldr	r5, [pc, #360]	; (8000b2c <printInfo+0x17c>)
 80009c2:	f003 f88f 	bl	8003ae4 <puts>
      printf("\tTakktile Sensors: \n");
 80009c6:	485a      	ldr	r0, [pc, #360]	; (8000b30 <printInfo+0x180>)
 80009c8:	f003 f88c 	bl	8003ae4 <puts>
 80009cc:	f04f 0800 	mov.w	r8, #0
      for (int j = 0; j < NUM_FINGERS; j++)
 80009d0:	4647      	mov	r7, r8
      {
        printf("\t\tFinger %d) %d: ", j + 1, handStatus.finger[j]);
 80009d2:	5dea      	ldrb	r2, [r5, r7]
 80009d4:	4857      	ldr	r0, [pc, #348]	; (8000b34 <printInfo+0x184>)
 80009d6:	3701      	adds	r7, #1
 80009d8:	4639      	mov	r1, r7
 80009da:	f003 f82f 	bl	8003a3c <printf>
 80009de:	eb07 06c7 	add.w	r6, r7, r7, lsl #3
 80009e2:	4644      	mov	r4, r8
        for (int i = 0; i < SENSORS_PER_FINGER; i++)
        {
          printf("%d ", handStatus.takktileSensor[j * SENSORS_PER_FINGER + i]);
 80009e4:	192b      	adds	r3, r5, r4
 80009e6:	4854      	ldr	r0, [pc, #336]	; (8000b38 <printInfo+0x188>)
 80009e8:	78d9      	ldrb	r1, [r3, #3]
 80009ea:	3401      	adds	r4, #1
 80009ec:	f003 f826 	bl	8003a3c <printf>
      printf("Hand Status:\n");
      printf("\tTakktile Sensors: \n");
      for (int j = 0; j < NUM_FINGERS; j++)
      {
        printf("\t\tFinger %d) %d: ", j + 1, handStatus.finger[j]);
        for (int i = 0; i < SENSORS_PER_FINGER; i++)
 80009f0:	42a6      	cmp	r6, r4
 80009f2:	d1f7      	bne.n	80009e4 <printInfo+0x34>
        {
          printf("%d ", handStatus.takktileSensor[j * SENSORS_PER_FINGER + i]);
        }
        printf("\n");
 80009f4:	200a      	movs	r0, #10
 80009f6:	f003 f839 	bl	8003a6c <putchar>
      // printf("\n");
      break;
    case HAND_STATUS_INFO:
      printf("Hand Status:\n");
      printf("\tTakktile Sensors: \n");
      for (int j = 0; j < NUM_FINGERS; j++)
 80009fa:	2f03      	cmp	r7, #3
 80009fc:	f108 0809 	add.w	r8, r8, #9
 8000a00:	d1e7      	bne.n	80009d2 <printInfo+0x22>
    break;

    default:
      break;
  }  
 8000a02:	b007      	add	sp, #28
 8000a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
void printInfo(uint type)
{
  switch(type)
  {
    case HAND_STATE_INFO:
      printf("Encoders: 1:%5d 2:%5d 3:%5d \n", handState.encoders[0], handState.encoders[1], handState.encoders[2]);
 8000a08:	4d4c      	ldr	r5, [pc, #304]	; (8000b3c <printInfo+0x18c>)
 8000a0a:	484d      	ldr	r0, [pc, #308]	; (8000b40 <printInfo+0x190>)
 8000a0c:	f8b5 10a0 	ldrh.w	r1, [r5, #160]	; 0xa0
 8000a10:	f8b5 20a2 	ldrh.w	r2, [r5, #162]	; 0xa2
 8000a14:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8000a18:	b289      	uxth	r1, r1
 8000a1a:	b292      	uxth	r2, r2
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	f003 f80d 	bl	8003a3c <printf>
 8000a22:	2609      	movs	r6, #9
      for (int j = 0; j < NUM_FINGERS; j++)
      {
        printf("Pressures %d: ", j);
 8000a24:	4847      	ldr	r0, [pc, #284]	; (8000b44 <printInfo+0x194>)
 8000a26:	4639      	mov	r1, r7
 8000a28:	f003 f808 	bl	8003a3c <printf>
 8000a2c:	eb07 04c7 	add.w	r4, r7, r7, lsl #3
        for (int i = 0; i < SENSORS_PER_FINGER; i++)
        {
          printf("%3d ", handState.takktile_pressures[j * SENSORS_PER_FINGER + i]);
 8000a30:	1d23      	adds	r3, r4, #4
 8000a32:	4845      	ldr	r0, [pc, #276]	; (8000b48 <printInfo+0x198>)
 8000a34:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
 8000a38:	3401      	adds	r4, #1
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	f002 fffe 	bl	8003a3c <printf>
    case HAND_STATE_INFO:
      printf("Encoders: 1:%5d 2:%5d 3:%5d \n", handState.encoders[0], handState.encoders[1], handState.encoders[2]);
      for (int j = 0; j < NUM_FINGERS; j++)
      {
        printf("Pressures %d: ", j);
        for (int i = 0; i < SENSORS_PER_FINGER; i++)
 8000a40:	42b4      	cmp	r4, r6
 8000a42:	d1f5      	bne.n	8000a30 <printInfo+0x80>
{
  switch(type)
  {
    case HAND_STATE_INFO:
      printf("Encoders: 1:%5d 2:%5d 3:%5d \n", handState.encoders[0], handState.encoders[1], handState.encoders[2]);
      for (int j = 0; j < NUM_FINGERS; j++)
 8000a44:	3701      	adds	r7, #1
        printf("Pressures %d: ", j);
        for (int i = 0; i < SENSORS_PER_FINGER; i++)
        {
          printf("%3d ", handState.takktile_pressures[j * SENSORS_PER_FINGER + i]);
        }
        printf("\n");
 8000a46:	200a      	movs	r0, #10
 8000a48:	f003 f810 	bl	8003a6c <putchar>
{
  switch(type)
  {
    case HAND_STATE_INFO:
      printf("Encoders: 1:%5d 2:%5d 3:%5d \n", handState.encoders[0], handState.encoders[1], handState.encoders[2]);
      for (int j = 0; j < NUM_FINGERS; j++)
 8000a4c:	2f03      	cmp	r7, #3
 8000a4e:	f104 0609 	add.w	r6, r4, #9
 8000a52:	d1e7      	bne.n	8000a24 <printInfo+0x74>
 8000a54:	2400      	movs	r4, #0
 8000a56:	46a2      	mov	sl, r4
        printf("\n");
      }
      for (int i = 0; i < NUM_IMUS; i++)
      {
        const double scale = (1.0 / (1<<14));
        printf("IMU %2d: W: %6d X: %6d Y: %6d Z: %6d\n", i, handState.imus[4*i], handState.imus[4*i + 1], handState.imus[4*i + 2], handState.imus[4*i + 3]);
 8000a58:	f104 0964 	add.w	r9, r4, #100	; 0x64
 8000a5c:	f104 0865 	add.w	r8, r4, #101	; 0x65
 8000a60:	f104 0766 	add.w	r7, r4, #102	; 0x66
 8000a64:	f104 0667 	add.w	r6, r4, #103	; 0x67
 8000a68:	eb05 0949 	add.w	r9, r5, r9, lsl #1
 8000a6c:	eb05 0848 	add.w	r8, r5, r8, lsl #1
 8000a70:	eb05 0747 	add.w	r7, r5, r7, lsl #1
 8000a74:	eb05 0646 	add.w	r6, r5, r6, lsl #1
 8000a78:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8000a7c:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8000a80:	f8b7 e002 	ldrh.w	lr, [r7, #2]
 8000a84:	8871      	ldrh	r1, [r6, #2]
 8000a86:	4831      	ldr	r0, [pc, #196]	; (8000b4c <printInfo+0x19c>)
 8000a88:	fa1f fe8e 	uxth.w	lr, lr
 8000a8c:	b289      	uxth	r1, r1
 8000a8e:	f8cd e000 	str.w	lr, [sp]
 8000a92:	b292      	uxth	r2, r2
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	9101      	str	r1, [sp, #4]
 8000a98:	4651      	mov	r1, sl
 8000a9a:	f002 ffcf 	bl	8003a3c <printf>
        printf("        W: %6.2f X: %6.2f Y: %6.2f Z: %6.2f", scale*handState.imus[4*i], scale*handState.imus[4*i + 1], scale*handState.imus[4*i + 2], scale*handState.imus[4*i + 3]);
 8000a9e:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 8000aa2:	f8b8 b002 	ldrh.w	fp, [r8, #2]
 8000aa6:	f8b7 9002 	ldrh.w	r9, [r7, #2]
 8000aaa:	f8b6 8002 	ldrh.w	r8, [r6, #2]
 8000aae:	b280      	uxth	r0, r0
 8000ab0:	f008 ffe6 	bl	8009a80 <__aeabi_i2d>
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4b26      	ldr	r3, [pc, #152]	; (8000b50 <printInfo+0x1a0>)
 8000ab8:	f009 f848 	bl	8009b4c <__aeabi_dmul>
 8000abc:	fa1f fb8b 	uxth.w	fp, fp
 8000ac0:	4606      	mov	r6, r0
 8000ac2:	4658      	mov	r0, fp
 8000ac4:	460f      	mov	r7, r1
 8000ac6:	f008 ffdb 	bl	8009a80 <__aeabi_i2d>
 8000aca:	2200      	movs	r2, #0
 8000acc:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <printInfo+0x1a0>)
 8000ace:	f009 f83d 	bl	8009b4c <__aeabi_dmul>
 8000ad2:	fa1f f989 	uxth.w	r9, r9
 8000ad6:	e9cd 0100 	strd	r0, r1, [sp]
 8000ada:	4648      	mov	r0, r9
 8000adc:	f008 ffd0 	bl	8009a80 <__aeabi_i2d>
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <printInfo+0x1a0>)
 8000ae4:	f009 f832 	bl	8009b4c <__aeabi_dmul>
 8000ae8:	fa1f f888 	uxth.w	r8, r8
 8000aec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000af0:	4640      	mov	r0, r8
 8000af2:	f008 ffc5 	bl	8009a80 <__aeabi_i2d>
 8000af6:	2200      	movs	r2, #0
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <printInfo+0x1a0>)
 8000afa:	f009 f827 	bl	8009b4c <__aeabi_dmul>
 8000afe:	4632      	mov	r2, r6
 8000b00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8000b04:	463b      	mov	r3, r7
 8000b06:	4813      	ldr	r0, [pc, #76]	; (8000b54 <printInfo+0x1a4>)
 8000b08:	f002 ff98 	bl	8003a3c <printf>
        {
          printf("%3d ", handState.takktile_pressures[j * SENSORS_PER_FINGER + i]);
        }
        printf("\n");
      }
      for (int i = 0; i < NUM_IMUS; i++)
 8000b0c:	f10a 0a01 	add.w	sl, sl, #1
        const double scale = (1.0 / (1<<14));
        printf("IMU %2d: W: %6d X: %6d Y: %6d Z: %6d\n", i, handState.imus[4*i], handState.imus[4*i + 1], handState.imus[4*i + 2], handState.imus[4*i + 3]);
        printf("        W: %6.2f X: %6.2f Y: %6.2f Z: %6.2f", scale*handState.imus[4*i], scale*handState.imus[4*i + 1], scale*handState.imus[4*i + 2], scale*handState.imus[4*i + 3]);
                

        printf("\n");
 8000b10:	200a      	movs	r0, #10
 8000b12:	f002 ffab 	bl	8003a6c <putchar>
        {
          printf("%3d ", handState.takktile_pressures[j * SENSORS_PER_FINGER + i]);
        }
        printf("\n");
      }
      for (int i = 0; i < NUM_IMUS; i++)
 8000b16:	f1ba 0f04 	cmp.w	sl, #4
 8000b1a:	f104 0404 	add.w	r4, r4, #4
 8000b1e:	d19b      	bne.n	8000a58 <printInfo+0xa8>
    break;

    default:
      break;
  }  
 8000b20:	b007      	add	sp, #28
 8000b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b26:	bf00      	nop
 8000b28:	0800a868 	.word	0x0800a868
 8000b2c:	200102e8 	.word	0x200102e8
 8000b30:	0800a878 	.word	0x0800a878
 8000b34:	0800a88c 	.word	0x0800a88c
 8000b38:	0800a8a0 	.word	0x0800a8a0
 8000b3c:	200101fc 	.word	0x200101fc
 8000b40:	0800a7dc 	.word	0x0800a7dc
 8000b44:	0800a7fc 	.word	0x0800a7fc
 8000b48:	0800a80c 	.word	0x0800a80c
 8000b4c:	0800a814 	.word	0x0800a814
 8000b50:	3f100000 	.word	0x3f100000
 8000b54:	0800a83c 	.word	0x0800a83c

08000b58 <unmapped_vector>:
  while (1) { } // hopefully we never get here...
}

void unmapped_vector()
{
  while (1) { } // spin to allow jtag trap
 8000b58:	e7fe      	b.n	8000b58 <unmapped_vector>
 8000b5a:	bf00      	nop

08000b5c <reset_vector>:
extern int main();

void startup_clock_init_fail() { while (1) { } }

void reset_vector()
{
 8000b5c:	b510      	push	{r4, lr}
 8000b5e:	b082      	sub	sp, #8
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
  //WDT->WDT_MR = WDT_MR_WDDIS; // disable watchdog for now
  // set up data segment
  __disable_irq();
  pSrc = &_srelocate_flash;
  pDest = &_srelocate;
  if (pSrc != pDest)
 8000b62:	4a46      	ldr	r2, [pc, #280]	; (8000c7c <reset_vector+0x120>)
 8000b64:	4946      	ldr	r1, [pc, #280]	; (8000c80 <reset_vector+0x124>)
 8000b66:	428a      	cmp	r2, r1
 8000b68:	d00e      	beq.n	8000b88 <reset_vector+0x2c>
    for (; pDest < &_erelocate; )
 8000b6a:	4b46      	ldr	r3, [pc, #280]	; (8000c84 <reset_vector+0x128>)
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	d20b      	bcs.n	8000b88 <reset_vector+0x2c>
 8000b70:	43c8      	mvns	r0, r1
 8000b72:	4403      	add	r3, r0
 8000b74:	f023 0303 	bic.w	r3, r3, #3
 8000b78:	3304      	adds	r3, #4
 8000b7a:	4413      	add	r3, r2
      *pDest++ = *pSrc++;
 8000b7c:	f852 0b04 	ldr.w	r0, [r2], #4
 8000b80:	f841 0b04 	str.w	r0, [r1], #4
  // set up data segment
  __disable_irq();
  pSrc = &_srelocate_flash;
  pDest = &_srelocate;
  if (pSrc != pDest)
    for (; pDest < &_erelocate; )
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d1f9      	bne.n	8000b7c <reset_vector+0x20>
      *pDest++ = *pSrc++;
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
 8000b88:	4b3f      	ldr	r3, [pc, #252]	; (8000c88 <reset_vector+0x12c>)
 8000b8a:	4a40      	ldr	r2, [pc, #256]	; (8000c8c <reset_vector+0x130>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d20a      	bcs.n	8000ba6 <reset_vector+0x4a>
 8000b90:	43d9      	mvns	r1, r3
 8000b92:	440a      	add	r2, r1
 8000b94:	f022 0203 	bic.w	r2, r2, #3
 8000b98:	3204      	adds	r2, #4
 8000b9a:	441a      	add	r2, r3
    *pDest++ = 0;
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f843 1b04 	str.w	r1, [r3], #4
  pDest = &_srelocate;
  if (pSrc != pDest)
    for (; pDest < &_erelocate; )
      *pDest++ = *pSrc++;
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d1fb      	bne.n	8000b9e <reset_vector+0x42>
    *pDest++ = 0;
  //__libc_init_array() ;
  SCB->CPACR |= ((3UL << (10*2)) | (3UL << (11*2))); // activate the FPU
 8000ba6:	493a      	ldr	r1, [pc, #232]	; (8000c90 <reset_vector+0x134>)
  RCC->CR |= 0x1; // ensure the HSI (internal) oscillator is on
 8000ba8:	4b3a      	ldr	r3, [pc, #232]	; (8000c94 <reset_vector+0x138>)
      *pDest++ = *pSrc++;
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
    *pDest++ = 0;
  //__libc_init_array() ;
  SCB->CPACR |= ((3UL << (10*2)) | (3UL << (11*2))); // activate the FPU
 8000baa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
  RCC->CR |= 0x1; // ensure the HSI (internal) oscillator is on
  RCC->CFGR = 0; // ensure the HSI oscillator is the clock source
  RCC->CR &= 0xfef6ffff; // turn off the main PLL and HSE oscillator
  RCC->PLLCFGR = 0x24003010; // ensure PLLCFGR is at reset state
 8000bae:	483a      	ldr	r0, [pc, #232]	; (8000c98 <reset_vector+0x13c>)
      *pDest++ = *pSrc++;
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
    *pDest++ = 0;
  //__libc_init_array() ;
  SCB->CPACR |= ((3UL << (10*2)) | (3UL << (11*2))); // activate the FPU
 8000bb0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000bb4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= 0x1; // ensure the HSI (internal) oscillator is on
 8000bb8:	681a      	ldr	r2, [r3, #0]
  RCC->CFGR = 0; // ensure the HSI oscillator is the clock source
 8000bba:	2100      	movs	r1, #0
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
    *pDest++ = 0;
  //__libc_init_array() ;
  SCB->CPACR |= ((3UL << (10*2)) | (3UL << (11*2))); // activate the FPU
  RCC->CR |= 0x1; // ensure the HSI (internal) oscillator is on
 8000bbc:	f042 0201 	orr.w	r2, r2, #1
 8000bc0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0; // ensure the HSI oscillator is the clock source
 8000bc2:	6099      	str	r1, [r3, #8]
  RCC->CR &= 0xfef6ffff; // turn off the main PLL and HSE oscillator
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000bca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000bce:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010; // ensure PLLCFGR is at reset state
 8000bd0:	6058      	str	r0, [r3, #4]
  RCC->CR &= 0xfffbffff; // reset HSEBYP (i.e., HSE is *not* bypassed)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000bd8:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x0; // disable all RCC interrupts
 8000bda:	60d9      	str	r1, [r3, #12]
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000be2:	601a      	str	r2, [r3, #0]
  for (volatile uint32_t i = 0; 
 8000be4:	9101      	str	r1, [sp, #4]
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
 8000be6:	9a01      	ldr	r2, [sp, #4]
  RCC->CR &= 0xfef6ffff; // turn off the main PLL and HSE oscillator
  RCC->PLLCFGR = 0x24003010; // ensure PLLCFGR is at reset state
  RCC->CR &= 0xfffbffff; // reset HSEBYP (i.e., HSE is *not* bypassed)
  RCC->CIR = 0x0; // disable all RCC interrupts
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
  for (volatile uint32_t i = 0; 
 8000be8:	f5b2 4fa0 	cmp.w	r2, #20480	; 0x5000
 8000bec:	d307      	bcc.n	8000bfe <reset_vector+0xa2>
 8000bee:	e009      	b.n	8000c04 <reset_vector+0xa8>
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
 8000bf0:	9a01      	ldr	r2, [sp, #4]
 8000bf2:	3201      	adds	r2, #1
 8000bf4:	9201      	str	r2, [sp, #4]
 8000bf6:	9a01      	ldr	r2, [sp, #4]
  RCC->CR &= 0xfef6ffff; // turn off the main PLL and HSE oscillator
  RCC->PLLCFGR = 0x24003010; // ensure PLLCFGR is at reset state
  RCC->CR &= 0xfffbffff; // reset HSEBYP (i.e., HSE is *not* bypassed)
  RCC->CIR = 0x0; // disable all RCC interrupts
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
  for (volatile uint32_t i = 0; 
 8000bf8:	f5b2 4fa0 	cmp.w	r2, #20480	; 0x5000
 8000bfc:	d202      	bcs.n	8000c04 <reset_vector+0xa8>
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	0390      	lsls	r0, r2, #14
 8000c02:	d5f5      	bpl.n	8000bf0 <reset_vector+0x94>
  { } // wait for either timeout or HSE to spin up
  FLASH->ACR = 0; // ensure the caches are turned off, so we can reset them
 8000c04:	4a25      	ldr	r2, [pc, #148]	; (8000c9c <reset_vector+0x140>)
  FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST; // flush the cache
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | 
               FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS; // re-enable the caches
  if (!(RCC->CR & RCC_CR_HSERDY))
 8000c06:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <reset_vector+0x138>)
  RCC->CIR = 0x0; // disable all RCC interrupts
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
  for (volatile uint32_t i = 0; 
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
  { } // wait for either timeout or HSE to spin up
  FLASH->ACR = 0; // ensure the caches are turned off, so we can reset them
 8000c08:	2400      	movs	r4, #0
  FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST; // flush the cache
 8000c0a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | 
 8000c0e:	f240 7105 	movw	r1, #1797	; 0x705
  RCC->CIR = 0x0; // disable all RCC interrupts
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
  for (volatile uint32_t i = 0; 
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
  { } // wait for either timeout or HSE to spin up
  FLASH->ACR = 0; // ensure the caches are turned off, so we can reset them
 8000c12:	6014      	str	r4, [r2, #0]
  FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST; // flush the cache
 8000c14:	6010      	str	r0, [r2, #0]
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | 
 8000c16:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS; // re-enable the caches
  if (!(RCC->CR & RCC_CR_HSERDY))
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	0394      	lsls	r4, r2, #14
 8000c1c:	d400      	bmi.n	8000c20 <reset_vector+0xc4>
 8000c1e:	e7fe      	b.n	8000c1e <reset_vector+0xc2>
    startup_clock_init_fail(); // go there and spin forever. BUH BYE
  RCC->APB1ENR |= RCC_APB1ENR_PWREN; // clock up the power controller
 8000c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_VOS; // ensure the voltage regulator is at max beef
 8000c22:	491f      	ldr	r1, [pc, #124]	; (8000ca0 <reset_vector+0x144>)
  // PLL_VCO = 25 mhz / PLL_M * PLL_N = 336 MHz
  #define PLL_P   2
  // SYSCLK = PLL_VCO / PLL_P = 168 MHz
  #define PLL_Q   7
  // USB clock = PLL_VCO / PLL_Q = 48 MHz
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1)-1) << 16) |
 8000c24:	481f      	ldr	r0, [pc, #124]	; (8000ca4 <reset_vector+0x148>)
  FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST; // flush the cache
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | 
               FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS; // re-enable the caches
  if (!(RCC->CR & RCC_CR_HSERDY))
    startup_clock_init_fail(); // go there and spin forever. BUH BYE
  RCC->APB1ENR |= RCC_APB1ENR_PWREN; // clock up the power controller
 8000c26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c2a:	641a      	str	r2, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_VOS; // ensure the voltage regulator is at max beef
 8000c2c:	680a      	ldr	r2, [r1, #0]
 8000c2e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000c32:	600a      	str	r2, [r1, #0]
                         // this will let us run at 168 MHz without overdrive
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1; // set HCLK (AHB clock) to sysclock
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV2; // set APB high-speed clock to sysclock/2
 8000c38:	689a      	ldr	r2, [r3, #8]
 8000c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c3e:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV4; // set APB  low-speed clock to sysclock/4
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000c46:	609a      	str	r2, [r3, #8]
  // PLL_VCO = 25 mhz / PLL_M * PLL_N = 336 MHz
  #define PLL_P   2
  // SYSCLK = PLL_VCO / PLL_P = 168 MHz
  #define PLL_Q   7
  // USB clock = PLL_VCO / PLL_Q = 48 MHz
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1)-1) << 16) |
 8000c48:	6058      	str	r0, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
  RCC->CR |= RCC_CR_PLLON; // start spinning up the PLL
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000c50:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY)) { } // wait until it's spun up
 8000c52:	6819      	ldr	r1, [r3, #0]
 8000c54:	4a0f      	ldr	r2, [pc, #60]	; (8000c94 <reset_vector+0x138>)
 8000c56:	0189      	lsls	r1, r1, #6
 8000c58:	d5fb      	bpl.n	8000c52 <reset_vector+0xf6>
  RCC->CFGR &= ~((uint32_t)RCC_CFGR_SW); // select internal oscillator
 8000c5a:	6893      	ldr	r3, [r2, #8]
 8000c5c:	f023 0303 	bic.w	r3, r3, #3
 8000c60:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL; // select PLL as clock source
 8000c62:	6893      	ldr	r3, [r2, #8]
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL) { } // wait for it...
 8000c6a:	6893      	ldr	r3, [r2, #8]
 8000c6c:	f003 030c 	and.w	r3, r3, #12
 8000c70:	2b08      	cmp	r3, #8
 8000c72:	d1fa      	bne.n	8000c6a <reset_vector+0x10e>
  // hooray we're done! we're now running at 168 MHz.
  main(); // jump to application main()
 8000c74:	f7ff fc2c 	bl	80004d0 <main>
  while (1) { } // hopefully we never get here...
 8000c78:	e7fe      	b.n	8000c78 <reset_vector+0x11c>
 8000c7a:	bf00      	nop
 8000c7c:	0800afcc 	.word	0x0800afcc
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000964 	.word	0x20000964
 8000c88:	20000968 	.word	0x20000968
 8000c8c:	2001031c 	.word	0x2001031c
 8000c90:	e000ed00 	.word	0xe000ed00
 8000c94:	40023800 	.word	0x40023800
 8000c98:	24003010 	.word	0x24003010
 8000c9c:	40023c00 	.word	0x40023c00
 8000ca0:	40007000 	.word	0x40007000
 8000ca4:	07405419 	.word	0x07405419

08000ca8 <startup_clock_init_fail>:
#include "./stm32/stm32f4xx.h"

extern uint32_t _srelocate_flash, _srelocate, _erelocate, _ebss, _sbss;
extern int main();

void startup_clock_init_fail() { while (1) { } }
 8000ca8:	e7fe      	b.n	8000ca8 <startup_clock_init_fail>
 8000caa:	bf00      	nop

08000cac <writeBytesI2C>:
#include "i2cFunc.h"

uint8_t writeBytesI2C(uint32_t* port, uint8_t address, uint8_t* data, int len, int toggleAddress)
{
 8000cac:	b570      	push	{r4, r5, r6, lr}
 8000cae:	b082      	sub	sp, #8
  volatile int initialTime = SYSTIME;
 8000cb0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
#include "i2cFunc.h"

uint8_t writeBytesI2C(uint32_t* port, uint8_t address, uint8_t* data, int len, int toggleAddress)
{
 8000cb4:	9c06      	ldr	r4, [sp, #24]
  volatile int initialTime = SYSTIME;
 8000cb6:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8000cb8:	9501      	str	r5, [sp, #4]

  I2C_TypeDef *i2cPort = (I2C_TypeDef *) port;

  uint8_t addr;
  if (toggleAddress == 0)
 8000cba:	b90c      	cbnz	r4, 8000cc0 <writeBytesI2C+0x14>
    addr = address << 1;
 8000cbc:	0049      	lsls	r1, r1, #1
 8000cbe:	b2c9      	uxtb	r1, r1
  else
    addr = address;                          

  // Send the address with the read bit
  // starting I2C communication
  i2cPort->CR1 |=  I2C_CR1_START;
 8000cc0:	8804      	ldrh	r4, [r0, #0]
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8000cc8:	8004      	strh	r4, [r0, #0]
  i2cPort->SR1 &= ~I2C_SR1_AF;
 8000cca:	8a84      	ldrh	r4, [r0, #20]
 8000ccc:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8000cd0:	0424      	lsls	r4, r4, #16
 8000cd2:	0c24      	lsrs	r4, r4, #16
 8000cd4:	8284      	strh	r4, [r0, #20]

  while (!(i2cPort->SR1 & I2C_SR1_SB) && (SYSTIME - initialTime < I2C_TIMEOUT));
 8000cd6:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8000cda:	e005      	b.n	8000ce8 <writeBytesI2C+0x3c>
 8000cdc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8000cde:	9d01      	ldr	r5, [sp, #4]
 8000ce0:	1b64      	subs	r4, r4, r5
 8000ce2:	f5b4 7f2f 	cmp.w	r4, #700	; 0x2bc
 8000ce6:	d202      	bcs.n	8000cee <writeBytesI2C+0x42>
 8000ce8:	8a84      	ldrh	r4, [r0, #20]
 8000cea:	07e4      	lsls	r4, r4, #31
 8000cec:	d5f6      	bpl.n	8000cdc <writeBytesI2C+0x30>

  // Send address with write bit
  i2cPort->DR = ((uint8_t) addr); // puts the address to be sent on the buffer using global variable
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	8201      	strh	r1, [r0, #16]

  // printf("b\n");
  while(!(i2cPort->SR1 & (I2C_SR1_ADDR)) && (SYSTIME - initialTime < I2C_TIMEOUT));
 8000cf2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8000cf6:	e005      	b.n	8000d04 <writeBytesI2C+0x58>
 8000cf8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000cfa:	9c01      	ldr	r4, [sp, #4]
 8000cfc:	1b09      	subs	r1, r1, r4
 8000cfe:	f5b1 7f2f 	cmp.w	r1, #700	; 0x2bc
 8000d02:	d202      	bcs.n	8000d0a <writeBytesI2C+0x5e>
 8000d04:	8a81      	ldrh	r1, [r0, #20]
 8000d06:	0789      	lsls	r1, r1, #30
 8000d08:	d5f6      	bpl.n	8000cf8 <writeBytesI2C+0x4c>

  i2cPort->SR2; // un-stretch clock by reading here (?)

  for (int i = 0; i < len; ++i)
 8000d0a:	2b00      	cmp	r3, #0
  i2cPort->DR = ((uint8_t) addr); // puts the address to be sent on the buffer using global variable

  // printf("b\n");
  while(!(i2cPort->SR1 & (I2C_SR1_ADDR)) && (SYSTIME - initialTime < I2C_TIMEOUT));

  i2cPort->SR2; // un-stretch clock by reading here (?)
 8000d0c:	8b01      	ldrh	r1, [r0, #24]

  for (int i = 0; i < len; ++i)
 8000d0e:	dd17      	ble.n	8000d40 <writeBytesI2C+0x94>
 8000d10:	18d5      	adds	r5, r2, r3
  {
      i2cPort->DR = data[i]; // Send the address of the desired register
      while (!(i2cPort->SR1 & (I2C_SR1_BTF | I2C_SR1_AF)) && (SYSTIME - initialTime < I2C_TIMEOUT));
 8000d12:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000

  i2cPort->SR2; // un-stretch clock by reading here (?)

  for (int i = 0; i < len; ++i)
  {
      i2cPort->DR = data[i]; // Send the address of the desired register
 8000d16:	f812 3b01 	ldrb.w	r3, [r2], #1
 8000d1a:	8203      	strh	r3, [r0, #16]
      while (!(i2cPort->SR1 & (I2C_SR1_BTF | I2C_SR1_AF)) && (SYSTIME - initialTime < I2C_TIMEOUT));
 8000d1c:	e005      	b.n	8000d2a <writeBytesI2C+0x7e>
 8000d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d20:	9901      	ldr	r1, [sp, #4]
 8000d22:	1a5b      	subs	r3, r3, r1
 8000d24:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000d28:	d208      	bcs.n	8000d3c <writeBytesI2C+0x90>
 8000d2a:	8a83      	ldrh	r3, [r0, #20]
 8000d2c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8000d30:	f023 0303 	bic.w	r3, r3, #3
 8000d34:	055b      	lsls	r3, r3, #21
 8000d36:	0d5b      	lsrs	r3, r3, #21
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0f0      	beq.n	8000d1e <writeBytesI2C+0x72>
  // printf("b\n");
  while(!(i2cPort->SR1 & (I2C_SR1_ADDR)) && (SYSTIME - initialTime < I2C_TIMEOUT));

  i2cPort->SR2; // un-stretch clock by reading here (?)

  for (int i = 0; i < len; ++i)
 8000d3c:	42aa      	cmp	r2, r5
 8000d3e:	d1ea      	bne.n	8000d16 <writeBytesI2C+0x6a>
  {
      i2cPort->DR = data[i]; // Send the address of the desired register
      while (!(i2cPort->SR1 & (I2C_SR1_BTF | I2C_SR1_AF)) && (SYSTIME - initialTime < I2C_TIMEOUT));
  }
  i2cPort->CR1 |= I2C_CR1_STOP;
 8000d40:	8803      	ldrh	r3, [r0, #0]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d48:	8003      	strh	r3, [r0, #0]

  while (isBusyI2CPort(port) && (SYSTIME - initialTime < I2C_TIMEOUT));
 8000d4a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000d4e:	e005      	b.n	8000d5c <writeBytesI2C+0xb0>
 8000d50:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000d52:	9a01      	ldr	r2, [sp, #4]
 8000d54:	1a9b      	subs	r3, r3, r2
 8000d56:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000d5a:	d202      	bcs.n	8000d62 <writeBytesI2C+0xb6>
}

uint8_t isBusyI2CPort(uint32_t* port)
{
  I2C_TypeDef *i2cPort = (I2C_TypeDef *) port;
  return i2cPort->SR2 & I2C_SR2_BUSY;
 8000d5c:	8b03      	ldrh	r3, [r0, #24]
      i2cPort->DR = data[i]; // Send the address of the desired register
      while (!(i2cPort->SR1 & (I2C_SR1_BTF | I2C_SR1_AF)) && (SYSTIME - initialTime < I2C_TIMEOUT));
  }
  i2cPort->CR1 |= I2C_CR1_STOP;

  while (isBusyI2CPort(port) && (SYSTIME - initialTime < I2C_TIMEOUT));
 8000d5e:	079b      	lsls	r3, r3, #30
 8000d60:	d4f6      	bmi.n	8000d50 <writeBytesI2C+0xa4>

  if (SYSTIME - initialTime >= I2C_TIMEOUT)
 8000d62:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d68:	9a01      	ldr	r2, [sp, #4]
 8000d6a:	1a9b      	subs	r3, r3, r2
 8000d6c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000d70:	d20e      	bcs.n	8000d90 <writeBytesI2C+0xe4>
    printf(" finalTime: %d", (int) SYSTIME);
    printf(" TIMEOUT\n");
    return 0;
  }
  static int maxTime = 0;
  maxTime = (SYSTIME - initialTime) > maxTime ? (SYSTIME - initialTime) : maxTime;
 8000d72:	4910      	ldr	r1, [pc, #64]	; (8000db4 <writeBytesI2C+0x108>)
 8000d74:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d76:	9801      	ldr	r0, [sp, #4]
 8000d78:	680b      	ldr	r3, [r1, #0]
 8000d7a:	1a12      	subs	r2, r2, r0
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d803      	bhi.n	8000d88 <writeBytesI2C+0xdc>
  // printf("writeBytesI2C: %d, maxTime: %d\n", (int) SYSTIME - initialTime, maxTime);
  return 1;
 8000d80:	2001      	movs	r0, #1
    printf(" finalTime: %d", (int) SYSTIME);
    printf(" TIMEOUT\n");
    return 0;
  }
  static int maxTime = 0;
  maxTime = (SYSTIME - initialTime) > maxTime ? (SYSTIME - initialTime) : maxTime;
 8000d82:	600b      	str	r3, [r1, #0]
  // printf("writeBytesI2C: %d, maxTime: %d\n", (int) SYSTIME - initialTime, maxTime);
  return 1;
}
 8000d84:	b002      	add	sp, #8
 8000d86:	bd70      	pop	{r4, r5, r6, pc}
    printf(" finalTime: %d", (int) SYSTIME);
    printf(" TIMEOUT\n");
    return 0;
  }
  static int maxTime = 0;
  maxTime = (SYSTIME - initialTime) > maxTime ? (SYSTIME - initialTime) : maxTime;
 8000d88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d8a:	9a01      	ldr	r2, [sp, #4]
 8000d8c:	1a9b      	subs	r3, r3, r2
 8000d8e:	e7f7      	b.n	8000d80 <writeBytesI2C+0xd4>

  while (isBusyI2CPort(port) && (SYSTIME - initialTime < I2C_TIMEOUT));

  if (SYSTIME - initialTime >= I2C_TIMEOUT)
  {
    printf("writeBytesI2C: ");
 8000d90:	4809      	ldr	r0, [pc, #36]	; (8000db8 <writeBytesI2C+0x10c>)
 8000d92:	f002 fe53 	bl	8003a3c <printf>
    printf(" initialTime: %d", initialTime);
 8000d96:	9901      	ldr	r1, [sp, #4]
 8000d98:	4808      	ldr	r0, [pc, #32]	; (8000dbc <writeBytesI2C+0x110>)
 8000d9a:	f002 fe4f 	bl	8003a3c <printf>
    printf(" finalTime: %d", (int) SYSTIME);
 8000d9e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000da0:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <writeBytesI2C+0x114>)
 8000da2:	f002 fe4b 	bl	8003a3c <printf>
    printf(" TIMEOUT\n");
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <writeBytesI2C+0x118>)
 8000da8:	f002 fe9c 	bl	8003ae4 <puts>
    return 0;
 8000dac:	2000      	movs	r0, #0
  }
  static int maxTime = 0;
  maxTime = (SYSTIME - initialTime) > maxTime ? (SYSTIME - initialTime) : maxTime;
  // printf("writeBytesI2C: %d, maxTime: %d\n", (int) SYSTIME - initialTime, maxTime);
  return 1;
}
 8000dae:	b002      	add	sp, #8
 8000db0:	bd70      	pop	{r4, r5, r6, pc}
 8000db2:	bf00      	nop
 8000db4:	20000988 	.word	0x20000988
 8000db8:	0800a8a4 	.word	0x0800a8a4
 8000dbc:	0800a8b4 	.word	0x0800a8b4
 8000dc0:	0800a8c8 	.word	0x0800a8c8
 8000dc4:	0800a8d8 	.word	0x0800a8d8

08000dc8 <writeRegisterI2C>:

uint8_t writeRegisterI2C(uint32_t* port, uint8_t address, uint8_t registerAddress)
{
 8000dc8:	b538      	push	{r3, r4, r5, lr}
  int initialTime = SYSTIME;
 8000dca:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8000dce:	6a6c      	ldr	r4, [r5, #36]	; 0x24

  I2C_TypeDef *i2cPort = (I2C_TypeDef *) port;
  // starting i2c communication on I2c bus 3 
  i2cPort->CR1 |=  I2C_CR1_START; // generating start condition
 8000dd0:	8803      	ldrh	r3, [r0, #0]
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd8:	8003      	strh	r3, [r0, #0]
  i2cPort->SR1 &= ~I2C_SR1_AF;    // clearing acknowledge
 8000dda:	8a83      	ldrh	r3, [r0, #20]
 8000ddc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000de0:	041b      	lsls	r3, r3, #16
 8000de2:	0c1b      	lsrs	r3, r3, #16
 8000de4:	8283      	strh	r3, [r0, #20]

  while (!(i2cPort->SR1 & I2C_SR1_SB) && (SYSTIME - initialTime < I2C_TIMEOUT)); 
 8000de6:	e004      	b.n	8000df2 <writeRegisterI2C+0x2a>
 8000de8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000dea:	1b1b      	subs	r3, r3, r4
 8000dec:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000df0:	d202      	bcs.n	8000df8 <writeRegisterI2C+0x30>
 8000df2:	8a83      	ldrh	r3, [r0, #20]
 8000df4:	07db      	lsls	r3, r3, #31
 8000df6:	d5f7      	bpl.n	8000de8 <writeRegisterI2C+0x20>
  // Send address with write bit
  i2cPort->DR = ((uint8_t) address << 1); // puts the address to be sent on the buffer using global variable
 8000df8:	0049      	lsls	r1, r1, #1
 8000dfa:	8201      	strh	r1, [r0, #16]

  while(!(i2cPort->SR1 & (I2C_SR1_ADDR)) && (SYSTIME - initialTime < I2C_TIMEOUT));
 8000dfc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000e00:	e004      	b.n	8000e0c <writeRegisterI2C+0x44>
 8000e02:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000e04:	1b1b      	subs	r3, r3, r4
 8000e06:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000e0a:	d202      	bcs.n	8000e12 <writeRegisterI2C+0x4a>
 8000e0c:	8a83      	ldrh	r3, [r0, #20]
 8000e0e:	079d      	lsls	r5, r3, #30
 8000e10:	d5f7      	bpl.n	8000e02 <writeRegisterI2C+0x3a>

  i2cPort->SR2; // un-stretch clock by reading here (?)

  i2cPort->DR = registerAddress; // Send the address of the desired register
 8000e12:	b292      	uxth	r2, r2
  // Send address with write bit
  i2cPort->DR = ((uint8_t) address << 1); // puts the address to be sent on the buffer using global variable

  while(!(i2cPort->SR1 & (I2C_SR1_ADDR)) && (SYSTIME - initialTime < I2C_TIMEOUT));

  i2cPort->SR2; // un-stretch clock by reading here (?)
 8000e14:	8b03      	ldrh	r3, [r0, #24]

  i2cPort->DR = registerAddress; // Send the address of the desired register
 8000e16:	8202      	strh	r2, [r0, #16]
  while (!(i2cPort->SR1 & (I2C_SR1_BTF | I2C_SR1_AF)) && (SYSTIME - initialTime < I2C_TIMEOUT));
 8000e18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e1c:	e004      	b.n	8000e28 <writeRegisterI2C+0x60>
 8000e1e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000e20:	1b1b      	subs	r3, r3, r4
 8000e22:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000e26:	d208      	bcs.n	8000e3a <writeRegisterI2C+0x72>
 8000e28:	8a83      	ldrh	r3, [r0, #20]
 8000e2a:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8000e2e:	f023 0303 	bic.w	r3, r3, #3
 8000e32:	055b      	lsls	r3, r3, #21
 8000e34:	0d5b      	lsrs	r3, r3, #21
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f1      	beq.n	8000e1e <writeRegisterI2C+0x56>

  i2cPort->CR1 |= I2C_CR1_STOP;
 8000e3a:	8803      	ldrh	r3, [r0, #0]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e42:	8003      	strh	r3, [r0, #0]

  while (isBusyI2CPort(port) && (SYSTIME - initialTime < I2C_TIMEOUT)); // wait until bus is not busy anymore  
 8000e44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e48:	e004      	b.n	8000e54 <writeRegisterI2C+0x8c>
 8000e4a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000e4c:	1b1b      	subs	r3, r3, r4
 8000e4e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000e52:	d202      	bcs.n	8000e5a <writeRegisterI2C+0x92>
}

uint8_t isBusyI2CPort(uint32_t* port)
{
  I2C_TypeDef *i2cPort = (I2C_TypeDef *) port;
  return i2cPort->SR2 & I2C_SR2_BUSY;
 8000e54:	8b03      	ldrh	r3, [r0, #24]
  i2cPort->DR = registerAddress; // Send the address of the desired register
  while (!(i2cPort->SR1 & (I2C_SR1_BTF | I2C_SR1_AF)) && (SYSTIME - initialTime < I2C_TIMEOUT));

  i2cPort->CR1 |= I2C_CR1_STOP;

  while (isBusyI2CPort(port) && (SYSTIME - initialTime < I2C_TIMEOUT)); // wait until bus is not busy anymore  
 8000e56:	079b      	lsls	r3, r3, #30
 8000e58:	d4f7      	bmi.n	8000e4a <writeRegisterI2C+0x82>

  if (SYSTIME - initialTime >= I2C_TIMEOUT)
 8000e5a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8000e5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000e60:	1b1b      	subs	r3, r3, r4
 8000e62:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000e66:	d20a      	bcs.n	8000e7e <writeRegisterI2C+0xb6>
    printf(" finalTime: %d", (int) SYSTIME);
    printf(" TIMEOUT\n");
    return 0;
  }
  static int maxTime = 0;
  maxTime = (SYSTIME - initialTime) > maxTime ? (SYSTIME - initialTime) : maxTime;
 8000e68:	490d      	ldr	r1, [pc, #52]	; (8000ea0 <writeRegisterI2C+0xd8>)
 8000e6a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000e6c:	680b      	ldr	r3, [r1, #0]
 8000e6e:	1b12      	subs	r2, r2, r4
 8000e70:	429a      	cmp	r2, r3
 8000e72:	bf84      	itt	hi
 8000e74:	6a6b      	ldrhi	r3, [r5, #36]	; 0x24
 8000e76:	1b1b      	subhi	r3, r3, r4
 8000e78:	600b      	str	r3, [r1, #0]
  // printf("writeRegisterI2C: %d, maxTime: %d\n", (int) SYSTIME - initialTime, maxTime);
  return 1;
 8000e7a:	2001      	movs	r0, #1
}
 8000e7c:	bd38      	pop	{r3, r4, r5, pc}

  while (isBusyI2CPort(port) && (SYSTIME - initialTime < I2C_TIMEOUT)); // wait until bus is not busy anymore  

  if (SYSTIME - initialTime >= I2C_TIMEOUT)
  {
    printf("writeRegisterI2C: ");
 8000e7e:	4809      	ldr	r0, [pc, #36]	; (8000ea4 <writeRegisterI2C+0xdc>)
 8000e80:	f002 fddc 	bl	8003a3c <printf>
    printf(" initialTime: %d", initialTime);
 8000e84:	4621      	mov	r1, r4
 8000e86:	4808      	ldr	r0, [pc, #32]	; (8000ea8 <writeRegisterI2C+0xe0>)
 8000e88:	f002 fdd8 	bl	8003a3c <printf>
    printf(" finalTime: %d", (int) SYSTIME);
 8000e8c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000e8e:	4807      	ldr	r0, [pc, #28]	; (8000eac <writeRegisterI2C+0xe4>)
 8000e90:	f002 fdd4 	bl	8003a3c <printf>
    printf(" TIMEOUT\n");
 8000e94:	4806      	ldr	r0, [pc, #24]	; (8000eb0 <writeRegisterI2C+0xe8>)
 8000e96:	f002 fe25 	bl	8003ae4 <puts>
    return 0;
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	bd38      	pop	{r3, r4, r5, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000984 	.word	0x20000984
 8000ea4:	0800a8e4 	.word	0x0800a8e4
 8000ea8:	0800a8b4 	.word	0x0800a8b4
 8000eac:	0800a8c8 	.word	0x0800a8c8
 8000eb0:	0800a8d8 	.word	0x0800a8d8

08000eb4 <setRegisterI2C>:
  // printf("writeRegisterI2C: %d, maxTime: %d\n", (int) SYSTIME - initialTime, maxTime);
  return 1;
}

uint8_t setRegisterI2C(uint32_t* port, uint8_t address, uint8_t registerAddress, uint8_t data)
{
 8000eb4:	b510      	push	{r4, lr}
 8000eb6:	b084      	sub	sp, #16
  uint8_t msg[2] = {registerAddress, data};
  return writeBytesI2C(port, address, msg, 2, 0);
 8000eb8:	2400      	movs	r4, #0
  return 1;
}

uint8_t setRegisterI2C(uint32_t* port, uint8_t address, uint8_t registerAddress, uint8_t data)
{
  uint8_t msg[2] = {registerAddress, data};
 8000eba:	f88d 200c 	strb.w	r2, [sp, #12]
 8000ebe:	f88d 300d 	strb.w	r3, [sp, #13]
  return writeBytesI2C(port, address, msg, 2, 0);
 8000ec2:	9400      	str	r4, [sp, #0]
 8000ec4:	aa03      	add	r2, sp, #12
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	f7ff fef0 	bl	8000cac <writeBytesI2C>
}
 8000ecc:	b004      	add	sp, #16
 8000ece:	bd10      	pop	{r4, pc}

08000ed0 <readBytesI2C>:

uint8_t readBytesI2C(uint32_t* port, uint8_t address, int numBytes, uint8_t* values)
{
 8000ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int initialTime = SYSTIME;
 8000ed2:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8000ed6:	6a75      	ldr	r5, [r6, #36]	; 0x24

  I2C_TypeDef *i2cPort = (I2C_TypeDef *) port;
  // Send the address with the read bit
  // starting I2C communication
  i2cPort->CR1 |=  I2C_CR1_START;
 8000ed8:	8804      	ldrh	r4, [r0, #0]
 8000eda:	b2a4      	uxth	r4, r4
 8000edc:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8000ee0:	8004      	strh	r4, [r0, #0]
  i2cPort->SR1 &= ~I2C_SR1_AF;  
 8000ee2:	8a84      	ldrh	r4, [r0, #20]
 8000ee4:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8000ee8:	0424      	lsls	r4, r4, #16
 8000eea:	0c24      	lsrs	r4, r4, #16
 8000eec:	8284      	strh	r4, [r0, #20]

  while (!(i2cPort->SR1 & I2C_SR1_SB) && (SYSTIME - initialTime < I2C_TIMEOUT));
 8000eee:	e004      	b.n	8000efa <readBytesI2C+0x2a>
 8000ef0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8000ef2:	1b64      	subs	r4, r4, r5
 8000ef4:	f5b4 7f2f 	cmp.w	r4, #700	; 0x2bc
 8000ef8:	d202      	bcs.n	8000f00 <readBytesI2C+0x30>
 8000efa:	8a84      	ldrh	r4, [r0, #20]
 8000efc:	07e7      	lsls	r7, r4, #31
 8000efe:	d5f7      	bpl.n	8000ef0 <readBytesI2C+0x20>

  // Send address with read bit
  i2cPort->DR = ((uint8_t) address << 1) + 1; // puts the address to be sent on the buffer using global variable
 8000f00:	0049      	lsls	r1, r1, #1
 8000f02:	3101      	adds	r1, #1
 8000f04:	8201      	strh	r1, [r0, #16]

  while (!(i2cPort->SR1 & (I2C_SR1_ADDR)) && (SYSTIME - initialTime < I2C_TIMEOUT));
 8000f06:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000f0a:	e004      	b.n	8000f16 <readBytesI2C+0x46>
 8000f0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f0e:	1b49      	subs	r1, r1, r5
 8000f10:	f5b1 7f2f 	cmp.w	r1, #700	; 0x2bc
 8000f14:	d202      	bcs.n	8000f1c <readBytesI2C+0x4c>
 8000f16:	8a81      	ldrh	r1, [r0, #20]
 8000f18:	078e      	lsls	r6, r1, #30
 8000f1a:	d5f7      	bpl.n	8000f0c <readBytesI2C+0x3c>
  i2cPort->SR2; // un-stretch clock by reading here (?)
 8000f1c:	8b01      	ldrh	r1, [r0, #24]

  i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable
 8000f1e:	8801      	ldrh	r1, [r0, #0]
 8000f20:	b289      	uxth	r1, r1
 8000f22:	f441 6180 	orr.w	r1, r1, #1024	; 0x400

  for (int i = 0; i < numBytes-1; i++)
 8000f26:	2a01      	cmp	r2, #1
  i2cPort->DR = ((uint8_t) address << 1) + 1; // puts the address to be sent on the buffer using global variable

  while (!(i2cPort->SR1 & (I2C_SR1_ADDR)) && (SYSTIME - initialTime < I2C_TIMEOUT));
  i2cPort->SR2; // un-stretch clock by reading here (?)

  i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable
 8000f28:	8001      	strh	r1, [r0, #0]

  for (int i = 0; i < numBytes-1; i++)
 8000f2a:	dd17      	ble.n	8000f5c <readBytesI2C+0x8c>
 8000f2c:	1e97      	subs	r7, r2, #2
 8000f2e:	441f      	add	r7, r3
 8000f30:	1e5e      	subs	r6, r3, #1
  {
    while (!(i2cPort->SR1 & I2C_SR1_RXNE) && (SYSTIME - initialTime < I2C_TIMEOUT));
 8000f32:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000f36:	e004      	b.n	8000f42 <readBytesI2C+0x72>
 8000f38:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8000f3a:	1b64      	subs	r4, r4, r5
 8000f3c:	f5b4 7f2f 	cmp.w	r4, #700	; 0x2bc
 8000f40:	d202      	bcs.n	8000f48 <readBytesI2C+0x78>
 8000f42:	8a84      	ldrh	r4, [r0, #20]
 8000f44:	0664      	lsls	r4, r4, #25
 8000f46:	d5f7      	bpl.n	8000f38 <readBytesI2C+0x68>
    values[i] = i2cPort->DR;
 8000f48:	8a04      	ldrh	r4, [r0, #16]
 8000f4a:	f806 4f01 	strb.w	r4, [r6, #1]!
    i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable
 8000f4e:	8804      	ldrh	r4, [r0, #0]
 8000f50:	b2a4      	uxth	r4, r4
 8000f52:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
  while (!(i2cPort->SR1 & (I2C_SR1_ADDR)) && (SYSTIME - initialTime < I2C_TIMEOUT));
  i2cPort->SR2; // un-stretch clock by reading here (?)

  i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable

  for (int i = 0; i < numBytes-1; i++)
 8000f56:	42be      	cmp	r6, r7
  {
    while (!(i2cPort->SR1 & I2C_SR1_RXNE) && (SYSTIME - initialTime < I2C_TIMEOUT));
    values[i] = i2cPort->DR;
    i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable
 8000f58:	8004      	strh	r4, [r0, #0]
  while (!(i2cPort->SR1 & (I2C_SR1_ADDR)) && (SYSTIME - initialTime < I2C_TIMEOUT));
  i2cPort->SR2; // un-stretch clock by reading here (?)

  i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable

  for (int i = 0; i < numBytes-1; i++)
 8000f5a:	d1f2      	bne.n	8000f42 <readBytesI2C+0x72>
  {
    while (!(i2cPort->SR1 & I2C_SR1_RXNE) && (SYSTIME - initialTime < I2C_TIMEOUT));
    values[i] = i2cPort->DR;
    i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable
  }
  while (!(i2cPort->SR1 & I2C_SR1_RXNE) && (SYSTIME - initialTime < I2C_TIMEOUT));
 8000f5c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000f60:	e004      	b.n	8000f6c <readBytesI2C+0x9c>
 8000f62:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f64:	1b49      	subs	r1, r1, r5
 8000f66:	f5b1 7f2f 	cmp.w	r1, #700	; 0x2bc
 8000f6a:	d202      	bcs.n	8000f72 <readBytesI2C+0xa2>
 8000f6c:	8a81      	ldrh	r1, [r0, #20]
 8000f6e:	0649      	lsls	r1, r1, #25
 8000f70:	d5f7      	bpl.n	8000f62 <readBytesI2C+0x92>

  values[numBytes-1] = i2cPort->DR;
 8000f72:	4413      	add	r3, r2
 8000f74:	8a02      	ldrh	r2, [r0, #16]
 8000f76:	f803 2c01 	strb.w	r2, [r3, #-1]
  i2cPort->CR1 &= ~I2C_CR1_ACK; // last read
 8000f7a:	8803      	ldrh	r3, [r0, #0]
 8000f7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f80:	041b      	lsls	r3, r3, #16
 8000f82:	0c1b      	lsrs	r3, r3, #16
 8000f84:	8003      	strh	r3, [r0, #0]

  i2cPort->CR1 |= I2C_CR1_STOP;
 8000f86:	8803      	ldrh	r3, [r0, #0]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8e:	8003      	strh	r3, [r0, #0]

  while (isBusyI2CPort(port) && (SYSTIME - initialTime < I2C_TIMEOUT));
 8000f90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f94:	e004      	b.n	8000fa0 <readBytesI2C+0xd0>
 8000f96:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000f98:	1b5b      	subs	r3, r3, r5
 8000f9a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000f9e:	d202      	bcs.n	8000fa6 <readBytesI2C+0xd6>
}

uint8_t isBusyI2CPort(uint32_t* port)
{
  I2C_TypeDef *i2cPort = (I2C_TypeDef *) port;
  return i2cPort->SR2 & I2C_SR2_BUSY;
 8000fa0:	8b03      	ldrh	r3, [r0, #24]
  values[numBytes-1] = i2cPort->DR;
  i2cPort->CR1 &= ~I2C_CR1_ACK; // last read

  i2cPort->CR1 |= I2C_CR1_STOP;

  while (isBusyI2CPort(port) && (SYSTIME - initialTime < I2C_TIMEOUT));
 8000fa2:	079b      	lsls	r3, r3, #30
 8000fa4:	d4f7      	bmi.n	8000f96 <readBytesI2C+0xc6>

  if (SYSTIME - initialTime >= I2C_TIMEOUT)
 8000fa6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fac:	1b5b      	subs	r3, r3, r5
 8000fae:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000fb2:	d201      	bcs.n	8000fb8 <readBytesI2C+0xe8>
    return 0;
  }
  // static int maxTime = 0; // CORRECT
  // maxTime = (SYSTIME - initialTime) > maxTime ? (SYSTIME - initialTime) : maxTime;
  // printf("readBytesI2C: %d, maxTime: %d\n", (int) SYSTIME - initialTime, maxTime);
  return 1;
 8000fb4:	2001      	movs	r0, #1
}
 8000fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  while (isBusyI2CPort(port) && (SYSTIME - initialTime < I2C_TIMEOUT));

  if (SYSTIME - initialTime >= I2C_TIMEOUT)
  {
    printf("readBytesI2C: ");
 8000fb8:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <readBytesI2C+0x108>)
 8000fba:	f002 fd3f 	bl	8003a3c <printf>
    printf(" initialTime: %d", initialTime);
 8000fbe:	4629      	mov	r1, r5
 8000fc0:	4806      	ldr	r0, [pc, #24]	; (8000fdc <readBytesI2C+0x10c>)
 8000fc2:	f002 fd3b 	bl	8003a3c <printf>
    printf(" finalTime: %d", (int) SYSTIME);
 8000fc6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <readBytesI2C+0x110>)
 8000fca:	f002 fd37 	bl	8003a3c <printf>
    printf(" TIMEOUT\n");
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <readBytesI2C+0x114>)
 8000fd0:	f002 fd88 	bl	8003ae4 <puts>
    return 0;
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fd8:	0800a8f8 	.word	0x0800a8f8
 8000fdc:	0800a8b4 	.word	0x0800a8b4
 8000fe0:	0800a8c8 	.word	0x0800a8c8
 8000fe4:	0800a8d8 	.word	0x0800a8d8

08000fe8 <isBusyI2CPort>:
}

uint8_t isBusyI2CPort(uint32_t* port)
{
  I2C_TypeDef *i2cPort = (I2C_TypeDef *) port;
  return i2cPort->SR2 & I2C_SR2_BUSY;
 8000fe8:	8b00      	ldrh	r0, [r0, #24]
 8000fea:	f000 0002 	and.w	r0, r0, #2
 8000fee:	4770      	bx	lr

08000ff0 <resetConverter>:
#include "spiFunc.h"

void resetConverter(void)
{
 8000ff0:	b538      	push	{r3, r4, r5, lr}
  // the two SPI-I2C bridges have their RESETs tied to a common MCU pin,
  // so this function will reset both of them
  GPIOC->BSRRH = 1 << PORTC_I2C_BRIDGE_RESET;
 8000ff2:	4c07      	ldr	r4, [pc, #28]	; (8001010 <resetConverter+0x20>)
 8000ff4:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8000ff8:	8365      	strh	r5, [r4, #26]
  udelay(1000);
 8000ffa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ffe:	f001 f83d 	bl	800207c <udelay>
  GPIOC->BSRRL = 1 << PORTC_I2C_BRIDGE_RESET;
 8001002:	8325      	strh	r5, [r4, #24]
  udelay(1000);
 8001004:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 8001008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // the two SPI-I2C bridges have their RESETs tied to a common MCU pin,
  // so this function will reset both of them
  GPIOC->BSRRH = 1 << PORTC_I2C_BRIDGE_RESET;
  udelay(1000);
  GPIOC->BSRRL = 1 << PORTC_I2C_BRIDGE_RESET;
  udelay(1000);
 800100c:	f001 b836 	b.w	800207c <udelay>
 8001010:	40020800 	.word	0x40020800

08001014 <writeConverterRegister>:
  else
    return 1;
}

uint8_t writeConverterRegister(uint8_t registerAddress, uint8_t data)
{
 8001014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SPI_TypeDef *spiPort = SPI1;
  GPIO_TypeDef *cs_gpio = GPIOA;
  const uint8_t msg[3] = {SC18IS601_WRITE_REGISTER_COMMAND, registerAddress, data};
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;           // assert CS
 8001018:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <writeConverterRegister+0xb4>)
  udelay(4);                              // delay 4us

  spiPort->DR;
 800101a:	4c2c      	ldr	r4, [pc, #176]	; (80010cc <writeConverterRegister+0xb8>)
  else
    return 1;
}

uint8_t writeConverterRegister(uint8_t registerAddress, uint8_t data)
{
 800101c:	b082      	sub	sp, #8
  uint32_t startTime = SYSTIME;
 800101e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  SPI_TypeDef *spiPort = SPI1;
  GPIO_TypeDef *cs_gpio = GPIOA;
  const uint8_t msg[3] = {SC18IS601_WRITE_REGISTER_COMMAND, registerAddress, data};
 8001022:	2520      	movs	r5, #32
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;           // assert CS
 8001024:	2210      	movs	r2, #16
    return 1;
}

uint8_t writeConverterRegister(uint8_t registerAddress, uint8_t data)
{
  uint32_t startTime = SYSTIME;
 8001026:	6a77      	ldr	r7, [r6, #36]	; 0x24
  SPI_TypeDef *spiPort = SPI1;
  GPIO_TypeDef *cs_gpio = GPIOA;
  const uint8_t msg[3] = {SC18IS601_WRITE_REGISTER_COMMAND, registerAddress, data};
 8001028:	f88d 0005 	strb.w	r0, [sp, #5]
 800102c:	f88d 1006 	strb.w	r1, [sp, #6]
 8001030:	f88d 5004 	strb.w	r5, [sp, #4]
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;           // assert CS
  udelay(4);                              // delay 4us
 8001034:	2004      	movs	r0, #4
  SPI_TypeDef *spiPort = SPI1;
  GPIO_TypeDef *cs_gpio = GPIOA;
  const uint8_t msg[3] = {SC18IS601_WRITE_REGISTER_COMMAND, registerAddress, data};
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;           // assert CS
 8001036:	835a      	strh	r2, [r3, #26]
  udelay(4);                              // delay 4us
 8001038:	f001 f820 	bl	800207c <udelay>

  spiPort->DR;
  udelay(15); 
 800103c:	200f      	movs	r0, #15
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;           // assert CS
  udelay(4);                              // delay 4us

  spiPort->DR;
 800103e:	89a3      	ldrh	r3, [r4, #12]
 8001040:	f10d 0804 	add.w	r8, sp, #4
  udelay(15); 
 8001044:	f001 f81a 	bl	800207c <udelay>
 8001048:	462b      	mov	r3, r5
 800104a:	f10d 0506 	add.w	r5, sp, #6

  for (int i = 0; i < 3; ++i)
  {
    spiPort->DR = msg[i];                     // send write register command 
 800104e:	b29b      	uxth	r3, r3
 8001050:	81a3      	strh	r3, [r4, #12]
    while (!(spiPort->SR & SPI_SR_TXE) && (SYSTIME - startTime < SPI_TIMEOUT));       // wait for buffer room
 8001052:	e004      	b.n	800105e <writeConverterRegister+0x4a>
 8001054:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001056:	1bdb      	subs	r3, r3, r7
 8001058:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800105c:	d20a      	bcs.n	8001074 <writeConverterRegister+0x60>
 800105e:	8923      	ldrh	r3, [r4, #8]
 8001060:	0799      	lsls	r1, r3, #30
 8001062:	d5f7      	bpl.n	8001054 <writeConverterRegister+0x40>
    while (!(spiPort->SR & SPI_SR_RXNE) && (SYSTIME - startTime < SPI_TIMEOUT));
 8001064:	8923      	ldrh	r3, [r4, #8]
 8001066:	07da      	lsls	r2, r3, #31
 8001068:	d40f      	bmi.n	800108a <writeConverterRegister+0x76>
 800106a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800106c:	1bdb      	subs	r3, r3, r7
 800106e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001072:	d20a      	bcs.n	800108a <writeConverterRegister+0x76>
 8001074:	8923      	ldrh	r3, [r4, #8]
 8001076:	07da      	lsls	r2, r3, #31
 8001078:	d5f7      	bpl.n	800106a <writeConverterRegister+0x56>
    while ((spiPort->SR & SPI_SR_BSY)  && (SYSTIME - startTime < SPI_TIMEOUT));
 800107a:	8923      	ldrh	r3, [r4, #8]
 800107c:	061b      	lsls	r3, r3, #24
 800107e:	d507      	bpl.n	8001090 <writeConverterRegister+0x7c>
 8001080:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001082:	1bdb      	subs	r3, r3, r7
 8001084:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001088:	d202      	bcs.n	8001090 <writeConverterRegister+0x7c>
 800108a:	8923      	ldrh	r3, [r4, #8]
 800108c:	061b      	lsls	r3, r3, #24
 800108e:	d4f7      	bmi.n	8001080 <writeConverterRegister+0x6c>
    spiPort->DR;
    udelay(15);                                // delay 15us
 8001090:	200f      	movs	r0, #15
  {
    spiPort->DR = msg[i];                     // send write register command 
    while (!(spiPort->SR & SPI_SR_TXE) && (SYSTIME - startTime < SPI_TIMEOUT));       // wait for buffer room
    while (!(spiPort->SR & SPI_SR_RXNE) && (SYSTIME - startTime < SPI_TIMEOUT));
    while ((spiPort->SR & SPI_SR_BSY)  && (SYSTIME - startTime < SPI_TIMEOUT));
    spiPort->DR;
 8001092:	89a3      	ldrh	r3, [r4, #12]
    udelay(15);                                // delay 15us
 8001094:	f000 fff2 	bl	800207c <udelay>
  udelay(4);                              // delay 4us

  spiPort->DR;
  udelay(15); 

  for (int i = 0; i < 3; ++i)
 8001098:	45a8      	cmp	r8, r5
 800109a:	d002      	beq.n	80010a2 <writeConverterRegister+0x8e>
 800109c:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 80010a0:	e7d5      	b.n	800104e <writeConverterRegister+0x3a>
    while (!(spiPort->SR & SPI_SR_RXNE) && (SYSTIME - startTime < SPI_TIMEOUT));
    while ((spiPort->SR & SPI_SR_BSY)  && (SYSTIME - startTime < SPI_TIMEOUT));
    spiPort->DR;
    udelay(15);                                // delay 15us
  }
  cs_gpio->BSRRL = cs_pin_mask;           // de-assert CS
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <writeConverterRegister+0xb4>)
 80010a4:	2210      	movs	r2, #16
 80010a6:	831a      	strh	r2, [r3, #24]
  udelay(5);
 80010a8:	2005      	movs	r0, #5
 80010aa:	f000 ffe7 	bl	800207c <udelay>

  if (SYSTIME - startTime > SPI_TIMEOUT)
 80010ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80010b4:	1bc0      	subs	r0, r0, r7
    return 0;
  return 1;
}
 80010b6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80010ba:	bf8c      	ite	hi
 80010bc:	2000      	movhi	r0, #0
 80010be:	2001      	movls	r0, #1
 80010c0:	b002      	add	sp, #8
 80010c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010c6:	bf00      	nop
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40013000 	.word	0x40013000

080010d0 <readConverterRegister>:
uint8_t readConverterRegister(uint8_t registerAddress, uint8_t *data)
{
 80010d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  SPI_TypeDef *spiPort = SPI1;
  GPIO_TypeDef *cs_gpio = GPIOA;
  const uint8_t msg[3] = {SC18IS601_READ_REGISTER_COMMAND, registerAddress, 0x00};
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  
  cs_gpio->BSRRH = cs_pin_mask; // assert CS
 80010d4:	4b30      	ldr	r3, [pc, #192]	; (8001198 <readConverterRegister+0xc8>)
  udelay(4);

  spiPort->DR;
 80010d6:	4c31      	ldr	r4, [pc, #196]	; (800119c <readConverterRegister+0xcc>)
  if (SYSTIME - startTime > SPI_TIMEOUT)
    return 0;
  return 1;
}
uint8_t readConverterRegister(uint8_t registerAddress, uint8_t *data)
{
 80010d8:	b082      	sub	sp, #8
  uint32_t startTime = SYSTIME;
 80010da:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  SPI_TypeDef *spiPort = SPI1;
  GPIO_TypeDef *cs_gpio = GPIOA;
  const uint8_t msg[3] = {SC18IS601_READ_REGISTER_COMMAND, registerAddress, 0x00};
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  
  cs_gpio->BSRRH = cs_pin_mask; // assert CS
 80010de:	2210      	movs	r2, #16
uint8_t readConverterRegister(uint8_t registerAddress, uint8_t *data)
{
  uint32_t startTime = SYSTIME;
  SPI_TypeDef *spiPort = SPI1;
  GPIO_TypeDef *cs_gpio = GPIOA;
  const uint8_t msg[3] = {SC18IS601_READ_REGISTER_COMMAND, registerAddress, 0x00};
 80010e0:	f04f 0a21 	mov.w	sl, #33	; 0x21
 80010e4:	f04f 0800 	mov.w	r8, #0
    return 0;
  return 1;
}
uint8_t readConverterRegister(uint8_t registerAddress, uint8_t *data)
{
  uint32_t startTime = SYSTIME;
 80010e8:	6a77      	ldr	r7, [r6, #36]	; 0x24
  SPI_TypeDef *spiPort = SPI1;
  GPIO_TypeDef *cs_gpio = GPIOA;
  const uint8_t msg[3] = {SC18IS601_READ_REGISTER_COMMAND, registerAddress, 0x00};
 80010ea:	f88d 0005 	strb.w	r0, [sp, #5]
 80010ee:	f88d a004 	strb.w	sl, [sp, #4]
 80010f2:	f88d 8006 	strb.w	r8, [sp, #6]
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  
  cs_gpio->BSRRH = cs_pin_mask; // assert CS
  udelay(4);
 80010f6:	2004      	movs	r0, #4
  SPI_TypeDef *spiPort = SPI1;
  GPIO_TypeDef *cs_gpio = GPIOA;
  const uint8_t msg[3] = {SC18IS601_READ_REGISTER_COMMAND, registerAddress, 0x00};
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  
  cs_gpio->BSRRH = cs_pin_mask; // assert CS
 80010f8:	835a      	strh	r2, [r3, #26]
  if (SYSTIME - startTime > SPI_TIMEOUT)
    return 0;
  return 1;
}
uint8_t readConverterRegister(uint8_t registerAddress, uint8_t *data)
{
 80010fa:	460d      	mov	r5, r1
  GPIO_TypeDef *cs_gpio = GPIOA;
  const uint8_t msg[3] = {SC18IS601_READ_REGISTER_COMMAND, registerAddress, 0x00};
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  
  cs_gpio->BSRRH = cs_pin_mask; // assert CS
  udelay(4);
 80010fc:	f000 ffbe 	bl	800207c <udelay>

  spiPort->DR;
  udelay(15); 
 8001100:	200f      	movs	r0, #15
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  
  cs_gpio->BSRRH = cs_pin_mask; // assert CS
  udelay(4);

  spiPort->DR;
 8001102:	89a3      	ldrh	r3, [r4, #12]
 8001104:	f10d 0904 	add.w	r9, sp, #4
  udelay(15); 
 8001108:	f000 ffb8 	bl	800207c <udelay>
 800110c:	4653      	mov	r3, sl

  for (int i = 0; i < 3; ++i)
  {
    spiPort->DR = msg[i];      // send write register command 
 800110e:	b29b      	uxth	r3, r3
 8001110:	81a3      	strh	r3, [r4, #12]
    while (!(spiPort->SR & SPI_SR_TXE) && (SYSTIME - startTime < SPI_TIMEOUT));       // wait for buffer room
 8001112:	e004      	b.n	800111e <readConverterRegister+0x4e>
 8001114:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001116:	1bdb      	subs	r3, r3, r7
 8001118:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800111c:	d20a      	bcs.n	8001134 <readConverterRegister+0x64>
 800111e:	8923      	ldrh	r3, [r4, #8]
 8001120:	0799      	lsls	r1, r3, #30
 8001122:	d5f7      	bpl.n	8001114 <readConverterRegister+0x44>
    while (!(spiPort->SR & SPI_SR_RXNE) && (SYSTIME - startTime < SPI_TIMEOUT));
 8001124:	8923      	ldrh	r3, [r4, #8]
 8001126:	07da      	lsls	r2, r3, #31
 8001128:	d40f      	bmi.n	800114a <readConverterRegister+0x7a>
 800112a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800112c:	1bdb      	subs	r3, r3, r7
 800112e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001132:	d20a      	bcs.n	800114a <readConverterRegister+0x7a>
 8001134:	8923      	ldrh	r3, [r4, #8]
 8001136:	07da      	lsls	r2, r3, #31
 8001138:	d5f7      	bpl.n	800112a <readConverterRegister+0x5a>
    while ((spiPort->SR & SPI_SR_BSY)  && (SYSTIME - startTime < SPI_TIMEOUT));
 800113a:	8923      	ldrh	r3, [r4, #8]
 800113c:	061b      	lsls	r3, r3, #24
 800113e:	d507      	bpl.n	8001150 <readConverterRegister+0x80>
 8001140:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001142:	1bdb      	subs	r3, r3, r7
 8001144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001148:	d202      	bcs.n	8001150 <readConverterRegister+0x80>
 800114a:	8923      	ldrh	r3, [r4, #8]
 800114c:	061b      	lsls	r3, r3, #24
 800114e:	d4f7      	bmi.n	8001140 <readConverterRegister+0x70>
    if (i == 2)
 8001150:	f1b8 0f02 	cmp.w	r8, #2
 8001154:	d008      	beq.n	8001168 <readConverterRegister+0x98>
      data[0] = spiPort->DR; 
    else
      spiPort->DR;
    udelay(15);
 8001156:	200f      	movs	r0, #15
    while (!(spiPort->SR & SPI_SR_RXNE) && (SYSTIME - startTime < SPI_TIMEOUT));
    while ((spiPort->SR & SPI_SR_BSY)  && (SYSTIME - startTime < SPI_TIMEOUT));
    if (i == 2)
      data[0] = spiPort->DR; 
    else
      spiPort->DR;
 8001158:	89a3      	ldrh	r3, [r4, #12]
  udelay(4);

  spiPort->DR;
  udelay(15); 

  for (int i = 0; i < 3; ++i)
 800115a:	f108 0801 	add.w	r8, r8, #1
    while ((spiPort->SR & SPI_SR_BSY)  && (SYSTIME - startTime < SPI_TIMEOUT));
    if (i == 2)
      data[0] = spiPort->DR; 
    else
      spiPort->DR;
    udelay(15);
 800115e:	f000 ff8d 	bl	800207c <udelay>
 8001162:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 8001166:	e7d2      	b.n	800110e <readConverterRegister+0x3e>
    spiPort->DR = msg[i];      // send write register command 
    while (!(spiPort->SR & SPI_SR_TXE) && (SYSTIME - startTime < SPI_TIMEOUT));       // wait for buffer room
    while (!(spiPort->SR & SPI_SR_RXNE) && (SYSTIME - startTime < SPI_TIMEOUT));
    while ((spiPort->SR & SPI_SR_BSY)  && (SYSTIME - startTime < SPI_TIMEOUT));
    if (i == 2)
      data[0] = spiPort->DR; 
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <readConverterRegister+0xcc>)
 800116a:	899b      	ldrh	r3, [r3, #12]
 800116c:	702b      	strb	r3, [r5, #0]
    else
      spiPort->DR;
    udelay(15);
 800116e:	200f      	movs	r0, #15
 8001170:	f000 ff84 	bl	800207c <udelay>

  }
  cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <readConverterRegister+0xc8>)
 8001176:	2210      	movs	r2, #16
 8001178:	831a      	strh	r2, [r3, #24]
  udelay(5);
 800117a:	2005      	movs	r0, #5
 800117c:	f000 ff7e 	bl	800207c <udelay>

  if (SYSTIME - startTime > SPI_TIMEOUT)
 8001180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001184:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001186:	1bc0      	subs	r0, r0, r7
 8001188:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800118c:	bf8c      	ite	hi
 800118e:	2000      	movhi	r0, #0
 8001190:	2001      	movls	r0, #1
    return 0;
  return 1;
}
 8001192:	b002      	add	sp, #8
 8001194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001198:	40020000 	.word	0x40020000
 800119c:	40013000 	.word	0x40013000

080011a0 <checkConverterIsBusy>:
  GPIOC->BSRRL = 1 << PORTC_I2C_BRIDGE_RESET;
  udelay(1000);
}

uint8_t checkConverterIsBusy (uint8_t utime)
{
 80011a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a2:	b083      	sub	sp, #12
  uint8_t status[1] = {0};
 80011a4:	ad02      	add	r5, sp, #8
 80011a6:	2300      	movs	r3, #0
 80011a8:	f805 3d04 	strb.w	r3, [r5, #-4]!
  GPIOC->BSRRL = 1 << PORTC_I2C_BRIDGE_RESET;
  udelay(1000);
}

uint8_t checkConverterIsBusy (uint8_t utime)
{
 80011ac:	4607      	mov	r7, r0
  uint8_t status[1] = {0};
  readConverterRegister(SC18IS601_REGISTER_I2C_STATUS, status);
 80011ae:	4629      	mov	r1, r5
 80011b0:	2004      	movs	r0, #4
 80011b2:	f7ff ff8d 	bl	80010d0 <readConverterRegister>
  uint32_t startTime = SYSTIME;
  while (status[0] == 0xF3 && SYSTIME - startTime < utime)
 80011b6:	f89d 3004 	ldrb.w	r3, [sp, #4]

uint8_t checkConverterIsBusy (uint8_t utime)
{
  uint8_t status[1] = {0};
  readConverterRegister(SC18IS601_REGISTER_I2C_STATUS, status);
  uint32_t startTime = SYSTIME;
 80011ba:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  while (status[0] == 0xF3 && SYSTIME - startTime < utime)
 80011be:	2bf3      	cmp	r3, #243	; 0xf3

uint8_t checkConverterIsBusy (uint8_t utime)
{
  uint8_t status[1] = {0};
  readConverterRegister(SC18IS601_REGISTER_I2C_STATUS, status);
  uint32_t startTime = SYSTIME;
 80011c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
  while (status[0] == 0xF3 && SYSTIME - startTime < utime)
 80011c2:	d110      	bne.n	80011e6 <checkConverterIsBusy+0x46>
 80011c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011c6:	1b9b      	subs	r3, r3, r6
 80011c8:	429f      	cmp	r7, r3
 80011ca:	d804      	bhi.n	80011d6 <checkConverterIsBusy+0x36>
 80011cc:	e00e      	b.n	80011ec <checkConverterIsBusy+0x4c>
 80011ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011d0:	1b9b      	subs	r3, r3, r6
 80011d2:	42bb      	cmp	r3, r7
 80011d4:	d20a      	bcs.n	80011ec <checkConverterIsBusy+0x4c>
  {
    readConverterRegister(SC18IS601_REGISTER_I2C_STATUS, status);
 80011d6:	2004      	movs	r0, #4
 80011d8:	4629      	mov	r1, r5
 80011da:	f7ff ff79 	bl	80010d0 <readConverterRegister>
uint8_t checkConverterIsBusy (uint8_t utime)
{
  uint8_t status[1] = {0};
  readConverterRegister(SC18IS601_REGISTER_I2C_STATUS, status);
  uint32_t startTime = SYSTIME;
  while (status[0] == 0xF3 && SYSTIME - startTime < utime)
 80011de:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80011e2:	2bf3      	cmp	r3, #243	; 0xf3
 80011e4:	d0f3      	beq.n	80011ce <checkConverterIsBusy+0x2e>
  {
    resetConverter();
    return 0;
  }
  else
    return 1;
 80011e6:	2001      	movs	r0, #1
}
 80011e8:	b003      	add	sp, #12
 80011ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    readConverterRegister(SC18IS601_REGISTER_I2C_STATUS, status);
  }
  if (status[0] == 0xF3)
  {
    resetConverter();
 80011ec:	f7ff ff00 	bl	8000ff0 <resetConverter>
    return 0;
 80011f0:	2000      	movs	r0, #0
  }
  else
    return 1;
}
 80011f2:	b003      	add	sp, #12
 80011f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011f6:	bf00      	nop

080011f8 <writeBytesSPI>:
  uint8_t data[1] = {registerAddress};
  return writeBytesSPI(port, address, data, 1, 0);
}

uint8_t writeBytesSPI(uint32_t* port, uint8_t address, uint8_t* data, int len, int toggleAddress)
{
 80011f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SPI_TypeDef *spiPort = (SPI_TypeDef*) port;
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  
  cs_gpio->BSRRH = cs_pin_mask;           // assert CS
 80011fc:	4c1f      	ldr	r4, [pc, #124]	; (800127c <writeBytesSPI+0x84>)
  uint8_t data[1] = {registerAddress};
  return writeBytesSPI(port, address, data, 1, 0);
}

uint8_t writeBytesSPI(uint32_t* port, uint8_t address, uint8_t* data, int len, int toggleAddress)
{
 80011fe:	9e06      	ldr	r6, [sp, #24]
  SPI_TypeDef *spiPort = (SPI_TypeDef*) port;
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  
  cs_gpio->BSRRH = cs_pin_mask;           // assert CS
 8001200:	2710      	movs	r7, #16
  uint8_t data[1] = {registerAddress};
  return writeBytesSPI(port, address, data, 1, 0);
}

uint8_t writeBytesSPI(uint32_t* port, uint8_t address, uint8_t* data, int len, int toggleAddress)
{
 8001202:	4605      	mov	r5, r0
  SPI_TypeDef *spiPort = (SPI_TypeDef*) port;
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  
  cs_gpio->BSRRH = cs_pin_mask;           // assert CS
 8001204:	8367      	strh	r7, [r4, #26]
  udelay(4);                              // delay 4us
 8001206:	2004      	movs	r0, #4
  uint8_t data[1] = {registerAddress};
  return writeBytesSPI(port, address, data, 1, 0);
}

uint8_t writeBytesSPI(uint32_t* port, uint8_t address, uint8_t* data, int len, int toggleAddress)
{
 8001208:	461f      	mov	r7, r3
 800120a:	460c      	mov	r4, r1
 800120c:	4690      	mov	r8, r2
  SPI_TypeDef *spiPort = (SPI_TypeDef*) port;
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  
  cs_gpio->BSRRH = cs_pin_mask;           // assert CS
  udelay(4);                              // delay 4us
 800120e:	f000 ff35 	bl	800207c <udelay>

  spiPort->DR = SC18IS601_WRITE_N_BYTES_COMMAND;                     // send write command 
 8001212:	2300      	movs	r3, #0
 8001214:	81ab      	strh	r3, [r5, #12]
  udelay(15);                             // delay 15us
 8001216:	200f      	movs	r0, #15
 8001218:	f000 ff30 	bl	800207c <udelay>

  spiPort->DR = (uint8_t) len;            // send data len
 800121c:	b2fb      	uxtb	r3, r7
 800121e:	81ab      	strh	r3, [r5, #12]
  udelay(15);                             // delay 15us
 8001220:	200f      	movs	r0, #15
 8001222:	f000 ff2b 	bl	800207c <udelay>
  
  uint8_t addr;
  if (toggleAddress == 0)
 8001226:	b90e      	cbnz	r6, 800122c <writeBytesSPI+0x34>
    addr = address << 1;
 8001228:	0064      	lsls	r4, r4, #1
 800122a:	b2e4      	uxtb	r4, r4
  else
    addr = address;                          
  spiPort->DR = ((uint8_t) addr);         // send addr
 800122c:	b2a4      	uxth	r4, r4
 800122e:	81ac      	strh	r4, [r5, #12]
  udelay(15);                             // delay 15us
 8001230:	200f      	movs	r0, #15
 8001232:	f000 ff23 	bl	800207c <udelay>
  // (0x0C >> 1) 0x06

  // 0xC0 0b1100 0000 original
  // 0x40 0b0100 0000 no toggle 0xC0 << 1 = 0b1000 0000 = 0x80; 0x80 >> 1 = 0x40
  // 0x60 0b0110 0000 with toggle 0xC0 >> 1 = 0x60
  for (int i = 0; i < len; i++)
 8001236:	2f00      	cmp	r7, #0
 8001238:	dd19      	ble.n	800126e <writeBytesSPI+0x76>
 800123a:	4644      	mov	r4, r8
 800123c:	eb08 0607 	add.w	r6, r8, r7
  {
    spiPort->DR = data[i];                // send data[i]
 8001240:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001244:	81ab      	strh	r3, [r5, #12]
    udelay(15);                           // delay 15us
 8001246:	200f      	movs	r0, #15
 8001248:	f000 ff18 	bl	800207c <udelay>
  // (0x0C >> 1) 0x06

  // 0xC0 0b1100 0000 original
  // 0x40 0b0100 0000 no toggle 0xC0 << 1 = 0b1000 0000 = 0x80; 0x80 >> 1 = 0x40
  // 0x60 0b0110 0000 with toggle 0xC0 >> 1 = 0x60
  for (int i = 0; i < len; i++)
 800124c:	42b4      	cmp	r4, r6
 800124e:	d1f7      	bne.n	8001240 <writeBytesSPI+0x48>
  {
    spiPort->DR = data[i];                // send data[i]
    udelay(15);                           // delay 15us
  }

  cs_gpio->BSRRL = cs_pin_mask;           // de-assert CS
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <writeBytesSPI+0x84>)
 8001252:	2210      	movs	r2, #16
 8001254:	831a      	strh	r2, [r3, #24]

  if (len == 0 || data == NULL)
 8001256:	f1b8 0f00 	cmp.w	r8, #0
 800125a:	d005      	beq.n	8001268 <writeBytesSPI+0x70>
    return 1;
  const uint32_t wait = 180 + 110 * len;
 800125c:	206e      	movs	r0, #110	; 0x6e
 800125e:	fb00 f007 	mul.w	r0, r0, r7
  udelay(wait);
 8001262:	30b4      	adds	r0, #180	; 0xb4
 8001264:	f000 ff0a 	bl	800207c <udelay>

  return 1;
}
 8001268:	2001      	movs	r0, #1
 800126a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    spiPort->DR = data[i];                // send data[i]
    udelay(15);                           // delay 15us
  }

  cs_gpio->BSRRL = cs_pin_mask;           // de-assert CS
 800126e:	4b03      	ldr	r3, [pc, #12]	; (800127c <writeBytesSPI+0x84>)
 8001270:	f04f 0210 	mov.w	r2, #16
 8001274:	831a      	strh	r2, [r3, #24]

  if (len == 0 || data == NULL)
 8001276:	d0f7      	beq.n	8001268 <writeBytesSPI+0x70>
 8001278:	e7ed      	b.n	8001256 <writeBytesSPI+0x5e>
 800127a:	bf00      	nop
 800127c:	40020000 	.word	0x40020000

08001280 <writeRegisterSPI>:
    return 0;
  return 1;
}

uint8_t writeRegisterSPI(uint32_t* port, uint8_t address, uint8_t registerAddress)
{
 8001280:	b510      	push	{r4, lr}
 8001282:	b084      	sub	sp, #16
  uint8_t data[1] = {registerAddress};
 8001284:	ab04      	add	r3, sp, #16
  return writeBytesSPI(port, address, data, 1, 0);
 8001286:	2400      	movs	r4, #0
  return 1;
}

uint8_t writeRegisterSPI(uint32_t* port, uint8_t address, uint8_t registerAddress)
{
  uint8_t data[1] = {registerAddress};
 8001288:	f803 2d04 	strb.w	r2, [r3, #-4]!
  return writeBytesSPI(port, address, data, 1, 0);
 800128c:	9400      	str	r4, [sp, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	2301      	movs	r3, #1
 8001292:	f7ff ffb1 	bl	80011f8 <writeBytesSPI>
}
 8001296:	b004      	add	sp, #16
 8001298:	bd10      	pop	{r4, pc}
 800129a:	bf00      	nop

0800129c <readCommmand>:

  return 1;
}

uint8_t readCommmand(SPI_TypeDef* spiPort, uint8_t address, uint8_t numBytes)
{
 800129c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 80012a0:	f8df 8040 	ldr.w	r8, [pc, #64]	; 80012e4 <readCommmand+0x48>

  return 1;
}

uint8_t readCommmand(SPI_TypeDef* spiPort, uint8_t address, uint8_t numBytes)
{
 80012a4:	4605      	mov	r5, r0
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 80012a6:	f04f 0910 	mov.w	r9, #16

  return 1;
}

uint8_t readCommmand(SPI_TypeDef* spiPort, uint8_t address, uint8_t numBytes)
{
 80012aa:	460c      	mov	r4, r1
 80012ac:	4616      	mov	r6, r2
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
  udelay(4);
  
  spiPort->DR = 0x01;                         // send read command
 80012ae:	2701      	movs	r7, #1
uint8_t readCommmand(SPI_TypeDef* spiPort, uint8_t address, uint8_t numBytes)
{
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 80012b0:	f8a8 901a 	strh.w	r9, [r8, #26]
  udelay(4);
 80012b4:	2004      	movs	r0, #4
 80012b6:	f000 fee1 	bl	800207c <udelay>
  
  spiPort->DR = 0x01;                         // send read command
  // while((spiPort->SR & (SPI_SR_TXE)));        //while((spiPort->SR & (SPI_SR_BSY)));
  udelay(15);
  
  spiPort->DR = (uint8_t) numBytes;           // send data len                            
 80012ba:	b2b6      	uxth	r6, r6
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
  udelay(4);
  
  spiPort->DR = 0x01;                         // send read command
 80012bc:	81af      	strh	r7, [r5, #12]
  // while((spiPort->SR & (SPI_SR_TXE)));        //while((spiPort->SR & (SPI_SR_BSY)));
  udelay(15);
 80012be:	200f      	movs	r0, #15
  
  spiPort->DR = (uint8_t) numBytes;           // send data len                            
  // while((spiPort->SR & (SPI_SR_BSY)));
  udelay(15);
  
  spiPort->DR = ((uint8_t) address << 1) + 1; // send addr
 80012c0:	40bc      	lsls	r4, r7
  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
  udelay(4);
  
  spiPort->DR = 0x01;                         // send read command
  // while((spiPort->SR & (SPI_SR_TXE)));        //while((spiPort->SR & (SPI_SR_BSY)));
  udelay(15);
 80012c2:	f000 fedb 	bl	800207c <udelay>
  
  spiPort->DR = (uint8_t) numBytes;           // send data len                            
  // while((spiPort->SR & (SPI_SR_BSY)));
  udelay(15);
  
  spiPort->DR = ((uint8_t) address << 1) + 1; // send addr
 80012c6:	443c      	add	r4, r7
  
  spiPort->DR = 0x01;                         // send read command
  // while((spiPort->SR & (SPI_SR_TXE)));        //while((spiPort->SR & (SPI_SR_BSY)));
  udelay(15);
  
  spiPort->DR = (uint8_t) numBytes;           // send data len                            
 80012c8:	81ae      	strh	r6, [r5, #12]
  // while((spiPort->SR & (SPI_SR_BSY)));
  udelay(15);
 80012ca:	200f      	movs	r0, #15
 80012cc:	f000 fed6 	bl	800207c <udelay>
  
  spiPort->DR = ((uint8_t) address << 1) + 1; // send addr
 80012d0:	81ac      	strh	r4, [r5, #12]
  // while((spiPort->SR & (SPI_SR_BSY))); 
  udelay(15);
 80012d2:	200f      	movs	r0, #15
 80012d4:	f000 fed2 	bl	800207c <udelay>
  
  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS
 80012d8:	f8a8 9018 	strh.w	r9, [r8, #24]

  return 1;
}
 80012dc:	4638      	mov	r0, r7
 80012de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012e2:	bf00      	nop
 80012e4:	40020000 	.word	0x40020000

080012e8 <readBytesSPI>:


uint8_t readBytesSPI(uint32_t* port, uint8_t address, uint8_t numBytes, uint8_t* values)
{
 80012e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ea:	4616      	mov	r6, r2
 80012ec:	461c      	mov	r4, r3
 80012ee:	4605      	mov	r5, r0

  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  // uint8_t status;

  readCommmand(spiPort, address, numBytes);
 80012f0:	f7ff ffd4 	bl	800129c <readCommmand>

  uint32_t wait = 180 + 110 * numBytes;
 80012f4:	206e      	movs	r0, #110	; 0x6e
 80012f6:	23b4      	movs	r3, #180	; 0xb4
  udelay(wait);
 80012f8:	fb00 3006 	mla	r0, r0, r6, r3
 80012fc:	f000 febe 	bl	800207c <udelay>

  if (numBytes == 0 || values == NULL)
 8001300:	b326      	cbz	r6, 800134c <readBytesSPI+0x64>
 8001302:	b31c      	cbz	r4, 800134c <readBytesSPI+0x64>
    return 1;
  
  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <readBytesSPI+0x68>)
 8001306:	2210      	movs	r2, #16
 8001308:	835a      	strh	r2, [r3, #26]
  udelay(4);
 800130a:	2004      	movs	r0, #4
 800130c:	f000 feb6 	bl	800207c <udelay>

  spiPort->DR = 0x06;                         // read buffer command
 8001310:	2306      	movs	r3, #6
 8001312:	81ab      	strh	r3, [r5, #12]
  udelay(15);
 8001314:	200f      	movs	r0, #15
 8001316:	f000 feb1 	bl	800207c <udelay>
  values[0] =  spiPort->DR;
 800131a:	89ab      	ldrh	r3, [r5, #12]
 800131c:	7023      	strb	r3, [r4, #0]
  udelay(15);                                 // delay 15us
 800131e:	200f      	movs	r0, #15
 8001320:	f000 feac 	bl	800207c <udelay>
 8001324:	4426      	add	r6, r4
  for (int i=0; i<numBytes;i++)
  {
    // if (i != numBytes-1)
    spiPort->DR = 0x0;
 8001326:	2700      	movs	r7, #0
    udelay(15);
 8001328:	200f      	movs	r0, #15
  values[0] =  spiPort->DR;
  udelay(15);                                 // delay 15us
  for (int i=0; i<numBytes;i++)
  {
    // if (i != numBytes-1)
    spiPort->DR = 0x0;
 800132a:	81af      	strh	r7, [r5, #12]
    udelay(15);
 800132c:	f000 fea6 	bl	800207c <udelay>
    values[i] = (uint8_t) spiPort->DR;                     
 8001330:	89ab      	ldrh	r3, [r5, #12]
 8001332:	f804 3b01 	strb.w	r3, [r4], #1
    udelay(15);                               // delay 15us
 8001336:	200f      	movs	r0, #15
 8001338:	f000 fea0 	bl	800207c <udelay>

  spiPort->DR = 0x06;                         // read buffer command
  udelay(15);
  values[0] =  spiPort->DR;
  udelay(15);                                 // delay 15us
  for (int i=0; i<numBytes;i++)
 800133c:	42b4      	cmp	r4, r6
 800133e:	d1f3      	bne.n	8001328 <readBytesSPI+0x40>
    spiPort->DR = 0x0;
    udelay(15);
    values[i] = (uint8_t) spiPort->DR;                     
    udelay(15);                               // delay 15us
  }
  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <readBytesSPI+0x68>)
 8001342:	2210      	movs	r2, #16
 8001344:	831a      	strh	r2, [r3, #24]
  udelay(30);
 8001346:	201e      	movs	r0, #30
 8001348:	f000 fe98 	bl	800207c <udelay>
  // ledStatus(status);
  // udelay(100);
  // while(1);

  return 1;
}
 800134c:	2001      	movs	r0, #1
 800134e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001350:	40020000 	.word	0x40020000

08001354 <ledsPattern>:
      break;
  }
}

void ledsPattern(int led1, int led2, int led3, int led4)
{
 8001354:	b530      	push	{r4, r5, lr}
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
  {
    if (leds[i] == ON)
 8001356:	2801      	cmp	r0, #1
      break;
  }
}

void ledsPattern(int led1, int led2, int led3, int led4)
{
 8001358:	b085      	sub	sp, #20
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
 800135a:	f04f 0400 	mov.w	r4, #0
  }
}

void ledsPattern(int led1, int led2, int led3, int led4)
{
  int leds[4] = {led1, led2, led3, led4};
 800135e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001362:	466d      	mov	r5, sp
    {
      leds_on(i);
    }
    else
    {
      leds_off(i);
 8001364:	b2e0      	uxtb	r0, r4
{
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
  {
    if (leds[i] == ON)
 8001366:	d009      	beq.n	800137c <ledsPattern+0x28>

void ledsPattern(int led1, int led2, int led3, int led4)
{
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
 8001368:	3401      	adds	r4, #1
    {
      leds_on(i);
    }
    else
    {
      leds_off(i);
 800136a:	f000 f8bf 	bl	80014ec <leds_off>

void ledsPattern(int led1, int led2, int led3, int led4)
{
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
 800136e:	2c04      	cmp	r4, #4
 8001370:	d009      	beq.n	8001386 <ledsPattern+0x32>
 8001372:	f855 0f04 	ldr.w	r0, [r5, #4]!
  {
    if (leds[i] == ON)
 8001376:	2801      	cmp	r0, #1
    {
      leds_on(i);
    }
    else
    {
      leds_off(i);
 8001378:	b2e0      	uxtb	r0, r4
{
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
  {
    if (leds[i] == ON)
 800137a:	d1f5      	bne.n	8001368 <ledsPattern+0x14>

void ledsPattern(int led1, int led2, int led3, int led4)
{
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
 800137c:	3401      	adds	r4, #1
  {
    if (leds[i] == ON)
    {
      leds_on(i);
 800137e:	f000 f891 	bl	80014a4 <leds_on>

void ledsPattern(int led1, int led2, int led3, int led4)
{
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
 8001382:	2c04      	cmp	r4, #4
 8001384:	d1f5      	bne.n	8001372 <ledsPattern+0x1e>
    else
    {
      leds_off(i);
    }
  }
 8001386:	b005      	add	sp, #20
 8001388:	bd30      	pop	{r4, r5, pc}
 800138a:	bf00      	nop

0800138c <ledStatus>:
  return 1;
}

void ledStatus(uint8_t status)
{
  switch(status & 0xF)
 800138c:	f000 000f 	and.w	r0, r0, #15
 8001390:	3801      	subs	r0, #1
 8001392:	280e      	cmp	r0, #14
 8001394:	d80f      	bhi.n	80013b6 <ledStatus+0x2a>
 8001396:	e8df f000 	tbb	[pc, r0]
 800139a:	1a14      	.short	0x1a14
 800139c:	322c2620 	.word	0x322c2620
 80013a0:	4a443e38 	.word	0x4a443e38
 80013a4:	085c5650 	.word	0x085c5650
 80013a8:	62          	.byte	0x62
 80013a9:	00          	.byte	0x00
      break;
    case 0xD: // 1101 -> 101 -> 5
      ledsPattern(OFF, OFF, ON, OFF);
      break;
    case 0xE:
      ledsPattern(OFF, OFF, OFF, ON);
 80013aa:	2000      	movs	r0, #0
 80013ac:	4601      	mov	r1, r0
 80013ae:	4602      	mov	r2, r0
 80013b0:	2301      	movs	r3, #1
 80013b2:	f7ff bfcf 	b.w	8001354 <ledsPattern>
void ledStatus(uint8_t status)
{
  switch(status & 0xF)
  {
    case 0x0:
      ledsPattern(ON, ON, ON, ON);
 80013b6:	2001      	movs	r0, #1
 80013b8:	4601      	mov	r1, r0
 80013ba:	4602      	mov	r2, r0
 80013bc:	4603      	mov	r3, r0
 80013be:	f7ff bfc9 	b.w	8001354 <ledsPattern>
      break;
    case 0x1:
      ledsPattern(ON, ON, ON, OFF);
 80013c2:	2001      	movs	r0, #1
 80013c4:	4601      	mov	r1, r0
 80013c6:	4602      	mov	r2, r0
 80013c8:	2300      	movs	r3, #0
 80013ca:	f7ff bfc3 	b.w	8001354 <ledsPattern>
      break;
    case 0x2:
      ledsPattern(ON, ON, OFF, ON);
 80013ce:	2001      	movs	r0, #1
 80013d0:	4601      	mov	r1, r0
 80013d2:	4603      	mov	r3, r0
 80013d4:	2200      	movs	r2, #0
 80013d6:	f7ff bfbd 	b.w	8001354 <ledsPattern>
      break;
    case 0x3:
      ledsPattern(ON, ON, OFF, OFF);
 80013da:	2001      	movs	r0, #1
 80013dc:	2200      	movs	r2, #0
 80013de:	4601      	mov	r1, r0
 80013e0:	4613      	mov	r3, r2
 80013e2:	f7ff bfb7 	b.w	8001354 <ledsPattern>
      break;
    case 0x4:
      ledsPattern(ON, OFF, ON, ON);
 80013e6:	2001      	movs	r0, #1
 80013e8:	4602      	mov	r2, r0
 80013ea:	4603      	mov	r3, r0
 80013ec:	2100      	movs	r1, #0
 80013ee:	f7ff bfb1 	b.w	8001354 <ledsPattern>
      break;
    case 0x5:
      ledsPattern(ON, OFF, ON, OFF);
 80013f2:	2001      	movs	r0, #1
 80013f4:	2100      	movs	r1, #0
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	f7ff bfab 	b.w	8001354 <ledsPattern>
      break;
    case 0x6:
      ledsPattern(ON, OFF, OFF, ON);
 80013fe:	2001      	movs	r0, #1
 8001400:	2100      	movs	r1, #0
 8001402:	4603      	mov	r3, r0
 8001404:	460a      	mov	r2, r1
 8001406:	f7ff bfa5 	b.w	8001354 <ledsPattern>
      break;
    case 0x7:
      ledsPattern(ON, OFF, OFF, OFF);
 800140a:	2100      	movs	r1, #0
 800140c:	460a      	mov	r2, r1
 800140e:	460b      	mov	r3, r1
 8001410:	2001      	movs	r0, #1
 8001412:	f7ff bf9f 	b.w	8001354 <ledsPattern>
      break;
    case 0x8:
      ledsPattern(OFF, ON, ON, ON);
 8001416:	2101      	movs	r1, #1
 8001418:	460a      	mov	r2, r1
 800141a:	460b      	mov	r3, r1
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff bf99 	b.w	8001354 <ledsPattern>
      break;
    case 0x9:
      ledsPattern(OFF, ON, ON, OFF);
 8001422:	2000      	movs	r0, #0
 8001424:	2101      	movs	r1, #1
 8001426:	4603      	mov	r3, r0
 8001428:	460a      	mov	r2, r1
 800142a:	f7ff bf93 	b.w	8001354 <ledsPattern>
      break;
    case 0xA:
      ledsPattern(OFF, ON, OFF, ON);
 800142e:	2000      	movs	r0, #0
 8001430:	2101      	movs	r1, #1
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	f7ff bf8d 	b.w	8001354 <ledsPattern>
      break;
    case 0xB: // 1011 -> 011 3
      ledsPattern(OFF, ON, OFF, OFF);
 800143a:	2000      	movs	r0, #0
 800143c:	4602      	mov	r2, r0
 800143e:	4603      	mov	r3, r0
 8001440:	2101      	movs	r1, #1
 8001442:	f7ff bf87 	b.w	8001354 <ledsPattern>
      break;
    case 0xC:
      ledsPattern(OFF, OFF, ON, ON);
 8001446:	2000      	movs	r0, #0
 8001448:	2201      	movs	r2, #1
 800144a:	4601      	mov	r1, r0
 800144c:	4613      	mov	r3, r2
 800144e:	f7ff bf81 	b.w	8001354 <ledsPattern>
      break;
    case 0xD: // 1101 -> 101 -> 5
      ledsPattern(OFF, OFF, ON, OFF);
 8001452:	2000      	movs	r0, #0
 8001454:	4601      	mov	r1, r0
 8001456:	4603      	mov	r3, r0
 8001458:	2201      	movs	r2, #1
 800145a:	f7ff bf7b 	b.w	8001354 <ledsPattern>
      break;
    case 0xE:
      ledsPattern(OFF, OFF, OFF, ON);
      break;
    case 0xF:
      ledsPattern(OFF, OFF, OFF, OFF);
 800145e:	2000      	movs	r0, #0
 8001460:	4601      	mov	r1, r0
 8001462:	4602      	mov	r2, r0
 8001464:	4603      	mov	r3, r0
 8001466:	f7ff bf75 	b.w	8001354 <ledsPattern>
 800146a:	bf00      	nop

0800146c <leds_init>:
#define PORTB_LED2 10
#define PORTE_LED3 15

void leds_init()
{
  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <leds_init+0x2c>)
  GPIOE->MODER   |= (1 << (PORTE_LED0 * 2)) |
 800146e:	480b      	ldr	r0, [pc, #44]	; (800149c <leds_init+0x30>)
#define PORTB_LED2 10
#define PORTE_LED3 15

void leds_init()
{
  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 8001470:	6b13      	ldr	r3, [r2, #48]	; 0x30
  GPIOE->MODER   |= (1 << (PORTE_LED0 * 2)) |
                    (1 << (PORTE_LED1 * 2)) |
                    (1 << (PORTE_LED3 * 2));

  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOBEN;
  GPIOB->MODER   |= (1 << (PORTB_LED2 * 2));
 8001472:	490b      	ldr	r1, [pc, #44]	; (80014a0 <leds_init+0x34>)
#define PORTB_LED2 10
#define PORTE_LED3 15

void leds_init()
{
  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 8001474:	f043 0310 	orr.w	r3, r3, #16
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOE->MODER   |= (1 << (PORTE_LED0 * 2)) |
 800147a:	6803      	ldr	r3, [r0, #0]
 800147c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001480:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001484:	6003      	str	r3, [r0, #0]
                    (1 << (PORTE_LED1 * 2)) |
                    (1 << (PORTE_LED3 * 2));

  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOBEN;
 8001486:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOB->MODER   |= (1 << (PORTB_LED2 * 2));
 800148e:	680b      	ldr	r3, [r1, #0]
 8001490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001494:	600b      	str	r3, [r1, #0]
 8001496:	4770      	bx	lr
 8001498:	40023800 	.word	0x40023800
 800149c:	40021000 	.word	0x40021000
 80014a0:	40020400 	.word	0x40020400

080014a4 <leds_on>:
}

void leds_on(uint8_t led)
{
  if (led == 0)
 80014a4:	b148      	cbz	r0, 80014ba <leds_on+0x16>
    GPIOE->BSRRL = 1 << PORTE_LED0;
  else if (led == 1)
 80014a6:	2801      	cmp	r0, #1
 80014a8:	d00b      	beq.n	80014c2 <leds_on+0x1e>
    GPIOE->BSRRL = 1 << PORTE_LED1;
  else if (led == 2)
 80014aa:	2802      	cmp	r0, #2
 80014ac:	d012      	beq.n	80014d4 <leds_on+0x30>
    GPIOB->BSRRL = 1 << PORTB_LED2;
  else if (led == 3)
 80014ae:	2803      	cmp	r0, #3
 80014b0:	d00b      	beq.n	80014ca <leds_on+0x26>
    GPIOE->BSRRL = 1 << PORTE_LED3;
  else
    printf("LED %d does not exist\n", led);
 80014b2:	4601      	mov	r1, r0
 80014b4:	480a      	ldr	r0, [pc, #40]	; (80014e0 <leds_on+0x3c>)
 80014b6:	f002 bac1 	b.w	8003a3c <printf>
}

void leds_on(uint8_t led)
{
  if (led == 0)
    GPIOE->BSRRL = 1 << PORTE_LED0;
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <leds_on+0x40>)
 80014bc:	2208      	movs	r2, #8
 80014be:	831a      	strh	r2, [r3, #24]
 80014c0:	4770      	bx	lr
  else if (led == 1)
    GPIOE->BSRRL = 1 << PORTE_LED1;
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <leds_on+0x40>)
 80014c4:	2210      	movs	r2, #16
 80014c6:	831a      	strh	r2, [r3, #24]
 80014c8:	4770      	bx	lr
  else if (led == 2)
    GPIOB->BSRRL = 1 << PORTB_LED2;
  else if (led == 3)
    GPIOE->BSRRL = 1 << PORTE_LED3;
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <leds_on+0x40>)
 80014cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014d0:	831a      	strh	r2, [r3, #24]
 80014d2:	4770      	bx	lr
  if (led == 0)
    GPIOE->BSRRL = 1 << PORTE_LED0;
  else if (led == 1)
    GPIOE->BSRRL = 1 << PORTE_LED1;
  else if (led == 2)
    GPIOB->BSRRL = 1 << PORTB_LED2;
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <leds_on+0x44>)
 80014d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014da:	831a      	strh	r2, [r3, #24]
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	0800a908 	.word	0x0800a908
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40020400 	.word	0x40020400

080014ec <leds_off>:
    printf("LED %d does not exist\n", led);
}

void leds_off(uint8_t led)
{
  if (led == 0)
 80014ec:	b148      	cbz	r0, 8001502 <leds_off+0x16>
    GPIOE->BSRRH = 1 << PORTE_LED0;
  else if (led == 1)
 80014ee:	2801      	cmp	r0, #1
 80014f0:	d00b      	beq.n	800150a <leds_off+0x1e>
    GPIOE->BSRRH = 1 << PORTE_LED1;
  else if (led == 2)
 80014f2:	2802      	cmp	r0, #2
 80014f4:	d012      	beq.n	800151c <leds_off+0x30>
    GPIOB->BSRRH = 1 << PORTB_LED2;
  else if (led == 3)
 80014f6:	2803      	cmp	r0, #3
 80014f8:	d00b      	beq.n	8001512 <leds_off+0x26>
    GPIOE->BSRRH = 1 << PORTE_LED3;
  else
    printf("LED %d does not exist\n", led);
 80014fa:	4601      	mov	r1, r0
 80014fc:	480a      	ldr	r0, [pc, #40]	; (8001528 <leds_off+0x3c>)
 80014fe:	f002 ba9d 	b.w	8003a3c <printf>
}

void leds_off(uint8_t led)
{
  if (led == 0)
    GPIOE->BSRRH = 1 << PORTE_LED0;
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <leds_off+0x40>)
 8001504:	2208      	movs	r2, #8
 8001506:	835a      	strh	r2, [r3, #26]
 8001508:	4770      	bx	lr
  else if (led == 1)
    GPIOE->BSRRH = 1 << PORTE_LED1;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <leds_off+0x40>)
 800150c:	2210      	movs	r2, #16
 800150e:	835a      	strh	r2, [r3, #26]
 8001510:	4770      	bx	lr
  else if (led == 2)
    GPIOB->BSRRH = 1 << PORTB_LED2;
  else if (led == 3)
    GPIOE->BSRRH = 1 << PORTE_LED3;
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <leds_off+0x40>)
 8001514:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001518:	835a      	strh	r2, [r3, #26]
 800151a:	4770      	bx	lr
  if (led == 0)
    GPIOE->BSRRH = 1 << PORTE_LED0;
  else if (led == 1)
    GPIOE->BSRRH = 1 << PORTE_LED1;
  else if (led == 2)
    GPIOB->BSRRH = 1 << PORTB_LED2;
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <leds_off+0x44>)
 800151e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001522:	835a      	strh	r2, [r3, #26]
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	0800a908 	.word	0x0800a908
 800152c:	40021000 	.word	0x40021000
 8001530:	40020400 	.word	0x40020400

08001534 <leds_toggle>:
    printf("LED %d does not exist\n", led);
}

void leds_toggle(uint8_t led)
{
  if (led == 0)
 8001534:	b148      	cbz	r0, 800154a <leds_toggle+0x16>
    GPIOE->ODR ^= 1 << PORTE_LED0;
  else if (led == 1)
 8001536:	2801      	cmp	r0, #1
 8001538:	d00d      	beq.n	8001556 <leds_toggle+0x22>
    GPIOE->ODR ^= 1 << PORTE_LED1;
  else if (led == 2)
 800153a:	2802      	cmp	r0, #2
 800153c:	d017      	beq.n	800156e <leds_toggle+0x3a>
    GPIOB->ODR ^= 1 << PORTB_LED2;
  else if (led == 3)
 800153e:	2803      	cmp	r0, #3
 8001540:	d00f      	beq.n	8001562 <leds_toggle+0x2e>
    GPIOE->ODR ^= 1 << PORTE_LED3;
  else
    printf("LED %d does not exist\n", led);
 8001542:	4601      	mov	r1, r0
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <leds_toggle+0x48>)
 8001546:	f002 ba79 	b.w	8003a3c <printf>
}

void leds_toggle(uint8_t led)
{
  if (led == 0)
    GPIOE->ODR ^= 1 << PORTE_LED0;
 800154a:	4a0d      	ldr	r2, [pc, #52]	; (8001580 <leds_toggle+0x4c>)
 800154c:	6953      	ldr	r3, [r2, #20]
 800154e:	f083 0308 	eor.w	r3, r3, #8
 8001552:	6153      	str	r3, [r2, #20]
 8001554:	4770      	bx	lr
  else if (led == 1)
    GPIOE->ODR ^= 1 << PORTE_LED1;
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <leds_toggle+0x4c>)
 8001558:	6953      	ldr	r3, [r2, #20]
 800155a:	f083 0310 	eor.w	r3, r3, #16
 800155e:	6153      	str	r3, [r2, #20]
 8001560:	4770      	bx	lr
  else if (led == 2)
    GPIOB->ODR ^= 1 << PORTB_LED2;
  else if (led == 3)
    GPIOE->ODR ^= 1 << PORTE_LED3;
 8001562:	4a07      	ldr	r2, [pc, #28]	; (8001580 <leds_toggle+0x4c>)
 8001564:	6953      	ldr	r3, [r2, #20]
 8001566:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 800156a:	6153      	str	r3, [r2, #20]
 800156c:	4770      	bx	lr
  if (led == 0)
    GPIOE->ODR ^= 1 << PORTE_LED0;
  else if (led == 1)
    GPIOE->ODR ^= 1 << PORTE_LED1;
  else if (led == 2)
    GPIOB->ODR ^= 1 << PORTB_LED2;
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <leds_toggle+0x50>)
 8001570:	6953      	ldr	r3, [r2, #20]
 8001572:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 8001576:	6153      	str	r3, [r2, #20]
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	0800a908 	.word	0x0800a908
 8001580:	40021000 	.word	0x40021000
 8001584:	40020400 	.word	0x40020400

08001588 <consoleInit>:
#define PORTE_RX 0
#define PORTE_TX 1

void consoleInit()
{
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8001588:	4913      	ldr	r1, [pc, #76]	; (80015d8 <consoleInit+0x50>)
  RCC->APB1ENR |= RCC_APB1ENR_UART8EN;
  GPIOE->MODER   |= (0x2) << (PORTE_TX * 2);
 800158a:	4a14      	ldr	r2, [pc, #80]	; (80015dc <consoleInit+0x54>)
#define PORTE_RX 0
#define PORTE_TX 1

void consoleInit()
{
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 800158c:	6b08      	ldr	r0, [r1, #48]	; 0x30
  RCC->APB1ENR |= RCC_APB1ENR_UART8EN;
  GPIOE->MODER   |= (0x2) << (PORTE_TX * 2);
  GPIOE->AFR[0]  |= (0x8) << (PORTE_TX * 4);
  // RX not used at the moment. TX only used for stdout
  UART8->CR1 &= ~USART_CR1_UE;
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <consoleInit+0x58>)
#define PORTE_RX 0
#define PORTE_TX 1

void consoleInit()
{
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8001590:	f040 0010 	orr.w	r0, r0, #16
 8001594:	6308      	str	r0, [r1, #48]	; 0x30
  RCC->APB1ENR |= RCC_APB1ENR_UART8EN;
 8001596:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8001598:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800159c:	6408      	str	r0, [r1, #64]	; 0x40
  GPIOE->MODER   |= (0x2) << (PORTE_TX * 2);
 800159e:	6811      	ldr	r1, [r2, #0]
 80015a0:	f041 0108 	orr.w	r1, r1, #8
 80015a4:	6011      	str	r1, [r2, #0]
  GPIOE->AFR[0]  |= (0x8) << (PORTE_TX * 4);
 80015a6:	6a11      	ldr	r1, [r2, #32]
 80015a8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80015ac:	6211      	str	r1, [r2, #32]
  // RX not used at the moment. TX only used for stdout
  UART8->CR1 &= ~USART_CR1_UE;
 80015ae:	899a      	ldrh	r2, [r3, #12]
 80015b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015b4:	0412      	lsls	r2, r2, #16
 80015b6:	0c12      	lsrs	r2, r2, #16
 80015b8:	819a      	strh	r2, [r3, #12]
  UART8->CR1 |=  USART_CR1_TE | USART_CR1_RE;
 80015ba:	899a      	ldrh	r2, [r3, #12]
 80015bc:	b292      	uxth	r2, r2
 80015be:	f042 020c 	orr.w	r2, r2, #12
  // we want 1 megabit. do this with mantissa=2 and fraction (sixteenths)=10
  UART8->BRR  = (22 << 4) | 12;//42000000/115200;//(((uint16_t)2) << 4) | 10;  // 10 << 4 | 1010 -> 101000
 80015c2:	f44f 71b6 	mov.w	r1, #364	; 0x16c
  RCC->APB1ENR |= RCC_APB1ENR_UART8EN;
  GPIOE->MODER   |= (0x2) << (PORTE_TX * 2);
  GPIOE->AFR[0]  |= (0x8) << (PORTE_TX * 4);
  // RX not used at the moment. TX only used for stdout
  UART8->CR1 &= ~USART_CR1_UE;
  UART8->CR1 |=  USART_CR1_TE | USART_CR1_RE;
 80015c6:	819a      	strh	r2, [r3, #12]
  // we want 1 megabit. do this with mantissa=2 and fraction (sixteenths)=10
  UART8->BRR  = (22 << 4) | 12;//42000000/115200;//(((uint16_t)2) << 4) | 10;  // 10 << 4 | 1010 -> 101000
 80015c8:	8119      	strh	r1, [r3, #8]
  UART8->CR1 |=  USART_CR1_UE;
 80015ca:	899a      	ldrh	r2, [r3, #12]
 80015cc:	b292      	uxth	r2, r2
 80015ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015d2:	819a      	strh	r2, [r3, #12]
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40007c00 	.word	0x40007c00

080015e4 <consolePrint>:
}
// (22 << 4) | 12;  10110 1100 

int consolePrint(const uint8_t *buffer, uint32_t len)
{
 80015e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  int startTime = SYSTIME;
 80015e6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  
  // make sure transmission buffer is clear
  while (!(UART8->SR & USART_SR_TXE) && (SYSTIME - startTime < UART_TIMEOUT));
 80015ea:	4d18      	ldr	r5, [pc, #96]	; (800164c <consolePrint+0x68>)
}
// (22 << 4) | 12;  10110 1100 

int consolePrint(const uint8_t *buffer, uint32_t len)
{
  int startTime = SYSTIME;
 80015ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
  
  // make sure transmission buffer is clear
  while (!(UART8->SR & USART_SR_TXE) && (SYSTIME - startTime < UART_TIMEOUT));
 80015ee:	f242 760f 	movw	r6, #9999	; 0x270f
 80015f2:	e003      	b.n	80015fc <consolePrint+0x18>
 80015f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015f6:	1a9b      	subs	r3, r3, r2
 80015f8:	42b3      	cmp	r3, r6
 80015fa:	d802      	bhi.n	8001602 <consolePrint+0x1e>
 80015fc:	882b      	ldrh	r3, [r5, #0]
 80015fe:	061f      	lsls	r7, r3, #24
 8001600:	d5f8      	bpl.n	80015f4 <consolePrint+0x10>
  if (SYSTIME - startTime > UART_TIMEOUT)
 8001602:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8001606:	f242 7710 	movw	r7, #10000	; 0x2710
 800160a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800160c:	1a9b      	subs	r3, r3, r2
 800160e:	42bb      	cmp	r3, r7
 8001610:	d818      	bhi.n	8001644 <consolePrint+0x60>
    return -1;

  // start transmission
  for (uint32_t i = 0; i < len; i++)
 8001612:	b1a9      	cbz	r1, 8001640 <consolePrint+0x5c>
  {
    while (!(UART8->SR & USART_SR_TXE) && (SYSTIME - startTime < UART_TIMEOUT)); // wait for tx buffer to clear
 8001614:	4c0d      	ldr	r4, [pc, #52]	; (800164c <consolePrint+0x68>)
 8001616:	eb00 0e01 	add.w	lr, r0, r1
 800161a:	f242 760f 	movw	r6, #9999	; 0x270f
 800161e:	e003      	b.n	8001628 <consolePrint+0x44>
 8001620:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	42b3      	cmp	r3, r6
 8001626:	d802      	bhi.n	800162e <consolePrint+0x4a>
 8001628:	8823      	ldrh	r3, [r4, #0]
 800162a:	061b      	lsls	r3, r3, #24
 800162c:	d5f8      	bpl.n	8001620 <consolePrint+0x3c>
    UART8->DR = buffer[i];
 800162e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001632:	80a3      	strh	r3, [r4, #4]
    if (SYSTIME - startTime > UART_TIMEOUT)
 8001634:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001636:	1a9b      	subs	r3, r3, r2
 8001638:	42bb      	cmp	r3, r7
 800163a:	d803      	bhi.n	8001644 <consolePrint+0x60>
  while (!(UART8->SR & USART_SR_TXE) && (SYSTIME - startTime < UART_TIMEOUT));
  if (SYSTIME - startTime > UART_TIMEOUT)
    return -1;

  // start transmission
  for (uint32_t i = 0; i < len; i++)
 800163c:	4570      	cmp	r0, lr
 800163e:	d1f3      	bne.n	8001628 <consolePrint+0x44>
      return -1;
  }
  // while (!(UART8->SR & USART_SR_TC)); // wait for TX to finish

  // return number of bytes transmitted
  return len;
 8001640:	4608      	mov	r0, r1
 8001642:	bdf0      	pop	{r4, r5, r6, r7, pc}
  int startTime = SYSTIME;
  
  // make sure transmission buffer is clear
  while (!(UART8->SR & USART_SR_TXE) && (SYSTIME - startTime < UART_TIMEOUT));
  if (SYSTIME - startTime > UART_TIMEOUT)
    return -1;
 8001644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800164a:	bf00      	nop
 800164c:	40007c00 	.word	0x40007c00

08001650 <_sbrk>:

caddr_t _sbrk(int incr)
{
  static unsigned char *heap = NULL ;
  unsigned char *prev_heap ;
  if ( heap == NULL )
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <_sbrk+0x14>)
 8001652:	4905      	ldr	r1, [pc, #20]	; (8001668 <_sbrk+0x18>)
 8001654:	6813      	ldr	r3, [r2, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	bf08      	it	eq
 800165a:	460b      	moveq	r3, r1
    heap = (unsigned char *)&_end ;
  prev_heap = heap;
  heap += incr ;
 800165c:	4418      	add	r0, r3
 800165e:	6010      	str	r0, [r2, #0]
  return (caddr_t) prev_heap ;
}
 8001660:	4618      	mov	r0, r3
 8001662:	4770      	bx	lr
 8001664:	2000098c 	.word	0x2000098c
 8001668:	20014320 	.word	0x20014320

0800166c <_kill>:

int _kill(__attribute__((unused)) int pid, 
          __attribute__((unused)) int sig) { return -1; }
 800166c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop

08001674 <_exit>:
void _exit(__attribute__((unused)) int status) { while (1) {} } // spin...
 8001674:	e7fe      	b.n	8001674 <_exit>
 8001676:	bf00      	nop

08001678 <_getpid>:
int _getpid() { return 1; }
 8001678:	2001      	movs	r0, #1
 800167a:	4770      	bx	lr

0800167c <_write>:

int _write(__attribute__((unused)) int fd, const void *buf, size_t count)
{
 800167c:	b510      	push	{r4, lr}
  consolePrint((uint8_t *)buf, count);
 800167e:	4608      	mov	r0, r1
          __attribute__((unused)) int sig) { return -1; }
void _exit(__attribute__((unused)) int status) { while (1) {} } // spin...
int _getpid() { return 1; }

int _write(__attribute__((unused)) int fd, const void *buf, size_t count)
{
 8001680:	4614      	mov	r4, r2
  consolePrint((uint8_t *)buf, count);
 8001682:	4611      	mov	r1, r2
 8001684:	f7ff ffae 	bl	80015e4 <consolePrint>
  return count;
}
 8001688:	4620      	mov	r0, r4
 800168a:	bd10      	pop	{r4, pc}

0800168c <_close>:
int _close(__attribute__((unused)) int fd) { return -1; }
 800168c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop

08001694 <_fstat>:
int _fstat(__attribute__((unused)) int fd, 
           __attribute__((unused)) struct stat *st)
{
  st->st_mode = S_IFCHR;
 8001694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001698:	604b      	str	r3, [r1, #4]
  return 0;
}
 800169a:	2000      	movs	r0, #0
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop

080016a0 <_isatty>:
int _isatty(__attribute__((unused)) int fd) { return 1; }
 80016a0:	2001      	movs	r0, #1
 80016a2:	4770      	bx	lr

080016a4 <_lseek>:
off_t _lseek(__attribute__((unused)) int fd, 
             __attribute__((unused)) off_t offset, 
             __attribute__((unused)) int whence) { return 0; }
 80016a4:	2000      	movs	r0, #0
 80016a6:	4770      	bx	lr

080016a8 <_read>:
ssize_t _read(__attribute__((unused)) int fd, 
              __attribute__((unused)) void *buf, 
              __attribute__((unused)) size_t count) { return 0; }
 80016a8:	2000      	movs	r0, #0
 80016aa:	4770      	bx	lr

080016ac <fputc>:
FILE __stdout;
FILE __stderr;
int fputc(__attribute__((unused)) int ch, __attribute__((unused)) FILE *f)
{
  return 0;
}
 80016ac:	2000      	movs	r0, #0
 80016ae:	4770      	bx	lr

080016b0 <_ttywrch>:
void _ttywrch(__attribute__((unused)) int ch) { }
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop

080016b4 <enet_read_phy_reg>:
static volatile uint16_t g_eth_rxpool_ptrs_wpos = 0;
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 80016b4:	4909      	ldr	r1, [pc, #36]	; (80016dc <enet_read_phy_reg+0x28>)
 80016b6:	690a      	ldr	r2, [r1, #16]
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <enet_read_phy_reg+0x28>)
 80016ba:	07d2      	lsls	r2, r2, #31
 80016bc:	d4fb      	bmi.n	80016b6 <enet_read_phy_reg+0x2>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
                  ((reg_idx & 0x1f) << 6) |
 80016be:	f000 021f 	and.w	r2, r0, #31
 80016c2:	0192      	lsls	r2, r2, #6
                  ETH_MACMIIAR_CR_Div102  | // clock divider
 80016c4:	f442 6201 	orr.w	r2, r2, #2064	; 0x810
 80016c8:	f042 0201 	orr.w	r2, r2, #1
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 80016cc:	611a      	str	r2, [r3, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 80016ce:	691a      	ldr	r2, [r3, #16]
 80016d0:	4902      	ldr	r1, [pc, #8]	; (80016dc <enet_read_phy_reg+0x28>)
 80016d2:	07d2      	lsls	r2, r2, #31
 80016d4:	d4fb      	bmi.n	80016ce <enet_read_phy_reg+0x1a>
  return ETH->MACMIIDR & 0xffff;
 80016d6:	6948      	ldr	r0, [r1, #20]
}
 80016d8:	b280      	uxth	r0, r0
 80016da:	4770      	bx	lr
 80016dc:	40028000 	.word	0x40028000

080016e0 <enet_write_phy_reg>:

void enet_write_phy_reg(const uint8_t reg_idx, const uint16_t reg_val)
{
 80016e0:	b430      	push	{r4, r5}
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 80016e2:	4d15      	ldr	r5, [pc, #84]	; (8001738 <enet_write_phy_reg+0x58>)
 80016e4:	692b      	ldr	r3, [r5, #16]
 80016e6:	4c14      	ldr	r4, [pc, #80]	; (8001738 <enet_write_phy_reg+0x58>)
 80016e8:	07da      	lsls	r2, r3, #31
 80016ea:	d4fb      	bmi.n	80016e4 <enet_write_phy_reg+0x4>
  ETH->MACMIIDR = reg_val; // set the outgoing data word
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11)   |
                  ((reg_idx & 0x1f) << 6) |
 80016ec:	f000 021f 	and.w	r2, r0, #31
 80016f0:	0192      	lsls	r2, r2, #6
                  ETH_MACMIIAR_CR_Div102  | // MDC clock divider
                  ETH_MACMIIAR_MW         | // set the write bit
 80016f2:	f442 6301 	orr.w	r3, r2, #2064	; 0x810
 80016f6:	f043 0303 	orr.w	r3, r3, #3
}

void enet_write_phy_reg(const uint8_t reg_idx, const uint16_t reg_val)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIDR = reg_val; // set the outgoing data word
 80016fa:	6161      	str	r1, [r4, #20]
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11)   |
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // MDC clock divider
                  ETH_MACMIIAR_MW         | // set the write bit
                  ETH_MACMIIAR_MB; // start it up
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 80016fc:	4625      	mov	r5, r4

void enet_write_phy_reg(const uint8_t reg_idx, const uint16_t reg_val)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIDR = reg_val; // set the outgoing data word
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11)   |
 80016fe:	6123      	str	r3, [r4, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // MDC clock divider
                  ETH_MACMIIAR_MW         | // set the write bit
                  ETH_MACMIIAR_MB; // start it up
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8001700:	692b      	ldr	r3, [r5, #16]
 8001702:	07db      	lsls	r3, r3, #31
 8001704:	d4fc      	bmi.n	8001700 <enet_write_phy_reg+0x20>
static volatile uint16_t g_eth_rxpool_ptrs_wpos = 0;
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8001706:	4d0c      	ldr	r5, [pc, #48]	; (8001738 <enet_write_phy_reg+0x58>)
 8001708:	692c      	ldr	r4, [r5, #16]
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <enet_write_phy_reg+0x58>)
 800170c:	07e4      	lsls	r4, r4, #31
 800170e:	d4fb      	bmi.n	8001708 <enet_write_phy_reg+0x28>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
 8001710:	f442 6401 	orr.w	r4, r2, #2064	; 0x810
 8001714:	f044 0401 	orr.w	r4, r4, #1
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 8001718:	611c      	str	r4, [r3, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 800171a:	691c      	ldr	r4, [r3, #16]
 800171c:	4d06      	ldr	r5, [pc, #24]	; (8001738 <enet_write_phy_reg+0x58>)
 800171e:	07e2      	lsls	r2, r4, #31
 8001720:	d4fb      	bmi.n	800171a <enet_write_phy_reg+0x3a>
  return ETH->MACMIIDR & 0xffff;
 8001722:	696b      	ldr	r3, [r5, #20]
                  ETH_MACMIIAR_CR_Div102  | // MDC clock divider
                  ETH_MACMIIAR_MW         | // set the write bit
                  ETH_MACMIIAR_MB; // start it up
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
  uint16_t readback_val = enet_read_phy_reg(reg_idx);
  if (readback_val != reg_val)
 8001724:	b29b      	uxth	r3, r3
 8001726:	4299      	cmp	r1, r3
 8001728:	d004      	beq.n	8001734 <enet_write_phy_reg+0x54>
  {
    printf("woah there. tried to write 0x%04x to reg %02d but it read back %04x\r\n",
 800172a:	4602      	mov	r2, r0
           reg_val, reg_idx, readback_val);
  }
}
 800172c:	bc30      	pop	{r4, r5}
                  ETH_MACMIIAR_MB; // start it up
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
  uint16_t readback_val = enet_read_phy_reg(reg_idx);
  if (readback_val != reg_val)
  {
    printf("woah there. tried to write 0x%04x to reg %02d but it read back %04x\r\n",
 800172e:	4803      	ldr	r0, [pc, #12]	; (800173c <enet_write_phy_reg+0x5c>)
 8001730:	f002 b984 	b.w	8003a3c <printf>
           reg_val, reg_idx, readback_val);
  }
}
 8001734:	bc30      	pop	{r4, r5}
 8001736:	4770      	bx	lr
 8001738:	40028000 	.word	0x40028000
 800173c:	0800a920 	.word	0x0800a920

08001740 <enet_init>:

void enet_init()
{
 8001740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  printf("enet_init()\r\n");
 8001744:	48a2      	ldr	r0, [pc, #648]	; (80019d0 <enet_init+0x290>)
  // set up the pins on port a
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN     |  // and all the i/o ports we
                  RCC_AHB1ENR_GPIOBEN     |  // will be using to talk to
                  RCC_AHB1ENR_GPIOCEN;       // the ethernet PHY

  GPIOA->MODER |= (2 << (PORTA_ETH_REFCLK * 2)) |
 8001746:	4ca3      	ldr	r4, [pc, #652]	; (80019d4 <enet_init+0x294>)
           reg_val, reg_idx, readback_val);
  }
}

void enet_init()
{
 8001748:	b08e      	sub	sp, #56	; 0x38
  printf("enet_init()\r\n");
 800174a:	f002 f9cb 	bl	8003ae4 <puts>
  // set up the pins on port a
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN     |  // and all the i/o ports we
 800174e:	4aa2      	ldr	r2, [pc, #648]	; (80019d8 <enet_init+0x298>)
  GPIOA->AFR[0] |= (11 << (PORTA_ETH_REFCLK * 4)) |
                   (11 << (PORTA_ETH_MDIO   * 4)) |
                   (11 << (PORTA_ETH_CRSDV  * 4));

  // set up the ethernet pins on port b
  GPIOB->MODER |= (2 << (PORTB_ETH_TXEN * 2)) |
 8001750:	4ba2      	ldr	r3, [pc, #648]	; (80019dc <enet_init+0x29c>)

void enet_init()
{
  printf("enet_init()\r\n");
  // set up the pins on port a
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN     |  // and all the i/o ports we
 8001752:	6b11      	ldr	r1, [r2, #48]	; 0x30
                    (3 << (PORTB_ETH_TXD0 * 2)) |
                    (3 << (PORTB_ETH_TXD1 * 2)); // make the tx pins go fast
  GPIOB->MODER |= (1 << (PORTB_PHY_RESET * 2)); // reset = gpio output pin

  // set up the ethernet pins on port c
  GPIOC->MODER  |= ( 2 << (PORTC_ETH_MDC  * 2)) |
 8001754:	48a2      	ldr	r0, [pc, #648]	; (80019e0 <enet_init+0x2a0>)

void enet_init()
{
  printf("enet_init()\r\n");
  // set up the pins on port a
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN     |  // and all the i/o ports we
 8001756:	f041 0107 	orr.w	r1, r1, #7
 800175a:	6311      	str	r1, [r2, #48]	; 0x30
                  RCC_AHB1ENR_GPIOBEN     |  // will be using to talk to
                  RCC_AHB1ENR_GPIOCEN;       // the ethernet PHY

  GPIOA->MODER |= (2 << (PORTA_ETH_REFCLK * 2)) |
 800175c:	6821      	ldr	r1, [r4, #0]
 800175e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001762:	f041 0128 	orr.w	r1, r1, #40	; 0x28
 8001766:	6021      	str	r1, [r4, #0]
                  (2 << (PORTA_ETH_MDIO   * 2)) |
                  (2 << (PORTA_ETH_CRSDV  * 2)); // set these guys as AF pins
  GPIOA->AFR[0] |= (11 << (PORTA_ETH_REFCLK * 4)) |
 8001768:	6a21      	ldr	r1, [r4, #32]
 800176a:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 800176e:	f441 613b 	orr.w	r1, r1, #2992	; 0xbb0
 8001772:	6221      	str	r1, [r4, #32]
                   (11 << (PORTA_ETH_MDIO   * 4)) |
                   (11 << (PORTA_ETH_CRSDV  * 4));

  // set up the ethernet pins on port b
  GPIOB->MODER |= (2 << (PORTB_ETH_TXEN * 2)) |
 8001774:	6819      	ldr	r1, [r3, #0]
 8001776:	f041 6128 	orr.w	r1, r1, #176160768	; 0xa800000
 800177a:	6019      	str	r1, [r3, #0]
                  (2 << (PORTB_ETH_TXD0 * 2)) |
                  (2 << (PORTB_ETH_TXD1 * 2));
  GPIOB->AFR[1] |= (11 << ((PORTB_ETH_TXEN - 8) * 4)) |
 800177c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800177e:	f441 013b 	orr.w	r1, r1, #12255232	; 0xbb0000
 8001782:	f441 4130 	orr.w	r1, r1, #45056	; 0xb000
 8001786:	6259      	str	r1, [r3, #36]	; 0x24
                   (11 << ((PORTB_ETH_TXD0 - 8) * 4)) |
                   (11 << ((PORTB_ETH_TXD1 - 8) * 4));
  GPIOB->OSPEEDR |= (3 << (PORTB_ETH_TXEN * 2)) |
 8001788:	6899      	ldr	r1, [r3, #8]
 800178a:	f041 617c 	orr.w	r1, r1, #264241152	; 0xfc00000
 800178e:	6099      	str	r1, [r3, #8]
                    (3 << (PORTB_ETH_TXD0 * 2)) |
                    (3 << (PORTB_ETH_TXD1 * 2)); // make the tx pins go fast
  GPIOB->MODER |= (1 << (PORTB_PHY_RESET * 2)); // reset = gpio output pin
 8001790:	6819      	ldr	r1, [r3, #0]
 8001792:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001796:	6019      	str	r1, [r3, #0]

  // set up the ethernet pins on port c
  GPIOC->MODER  |= ( 2 << (PORTC_ETH_MDC  * 2)) |
 8001798:	6803      	ldr	r3, [r0, #0]
 800179a:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 800179e:	f043 0308 	orr.w	r3, r3, #8
 80017a2:	6003      	str	r3, [r0, #0]
                   ( 2 << (PORTC_ETH_RXD0 * 2)) |
                   ( 2 << (PORTC_ETH_RXD1 * 2));
  GPIOC->AFR[0] |= (11 << (PORTC_ETH_MDC  * 4)) |
 80017a4:	6a03      	ldr	r3, [r0, #32]
 80017a6:	f443 033b 	orr.w	r3, r3, #12255232	; 0xbb0000
 80017aa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80017ae:	6203      	str	r3, [r0, #32]
                   (11 << (PORTC_ETH_RXD0 * 4)) |
                   (11 << (PORTC_ETH_RXD1 * 4));

  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable the sysconfig block
 80017b0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80017b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b6:	6453      	str	r3, [r2, #68]	; 0x44
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 80017b8:	6913      	ldr	r3, [r2, #16]
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
 80017ba:	2100      	movs	r1, #0
  GPIOC->AFR[0] |= (11 << (PORTC_ETH_MDC  * 4)) |
                   (11 << (PORTC_ETH_RXD0 * 4)) |
                   (11 << (PORTC_ETH_RXD1 * 4));

  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable the sysconfig block
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 80017bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017c0:	6113      	str	r3, [r2, #16]
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
 80017c2:	9101      	str	r1, [sp, #4]
 80017c4:	9b01      	ldr	r3, [sp, #4]
 80017c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017ca:	da06      	bge.n	80017da <enet_init+0x9a>
 80017cc:	9b01      	ldr	r3, [sp, #4]
 80017ce:	3301      	adds	r3, #1
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	9b01      	ldr	r3, [sp, #4]
 80017d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017d8:	dbf8      	blt.n	80017cc <enet_init+0x8c>
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
 80017da:	2300      	movs	r3, #0
 80017dc:	9302      	str	r3, [sp, #8]
 80017de:	9b02      	ldr	r3, [sp, #8]
 80017e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017e4:	da06      	bge.n	80017f4 <enet_init+0xb4>
 80017e6:	9b02      	ldr	r3, [sp, #8]
 80017e8:	3301      	adds	r3, #1
 80017ea:	9302      	str	r3, [sp, #8]
 80017ec:	9b02      	ldr	r3, [sp, #8]
 80017ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017f2:	dbf8      	blt.n	80017e6 <enet_init+0xa6>
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode
 80017f4:	497b      	ldr	r1, [pc, #492]	; (80019e4 <enet_init+0x2a4>)
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
 80017f6:	4a7c      	ldr	r2, [pc, #496]	; (80019e8 <enet_init+0x2a8>)
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable the sysconfig block
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode
 80017f8:	684b      	ldr	r3, [r1, #4]
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
 80017fa:	2000      	movs	r0, #0
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable the sysconfig block
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode
 80017fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001800:	604b      	str	r3, [r1, #4]
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
 8001802:	9003      	str	r0, [sp, #12]
 8001804:	9b03      	ldr	r3, [sp, #12]
 8001806:	4293      	cmp	r3, r2
 8001808:	dc05      	bgt.n	8001816 <enet_init+0xd6>
 800180a:	9b03      	ldr	r3, [sp, #12]
 800180c:	3301      	adds	r3, #1
 800180e:	9303      	str	r3, [sp, #12]
 8001810:	9b03      	ldr	r3, [sp, #12]
 8001812:	4293      	cmp	r3, r2
 8001814:	ddf9      	ble.n	800180a <enet_init+0xca>
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
 8001816:	4970      	ldr	r1, [pc, #448]	; (80019d8 <enet_init+0x298>)
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8001818:	4a73      	ldr	r2, [pc, #460]	; (80019e8 <enet_init+0x2a8>)
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
 800181a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
 800181c:	2000      	movs	r0, #0
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
 800181e:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 8001822:	630b      	str	r3, [r1, #48]	; 0x30
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8001824:	9004      	str	r0, [sp, #16]
 8001826:	9b04      	ldr	r3, [sp, #16]
 8001828:	4293      	cmp	r3, r2
 800182a:	dc05      	bgt.n	8001838 <enet_init+0xf8>
 800182c:	9b04      	ldr	r3, [sp, #16]
 800182e:	3301      	adds	r3, #1
 8001830:	9304      	str	r3, [sp, #16]
 8001832:	9b04      	ldr	r3, [sp, #16]
 8001834:	4293      	cmp	r3, r2
 8001836:	ddf9      	ble.n	800182c <enet_init+0xec>
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 8001838:	4967      	ldr	r1, [pc, #412]	; (80019d8 <enet_init+0x298>)
  for (volatile int i = 0; i < 100000; i++) { } // wait
 800183a:	4a6b      	ldr	r2, [pc, #428]	; (80019e8 <enet_init+0x2a8>)
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 800183c:	690b      	ldr	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait
 800183e:	2000      	movs	r0, #0
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 8001840:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001844:	610b      	str	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8001846:	9005      	str	r0, [sp, #20]
 8001848:	9b05      	ldr	r3, [sp, #20]
 800184a:	4293      	cmp	r3, r2
 800184c:	dc05      	bgt.n	800185a <enet_init+0x11a>
 800184e:	9b05      	ldr	r3, [sp, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	9305      	str	r3, [sp, #20]
 8001854:	9b05      	ldr	r3, [sp, #20]
 8001856:	4293      	cmp	r3, r2
 8001858:	ddf9      	ble.n	800184e <enet_init+0x10e>
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 800185a:	495f      	ldr	r1, [pc, #380]	; (80019d8 <enet_init+0x298>)
  for (volatile int i = 0; i < 100000; i++) { } // wait
 800185c:	4a62      	ldr	r2, [pc, #392]	; (80019e8 <enet_init+0x2a8>)
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 800185e:	690b      	ldr	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8001860:	2000      	movs	r0, #0
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 8001862:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001866:	610b      	str	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8001868:	9006      	str	r0, [sp, #24]
 800186a:	9b06      	ldr	r3, [sp, #24]
 800186c:	4293      	cmp	r3, r2
 800186e:	dc05      	bgt.n	800187c <enet_init+0x13c>
 8001870:	9b06      	ldr	r3, [sp, #24]
 8001872:	3301      	adds	r3, #1
 8001874:	9306      	str	r3, [sp, #24]
 8001876:	9b06      	ldr	r3, [sp, #24]
 8001878:	4293      	cmp	r3, r2
 800187a:	ddf9      	ble.n	8001870 <enet_init+0x130>
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 800187c:	4956      	ldr	r1, [pc, #344]	; (80019d8 <enet_init+0x298>)
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)
 800187e:	4a5a      	ldr	r2, [pc, #360]	; (80019e8 <enet_init+0x2a8>)
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 8001880:	690b      	ldr	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)
 8001882:	2000      	movs	r0, #0
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 8001884:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001888:	610b      	str	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)
 800188a:	9007      	str	r0, [sp, #28]
 800188c:	9b07      	ldr	r3, [sp, #28]
 800188e:	4293      	cmp	r3, r2
 8001890:	dc05      	bgt.n	800189e <enet_init+0x15e>
 8001892:	9b07      	ldr	r3, [sp, #28]
 8001894:	3301      	adds	r3, #1
 8001896:	9307      	str	r3, [sp, #28]
 8001898:	9b07      	ldr	r3, [sp, #28]
 800189a:	4293      	cmp	r3, r2
 800189c:	ddf9      	ble.n	8001892 <enet_init+0x152>

  ETH->DMABMR |= ETH_DMABMR_SR;
 800189e:	4953      	ldr	r1, [pc, #332]	; (80019ec <enet_init+0x2ac>)
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 80018a0:	4a51      	ldr	r2, [pc, #324]	; (80019e8 <enet_init+0x2a8>)
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)

  ETH->DMABMR |= ETH_DMABMR_SR;
 80018a2:	680b      	ldr	r3, [r1, #0]
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 80018a4:	2000      	movs	r0, #0
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)

  ETH->DMABMR |= ETH_DMABMR_SR;
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	600b      	str	r3, [r1, #0]
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 80018ac:	9008      	str	r0, [sp, #32]
 80018ae:	9b08      	ldr	r3, [sp, #32]
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d805      	bhi.n	80018c0 <enet_init+0x180>
 80018b4:	9b08      	ldr	r3, [sp, #32]
 80018b6:	3301      	adds	r3, #1
 80018b8:	9308      	str	r3, [sp, #32]
 80018ba:	9b08      	ldr	r3, [sp, #32]
 80018bc:	4293      	cmp	r3, r2
 80018be:	d9f9      	bls.n	80018b4 <enet_init+0x174>
  while (ETH->DMABMR & ETH_DMABMR_SR) { } // wait for it to reset
 80018c0:	4a4a      	ldr	r2, [pc, #296]	; (80019ec <enet_init+0x2ac>)
 80018c2:	6813      	ldr	r3, [r2, #0]
 80018c4:	f013 0301 	ands.w	r3, r3, #1
 80018c8:	d1fb      	bne.n	80018c2 <enet_init+0x182>
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 80018ca:	9309      	str	r3, [sp, #36]	; 0x24
 80018cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018ce:	4a46      	ldr	r2, [pc, #280]	; (80019e8 <enet_init+0x2a8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d805      	bhi.n	80018e0 <enet_init+0x1a0>
 80018d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018d6:	3301      	adds	r3, #1
 80018d8:	9309      	str	r3, [sp, #36]	; 0x24
 80018da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018dc:	4293      	cmp	r3, r2
 80018de:	d9f9      	bls.n	80018d4 <enet_init+0x194>
  ETH->DMAOMR |= ETH_DMAOMR_FTF; // flush DMA
 80018e0:	4843      	ldr	r0, [pc, #268]	; (80019f0 <enet_init+0x2b0>)
  while (ETH->DMAOMR & ETH_DMAOMR_FTF) { } // wait for it to flush
 80018e2:	4944      	ldr	r1, [pc, #272]	; (80019f4 <enet_init+0x2b4>)

  ETH->DMABMR |= ETH_DMABMR_SR;
  for (volatile uint32_t i = 0; i < 100000; i++) { }
  while (ETH->DMABMR & ETH_DMABMR_SR) { } // wait for it to reset
  for (volatile uint32_t i = 0; i < 100000; i++) { }
  ETH->DMAOMR |= ETH_DMAOMR_FTF; // flush DMA
 80018e4:	f241 0218 	movw	r2, #4120	; 0x1018
 80018e8:	5883      	ldr	r3, [r0, r2]
 80018ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018ee:	5083      	str	r3, [r0, r2]
  while (ETH->DMAOMR & ETH_DMAOMR_FTF) { } // wait for it to flush
 80018f0:	680b      	ldr	r3, [r1, #0]
 80018f2:	4a3f      	ldr	r2, [pc, #252]	; (80019f0 <enet_init+0x2b0>)
 80018f4:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
 80018f8:	d1fa      	bne.n	80018f0 <enet_init+0x1b0>

  // now, configure the ethernet peripheral
  ETH->MACCR |= 0x02000000 | // CSTF = strip FCS. why isn't there a symbol ?
 80018fa:	6810      	ldr	r0, [r2, #0]
                ETH_MACCR_DM   | // full duplex
                ETH_MACCR_IPCO | // ipv4 checksum auto-generation for RX
                ETH_MACCR_APCS;  // automatically remove pad+CRC from frames
  ETH->MACFFR |= ETH_MACFFR_RA; // for now, don't try to filter in hardware
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
 80018fc:	4c37      	ldr	r4, [pc, #220]	; (80019dc <enet_init+0x29c>)
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 80018fe:	493a      	ldr	r1, [pc, #232]	; (80019e8 <enet_init+0x2a8>)
  for (volatile uint32_t i = 0; i < 100000; i++) { }
  ETH->DMAOMR |= ETH_DMAOMR_FTF; // flush DMA
  while (ETH->DMAOMR & ETH_DMAOMR_FTF) { } // wait for it to flush

  // now, configure the ethernet peripheral
  ETH->MACCR |= 0x02000000 | // CSTF = strip FCS. why isn't there a symbol ?
 8001900:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8001904:	f440 4099 	orr.w	r0, r0, #19584	; 0x4c80
 8001908:	6010      	str	r0, [r2, #0]
                ETH_MACCR_FES  | // enable 100 mbit mode
                ETH_MACCR_DM   | // full duplex
                ETH_MACCR_IPCO | // ipv4 checksum auto-generation for RX
                ETH_MACCR_APCS;  // automatically remove pad+CRC from frames
  ETH->MACFFR |= ETH_MACFFR_RA; // for now, don't try to filter in hardware
 800190a:	6850      	ldr	r0, [r2, #4]
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
 800190c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  ETH->MACCR |= 0x02000000 | // CSTF = strip FCS. why isn't there a symbol ?
                ETH_MACCR_FES  | // enable 100 mbit mode
                ETH_MACCR_DM   | // full duplex
                ETH_MACCR_IPCO | // ipv4 checksum auto-generation for RX
                ETH_MACCR_APCS;  // automatically remove pad+CRC from frames
  ETH->MACFFR |= ETH_MACFFR_RA; // for now, don't try to filter in hardware
 8001910:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001914:	6050      	str	r0, [r2, #4]
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
 8001916:	8325      	strh	r5, [r4, #24]
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 8001918:	930a      	str	r3, [sp, #40]	; 0x28
 800191a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800191c:	428b      	cmp	r3, r1
 800191e:	bf98      	it	ls
 8001920:	460a      	movls	r2, r1
 8001922:	d805      	bhi.n	8001930 <enet_init+0x1f0>
 8001924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001926:	3301      	adds	r3, #1
 8001928:	930a      	str	r3, [sp, #40]	; 0x28
 800192a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800192c:	4293      	cmp	r3, r2
 800192e:	d9f9      	bls.n	8001924 <enet_init+0x1e4>
  GPIOB->BSRRH = 1 << PORTB_PHY_RESET; // assert reset (pull it low)
 8001930:	492a      	ldr	r1, [pc, #168]	; (80019dc <enet_init+0x29c>)
  for (volatile uint32_t i = 0; i < 100000; i++) { } // let some time pass
 8001932:	4a2d      	ldr	r2, [pc, #180]	; (80019e8 <enet_init+0x2a8>)
 8001934:	2300      	movs	r3, #0
                ETH_MACCR_APCS;  // automatically remove pad+CRC from frames
  ETH->MACFFR |= ETH_MACFFR_RA; // for now, don't try to filter in hardware
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
  for (volatile uint32_t i = 0; i < 100000; i++) { }
  GPIOB->BSRRH = 1 << PORTB_PHY_RESET; // assert reset (pull it low)
 8001936:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800193a:	8348      	strh	r0, [r1, #26]
  for (volatile uint32_t i = 0; i < 100000; i++) { } // let some time pass
 800193c:	930b      	str	r3, [sp, #44]	; 0x2c
 800193e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001940:	4293      	cmp	r3, r2
 8001942:	d805      	bhi.n	8001950 <enet_init+0x210>
 8001944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001946:	3301      	adds	r3, #1
 8001948:	930b      	str	r3, [sp, #44]	; 0x2c
 800194a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800194c:	4293      	cmp	r3, r2
 800194e:	d9f9      	bls.n	8001944 <enet_init+0x204>
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET; // de-assert reset (pull it high)
 8001950:	4922      	ldr	r1, [pc, #136]	; (80019dc <enet_init+0x29c>)
  // todo: only need to wait until registers read back something other
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
 8001952:	4a29      	ldr	r2, [pc, #164]	; (80019f8 <enet_init+0x2b8>)
 8001954:	2300      	movs	r3, #0
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
  for (volatile uint32_t i = 0; i < 100000; i++) { }
  GPIOB->BSRRH = 1 << PORTB_PHY_RESET; // assert reset (pull it low)
  for (volatile uint32_t i = 0; i < 100000; i++) { } // let some time pass
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET; // de-assert reset (pull it high)
 8001956:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800195a:	8308      	strh	r0, [r1, #24]
  // todo: only need to wait until registers read back something other
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
 800195c:	930c      	str	r3, [sp, #48]	; 0x30
 800195e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001960:	4293      	cmp	r3, r2
 8001962:	d805      	bhi.n	8001970 <enet_init+0x230>
 8001964:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001966:	3301      	adds	r3, #1
 8001968:	930c      	str	r3, [sp, #48]	; 0x30
 800196a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800196c:	4293      	cmp	r3, r2
 800196e:	d9f9      	bls.n	8001964 <enet_init+0x224>
  printf("waiting for PHY to wake up...\r\n");
 8001970:	4822      	ldr	r0, [pc, #136]	; (80019fc <enet_init+0x2bc>)
 8001972:	f002 f8b7 	bl	8003ae4 <puts>
static volatile uint16_t g_eth_rxpool_ptrs_wpos = 0;
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8001976:	4a1e      	ldr	r2, [pc, #120]	; (80019f0 <enet_init+0x2b0>)
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 8001978:	f640 0511 	movw	r5, #2065	; 0x811
static volatile uint16_t g_eth_rxpool_ptrs_wpos = 0;
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 800197c:	4610      	mov	r0, r2
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET; // de-assert reset (pull it high)
  // todo: only need to wait until registers read back something other
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
  printf("waiting for PHY to wake up...\r\n");
  while (enet_read_phy_reg(0) == 0xffff) { }
 800197e:	f64f 74ff 	movw	r4, #65535	; 0xffff
static volatile uint16_t g_eth_rxpool_ptrs_wpos = 0;
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8001982:	6913      	ldr	r3, [r2, #16]
 8001984:	07d9      	lsls	r1, r3, #31
 8001986:	d4fc      	bmi.n	8001982 <enet_init+0x242>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 8001988:	6105      	str	r5, [r0, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 800198a:	6913      	ldr	r3, [r2, #16]
 800198c:	f013 0301 	ands.w	r3, r3, #1
 8001990:	d1fb      	bne.n	800198a <enet_init+0x24a>
  return ETH->MACMIIDR & 0xffff;
 8001992:	6941      	ldr	r1, [r0, #20]
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET; // de-assert reset (pull it high)
  // todo: only need to wait until registers read back something other
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
  printf("waiting for PHY to wake up...\r\n");
  while (enet_read_phy_reg(0) == 0xffff) { }
 8001994:	b289      	uxth	r1, r1
 8001996:	42a1      	cmp	r1, r4
 8001998:	d0f3      	beq.n	8001982 <enet_init+0x242>
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
 800199a:	930d      	str	r3, [sp, #52]	; 0x34
 800199c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800199e:	4a16      	ldr	r2, [pc, #88]	; (80019f8 <enet_init+0x2b8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d805      	bhi.n	80019b0 <enet_init+0x270>
 80019a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80019a6:	3301      	adds	r3, #1
 80019a8:	930d      	str	r3, [sp, #52]	; 0x34
 80019aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d9f9      	bls.n	80019a4 <enet_init+0x264>
  printf("done with PHY reset.\r\n");
 80019b0:	4813      	ldr	r0, [pc, #76]	; (8001a00 <enet_init+0x2c0>)
static volatile uint16_t g_eth_rxpool_ptrs_wpos = 0;
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 80019b2:	4d0f      	ldr	r5, [pc, #60]	; (80019f0 <enet_init+0x2b0>)
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
  printf("waiting for PHY to wake up...\r\n");
  while (enet_read_phy_reg(0) == 0xffff) { }
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
  printf("done with PHY reset.\r\n");
 80019b4:	f002 f896 	bl	8003ae4 <puts>
  printf("setting software strap registers...\r\n");
 80019b8:	4812      	ldr	r0, [pc, #72]	; (8001a04 <enet_init+0x2c4>)
 80019ba:	f002 f893 	bl	8003ae4 <puts>
  enet_write_phy_reg(0x09, 0x7821); // enable auto MDIX,
 80019be:	2009      	movs	r0, #9
 80019c0:	f647 0121 	movw	r1, #30753	; 0x7821
 80019c4:	f7ff fe8c 	bl	80016e0 <enet_write_phy_reg>
                                    // set INT/PWDN to be interrupt output
                                    // enable auto-negotiation
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
 80019c8:	2009      	movs	r0, #9
 80019ca:	f64f 0121 	movw	r1, #63521	; 0xf821
 80019ce:	e01b      	b.n	8001a08 <enet_init+0x2c8>
 80019d0:	0800a968 	.word	0x0800a968
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40020400 	.word	0x40020400
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40013800 	.word	0x40013800
 80019e8:	0001869f 	.word	0x0001869f
 80019ec:	40029000 	.word	0x40029000
 80019f0:	40028000 	.word	0x40028000
 80019f4:	40029018 	.word	0x40029018
 80019f8:	000f423f 	.word	0x000f423f
 80019fc:	0800a978 	.word	0x0800a978
 8001a00:	0800a998 	.word	0x0800a998
 8001a04:	0800a9b0 	.word	0x0800a9b0
 8001a08:	f7ff fe6a 	bl	80016e0 <enet_write_phy_reg>
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode
 8001a0c:	2004      	movs	r0, #4
 8001a0e:	f240 1101 	movw	r1, #257	; 0x101
 8001a12:	f7ff fe65 	bl	80016e0 <enet_write_phy_reg>
static volatile uint16_t g_eth_rxpool_ptrs_wpos = 0;
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8001a16:	462f      	mov	r7, r5
                                    // enable auto-negotiation
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode

  // cycle through and read a bunch of PHY registers to make sure it's alive
  for (int i = 0; i < 32; i++)
 8001a18:	2600      	movs	r6, #0
static volatile uint16_t g_eth_rxpool_ptrs_wpos = 0;
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8001a1a:	692b      	ldr	r3, [r5, #16]
 8001a1c:	07db      	lsls	r3, r3, #31
 8001a1e:	d4fc      	bmi.n	8001a1a <enet_init+0x2da>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
                  ((reg_idx & 0x1f) << 6) |
 8001a20:	01b3      	lsls	r3, r6, #6
                  ETH_MACMIIAR_CR_Div102  | // clock divider
 8001a22:	f443 6301 	orr.w	r3, r3, #2064	; 0x810
 8001a26:	f043 0301 	orr.w	r3, r3, #1
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 8001a2a:	613b      	str	r3, [r7, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8001a2c:	692b      	ldr	r3, [r5, #16]
 8001a2e:	f013 0401 	ands.w	r4, r3, #1
 8001a32:	d1fb      	bne.n	8001a2c <enet_init+0x2ec>
  return ETH->MACMIIDR & 0xffff;
 8001a34:	697a      	ldr	r2, [r7, #20]
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode

  // cycle through and read a bunch of PHY registers to make sure it's alive
  for (int i = 0; i < 32; i++)
    printf("PHY reg %02d = 0x%04x\r\n", i, enet_read_phy_reg(i));
 8001a36:	4842      	ldr	r0, [pc, #264]	; (8001b40 <enet_init+0x400>)
 8001a38:	4631      	mov	r1, r6
 8001a3a:	b292      	uxth	r2, r2
                                    // enable auto-negotiation
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode

  // cycle through and read a bunch of PHY registers to make sure it's alive
  for (int i = 0; i < 32; i++)
 8001a3c:	3601      	adds	r6, #1
    printf("PHY reg %02d = 0x%04x\r\n", i, enet_read_phy_reg(i));
 8001a3e:	f001 fffd 	bl	8003a3c <printf>
                                    // enable auto-negotiation
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode

  // cycle through and read a bunch of PHY registers to make sure it's alive
  for (int i = 0; i < 32; i++)
 8001a42:	2e20      	cmp	r6, #32
 8001a44:	d1e9      	bne.n	8001a1a <enet_init+0x2da>

  ////////////////////////////////////////////////////////////////////////
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
 8001a46:	4a3f      	ldr	r2, [pc, #252]	; (8001b44 <enet_init+0x404>)
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
 8001a48:	f8df e124 	ldr.w	lr, [pc, #292]	; 8001b70 <enet_init+0x430>

  ////////////////////////////////////////////////////////////////////////
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
 8001a4c:	f44f 0550 	mov.w	r5, #13631488	; 0xd00000
 8001a50:	6015      	str	r5, [r2, #0]
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
 8001a52:	4623      	mov	r3, r4
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
 8001a54:	6054      	str	r4, [r2, #4]
 8001a56:	46a4      	mov	ip, r4
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
 8001a58:	f8c2 e008 	str.w	lr, [r2, #8]
    if (i < ETH_DMA_NTXD-1)
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[i+1]; // chain to next
 8001a5c:	1c58      	adds	r0, r3, #1
 8001a5e:	0104      	lsls	r4, r0, #4
 8001a60:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8001a64:	f103 0708 	add.w	r7, r3, #8
 8001a68:	1911      	adds	r1, r2, r4
 8001a6a:	eb0e 26c0 	add.w	r6, lr, r0, lsl #11
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
    if (i < ETH_DMA_NTXD-1)
 8001a6e:	2803      	cmp	r0, #3
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[i+1]; // chain to next
 8001a70:	6079      	str	r1, [r7, #4]
 8001a72:	4603      	mov	r3, r0

  ////////////////////////////////////////////////////////////////////////
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
 8001a74:	5115      	str	r5, [r2, r4]
 8001a76:	4f33      	ldr	r7, [pc, #204]	; (8001b44 <enet_init+0x404>)
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
 8001a78:	f8c1 c004 	str.w	ip, [r1, #4]
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
 8001a7c:	608e      	str	r6, [r1, #8]
    if (i < ETH_DMA_NTXD-1)
 8001a7e:	d1ed      	bne.n	8001a5c <enet_init+0x31c>
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 8001a80:	4a31      	ldr	r2, [pc, #196]	; (8001b48 <enet_init+0x408>)
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
 8001a82:	4932      	ldr	r1, [pc, #200]	; (8001b4c <enet_init+0x40c>)
    g_eth_dma_tx_desc[i].des1 = 0;
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
    if (i < ETH_DMA_NTXD-1)
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[i+1]; // chain to next
    else
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[0]; // loop to first
 8001a84:	63ff      	str	r7, [r7, #60]	; 0x3c
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 8001a86:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
 8001a8a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 8001a8e:	6010      	str	r0, [r2, #0]
 8001a90:	4680      	mov	r8, r0
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
 8001a92:	6053      	str	r3, [r2, #4]
 8001a94:	469c      	mov	ip, r3
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
 8001a96:	6091      	str	r1, [r2, #8]
 8001a98:	f102 0010 	add.w	r0, r2, #16
 8001a9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001aa0:	2300      	movs	r3, #0
    if (i < ETH_DMA_NRXD-1)
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
 8001aa2:	1c5e      	adds	r6, r3, #1
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 8001aa4:	0135      	lsls	r5, r6, #4
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
    if (i < ETH_DMA_NRXD-1)
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
 8001aa6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8001aaa:	f103 0e08 	add.w	lr, r3, #8
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 8001aae:	1954      	adds	r4, r2, r5
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
    if (i < ETH_DMA_NRXD-1)
 8001ab0:	2e0f      	cmp	r6, #15
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
 8001ab2:	f8ce 0004 	str.w	r0, [lr, #4]
 8001ab6:	4633      	mov	r3, r6
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 8001ab8:	f842 8005 	str.w	r8, [r2, r5]
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
    if (i < ETH_DMA_NRXD-1)
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
 8001abc:	f8df e088 	ldr.w	lr, [pc, #136]	; 8001b48 <enet_init+0x408>
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
 8001ac0:	f8c4 c004 	str.w	ip, [r4, #4]
 8001ac4:	f100 0010 	add.w	r0, r0, #16
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
 8001ac8:	60a1      	str	r1, [r4, #8]
 8001aca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
    if (i < ETH_DMA_NRXD-1)
 8001ace:	d1e8      	bne.n	8001aa2 <enet_init+0x362>
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
    else
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[0];
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	491f      	ldr	r1, [pc, #124]	; (8001b50 <enet_init+0x410>)
 8001ad4:	4e1f      	ldr	r6, [pc, #124]	; (8001b54 <enet_init+0x414>)
 8001ad6:	4d20      	ldr	r5, [pc, #128]	; (8001b58 <enet_init+0x418>)
 8001ad8:	4c20      	ldr	r4, [pc, #128]	; (8001b5c <enet_init+0x41c>)
 8001ada:	4821      	ldr	r0, [pc, #132]	; (8001b60 <enet_init+0x420>)
 8001adc:	f8ce e0fc 	str.w	lr, [lr, #252]	; 0xfc
  ///////////////////////////////////////////////////////////////////////
  // set up the RAM pool for reception
  for (int i = 0; i < ETH_RAM_RXPOOL_NPTR; i++)
  {
    g_eth_rxpool_start[i] = &g_eth_rxpool[0];
    g_eth_rxpool_len[i] = 0;
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[0];
  }

  ///////////////////////////////////////////////////////////////////////
  // set up the RAM pool for reception
  for (int i = 0; i < ETH_RAM_RXPOOL_NPTR; i++)
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	2b80      	cmp	r3, #128	; 0x80
  {
    g_eth_rxpool_start[i] = &g_eth_rxpool[0];
    g_eth_rxpool_len[i] = 0;
    g_eth_rxpool_ptrs_wpos = 0;
 8001aea:	8022      	strh	r2, [r4, #0]

  ///////////////////////////////////////////////////////////////////////
  // set up the RAM pool for reception
  for (int i = 0; i < ETH_RAM_RXPOOL_NPTR; i++)
  {
    g_eth_rxpool_start[i] = &g_eth_rxpool[0];
 8001aec:	f841 6f04 	str.w	r6, [r1, #4]!
    g_eth_rxpool_len[i] = 0;
    g_eth_rxpool_ptrs_wpos = 0;
    g_eth_rxpool_ptrs_rpos = 0;
 8001af0:	8002      	strh	r2, [r0, #0]
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[0];
  }

  ///////////////////////////////////////////////////////////////////////
  // set up the RAM pool for reception
  for (int i = 0; i < ETH_RAM_RXPOOL_NPTR; i++)
 8001af2:	d1f6      	bne.n	8001ae2 <enet_init+0x3a2>
    g_eth_rxpool_ptrs_rpos = 0;
  }

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <enet_init+0x424>)
  /*
  ETH->DMABMR = ETH_DMABMR_AAB | ETH_DMABMR_USP |
                ETH_DMABMR_RDP_1Beat | ETH_DMABMR_RTPR_1_1 |
                ETH_DMABMR_PBL_1Beat | ETH_DMABMR_EDE;
  */
  ETH->DMAIER = ETH_DMAIER_NISE | ETH_DMAIER_RIE;
 8001af6:	4c1c      	ldr	r4, [pc, #112]	; (8001b68 <enet_init+0x428>)
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001af8:	481c      	ldr	r0, [pc, #112]	; (8001b6c <enet_init+0x42c>)

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
  ETH->DMARDLAR = (uint32_t)&g_eth_dma_rx_desc[0]; // point RX DMA to first desc
  ETH->DMAOMR = ETH_DMAOMR_TSF; // enable store-and-forward mode
 8001afa:	f241 0118 	movw	r1, #4120	; 0x1018
    g_eth_rxpool_ptrs_rpos = 0;
  }

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
 8001afe:	f241 0c10 	movw	ip, #4112	; 0x1010
  ETH->DMARDLAR = (uint32_t)&g_eth_dma_rx_desc[0]; // point RX DMA to first desc
 8001b02:	f241 060c 	movw	r6, #4108	; 0x100c
  /*
  ETH->DMABMR = ETH_DMABMR_AAB | ETH_DMABMR_USP |
                ETH_DMABMR_RDP_1Beat | ETH_DMABMR_RTPR_1_1 |
                ETH_DMABMR_PBL_1Beat | ETH_DMABMR_EDE;
  */
  ETH->DMAIER = ETH_DMAIER_NISE | ETH_DMAIER_RIE;
 8001b06:	f241 021c 	movw	r2, #4124	; 0x101c

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
  ETH->DMARDLAR = (uint32_t)&g_eth_dma_rx_desc[0]; // point RX DMA to first desc
  ETH->DMAOMR = ETH_DMAOMR_TSF; // enable store-and-forward mode
 8001b0a:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
    g_eth_rxpool_ptrs_rpos = 0;
  }

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
 8001b0e:	f843 700c 	str.w	r7, [r3, ip]
  ETH->DMARDLAR = (uint32_t)&g_eth_dma_rx_desc[0]; // point RX DMA to first desc
 8001b12:	f843 e006 	str.w	lr, [r3, r6]
  ETH->DMAOMR = ETH_DMAOMR_TSF; // enable store-and-forward mode
 8001b16:	505d      	str	r5, [r3, r1]
  /*
  ETH->DMABMR = ETH_DMABMR_AAB | ETH_DMABMR_USP |
                ETH_DMABMR_RDP_1Beat | ETH_DMABMR_RTPR_1_1 |
                ETH_DMABMR_PBL_1Beat | ETH_DMABMR_EDE;
  */
  ETH->DMAIER = ETH_DMAIER_NISE | ETH_DMAIER_RIE;
 8001b18:	509c      	str	r4, [r3, r2]
  ETH->MACCR |= ETH_MACCR_TE | // enable transmitter
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	2530      	movs	r5, #48	; 0x30
 8001b1e:	f042 020c 	orr.w	r2, r2, #12
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001b22:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 8001b26:	601a      	str	r2, [r3, #0]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001b28:	f880 533d 	strb.w	r5, [r0, #829]	; 0x33d
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001b2c:	6044      	str	r4, [r0, #4]
                ETH_MACCR_RE;  // enable receiver
  NVIC_SetPriority(ETH_IRQn, 3);
  NVIC_EnableIRQ(ETH_IRQn);
  ETH->DMAOMR |= ETH_DMAOMR_ST | ETH_DMAOMR_SR; // enable ethernet DMA tx/rx
 8001b2e:	585a      	ldr	r2, [r3, r1]
 8001b30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b34:	f042 0202 	orr.w	r2, r2, #2
 8001b38:	505a      	str	r2, [r3, r1]
}
 8001b3a:	b00e      	add	sp, #56	; 0x38
 8001b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b40:	0800a9d8 	.word	0x0800a9d8
 8001b44:	20008f6c 	.word	0x20008f6c
 8001b48:	200092b4 	.word	0x200092b4
 8001b4c:	20000f6c 	.word	0x20000f6c
 8001b50:	200090b0 	.word	0x200090b0
 8001b54:	200093b4 	.word	0x200093b4
 8001b58:	20008fb0 	.word	0x20008fb0
 8001b5c:	20008fac 	.word	0x20008fac
 8001b60:	20008fae 	.word	0x20008fae
 8001b64:	40028000 	.word	0x40028000
 8001b68:	00010040 	.word	0x00010040
 8001b6c:	e000e100 	.word	0xe000e100
 8001b70:	2000d3b4 	.word	0x2000d3b4

08001b74 <eth_vector>:

void eth_vector()
{
 8001b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  volatile uint32_t dmasr = ETH->DMASR;
 8001b78:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b7c:	4a2d      	ldr	r2, [pc, #180]	; (8001c34 <eth_vector+0xc0>)
  NVIC_EnableIRQ(ETH_IRQn);
  ETH->DMAOMR |= ETH_DMAOMR_ST | ETH_DMAOMR_SR; // enable ethernet DMA tx/rx
}

void eth_vector()
{
 8001b7e:	b083      	sub	sp, #12
  volatile uint32_t dmasr = ETH->DMASR;
 8001b80:	58d1      	ldr	r1, [r2, r3]
 8001b82:	9101      	str	r1, [sp, #4]
  ETH->DMASR = dmasr; // clear pending bits in the status register
 8001b84:	9901      	ldr	r1, [sp, #4]
 8001b86:	50d1      	str	r1, [r2, r3]
  //printf("eth_vector()\r\n");
  if (dmasr & ETH_DMASR_RS)
 8001b88:	9b01      	ldr	r3, [sp, #4]
 8001b8a:	065b      	lsls	r3, r3, #25
 8001b8c:	d549      	bpl.n	8001c22 <eth_vector+0xae>
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
 8001b8e:	4f2a      	ldr	r7, [pc, #168]	; (8001c38 <eth_vector+0xc4>)
 8001b90:	683d      	ldr	r5, [r7, #0]
 8001b92:	682b      	ldr	r3, [r5, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	db44      	blt.n	8001c22 <eth_vector+0xae>
 8001b98:	4e28      	ldr	r6, [pc, #160]	; (8001c3c <eth_vector+0xc8>)
 8001b9a:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8001c44 <eth_vector+0xd0>
 8001b9e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8001c48 <eth_vector+0xd4>
 8001ba2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001c4c <eth_vector+0xd8>
    {
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
 8001ba6:	f04f 0800 	mov.w	r8, #0
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
    {
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
 8001baa:	682c      	ldr	r4, [r5, #0]
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
 8001bac:	8833      	ldrh	r3, [r6, #0]
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
      g_eth_rxpool_len[wp] = rxn;
 8001bae:	4924      	ldr	r1, [pc, #144]	; (8001c40 <eth_vector+0xcc>)
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
    {
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
 8001bb0:	f3c4 440d 	ubfx	r4, r4, #16, #14
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
 8001bb4:	fa14 f383 	uxtah	r3, r4, r3
 8001bb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        g_eth_rxpool_wpos = 0;
 8001bbc:	bfa4      	itt	ge
 8001bbe:	4b1f      	ldrge	r3, [pc, #124]	; (8001c3c <eth_vector+0xc8>)
 8001bc0:	f8a3 8000 	strhge.w	r8, [r3]
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
 8001bc4:	f8bb 3000 	ldrh.w	r3, [fp]
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
 8001bc8:	8830      	ldrh	r0, [r6, #0]
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
 8001bca:	b29b      	uxth	r3, r3
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
      g_eth_rxpool_len[wp] = rxn;
      memcpy((uint8_t *)&g_eth_rxpool[g_eth_rxpool_wpos],
 8001bcc:	4622      	mov	r2, r4
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
    {
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
 8001bce:	b2a4      	uxth	r4, r4
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
      g_eth_rxpool_len[wp] = rxn;
 8001bd0:	f821 4013 	strh.w	r4, [r1, r3, lsl #1]
      memcpy((uint8_t *)&g_eth_rxpool[g_eth_rxpool_wpos],
 8001bd4:	f8b6 e000 	ldrh.w	lr, [r6]
             (const uint8_t *)g_eth_dma_rx_next_desc->des2,
 8001bd8:	68a9      	ldr	r1, [r5, #8]
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
 8001bda:	fa19 f080 	uxtah	r0, r9, r0
 8001bde:	f84a 0023 	str.w	r0, [sl, r3, lsl #2]
      g_eth_rxpool_len[wp] = rxn;
      memcpy((uint8_t *)&g_eth_rxpool[g_eth_rxpool_wpos],
 8001be2:	fa19 f08e 	uxtah	r0, r9, lr
 8001be6:	f001 fe31 	bl	800384c <memcpy>
             (const uint8_t *)g_eth_dma_rx_next_desc->des2,
             rxn);
      //printf("ethernet rx %d into rxpool ptr %d\r\n", rxn, wp);
      g_eth_rxpool_ptrs_wpos++;
 8001bea:	f8bb 3000 	ldrh.w	r3, [fp]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	f8ab 3000 	strh.w	r3, [fp]
      if (g_eth_rxpool_ptrs_wpos >= ETH_RAM_RXPOOL_NPTR)
 8001bf6:	f8bb 3000 	ldrh.w	r3, [fp]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	2b7f      	cmp	r3, #127	; 0x7f
        g_eth_rxpool_ptrs_wpos = 0;
 8001bfe:	bf84      	itt	hi
 8001c00:	4b10      	ldrhi	r3, [pc, #64]	; (8001c44 <eth_vector+0xd0>)
 8001c02:	f8a3 8000 	strhhi.w	r8, [r3]
      g_eth_rxpool_wpos += rxn;
 8001c06:	8833      	ldrh	r3, [r6, #0]
 8001c08:	fa14 f483 	uxtah	r4, r4, r3
 8001c0c:	b2a4      	uxth	r4, r4
 8001c0e:	8034      	strh	r4, [r6, #0]
      uint8_t *p = (uint8_t *)g_eth_rx_next_desc->des2;
      for (int i = 0; i < rxn; i++)
        printf("%02d: 0x%02x\r\n", i, p[i]);
*/

      g_eth_dma_rx_next_desc->des0 |= 0x80000000; // give it back to the DMA
 8001c10:	682b      	ldr	r3, [r5, #0]
 8001c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c16:	602b      	str	r3, [r5, #0]
      // advance the rx pointer for next time
      g_eth_dma_rx_next_desc = (eth_dma_desc_t *)g_eth_dma_rx_next_desc->des3;
 8001c18:	68ed      	ldr	r5, [r5, #12]
 8001c1a:	603d      	str	r5, [r7, #0]
  ETH->DMASR = dmasr; // clear pending bits in the status register
  //printf("eth_vector()\r\n");
  if (dmasr & ETH_DMASR_RS)
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
 8001c1c:	682b      	ldr	r3, [r5, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	dac3      	bge.n	8001baa <eth_vector+0x36>
      g_eth_dma_rx_next_desc->des0 |= 0x80000000; // give it back to the DMA
      // advance the rx pointer for next time
      g_eth_dma_rx_next_desc = (eth_dma_desc_t *)g_eth_dma_rx_next_desc->des3;
    }
  }
  dmasr = ETH->DMASR;
 8001c22:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <eth_vector+0xc0>)
 8001c24:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c28:	58d3      	ldr	r3, [r2, r3]
 8001c2a:	9301      	str	r3, [sp, #4]
  //printf("dmasr = 0x%08x\r\n", (int)dmasr);
}
 8001c2c:	b003      	add	sp, #12
 8001c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c32:	bf00      	nop
 8001c34:	40028000 	.word	0x40028000
 8001c38:	20000014 	.word	0x20000014
 8001c3c:	200090b0 	.word	0x200090b0
 8001c40:	20008fb0 	.word	0x20008fb0
 8001c44:	20008fac 	.word	0x20008fac
 8001c48:	200090b4 	.word	0x200090b4
 8001c4c:	200093b4 	.word	0x200093b4

08001c50 <enet_get_link_status>:
static volatile uint16_t g_eth_rxpool_ptrs_wpos = 0;
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8001c50:	4914      	ldr	r1, [pc, #80]	; (8001ca4 <enet_get_link_status+0x54>)
 8001c52:	690a      	ldr	r2, [r1, #16]
 8001c54:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <enet_get_link_status+0x54>)
 8001c56:	07d2      	lsls	r2, r2, #31
 8001c58:	d4fb      	bmi.n	8001c52 <enet_get_link_status+0x2>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 8001c5a:	f640 0251 	movw	r2, #2129	; 0x851
 8001c5e:	611a      	str	r2, [r3, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8001c60:	691a      	ldr	r2, [r3, #16]
 8001c62:	4910      	ldr	r1, [pc, #64]	; (8001ca4 <enet_get_link_status+0x54>)
 8001c64:	07d0      	lsls	r0, r2, #31
 8001c66:	d4fb      	bmi.n	8001c60 <enet_get_link_status+0x10>
  dmasr = ETH->DMASR;
  //printf("dmasr = 0x%08x\r\n", (int)dmasr);
}

enet_link_status_t enet_get_link_status()
{
 8001c68:	b510      	push	{r4, lr}
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
  return ETH->MACMIIDR & 0xffff;
 8001c6a:	694c      	ldr	r4, [r1, #20]
 8001c6c:	b2a4      	uxth	r4, r4

enet_link_status_t enet_get_link_status()
{
  uint16_t status = enet_read_phy_reg(0x01);
  //printf("PHY status = 0x%02x\r\n", status);
  if (status & (1 << 4)) {
 8001c6e:	06e2      	lsls	r2, r4, #27
    err_set(ERR_ETH_REMOTE_FAULT);
 8001c70:	f04f 0002 	mov.w	r0, #2

enet_link_status_t enet_get_link_status()
{
  uint16_t status = enet_read_phy_reg(0x01);
  //printf("PHY status = 0x%02x\r\n", status);
  if (status & (1 << 4)) {
 8001c74:	d50a      	bpl.n	8001c8c <enet_get_link_status+0x3c>
    err_set(ERR_ETH_REMOTE_FAULT);
 8001c76:	f001 fda5 	bl	80037c4 <err_set>
  } else {
    err_unset(ERR_ETH_REMOTE_FAULT);
  }
  if (status & (1 << 5)) {
 8001c7a:	06a3      	lsls	r3, r4, #26
    err_unset(ERR_ETH_NEGOTIATING);
 8001c7c:	f04f 0003 	mov.w	r0, #3
  if (status & (1 << 4)) {
    err_set(ERR_ETH_REMOTE_FAULT);
  } else {
    err_unset(ERR_ETH_REMOTE_FAULT);
  }
  if (status & (1 << 5)) {
 8001c80:	d50a      	bpl.n	8001c98 <enet_get_link_status+0x48>
    err_unset(ERR_ETH_NEGOTIATING);
 8001c82:	f001 fda5 	bl	80037d0 <err_unset>
    err_set(ERR_ETH_NEGOTIATING);
  }
  if (status & (1 << 2))
    return ENET_LINK_UP;
  return ENET_LINK_DOWN;
}
 8001c86:	f3c4 0080 	ubfx	r0, r4, #2, #1
 8001c8a:	bd10      	pop	{r4, pc}
  uint16_t status = enet_read_phy_reg(0x01);
  //printf("PHY status = 0x%02x\r\n", status);
  if (status & (1 << 4)) {
    err_set(ERR_ETH_REMOTE_FAULT);
  } else {
    err_unset(ERR_ETH_REMOTE_FAULT);
 8001c8c:	f001 fda0 	bl	80037d0 <err_unset>
  }
  if (status & (1 << 5)) {
 8001c90:	06a3      	lsls	r3, r4, #26
    err_unset(ERR_ETH_NEGOTIATING);
 8001c92:	f04f 0003 	mov.w	r0, #3
  if (status & (1 << 4)) {
    err_set(ERR_ETH_REMOTE_FAULT);
  } else {
    err_unset(ERR_ETH_REMOTE_FAULT);
  }
  if (status & (1 << 5)) {
 8001c96:	d4f4      	bmi.n	8001c82 <enet_get_link_status+0x32>
    err_unset(ERR_ETH_NEGOTIATING);
  } else {
    err_set(ERR_ETH_NEGOTIATING);
 8001c98:	f001 fd94 	bl	80037c4 <err_set>
  }
  if (status & (1 << 2))
    return ENET_LINK_UP;
  return ENET_LINK_DOWN;
}
 8001c9c:	f3c4 0080 	ubfx	r0, r4, #2, #1
 8001ca0:	bd10      	pop	{r4, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40028000 	.word	0x40028000

08001ca8 <eth_send_raw_packet>:

void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
 8001ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
 8001caa:	4e1c      	ldr	r6, [pc, #112]	; (8001d1c <eth_send_raw_packet+0x74>)
 8001cac:	6833      	ldr	r3, [r6, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	db2d      	blt.n	8001d10 <eth_send_raw_packet+0x68>
 8001cb4:	460d      	mov	r5, r1
 8001cb6:	4607      	mov	r7, r0
  {
    err_set(ERR_ETH_BUFFER_FULL);
    return; // if it's set, then we have run out of ringbuffer room. can't tx.
  }
  err_unset(ERR_ETH_BUFFER_FULL);
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f001 fd89 	bl	80037d0 <err_unset>
  /*
  printf("sending using TX descriptor %08x status 0x%08x\r\n",
         (unsigned)g_eth_tx_next_desc,
         (unsigned)g_eth_tx_next_desc->control);
 */
  uint8_t *buf = (uint8_t *)g_eth_dma_tx_next_desc->des2;
 8001cbe:	6834      	ldr	r4, [r6, #0]
  if (pkt_len > ETH_NBUF)
    pkt_len = ETH_NBUF; // let's not blow through our packet buffer
  memcpy(buf, pkt, pkt_len);
 8001cc0:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001cc4:	bf28      	it	cs
 8001cc6:	f44f 6500 	movcs.w	r5, #2048	; 0x800
 8001cca:	4639      	mov	r1, r7
 8001ccc:	462a      	mov	r2, r5
  /*
  printf("sending using TX descriptor %08x status 0x%08x\r\n",
         (unsigned)g_eth_tx_next_desc,
         (unsigned)g_eth_tx_next_desc->control);
 */
  uint8_t *buf = (uint8_t *)g_eth_dma_tx_next_desc->des2;
 8001cce:	68a0      	ldr	r0, [r4, #8]
  if (pkt_len > ETH_NBUF)
    pkt_len = ETH_NBUF; // let's not blow through our packet buffer
  memcpy(buf, pkt, pkt_len);
 8001cd0:	f001 fdbc 	bl	800384c <memcpy>
  g_eth_dma_tx_next_desc->des1 = pkt_len;
 8001cd4:	6065      	str	r5, [r4, #4]
  g_eth_dma_tx_next_desc->des0 |= 0x30000000; // LS+FS = single-buffer packet
 8001cd6:	6823      	ldr	r3, [r4, #0]
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
 8001cd8:	4a11      	ldr	r2, [pc, #68]	; (8001d20 <eth_send_raw_packet+0x78>)
  uint8_t *buf = (uint8_t *)g_eth_dma_tx_next_desc->des2;
  if (pkt_len > ETH_NBUF)
    pkt_len = ETH_NBUF; // let's not blow through our packet buffer
  memcpy(buf, pkt, pkt_len);
  g_eth_dma_tx_next_desc->des1 = pkt_len;
  g_eth_dma_tx_next_desc->des0 |= 0x30000000; // LS+FS = single-buffer packet
 8001cda:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001cde:	6023      	str	r3, [r4, #0]
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
 8001ce0:	6823      	ldr	r3, [r4, #0]
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
 8001ce2:	f241 0114 	movw	r1, #4116	; 0x1014
  if (pkt_len > ETH_NBUF)
    pkt_len = ETH_NBUF; // let's not blow through our packet buffer
  memcpy(buf, pkt, pkt_len);
  g_eth_dma_tx_next_desc->des1 = pkt_len;
  g_eth_dma_tx_next_desc->des0 |= 0x30000000; // LS+FS = single-buffer packet
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
 8001ce6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001cea:	6023      	str	r3, [r4, #0]
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
 8001cec:	5853      	ldr	r3, [r2, r1]
 8001cee:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8001cf2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001cf6:	d002      	beq.n	8001cfe <eth_send_raw_packet+0x56>
  {
    ETH->DMASR = ETH_DMASR_TBUS; // clear the buffer-unavailable flag
    ETH->DMATPDR = 0; // transmit poll demand = kick it moving again
  }
  g_eth_dma_tx_next_desc = (eth_dma_desc_t *)g_eth_dma_tx_next_desc->des3;
 8001cf8:	68e3      	ldr	r3, [r4, #12]
 8001cfa:	6033      	str	r3, [r6, #0]
 8001cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
  {
    ETH->DMASR = ETH_DMASR_TBUS; // clear the buffer-unavailable flag
    ETH->DMATPDR = 0; // transmit poll demand = kick it moving again
 8001cfe:	f241 0304 	movw	r3, #4100	; 0x1004
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
  {
    ETH->DMASR = ETH_DMASR_TBUS; // clear the buffer-unavailable flag
 8001d02:	2504      	movs	r5, #4
    ETH->DMATPDR = 0; // transmit poll demand = kick it moving again
 8001d04:	2000      	movs	r0, #0
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
  {
    ETH->DMASR = ETH_DMASR_TBUS; // clear the buffer-unavailable flag
 8001d06:	5055      	str	r5, [r2, r1]
    ETH->DMATPDR = 0; // transmit poll demand = kick it moving again
 8001d08:	50d0      	str	r0, [r2, r3]
  }
  g_eth_dma_tx_next_desc = (eth_dma_desc_t *)g_eth_dma_tx_next_desc->des3;
 8001d0a:	68e3      	ldr	r3, [r4, #12]
 8001d0c:	6033      	str	r3, [r6, #0]
 8001d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
  {
    err_set(ERR_ETH_BUFFER_FULL);
 8001d10:	2001      	movs	r0, #1
    ETH->DMATPDR = 0; // transmit poll demand = kick it moving again
  }
  g_eth_dma_tx_next_desc = (eth_dma_desc_t *)g_eth_dma_tx_next_desc->des3;
  //uint16_t r = enet_read_phy_reg(0x17);
  //printf(" rmii status = 0x%04x\r\n", (unsigned)r);
}
 8001d12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
  {
    err_set(ERR_ETH_BUFFER_FULL);
 8001d16:	f001 bd55 	b.w	80037c4 <err_set>
 8001d1a:	bf00      	nop
 8001d1c:	20000010 	.word	0x20000010
 8001d20:	40028000 	.word	0x40028000

08001d24 <eth_htons>:
  //printf(" rmii status = 0x%04x\r\n", (unsigned)r);
}

// todo: find ways for this to be overridden on CPU's with built-ins for this
uint16_t eth_htons(const uint16_t x)
{
 8001d24:	ba40      	rev16	r0, r0
  return ((x & 0xff) << 8) | ((x >> 8) & 0xff);
}
 8001d26:	b280      	uxth	r0, r0
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop

08001d2c <eth_htonl>:
{
  return ((x & 0x000000ff) << 24)  |
         ((x & 0x0000ff00) << 8)   |
         ((x & 0x00ff0000) >> 8)   |
         ((x & 0xff000000) >> 24);
}
 8001d2c:	ba00      	rev	r0, r0
 8001d2e:	4770      	bx	lr

08001d30 <enet_send_udp_ucast>:

void enet_send_udp_ucast(const uint8_t *dest_mac,
                         const uint32_t dest_ip, const uint16_t dest_port,
                         const uint32_t source_ip, const uint16_t source_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
 8001d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d34:	b083      	sub	sp, #12
 8001d36:	4c34      	ldr	r4, [pc, #208]	; (8001e08 <enet_send_udp_ucast+0xd8>)
 8001d38:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8001d3a:	9501      	str	r5, [sp, #4]
 8001d3c:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
 8001d40:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8001d44:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8001e10 <enet_send_udp_ucast+0xe0>
 8001d48:	1e47      	subs	r7, r0, #1
 8001d4a:	4626      	mov	r6, r4
 8001d4c:	3005      	adds	r0, #5
  eth_udp_header_t *h = (eth_udp_header_t *)&g_eth_udpbuf[0];
  for (int i = 0; i < 6; i++)
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
 8001d4e:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 8001d52:	f806 cb01 	strb.w	ip, [r6], #1
                         const uint32_t dest_ip, const uint16_t dest_port,
                         const uint32_t source_ip, const uint16_t source_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  eth_udp_header_t *h = (eth_udp_header_t *)&g_eth_udpbuf[0];
  for (int i = 0; i < 6; i++)
 8001d56:	4287      	cmp	r7, r0
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
 8001d58:	f81e cb01 	ldrb.w	ip, [lr], #1
 8001d5c:	f886 c005 	strb.w	ip, [r6, #5]
                         const uint32_t dest_ip, const uint16_t dest_port,
                         const uint32_t source_ip, const uint16_t source_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  eth_udp_header_t *h = (eth_udp_header_t *)&g_eth_udpbuf[0];
  for (int i = 0; i < 6; i++)
 8001d60:	d1f5      	bne.n	8001d4e <enet_send_udp_ucast+0x1e>
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
 8001d62:	7ba6      	ldrb	r6, [r4, #14]
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
 8001d64:	7be7      	ldrb	r7, [r4, #15]
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
 8001d66:	f8b4 c012 	ldrh.w	ip, [r4, #18]
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
 8001d6a:	f8b4 e018 	ldrh.w	lr, [r4, #24]
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
 8001d6e:	4827      	ldr	r0, [pc, #156]	; (8001e0c <enet_send_udp_ucast+0xdc>)
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
 8001d70:	f04f 0805 	mov.w	r8, #5
 8001d74:	f368 0603 	bfi	r6, r8, #0, #4
  h->ip.version = ETH_IP_VERSION; // ipv4
 8001d78:	f04f 0904 	mov.w	r9, #4
 8001d7c:	ba1b      	rev	r3, r3
 8001d7e:	fa91 fa81 	rev.w	sl, r1
 8001d82:	f369 1607 	bfi	r6, r9, #4, #4
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
 8001d86:	f8c4 301a 	str.w	r3, [r4, #26]
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
 8001d8a:	f105 081c 	add.w	r8, r5, #28
 8001d8e:	ba52      	rev16	r2, r2
 8001d90:	fa9b fb9b 	rev16.w	fp, fp
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
 8001d94:	f105 0908 	add.w	r9, r5, #8
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
 8001d98:	2340      	movs	r3, #64	; 0x40
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
 8001d9a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
 8001d9e:	9901      	ldr	r1, [sp, #4]
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
  h->ip.dest_addr = eth_htonl(dest_ip);
 8001da0:	f8c4 a01e 	str.w	sl, [r4, #30]
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
 8001da4:	f36f 0c0f 	bfc	ip, #0, #16
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
 8001da8:	f36f 0e0f 	bfc	lr, #0, #16
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
 8001dac:	84a2      	strh	r2, [r4, #36]	; 0x24
  h->source_port = eth_htons(source_port); //1234;
 8001dae:	f8a4 b022 	strh.w	fp, [r4, #34]	; 0x22
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
 8001db2:	73a6      	strb	r6, [r4, #14]
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
 8001db4:	82a3      	strh	r3, [r4, #20]
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
 8001db6:	f36f 0787 	bfc	r7, #2, #6
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
 8001dba:	f04f 0301 	mov.w	r3, #1
 8001dbe:	fa98 f898 	rev16.w	r8, r8
 8001dc2:	fa99 f999 	rev16.w	r9, r9
  for (int i = 0; i < 6; i++)
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
 8001dc6:	f04f 0a08 	mov.w	sl, #8
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
 8001dca:	f04f 0b11 	mov.w	fp, #17
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
 8001dce:	2600      	movs	r6, #0
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
 8001dd0:	462a      	mov	r2, r5
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
 8001dd2:	73e7      	strb	r7, [r4, #15]
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
 8001dd4:	f8a4 c012 	strh.w	ip, [r4, #18]
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
 8001dd8:	f8a4 e018 	strh.w	lr, [r4, #24]
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
 8001ddc:	f8a4 8010 	strh.w	r8, [r4, #16]
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
 8001de0:	f8a4 9026 	strh.w	r9, [r4, #38]	; 0x26
  for (int i = 0; i < 6; i++)
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
 8001de4:	f8a4 a00c 	strh.w	sl, [r4, #12]
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
 8001de8:	75a3      	strb	r3, [r4, #22]
  h->ip.proto = ETH_IP_PROTO_UDP;
 8001dea:	f884 b017 	strb.w	fp, [r4, #23]
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
 8001dee:	8526      	strh	r6, [r4, #40]	; 0x28
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
 8001df0:	f001 fd2c 	bl	800384c <memcpy>
  eth_send_raw_packet(g_eth_udpbuf, sizeof(eth_udp_header_t) + payload_len);
 8001df4:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 8001df8:	4803      	ldr	r0, [pc, #12]	; (8001e08 <enet_send_udp_ucast+0xd8>)
 8001dfa:	b289      	uxth	r1, r1
    0x08, 0xca, 0xfe, 0xbe, 0xef, 0x12, 0x34, 0x56,
    0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7b, 0x94, 0x60, 0x0f };
  eth_send_raw_packet(raw_test_pkt, 68); //sizeof(reg_idx) + payload_len);
  */
}
 8001dfc:	b003      	add	sp, #12
 8001dfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
  eth_send_raw_packet(g_eth_udpbuf, sizeof(eth_udp_header_t) + payload_len);
 8001e02:	f7ff bf51 	b.w	8001ca8 <eth_send_raw_packet>
 8001e06:	bf00      	nop
 8001e08:	20000990 	.word	0x20000990
 8001e0c:	200009ba 	.word	0x200009ba
 8001e10:	0800aa10 	.word	0x0800aa10

08001e14 <enet_send_udp_mcast>:
static uint8_t  g_eth_src_mac[6] = { 0xa4, 0xf3, 0xc1, 0x00, 0x01, 0x00 };
static uint32_t g_eth_src_ip = 0x0a636363; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
 8001e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e16:	b087      	sub	sp, #28
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 8001e18:	e88d 000e 	stmia.w	sp, {r1, r2, r3}

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
 8001e1c:	f3c0 4c07 	ubfx	ip, r0, #16, #8
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
 8001e20:	f3c0 2e07 	ubfx	lr, r0, #8, #8
static uint8_t  g_eth_src_mac[6] = { 0xa4, 0xf3, 0xc1, 0x00, 0x01, 0x00 };
static uint32_t g_eth_src_ip = 0x0a636363; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
 8001e24:	4604      	mov	r4, r0
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 8001e26:	460a      	mov	r2, r1
static uint32_t g_eth_src_ip = 0x0a636363; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
 8001e28:	2701      	movs	r7, #1
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 8001e2a:	4601      	mov	r1, r0
static uint32_t g_eth_src_ip = 0x0a636363; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
 8001e2c:	2600      	movs	r6, #0
 8001e2e:	255e      	movs	r5, #94	; 0x5e
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 8001e30:	a804      	add	r0, sp, #16
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <enet_send_udp_mcast+0x40>)
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
 8001e34:	f88d 4015 	strb.w	r4, [sp, #21]

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
 8001e38:	f88d c013 	strb.w	ip, [sp, #19]
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
 8001e3c:	f88d e014 	strb.w	lr, [sp, #20]
static uint32_t g_eth_src_ip = 0x0a636363; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
 8001e40:	f88d 7010 	strb.w	r7, [sp, #16]
 8001e44:	f88d 6011 	strb.w	r6, [sp, #17]
 8001e48:	f88d 5012 	strb.w	r5, [sp, #18]
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 8001e4c:	f7ff ff70 	bl	8001d30 <enet_send_udp_ucast>
                      g_eth_src_ip, mcast_port,
                      payload, payload_len);
}
 8001e50:	b007      	add	sp, #28
 8001e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e54:	0a636363 	.word	0x0a636363

08001e58 <eth_dispatch_udp>:

bool eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
  const eth_udp_header_t *udp = (const eth_udp_header_t *)data;
  const uint16_t port = eth_htons(udp->dest_port);
  const uint16_t payload_len = eth_htons(udp->len) - 8;
 8001e58:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
}

bool eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
  const eth_udp_header_t *udp = (const eth_udp_header_t *)data;
  const uint16_t port = eth_htons(udp->dest_port);
 8001e5a:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 8001e5c:	ba5b      	rev16	r3, r3
  const uint16_t payload_len = eth_htons(udp->len) - 8;
 8001e5e:	3b08      	subs	r3, #8
  const uint8_t *payload = data + sizeof(eth_udp_header_t);
  //printf("  udp len: %d\r\n", udp_payload_len);
  if (payload_len > len - sizeof(eth_udp_header_t))
 8001e60:	392a      	subs	r1, #42	; 0x2a

bool eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
  const eth_udp_header_t *udp = (const eth_udp_header_t *)data;
  const uint16_t port = eth_htons(udp->dest_port);
  const uint16_t payload_len = eth_htons(udp->len) - 8;
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	ba52      	rev16	r2, r2
  const uint8_t *payload = data + sizeof(eth_udp_header_t);
  //printf("  udp len: %d\r\n", udp_payload_len);
  if (payload_len > len - sizeof(eth_udp_header_t))
 8001e66:	428b      	cmp	r3, r1
 8001e68:	b292      	uxth	r2, r2
 8001e6a:	d803      	bhi.n	8001e74 <eth_dispatch_udp+0x1c>
  for (int i = 0; i < payload_len; i++)
  {
    printf("  %02d: %02x\r\n", i, payload[i]);
  }
  */
  if (port == 11333 && payload_len > 0)
 8001e6c:	f642 4145 	movw	r1, #11333	; 0x2c45
 8001e70:	428a      	cmp	r2, r1
 8001e72:	d001      	beq.n	8001e78 <eth_dispatch_udp+0x20>
  const uint16_t port = eth_htons(udp->dest_port);
  const uint16_t payload_len = eth_htons(udp->len) - 8;
  const uint8_t *payload = data + sizeof(eth_udp_header_t);
  //printf("  udp len: %d\r\n", udp_payload_len);
  if (payload_len > len - sizeof(eth_udp_header_t))
    return false; // ignore fragmented UDP packets.
 8001e74:	2000      	movs	r0, #0
 8001e76:	4770      	bx	lr
  for (int i = 0; i < payload_len; i++)
  {
    printf("  %02d: %02x\r\n", i, payload[i]);
  }
  */
  if (port == 11333 && payload_len > 0)
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0fb      	beq.n	8001e74 <eth_dispatch_udp+0x1c>
    return eth_dispatch_udp(data, len);
  return false; // if we get here, we aren't smart enough to handle this packet
}

bool eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
 8001e7c:	b530      	push	{r4, r5, lr}
    printf("  %02d: %02x\r\n", i, payload[i]);
  }
  */
  if (port == 11333 && payload_len > 0)
  {
    const uint8_t cmd = payload[0];
 8001e7e:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
    return eth_dispatch_udp(data, len);
  return false; // if we get here, we aren't smart enough to handle this packet
}

bool eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
 8001e82:	b083      	sub	sp, #12
  */
  if (port == 11333 && payload_len > 0)
  {
    const uint8_t cmd = payload[0];
    //printf("  enet rx cmd = 0x%02x\r\n", cmd);
    if (cmd == 0) // CORRECT
 8001e84:	b374      	cbz	r4, 8001ee4 <eth_dispatch_udp+0x8c>
    {
      printf("Received printStatusCommand...\n");

    }
    else if (cmd == 1 && payload_len >= 5)
 8001e86:	2c01      	cmp	r4, #1
bool eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
  const eth_udp_header_t *udp = (const eth_udp_header_t *)data;
  const uint16_t port = eth_htons(udp->dest_port);
  const uint16_t payload_len = eth_htons(udp->len) - 8;
  const uint8_t *payload = data + sizeof(eth_udp_header_t);
 8001e88:	f100 022a 	add.w	r2, r0, #42	; 0x2a
    if (cmd == 0) // CORRECT
    {
      printf("Received printStatusCommand...\n");

    }
    else if (cmd == 1 && payload_len >= 5)
 8001e8c:	d019      	beq.n	8001ec2 <eth_dispatch_udp+0x6a>
      for (int i = 0; i < NUM_DMXL; i++)
        dmxl_set_control_mode(i, (dmxl_control_mode_t)payload[1+i]);
      delay_ms(1); // be sure they control mode messages get through
      return true;
    }
    else if (cmd == 2 && payload_len >= 9)
 8001e8e:	2c02      	cmp	r4, #2
 8001e90:	d002      	beq.n	8001e98 <eth_dispatch_udp+0x40>
  const uint16_t port = eth_htons(udp->dest_port);
  const uint16_t payload_len = eth_htons(udp->len) - 8;
  const uint8_t *payload = data + sizeof(eth_udp_header_t);
  //printf("  udp len: %d\r\n", udp_payload_len);
  if (payload_len > len - sizeof(eth_udp_header_t))
    return false; // ignore fragmented UDP packets.
 8001e92:	2000      	movs	r0, #0
      return true;
    }
  }
  // if we get here, we haven't handled this packet
  return false;
}
 8001e94:	b003      	add	sp, #12
 8001e96:	bd30      	pop	{r4, r5, pc}
      for (int i = 0; i < NUM_DMXL; i++)
        dmxl_set_control_mode(i, (dmxl_control_mode_t)payload[1+i]);
      delay_ms(1); // be sure they control mode messages get through
      return true;
    }
    else if (cmd == 2 && payload_len >= 9)
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d9fa      	bls.n	8001e92 <eth_dispatch_udp+0x3a>
 8001e9c:	f100 0408 	add.w	r4, r0, #8
 8001ea0:	466a      	mov	r2, sp
    {
      uint16_t targets[NUM_DMXL];
      for (int i = 0; i < NUM_DMXL; i++)
        targets[i] = (payload[1+2*i] << 8) | payload[2+2*i];
 8001ea2:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8001ea6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001eaa:	3002      	adds	r0, #2
 8001eac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      return true;
    }
    else if (cmd == 2 && payload_len >= 9)
    {
      uint16_t targets[NUM_DMXL];
      for (int i = 0; i < NUM_DMXL; i++)
 8001eb0:	42a0      	cmp	r0, r4
        targets[i] = (payload[1+2*i] << 8) | payload[2+2*i];
 8001eb2:	f822 3b02 	strh.w	r3, [r2], #2
      return true;
    }
    else if (cmd == 2 && payload_len >= 9)
    {
      uint16_t targets[NUM_DMXL];
      for (int i = 0; i < NUM_DMXL; i++)
 8001eb6:	d1f4      	bne.n	8001ea2 <eth_dispatch_udp+0x4a>
      */
      /*
      for (int i = 0; i < NUM_DMXL; i++)
        dmxl_set_control_target(i, targets[i]);
      */
      dmxl_set_all_control_targets(targets);
 8001eb8:	4668      	mov	r0, sp
 8001eba:	f000 fdb9 	bl	8002a30 <dmxl_set_all_control_targets>
      //dmxl_set_control_target(0, targets[0]); // debugging... just do #0
      return true;
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	e7e8      	b.n	8001e94 <eth_dispatch_udp+0x3c>
    if (cmd == 0) // CORRECT
    {
      printf("Received printStatusCommand...\n");

    }
    else if (cmd == 1 && payload_len >= 5)
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d9e5      	bls.n	8001e92 <eth_dispatch_udp+0x3a>
 8001ec6:	4614      	mov	r4, r2
 8001ec8:	2500      	movs	r5, #0
      /*
      printf("    modes: %d %d %d %d\r\n",
             payload[1], payload[2], payload[3], payload[4]);
      */
      for (int i = 0; i < NUM_DMXL; i++)
        dmxl_set_control_mode(i, (dmxl_control_mode_t)payload[1+i]);
 8001eca:	b2e8      	uxtb	r0, r5
 8001ecc:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8001ed0:	3501      	adds	r5, #1
 8001ed2:	f000 fd1d 	bl	8002910 <dmxl_set_control_mode>
    {
      /*
      printf("    modes: %d %d %d %d\r\n",
             payload[1], payload[2], payload[3], payload[4]);
      */
      for (int i = 0; i < NUM_DMXL; i++)
 8001ed6:	2d04      	cmp	r5, #4
 8001ed8:	d1f7      	bne.n	8001eca <eth_dispatch_udp+0x72>
        dmxl_set_control_mode(i, (dmxl_control_mode_t)payload[1+i]);
      delay_ms(1); // be sure they control mode messages get through
 8001eda:	2001      	movs	r0, #1
 8001edc:	f001 fbe2 	bl	80036a4 <delay_ms>
      return true;
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	e7d7      	b.n	8001e94 <eth_dispatch_udp+0x3c>
  {
    const uint8_t cmd = payload[0];
    //printf("  enet rx cmd = 0x%02x\r\n", cmd);
    if (cmd == 0) // CORRECT
    {
      printf("Received printStatusCommand...\n");
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <eth_dispatch_udp+0x98>)
 8001ee6:	f001 fdfd 	bl	8003ae4 <puts>
      //dmxl_set_control_target(0, targets[0]); // debugging... just do #0
      return true;
    }
  }
  // if we get here, we haven't handled this packet
  return false;
 8001eea:	4620      	mov	r0, r4
 8001eec:	e7d2      	b.n	8001e94 <eth_dispatch_udp+0x3c>
 8001eee:	bf00      	nop
 8001ef0:	0800a9f0 	.word	0x0800a9f0

08001ef4 <eth_dispatch_ip>:
}

bool eth_dispatch_ip(const uint8_t *data, const uint16_t len)
{
  const eth_ip_header_t *ip = (const eth_ip_header_t *)data;
  if (ip->version != 4) // we only handle ipv4 (for now...)
 8001ef4:	7b83      	ldrb	r3, [r0, #14]
 8001ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001efa:	2b40      	cmp	r3, #64	; 0x40
 8001efc:	d001      	beq.n	8001f02 <eth_dispatch_ip+0xe>
    if (ip->source_addr != eth_htonl(g_eth_src_ip))
      return false;
  if (ip->proto == ETH_IP_PROTO_UDP)
    return eth_dispatch_udp(data, len);
  return false; // if we get here, we aren't smart enough to handle this packet
}
 8001efe:	2000      	movs	r0, #0
 8001f00:	4770      	bx	lr
{
  const eth_ip_header_t *ip = (const eth_ip_header_t *)data;
  if (ip->version != 4) // we only handle ipv4 (for now...)
    return false;
  // if it's unicast, verify our IP address, otherwise ignore the packet
  if (ip->eth.dest_addr[0] == g_eth_src_mac[0])
 8001f02:	7803      	ldrb	r3, [r0, #0]
 8001f04:	2ba4      	cmp	r3, #164	; 0xa4
 8001f06:	d004      	beq.n	8001f12 <eth_dispatch_ip+0x1e>
    if (ip->source_addr != eth_htonl(g_eth_src_ip))
      return false;
  if (ip->proto == ETH_IP_PROTO_UDP)
 8001f08:	7dc3      	ldrb	r3, [r0, #23]
 8001f0a:	2b11      	cmp	r3, #17
 8001f0c:	d1f7      	bne.n	8001efe <eth_dispatch_ip+0xa>
    return eth_dispatch_udp(data, len);
 8001f0e:	f7ff bfa3 	b.w	8001e58 <eth_dispatch_udp>
  const eth_ip_header_t *ip = (const eth_ip_header_t *)data;
  if (ip->version != 4) // we only handle ipv4 (for now...)
    return false;
  // if it's unicast, verify our IP address, otherwise ignore the packet
  if (ip->eth.dest_addr[0] == g_eth_src_mac[0])
    if (ip->source_addr != eth_htonl(g_eth_src_ip))
 8001f12:	f8d0 201a 	ldr.w	r2, [r0, #26]
 8001f16:	4b02      	ldr	r3, [pc, #8]	; (8001f20 <eth_dispatch_ip+0x2c>)
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d1f0      	bne.n	8001efe <eth_dispatch_ip+0xa>
 8001f1c:	e7f4      	b.n	8001f08 <eth_dispatch_ip+0x14>
 8001f1e:	bf00      	nop
 8001f20:	6363630a 	.word	0x6363630a

08001f24 <eth_dispatch_eth>:

bool eth_dispatch_eth(const uint8_t *data, const uint16_t len)
{
  // dispatch according to protocol
  const eth_eth_header_t *e = (const eth_eth_header_t *)data;
  switch (eth_htons(e->ethertype))
 8001f24:	8983      	ldrh	r3, [r0, #12]
 8001f26:	ba5b      	rev16	r3, r3
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f2e:	d001      	beq.n	8001f34 <eth_dispatch_eth+0x10>
    case ETH_ETHERTYPE_IP:
      return eth_dispatch_ip(data, len);
    default:
      return false;
  }
}
 8001f30:	2000      	movs	r0, #0
 8001f32:	4770      	bx	lr
  // dispatch according to protocol
  const eth_eth_header_t *e = (const eth_eth_header_t *)data;
  switch (eth_htons(e->ethertype))
  {
    case ETH_ETHERTYPE_IP:
      return eth_dispatch_ip(data, len);
 8001f34:	f7ff bfde 	b.w	8001ef4 <eth_dispatch_ip>

08001f38 <enetRX>:
  eth_send_raw_packet(raw_test_pkt, 68); //sizeof(reg_idx) + payload_len);
  */
}

uint_fast8_t enetRX()
{
 8001f38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f3c:	f8df a094 	ldr.w	sl, [pc, #148]	; 8001fd4 <enetRX+0x9c>
 8001f40:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8001fd8 <enetRX+0xa0>
  uint_fast8_t num_pkts_rx = 0;
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
  {
    const uint16_t rp = g_eth_rxpool_ptrs_rpos;
    const uint8_t *start = (const uint8_t *)g_eth_rxpool_start[rp];
 8001f44:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8001fdc <enetRX+0xa4>
}

uint_fast8_t enetRX()
{
  uint_fast8_t num_pkts_rx = 0;
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
 8001f48:	4657      	mov	r7, sl
  */
}

uint_fast8_t enetRX()
{
  uint_fast8_t num_pkts_rx = 0;
 8001f4a:	f04f 0b00 	mov.w	fp, #0
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
 8001f4e:	f8b8 2000 	ldrh.w	r2, [r8]
 8001f52:	f8ba 3000 	ldrh.w	r3, [sl]
 8001f56:	b292      	uxth	r2, r2
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d033      	beq.n	8001fc6 <enetRX+0x8e>
  {
    const uint16_t rp = g_eth_rxpool_ptrs_rpos;
 8001f5e:	883b      	ldrh	r3, [r7, #0]
    const uint8_t *start = (const uint8_t *)g_eth_rxpool_start[rp];
    const uint16_t len = g_eth_rxpool_len[rp];
 8001f60:	4a1a      	ldr	r2, [pc, #104]	; (8001fcc <enetRX+0x94>)
 8001f62:	4e1b      	ldr	r6, [pc, #108]	; (8001fd0 <enetRX+0x98>)
uint_fast8_t enetRX()
{
  uint_fast8_t num_pkts_rx = 0;
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
  {
    const uint16_t rp = g_eth_rxpool_ptrs_rpos;
 8001f64:	b29b      	uxth	r3, r3
    const uint8_t *start = (const uint8_t *)g_eth_rxpool_start[rp];
    const uint16_t len = g_eth_rxpool_len[rp];
    const eth_eth_header_t *e = (const eth_eth_header_t *)start;
    uint8_t unicast_match = 1;
    uint8_t multicast_match = 1;
    uint8_t broadcast_match = 1;
 8001f66:	2401      	movs	r4, #1
{
  uint_fast8_t num_pkts_rx = 0;
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
  {
    const uint16_t rp = g_eth_rxpool_ptrs_rpos;
    const uint8_t *start = (const uint8_t *)g_eth_rxpool_start[rp];
 8001f68:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
    const uint16_t len = g_eth_rxpool_len[rp];
 8001f6c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001f70:	f100 0c05 	add.w	ip, r0, #5
 8001f74:	1e43      	subs	r3, r0, #1
 8001f76:	b289      	uxth	r1, r1
    const eth_eth_header_t *e = (const eth_eth_header_t *)start;
    uint8_t unicast_match = 1;
 8001f78:	4625      	mov	r5, r4
           e->dest_addr[0], e->dest_addr[1], e->dest_addr[2],
           e->dest_addr[3], e->dest_addr[4], e->dest_addr[5]);
    */
    for (int i = 0; i < 6; i++)
    {
      if (e->dest_addr[i] != g_eth_src_mac[i])
 8001f7a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8001f7e:	f816 eb01 	ldrb.w	lr, [r6], #1
        unicast_match = 0;
 8001f82:	4572      	cmp	r2, lr
 8001f84:	bf18      	it	ne
 8001f86:	2500      	movne	r5, #0
      if (e->dest_addr[i] != 0xff)
        broadcast_match = 0;
 8001f88:	2aff      	cmp	r2, #255	; 0xff
 8001f8a:	bf18      	it	ne
 8001f8c:	2400      	movne	r4, #0
    /*
    printf("rx mac: %02x:%02x:%02x:%02x:%02x:%02x\r\n",
           e->dest_addr[0], e->dest_addr[1], e->dest_addr[2],
           e->dest_addr[3], e->dest_addr[4], e->dest_addr[5]);
    */
    for (int i = 0; i < 6; i++)
 8001f8e:	4563      	cmp	r3, ip
 8001f90:	d1f3      	bne.n	8001f7a <enetRX+0x42>
      if (e->dest_addr[i] != g_eth_src_mac[i])
        unicast_match = 0;
      if (e->dest_addr[i] != 0xff)
        broadcast_match = 0;
    }
    if (e->dest_addr[0] != 0x01 || e->dest_addr[1] != 0x00 || e->dest_addr[2] != 0x5e)
 8001f92:	7803      	ldrb	r3, [r0, #0]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d00f      	beq.n	8001fb8 <enetRX+0x80>
      multicast_match = 0;
    //printf("  ucast_match = %d, bcast_match = %d, mcast_match = %d\r\n",
    //       unicast_match, broadcast_match, multicast_match);
    //printf("dispatch @ %8u\r\n", (unsigned)SYSTIME);
    if (unicast_match || multicast_match || broadcast_match)
 8001f98:	b905      	cbnz	r5, 8001f9c <enetRX+0x64>
 8001f9a:	b114      	cbz	r4, 8001fa2 <enetRX+0x6a>
      num_pkts_rx += eth_dispatch_eth(start, len) ? 1 : 0;
 8001f9c:	f7ff ffc2 	bl	8001f24 <eth_dispatch_eth>
 8001fa0:	4483      	add	fp, r0
    if (++g_eth_rxpool_ptrs_rpos >= ETH_RAM_RXPOOL_NPTR)
 8001fa2:	f8ba 3000 	ldrh.w	r3, [sl]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2b7f      	cmp	r3, #127	; 0x7f
 8001fac:	f8aa 3000 	strh.w	r3, [sl]
      g_eth_rxpool_ptrs_rpos = 0;
 8001fb0:	bf84      	itt	hi
 8001fb2:	2300      	movhi	r3, #0
 8001fb4:	803b      	strhhi	r3, [r7, #0]
 8001fb6:	e7ca      	b.n	8001f4e <enetRX+0x16>
      if (e->dest_addr[i] != g_eth_src_mac[i])
        unicast_match = 0;
      if (e->dest_addr[i] != 0xff)
        broadcast_match = 0;
    }
    if (e->dest_addr[0] != 0x01 || e->dest_addr[1] != 0x00 || e->dest_addr[2] != 0x5e)
 8001fb8:	7843      	ldrb	r3, [r0, #1]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1ec      	bne.n	8001f98 <enetRX+0x60>
 8001fbe:	7883      	ldrb	r3, [r0, #2]
 8001fc0:	2b5e      	cmp	r3, #94	; 0x5e
 8001fc2:	d1e9      	bne.n	8001f98 <enetRX+0x60>
 8001fc4:	e7ea      	b.n	8001f9c <enetRX+0x64>
      num_pkts_rx += eth_dispatch_eth(start, len) ? 1 : 0;
    if (++g_eth_rxpool_ptrs_rpos >= ETH_RAM_RXPOOL_NPTR)
      g_eth_rxpool_ptrs_rpos = 0;
  }
  return num_pkts_rx;
}
 8001fc6:	4658      	mov	r0, fp
 8001fc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fcc:	20008fb0 	.word	0x20008fb0
 8001fd0:	0800aa10 	.word	0x0800aa10
 8001fd4:	20008fae 	.word	0x20008fae
 8001fd8:	20008fac 	.word	0x20008fac
 8001fdc:	200090b4 	.word	0x200090b4

08001fe0 <enetTX>:
// todo: be smarter about multicast group choice
#define MCAST_IP 0xe000007c
#define MCAST_IP 0xe000007c

void enetTX()
{
 8001fe0:	b510      	push	{r4, lr}
  volatile state_t tx_state = handState; // make a local copy to ensure coherence
 8001fe2:	24ea      	movs	r4, #234	; 0xea
// todo: be smarter about multicast group choice
#define MCAST_IP 0xe000007c
#define MCAST_IP 0xe000007c

void enetTX()
{
 8001fe4:	b0bc      	sub	sp, #240	; 0xf0
  volatile state_t tx_state = handState; // make a local copy to ensure coherence
 8001fe6:	4622      	mov	r2, r4
 8001fe8:	a801      	add	r0, sp, #4
 8001fea:	4906      	ldr	r1, [pc, #24]	; (8002004 <enetTX+0x24>)
 8001fec:	f001 fc2e 	bl	800384c <memcpy>
  enet_send_udp_mcast(MCAST_IP, 11333, (uint8_t *)&tx_state, sizeof(tx_state));
 8001ff0:	aa01      	add	r2, sp, #4
 8001ff2:	4623      	mov	r3, r4
 8001ff4:	4804      	ldr	r0, [pc, #16]	; (8002008 <enetTX+0x28>)
 8001ff6:	f642 4145 	movw	r1, #11333	; 0x2c45
 8001ffa:	f7ff ff0b 	bl	8001e14 <enet_send_udp_mcast>

  // if ... // CORRECT, this is to send debug information via serial
  // volatile state_t tx_status = handStatus; // make a local copy to ensure coherence
  // enet_send_udp_mcast(MCAST_IP, 11333, (uint8_t *)&tx_state, sizeof(tx_state));
}
 8001ffe:	b03c      	add	sp, #240	; 0xf0
 8002000:	bd10      	pop	{r4, pc}
 8002002:	bf00      	nop
 8002004:	200101fc 	.word	0x200101fc
 8002008:	e000007c 	.word	0xe000007c

0800200c <ethernetService>:

void ethernetService(void)
{
 800200c:	b508      	push	{r3, lr}
  if (enet_get_link_status() == ENET_LINK_UP)
 800200e:	f7ff fe1f 	bl	8001c50 <enet_get_link_status>
 8002012:	2801      	cmp	r0, #1
  {
    err_unset(ERR_NO_ETHERNET);
 8002014:	f04f 0000 	mov.w	r0, #0
  // enet_send_udp_mcast(MCAST_IP, 11333, (uint8_t *)&tx_state, sizeof(tx_state));
}

void ethernetService(void)
{
  if (enet_get_link_status() == ENET_LINK_UP)
 8002018:	d005      	beq.n	8002026 <ethernetService+0x1a>
    err_unset(ERR_NO_ETHERNET);
    enetTX();
  }
  else
  {
    err_set(ERR_NO_ETHERNET);
 800201a:	f001 fbd3 	bl	80037c4 <err_set>
  }
  enetRX();
 800201e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }
  else
  {
    err_set(ERR_NO_ETHERNET);
  }
  enetRX();
 8002022:	f7ff bf89 	b.w	8001f38 <enetRX>

void ethernetService(void)
{
  if (enet_get_link_status() == ENET_LINK_UP)
  {
    err_unset(ERR_NO_ETHERNET);
 8002026:	f001 fbd3 	bl	80037d0 <err_unset>
    enetTX();
 800202a:	f7ff ffd9 	bl	8001fe0 <enetTX>
  else
  {
    err_set(ERR_NO_ETHERNET);
  }
  enetRX();
 800202e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }
  else
  {
    err_set(ERR_NO_ETHERNET);
  }
  enetRX();
 8002032:	f7ff bf81 	b.w	8001f38 <enetRX>
 8002036:	bf00      	nop

08002038 <systime_init>:
#include "./stm32/stm32f4xx.h"

void systime_init()
{
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002038:	4a0f      	ldr	r2, [pc, #60]	; (8002078 <systime_init+0x40>)
 800203a:	6c13      	ldr	r3, [r2, #64]	; 0x40
#include "systime.h"
#include "./stm32/stm32f4xx.h"

void systime_init()
{
 800203c:	b082      	sub	sp, #8
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800203e:	f043 0301 	orr.w	r3, r3, #1
  for (volatile int i = 0; i < 1000; i++) { } // let tim2 spin up
 8002042:	2100      	movs	r1, #0
#include "./stm32/stm32f4xx.h"

void systime_init()
{
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002044:	6413      	str	r3, [r2, #64]	; 0x40
  for (volatile int i = 0; i < 1000; i++) { } // let tim2 spin up
 8002046:	9101      	str	r1, [sp, #4]
 8002048:	9b01      	ldr	r3, [sp, #4]
 800204a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800204e:	da06      	bge.n	800205e <systime_init+0x26>
 8002050:	9b01      	ldr	r3, [sp, #4]
 8002052:	3301      	adds	r3, #1
 8002054:	9301      	str	r3, [sp, #4]
 8002056:	9b01      	ldr	r3, [sp, #4]
 8002058:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800205c:	dbf8      	blt.n	8002050 <systime_init+0x18>
  TIM2->PSC = 168000000 / 2 / 1000000 - 1; // 83
 800205e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  TIM2->ARR = 0xffffffff; // count as long as possible
  TIM2->EGR = TIM_EGR_UG; // load the PSC register immediately
 8002062:	2201      	movs	r2, #1
void systime_init()
{
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
  for (volatile int i = 0; i < 1000; i++) { } // let tim2 spin up
  TIM2->PSC = 168000000 / 2 / 1000000 - 1; // 83
 8002064:	2053      	movs	r0, #83	; 0x53
  TIM2->ARR = 0xffffffff; // count as long as possible
 8002066:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
void systime_init()
{
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
  for (volatile int i = 0; i < 1000; i++) { } // let tim2 spin up
  TIM2->PSC = 168000000 / 2 / 1000000 - 1; // 83
 800206a:	8518      	strh	r0, [r3, #40]	; 0x28
  TIM2->ARR = 0xffffffff; // count as long as possible
 800206c:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIM2->EGR = TIM_EGR_UG; // load the PSC register immediately
 800206e:	829a      	strh	r2, [r3, #20]
  TIM2->CR1 = TIM_CR1_CEN; // start counter
 8002070:	801a      	strh	r2, [r3, #0]
}
 8002072:	b002      	add	sp, #8
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800

0800207c <udelay>:

void udelay(int utime)
{
  int mytime = SYSTIME;
 800207c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002080:	6a51      	ldr	r1, [r2, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8002082:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002084:	1a5b      	subs	r3, r3, r1
 8002086:	4283      	cmp	r3, r0
 8002088:	d3fb      	bcc.n	8002082 <udelay+0x6>
}
 800208a:	4770      	bx	lr

0800208c <dmxl_tx.part.1>:
      dmxl_set_usart_baud(i, 250000);
    }
  }
}

static void dmxl_tx(const uint8_t port_idx,
 800208c:	b5f0      	push	{r4, r5, r6, r7, lr}
                    const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
    return; // bogus port index
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
  USART_TypeDef *u = dp->uart;
 800208e:	4b21      	ldr	r3, [pc, #132]	; (8002114 <dmxl_tx.part.1+0x88>)
 8002090:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002094:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
 8002098:	2700      	movs	r7, #0
                    const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
    return; // bogus port index
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
  USART_TypeDef *u = dp->uart;
 800209a:	68d8      	ldr	r0, [r3, #12]
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
 800209c:	8983      	ldrh	r3, [r0, #12]
 800209e:	f023 0304 	bic.w	r3, r3, #4
 80020a2:	041b      	lsls	r3, r3, #16
 80020a4:	0c1b      	lsrs	r3, r3, #16
 80020a6:	8183      	strh	r3, [r0, #12]
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
 80020a8:	8983      	ldrh	r3, [r0, #12]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	f043 0308 	orr.w	r3, r3, #8
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
 80020b0:	3202      	adds	r2, #2
  if (port_idx >= NUM_DMXL)
    return; // bogus port index
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
  USART_TypeDef *u = dp->uart;
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
 80020b2:	8183      	strh	r3, [r0, #12]
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
 80020b4:	463e      	mov	r6, r7
 80020b6:	463c      	mov	r4, r7
  {
    while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
    if (i <= 1)
      u->DR = 0xff; // preamble
 80020b8:	f04f 0eff 	mov.w	lr, #255	; 0xff
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
  {
    while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
 80020bc:	8803      	ldrh	r3, [r0, #0]
 80020be:	061d      	lsls	r5, r3, #24
 80020c0:	d5fc      	bpl.n	80020bc <dmxl_tx.part.1+0x30>
    if (i <= 1)
 80020c2:	2c01      	cmp	r4, #1
      // send checksum
      u->DR = ~csum;
    }
    else
    {
      u->DR = payload[i-2]; // send payload byte
 80020c4:	f1a4 0502 	sub.w	r5, r4, #2
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
  {
    while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
    if (i <= 1)
 80020c8:	d91a      	bls.n	8002100 <dmxl_tx.part.1+0x74>
      u->DR = 0xff; // preamble
    else if (i == payload_len + 2)
 80020ca:	42b2      	cmp	r2, r6
 80020cc:	d01b      	beq.n	8002106 <dmxl_tx.part.1+0x7a>
      // send checksum
      u->DR = ~csum;
    }
    else
    {
      u->DR = payload[i-2]; // send payload byte
 80020ce:	5d4b      	ldrb	r3, [r1, r5]
 80020d0:	8083      	strh	r3, [r0, #4]
      csum += payload[i-2];
 80020d2:	5d4d      	ldrb	r5, [r1, r5]
 80020d4:	197b      	adds	r3, r7, r5
 80020d6:	b2df      	uxtb	r7, r3
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
  USART_TypeDef *u = dp->uart;
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
 80020d8:	3401      	adds	r4, #1
 80020da:	b2e4      	uxtb	r4, r4
 80020dc:	4294      	cmp	r4, r2
 80020de:	4626      	mov	r6, r4
 80020e0:	ddec      	ble.n	80020bc <dmxl_tx.part.1+0x30>
    {
      u->DR = payload[i-2]; // send payload byte
      csum += payload[i-2];
    }
  }
  while (!(u->SR & USART_SR_TC)) { } // wait for TX to finish
 80020e2:	8803      	ldrh	r3, [r0, #0]
 80020e4:	065b      	lsls	r3, r3, #25
 80020e6:	d5fc      	bpl.n	80020e2 <dmxl_tx.part.1+0x56>
  u->CR1 &= ~USART_CR1_TE; // disable the transmitter
 80020e8:	8983      	ldrh	r3, [r0, #12]
 80020ea:	f023 0308 	bic.w	r3, r3, #8
 80020ee:	041b      	lsls	r3, r3, #16
 80020f0:	0c1b      	lsrs	r3, r3, #16
 80020f2:	8183      	strh	r3, [r0, #12]
  u->CR1 |=  USART_CR1_RE; // re-enable the receiver
 80020f4:	8983      	ldrh	r3, [r0, #12]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f043 0304 	orr.w	r3, r3, #4
 80020fc:	8183      	strh	r3, [r0, #12]
 80020fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
  {
    while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
    if (i <= 1)
      u->DR = 0xff; // preamble
 8002100:	f8a0 e004 	strh.w	lr, [r0, #4]
 8002104:	e7e8      	b.n	80020d8 <dmxl_tx.part.1+0x4c>
    else if (i == payload_len + 2)
    {
      // send checksum
      u->DR = ~csum;
 8002106:	f487 437f 	eor.w	r3, r7, #65280	; 0xff00
 800210a:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800210e:	8083      	strh	r3, [r0, #4]
 8002110:	e7e2      	b.n	80020d8 <dmxl_tx.part.1+0x4c>
 8002112:	bf00      	nop
 8002114:	20000018 	.word	0x20000018

08002118 <dmxl_write_data>:
}

static void dmxl_write_data(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t data_len, const uint8_t start_addr,
                            const uint8_t *data)
{
 8002118:	b530      	push	{r4, r5, lr}
 800211a:	b0c1      	sub	sp, #260	; 0x104
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = data_len + 3;
 800211c:	1cd5      	adds	r5, r2, #3
  pkt[2] = 3; // instruction: "write data"
 800211e:	2403      	movs	r4, #3
                            const uint8_t data_len, const uint8_t start_addr,
                            const uint8_t *data)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = data_len + 3;
 8002120:	f88d 5001 	strb.w	r5, [sp, #1]
static void dmxl_write_data(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t data_len, const uint8_t start_addr,
                            const uint8_t *data)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
 8002124:	f88d 1000 	strb.w	r1, [sp]
  pkt[1] = data_len + 3;
  pkt[2] = 3; // instruction: "write data"
  pkt[3] = start_addr;
 8002128:	f88d 3003 	strb.w	r3, [sp, #3]
                            const uint8_t *data)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = data_len + 3;
  pkt[2] = 3; // instruction: "write data"
 800212c:	f88d 4002 	strb.w	r4, [sp, #2]
  pkt[3] = start_addr;
  for (int i = 0; i < data_len; i++)
 8002130:	b152      	cbz	r2, 8002148 <dmxl_write_data+0x30>
 8002132:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8002134:	446d      	add	r5, sp
 8002136:	1e59      	subs	r1, r3, #1
 8002138:	f10d 0303 	add.w	r3, sp, #3
    pkt[4+i] = data[i];
 800213c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002140:	f803 4f01 	strb.w	r4, [r3, #1]!
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = data_len + 3;
  pkt[2] = 3; // instruction: "write data"
  pkt[3] = start_addr;
  for (int i = 0; i < data_len; i++)
 8002144:	42ab      	cmp	r3, r5
 8002146:	d1f9      	bne.n	800213c <dmxl_write_data+0x24>
}

static void dmxl_tx(const uint8_t port_idx,
                    const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
 8002148:	2803      	cmp	r0, #3
 800214a:	d804      	bhi.n	8002156 <dmxl_write_data+0x3e>
  pkt[1] = data_len + 3;
  pkt[2] = 3; // instruction: "write data"
  pkt[3] = start_addr;
  for (int i = 0; i < data_len; i++)
    pkt[4+i] = data[i];
  dmxl_tx(port_idx, pkt, data_len + 4);
 800214c:	3204      	adds	r2, #4
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	4669      	mov	r1, sp
 8002152:	f7ff ff9b 	bl	800208c <dmxl_tx.part.1>
}
 8002156:	b041      	add	sp, #260	; 0x104
 8002158:	bd30      	pop	{r4, r5, pc}
 800215a:	bf00      	nop

0800215c <dmxl_read_data.constprop.3>:

static void dmxl_read_data(const uint8_t port_idx, const uint8_t dmxl_id,
 800215c:	b530      	push	{r4, r5, lr}
 800215e:	b0c1      	sub	sp, #260	; 0x104
                           const uint8_t data_len, const uint8_t start_addr)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
 8002160:	2501      	movs	r5, #1
  pkt[1] = 4; // this packet's "length" is 4
 8002162:	2404      	movs	r4, #4
  pkt[2] = 2; // instruction: "read data"
 8002164:	2302      	movs	r3, #2
}

static void dmxl_tx(const uint8_t port_idx,
                    const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
 8002166:	2803      	cmp	r0, #3
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = 4; // this packet's "length" is 4
  pkt[2] = 2; // instruction: "read data"
  pkt[3] = start_addr;
 8002168:	f88d 2003 	strb.w	r2, [sp, #3]
  pkt[4] = data_len;
 800216c:	f88d 1004 	strb.w	r1, [sp, #4]

static void dmxl_read_data(const uint8_t port_idx, const uint8_t dmxl_id,
                           const uint8_t data_len, const uint8_t start_addr)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
 8002170:	f88d 5000 	strb.w	r5, [sp]
  pkt[1] = 4; // this packet's "length" is 4
 8002174:	f88d 4001 	strb.w	r4, [sp, #1]
  pkt[2] = 2; // instruction: "read data"
 8002178:	f88d 3002 	strb.w	r3, [sp, #2]
}

static void dmxl_tx(const uint8_t port_idx,
                    const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
 800217c:	d803      	bhi.n	8002186 <dmxl_read_data.constprop.3+0x2a>
 800217e:	4669      	mov	r1, sp
 8002180:	2205      	movs	r2, #5
 8002182:	f7ff ff83 	bl	800208c <dmxl_tx.part.1>
  pkt[1] = 4; // this packet's "length" is 4
  pkt[2] = 2; // instruction: "read data"
  pkt[3] = start_addr;
  pkt[4] = data_len;
  dmxl_tx(port_idx, pkt, 5);
}
 8002186:	b041      	add	sp, #260	; 0x104
 8002188:	bd30      	pop	{r4, r5, pc}
 800218a:	bf00      	nop

0800218c <usart3_vector>:
    g_dmxl_ring_wpos[dmxl_port] = 0;
}

void usart3_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
 800218c:	490b      	ldr	r1, [pc, #44]	; (80021bc <usart3_vector+0x30>)
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 800218e:	4a0c      	ldr	r2, [pc, #48]	; (80021c0 <usart3_vector+0x34>)
    g_dmxl_ring_wpos[dmxl_port] = 0;
}

void usart3_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
 8002190:	880b      	ldrh	r3, [r1, #0]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8002192:	480c      	ldr	r0, [pc, #48]	; (80021c4 <usart3_vector+0x38>)
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
    g_dmxl_ring_wpos[dmxl_port] = 0;
}

void usart3_vector()
{
 8002194:	b082      	sub	sp, #8
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f88d 3007 	strb.w	r3, [sp, #7]
  dmxl_push_byte(0, USART3->DR);
 800219c:	8889      	ldrh	r1, [r1, #4]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 800219e:	8813      	ldrh	r3, [r2, #0]
 80021a0:	b29b      	uxth	r3, r3
}

void usart3_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
  dmxl_push_byte(0, USART3->DR);
 80021a2:	b2c9      	uxtb	r1, r1
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 80021a4:	54c1      	strb	r1, [r0, r3]
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
 80021a6:	8813      	ldrh	r3, [r2, #0]
 80021a8:	3301      	adds	r3, #1
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2bff      	cmp	r3, #255	; 0xff
 80021ae:	8013      	strh	r3, [r2, #0]
    g_dmxl_ring_wpos[dmxl_port] = 0;
 80021b0:	bf84      	itt	hi
 80021b2:	2300      	movhi	r3, #0
 80021b4:	8013      	strhhi	r3, [r2, #0]

void usart3_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
  dmxl_push_byte(0, USART3->DR);
}
 80021b6:	b002      	add	sp, #8
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40004800 	.word	0x40004800
 80021c0:	2000f3b4 	.word	0x2000f3b4
 80021c4:	2000fc0c 	.word	0x2000fc0c

080021c8 <uart4_vector>:

void uart4_vector()
{
 80021c8:	b410      	push	{r4}
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
 80021ca:	480d      	ldr	r0, [pc, #52]	; (8002200 <uart4_vector+0x38>)
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 80021cc:	4a0d      	ldr	r2, [pc, #52]	; (8002204 <uart4_vector+0x3c>)
  dmxl_push_byte(0, USART3->DR);
}

void uart4_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
 80021ce:	8801      	ldrh	r1, [r0, #0]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 80021d0:	4c0d      	ldr	r4, [pc, #52]	; (8002208 <uart4_vector+0x40>)
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
  dmxl_push_byte(0, USART3->DR);
}

void uart4_vector()
{
 80021d2:	b083      	sub	sp, #12
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
 80021d4:	b2c9      	uxtb	r1, r1
 80021d6:	f88d 1007 	strb.w	r1, [sp, #7]
  dmxl_push_byte(1, UART4->DR);
 80021da:	8881      	ldrh	r1, [r0, #4]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 80021dc:	8853      	ldrh	r3, [r2, #2]
 80021de:	fa14 f383 	uxtah	r3, r4, r3
}

void uart4_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
  dmxl_push_byte(1, UART4->DR);
 80021e2:	b2c9      	uxtb	r1, r1
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 80021e4:	f883 1100 	strb.w	r1, [r3, #256]	; 0x100
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
 80021e8:	8853      	ldrh	r3, [r2, #2]
 80021ea:	3301      	adds	r3, #1
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	2bff      	cmp	r3, #255	; 0xff
 80021f0:	8053      	strh	r3, [r2, #2]
    g_dmxl_ring_wpos[dmxl_port] = 0;
 80021f2:	bf84      	itt	hi
 80021f4:	2300      	movhi	r3, #0
 80021f6:	8053      	strhhi	r3, [r2, #2]

void uart4_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
  dmxl_push_byte(1, UART4->DR);
}
 80021f8:	b003      	add	sp, #12
 80021fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	40004c00 	.word	0x40004c00
 8002204:	2000f3b4 	.word	0x2000f3b4
 8002208:	2000fc0c 	.word	0x2000fc0c

0800220c <uart5_vector>:

void uart5_vector()
{
 800220c:	b410      	push	{r4}
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
 800220e:	480d      	ldr	r0, [pc, #52]	; (8002244 <uart5_vector+0x38>)
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8002210:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <uart5_vector+0x3c>)
  dmxl_push_byte(1, UART4->DR);
}

void uart5_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
 8002212:	8801      	ldrh	r1, [r0, #0]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8002214:	4c0d      	ldr	r4, [pc, #52]	; (800224c <uart5_vector+0x40>)
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
  dmxl_push_byte(1, UART4->DR);
}

void uart5_vector()
{
 8002216:	b083      	sub	sp, #12
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
 8002218:	b2c9      	uxtb	r1, r1
 800221a:	f88d 1007 	strb.w	r1, [sp, #7]
  dmxl_push_byte(3, UART5->DR);
 800221e:	8881      	ldrh	r1, [r0, #4]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8002220:	88d3      	ldrh	r3, [r2, #6]
 8002222:	fa14 f383 	uxtah	r3, r4, r3
}

void uart5_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
  dmxl_push_byte(3, UART5->DR);
 8002226:	b2c9      	uxtb	r1, r1
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8002228:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
 800222c:	88d3      	ldrh	r3, [r2, #6]
 800222e:	3301      	adds	r3, #1
 8002230:	b29b      	uxth	r3, r3
 8002232:	2bff      	cmp	r3, #255	; 0xff
 8002234:	80d3      	strh	r3, [r2, #6]
    g_dmxl_ring_wpos[dmxl_port] = 0;
 8002236:	bf84      	itt	hi
 8002238:	2300      	movhi	r3, #0
 800223a:	80d3      	strhhi	r3, [r2, #6]

void uart5_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
  dmxl_push_byte(3, UART5->DR);
}
 800223c:	b003      	add	sp, #12
 800223e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	40005000 	.word	0x40005000
 8002248:	2000f3b4 	.word	0x2000f3b4
 800224c:	2000fc0c 	.word	0x2000fc0c

08002250 <usart6_vector>:

void usart6_vector()
{
 8002250:	b410      	push	{r4}
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
 8002252:	480d      	ldr	r0, [pc, #52]	; (8002288 <usart6_vector+0x38>)
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8002254:	4a0d      	ldr	r2, [pc, #52]	; (800228c <usart6_vector+0x3c>)
  dmxl_push_byte(3, UART5->DR);
}

void usart6_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
 8002256:	8801      	ldrh	r1, [r0, #0]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8002258:	4c0d      	ldr	r4, [pc, #52]	; (8002290 <usart6_vector+0x40>)
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
  dmxl_push_byte(3, UART5->DR);
}

void usart6_vector()
{
 800225a:	b083      	sub	sp, #12
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
 800225c:	b2c9      	uxtb	r1, r1
 800225e:	f88d 1007 	strb.w	r1, [sp, #7]
  dmxl_push_byte(2, USART6->DR);
 8002262:	8881      	ldrh	r1, [r0, #4]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8002264:	8893      	ldrh	r3, [r2, #4]
 8002266:	fa14 f383 	uxtah	r3, r4, r3
}

void usart6_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
  dmxl_push_byte(2, USART6->DR);
 800226a:	b2c9      	uxtb	r1, r1
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 800226c:	f883 1200 	strb.w	r1, [r3, #512]	; 0x200
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
 8002270:	8893      	ldrh	r3, [r2, #4]
 8002272:	3301      	adds	r3, #1
 8002274:	b29b      	uxth	r3, r3
 8002276:	2bff      	cmp	r3, #255	; 0xff
 8002278:	8093      	strh	r3, [r2, #4]
    g_dmxl_ring_wpos[dmxl_port] = 0;
 800227a:	bf84      	itt	hi
 800227c:	2300      	movhi	r3, #0
 800227e:	8093      	strhhi	r3, [r2, #4]

void usart6_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
  dmxl_push_byte(2, USART6->DR);
}
 8002280:	b003      	add	sp, #12
 8002282:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40011400 	.word	0x40011400
 800228c:	2000f3b4 	.word	0x2000f3b4
 8002290:	2000fc0c 	.word	0x2000fc0c

08002294 <dmxl_set_usart_baud>:

void dmxl_set_usart_baud(const uint_fast8_t dmxl_idx, int baud)
{
  USART_TypeDef *u = g_dmxl_ports[dmxl_idx].uart;
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <dmxl_set_usart_baud+0x54>)
 8002296:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800229a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  if (baud == 57600)
 800229e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
  dmxl_push_byte(2, USART6->DR);
}

void dmxl_set_usart_baud(const uint_fast8_t dmxl_idx, int baud)
{
  USART_TypeDef *u = g_dmxl_ports[dmxl_idx].uart;
 80022a2:	68db      	ldr	r3, [r3, #12]
  if (baud == 57600)
 80022a4:	d00f      	beq.n	80022c6 <dmxl_set_usart_baud+0x32>
    if (u == USART6)
      u->BRR = (((uint16_t)91) << 4) | 2;
    else
      u->BRR = (((uint16_t)45) << 4) | 9;
  }
  else if (baud == 250000)
 80022a6:	4811      	ldr	r0, [pc, #68]	; (80022ec <dmxl_set_usart_baud+0x58>)
 80022a8:	4281      	cmp	r1, r0
 80022aa:	d015      	beq.n	80022d8 <dmxl_set_usart_baud+0x44>
    if (u == USART6)
      u->BRR = (((uint16_t)21) << 4);
    else
      u->BRR = (((uint16_t)10) << 4) | 8;
  }
  else if (baud == 1000000)
 80022ac:	4810      	ldr	r0, [pc, #64]	; (80022f0 <dmxl_set_usart_baud+0x5c>)
 80022ae:	4281      	cmp	r1, r0
 80022b0:	d002      	beq.n	80022b8 <dmxl_set_usart_baud+0x24>
      u->BRR = (((uint16_t)5) << 4) |  4;
    else
      u->BRR = (((uint16_t)2) << 4) | 10;
  }
  else
    printf("ahhh unhandled baud rate: %d\r\n", baud);
 80022b2:	4810      	ldr	r0, [pc, #64]	; (80022f4 <dmxl_set_usart_baud+0x60>)
 80022b4:	f001 bbc2 	b.w	8003a3c <printf>
    else
      u->BRR = (((uint16_t)10) << 4) | 8;
  }
  else if (baud == 1000000)
  {
    if (u == USART6)
 80022b8:	4a0f      	ldr	r2, [pc, #60]	; (80022f8 <dmxl_set_usart_baud+0x64>)
 80022ba:	4293      	cmp	r3, r2
      u->BRR = (((uint16_t)5) << 4) |  4;
 80022bc:	bf0c      	ite	eq
 80022be:	2254      	moveq	r2, #84	; 0x54
    else
      u->BRR = (((uint16_t)2) << 4) | 10;
 80022c0:	222a      	movne	r2, #42	; 0x2a
 80022c2:	811a      	strh	r2, [r3, #8]
 80022c4:	4770      	bx	lr
void dmxl_set_usart_baud(const uint_fast8_t dmxl_idx, int baud)
{
  USART_TypeDef *u = g_dmxl_ports[dmxl_idx].uart;
  if (baud == 57600)
  {
    if (u == USART6)
 80022c6:	4a0c      	ldr	r2, [pc, #48]	; (80022f8 <dmxl_set_usart_baud+0x64>)
 80022c8:	4293      	cmp	r3, r2
      u->BRR = (((uint16_t)91) << 4) | 2;
 80022ca:	bf0c      	ite	eq
 80022cc:	f240 52b2 	movweq	r2, #1458	; 0x5b2
    else
      u->BRR = (((uint16_t)45) << 4) | 9;
 80022d0:	f240 22d9 	movwne	r2, #729	; 0x2d9
 80022d4:	811a      	strh	r2, [r3, #8]
 80022d6:	4770      	bx	lr
  }
  else if (baud == 250000)
  {
    if (u == USART6)
 80022d8:	4a07      	ldr	r2, [pc, #28]	; (80022f8 <dmxl_set_usart_baud+0x64>)
 80022da:	4293      	cmp	r3, r2
      u->BRR = (((uint16_t)21) << 4);
 80022dc:	bf0c      	ite	eq
 80022de:	f44f 72a8 	moveq.w	r2, #336	; 0x150
    else
      u->BRR = (((uint16_t)10) << 4) | 8;
 80022e2:	22a8      	movne	r2, #168	; 0xa8
 80022e4:	811a      	strh	r2, [r3, #8]
 80022e6:	4770      	bx	lr
 80022e8:	20000018 	.word	0x20000018
 80022ec:	0003d090 	.word	0x0003d090
 80022f0:	000f4240 	.word	0x000f4240
 80022f4:	0800aa18 	.word	0x0800aa18
 80022f8:	40011400 	.word	0x40011400

080022fc <dmxl_init>:
  else
    printf("ahhh unhandled baud rate: %d\r\n", baud);
}

void dmxl_init()
{
 80022fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  printf("dmxl_init()\r\n");
 8002300:	4861      	ldr	r0, [pc, #388]	; (8002488 <dmxl_init+0x18c>)
 8002302:	4c62      	ldr	r4, [pc, #392]	; (800248c <dmxl_init+0x190>)
  else
    printf("ahhh unhandled baud rate: %d\r\n", baud);
}

void dmxl_init()
{
 8002304:	b085      	sub	sp, #20
  printf("dmxl_init()\r\n");
 8002306:	f001 fbed 	bl	8003ae4 <puts>
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 800230a:	4b61      	ldr	r3, [pc, #388]	; (8002490 <dmxl_init+0x194>)
 800230c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800230e:	f042 020d 	orr.w	r2, r2, #13
 8002312:	631a      	str	r2, [r3, #48]	; 0x30
                  RCC_AHB1ENR_GPIOCEN |
                  RCC_AHB1ENR_GPIODEN;
  RCC->APB1ENR |= RCC_APB1ENR_USART3EN |
 8002314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002316:	f442 12e0 	orr.w	r2, r2, #1835008	; 0x1c0000
 800231a:	641a      	str	r2, [r3, #64]	; 0x40
                  RCC_APB1ENR_UART4EN  |
                  RCC_APB1ENR_UART5EN;
  RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 800231c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800231e:	f042 0220 	orr.w	r2, r2, #32
 8002322:	645a      	str	r2, [r3, #68]	; 0x44

  for (int i = 0; i < NUM_DMXL; i++)
 8002324:	2500      	movs	r5, #0
 8002326:	f10d 070b 	add.w	r7, sp, #11
 800232a:	ae03      	add	r6, sp, #12
  {
    dmxl_port_t *dp = &g_dmxl_ports[i];
    dp->tx_gpio->MODER |= (uint32_t)2 << (dp->tx_pin * 2); // set as AF
 800232c:	f04f 0802 	mov.w	r8, #2
 8002330:	7922      	ldrb	r2, [r4, #4]
 8002332:	f854 cc04 	ldr.w	ip, [r4, #-4]
 8002336:	0052      	lsls	r2, r2, #1
 8002338:	f8dc 3000 	ldr.w	r3, [ip]
 800233c:	fa08 f202 	lsl.w	r2, r8, r2
 8002340:	4313      	orrs	r3, r2
 8002342:	f8cc 3000 	str.w	r3, [ip]
    dp->rx_gpio->MODER |= (uint32_t)2 << (dp->rx_pin * 2); // set as AF
 8002346:	f894 e005 	ldrb.w	lr, [r4, #5]
 800234a:	6822      	ldr	r2, [r4, #0]
 800234c:	fa0f f08e 	sxth.w	r0, lr
 8002350:	6813      	ldr	r3, [r2, #0]
 8002352:	0041      	lsls	r1, r0, #1
 8002354:	fa08 f101 	lsl.w	r1, r8, r1
 8002358:	430b      	orrs	r3, r1
 800235a:	6013      	str	r3, [r2, #0]

    if (dp->tx_pin >= 8)
 800235c:	7923      	ldrb	r3, [r4, #4]
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
 800235e:	f1a3 0108 	sub.w	r1, r3, #8
  {
    dmxl_port_t *dp = &g_dmxl_ports[i];
    dp->tx_gpio->MODER |= (uint32_t)2 << (dp->tx_pin * 2); // set as AF
    dp->rx_gpio->MODER |= (uint32_t)2 << (dp->rx_pin * 2); // set as AF

    if (dp->tx_pin >= 8)
 8002362:	2b07      	cmp	r3, #7
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
 8002364:	ea4f 0981 	mov.w	r9, r1, lsl #2
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);
 8002368:	ea4f 0383 	mov.w	r3, r3, lsl #2
  {
    dmxl_port_t *dp = &g_dmxl_ports[i];
    dp->tx_gpio->MODER |= (uint32_t)2 << (dp->tx_pin * 2); // set as AF
    dp->rx_gpio->MODER |= (uint32_t)2 << (dp->rx_pin * 2); // set as AF

    if (dp->tx_pin >= 8)
 800236c:	d97f      	bls.n	800246e <dmxl_init+0x172>
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
 800236e:	79a1      	ldrb	r1, [r4, #6]
 8002370:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8002374:	fa01 f909 	lsl.w	r9, r1, r9
 8002378:	ea49 0303 	orr.w	r3, r9, r3
 800237c:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);

    if (dp->rx_pin >= 8)
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
 8002380:	f1ae 0308 	sub.w	r3, lr, #8
 8002384:	009b      	lsls	r3, r3, #2
    if (dp->tx_pin >= 8)
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);

    if (dp->rx_pin >= 8)
 8002386:	f1be 0f07 	cmp.w	lr, #7
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
 800238a:	fa01 fc03 	lsl.w	ip, r1, r3
    else
      dp->rx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->rx_pin * 4);
 800238e:	ea4f 0080 	mov.w	r0, r0, lsl #2
    if (dp->tx_pin >= 8)
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);

    if (dp->rx_pin >= 8)
 8002392:	d967      	bls.n	8002464 <dmxl_init+0x168>
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
 8002394:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002396:	ea4c 0303 	orr.w	r3, ip, r3
 800239a:	6253      	str	r3, [r2, #36]	; 0x24
    else
      dp->rx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->rx_pin * 4);

    USART_TypeDef *u = dp->uart;
 800239c:	f8d4 9008 	ldr.w	r9, [r4, #8]
    u->CR1 &= ~USART_CR1_UE; // make sure it's off while we configure it
    u->CR1 |=  USART_CR1_RE; // don't enable the transmitter yet

    dmxl_set_usart_baud(i, 250000);
 80023a0:	493c      	ldr	r1, [pc, #240]	; (8002494 <dmxl_init+0x198>)
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
    else
      dp->rx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->rx_pin * 4);

    USART_TypeDef *u = dp->uart;
    u->CR1 &= ~USART_CR1_UE; // make sure it's off while we configure it
 80023a2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80023a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023aa:	041b      	lsls	r3, r3, #16
 80023ac:	0c1b      	lsrs	r3, r3, #16
 80023ae:	f8a9 300c 	strh.w	r3, [r9, #12]
    u->CR1 |=  USART_CR1_RE; // don't enable the transmitter yet
 80023b2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	f043 0304 	orr.w	r3, r3, #4
 80023bc:	f8a9 300c 	strh.w	r3, [r9, #12]

    dmxl_set_usart_baud(i, 250000);
 80023c0:	4628      	mov	r0, r5
 80023c2:	f7ff ff67 	bl	8002294 <dmxl_set_usart_baud>
    if (u == USART6) // running on APB2 = 84 MHz
      u->BRR = (((uint16_t)5) << 4) | 4; // 5.25 mantissa = 5, fraction =  4
    else // running on APB1 = 42 MHz
      u->BRR = (((uint16_t)2) << 4) | 10;// 2.625 mantissa = 2, fraction = 10
    */
    u->CR1 |=  USART_CR1_UE | USART_CR1_RXNEIE;
 80023c6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023d0:	f043 0320 	orr.w	r3, r3, #32
 80023d4:	f8a9 300c 	strh.w	r3, [r9, #12]

    delay_us(10);
 80023d8:	200a      	movs	r0, #10
 80023da:	f001 f951 	bl	8003680 <delay_us>
    dmxl_set_res_divider(i, DMXL_DEFAULT_ID, 4);
 80023de:	fa5f f985 	uxtb.w	r9, r5
}

void dmxl_set_res_divider(const uint8_t port_idx, const uint8_t dmxl_id,
                          const uint8_t res_divider)
{
  dmxl_write_data(port_idx, dmxl_id, 1, 22, &res_divider);
 80023e2:	2101      	movs	r1, #1
 80023e4:	460a      	mov	r2, r1
 80023e6:	f04f 0e04 	mov.w	lr, #4
 80023ea:	2316      	movs	r3, #22
 80023ec:	4648      	mov	r0, r9
 80023ee:	9700      	str	r7, [sp, #0]
 80023f0:	f88d e00b 	strb.w	lr, [sp, #11]
 80023f4:	f7ff fe90 	bl	8002118 <dmxl_write_data>
    */
    u->CR1 |=  USART_CR1_UE | USART_CR1_RXNEIE;

    delay_us(10);
    dmxl_set_res_divider(i, DMXL_DEFAULT_ID, 4);
    delay_us(10);
 80023f8:	200a      	movs	r0, #10
 80023fa:	f001 f941 	bl	8003680 <delay_us>
  RCC->APB1ENR |= RCC_APB1ENR_USART3EN |
                  RCC_APB1ENR_UART4EN  |
                  RCC_APB1ENR_UART5EN;
  RCC->APB2ENR |= RCC_APB2ENR_USART6EN;

  for (int i = 0; i < NUM_DMXL; i++)
 80023fe:	3501      	adds	r5, #1

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
 8002400:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
  d[1] = (offset >> 8) & 0xff;
 8002404:	f04f 0e32 	mov.w	lr, #50	; 0x32
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 8002408:	4648      	mov	r0, r9
 800240a:	9600      	str	r6, [sp, #0]
 800240c:	2101      	movs	r1, #1
 800240e:	2202      	movs	r2, #2
 8002410:	2314      	movs	r3, #20

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
 8002412:	f88d c00c 	strb.w	ip, [sp, #12]
  d[1] = (offset >> 8) & 0xff;
 8002416:	f88d e00d 	strb.w	lr, [sp, #13]
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 800241a:	f7ff fe7d 	bl	8002118 <dmxl_write_data>
  RCC->APB1ENR |= RCC_APB1ENR_USART3EN |
                  RCC_APB1ENR_UART4EN  |
                  RCC_APB1ENR_UART5EN;
  RCC->APB2ENR |= RCC_APB2ENR_USART6EN;

  for (int i = 0; i < NUM_DMXL; i++)
 800241e:	2d04      	cmp	r5, #4
 8002420:	f104 0418 	add.w	r4, r4, #24
 8002424:	d184      	bne.n	8002330 <dmxl_init+0x34>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002426:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <dmxl_init+0x19c>)
  NVIC_EnableIRQ(UART5_IRQn);
  NVIC_EnableIRQ(USART6_IRQn);

  //GPIOD->MODER |= (1 << (8*2)); // | (1 << 9);
  // turn on the 3.3v <-> 5v translator chip now
  GPIOA->MODER |= 1 << (PORTA_DMXL_BUF_EN * 2);
 8002428:	4a1c      	ldr	r2, [pc, #112]	; (800249c <dmxl_init+0x1a0>)
 800242a:	2120      	movs	r1, #32
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800242c:	2080      	movs	r0, #128	; 0x80
 800242e:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
 8002432:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002436:	f883 1327 	strb.w	r1, [r3, #807]	; 0x327
 800243a:	f883 1334 	strb.w	r1, [r3, #820]	; 0x334
 800243e:	f883 1335 	strb.w	r1, [r3, #821]	; 0x335
 8002442:	f883 1347 	strb.w	r1, [r3, #839]	; 0x347
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002446:	6058      	str	r0, [r3, #4]
 8002448:	605d      	str	r5, [r3, #4]
 800244a:	605c      	str	r4, [r3, #4]
 800244c:	6098      	str	r0, [r3, #8]
 800244e:	6813      	ldr	r3, [r2, #0]
 8002450:	432b      	orrs	r3, r5
 8002452:	6013      	str	r3, [r2, #0]
  GPIOA->BSRRL |= 1 << PORTA_DMXL_BUF_EN;
 8002454:	8b13      	ldrh	r3, [r2, #24]
 8002456:	b29b      	uxth	r3, r3
 8002458:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800245c:	8313      	strh	r3, [r2, #24]
}
 800245e:	b005      	add	sp, #20
 8002460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);

    if (dp->rx_pin >= 8)
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
    else
      dp->rx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->rx_pin * 4);
 8002464:	6a13      	ldr	r3, [r2, #32]
 8002466:	4081      	lsls	r1, r0
 8002468:	4319      	orrs	r1, r3
 800246a:	6211      	str	r1, [r2, #32]
 800246c:	e796      	b.n	800239c <dmxl_init+0xa0>
    dp->rx_gpio->MODER |= (uint32_t)2 << (dp->rx_pin * 2); // set as AF

    if (dp->tx_pin >= 8)
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);
 800246e:	f854 9c04 	ldr.w	r9, [r4, #-4]
 8002472:	79a1      	ldrb	r1, [r4, #6]
 8002474:	f8d9 c020 	ldr.w	ip, [r9, #32]
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	ea43 030c 	orr.w	r3, r3, ip
 8002480:	f8c9 3020 	str.w	r3, [r9, #32]
 8002484:	e77c      	b.n	8002380 <dmxl_init+0x84>
 8002486:	bf00      	nop
 8002488:	0800aa38 	.word	0x0800aa38
 800248c:	2000001c 	.word	0x2000001c
 8002490:	40023800 	.word	0x40023800
 8002494:	0003d090 	.word	0x0003d090
 8002498:	e000e100 	.word	0xe000e100
 800249c:	40020000 	.word	0x40020000

080024a0 <dmxl_process_ring>:
  pkt[4] = data_len;
  dmxl_tx(port_idx, pkt, 5);
}

void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
 80024a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
           */
          switch (port->comms_state)
          {
            case DMXL_CS_POLL_STATE:
              handState.dynamixel_angles[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
 80024a4:	4b73      	ldr	r3, [pc, #460]	; (8002674 <dmxl_process_ring+0x1d4>)
 80024a6:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 800268c <dmxl_process_ring+0x1ec>
 80024aa:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8002690 <dmxl_process_ring+0x1f0>
void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
  const uint_fast8_t i = dmxl_id; // save typing...
  while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
  {
    const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 80024ae:	ea4f 2800 	mov.w	r8, r0, lsl #8
           */
          switch (port->comms_state)
          {
            case DMXL_CS_POLL_STATE:
              handState.dynamixel_angles[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
 80024b2:	eb03 0908 	add.w	r9, r3, r8
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
              handState.dynamixel_loads[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
              handState.dynamixel_voltages[i]     = g_dmxl_rx_pkt[i][6];
 80024b6:	4b70      	ldr	r3, [pc, #448]	; (8002678 <dmxl_process_ring+0x1d8>)
  pkt[4] = data_len;
  dmxl_tx(port_idx, pkt, 5);
}

void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
 80024b8:	b083      	sub	sp, #12
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
              handState.dynamixel_loads[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
              handState.dynamixel_voltages[i]     = g_dmxl_rx_pkt[i][6];
 80024ba:	4403      	add	r3, r0
  pkt[4] = data_len;
  dmxl_tx(port_idx, pkt, 5);
}

void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
 80024bc:	4606      	mov	r6, r0
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
              handState.dynamixel_loads[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
              handState.dynamixel_voltages[i]     = g_dmxl_rx_pkt[i][6];
 80024be:	9301      	str	r3, [sp, #4]
}

void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
  const uint_fast8_t i = dmxl_id; // save typing...
  while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
 80024c0:	465f      	mov	r7, fp
 80024c2:	f83b 2016 	ldrh.w	r2, [fp, r6, lsl #1]
 80024c6:	f83a 3016 	ldrh.w	r3, [sl, r6, lsl #1]
 80024ca:	b292      	uxth	r2, r2
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	429a      	cmp	r2, r3
 80024d0:	f000 80bd 	beq.w	800264e <dmxl_process_ring+0x1ae>
  {
    const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 80024d4:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
 80024d8:	4a68      	ldr	r2, [pc, #416]	; (800267c <dmxl_process_ring+0x1dc>)
    //printf("dmxl %d received 0x%02x\r\n", i, b);
    if (++g_dmxl_ring_rpos[i] >= DMXL_RING_LEN)
      g_dmxl_ring_rpos[i] = 0; // wrap around
    dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
    switch (port->parser_state)
 80024da:	4d69      	ldr	r5, [pc, #420]	; (8002680 <dmxl_process_ring+0x1e0>)
void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
  const uint_fast8_t i = dmxl_id; // save typing...
  while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
  {
    const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 80024dc:	fa18 f383 	uxtah	r3, r8, r3
    //printf("dmxl %d received 0x%02x\r\n", i, b);
    if (++g_dmxl_ring_rpos[i] >= DMXL_RING_LEN)
      g_dmxl_ring_rpos[i] = 0; // wrap around
    dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
    switch (port->parser_state)
 80024e0:	0074      	lsls	r4, r6, #1
void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
  const uint_fast8_t i = dmxl_id; // save typing...
  while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
  {
    const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 80024e2:	5cd2      	ldrb	r2, [r2, r3]
    //printf("dmxl %d received 0x%02x\r\n", i, b);
    if (++g_dmxl_ring_rpos[i] >= DMXL_RING_LEN)
 80024e4:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
 80024e8:	3301      	adds	r3, #1
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2bff      	cmp	r3, #255	; 0xff
 80024ee:	f827 3016 	strh.w	r3, [r7, r6, lsl #1]
      g_dmxl_ring_rpos[i] = 0; // wrap around
 80024f2:	bf84      	itt	hi
 80024f4:	2300      	movhi	r3, #0
 80024f6:	f827 3016 	strhhi.w	r3, [r7, r6, lsl #1]
    dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
    switch (port->parser_state)
 80024fa:	19a3      	adds	r3, r4, r6
 80024fc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
  const uint_fast8_t i = dmxl_id; // save typing...
  while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
  {
    const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 8002500:	b2d2      	uxtb	r2, r2
    //printf("dmxl %d received 0x%02x\r\n", i, b);
    if (++g_dmxl_ring_rpos[i] >= DMXL_RING_LEN)
      g_dmxl_ring_rpos[i] = 0; // wrap around
    dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
    switch (port->parser_state)
 8002502:	7c5b      	ldrb	r3, [r3, #17]
 8002504:	2b06      	cmp	r3, #6
 8002506:	f200 809b 	bhi.w	8002640 <dmxl_process_ring+0x1a0>
 800250a:	e8df f003 	tbb	[pc, r3]
 800250e:	7690      	.short	0x7690
 8002510:	47657e89 	.word	0x47657e89
 8002514:	04          	.byte	0x04
 8002515:	00          	.byte	0x00
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
          port->parser_state = DMXL_PS_CHECKSUM;
        port->rx_pkt_writepos++;
        break;
      case DMXL_PS_CHECKSUM:
        if (((uint8_t)(~port->rx_checksum)) == b)
 8002516:	19a3      	adds	r3, r4, r6
 8002518:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800251c:	7d19      	ldrb	r1, [r3, #20]
 800251e:	43c9      	mvns	r1, r1
 8002520:	b2c9      	uxtb	r1, r1
 8002522:	4291      	cmp	r1, r2
 8002524:	f040 8096 	bne.w	8002654 <dmxl_process_ring+0x1b4>
          /*
             printf("checksum passed. received %d bytes\r\n", port->rx_pkt_len);
             for (int j = 0; j < port->rx_pkt_len; j++)
             printf("  0x%02x\r\n", g_dmxl_rx_pkt[i][j]);
           */
          switch (port->comms_state)
 8002528:	7c1b      	ldrb	r3, [r3, #16]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d12f      	bne.n	800258e <dmxl_process_ring+0xee>
          {
            case DMXL_CS_POLL_STATE:
              handState.dynamixel_angles[i] =
 800252e:	4852      	ldr	r0, [pc, #328]	; (8002678 <dmxl_process_ring+0x1d8>)
                (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
 8002530:	f899 1001 	ldrb.w	r1, [r9, #1]
                (((uint16_t)g_dmxl_rx_pkt[i][0])     ) ;
 8002534:	f899 2000 	ldrb.w	r2, [r9]
             printf("  0x%02x\r\n", g_dmxl_rx_pkt[i][j]);
           */
          switch (port->comms_state)
          {
            case DMXL_CS_POLL_STATE:
              handState.dynamixel_angles[i] =
 8002538:	f106 0354 	add.w	r3, r6, #84	; 0x54
 800253c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002540:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002544:	8859      	ldrh	r1, [r3, #2]
 8002546:	805a      	strh	r2, [r3, #2]
                (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][0])     ) ;
              //printf("dmxl %d angle = %d\r\n", (int)i, (int)handState.dynamixel_angles[i]);
              handState.dynamixel_speeds[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
 8002548:	f899 1003 	ldrb.w	r1, [r9, #3]
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
 800254c:	f899 2002 	ldrb.w	r2, [r9, #2]
            case DMXL_CS_POLL_STATE:
              handState.dynamixel_angles[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][0])     ) ;
              //printf("dmxl %d angle = %d\r\n", (int)i, (int)handState.dynamixel_angles[i]);
              handState.dynamixel_speeds[i] =
 8002550:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8002554:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002558:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800255c:	8859      	ldrh	r1, [r3, #2]
 800255e:	805a      	strh	r2, [r3, #2]
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
              handState.dynamixel_loads[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
 8002560:	f899 1005 	ldrb.w	r1, [r9, #5]
                (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
 8002564:	f899 2004 	ldrb.w	r2, [r9, #4]
                (((uint16_t)g_dmxl_rx_pkt[i][0])     ) ;
              //printf("dmxl %d angle = %d\r\n", (int)i, (int)handState.dynamixel_angles[i]);
              handState.dynamixel_speeds[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
              handState.dynamixel_loads[i] =
 8002568:	f106 035c 	add.w	r3, r6, #92	; 0x5c
 800256c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002570:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002574:	8859      	ldrh	r1, [r3, #2]
 8002576:	805a      	strh	r2, [r3, #2]
                (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
              handState.dynamixel_voltages[i]     = g_dmxl_rx_pkt[i][6];
 8002578:	f899 3006 	ldrb.w	r3, [r9, #6]
 800257c:	9901      	ldr	r1, [sp, #4]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f881 30c2 	strb.w	r3, [r1, #194]	; 0xc2
              handState.dynamixel_temperatures[i] = g_dmxl_rx_pkt[i][7];
 8002584:	f899 3007 	ldrb.w	r3, [r9, #7]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	f881 30c6 	strb.w	r3, [r1, #198]	; 0xc6
          }
        }
        else
          printf("checksum failed: local 0x%02x != received 0x%02x\r\n",
              (uint8_t)~port->rx_checksum, b);
        port->parser_state = DMXL_PS_PREAMBLE_0;
 800258e:	4434      	add	r4, r6
 8002590:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8002594:	2300      	movs	r3, #0
 8002596:	746b      	strb	r3, [r5, #17]
        port->comms_state = DMXL_CS_IDLE;
 8002598:	742b      	strb	r3, [r5, #16]
        break;
 800259a:	e792      	b.n	80024c2 <dmxl_process_ring+0x22>
          port->parser_state = DMXL_PS_PARAMETER;
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
 800259c:	19a3      	adds	r3, r4, r6
 800259e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
          port->parser_state = DMXL_PS_CHECKSUM;
        port->rx_pkt_writepos++;
 80025a2:	4434      	add	r4, r6
          port->parser_state = DMXL_PS_PARAMETER;
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
 80025a4:	f893 e014 	ldrb.w	lr, [r3, #20]
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
 80025a8:	7cd9      	ldrb	r1, [r3, #19]
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
 80025aa:	7c98      	ldrb	r0, [r3, #18]
          port->parser_state = DMXL_PS_PARAMETER;
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
 80025ac:	4496      	add	lr, r2
 80025ae:	f883 e014 	strb.w	lr, [r3, #20]
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
 80025b2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
 80025b6:	eb08 0e01 	add.w	lr, r8, r1
 80025ba:	482e      	ldr	r0, [pc, #184]	; (8002674 <dmxl_process_ring+0x1d4>)
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
 80025bc:	4561      	cmp	r1, ip
          port->parser_state = DMXL_PS_PARAMETER;
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
 80025be:	f103 0310 	add.w	r3, r3, #16
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
          port->parser_state = DMXL_PS_CHECKSUM;
        port->rx_pkt_writepos++;
 80025c2:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
 80025c6:	f800 200e 	strb.w	r2, [r0, lr]
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
          port->parser_state = DMXL_PS_CHECKSUM;
        port->rx_pkt_writepos++;
 80025ca:	f101 0101 	add.w	r1, r1, #1
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
          port->parser_state = DMXL_PS_CHECKSUM;
 80025ce:	bf04      	itt	eq
 80025d0:	2206      	moveq	r2, #6
 80025d2:	705a      	strbeq	r2, [r3, #1]
        port->rx_pkt_writepos++;
 80025d4:	74e9      	strb	r1, [r5, #19]
        break;
 80025d6:	e774      	b.n	80024c2 <dmxl_process_ring+0x22>
        port->rx_checksum += b;
        port->parser_state = DMXL_PS_ERROR;
        break;
      case DMXL_PS_ERROR:
        handState.dynamixel_error_status[i] = b; // save for global state
        port->rx_checksum += b;
 80025d8:	4434      	add	r4, r6
 80025da:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80025de:	3510      	adds	r5, #16
        port->rx_pkt_len = b - 2;
        port->rx_checksum += b;
        port->parser_state = DMXL_PS_ERROR;
        break;
      case DMXL_PS_ERROR:
        handState.dynamixel_error_status[i] = b; // save for global state
 80025e0:	9c01      	ldr	r4, [sp, #4]
        port->rx_checksum += b;
 80025e2:	792b      	ldrb	r3, [r5, #4]
        port->rx_pkt_writepos = 0;
        if (port->rx_pkt_len)
 80025e4:	78a9      	ldrb	r1, [r5, #2]
        port->rx_pkt_len = b - 2;
        port->rx_checksum += b;
        port->parser_state = DMXL_PS_ERROR;
        break;
      case DMXL_PS_ERROR:
        handState.dynamixel_error_status[i] = b; // save for global state
 80025e6:	f884 20a6 	strb.w	r2, [r4, #166]	; 0xa6
        port->rx_checksum += b;
        port->rx_pkt_writepos = 0;
 80025ea:	2000      	movs	r0, #0
        port->rx_checksum += b;
        port->parser_state = DMXL_PS_ERROR;
        break;
      case DMXL_PS_ERROR:
        handState.dynamixel_error_status[i] = b; // save for global state
        port->rx_checksum += b;
 80025ec:	441a      	add	r2, r3
 80025ee:	712a      	strb	r2, [r5, #4]
        port->rx_pkt_writepos = 0;
 80025f0:	70e8      	strb	r0, [r5, #3]
        if (port->rx_pkt_len)
 80025f2:	b3c9      	cbz	r1, 8002668 <dmxl_process_ring+0x1c8>
          port->parser_state = DMXL_PS_PARAMETER;
 80025f4:	2305      	movs	r3, #5
 80025f6:	706b      	strb	r3, [r5, #1]
 80025f8:	e763      	b.n	80024c2 <dmxl_process_ring+0x22>
        if (b == 0xff)
          port->parser_state = DMXL_PS_PREAMBLE_1;
        break;
      case DMXL_PS_PREAMBLE_1:
        if (b == 0xff)
          port->parser_state = DMXL_PS_ID;
 80025fa:	4434      	add	r4, r6
      case DMXL_PS_PREAMBLE_0:
        if (b == 0xff)
          port->parser_state = DMXL_PS_PREAMBLE_1;
        break;
      case DMXL_PS_PREAMBLE_1:
        if (b == 0xff)
 80025fc:	2aff      	cmp	r2, #255	; 0xff
          port->parser_state = DMXL_PS_ID;
 80025fe:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
      case DMXL_PS_PREAMBLE_0:
        if (b == 0xff)
          port->parser_state = DMXL_PS_PREAMBLE_1;
        break;
      case DMXL_PS_PREAMBLE_1:
        if (b == 0xff)
 8002602:	d034      	beq.n	800266e <dmxl_process_ring+0x1ce>
        port->parser_state = DMXL_PS_PREAMBLE_0;
        port->comms_state = DMXL_CS_IDLE;
        break;
      default:
        printf("woah there partner. unexpected dmxl rx state!\r\n");
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8002604:	2300      	movs	r3, #0
 8002606:	746b      	strb	r3, [r5, #17]
        break;
 8002608:	e75b      	b.n	80024c2 <dmxl_process_ring+0x22>
      case DMXL_PS_ID:
        port->rx_checksum = b;
        port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
        break;
      case DMXL_PS_LENGTH:
        port->rx_pkt_len = b - 2;
 800260a:	4434      	add	r4, r6
 800260c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8002610:	1e91      	subs	r1, r2, #2
        port->rx_checksum += b;
 8002612:	7d2b      	ldrb	r3, [r5, #20]
      case DMXL_PS_ID:
        port->rx_checksum = b;
        port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
        break;
      case DMXL_PS_LENGTH:
        port->rx_pkt_len = b - 2;
 8002614:	74a9      	strb	r1, [r5, #18]
        port->rx_checksum += b;
 8002616:	441a      	add	r2, r3
        port->parser_state = DMXL_PS_ERROR;
 8002618:	2304      	movs	r3, #4
        port->rx_checksum = b;
        port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
        break;
      case DMXL_PS_LENGTH:
        port->rx_pkt_len = b - 2;
        port->rx_checksum += b;
 800261a:	752a      	strb	r2, [r5, #20]
        port->parser_state = DMXL_PS_ERROR;
 800261c:	746b      	strb	r3, [r5, #17]
        break;
 800261e:	e750      	b.n	80024c2 <dmxl_process_ring+0x22>
          port->parser_state = DMXL_PS_ID;
        else
          port->parser_state = DMXL_PS_PREAMBLE_0;
        break;
      case DMXL_PS_ID:
        port->rx_checksum = b;
 8002620:	4434      	add	r4, r6
 8002622:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
        port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
 8002626:	2303      	movs	r3, #3
          port->parser_state = DMXL_PS_ID;
        else
          port->parser_state = DMXL_PS_PREAMBLE_0;
        break;
      case DMXL_PS_ID:
        port->rx_checksum = b;
 8002628:	752a      	strb	r2, [r5, #20]
        port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
 800262a:	746b      	strb	r3, [r5, #17]
        break;
 800262c:	e749      	b.n	80024c2 <dmxl_process_ring+0x22>
      g_dmxl_ring_rpos[i] = 0; // wrap around
    dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
    switch (port->parser_state)
    {
      case DMXL_PS_PREAMBLE_0:
        if (b == 0xff)
 800262e:	2aff      	cmp	r2, #255	; 0xff
 8002630:	f47f af47 	bne.w	80024c2 <dmxl_process_ring+0x22>
          port->parser_state = DMXL_PS_PREAMBLE_1;
 8002634:	4434      	add	r4, r6
 8002636:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800263a:	2301      	movs	r3, #1
 800263c:	746b      	strb	r3, [r5, #17]
 800263e:	e740      	b.n	80024c2 <dmxl_process_ring+0x22>
              (uint8_t)~port->rx_checksum, b);
        port->parser_state = DMXL_PS_PREAMBLE_0;
        port->comms_state = DMXL_CS_IDLE;
        break;
      default:
        printf("woah there partner. unexpected dmxl rx state!\r\n");
 8002640:	4810      	ldr	r0, [pc, #64]	; (8002684 <dmxl_process_ring+0x1e4>)
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8002642:	4434      	add	r4, r6
              (uint8_t)~port->rx_checksum, b);
        port->parser_state = DMXL_PS_PREAMBLE_0;
        port->comms_state = DMXL_CS_IDLE;
        break;
      default:
        printf("woah there partner. unexpected dmxl rx state!\r\n");
 8002644:	f001 fa4e 	bl	8003ae4 <puts>
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8002648:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800264c:	e7da      	b.n	8002604 <dmxl_process_ring+0x164>
        break;
    }
  }
}
 800264e:	b003      	add	sp, #12
 8002650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          }
        }
        else
          printf("checksum failed: local 0x%02x != received 0x%02x\r\n",
              (uint8_t)~port->rx_checksum, b);
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8002654:	4434      	add	r4, r6
 8002656:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
            default:
              break;
          }
        }
        else
          printf("checksum failed: local 0x%02x != received 0x%02x\r\n",
 800265a:	480b      	ldr	r0, [pc, #44]	; (8002688 <dmxl_process_ring+0x1e8>)
 800265c:	f001 f9ee 	bl	8003a3c <printf>
              (uint8_t)~port->rx_checksum, b);
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8002660:	2300      	movs	r3, #0
 8002662:	746b      	strb	r3, [r5, #17]
        port->comms_state = DMXL_CS_IDLE;
 8002664:	742b      	strb	r3, [r5, #16]
 8002666:	e72c      	b.n	80024c2 <dmxl_process_ring+0x22>
        port->rx_checksum += b;
        port->rx_pkt_writepos = 0;
        if (port->rx_pkt_len)
          port->parser_state = DMXL_PS_PARAMETER;
        else
          port->parser_state = DMXL_PS_CHECKSUM;
 8002668:	2306      	movs	r3, #6
 800266a:	706b      	strb	r3, [r5, #1]
 800266c:	e729      	b.n	80024c2 <dmxl_process_ring+0x22>
        if (b == 0xff)
          port->parser_state = DMXL_PS_PREAMBLE_1;
        break;
      case DMXL_PS_PREAMBLE_1:
        if (b == 0xff)
          port->parser_state = DMXL_PS_ID;
 800266e:	2302      	movs	r3, #2
 8002670:	746b      	strb	r3, [r5, #17]
 8002672:	e726      	b.n	80024c2 <dmxl_process_ring+0x22>
 8002674:	2000f804 	.word	0x2000f804
 8002678:	200101fc 	.word	0x200101fc
 800267c:	2000fc0c 	.word	0x2000fc0c
 8002680:	20000018 	.word	0x20000018
 8002684:	0800aa7c 	.word	0x0800aa7c
 8002688:	0800aa48 	.word	0x0800aa48
 800268c:	2000fc04 	.word	0x2000fc04
 8002690:	2000f3b4 	.word	0x2000f3b4

08002694 <dmxl_set_status_return_levels>:
  GPIOA->MODER |= 1 << (PORTA_DMXL_BUF_EN * 2);
  GPIOA->BSRRL |= 1 << PORTA_DMXL_BUF_EN;
}

void dmxl_set_status_return_levels()
{
 8002694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002698:	4c26      	ldr	r4, [pc, #152]	; (8002734 <dmxl_set_status_return_levels+0xa0>)
    while (SYSTIME - t_start < 10000)
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_POLL_DEBRIS)
      {
        status_return_level = g_dmxl_rx_pkt[i][0];
 800269a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8002740 <dmxl_set_status_return_levels+0xac>
  GPIOA->MODER |= 1 << (PORTA_DMXL_BUF_EN * 2);
  GPIOA->BSRRL |= 1 << PORTA_DMXL_BUF_EN;
}

void dmxl_set_status_return_levels()
{
 800269e:	b085      	sub	sp, #20
  // see what the Status Return Level is. If it's not 1, set it to one
  for (int i = 0; i < NUM_DMXL; i++)
 80026a0:	2700      	movs	r7, #0
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
    volatile uint32_t t_start = SYSTIME;
 80026a2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
{
  // see what the Status Return Level is. If it's not 1, set it to one
  for (int i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
 80026a6:	fa5f f887 	uxtb.w	r8, r7
void dmxl_set_status_return_levels()
{
  // see what the Status Return Level is. If it's not 1, set it to one
  for (int i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
 80026aa:	2303      	movs	r3, #3
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
 80026ac:	4640      	mov	r0, r8
 80026ae:	2101      	movs	r1, #1
 80026b0:	2210      	movs	r2, #16
void dmxl_set_status_return_levels()
{
  // see what the Status Return Level is. If it's not 1, set it to one
  for (int i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
 80026b2:	7423      	strb	r3, [r4, #16]
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
 80026b4:	f7ff fd52 	bl	800215c <dmxl_read_data.constprop.3>
    volatile uint32_t t_start = SYSTIME;
 80026b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80026ba:	9303      	str	r3, [sp, #12]
    uint8_t status_return_level = 0xff;
    while (SYSTIME - t_start < 10000)
 80026bc:	f242 760f 	movw	r6, #9999	; 0x270f
 80026c0:	e00d      	b.n	80026de <dmxl_set_status_return_levels+0x4a>
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 80026c2:	f7ff feed 	bl	80024a0 <dmxl_process_ring>
 80026c6:	2001      	movs	r0, #1
 80026c8:	f7ff feea 	bl	80024a0 <dmxl_process_ring>
 80026cc:	2002      	movs	r0, #2
 80026ce:	f7ff fee7 	bl	80024a0 <dmxl_process_ring>
 80026d2:	2003      	movs	r0, #3
 80026d4:	f7ff fee4 	bl	80024a0 <dmxl_process_ring>
    volatile uint32_t t_start = SYSTIME;
    uint8_t status_return_level = 0xff;
    while (SYSTIME - t_start < 10000)
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_POLL_DEBRIS)
 80026d8:	7c23      	ldrb	r3, [r4, #16]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d112      	bne.n	8002704 <dmxl_set_status_return_levels+0x70>
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
    volatile uint32_t t_start = SYSTIME;
    uint8_t status_return_level = 0xff;
    while (SYSTIME - t_start < 10000)
 80026de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80026e0:	9a03      	ldr	r2, [sp, #12]
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	42b3      	cmp	r3, r6
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 80026e6:	f04f 0000 	mov.w	r0, #0
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
    volatile uint32_t t_start = SYSTIME;
    uint8_t status_return_level = 0xff;
    while (SYSTIME - t_start < 10000)
 80026ea:	d9ea      	bls.n	80026c2 <dmxl_set_status_return_levels+0x2e>
        printf("dmxl %d status return level = %d\n", i, status_return_level);
        break;
      }
    }
    if (status_return_level == 0xff)
      printf("couldn't poll status return level for dmxl %d\r\n", i);
 80026ec:	4812      	ldr	r0, [pc, #72]	; (8002738 <dmxl_set_status_return_levels+0xa4>)
 80026ee:	4639      	mov	r1, r7
 80026f0:	f001 f9a4 	bl	8003a3c <printf>
}

void dmxl_set_status_return_levels()
{
  // see what the Status Return Level is. If it's not 1, set it to one
  for (int i = 0; i < NUM_DMXL; i++)
 80026f4:	3701      	adds	r7, #1
 80026f6:	2f04      	cmp	r7, #4
 80026f8:	f104 0418 	add.w	r4, r4, #24
 80026fc:	d1d3      	bne.n	80026a6 <dmxl_set_status_return_levels+0x12>
      // set it to 2
      uint8_t level = 1; // only respond to READ
      dmxl_write_data(i, DMXL_DEFAULT_ID, 1, 0x10, &level);
    }
  }
}
 80026fe:	b005      	add	sp, #20
 8002700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (SYSTIME - t_start < 10000)
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_POLL_DEBRIS)
      {
        status_return_level = g_dmxl_rx_pkt[i][0];
 8002704:	023b      	lsls	r3, r7, #8
        printf("dmxl %d status return level = %d\n", i, status_return_level);
 8002706:	480d      	ldr	r0, [pc, #52]	; (800273c <dmxl_set_status_return_levels+0xa8>)
    while (SYSTIME - t_start < 10000)
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_POLL_DEBRIS)
      {
        status_return_level = g_dmxl_rx_pkt[i][0];
 8002708:	f819 6003 	ldrb.w	r6, [r9, r3]
 800270c:	b2f6      	uxtb	r6, r6
        printf("dmxl %d status return level = %d\n", i, status_return_level);
 800270e:	4632      	mov	r2, r6
 8002710:	4639      	mov	r1, r7
 8002712:	f001 f993 	bl	8003a3c <printf>
        break;
      }
    }
    if (status_return_level == 0xff)
 8002716:	2eff      	cmp	r6, #255	; 0xff
 8002718:	d0e8      	beq.n	80026ec <dmxl_set_status_return_levels+0x58>
      printf("couldn't poll status return level for dmxl %d\r\n", i);
    else if (status_return_level != 1)
 800271a:	2e01      	cmp	r6, #1
 800271c:	d0ea      	beq.n	80026f4 <dmxl_set_status_return_levels+0x60>
    {
      // set it to 2
      uint8_t level = 1; // only respond to READ
 800271e:	ab04      	add	r3, sp, #16
 8002720:	2101      	movs	r1, #1
 8002722:	f803 1d05 	strb.w	r1, [r3, #-5]!
      dmxl_write_data(i, DMXL_DEFAULT_ID, 1, 0x10, &level);
 8002726:	4640      	mov	r0, r8
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	460a      	mov	r2, r1
 800272c:	2310      	movs	r3, #16
 800272e:	f7ff fcf3 	bl	8002118 <dmxl_write_data>
 8002732:	e7df      	b.n	80026f4 <dmxl_set_status_return_levels+0x60>
 8002734:	20000018 	.word	0x20000018
 8002738:	0800aad0 	.word	0x0800aad0
 800273c:	0800aaac 	.word	0x0800aaac
 8002740:	2000f804 	.word	0x2000f804

08002744 <dmxl_set_baud_rates>:
    }
  }
}

void dmxl_set_baud_rates()
{
 8002744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002748:	4c31      	ldr	r4, [pc, #196]	; (8002810 <dmxl_set_baud_rates+0xcc>)
 800274a:	b084      	sub	sp, #16
  for (int i = 0; i < NUM_DMXL; i++)
 800274c:	2700      	movs	r7, #0
  {
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
    volatile uint32_t t_start = SYSTIME;
 800274e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000

void dmxl_set_baud_rates()
{
  for (int i = 0; i < NUM_DMXL; i++)
  {
    dmxl_set_usart_baud(i, 250000);
 8002752:	4638      	mov	r0, r7
 8002754:	492f      	ldr	r1, [pc, #188]	; (8002814 <dmxl_set_baud_rates+0xd0>)
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
 8002756:	fa5f f887 	uxtb.w	r8, r7

void dmxl_set_baud_rates()
{
  for (int i = 0; i < NUM_DMXL; i++)
  {
    dmxl_set_usart_baud(i, 250000);
 800275a:	f7ff fd9b 	bl	8002294 <dmxl_set_usart_baud>

uint8_t dmxl_send_ping(const uint8_t port_idx, const uint8_t dmxl_id)
{
  uint8_t pkt[3];
  pkt[0] = dmxl_id;
  pkt[1] = 2; // packet length
 800275e:	2602      	movs	r6, #2
}

uint8_t dmxl_send_ping(const uint8_t port_idx, const uint8_t dmxl_id)
{
  uint8_t pkt[3];
  pkt[0] = dmxl_id;
 8002760:	2301      	movs	r3, #1
void dmxl_set_baud_rates()
{
  for (int i = 0; i < NUM_DMXL; i++)
  {
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
 8002762:	f04f 0e04 	mov.w	lr, #4
 8002766:	4640      	mov	r0, r8
 8002768:	a902      	add	r1, sp, #8
 800276a:	2203      	movs	r2, #3
}

uint8_t dmxl_send_ping(const uint8_t port_idx, const uint8_t dmxl_id)
{
  uint8_t pkt[3];
  pkt[0] = dmxl_id;
 800276c:	f88d 3008 	strb.w	r3, [sp, #8]
  pkt[1] = 2; // packet length
  pkt[2] = 1; // instruction: ping
 8002770:	f88d 300a 	strb.w	r3, [sp, #10]

uint8_t dmxl_send_ping(const uint8_t port_idx, const uint8_t dmxl_id)
{
  uint8_t pkt[3];
  pkt[0] = dmxl_id;
  pkt[1] = 2; // packet length
 8002774:	f88d 6009 	strb.w	r6, [sp, #9]
void dmxl_set_baud_rates()
{
  for (int i = 0; i < NUM_DMXL; i++)
  {
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
 8002778:	f884 e010 	strb.w	lr, [r4, #16]
 800277c:	f7ff fc86 	bl	800208c <dmxl_tx.part.1>
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
    volatile uint32_t t_start = SYSTIME;
 8002780:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002782:	9303      	str	r3, [sp, #12]
    bool pong_received = false;
    while (SYSTIME - t_start < 10000 && !pong_received)
 8002784:	f242 760f 	movw	r6, #9999	; 0x270f
  {
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
    volatile uint32_t t_start = SYSTIME;
    bool pong_received = false;
 8002788:	2300      	movs	r3, #0
    while (SYSTIME - t_start < 10000 && !pong_received)
 800278a:	e010      	b.n	80027ae <dmxl_set_baud_rates+0x6a>
 800278c:	2b00      	cmp	r3, #0
 800278e:	d139      	bne.n	8002804 <dmxl_set_baud_rates+0xc0>
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 8002790:	f7ff fe86 	bl	80024a0 <dmxl_process_ring>
 8002794:	2001      	movs	r0, #1
 8002796:	f7ff fe83 	bl	80024a0 <dmxl_process_ring>
 800279a:	2002      	movs	r0, #2
 800279c:	f7ff fe80 	bl	80024a0 <dmxl_process_ring>
 80027a0:	2003      	movs	r0, #3
 80027a2:	f7ff fe7d 	bl	80024a0 <dmxl_process_ring>
    volatile uint32_t t_start = SYSTIME;
    bool pong_received = false;
    while (SYSTIME - t_start < 10000 && !pong_received)
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_PING)
 80027a6:	7c23      	ldrb	r3, [r4, #16]
 80027a8:	3b04      	subs	r3, #4
 80027aa:	bf18      	it	ne
 80027ac:	2301      	movne	r3, #1
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
    volatile uint32_t t_start = SYSTIME;
    bool pong_received = false;
    while (SYSTIME - t_start < 10000 && !pong_received)
 80027ae:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80027b0:	9903      	ldr	r1, [sp, #12]
 80027b2:	1a52      	subs	r2, r2, r1
 80027b4:	42b2      	cmp	r2, r6
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 80027b6:	4618      	mov	r0, r3
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
    volatile uint32_t t_start = SYSTIME;
    bool pong_received = false;
    while (SYSTIME - t_start < 10000 && !pong_received)
 80027b8:	d9e8      	bls.n	800278c <dmxl_set_baud_rates+0x48>
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_PING)
        pong_received = true;
    }
    if (pong_received)
 80027ba:	bb1b      	cbnz	r3, 8002804 <dmxl_set_baud_rates+0xc0>
      printf("received rx @ 250 kbit from dmxl %d\r\n", i);
      continue; // hooray. it's already at the target baud rate
    }
    else
    {
      printf("no rx received from dmxl %d... trying 57600 baud...\r\n", i);
 80027bc:	4639      	mov	r1, r7
 80027be:	4816      	ldr	r0, [pc, #88]	; (8002818 <dmxl_set_baud_rates+0xd4>)
 80027c0:	f001 f93c 	bl	8003a3c <printf>
      // this is the default out-of-the-box setup
      dmxl_set_usart_baud(i, 57600);
 80027c4:	4638      	mov	r0, r7
 80027c6:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80027ca:	f7ff fd63 	bl	8002294 <dmxl_set_usart_baud>
      uint8_t baud_code = 7; // the dynamixel code for 250000 baud
      dmxl_write_data(i, DMXL_DEFAULT_ID, 1, 0x04, &baud_code);
 80027ce:	2101      	movs	r1, #1
 80027d0:	ab02      	add	r3, sp, #8
 80027d2:	460a      	mov	r2, r1
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	4640      	mov	r0, r8
 80027d8:	2304      	movs	r3, #4
    else
    {
      printf("no rx received from dmxl %d... trying 57600 baud...\r\n", i);
      // this is the default out-of-the-box setup
      dmxl_set_usart_baud(i, 57600);
      uint8_t baud_code = 7; // the dynamixel code for 250000 baud
 80027da:	2607      	movs	r6, #7
 80027dc:	f88d 6008 	strb.w	r6, [sp, #8]
      dmxl_write_data(i, DMXL_DEFAULT_ID, 1, 0x04, &baud_code);
 80027e0:	f7ff fc9a 	bl	8002118 <dmxl_write_data>
      delay_ms(500);
 80027e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027e8:	f000 ff5c 	bl	80036a4 <delay_ms>
      dmxl_set_usart_baud(i, 250000);
 80027ec:	4638      	mov	r0, r7
 80027ee:	4909      	ldr	r1, [pc, #36]	; (8002814 <dmxl_set_baud_rates+0xd0>)
 80027f0:	f7ff fd50 	bl	8002294 <dmxl_set_usart_baud>
  }
}

void dmxl_set_baud_rates()
{
  for (int i = 0; i < NUM_DMXL; i++)
 80027f4:	3701      	adds	r7, #1
 80027f6:	2f04      	cmp	r7, #4
 80027f8:	f104 0418 	add.w	r4, r4, #24
 80027fc:	d1a9      	bne.n	8002752 <dmxl_set_baud_rates+0xe>
      dmxl_write_data(i, DMXL_DEFAULT_ID, 1, 0x04, &baud_code);
      delay_ms(500);
      dmxl_set_usart_baud(i, 250000);
    }
  }
}
 80027fe:	b004      	add	sp, #16
 8002800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (g_dmxl_ports[i].comms_state != DMXL_CS_PING)
        pong_received = true;
    }
    if (pong_received)
    {
      printf("received rx @ 250 kbit from dmxl %d\r\n", i);
 8002804:	4639      	mov	r1, r7
 8002806:	4805      	ldr	r0, [pc, #20]	; (800281c <dmxl_set_baud_rates+0xd8>)
 8002808:	f001 f918 	bl	8003a3c <printf>
      continue; // hooray. it's already at the target baud rate
 800280c:	e7f2      	b.n	80027f4 <dmxl_set_baud_rates+0xb0>
 800280e:	bf00      	nop
 8002810:	20000018 	.word	0x20000018
 8002814:	0003d090 	.word	0x0003d090
 8002818:	0800ab28 	.word	0x0800ab28
 800281c:	0800ab00 	.word	0x0800ab00

08002820 <dmxl_process_rings>:
    }
  }
}

void dmxl_process_rings()
{
 8002820:	b508      	push	{r3, lr}
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 8002822:	2000      	movs	r0, #0
 8002824:	f7ff fe3c 	bl	80024a0 <dmxl_process_ring>
 8002828:	2001      	movs	r0, #1
 800282a:	f7ff fe39 	bl	80024a0 <dmxl_process_ring>
 800282e:	2002      	movs	r0, #2
 8002830:	f7ff fe36 	bl	80024a0 <dmxl_process_ring>
 8002834:	2003      	movs	r0, #3
}
 8002836:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 800283a:	f7ff be31 	b.w	80024a0 <dmxl_process_ring>
 800283e:	bf00      	nop

08002840 <dmxl_set_led>:
}

// See Dynamixel addresses here: http://support.robotis.com/en/product/dynamixel/mx_series/mx-28.htm
void dmxl_set_led(const uint8_t port_idx, const uint8_t dmxl_id,
                  const uint8_t enable)
{
 8002840:	b500      	push	{lr}
 8002842:	b085      	sub	sp, #20
  uint8_t d = enable ? 1 : 0;
 8002844:	3200      	adds	r2, #0
 8002846:	ab04      	add	r3, sp, #16
 8002848:	bf18      	it	ne
 800284a:	2201      	movne	r2, #1
 800284c:	f803 2d01 	strb.w	r2, [r3, #-1]!
  dmxl_write_data(port_idx, dmxl_id, 1, 25, &d); // 25 = LED address
 8002850:	2201      	movs	r2, #1
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	2319      	movs	r3, #25
 8002856:	f7ff fc5f 	bl	8002118 <dmxl_write_data>
}
 800285a:	b005      	add	sp, #20
 800285c:	f85d fb04 	ldr.w	pc, [sp], #4

08002860 <dmxl_set_torque_enable>:


void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
 8002860:	b500      	push	{lr}
 8002862:	b085      	sub	sp, #20
  uint8_t d = enable ? 1 : 0;
 8002864:	3200      	adds	r2, #0
 8002866:	ab04      	add	r3, sp, #16
 8002868:	bf18      	it	ne
 800286a:	2201      	movne	r2, #1
 800286c:	f803 2d01 	strb.w	r2, [r3, #-1]!
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 8002870:	2201      	movs	r2, #1
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2318      	movs	r3, #24
 8002876:	f7ff fc4f 	bl	8002118 <dmxl_write_data>
}
 800287a:	b005      	add	sp, #20
 800287c:	f85d fb04 	ldr.w	pc, [sp], #4

08002880 <dmxl_set_angle_limits>:

void dmxl_set_angle_limits(const uint8_t port_idx, const uint8_t dmxl_id,
                           const uint16_t cw_limit, const uint16_t ccw_limit)
{
 8002880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002882:	b085      	sub	sp, #20
 8002884:	461c      	mov	r4, r3
  uint8_t d[4];
  d[0] = cw_limit & 0xff;
  d[1] = (cw_limit >> 8) & 0xff;
  d[2] = ccw_limit & 0xff;
  d[3] = (ccw_limit >> 8) & 0xff;
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
 8002886:	ab03      	add	r3, sp, #12
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
}

void dmxl_set_angle_limits(const uint8_t port_idx, const uint8_t dmxl_id,
                           const uint16_t cw_limit, const uint16_t ccw_limit)
{
 8002888:	4615      	mov	r5, r2
  uint8_t d[4];
  d[0] = cw_limit & 0xff;
  d[1] = (cw_limit >> 8) & 0xff;
 800288a:	0a17      	lsrs	r7, r2, #8
  d[2] = ccw_limit & 0xff;
  d[3] = (ccw_limit >> 8) & 0xff;
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
 800288c:	9300      	str	r3, [sp, #0]
{
  uint8_t d[4];
  d[0] = cw_limit & 0xff;
  d[1] = (cw_limit >> 8) & 0xff;
  d[2] = ccw_limit & 0xff;
  d[3] = (ccw_limit >> 8) & 0xff;
 800288e:	0a26      	lsrs	r6, r4, #8
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
 8002890:	2204      	movs	r2, #4
 8002892:	2306      	movs	r3, #6

void dmxl_set_angle_limits(const uint8_t port_idx, const uint8_t dmxl_id,
                           const uint16_t cw_limit, const uint16_t ccw_limit)
{
  uint8_t d[4];
  d[0] = cw_limit & 0xff;
 8002894:	f88d 500c 	strb.w	r5, [sp, #12]
  d[1] = (cw_limit >> 8) & 0xff;
 8002898:	f88d 700d 	strb.w	r7, [sp, #13]
  d[2] = ccw_limit & 0xff;
 800289c:	f88d 400e 	strb.w	r4, [sp, #14]
  d[3] = (ccw_limit >> 8) & 0xff;
 80028a0:	f88d 600f 	strb.w	r6, [sp, #15]
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
 80028a4:	f7ff fc38 	bl	8002118 <dmxl_write_data>
}
 80028a8:	b005      	add	sp, #20
 80028aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028ac <dmxl_set_res_divider>:

void dmxl_set_res_divider(const uint8_t port_idx, const uint8_t dmxl_id,
                          const uint8_t res_divider)
{
 80028ac:	b510      	push	{r4, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	ac04      	add	r4, sp, #16
  dmxl_write_data(port_idx, dmxl_id, 1, 22, &res_divider);
 80028b2:	2316      	movs	r3, #22
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
}

void dmxl_set_res_divider(const uint8_t port_idx, const uint8_t dmxl_id,
                          const uint8_t res_divider)
{
 80028b4:	f804 2d01 	strb.w	r2, [r4, #-1]!
  dmxl_write_data(port_idx, dmxl_id, 1, 22, &res_divider);
 80028b8:	2201      	movs	r2, #1
 80028ba:	9400      	str	r4, [sp, #0]
 80028bc:	f7ff fc2c 	bl	8002118 <dmxl_write_data>
}
 80028c0:	b004      	add	sp, #16
 80028c2:	bd10      	pop	{r4, pc}

080028c4 <dmxl_set_multiturn_offset>:

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
 80028c4:	b530      	push	{r4, r5, lr}
 80028c6:	b085      	sub	sp, #20
  uint8_t d[2];
  d[0] = offset & 0xff;
  d[1] = (offset >> 8) & 0xff;
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 80028c8:	ab03      	add	r3, sp, #12
  dmxl_write_data(port_idx, dmxl_id, 1, 22, &res_divider);
}

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
 80028ca:	4614      	mov	r4, r2
  uint8_t d[2];
  d[0] = offset & 0xff;
  d[1] = (offset >> 8) & 0xff;
 80028cc:	0a15      	lsrs	r5, r2, #8
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	2202      	movs	r2, #2
 80028d2:	2314      	movs	r3, #20

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
 80028d4:	f88d 400c 	strb.w	r4, [sp, #12]
  d[1] = (offset >> 8) & 0xff;
 80028d8:	f88d 500d 	strb.w	r5, [sp, #13]
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 80028dc:	f7ff fc1c 	bl	8002118 <dmxl_write_data>
}
 80028e0:	b005      	add	sp, #20
 80028e2:	bd30      	pop	{r4, r5, pc}

080028e4 <dmxl_set_speed_dir>:

void dmxl_set_speed_dir(const uint8_t port_idx, const uint8_t dmxl_id,
                        const uint16_t speed, const uint8_t dir)
{
 80028e4:	b530      	push	{r4, r5, lr}
  uint8_t d[2];
  d[0] = speed & 0xff;
  d[1] = ((speed >> 8) & 0x03) | (dir ? 0x04 : 0);
 80028e6:	2b00      	cmp	r3, #0
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
}

void dmxl_set_speed_dir(const uint8_t port_idx, const uint8_t dmxl_id,
                        const uint16_t speed, const uint8_t dir)
{
 80028e8:	b085      	sub	sp, #20
 80028ea:	4615      	mov	r5, r2
  uint8_t d[2];
  d[0] = speed & 0xff;
  d[1] = ((speed >> 8) & 0x03) | (dir ? 0x04 : 0);
 80028ec:	f3c2 2301 	ubfx	r3, r2, #8, #2
 80028f0:	bf14      	ite	ne
 80028f2:	2404      	movne	r4, #4
 80028f4:	2400      	moveq	r4, #0
  dmxl_write_data(port_idx, dmxl_id, 2, 32, d);
 80028f6:	aa03      	add	r2, sp, #12
void dmxl_set_speed_dir(const uint8_t port_idx, const uint8_t dmxl_id,
                        const uint16_t speed, const uint8_t dir)
{
  uint8_t d[2];
  d[0] = speed & 0xff;
  d[1] = ((speed >> 8) & 0x03) | (dir ? 0x04 : 0);
 80028f8:	431c      	orrs	r4, r3
  dmxl_write_data(port_idx, dmxl_id, 2, 32, d);
 80028fa:	9200      	str	r2, [sp, #0]
 80028fc:	2320      	movs	r3, #32
 80028fe:	2202      	movs	r2, #2

void dmxl_set_speed_dir(const uint8_t port_idx, const uint8_t dmxl_id,
                        const uint16_t speed, const uint8_t dir)
{
  uint8_t d[2];
  d[0] = speed & 0xff;
 8002900:	f88d 500c 	strb.w	r5, [sp, #12]
  d[1] = ((speed >> 8) & 0x03) | (dir ? 0x04 : 0);
 8002904:	f88d 400d 	strb.w	r4, [sp, #13]
  dmxl_write_data(port_idx, dmxl_id, 2, 32, d);
 8002908:	f7ff fc06 	bl	8002118 <dmxl_write_data>
}
 800290c:	b005      	add	sp, #20
 800290e:	bd30      	pop	{r4, r5, pc}

08002910 <dmxl_set_control_mode>:

void dmxl_set_control_mode(const uint8_t port_idx,
                           const dmxl_control_mode_t control_mode)
{
 8002910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  //printf("dmxl_set_control_mode %d %d\r\n", port_idx, (int)control_mode);
  if (port_idx >= NUM_DMXL)
 8002914:	2803      	cmp	r0, #3
  dmxl_write_data(port_idx, dmxl_id, 2, 32, d);
}

void dmxl_set_control_mode(const uint8_t port_idx,
                           const dmxl_control_mode_t control_mode)
{
 8002916:	b084      	sub	sp, #16
 8002918:	4605      	mov	r5, r0
  //printf("dmxl_set_control_mode %d %d\r\n", port_idx, (int)control_mode);
  if (port_idx >= NUM_DMXL)
 800291a:	d806      	bhi.n	800292a <dmxl_set_control_mode+0x1a>
    return;
  if (control_mode == DMXL_CM_IDLE || control_mode == DMXL_CM_VELOCITY)
 800291c:	2901      	cmp	r1, #1
 800291e:	460c      	mov	r4, r1
 8002920:	d94e      	bls.n	80029c0 <dmxl_set_control_mode+0xb0>
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 0);
    delay_us(1);
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 0);
  }
  else if (control_mode == DMXL_CM_POSITION)
 8002922:	2902      	cmp	r1, #2
 8002924:	d004      	beq.n	8002930 <dmxl_set_control_mode+0x20>
      delay_us(1);
      dmxl_set_multiturn_offset(port_idx, DMXL_DEFAULT_ID, 13000);  // Places motor close enough to middle of 0-28672 range
      divider_is_sent[port_idx] = 1;
    }
  }
  dmxl_control_mode = control_mode;
 8002926:	4b32      	ldr	r3, [pc, #200]	; (80029f0 <dmxl_set_control_mode+0xe0>)
 8002928:	701c      	strb	r4, [r3, #0]
}
 800292a:	b004      	add	sp, #16
 800292c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

// See Dynamixel addresses here: http://support.robotis.com/en/product/dynamixel/mx_series/mx-28.htm
void dmxl_set_led(const uint8_t port_idx, const uint8_t dmxl_id,
                  const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 8002930:	af04      	add	r7, sp, #16
 8002932:	2601      	movs	r6, #1
 8002934:	f807 6d04 	strb.w	r6, [r7, #-4]!
  dmxl_write_data(port_idx, dmxl_id, 1, 25, &d); // 25 = LED address
 8002938:	4631      	mov	r1, r6
 800293a:	4632      	mov	r2, r6
 800293c:	2319      	movs	r3, #25
 800293e:	9700      	str	r7, [sp, #0]
 8002940:	f7ff fbea 	bl	8002118 <dmxl_write_data>
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 0);
  }
  else if (control_mode == DMXL_CM_POSITION)
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 1);
    delay_us(1);
 8002944:	4630      	mov	r0, r6
 8002946:	f000 fe9b 	bl	8003680 <delay_us>

void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 800294a:	4631      	mov	r1, r6
 800294c:	4632      	mov	r2, r6
 800294e:	2318      	movs	r3, #24
 8002950:	4628      	mov	r0, r5
 8002952:	9700      	str	r7, [sp, #0]


void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 8002954:	f88d 600c 	strb.w	r6, [sp, #12]
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 8002958:	f7ff fbde 	bl	8002118 <dmxl_write_data>
  else if (control_mode == DMXL_CM_POSITION)
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 1);
    delay_us(1);
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 1);
    delay_us(1);
 800295c:	4630      	mov	r0, r6
 800295e:	f000 fe8f 	bl	8003680 <delay_us>
    dmxl_set_angle_limits(port_idx, DMXL_DEFAULT_ID, 4095, 4095);  // Enables multi-turn mode w/ position control
    // http://support.robotis.com/en/product/dynamixel/mx_series/mx-64.htm#Actuator_Address_0B1
    if (divider_is_sent[port_idx] == 0) {
 8002962:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80029f4 <dmxl_set_control_mode+0xe4>
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 1);
    delay_us(1);
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 1);
    delay_us(1);
    dmxl_set_angle_limits(port_idx, DMXL_DEFAULT_ID, 4095, 4095);  // Enables multi-turn mode w/ position control
 8002966:	f640 72ff 	movw	r2, #4095	; 0xfff
 800296a:	4613      	mov	r3, r2
 800296c:	4628      	mov	r0, r5
 800296e:	4631      	mov	r1, r6
 8002970:	f7ff ff86 	bl	8002880 <dmxl_set_angle_limits>
    // http://support.robotis.com/en/product/dynamixel/mx_series/mx-64.htm#Actuator_Address_0B1
    if (divider_is_sent[port_idx] == 0) {
 8002974:	f818 3005 	ldrb.w	r3, [r8, r5]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1d4      	bne.n	8002926 <dmxl_set_control_mode+0x16>
      delay_us(1);
 800297c:	4630      	mov	r0, r6
 800297e:	f000 fe7f 	bl	8003680 <delay_us>
 8002982:	ab04      	add	r3, sp, #16
 8002984:	2204      	movs	r2, #4
 8002986:	f803 2d05 	strb.w	r2, [r3, #-5]!
}

void dmxl_set_res_divider(const uint8_t port_idx, const uint8_t dmxl_id,
                          const uint8_t res_divider)
{
  dmxl_write_data(port_idx, dmxl_id, 1, 22, &res_divider);
 800298a:	4631      	mov	r1, r6
 800298c:	4632      	mov	r2, r6
 800298e:	4628      	mov	r0, r5
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	2316      	movs	r3, #22
 8002994:	f7ff fbc0 	bl	8002118 <dmxl_write_data>
    dmxl_set_angle_limits(port_idx, DMXL_DEFAULT_ID, 4095, 4095);  // Enables multi-turn mode w/ position control
    // http://support.robotis.com/en/product/dynamixel/mx_series/mx-64.htm#Actuator_Address_0B1
    if (divider_is_sent[port_idx] == 0) {
      delay_us(1);
      dmxl_set_res_divider(port_idx, DMXL_DEFAULT_ID, 4);
      delay_us(1);
 8002998:	4630      	mov	r0, r6
 800299a:	f000 fe71 	bl	8003680 <delay_us>
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
  d[1] = (offset >> 8) & 0xff;
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 800299e:	9700      	str	r7, [sp, #0]

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
 80029a0:	f04f 0ec8 	mov.w	lr, #200	; 0xc8
  d[1] = (offset >> 8) & 0xff;
 80029a4:	2732      	movs	r7, #50	; 0x32
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 80029a6:	4628      	mov	r0, r5
 80029a8:	4631      	mov	r1, r6
 80029aa:	4622      	mov	r2, r4
 80029ac:	2314      	movs	r3, #20

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
 80029ae:	f88d e00c 	strb.w	lr, [sp, #12]
  d[1] = (offset >> 8) & 0xff;
 80029b2:	f88d 700d 	strb.w	r7, [sp, #13]
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 80029b6:	f7ff fbaf 	bl	8002118 <dmxl_write_data>
    if (divider_is_sent[port_idx] == 0) {
      delay_us(1);
      dmxl_set_res_divider(port_idx, DMXL_DEFAULT_ID, 4);
      delay_us(1);
      dmxl_set_multiturn_offset(port_idx, DMXL_DEFAULT_ID, 13000);  // Places motor close enough to middle of 0-28672 range
      divider_is_sent[port_idx] = 1;
 80029ba:	f808 6005 	strb.w	r6, [r8, r5]
 80029be:	e7b2      	b.n	8002926 <dmxl_set_control_mode+0x16>

// See Dynamixel addresses here: http://support.robotis.com/en/product/dynamixel/mx_series/mx-28.htm
void dmxl_set_led(const uint8_t port_idx, const uint8_t dmxl_id,
                  const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 80029c0:	ae04      	add	r6, sp, #16
 80029c2:	2700      	movs	r7, #0
 80029c4:	f806 7d04 	strb.w	r7, [r6, #-4]!
  dmxl_write_data(port_idx, dmxl_id, 1, 25, &d); // 25 = LED address
 80029c8:	2101      	movs	r1, #1
 80029ca:	460a      	mov	r2, r1
 80029cc:	2319      	movs	r3, #25
 80029ce:	9600      	str	r6, [sp, #0]
 80029d0:	f7ff fba2 	bl	8002118 <dmxl_write_data>
  if (port_idx >= NUM_DMXL)
    return;
  if (control_mode == DMXL_CM_IDLE || control_mode == DMXL_CM_VELOCITY)
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 0);
    delay_us(1);
 80029d4:	2001      	movs	r0, #1
 80029d6:	f000 fe53 	bl	8003680 <delay_us>

void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 80029da:	2101      	movs	r1, #1
 80029dc:	9600      	str	r6, [sp, #0]
 80029de:	4628      	mov	r0, r5
 80029e0:	460a      	mov	r2, r1
 80029e2:	2318      	movs	r3, #24


void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 80029e4:	f88d 700c 	strb.w	r7, [sp, #12]
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 80029e8:	f7ff fb96 	bl	8002118 <dmxl_write_data>
 80029ec:	e79b      	b.n	8002926 <dmxl_set_control_mode+0x16>
 80029ee:	bf00      	nop
 80029f0:	2001000c 	.word	0x2001000c
 80029f4:	2000f3bc 	.word	0x2000f3bc

080029f8 <dmxl_set_control_target>:

void dmxl_set_control_target(const uint8_t port_idx,
                             const uint16_t target)
{
  //printf("dmxl_set_control_target %d %d\r\n", port_idx, (int)target);
  if (port_idx >= NUM_DMXL)
 80029f8:	2803      	cmp	r0, #3
 80029fa:	d815      	bhi.n	8002a28 <dmxl_set_control_target+0x30>
  dmxl_control_mode = control_mode;
}

void dmxl_set_control_target(const uint8_t port_idx,
                             const uint16_t target)
{
 80029fc:	b510      	push	{r4, lr}
    return;
  uint8_t d[2];
  d[0] = target & 0xff;
  d[1] = (target >> 8) & 0xff;
  uint8_t start_addr = 30;  // position control
  if (dmxl_control_mode == DMXL_CM_VELOCITY) {
 80029fe:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <dmxl_set_control_target+0x34>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
  dmxl_control_mode = control_mode;
}

void dmxl_set_control_target(const uint8_t port_idx,
                             const uint16_t target)
{
 8002a02:	b084      	sub	sp, #16
    return;
  uint8_t d[2];
  d[0] = target & 0xff;
  d[1] = (target >> 8) & 0xff;
  uint8_t start_addr = 30;  // position control
  if (dmxl_control_mode == DMXL_CM_VELOCITY) {
 8002a04:	2b01      	cmp	r3, #1
    start_addr = 32; // velocity control
  }
  dmxl_write_data(port_idx, DMXL_DEFAULT_ID, 2, start_addr, d);
 8002a06:	aa03      	add	r2, sp, #12
{
  //printf("dmxl_set_control_target %d %d\r\n", port_idx, (int)target);
  if (port_idx >= NUM_DMXL)
    return;
  uint8_t d[2];
  d[0] = target & 0xff;
 8002a08:	f88d 100c 	strb.w	r1, [sp, #12]
  d[1] = (target >> 8) & 0xff;
 8002a0c:	ea4f 2411 	mov.w	r4, r1, lsr #8
  uint8_t start_addr = 30;  // position control
  if (dmxl_control_mode == DMXL_CM_VELOCITY) {
    start_addr = 32; // velocity control
  }
  dmxl_write_data(port_idx, DMXL_DEFAULT_ID, 2, start_addr, d);
 8002a10:	9200      	str	r2, [sp, #0]
 8002a12:	bf14      	ite	ne
 8002a14:	231e      	movne	r3, #30
 8002a16:	2320      	moveq	r3, #32
 8002a18:	2101      	movs	r1, #1
 8002a1a:	2202      	movs	r2, #2
  //printf("dmxl_set_control_target %d %d\r\n", port_idx, (int)target);
  if (port_idx >= NUM_DMXL)
    return;
  uint8_t d[2];
  d[0] = target & 0xff;
  d[1] = (target >> 8) & 0xff;
 8002a1c:	f88d 400d 	strb.w	r4, [sp, #13]
  uint8_t start_addr = 30;  // position control
  if (dmxl_control_mode == DMXL_CM_VELOCITY) {
    start_addr = 32; // velocity control
  }
  dmxl_write_data(port_idx, DMXL_DEFAULT_ID, 2, start_addr, d);
 8002a20:	f7ff fb7a 	bl	8002118 <dmxl_write_data>
}
 8002a24:	b004      	add	sp, #16
 8002a26:	bd10      	pop	{r4, pc}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	2001000c 	.word	0x2001000c

08002a30 <dmxl_set_all_control_targets>:

void dmxl_set_all_control_targets(const uint16_t *targets)
{
 8002a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a34:	4d36      	ldr	r5, [pc, #216]	; (8002b10 <dmxl_set_all_control_targets+0xe0>)
 8002a36:	4937      	ldr	r1, [pc, #220]	; (8002b14 <dmxl_set_all_control_targets+0xe4>)
 8002a38:	1e87      	subs	r7, r0, #2
 8002a3a:	f100 0c06 	add.w	ip, r0, #6
 8002a3e:	462e      	mov	r6, r5
  for (int i = 0; i < NUM_DMXL; i++)
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
    u->CR1 |=  USART_CR1_TE; // enable the transmitter
    pkts[i][0] = 0xff;
 8002a40:	f04f 0eff 	mov.w	lr, #255	; 0xff
    pkts[i][1] = 0xff;
    pkts[i][2] = DMXL_DEFAULT_ID;
 8002a44:	f04f 0b01 	mov.w	fp, #1
    pkts[i][3] = 5; // write 2 bytes + 3 byte overhead
 8002a48:	f04f 0905 	mov.w	r9, #5
    pkts[i][4] = 3; // instruction: "write data"
 8002a4c:	f04f 0803 	mov.w	r8, #3
    } else {
      pkts[i][5] = 30; // start address: control target (position)
    }
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
    pkts[i][8] = 0; // checksum
 8002a50:	f04f 0a00 	mov.w	sl, #0
{
  // set all control targets simultaneously
  static uint8_t pkts[NUM_DMXL][12];
  for (int i = 0; i < NUM_DMXL; i++)
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
 8002a54:	68f2      	ldr	r2, [r6, #12]
    u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
 8002a56:	8993      	ldrh	r3, [r2, #12]
 8002a58:	f023 0304 	bic.w	r3, r3, #4
 8002a5c:	041b      	lsls	r3, r3, #16
 8002a5e:	0c1b      	lsrs	r3, r3, #16
 8002a60:	8193      	strh	r3, [r2, #12]
    u->CR1 |=  USART_CR1_TE; // enable the transmitter
 8002a62:	8993      	ldrh	r3, [r2, #12]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f043 0308 	orr.w	r3, r3, #8
 8002a6a:	8193      	strh	r3, [r2, #12]
    pkts[i][0] = 0xff;
    pkts[i][1] = 0xff;
    pkts[i][2] = DMXL_DEFAULT_ID;
    pkts[i][3] = 5; // write 2 bytes + 3 byte overhead
    pkts[i][4] = 3; // instruction: "write data"
    if (dmxl_control_mode == DMXL_CM_VELOCITY) {
 8002a6c:	4b2a      	ldr	r3, [pc, #168]	; (8002b18 <dmxl_set_all_control_targets+0xe8>)
  for (int i = 0; i < NUM_DMXL; i++)
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
    u->CR1 |=  USART_CR1_TE; // enable the transmitter
    pkts[i][0] = 0xff;
 8002a6e:	f801 ec01 	strb.w	lr, [r1, #-1]
    pkts[i][1] = 0xff;
    pkts[i][2] = DMXL_DEFAULT_ID;
    pkts[i][3] = 5; // write 2 bytes + 3 byte overhead
    pkts[i][4] = 3; // instruction: "write data"
    if (dmxl_control_mode == DMXL_CM_VELOCITY) {
 8002a72:	781b      	ldrb	r3, [r3, #0]
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
    u->CR1 |=  USART_CR1_TE; // enable the transmitter
    pkts[i][0] = 0xff;
    pkts[i][1] = 0xff;
 8002a74:	f881 e000 	strb.w	lr, [r1]
    pkts[i][2] = DMXL_DEFAULT_ID;
    pkts[i][3] = 5; // write 2 bytes + 3 byte overhead
    pkts[i][4] = 3; // instruction: "write data"
    if (dmxl_control_mode == DMXL_CM_VELOCITY) {
      pkts[i][5] = 32; // start address: control target (velocity)
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	bf14      	ite	ne
 8002a7c:	231e      	movne	r3, #30
 8002a7e:	2320      	moveq	r3, #32
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
    u->CR1 |=  USART_CR1_TE; // enable the transmitter
    pkts[i][0] = 0xff;
    pkts[i][1] = 0xff;
    pkts[i][2] = DMXL_DEFAULT_ID;
 8002a80:	f881 b001 	strb.w	fp, [r1, #1]
    pkts[i][3] = 5; // write 2 bytes + 3 byte overhead
 8002a84:	f881 9002 	strb.w	r9, [r1, #2]
    pkts[i][4] = 3; // instruction: "write data"
 8002a88:	f881 8003 	strb.w	r8, [r1, #3]
    if (dmxl_control_mode == DMXL_CM_VELOCITY) {
      pkts[i][5] = 32; // start address: control target (velocity)
 8002a8c:	710b      	strb	r3, [r1, #4]
    } else {
      pkts[i][5] = 30; // start address: control target (position)
    }
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
 8002a8e:	f837 3f02 	ldrh.w	r3, [r7, #2]!
 8002a92:	714b      	strb	r3, [r1, #5]
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
 8002a94:	0a1b      	lsrs	r3, r3, #8
 8002a96:	718b      	strb	r3, [r1, #6]
    pkts[i][8] = 0; // checksum
 8002a98:	f881 a007 	strb.w	sl, [r1, #7]
 8002a9c:	1d88      	adds	r0, r1, #6
 8002a9e:	460a      	mov	r2, r1
 8002aa0:	2300      	movs	r3, #0
    for (int j = 2; j < 8; j++)
      pkts[i][8] += pkts[i][j];
 8002aa2:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8002aa6:	4423      	add	r3, r4
 8002aa8:	b2db      	uxtb	r3, r3
      pkts[i][5] = 30; // start address: control target (position)
    }
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
    pkts[i][8] = 0; // checksum
    for (int j = 2; j < 8; j++)
 8002aaa:	4282      	cmp	r2, r0
      pkts[i][8] += pkts[i][j];
 8002aac:	71cb      	strb	r3, [r1, #7]
      pkts[i][5] = 30; // start address: control target (position)
    }
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
    pkts[i][8] = 0; // checksum
    for (int j = 2; j < 8; j++)
 8002aae:	d1f8      	bne.n	8002aa2 <dmxl_set_all_control_targets+0x72>
      pkts[i][8] += pkts[i][j];
    pkts[i][8] = ~pkts[i][8]; // invert checksum
 8002ab0:	43db      	mvns	r3, r3

void dmxl_set_all_control_targets(const uint16_t *targets)
{
  // set all control targets simultaneously
  static uint8_t pkts[NUM_DMXL][12];
  for (int i = 0; i < NUM_DMXL; i++)
 8002ab2:	4567      	cmp	r7, ip
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
    pkts[i][8] = 0; // checksum
    for (int j = 2; j < 8; j++)
      pkts[i][8] += pkts[i][j];
    pkts[i][8] = ~pkts[i][8]; // invert checksum
 8002ab4:	71cb      	strb	r3, [r1, #7]
 8002ab6:	f106 0618 	add.w	r6, r6, #24
 8002aba:	f101 010c 	add.w	r1, r1, #12

void dmxl_set_all_control_targets(const uint16_t *targets)
{
  // set all control targets simultaneously
  static uint8_t pkts[NUM_DMXL][12];
  for (int i = 0; i < NUM_DMXL; i++)
 8002abe:	d1c9      	bne.n	8002a54 <dmxl_set_all_control_targets+0x24>
 8002ac0:	4c16      	ldr	r4, [pc, #88]	; (8002b1c <dmxl_set_all_control_targets+0xec>)
 8002ac2:	f104 0609 	add.w	r6, r4, #9
    } else {
      pkts[i][5] = 30; // start address: control target (position)
    }
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
    pkts[i][8] = 0; // checksum
 8002ac6:	4812      	ldr	r0, [pc, #72]	; (8002b10 <dmxl_set_all_control_targets+0xe0>)
 8002ac8:	2100      	movs	r1, #0
  }
  for (int j = 0; j < 9; j++)
  {
    for (int i = 0; i < NUM_DMXL; i++)
    {
      USART_TypeDef *u = g_dmxl_ports[i].uart;
 8002aca:	68c2      	ldr	r2, [r0, #12]
      while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
 8002acc:	8813      	ldrh	r3, [r2, #0]
 8002ace:	061f      	lsls	r7, r3, #24
 8002ad0:	d5fc      	bpl.n	8002acc <dmxl_set_all_control_targets+0x9c>
      u->DR = pkts[i][j];
 8002ad2:	5c63      	ldrb	r3, [r4, r1]
 8002ad4:	8093      	strh	r3, [r2, #4]
 8002ad6:	310c      	adds	r1, #12
      pkts[i][8] += pkts[i][j];
    pkts[i][8] = ~pkts[i][8]; // invert checksum
  }
  for (int j = 0; j < 9; j++)
  {
    for (int i = 0; i < NUM_DMXL; i++)
 8002ad8:	2930      	cmp	r1, #48	; 0x30
 8002ada:	f100 0018 	add.w	r0, r0, #24
 8002ade:	d1f4      	bne.n	8002aca <dmxl_set_all_control_targets+0x9a>
 8002ae0:	3401      	adds	r4, #1
    pkts[i][8] = 0; // checksum
    for (int j = 2; j < 8; j++)
      pkts[i][8] += pkts[i][j];
    pkts[i][8] = ~pkts[i][8]; // invert checksum
  }
  for (int j = 0; j < 9; j++)
 8002ae2:	42b4      	cmp	r4, r6
 8002ae4:	d1ef      	bne.n	8002ac6 <dmxl_set_all_control_targets+0x96>
 8002ae6:	490e      	ldr	r1, [pc, #56]	; (8002b20 <dmxl_set_all_control_targets+0xf0>)
      u->DR = pkts[i][j];
    }
  }
  for (int i = 0; i < NUM_DMXL; i++)
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
 8002ae8:	68ea      	ldr	r2, [r5, #12]
    while (!(u->SR & USART_SR_TC)) { } // wait for last TX to finish
 8002aea:	8813      	ldrh	r3, [r2, #0]
 8002aec:	065b      	lsls	r3, r3, #25
 8002aee:	d5fc      	bpl.n	8002aea <dmxl_set_all_control_targets+0xba>
    u->CR1 &= ~USART_CR1_TE; // disable the transmitter
 8002af0:	8993      	ldrh	r3, [r2, #12]
 8002af2:	f023 0308 	bic.w	r3, r3, #8
 8002af6:	041b      	lsls	r3, r3, #16
 8002af8:	0c1b      	lsrs	r3, r3, #16
 8002afa:	8193      	strh	r3, [r2, #12]
    u->CR1 |=  USART_CR1_RE; // re-enable the receiver
 8002afc:	8993      	ldrh	r3, [r2, #12]
 8002afe:	3518      	adds	r5, #24
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	f043 0304 	orr.w	r3, r3, #4
      USART_TypeDef *u = g_dmxl_ports[i].uart;
      while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
      u->DR = pkts[i][j];
    }
  }
  for (int i = 0; i < NUM_DMXL; i++)
 8002b06:	428d      	cmp	r5, r1
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    while (!(u->SR & USART_SR_TC)) { } // wait for last TX to finish
    u->CR1 &= ~USART_CR1_TE; // disable the transmitter
    u->CR1 |=  USART_CR1_RE; // re-enable the receiver
 8002b08:	8193      	strh	r3, [r2, #12]
      USART_TypeDef *u = g_dmxl_ports[i].uart;
      while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
      u->DR = pkts[i][j];
    }
  }
  for (int i = 0; i < NUM_DMXL; i++)
 8002b0a:	d1ed      	bne.n	8002ae8 <dmxl_set_all_control_targets+0xb8>
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    while (!(u->SR & USART_SR_TC)) { } // wait for last TX to finish
    u->CR1 &= ~USART_CR1_TE; // disable the transmitter
    u->CR1 |=  USART_CR1_RE; // re-enable the receiver
  }
}
 8002b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b10:	20000018 	.word	0x20000018
 8002b14:	2000f3c1 	.word	0x2000f3c1
 8002b18:	2001000c 	.word	0x2001000c
 8002b1c:	2000f3c0 	.word	0x2000f3c0
 8002b20:	20000078 	.word	0x20000078

08002b24 <dmxl_poll>:

void dmxl_poll()
{
 8002b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b26:	4e1f      	ldr	r6, [pc, #124]	; (8002ba4 <dmxl_poll+0x80>)
 8002b28:	b083      	sub	sp, #12
  // spin through and poll all their angles, velocities, currents,
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
 8002b2a:	2400      	movs	r4, #0
    u->CR1 |=  USART_CR1_RE; // re-enable the receiver
  }
}

void dmxl_poll()
{
 8002b2c:	4635      	mov	r5, r6
  // spin through and poll all their angles, velocities, currents,
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
 8002b2e:	2702      	movs	r7, #2
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
 8002b30:	b2e0      	uxtb	r0, r4
{
  // spin through and poll all their angles, velocities, currents,
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
 8002b32:	742f      	strb	r7, [r5, #16]
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
 8002b34:	2108      	movs	r1, #8

void dmxl_poll()
{
  // spin through and poll all their angles, velocities, currents,
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
 8002b36:	3401      	adds	r4, #1
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
 8002b38:	2224      	movs	r2, #36	; 0x24
 8002b3a:	f7ff fb0f 	bl	800215c <dmxl_read_data.constprop.3>

void dmxl_poll()
{
  // spin through and poll all their angles, velocities, currents,
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
 8002b3e:	2c04      	cmp	r4, #4
 8002b40:	f105 0518 	add.w	r5, r5, #24
 8002b44:	d1f4      	bne.n	8002b30 <dmxl_poll+0xc>
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
  }
  volatile uint32_t t_start = SYSTIME;
 8002b46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  while (SYSTIME - t_start < 10000)
 8002b4a:	461d      	mov	r5, r3
 8002b4c:	4f16      	ldr	r7, [pc, #88]	; (8002ba8 <dmxl_poll+0x84>)
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
  }
  volatile uint32_t t_start = SYSTIME;
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	9301      	str	r3, [sp, #4]
  while (SYSTIME - t_start < 10000)
 8002b52:	f242 740f 	movw	r4, #9999	; 0x270f
 8002b56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002b58:	9a01      	ldr	r2, [sp, #4]
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	42a3      	cmp	r3, r4
 8002b5e:	d816      	bhi.n	8002b8e <dmxl_poll+0x6a>
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 8002b60:	2000      	movs	r0, #0
 8002b62:	f7ff fc9d 	bl	80024a0 <dmxl_process_ring>
 8002b66:	2001      	movs	r0, #1
 8002b68:	f7ff fc9a 	bl	80024a0 <dmxl_process_ring>
 8002b6c:	2002      	movs	r0, #2
 8002b6e:	f7ff fc97 	bl	80024a0 <dmxl_process_ring>
 8002b72:	2003      	movs	r0, #3
 8002b74:	f7ff fc94 	bl	80024a0 <dmxl_process_ring>
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <dmxl_poll+0x88>)
 8002b7a:	2201      	movs	r2, #1
  {
    dmxl_process_rings();
    // also spin around the ethernet rings here? probably not.
    int all_done = 1;
    for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
      if (g_dmxl_ports[i].comms_state == DMXL_CS_POLL_STATE)
 8002b7c:	7c19      	ldrb	r1, [r3, #16]
 8002b7e:	3318      	adds	r3, #24
        all_done = 0;
 8002b80:	2902      	cmp	r1, #2
 8002b82:	bf08      	it	eq
 8002b84:	2200      	moveq	r2, #0
  while (SYSTIME - t_start < 10000)
  {
    dmxl_process_rings();
    // also spin around the ethernet rings here? probably not.
    int all_done = 1;
    for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
 8002b86:	42bb      	cmp	r3, r7
 8002b88:	d1f8      	bne.n	8002b7c <dmxl_poll+0x58>
      if (g_dmxl_ports[i].comms_state == DMXL_CS_POLL_STATE)
        all_done = 0;
    if (all_done)
 8002b8a:	2a00      	cmp	r2, #0
 8002b8c:	d0e3      	beq.n	8002b56 <dmxl_poll+0x32>
      break;
  }
  // set the comms state to "idle" even if we didn't hear back from it by now
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    g_dmxl_ports[i].comms_state = DMXL_CS_IDLE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	7433      	strb	r3, [r6, #16]
 8002b92:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 8002b96:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
 8002b9a:	f886 3058 	strb.w	r3, [r6, #88]	; 0x58
}
 8002b9e:	b003      	add	sp, #12
 8002ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000018 	.word	0x20000018
 8002ba8:	20000078 	.word	0x20000078
 8002bac:	20000018 	.word	0x20000018

08002bb0 <dmxl_poll_nonblocking_tick>:

void dmxl_poll_nonblocking_tick(const uint8_t dmxl_port)
{
  if (dmxl_port >= NUM_DMXL)
 8002bb0:	2803      	cmp	r0, #3
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    g_dmxl_ports[i].comms_state = DMXL_CS_IDLE;
}

void dmxl_poll_nonblocking_tick(const uint8_t dmxl_port)
{
 8002bb2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bb6:	4603      	mov	r3, r0
  if (dmxl_port >= NUM_DMXL)
 8002bb8:	d81e      	bhi.n	8002bf8 <dmxl_poll_nonblocking_tick+0x48>
    return; // let's not corrupt memory.
  dmxl_async_poll_state_t *ps = &dmxl_poll_states[dmxl_port]; // save typing
  dmxl_port_t *dp = &g_dmxl_ports[dmxl_port];
  USART_TypeDef *u = dp->uart;
 8002bba:	4a5b      	ldr	r2, [pc, #364]	; (8002d28 <dmxl_poll_nonblocking_tick+0x178>)
  static uint8_t dmxl_txbuf[NUM_DMXL][256];
  static uint8_t dmxl_txbuf_readpos[NUM_DMXL] = {0};
  static uint32_t dmxl_rx_start_time[NUM_DMXL] = {0};
  switch (*ps)
 8002bbc:	4d5b      	ldr	r5, [pc, #364]	; (8002d2c <dmxl_poll_nonblocking_tick+0x17c>)
{
  if (dmxl_port >= NUM_DMXL)
    return; // let's not corrupt memory.
  dmxl_async_poll_state_t *ps = &dmxl_poll_states[dmxl_port]; // save typing
  dmxl_port_t *dp = &g_dmxl_ports[dmxl_port];
  USART_TypeDef *u = dp->uart;
 8002bbe:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8002bc2:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
  static uint8_t dmxl_txbuf[NUM_DMXL][256];
  static uint8_t dmxl_txbuf_readpos[NUM_DMXL] = {0};
  static uint32_t dmxl_rx_start_time[NUM_DMXL] = {0};
  switch (*ps)
 8002bc6:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
{
  if (dmxl_port >= NUM_DMXL)
    return; // let's not corrupt memory.
  dmxl_async_poll_state_t *ps = &dmxl_poll_states[dmxl_port]; // save typing
  dmxl_port_t *dp = &g_dmxl_ports[dmxl_port];
  USART_TypeDef *u = dp->uart;
 8002bca:	68e1      	ldr	r1, [r4, #12]
  static uint8_t dmxl_txbuf[NUM_DMXL][256];
  static uint8_t dmxl_txbuf_readpos[NUM_DMXL] = {0};
  static uint32_t dmxl_rx_start_time[NUM_DMXL] = {0};
  switch (*ps)
 8002bcc:	2a01      	cmp	r2, #1
 8002bce:	d015      	beq.n	8002bfc <dmxl_poll_nonblocking_tick+0x4c>
 8002bd0:	d351      	bcc.n	8002c76 <dmxl_poll_nonblocking_tick+0xc6>
 8002bd2:	2a02      	cmp	r2, #2
 8002bd4:	d034      	beq.n	8002c40 <dmxl_poll_nonblocking_tick+0x90>
 8002bd6:	3201      	adds	r2, #1
 8002bd8:	d10a      	bne.n	8002bf0 <dmxl_poll_nonblocking_tick+0x40>
  {
    case DPS_DONE: // poll start
      dmxl_rx_start_time[dmxl_port] = SYSTIME;
 8002bda:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002bde:	4a54      	ldr	r2, [pc, #336]	; (8002d30 <dmxl_poll_nonblocking_tick+0x180>)
 8002be0:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8002be2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
      *ps = DPS_WAIT; // give any outbound command some time to be processed
 8002be6:	2200      	movs	r2, #0
 8002be8:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
      break;
 8002bec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *ps = DPS_DONE; // hooray, we received a full state message
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 10000) // wait at most 10ms
        *ps = DPS_DONE; // time to give up. gotta know when to fold em
      break;
    default:
      *ps = DPS_DONE; // shouldn't get here
 8002bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bf4:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
 8002bf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dmxl_txbuf_readpos[dmxl_port] = 0;
        *ps = DPS_POLL_TX;
      }
      break;
    case DPS_POLL_TX:
      if (u->SR & USART_SR_TXE) // is there room in the TX buffer ?
 8002bfc:	880a      	ldrh	r2, [r1, #0]
 8002bfe:	0610      	lsls	r0, r2, #24
 8002c00:	d5fa      	bpl.n	8002bf8 <dmxl_poll_nonblocking_tick+0x48>
      {
        if (dmxl_txbuf_readpos[dmxl_port] < 7)
 8002c02:	484c      	ldr	r0, [pc, #304]	; (8002d34 <dmxl_poll_nonblocking_tick+0x184>)
 8002c04:	5cc2      	ldrb	r2, [r0, r3]
 8002c06:	2a06      	cmp	r2, #6
 8002c08:	f240 8084 	bls.w	8002d14 <dmxl_poll_nonblocking_tick+0x164>
        {
          dmxl_txbuf_readpos[dmxl_port]++;
          u->DR = dmxl_txbuf[dmxl_port][dmxl_txbuf_readpos[dmxl_port]];
        }
        else if (u->SR & USART_SR_TC) // last byte must fully complete
 8002c0c:	880a      	ldrh	r2, [r1, #0]
 8002c0e:	0652      	lsls	r2, r2, #25
 8002c10:	d5f2      	bpl.n	8002bf8 <dmxl_poll_nonblocking_tick+0x48>
        {
          u->CR1 &= ~USART_CR1_TE; // disable the transmitter
 8002c12:	898a      	ldrh	r2, [r1, #12]
          u->CR1 |=  USART_CR1_RE; // re-enable the transmitter
          dmxl_rx_start_time[dmxl_port] = SYSTIME;
 8002c14:	4846      	ldr	r0, [pc, #280]	; (8002d30 <dmxl_poll_nonblocking_tick+0x180>)
          dmxl_txbuf_readpos[dmxl_port]++;
          u->DR = dmxl_txbuf[dmxl_port][dmxl_txbuf_readpos[dmxl_port]];
        }
        else if (u->SR & USART_SR_TC) // last byte must fully complete
        {
          u->CR1 &= ~USART_CR1_TE; // disable the transmitter
 8002c16:	f022 0208 	bic.w	r2, r2, #8
 8002c1a:	0412      	lsls	r2, r2, #16
 8002c1c:	0c12      	lsrs	r2, r2, #16
 8002c1e:	818a      	strh	r2, [r1, #12]
          u->CR1 |=  USART_CR1_RE; // re-enable the transmitter
 8002c20:	898a      	ldrh	r2, [r1, #12]
 8002c22:	b292      	uxth	r2, r2
 8002c24:	f042 0204 	orr.w	r2, r2, #4
          dmxl_rx_start_time[dmxl_port] = SYSTIME;
 8002c28:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
          u->DR = dmxl_txbuf[dmxl_port][dmxl_txbuf_readpos[dmxl_port]];
        }
        else if (u->SR & USART_SR_TC) // last byte must fully complete
        {
          u->CR1 &= ~USART_CR1_TE; // disable the transmitter
          u->CR1 |=  USART_CR1_RE; // re-enable the transmitter
 8002c2c:	818a      	strh	r2, [r1, #12]
          dmxl_rx_start_time[dmxl_port] = SYSTIME;
 8002c2e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002c30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          g_dmxl_ports[dmxl_port].comms_state = DMXL_CS_POLL_STATE;
 8002c34:	2202      	movs	r2, #2
 8002c36:	7422      	strb	r2, [r4, #16]
          *ps = DPS_POLL_RX;
 8002c38:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
 8002c3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c40:	4606      	mov	r6, r0
        }
      }
      break;
    case DPS_POLL_RX:
      dmxl_process_ring(dmxl_port);
 8002c42:	f7ff fc2d 	bl	80024a0 <dmxl_process_ring>
      if (g_dmxl_ports[dmxl_port].comms_state != DMXL_CS_POLL_STATE)
 8002c46:	7c23      	ldrb	r3, [r4, #16]
 8002c48:	2b02      	cmp	r3, #2
        *ps = DPS_DONE; // hooray, we received a full state message
 8002c4a:	bf1c      	itt	ne
 8002c4c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8002c50:	f845 3026 	strne.w	r3, [r5, r6, lsl #2]
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 10000) // wait at most 10ms
 8002c54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c58:	4b35      	ldr	r3, [pc, #212]	; (8002d30 <dmxl_poll_nonblocking_tick+0x180>)
 8002c5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c5c:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8002c60:	f242 7310 	movw	r3, #10000	; 0x2710
 8002c64:	1a52      	subs	r2, r2, r1
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d9c6      	bls.n	8002bf8 <dmxl_poll_nonblocking_tick+0x48>
        *ps = DPS_DONE; // time to give up. gotta know when to fold em
 8002c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c6e:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
 8002c72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    case DPS_DONE: // poll start
      dmxl_rx_start_time[dmxl_port] = SYSTIME;
      *ps = DPS_WAIT; // give any outbound command some time to be processed
      break;
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
 8002c76:	482e      	ldr	r0, [pc, #184]	; (8002d30 <dmxl_poll_nonblocking_tick+0x180>)
 8002c78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c7c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8002c80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c82:	f241 3088 	movw	r0, #5000	; 0x1388
 8002c86:	1b12      	subs	r2, r2, r4
 8002c88:	4282      	cmp	r2, r0
 8002c8a:	d9b5      	bls.n	8002bf8 <dmxl_poll_nonblocking_tick+0x48>
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
 8002c8c:	898a      	ldrh	r2, [r1, #12]
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
 8002c8e:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 8002d38 <dmxl_poll_nonblocking_tick+0x188>
      *ps = DPS_WAIT; // give any outbound command some time to be processed
      break;
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
 8002c92:	f022 0204 	bic.w	r2, r2, #4
 8002c96:	0412      	lsls	r2, r2, #16
 8002c98:	0c12      	lsrs	r2, r2, #16
 8002c9a:	818a      	strh	r2, [r1, #12]
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
 8002c9c:	898e      	ldrh	r6, [r1, #12]
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
 8002c9e:	021f      	lsls	r7, r3, #8
      break;
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
 8002ca0:	b2b6      	uxth	r6, r6
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
 8002ca2:	eb0e 0207 	add.w	r2, lr, r7
      break;
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
 8002ca6:	f046 0608 	orr.w	r6, r6, #8
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
        dmxl_txbuf[dmxl_port][1] = 0xff; // more header
        dmxl_txbuf[dmxl_port][2] = DMXL_DEFAULT_ID;
 8002caa:	f04f 0b01 	mov.w	fp, #1
      break;
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
 8002cae:	818e      	strh	r6, [r1, #12]
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
 8002cb0:	24ff      	movs	r4, #255	; 0xff
        dmxl_txbuf[dmxl_port][1] = 0xff; // more header
        dmxl_txbuf[dmxl_port][2] = DMXL_DEFAULT_ID;
        dmxl_txbuf[dmxl_port][3] = 4;  // packet length = 4
 8002cb2:	f04f 0a04 	mov.w	sl, #4
        dmxl_txbuf[dmxl_port][4] = 2;  // instruction: "read data"
 8002cb6:	f04f 0902 	mov.w	r9, #2
        dmxl_txbuf[dmxl_port][5] = 36; // start address
 8002cba:	f04f 0824 	mov.w	r8, #36	; 0x24
        dmxl_txbuf[dmxl_port][6] = 8;  // number of bytes to read
 8002cbe:	f04f 0c08 	mov.w	ip, #8
 8002cc2:	eb07 000b 	add.w	r0, r7, fp
 8002cc6:	1dbe      	adds	r6, r7, #6
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
 8002cc8:	f80e 4007 	strb.w	r4, [lr, r7]
 8002ccc:	4470      	add	r0, lr
        dmxl_txbuf[dmxl_port][1] = 0xff; // more header
 8002cce:	7054      	strb	r4, [r2, #1]
        dmxl_txbuf[dmxl_port][2] = DMXL_DEFAULT_ID;
 8002cd0:	f882 b002 	strb.w	fp, [r2, #2]
        dmxl_txbuf[dmxl_port][3] = 4;  // packet length = 4
 8002cd4:	f882 a003 	strb.w	sl, [r2, #3]
        dmxl_txbuf[dmxl_port][4] = 2;  // instruction: "read data"
 8002cd8:	f882 9004 	strb.w	r9, [r2, #4]
        dmxl_txbuf[dmxl_port][5] = 36; // start address
 8002cdc:	f882 8005 	strb.w	r8, [r2, #5]
        dmxl_txbuf[dmxl_port][6] = 8;  // number of bytes to read
 8002ce0:	f882 c006 	strb.w	ip, [r2, #6]
 8002ce4:	4476      	add	r6, lr
        uint8_t csum = 0;
 8002ce6:	2200      	movs	r2, #0
        for (int i = 2; i < 7; i++)
          csum += dmxl_txbuf[dmxl_port][i];
 8002ce8:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8002cec:	4422      	add	r2, r4
        dmxl_txbuf[dmxl_port][3] = 4;  // packet length = 4
        dmxl_txbuf[dmxl_port][4] = 2;  // instruction: "read data"
        dmxl_txbuf[dmxl_port][5] = 36; // start address
        dmxl_txbuf[dmxl_port][6] = 8;  // number of bytes to read
        uint8_t csum = 0;
        for (int i = 2; i < 7; i++)
 8002cee:	42b0      	cmp	r0, r6
          csum += dmxl_txbuf[dmxl_port][i];
 8002cf0:	b2d2      	uxtb	r2, r2
        dmxl_txbuf[dmxl_port][3] = 4;  // packet length = 4
        dmxl_txbuf[dmxl_port][4] = 2;  // instruction: "read data"
        dmxl_txbuf[dmxl_port][5] = 36; // start address
        dmxl_txbuf[dmxl_port][6] = 8;  // number of bytes to read
        uint8_t csum = 0;
        for (int i = 2; i < 7; i++)
 8002cf2:	d1f9      	bne.n	8002ce8 <dmxl_poll_nonblocking_tick+0x138>
          csum += dmxl_txbuf[dmxl_port][i];
        dmxl_txbuf[dmxl_port][7] = ~csum;
 8002cf4:	eb0e 0007 	add.w	r0, lr, r7
 8002cf8:	43d2      	mvns	r2, r2
 8002cfa:	71c2      	strb	r2, [r0, #7]
        u->DR; // read any garbage on the RX register
        u->DR = dmxl_txbuf[dmxl_port][0]; // kick it off
 8002cfc:	f81e 2007 	ldrb.w	r2, [lr, r7]
        dmxl_txbuf_readpos[dmxl_port] = 0;
 8002d00:	480c      	ldr	r0, [pc, #48]	; (8002d34 <dmxl_poll_nonblocking_tick+0x184>)
        dmxl_txbuf[dmxl_port][6] = 8;  // number of bytes to read
        uint8_t csum = 0;
        for (int i = 2; i < 7; i++)
          csum += dmxl_txbuf[dmxl_port][i];
        dmxl_txbuf[dmxl_port][7] = ~csum;
        u->DR; // read any garbage on the RX register
 8002d02:	888c      	ldrh	r4, [r1, #4]
        u->DR = dmxl_txbuf[dmxl_port][0]; // kick it off
 8002d04:	808a      	strh	r2, [r1, #4]
        dmxl_txbuf_readpos[dmxl_port] = 0;
 8002d06:	2100      	movs	r1, #0
 8002d08:	54c1      	strb	r1, [r0, r3]
        *ps = DPS_POLL_TX;
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
 8002d10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    case DPS_POLL_TX:
      if (u->SR & USART_SR_TXE) // is there room in the TX buffer ?
      {
        if (dmxl_txbuf_readpos[dmxl_port] < 7)
        {
          dmxl_txbuf_readpos[dmxl_port]++;
 8002d14:	3201      	adds	r2, #1
 8002d16:	b2d2      	uxtb	r2, r2
          u->DR = dmxl_txbuf[dmxl_port][dmxl_txbuf_readpos[dmxl_port]];
 8002d18:	eb02 2403 	add.w	r4, r2, r3, lsl #8
 8002d1c:	4d06      	ldr	r5, [pc, #24]	; (8002d38 <dmxl_poll_nonblocking_tick+0x188>)
    case DPS_POLL_TX:
      if (u->SR & USART_SR_TXE) // is there room in the TX buffer ?
      {
        if (dmxl_txbuf_readpos[dmxl_port] < 7)
        {
          dmxl_txbuf_readpos[dmxl_port]++;
 8002d1e:	54c2      	strb	r2, [r0, r3]
          u->DR = dmxl_txbuf[dmxl_port][dmxl_txbuf_readpos[dmxl_port]];
 8002d20:	5d2b      	ldrb	r3, [r5, r4]
 8002d22:	808b      	strh	r3, [r1, #4]
 8002d24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d28:	20000018 	.word	0x20000018
 8002d2c:	20000078 	.word	0x20000078
 8002d30:	2000f7f0 	.word	0x2000f7f0
 8002d34:	2000f800 	.word	0x2000f800
 8002d38:	2000f3f0 	.word	0x2000f3f0

08002d3c <dmxl_all_available>:
      break;
  }
}

bool dmxl_all_available()
{
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <dmxl_all_available+0x1c>)
 8002d3e:	f103 0110 	add.w	r1, r3, #16
  for (int i = 0; i < NUM_DMXL; i++)
    if (dmxl_poll_states[i] != DPS_DONE)
 8002d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d46:	3201      	adds	r2, #1
 8002d48:	d103      	bne.n	8002d52 <dmxl_all_available+0x16>
  }
}

bool dmxl_all_available()
{
  for (int i = 0; i < NUM_DMXL; i++)
 8002d4a:	428b      	cmp	r3, r1
 8002d4c:	d1f9      	bne.n	8002d42 <dmxl_all_available+0x6>
    if (dmxl_poll_states[i] != DPS_DONE)
      return false;
  return true;
 8002d4e:	2001      	movs	r0, #1
 8002d50:	4770      	bx	lr

bool dmxl_all_available()
{
  for (int i = 0; i < NUM_DMXL; i++)
    if (dmxl_poll_states[i] != DPS_DONE)
      return false;
 8002d52:	2000      	movs	r0, #0
  return true;
}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	20000078 	.word	0x20000078

08002d5c <fan_init>:

#define PORTD_FAN_EN 15

void fan_init()
{
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8002d5c:	4905      	ldr	r1, [pc, #20]	; (8002d74 <fan_init+0x18>)
  GPIOD->MODER |= 1 << (PORTD_FAN_EN * 2); // set as output pin
 8002d5e:	4a06      	ldr	r2, [pc, #24]	; (8002d78 <fan_init+0x1c>)

#define PORTD_FAN_EN 15

void fan_init()
{
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8002d60:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002d62:	f043 0308 	orr.w	r3, r3, #8
 8002d66:	630b      	str	r3, [r1, #48]	; 0x30
  GPIOD->MODER |= 1 << (PORTD_FAN_EN * 2); // set as output pin
 8002d68:	6813      	ldr	r3, [r2, #0]
 8002d6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40020c00 	.word	0x40020c00

08002d7c <fan_on>:
}

void fan_on()
{
  GPIOD->BSRRL |= 1 << PORTD_FAN_EN;
 8002d7c:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <fan_on+0x14>)
 8002d7e:	8b13      	ldrh	r3, [r2, #24]
 8002d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	8313      	strh	r3, [r2, #24]
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40020c00 	.word	0x40020c00

08002d94 <fan_off>:
}

void fan_off()
{
  GPIOD->BSRRH |= 1 << PORTD_FAN_EN;
 8002d94:	4a04      	ldr	r2, [pc, #16]	; (8002da8 <fan_off+0x14>)
 8002d96:	8b53      	ldrh	r3, [r2, #26]
 8002d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	8353      	strh	r3, [r2, #26]
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40020c00 	.word	0x40020c00

08002dac <takktileInit>:

// GLOBAL ALL FILES VARIABLE
takktileAsyncPollState_t takktilePollState[NUM_TACTILE_PORTS] = {STATE_WAIT, STATE_WAIT, STATE_WAIT, STATE_WAIT};

void takktileInit()
{
 8002dac:	b510      	push	{r4, lr}
  printf("takktile sensors initialization...\n");
 8002dae:	482a      	ldr	r0, [pc, #168]	; (8002e58 <takktileInit+0xac>)

// GLOBAL ALL FILES VARIABLE
takktileAsyncPollState_t takktilePollState[NUM_TACTILE_PORTS] = {STATE_WAIT, STATE_WAIT, STATE_WAIT, STATE_WAIT};

void takktileInit()
{
 8002db0:	b082      	sub	sp, #8
  printf("takktile sensors initialization...\n");
 8002db2:	f000 fe97 	bl	8003ae4 <puts>

  // Reset SPI to I2C Converter
  printf("\tresetting SPI to I2C conveter...");
 8002db6:	4829      	ldr	r0, [pc, #164]	; (8002e5c <takktileInit+0xb0>)
 8002db8:	f000 fe40 	bl	8003a3c <printf>
  resetConverter();
 8002dbc:	f7fe f918 	bl	8000ff0 <resetConverter>
  printf(" OK\n");
 8002dc0:	4827      	ldr	r0, [pc, #156]	; (8002e60 <takktileInit+0xb4>)
 8002dc2:	f000 fe8f 	bl	8003ae4 <puts>

  // Configure SPI to I2C Conversion
  writeConverterRegister(SC18IS601_REGISTER_I2C_CLOCK, SC18IS601_I2C_CLOCK_369KHZ);
 8002dc6:	2105      	movs	r1, #5
 8002dc8:	2002      	movs	r0, #2
  
  // Print header, all the registers
  printf("\tSPI to I2C Converter registers: \n");
  uint8_t data[1] = {0};
 8002dca:	ac02      	add	r4, sp, #8
  printf("\tresetting SPI to I2C conveter...");
  resetConverter();
  printf(" OK\n");

  // Configure SPI to I2C Conversion
  writeConverterRegister(SC18IS601_REGISTER_I2C_CLOCK, SC18IS601_I2C_CLOCK_369KHZ);
 8002dcc:	f7fe f922 	bl	8001014 <writeConverterRegister>
  
  // Print header, all the registers
  printf("\tSPI to I2C Converter registers: \n");
 8002dd0:	4824      	ldr	r0, [pc, #144]	; (8002e64 <takktileInit+0xb8>)
 8002dd2:	f000 fe87 	bl	8003ae4 <puts>
  uint8_t data[1] = {0};
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	f804 0d04 	strb.w	r0, [r4, #-4]!
  readConverterRegister(SC18IS601_REGISTER_IO_CONFIG, data);
 8002ddc:	4621      	mov	r1, r4
 8002dde:	f7fe f977 	bl	80010d0 <readConverterRegister>
  printf("\t\t IO Config   : %#02x\n", data[0]);
 8002de2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002de6:	4820      	ldr	r0, [pc, #128]	; (8002e68 <takktileInit+0xbc>)
 8002de8:	f000 fe28 	bl	8003a3c <printf>
  readConverterRegister(SC18IS601_REGISTER_IO_STATE, data);
 8002dec:	4621      	mov	r1, r4
 8002dee:	2001      	movs	r0, #1
 8002df0:	f7fe f96e 	bl	80010d0 <readConverterRegister>
  printf("\t\t IO State    : %#02x\n", data[0]);
 8002df4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002df8:	481c      	ldr	r0, [pc, #112]	; (8002e6c <takktileInit+0xc0>)
 8002dfa:	f000 fe1f 	bl	8003a3c <printf>
  readConverterRegister(SC18IS601_REGISTER_I2C_CLOCK, data);
 8002dfe:	4621      	mov	r1, r4
 8002e00:	2002      	movs	r0, #2
 8002e02:	f7fe f965 	bl	80010d0 <readConverterRegister>
  printf("\t\t I2C Clock   : %#02x\n", data[0]);
 8002e06:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002e0a:	4819      	ldr	r0, [pc, #100]	; (8002e70 <takktileInit+0xc4>)
 8002e0c:	f000 fe16 	bl	8003a3c <printf>
  readConverterRegister(SC18IS601_REGISTER_I2C_TIMEOUT, data);
 8002e10:	4621      	mov	r1, r4
 8002e12:	2003      	movs	r0, #3
 8002e14:	f7fe f95c 	bl	80010d0 <readConverterRegister>
  printf("\t\t I2C Timeout : %#02x\n", data[0]);
 8002e18:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002e1c:	4815      	ldr	r0, [pc, #84]	; (8002e74 <takktileInit+0xc8>)
 8002e1e:	f000 fe0d 	bl	8003a3c <printf>
  readConverterRegister(SC18IS601_REGISTER_I2C_STATUS, data);
 8002e22:	4621      	mov	r1, r4
 8002e24:	2004      	movs	r0, #4
 8002e26:	f7fe f953 	bl	80010d0 <readConverterRegister>
  printf("\t\t I2C Status  : %#02x\n", data[0]);
 8002e2a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002e2e:	4812      	ldr	r0, [pc, #72]	; (8002e78 <takktileInit+0xcc>)
 8002e30:	f000 fe04 	bl	8003a3c <printf>
  readConverterRegister(SC18IS601_REGISTER_I2C_ADDR, data);
 8002e34:	4621      	mov	r1, r4
 8002e36:	2005      	movs	r0, #5
 8002e38:	f7fe f94a 	bl	80010d0 <readConverterRegister>
  printf("\t\t I2C Addr    : %#02x\n", data[0]);
 8002e3c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002e40:	480e      	ldr	r0, [pc, #56]	; (8002e7c <takktileInit+0xd0>)
 8002e42:	f000 fdfb 	bl	8003a3c <printf>

  printf("OK\r\n");
 8002e46:	480e      	ldr	r0, [pc, #56]	; (8002e80 <takktileInit+0xd4>)
 8002e48:	f000 fe4c 	bl	8003ae4 <puts>
  printf("\n");
 8002e4c:	200a      	movs	r0, #10
 8002e4e:	f000 fe0d 	bl	8003a6c <putchar>
}
 8002e52:	b002      	add	sp, #8
 8002e54:	bd10      	pop	{r4, pc}
 8002e56:	bf00      	nop
 8002e58:	0800ab70 	.word	0x0800ab70
 8002e5c:	0800ab94 	.word	0x0800ab94
 8002e60:	0800abb8 	.word	0x0800abb8
 8002e64:	0800abbc 	.word	0x0800abbc
 8002e68:	0800abe0 	.word	0x0800abe0
 8002e6c:	0800abf8 	.word	0x0800abf8
 8002e70:	0800ac10 	.word	0x0800ac10
 8002e74:	0800ac28 	.word	0x0800ac28
 8002e78:	0800ac40 	.word	0x0800ac40
 8002e7c:	0800ac58 	.word	0x0800ac58
 8002e80:	0800ac70 	.word	0x0800ac70

08002e84 <enableAllSensors>:
      break;
  }
}

uint8_t enableAllSensors(uint8_t takktileNumber)
{
 8002e84:	b500      	push	{lr}
  uint8_t result = 0;
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 8002e86:	4a15      	ldr	r2, [pc, #84]	; (8002edc <enableAllSensors+0x58>)
 8002e88:	4915      	ldr	r1, [pc, #84]	; (8002ee0 <enableAllSensors+0x5c>)
 8002e8a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8002e8e:	428b      	cmp	r3, r1
      break;
  }
}

uint8_t enableAllSensors(uint8_t takktileNumber)
{
 8002e90:	b083      	sub	sp, #12
  uint8_t result = 0;
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 8002e92:	d00b      	beq.n	8002eac <enableAllSensors+0x28>
 8002e94:	f501 4154 	add.w	r1, r1, #54272	; 0xd400
 8002e98:	428b      	cmp	r3, r1
 8002e9a:	d013      	beq.n	8002ec4 <enableAllSensors+0x40>
 8002e9c:	f5a1 415c 	sub.w	r1, r1, #56320	; 0xdc00
 8002ea0:	428b      	cmp	r3, r1
 8002ea2:	d003      	beq.n	8002eac <enableAllSensors+0x28>
  }
}

uint8_t enableAllSensors(uint8_t takktileNumber)
{
  uint8_t result = 0;
 8002ea4:	2000      	movs	r0, #0
    case SPI1_BASE:
      result = writeBytesSPI(handPorts.takktile[takktileNumber], BCAST_ENABLE_ADDR, NULL, 0, 1);  // enable all sensors  
    break;
  }
  return result;
}
 8002ea6:	b003      	add	sp, #12
 8002ea8:	f85d fb04 	ldr.w	pc, [sp], #4
  {
    case I2C1_BASE:
      result = writeBytesI2C(handPorts.takktile[takktileNumber], BCAST_ENABLE_ADDR, NULL, 0, 1);  // enable all sensors  
    break;
    case I2C3_BASE:
      result = writeBytesI2C(handPorts.takktile[takktileNumber], BCAST_ENABLE_ADDR, NULL, 0, 1);  // enable all sensors  
 8002eac:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	210c      	movs	r1, #12
 8002eb8:	4613      	mov	r3, r2
 8002eba:	f7fd fef7 	bl	8000cac <writeBytesI2C>
    case SPI1_BASE:
      result = writeBytesSPI(handPorts.takktile[takktileNumber], BCAST_ENABLE_ADDR, NULL, 0, 1);  // enable all sensors  
    break;
  }
  return result;
}
 8002ebe:	b003      	add	sp, #12
 8002ec0:	f85d fb04 	ldr.w	pc, [sp], #4
    break;
    case I2C3_BASE:
      result = writeBytesI2C(handPorts.takktile[takktileNumber], BCAST_ENABLE_ADDR, NULL, 0, 1);  // enable all sensors  
    break;
    case SPI1_BASE:
      result = writeBytesSPI(handPorts.takktile[takktileNumber], BCAST_ENABLE_ADDR, NULL, 0, 1);  // enable all sensors  
 8002ec4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002ec8:	2301      	movs	r3, #1
 8002eca:	2200      	movs	r2, #0
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	210c      	movs	r1, #12
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	f7fe f991 	bl	80011f8 <writeBytesSPI>
    break;
  }
  return result;
}
 8002ed6:	b003      	add	sp, #12
 8002ed8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002edc:	20010074 	.word	0x20010074
 8002ee0:	40005c00 	.word	0x40005c00

08002ee4 <startConversionSequence>:

uint8_t startConversionSequence(uint8_t takktileNumber)
{
 8002ee4:	b510      	push	{r4, lr}
  uint8_t result = 0;
  uint8_t data[2] = {0x12, 0x01};
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 8002ee6:	4a16      	ldr	r2, [pc, #88]	; (8002f40 <startConversionSequence+0x5c>)
}

uint8_t startConversionSequence(uint8_t takktileNumber)
{
  uint8_t result = 0;
  uint8_t data[2] = {0x12, 0x01};
 8002ee8:	4c16      	ldr	r4, [pc, #88]	; (8002f44 <startConversionSequence+0x60>)
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 8002eea:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8002eee:	4916      	ldr	r1, [pc, #88]	; (8002f48 <startConversionSequence+0x64>)
}

uint8_t startConversionSequence(uint8_t takktileNumber)
{
  uint8_t result = 0;
  uint8_t data[2] = {0x12, 0x01};
 8002ef0:	8824      	ldrh	r4, [r4, #0]
  }
  return result;
}

uint8_t startConversionSequence(uint8_t takktileNumber)
{
 8002ef2:	b084      	sub	sp, #16
  uint8_t result = 0;
  uint8_t data[2] = {0x12, 0x01};
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 8002ef4:	428b      	cmp	r3, r1
}

uint8_t startConversionSequence(uint8_t takktileNumber)
{
  uint8_t result = 0;
  uint8_t data[2] = {0x12, 0x01};
 8002ef6:	f8ad 400c 	strh.w	r4, [sp, #12]
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 8002efa:	d00a      	beq.n	8002f12 <startConversionSequence+0x2e>
 8002efc:	f501 4154 	add.w	r1, r1, #54272	; 0xd400
 8002f00:	428b      	cmp	r3, r1
 8002f02:	d011      	beq.n	8002f28 <startConversionSequence+0x44>
 8002f04:	f5a1 415c 	sub.w	r1, r1, #56320	; 0xdc00
 8002f08:	428b      	cmp	r3, r1
 8002f0a:	d002      	beq.n	8002f12 <startConversionSequence+0x2e>
  return result;
}

uint8_t startConversionSequence(uint8_t takktileNumber)
{
  uint8_t result = 0;
 8002f0c:	2000      	movs	r0, #0
    case SPI1_BASE:
      result = writeBytesSPI(handPorts.takktile[takktileNumber], BAROM_ADDR, data, 2, 1);         // send Start Conversion Sequence
    break;
  }
  return result;
}
 8002f0e:	b004      	add	sp, #16
 8002f10:	bd10      	pop	{r4, pc}
  {
    case I2C1_BASE:
      result = writeBytesI2C(handPorts.takktile[takktileNumber], BAROM_ADDR, data, 2, 1);         // send Start Conversion Sequence
    break;
    case I2C3_BASE:
      result = writeBytesI2C(handPorts.takktile[takktileNumber], BAROM_ADDR, data, 2, 1);         // send Start Conversion Sequence
 8002f12:	2301      	movs	r3, #1
 8002f14:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	aa03      	add	r2, sp, #12
 8002f1c:	21c0      	movs	r1, #192	; 0xc0
 8002f1e:	2302      	movs	r3, #2
 8002f20:	f7fd fec4 	bl	8000cac <writeBytesI2C>
    case SPI1_BASE:
      result = writeBytesSPI(handPorts.takktile[takktileNumber], BAROM_ADDR, data, 2, 1);         // send Start Conversion Sequence
    break;
  }
  return result;
}
 8002f24:	b004      	add	sp, #16
 8002f26:	bd10      	pop	{r4, pc}
    break;
    case I2C3_BASE:
      result = writeBytesI2C(handPorts.takktile[takktileNumber], BAROM_ADDR, data, 2, 1);         // send Start Conversion Sequence
    break;
    case SPI1_BASE:
      result = writeBytesSPI(handPorts.takktile[takktileNumber], BAROM_ADDR, data, 2, 1);         // send Start Conversion Sequence
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	aa03      	add	r2, sp, #12
 8002f32:	21c0      	movs	r1, #192	; 0xc0
 8002f34:	2302      	movs	r3, #2
 8002f36:	f7fe f95f 	bl	80011f8 <writeBytesSPI>
    break;
  }
  return result;
}
 8002f3a:	b004      	add	sp, #16
 8002f3c:	bd10      	pop	{r4, pc}
 8002f3e:	bf00      	nop
 8002f40:	20010074 	.word	0x20010074
 8002f44:	0800ab60 	.word	0x0800ab60
 8002f48:	40005c00 	.word	0x40005c00

08002f4c <disableAllSensors>:

uint8_t disableAllSensors(uint8_t takktileNumber)
{
 8002f4c:	b500      	push	{lr}
  uint8_t result = 0;
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 8002f4e:	4a13      	ldr	r2, [pc, #76]	; (8002f9c <disableAllSensors+0x50>)
 8002f50:	4913      	ldr	r1, [pc, #76]	; (8002fa0 <disableAllSensors+0x54>)
 8002f52:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8002f56:	428b      	cmp	r3, r1
  }
  return result;
}

uint8_t disableAllSensors(uint8_t takktileNumber)
{
 8002f58:	b083      	sub	sp, #12
  uint8_t result = 0;
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 8002f5a:	d00b      	beq.n	8002f74 <disableAllSensors+0x28>
 8002f5c:	f501 4154 	add.w	r1, r1, #54272	; 0xd400
 8002f60:	428b      	cmp	r3, r1
 8002f62:	d011      	beq.n	8002f88 <disableAllSensors+0x3c>
 8002f64:	f5a1 415c 	sub.w	r1, r1, #56320	; 0xdc00
 8002f68:	428b      	cmp	r3, r1
 8002f6a:	d003      	beq.n	8002f74 <disableAllSensors+0x28>
  return result;
}

uint8_t disableAllSensors(uint8_t takktileNumber)
{
  uint8_t result = 0;
 8002f6c:	2000      	movs	r0, #0
    case SPI1_BASE:
      result = readBytesSPI(handPorts.takktile[takktileNumber], BCAST_DISABLE_ADDR >> 1, 1, aux); // disable all sensors
    break;
  }  
  return result;
}
 8002f6e:	b003      	add	sp, #12
 8002f70:	f85d fb04 	ldr.w	pc, [sp], #4
    uint8_t aux[1] = {0};
    case I2C1_BASE:
      result = readBytesI2C(handPorts.takktile[takktileNumber], BCAST_DISABLE_ADDR >> 1, 1, aux); // disable all sensors
    break;
    case I2C3_BASE:
      result = readBytesI2C(handPorts.takktile[takktileNumber], BCAST_DISABLE_ADDR >> 1, 1, aux); // disable all sensors
 8002f74:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002f78:	2106      	movs	r1, #6
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	ab01      	add	r3, sp, #4
 8002f7e:	f7fd ffa7 	bl	8000ed0 <readBytesI2C>
    case SPI1_BASE:
      result = readBytesSPI(handPorts.takktile[takktileNumber], BCAST_DISABLE_ADDR >> 1, 1, aux); // disable all sensors
    break;
  }  
  return result;
}
 8002f82:	b003      	add	sp, #12
 8002f84:	f85d fb04 	ldr.w	pc, [sp], #4
    break;
    case I2C3_BASE:
      result = readBytesI2C(handPorts.takktile[takktileNumber], BCAST_DISABLE_ADDR >> 1, 1, aux); // disable all sensors
    break;
    case SPI1_BASE:
      result = readBytesSPI(handPorts.takktile[takktileNumber], BCAST_DISABLE_ADDR >> 1, 1, aux); // disable all sensors
 8002f88:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002f8c:	2106      	movs	r1, #6
 8002f8e:	2201      	movs	r2, #1
 8002f90:	ab01      	add	r3, sp, #4
 8002f92:	f7fe f9a9 	bl	80012e8 <readBytesSPI>
    break;
  }  
  return result;
}
 8002f96:	b003      	add	sp, #12
 8002f98:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f9c:	20010074 	.word	0x20010074
 8002fa0:	40005c00 	.word	0x40005c00

08002fa4 <enableSensor>:

uint8_t enableSensor(uint8_t takktileNumber, uint8_t sensorIndex)
{
 8002fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t result = 0;
  uint8_t addresses[9] = {0x00, 0x02, 0x04, 0x06, 0x08, 0x10, 0x12, 0x14, 0x16};
 8002fa6:	4b1c      	ldr	r3, [pc, #112]	; (8003018 <enableSensor+0x74>)
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 8002fa8:	4d1c      	ldr	r5, [pc, #112]	; (800301c <enableSensor+0x78>)
}

uint8_t enableSensor(uint8_t takktileNumber, uint8_t sensorIndex)
{
  uint8_t result = 0;
  uint8_t addresses[9] = {0x00, 0x02, 0x04, 0x06, 0x08, 0x10, 0x12, 0x14, 0x16};
 8002faa:	f893 e008 	ldrb.w	lr, [r3, #8]
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 8002fae:	4f1c      	ldr	r7, [pc, #112]	; (8003020 <enableSensor+0x7c>)
  }  
  return result;
}

uint8_t enableSensor(uint8_t takktileNumber, uint8_t sensorIndex)
{
 8002fb0:	4606      	mov	r6, r0
 8002fb2:	b087      	sub	sp, #28
  uint8_t result = 0;
  uint8_t addresses[9] = {0x00, 0x02, 0x04, 0x06, 0x08, 0x10, 0x12, 0x14, 0x16};
 8002fb4:	6818      	ldr	r0, [r3, #0]
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 8002fb6:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
  }  
  return result;
}

uint8_t enableSensor(uint8_t takktileNumber, uint8_t sensorIndex)
{
 8002fba:	460a      	mov	r2, r1
  uint8_t result = 0;
  uint8_t addresses[9] = {0x00, 0x02, 0x04, 0x06, 0x08, 0x10, 0x12, 0x14, 0x16};
 8002fbc:	6859      	ldr	r1, [r3, #4]
 8002fbe:	ab03      	add	r3, sp, #12
 8002fc0:	c303      	stmia	r3!, {r0, r1}
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 8002fc2:	42bc      	cmp	r4, r7
}

uint8_t enableSensor(uint8_t takktileNumber, uint8_t sensorIndex)
{
  uint8_t result = 0;
  uint8_t addresses[9] = {0x00, 0x02, 0x04, 0x06, 0x08, 0x10, 0x12, 0x14, 0x16};
 8002fc4:	f883 e000 	strb.w	lr, [r3]
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 8002fc8:	d009      	beq.n	8002fde <enableSensor+0x3a>
 8002fca:	4b16      	ldr	r3, [pc, #88]	; (8003024 <enableSensor+0x80>)
 8002fcc:	429c      	cmp	r4, r3
 8002fce:	d014      	beq.n	8002ffa <enableSensor+0x56>
 8002fd0:	f5a3 435c 	sub.w	r3, r3, #56320	; 0xdc00
 8002fd4:	429c      	cmp	r4, r3
 8002fd6:	d002      	beq.n	8002fde <enableSensor+0x3a>
  return result;
}

uint8_t enableSensor(uint8_t takktileNumber, uint8_t sensorIndex)
{
  uint8_t result = 0;
 8002fd8:	2000      	movs	r0, #0
    case SPI1_BASE:
      result = writeBytesSPI(handPorts.takktile[takktileNumber], addresses[sensorIndex], NULL, 0, 1); // enable sensor i
    break;
  }
  return result;
}
 8002fda:	b007      	add	sp, #28
 8002fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    case I2C1_BASE:
      result = writeBytesI2C(handPorts.takktile[takktileNumber], addresses[sensorIndex], NULL, 0, 1); // enable sensor i
    break;
    case I2C3_BASE:
      result = writeBytesI2C(handPorts.takktile[takktileNumber], addresses[sensorIndex], NULL, 0, 1); // enable sensor i
 8002fde:	ab06      	add	r3, sp, #24
 8002fe0:	441a      	add	r2, r3
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8002fe8:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	f7fd fe5b 	bl	8000cac <writeBytesI2C>
    case SPI1_BASE:
      result = writeBytesSPI(handPorts.takktile[takktileNumber], addresses[sensorIndex], NULL, 0, 1); // enable sensor i
    break;
  }
  return result;
}
 8002ff6:	b007      	add	sp, #28
 8002ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    break;
    case I2C3_BASE:
      result = writeBytesI2C(handPorts.takktile[takktileNumber], addresses[sensorIndex], NULL, 0, 1); // enable sensor i
    break;
    case SPI1_BASE:
      result = writeBytesSPI(handPorts.takktile[takktileNumber], addresses[sensorIndex], NULL, 0, 1); // enable sensor i
 8002ffa:	ab06      	add	r3, sp, #24
 8002ffc:	441a      	add	r2, r3
 8002ffe:	2301      	movs	r3, #1
 8003000:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8003004:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	2200      	movs	r2, #0
 800300c:	4613      	mov	r3, r2
 800300e:	f7fe f8f3 	bl	80011f8 <writeBytesSPI>
    break;
  }
  return result;
}
 8003012:	b007      	add	sp, #28
 8003014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003016:	bf00      	nop
 8003018:	0800ab64 	.word	0x0800ab64
 800301c:	20010074 	.word	0x20010074
 8003020:	40005c00 	.word	0x40005c00
 8003024:	40013000 	.word	0x40013000

08003028 <setRegister>:

uint8_t setRegister(uint8_t takktileNumber)
{
 8003028:	b510      	push	{r4, lr}
  uint8_t result = 0;
  uint8_t msg[1] = {0x00};
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 800302a:	4914      	ldr	r1, [pc, #80]	; (800307c <setRegister+0x54>)
 800302c:	4c14      	ldr	r4, [pc, #80]	; (8003080 <setRegister+0x58>)
 800302e:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
  }
  return result;
}

uint8_t setRegister(uint8_t takktileNumber)
{
 8003032:	b084      	sub	sp, #16
  uint8_t result = 0;
  uint8_t msg[1] = {0x00};
 8003034:	2300      	movs	r3, #0
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 8003036:	42a2      	cmp	r2, r4
}

uint8_t setRegister(uint8_t takktileNumber)
{
  uint8_t result = 0;
  uint8_t msg[1] = {0x00};
 8003038:	f88d 300c 	strb.w	r3, [sp, #12]
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 800303c:	d00a      	beq.n	8003054 <setRegister+0x2c>
 800303e:	f504 4454 	add.w	r4, r4, #54272	; 0xd400
 8003042:	42a2      	cmp	r2, r4
 8003044:	d010      	beq.n	8003068 <setRegister+0x40>
 8003046:	f5a4 445c 	sub.w	r4, r4, #56320	; 0xdc00
 800304a:	42a2      	cmp	r2, r4
 800304c:	d002      	beq.n	8003054 <setRegister+0x2c>
  return result;
}

uint8_t setRegister(uint8_t takktileNumber)
{
  uint8_t result = 0;
 800304e:	4618      	mov	r0, r3
    case SPI1_BASE:
      result = writeBytesSPI(handPorts.takktile[takktileNumber], BAROM_ADDR, msg, 1, 1);       // choose register 0x00
    break;
  }
  return result;
}
 8003050:	b004      	add	sp, #16
 8003052:	bd10      	pop	{r4, pc}
  {
    case I2C1_BASE:
      result = writeBytesI2C(handPorts.takktile[takktileNumber], BAROM_ADDR, msg, 1, 1);       // choose register 0x00
    break;
    case I2C3_BASE:
      result = writeBytesI2C(handPorts.takktile[takktileNumber], BAROM_ADDR, msg, 1, 1);       // choose register 0x00
 8003054:	2301      	movs	r3, #1
 8003056:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	21c0      	movs	r1, #192	; 0xc0
 800305e:	aa03      	add	r2, sp, #12
 8003060:	f7fd fe24 	bl	8000cac <writeBytesI2C>
    case SPI1_BASE:
      result = writeBytesSPI(handPorts.takktile[takktileNumber], BAROM_ADDR, msg, 1, 1);       // choose register 0x00
    break;
  }
  return result;
}
 8003064:	b004      	add	sp, #16
 8003066:	bd10      	pop	{r4, pc}
    break;
    case I2C3_BASE:
      result = writeBytesI2C(handPorts.takktile[takktileNumber], BAROM_ADDR, msg, 1, 1);       // choose register 0x00
    break;
    case SPI1_BASE:
      result = writeBytesSPI(handPorts.takktile[takktileNumber], BAROM_ADDR, msg, 1, 1);       // choose register 0x00
 8003068:	2301      	movs	r3, #1
 800306a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	21c0      	movs	r1, #192	; 0xc0
 8003072:	aa03      	add	r2, sp, #12
 8003074:	f7fe f8c0 	bl	80011f8 <writeBytesSPI>
    break;
  }
  return result;
}
 8003078:	b004      	add	sp, #16
 800307a:	bd10      	pop	{r4, pc}
 800307c:	20010074 	.word	0x20010074
 8003080:	40005c00 	.word	0x40005c00

08003084 <readValues>:

uint8_t readValues(uint8_t takktileNumber, uint8_t sensorIndex)
{
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	4604      	mov	r4, r0
  uint8_t result = 0;
  uint8_t tp;
  uint8_t index;
  uint8_t values[4] = {0, 0, 0, 0};
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 8003088:	4832      	ldr	r0, [pc, #200]	; (8003154 <readValues+0xd0>)
 800308a:	4d33      	ldr	r5, [pc, #204]	; (8003158 <readValues+0xd4>)
 800308c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
  }
  return result;
}

uint8_t readValues(uint8_t takktileNumber, uint8_t sensorIndex)
{
 8003090:	b082      	sub	sp, #8
  uint8_t result = 0;
  uint8_t tp;
  uint8_t index;
  uint8_t values[4] = {0, 0, 0, 0};
 8003092:	2300      	movs	r3, #0
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 8003094:	42aa      	cmp	r2, r5
  }
  return result;
}

uint8_t readValues(uint8_t takktileNumber, uint8_t sensorIndex)
{
 8003096:	460e      	mov	r6, r1
  uint8_t result = 0;
  uint8_t tp;
  uint8_t index;
  uint8_t values[4] = {0, 0, 0, 0};
 8003098:	f88d 3004 	strb.w	r3, [sp, #4]
 800309c:	f88d 3005 	strb.w	r3, [sp, #5]
 80030a0:	f88d 3006 	strb.w	r3, [sp, #6]
 80030a4:	f88d 3007 	strb.w	r3, [sp, #7]
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 80030a8:	d024      	beq.n	80030f4 <readValues+0x70>
 80030aa:	492c      	ldr	r1, [pc, #176]	; (800315c <readValues+0xd8>)
 80030ac:	428a      	cmp	r2, r1
 80030ae:	d044      	beq.n	800313a <readValues+0xb6>
 80030b0:	f5a1 415c 	sub.w	r1, r1, #56320	; 0xdc00
 80030b4:	428a      	cmp	r2, r1
 80030b6:	d01d      	beq.n	80030f4 <readValues+0x70>
    break;
    case SPI1_BASE:
      result = readBytesSPI(handPorts.takktile[takktileNumber], BAROM_ADDR >> 1, 4, values);      // read 4 bytes
    break;
  }
  if (takktileNumber == 2)
 80030b8:	2c02      	cmp	r4, #2
{
  uint8_t result = 0;
  uint8_t tp;
  uint8_t index;
  uint8_t values[4] = {0, 0, 0, 0};
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 80030ba:	461a      	mov	r2, r3
 80030bc:	4619      	mov	r1, r3
  return result;
}

uint8_t readValues(uint8_t takktileNumber, uint8_t sensorIndex)
{
  uint8_t result = 0;
 80030be:	461d      	mov	r5, r3
    break;
    case SPI1_BASE:
      result = readBytesSPI(handPorts.takktile[takktileNumber], BAROM_ADDR >> 1, 4, values);      // read 4 bytes
    break;
  }
  if (takktileNumber == 2)
 80030c0:	d044      	beq.n	800314c <readValues+0xc8>
    tp = 1;
  else if (takktileNumber == 0)
 80030c2:	bbac      	cbnz	r4, 8003130 <readValues+0xac>
    tp = 0;
  else if (takktileNumber == 1)
    tp = 2;
  else
    tp = 3;
  index = tp * SENSORS_PER_FINGER + sensorIndex;
 80030c4:	4434      	add	r4, r6
  handState.takktile_pressures[index] = 510 - (values[0]<200 ? ((uint16_t)values[0] + 255) : ((uint16_t)values[0]));
 80030c6:	29c7      	cmp	r1, #199	; 0xc7
 80030c8:	b2e4      	uxtb	r4, r4
 80030ca:	d92d      	bls.n	8003128 <readValues+0xa4>
 80030cc:	f5c2 72ff 	rsb	r2, r2, #510	; 0x1fe
 80030d0:	b291      	uxth	r1, r2
 80030d2:	4a23      	ldr	r2, [pc, #140]	; (8003160 <readValues+0xdc>)
 80030d4:	1d20      	adds	r0, r4, #4
  handState.takktile_temperatures[index] = ((uint16_t)values[2] << 2) | (values[3] >> 6);
 80030d6:	3428      	adds	r4, #40	; 0x28
  else if (takktileNumber == 1)
    tp = 2;
  else
    tp = 3;
  index = tp * SENSORS_PER_FINGER + sensorIndex;
  handState.takktile_pressures[index] = 510 - (values[0]<200 ? ((uint16_t)values[0] + 255) : ((uint16_t)values[0]));
 80030d8:	f832 6010 	ldrh.w	r6, [r2, r0, lsl #1]
 80030dc:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
  handState.takktile_temperatures[index] = ((uint16_t)values[2] << 2) | (values[3] >> 6);
 80030e0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  // printf("%3d ", handState.takktile_pressures[index]);
  udelay(SLEEP_TIME);
 80030e4:	2000      	movs	r0, #0
    tp = 2;
  else
    tp = 3;
  index = tp * SENSORS_PER_FINGER + sensorIndex;
  handState.takktile_pressures[index] = 510 - (values[0]<200 ? ((uint16_t)values[0] + 255) : ((uint16_t)values[0]));
  handState.takktile_temperatures[index] = ((uint16_t)values[2] << 2) | (values[3] >> 6);
 80030e6:	88a2      	ldrh	r2, [r4, #4]
 80030e8:	80a3      	strh	r3, [r4, #4]
  // printf("%3d ", handState.takktile_pressures[index]);
  udelay(SLEEP_TIME);
 80030ea:	f7fe ffc7 	bl	800207c <udelay>
  return result;
}
 80030ee:	4628      	mov	r0, r5
 80030f0:	b002      	add	sp, #8
 80030f2:	bd70      	pop	{r4, r5, r6, pc}
  {
    case I2C1_BASE:
      result = readBytesI2C(handPorts.takktile[takktileNumber], BAROM_ADDR >> 1, 4, values);      // read 4 bytes
    break;
    case I2C3_BASE:
      result = readBytesI2C(handPorts.takktile[takktileNumber], BAROM_ADDR >> 1, 4, values);      // read 4 bytes
 80030f4:	2204      	movs	r2, #4
 80030f6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80030fa:	2160      	movs	r1, #96	; 0x60
 80030fc:	eb0d 0302 	add.w	r3, sp, r2
 8003100:	f7fd fee6 	bl	8000ed0 <readBytesI2C>
 8003104:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003108:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800310c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8003110:	099b      	lsrs	r3, r3, #6
    break;
    case SPI1_BASE:
      result = readBytesSPI(handPorts.takktile[takktileNumber], BAROM_ADDR >> 1, 4, values);      // read 4 bytes
    break;
  }
  if (takktileNumber == 2)
 8003112:	2c02      	cmp	r4, #2
 8003114:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
    break;
    case I2C3_BASE:
      result = readBytesI2C(handPorts.takktile[takktileNumber], BAROM_ADDR >> 1, 4, values);      // read 4 bytes
    break;
    case SPI1_BASE:
      result = readBytesSPI(handPorts.takktile[takktileNumber], BAROM_ADDR >> 1, 4, values);      // read 4 bytes
 8003118:	4605      	mov	r5, r0
 800311a:	b28a      	uxth	r2, r1
    break;
  }
  if (takktileNumber == 2)
 800311c:	d1d1      	bne.n	80030c2 <readValues+0x3e>
 800311e:	2409      	movs	r4, #9
    tp = 0;
  else if (takktileNumber == 1)
    tp = 2;
  else
    tp = 3;
  index = tp * SENSORS_PER_FINGER + sensorIndex;
 8003120:	4434      	add	r4, r6
  handState.takktile_pressures[index] = 510 - (values[0]<200 ? ((uint16_t)values[0] + 255) : ((uint16_t)values[0]));
 8003122:	29c7      	cmp	r1, #199	; 0xc7
 8003124:	b2e4      	uxtb	r4, r4
 8003126:	d8d1      	bhi.n	80030cc <readValues+0x48>
 8003128:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800312c:	b291      	uxth	r1, r2
 800312e:	e7d0      	b.n	80030d2 <readValues+0x4e>
  }
  if (takktileNumber == 2)
    tp = 1;
  else if (takktileNumber == 0)
    tp = 0;
  else if (takktileNumber == 1)
 8003130:	2c01      	cmp	r4, #1
 8003132:	bf0c      	ite	eq
 8003134:	2412      	moveq	r4, #18
 8003136:	241b      	movne	r4, #27
 8003138:	e7c4      	b.n	80030c4 <readValues+0x40>
    break;
    case I2C3_BASE:
      result = readBytesI2C(handPorts.takktile[takktileNumber], BAROM_ADDR >> 1, 4, values);      // read 4 bytes
    break;
    case SPI1_BASE:
      result = readBytesSPI(handPorts.takktile[takktileNumber], BAROM_ADDR >> 1, 4, values);      // read 4 bytes
 800313a:	2204      	movs	r2, #4
 800313c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8003140:	2160      	movs	r1, #96	; 0x60
 8003142:	eb0d 0302 	add.w	r3, sp, r2
 8003146:	f7fe f8cf 	bl	80012e8 <readBytesSPI>
 800314a:	e7db      	b.n	8003104 <readValues+0x80>
    tp = 0;
  else if (takktileNumber == 1)
    tp = 2;
  else
    tp = 3;
  index = tp * SENSORS_PER_FINGER + sensorIndex;
 800314c:	f106 0409 	add.w	r4, r6, #9
  handState.takktile_pressures[index] = 510 - (values[0]<200 ? ((uint16_t)values[0] + 255) : ((uint16_t)values[0]));
 8003150:	b2e4      	uxtb	r4, r4
 8003152:	e7e9      	b.n	8003128 <readValues+0xa4>
 8003154:	20010074 	.word	0x20010074
 8003158:	40005c00 	.word	0x40005c00
 800315c:	40013000 	.word	0x40013000
 8003160:	200101fc 	.word	0x200101fc

08003164 <disableSensor>:
  udelay(SLEEP_TIME);
  return result;
}

uint8_t disableSensor(uint8_t takktileNumber, uint8_t sensorIndex)
{
 8003164:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t result = 0;
  uint8_t addresses[9] = {0x00, 0x02, 0x04, 0x06, 0x08, 0x10, 0x12, 0x14, 0x16};
 8003166:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <disableSensor+0x74>)
  uint8_t aux[1] = {0};
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 8003168:	4d1c      	ldr	r5, [pc, #112]	; (80031dc <disableSensor+0x78>)
}

uint8_t disableSensor(uint8_t takktileNumber, uint8_t sensorIndex)
{
  uint8_t result = 0;
  uint8_t addresses[9] = {0x00, 0x02, 0x04, 0x06, 0x08, 0x10, 0x12, 0x14, 0x16};
 800316a:	f893 e008 	ldrb.w	lr, [r3, #8]
  uint8_t aux[1] = {0};
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 800316e:	4f1c      	ldr	r7, [pc, #112]	; (80031e0 <disableSensor+0x7c>)
  udelay(SLEEP_TIME);
  return result;
}

uint8_t disableSensor(uint8_t takktileNumber, uint8_t sensorIndex)
{
 8003170:	b085      	sub	sp, #20
 8003172:	4606      	mov	r6, r0
 8003174:	460a      	mov	r2, r1
  uint8_t result = 0;
  uint8_t addresses[9] = {0x00, 0x02, 0x04, 0x06, 0x08, 0x10, 0x12, 0x14, 0x16};
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	6859      	ldr	r1, [r3, #4]
  uint8_t aux[1] = {0};
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 800317a:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
}

uint8_t disableSensor(uint8_t takktileNumber, uint8_t sensorIndex)
{
  uint8_t result = 0;
  uint8_t addresses[9] = {0x00, 0x02, 0x04, 0x06, 0x08, 0x10, 0x12, 0x14, 0x16};
 800317e:	ab01      	add	r3, sp, #4
 8003180:	c303      	stmia	r3!, {r0, r1}
  uint8_t aux[1] = {0};
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 8003182:	42bc      	cmp	r4, r7

uint8_t disableSensor(uint8_t takktileNumber, uint8_t sensorIndex)
{
  uint8_t result = 0;
  uint8_t addresses[9] = {0x00, 0x02, 0x04, 0x06, 0x08, 0x10, 0x12, 0x14, 0x16};
  uint8_t aux[1] = {0};
 8003184:	f04f 0000 	mov.w	r0, #0
}

uint8_t disableSensor(uint8_t takktileNumber, uint8_t sensorIndex)
{
  uint8_t result = 0;
  uint8_t addresses[9] = {0x00, 0x02, 0x04, 0x06, 0x08, 0x10, 0x12, 0x14, 0x16};
 8003188:	f883 e000 	strb.w	lr, [r3]
  uint8_t aux[1] = {0};
 800318c:	f88d 0000 	strb.w	r0, [sp]
  switch ((uint32_t) handPorts.takktile[takktileNumber])
 8003190:	d008      	beq.n	80031a4 <disableSensor+0x40>
 8003192:	4b14      	ldr	r3, [pc, #80]	; (80031e4 <disableSensor+0x80>)
 8003194:	429c      	cmp	r4, r3
 8003196:	d012      	beq.n	80031be <disableSensor+0x5a>
 8003198:	f5a3 435c 	sub.w	r3, r3, #56320	; 0xdc00
 800319c:	429c      	cmp	r4, r3
 800319e:	d001      	beq.n	80031a4 <disableSensor+0x40>
    case SPI1_BASE:
      result = readBytesSPI(handPorts.takktile[takktileNumber], addresses[sensorIndex] >> 1, 1, aux);
    break;
  }
  return result;
}
 80031a0:	b005      	add	sp, #20
 80031a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    case I2C1_BASE:
      result = readBytesI2C(handPorts.takktile[takktileNumber], addresses[sensorIndex] >> 1, 1, aux);
    break;
    case I2C3_BASE:
      result = readBytesI2C(handPorts.takktile[takktileNumber], addresses[sensorIndex] >> 1, 1, aux);
 80031a4:	ab04      	add	r3, sp, #16
 80031a6:	441a      	add	r2, r3
 80031a8:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 80031ac:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 80031b0:	466b      	mov	r3, sp
 80031b2:	0849      	lsrs	r1, r1, #1
 80031b4:	2201      	movs	r2, #1
 80031b6:	f7fd fe8b 	bl	8000ed0 <readBytesI2C>
    case SPI1_BASE:
      result = readBytesSPI(handPorts.takktile[takktileNumber], addresses[sensorIndex] >> 1, 1, aux);
    break;
  }
  return result;
}
 80031ba:	b005      	add	sp, #20
 80031bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    break;
    case I2C3_BASE:
      result = readBytesI2C(handPorts.takktile[takktileNumber], addresses[sensorIndex] >> 1, 1, aux);
    break;
    case SPI1_BASE:
      result = readBytesSPI(handPorts.takktile[takktileNumber], addresses[sensorIndex] >> 1, 1, aux);
 80031be:	ab04      	add	r3, sp, #16
 80031c0:	441a      	add	r2, r3
 80031c2:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 80031c6:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 80031ca:	466b      	mov	r3, sp
 80031cc:	0849      	lsrs	r1, r1, #1
 80031ce:	2201      	movs	r2, #1
 80031d0:	f7fe f88a 	bl	80012e8 <readBytesSPI>
    break;
  }
  return result;
}
 80031d4:	b005      	add	sp, #20
 80031d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031d8:	0800ab64 	.word	0x0800ab64
 80031dc:	20010074 	.word	0x20010074
 80031e0:	40005c00 	.word	0x40005c00
 80031e4:	40013000 	.word	0x40013000

080031e8 <takktile_poll_nonblocking_tick>:
  static uint8_t sensorNumber[NUM_FINGERS] = {0, 0, 0};
  uint8_t sensorNumberAux;
  uint8_t sensorInMemory;
  uint8_t initialTime[3] = {0}; // for the 3ms delay
  const uint_fast8_t tp = takktile_port; // save typing
  if (tp >= NUM_TACTILE_PORTS)
 80031e8:	2803      	cmp	r0, #3
 80031ea:	d826      	bhi.n	800323a <takktile_poll_nonblocking_tick+0x52>
  //     errCount[takktile_port]++;
  //   }
  // }

  uint8_t takktileNumber;
  if (takktile_port == 2)
 80031ec:	2802      	cmp	r0, #2
  printf("OK\r\n");
  printf("\n");
}

void takktile_poll_nonblocking_tick(const uint8_t takktile_port)
{
 80031ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  //     errCount[takktile_port]++;
  //   }
  // }

  uint8_t takktileNumber;
  if (takktile_port == 2)
 80031f2:	d026      	beq.n	8003242 <takktile_poll_nonblocking_tick+0x5a>
    takktileNumber = 1;
  else if (takktile_port == 0)
 80031f4:	b310      	cbz	r0, 800323c <takktile_poll_nonblocking_tick+0x54>
    takktileNumber = 0;
  else if (takktile_port == 1)
 80031f6:	2801      	cmp	r0, #1
 80031f8:	f000 8085 	beq.w	8003306 <takktile_poll_nonblocking_tick+0x11e>
 80031fc:	2603      	movs	r6, #3
    takktileNumber = 2;
  else
    takktileNumber = 3;
 80031fe:	4631      	mov	r1, r6
  sensorNumberAux = sensorNumber[takktileNumber];
 8003200:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8003340 <takktile_poll_nonblocking_tick+0x158>
  sensorInMemory = takktile_port * SENSORS_PER_FINGER + sensorNumberAux;

  uint8_t result = 0;
  switch (*state)
 8003204:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8003344 <takktile_poll_nonblocking_tick+0x15c>
    takktileNumber = 0;
  else if (takktile_port == 1)
    takktileNumber = 2;
  else
    takktileNumber = 3;
  sensorNumberAux = sensorNumber[takktileNumber];
 8003208:	f819 7006 	ldrb.w	r7, [r9, r6]
  sensorInMemory = takktile_port * SENSORS_PER_FINGER + sensorNumberAux;

  uint8_t result = 0;
  switch (*state)
 800320c:	f858 2020 	ldr.w	r2, [r8, r0, lsl #2]
  else if (takktile_port == 1)
    takktileNumber = 2;
  else
    takktileNumber = 3;
  sensorNumberAux = sensorNumber[takktileNumber];
  sensorInMemory = takktile_port * SENSORS_PER_FINGER + sensorNumberAux;
 8003210:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8003214:	443b      	add	r3, r7

  uint8_t result = 0;
  switch (*state)
 8003216:	2a03      	cmp	r2, #3
 8003218:	4604      	mov	r4, r0
  else if (takktile_port == 1)
    takktileNumber = 2;
  else
    takktileNumber = 3;
  sensorNumberAux = sensorNumber[takktileNumber];
  sensorInMemory = takktile_port * SENSORS_PER_FINGER + sensorNumberAux;
 800321a:	b2dd      	uxtb	r5, r3

  uint8_t result = 0;
  switch (*state)
 800321c:	d064      	beq.n	80032e8 <takktile_poll_nonblocking_tick+0x100>
 800321e:	d913      	bls.n	8003248 <takktile_poll_nonblocking_tick+0x60>
 8003220:	2a05      	cmp	r2, #5
 8003222:	d04a      	beq.n	80032ba <takktile_poll_nonblocking_tick+0xd2>
 8003224:	d357      	bcc.n	80032d6 <takktile_poll_nonblocking_tick+0xee>
 8003226:	2a06      	cmp	r2, #6
 8003228:	d01c      	beq.n	8003264 <takktile_poll_nonblocking_tick+0x7c>
 800322a:	3201      	adds	r2, #1
 800322c:	d003      	beq.n	8003236 <takktile_poll_nonblocking_tick+0x4e>
        }
      break;
    case STATE_WAIT:    
      break;
    default:
      *state = STATE_WAIT;
 800322e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003232:	f848 3020 	str.w	r3, [r8, r0, lsl #2]
 8003236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800323a:	4770      	bx	lr
 800323c:	4606      	mov	r6, r0

  uint8_t takktileNumber;
  if (takktile_port == 2)
    takktileNumber = 1;
  else if (takktile_port == 0)
    takktileNumber = 0;
 800323e:	4601      	mov	r1, r0
 8003240:	e7de      	b.n	8003200 <takktile_poll_nonblocking_tick+0x18>
 8003242:	2601      	movs	r6, #1
  //   }
  // }

  uint8_t takktileNumber;
  if (takktile_port == 2)
    takktileNumber = 1;
 8003244:	4631      	mov	r1, r6
 8003246:	e7db      	b.n	8003200 <takktile_poll_nonblocking_tick+0x18>
    takktileNumber = 3;
  sensorNumberAux = sensorNumber[takktileNumber];
  sensorInMemory = takktile_port * SENSORS_PER_FINGER + sensorNumberAux;

  uint8_t result = 0;
  switch (*state)
 8003248:	2a01      	cmp	r2, #1
 800324a:	d029      	beq.n	80032a0 <takktile_poll_nonblocking_tick+0xb8>
 800324c:	d81b      	bhi.n	8003286 <takktile_poll_nonblocking_tick+0x9e>
  {
    case STATE_ENABLE_ALL_SENSORS:
        result = enableAllSensors(takktileNumber);
 800324e:	4608      	mov	r0, r1
 8003250:	f7ff fe18 	bl	8002e84 <enableAllSensors>
        if (result)
 8003254:	b198      	cbz	r0, 800327e <takktile_poll_nonblocking_tick+0x96>
        {
          *state = STATE_START_CONVERSION;
          handStatus.finger[takktileNumber] = 1;
 8003256:	4a39      	ldr	r2, [pc, #228]	; (800333c <takktile_poll_nonblocking_tick+0x154>)
  {
    case STATE_ENABLE_ALL_SENSORS:
        result = enableAllSensors(takktileNumber);
        if (result)
        {
          *state = STATE_START_CONVERSION;
 8003258:	2301      	movs	r3, #1
          handStatus.finger[takktileNumber] = 1;
 800325a:	5593      	strb	r3, [r2, r6]
  {
    case STATE_ENABLE_ALL_SENSORS:
        result = enableAllSensors(takktileNumber);
        if (result)
        {
          *state = STATE_START_CONVERSION;
 800325c:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 8003260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        {
          handStatus.takktileSensor[sensorInMemory] = 0; 
        }
      break;
    case STATE_DISABLE_SENSOR:
        result = disableSensor(takktileNumber, sensorNumberAux);
 8003264:	4608      	mov	r0, r1
 8003266:	4639      	mov	r1, r7
 8003268:	f7ff ff7c 	bl	8003164 <disableSensor>
        sensorNumber[takktileNumber]++;
 800326c:	f819 3006 	ldrb.w	r3, [r9, r6]
        if (sensorNumberAux + 2 > SENSORS_PER_FINGER)
 8003270:	2f07      	cmp	r7, #7
          handStatus.takktileSensor[sensorInMemory] = 0; 
        }
      break;
    case STATE_DISABLE_SENSOR:
        result = disableSensor(takktileNumber, sensorNumberAux);
        sensorNumber[takktileNumber]++;
 8003272:	f103 0301 	add.w	r3, r3, #1
 8003276:	f809 3006 	strb.w	r3, [r9, r6]
        if (sensorNumberAux + 2 > SENSORS_PER_FINGER)
 800327a:	dc4e      	bgt.n	800331a <takktile_poll_nonblocking_tick+0x132>
        {
          *state = STATE_WAIT;
          sensorNumber[takktileNumber] = 0;
          handStatus.finger[takktileNumber] = 1;
        }
        else if (result)
 800327c:	b940      	cbnz	r0, 8003290 <takktile_poll_nonblocking_tick+0xa8>
          *state = STATE_ENABLE_SENSOR;
          handStatus.finger[takktileNumber] = 1;
        }
        else
        {
          handStatus.finger[takktileNumber] = 0;
 800327e:	4b2f      	ldr	r3, [pc, #188]	; (800333c <takktile_poll_nonblocking_tick+0x154>)
 8003280:	5598      	strb	r0, [r3, r6]
 8003282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          *state = STATE_DISABLE_ALL_SENSORS;
          initialTime[takktileNumber] = SYSTIME; // start the timer
        }
      break;
    case STATE_DISABLE_ALL_SENSORS:
        if (disableAllSensors(takktileNumber))
 8003286:	4608      	mov	r0, r1
 8003288:	f7ff fe60 	bl	8002f4c <disableAllSensors>
 800328c:	2800      	cmp	r0, #0
 800328e:	d0f6      	beq.n	800327e <takktile_poll_nonblocking_tick+0x96>
          handStatus.finger[takktileNumber] = 1;
        }
        else if (result)
        {
          *state = STATE_ENABLE_SENSOR;
          handStatus.finger[takktileNumber] = 1;
 8003290:	4a2a      	ldr	r2, [pc, #168]	; (800333c <takktile_poll_nonblocking_tick+0x154>)
 8003292:	2101      	movs	r1, #1
 8003294:	5591      	strb	r1, [r2, r6]
          sensorNumber[takktileNumber] = 0;
          handStatus.finger[takktileNumber] = 1;
        }
        else if (result)
        {
          *state = STATE_ENABLE_SENSOR;
 8003296:	2303      	movs	r3, #3
 8003298:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 800329c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        {
          handStatus.finger[takktileNumber] = 0;
        }
      break;
    case STATE_START_CONVERSION:
        if (startConversionSequence(takktileNumber))
 80032a0:	4608      	mov	r0, r1
 80032a2:	f7ff fe1f 	bl	8002ee4 <startConversionSequence>
 80032a6:	2800      	cmp	r0, #0
 80032a8:	d0c5      	beq.n	8003236 <takktile_poll_nonblocking_tick+0x4e>
        {
          *state = STATE_DISABLE_ALL_SENSORS;
          initialTime[takktileNumber] = SYSTIME; // start the timer
 80032aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
        }
      break;
    case STATE_START_CONVERSION:
        if (startConversionSequence(takktileNumber))
        {
          *state = STATE_DISABLE_ALL_SENSORS;
 80032ae:	2302      	movs	r3, #2
          initialTime[takktileNumber] = SYSTIME; // start the timer
 80032b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
        }
      break;
    case STATE_START_CONVERSION:
        if (startConversionSequence(takktileNumber))
        {
          *state = STATE_DISABLE_ALL_SENSORS;
 80032b2:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 80032b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        {
          handStatus.takktileSensor[sensorInMemory] = 0; 
        }
      break;
    case STATE_READ_VALUES:
        if (readValues(takktileNumber, sensorNumberAux))
 80032ba:	4608      	mov	r0, r1
 80032bc:	4639      	mov	r1, r7
 80032be:	f7ff fee1 	bl	8003084 <readValues>
        {
          *state = STATE_DISABLE_SENSOR;
          handStatus.takktileSensor[sensorInMemory] = 1;
 80032c2:	4b1e      	ldr	r3, [pc, #120]	; (800333c <takktile_poll_nonblocking_tick+0x154>)
 80032c4:	442b      	add	r3, r5
        {
          handStatus.takktileSensor[sensorInMemory] = 0; 
        }
      break;
    case STATE_READ_VALUES:
        if (readValues(takktileNumber, sensorNumberAux))
 80032c6:	b160      	cbz	r0, 80032e2 <takktile_poll_nonblocking_tick+0xfa>
        {
          *state = STATE_DISABLE_SENSOR;
          handStatus.takktileSensor[sensorInMemory] = 1;
 80032c8:	2101      	movs	r1, #1
        }
      break;
    case STATE_READ_VALUES:
        if (readValues(takktileNumber, sensorNumberAux))
        {
          *state = STATE_DISABLE_SENSOR;
 80032ca:	2206      	movs	r2, #6
          handStatus.takktileSensor[sensorInMemory] = 1;
 80032cc:	70d9      	strb	r1, [r3, #3]
        }
      break;
    case STATE_READ_VALUES:
        if (readValues(takktileNumber, sensorNumberAux))
        {
          *state = STATE_DISABLE_SENSOR;
 80032ce:	f848 2024 	str.w	r2, [r8, r4, lsl #2]
 80032d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            handStatus.finger[takktileNumber] = 0; 
          }
        }
      break;
    case STATE_SET_REGISTER:
        if (setRegister(takktileNumber))
 80032d6:	4608      	mov	r0, r1
 80032d8:	f7ff fea6 	bl	8003028 <setRegister>
        {
          *state = STATE_READ_VALUES;
          handStatus.takktileSensor[sensorInMemory] = 1;
 80032dc:	4b17      	ldr	r3, [pc, #92]	; (800333c <takktile_poll_nonblocking_tick+0x154>)
 80032de:	442b      	add	r3, r5
            handStatus.finger[takktileNumber] = 0; 
          }
        }
      break;
    case STATE_SET_REGISTER:
        if (setRegister(takktileNumber))
 80032e0:	b9a0      	cbnz	r0, 800330c <takktile_poll_nonblocking_tick+0x124>
          *state = STATE_DISABLE_SENSOR;
          handStatus.takktileSensor[sensorInMemory] = 1;
        }
        else
        {
          handStatus.takktileSensor[sensorInMemory] = 0; 
 80032e2:	70d8      	strb	r0, [r3, #3]
 80032e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          handStatus.finger[takktileNumber] = 0; 
        }
      break;
    case STATE_ENABLE_SENSOR:
        // udelay(3000);
        if(sensorNumberAux != 0 || (SYSTIME - initialTime[takktileNumber] > 3000));
 80032e8:	b31f      	cbz	r7, 8003332 <takktile_poll_nonblocking_tick+0x14a>
        {
          if (enableSensor(takktileNumber, sensorNumberAux))
 80032ea:	4608      	mov	r0, r1
 80032ec:	4639      	mov	r1, r7
 80032ee:	f7ff fe59 	bl	8002fa4 <enableSensor>
 80032f2:	2800      	cmp	r0, #0
 80032f4:	d0c3      	beq.n	800327e <takktile_poll_nonblocking_tick+0x96>
          {
            *state = STATE_SET_REGISTER;
            handStatus.finger[takktileNumber] = 1;
 80032f6:	4a11      	ldr	r2, [pc, #68]	; (800333c <takktile_poll_nonblocking_tick+0x154>)
 80032f8:	2101      	movs	r1, #1
 80032fa:	5591      	strb	r1, [r2, r6]
        // udelay(3000);
        if(sensorNumberAux != 0 || (SYSTIME - initialTime[takktileNumber] > 3000));
        {
          if (enableSensor(takktileNumber, sensorNumberAux))
          {
            *state = STATE_SET_REGISTER;
 80032fc:	2304      	movs	r3, #4
 80032fe:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 8003302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003306:	2602      	movs	r6, #2
  if (takktile_port == 2)
    takktileNumber = 1;
  else if (takktile_port == 0)
    takktileNumber = 0;
  else if (takktile_port == 1)
    takktileNumber = 2;
 8003308:	4631      	mov	r1, r6
 800330a:	e779      	b.n	8003200 <takktile_poll_nonblocking_tick+0x18>
      break;
    case STATE_SET_REGISTER:
        if (setRegister(takktileNumber))
        {
          *state = STATE_READ_VALUES;
          handStatus.takktileSensor[sensorInMemory] = 1;
 800330c:	2101      	movs	r1, #1
        }
      break;
    case STATE_SET_REGISTER:
        if (setRegister(takktileNumber))
        {
          *state = STATE_READ_VALUES;
 800330e:	2205      	movs	r2, #5
          handStatus.takktileSensor[sensorInMemory] = 1;
 8003310:	70d9      	strb	r1, [r3, #3]
        }
      break;
    case STATE_SET_REGISTER:
        if (setRegister(takktileNumber))
        {
          *state = STATE_READ_VALUES;
 8003312:	f848 2024 	str.w	r2, [r8, r4, lsl #2]
 8003316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        sensorNumber[takktileNumber]++;
        if (sensorNumberAux + 2 > SENSORS_PER_FINGER)
        {
          *state = STATE_WAIT;
          sensorNumber[takktileNumber] = 0;
          handStatus.finger[takktileNumber] = 1;
 800331a:	4908      	ldr	r1, [pc, #32]	; (800333c <takktile_poll_nonblocking_tick+0x154>)
 800331c:	2001      	movs	r0, #1
        result = disableSensor(takktileNumber, sensorNumberAux);
        sensorNumber[takktileNumber]++;
        if (sensorNumberAux + 2 > SENSORS_PER_FINGER)
        {
          *state = STATE_WAIT;
          sensorNumber[takktileNumber] = 0;
 800331e:	2300      	movs	r3, #0
          handStatus.finger[takktileNumber] = 1;
 8003320:	5588      	strb	r0, [r1, r6]
        result = disableSensor(takktileNumber, sensorNumberAux);
        sensorNumber[takktileNumber]++;
        if (sensorNumberAux + 2 > SENSORS_PER_FINGER)
        {
          *state = STATE_WAIT;
          sensorNumber[takktileNumber] = 0;
 8003322:	f809 3006 	strb.w	r3, [r9, r6]
    case STATE_DISABLE_SENSOR:
        result = disableSensor(takktileNumber, sensorNumberAux);
        sensorNumber[takktileNumber]++;
        if (sensorNumberAux + 2 > SENSORS_PER_FINGER)
        {
          *state = STATE_WAIT;
 8003326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800332a:	f848 2024 	str.w	r2, [r8, r4, lsl #2]
 800332e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          handStatus.finger[takktileNumber] = 0; 
        }
      break;
    case STATE_ENABLE_SENSOR:
        // udelay(3000);
        if(sensorNumberAux != 0 || (SYSTIME - initialTime[takktileNumber] > 3000));
 8003332:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	e7d7      	b.n	80032ea <takktile_poll_nonblocking_tick+0x102>
 800333a:	bf00      	nop
 800333c:	200102e8 	.word	0x200102e8
 8003340:	20010010 	.word	0x20010010
 8003344:	20000088 	.word	0x20000088

08003348 <pin_set_output_type>:

void pin_set_output_type(GPIO_TypeDef *gpio, 
                         const uint8_t pin_idx,
                         const uint8_t output_type)
{
  if (output_type == PIN_OUTPUT_TYPE_OPEN_DRAIN)
 8003348:	2a01      	cmp	r2, #1
 800334a:	d006      	beq.n	800335a <pin_set_output_type+0x12>
    gpio->OTYPER |= (1 << pin_idx);
  }
  else
  {
    //printf("setting pin %d to push-pull\r\n", pin_idx);
    gpio->OTYPER &= ~(1 << pin_idx);
 800334c:	6842      	ldr	r2, [r0, #4]
 800334e:	2301      	movs	r3, #1
 8003350:	408b      	lsls	r3, r1
 8003352:	ea22 0303 	bic.w	r3, r2, r3
 8003356:	6043      	str	r3, [r0, #4]
 8003358:	4770      	bx	lr
                         const uint8_t output_type)
{
  if (output_type == PIN_OUTPUT_TYPE_OPEN_DRAIN)
  {
    //printf("setting pin %d to open-drain\r\n", pin_idx);
    gpio->OTYPER |= (1 << pin_idx);
 800335a:	6843      	ldr	r3, [r0, #4]
 800335c:	408a      	lsls	r2, r1
 800335e:	431a      	orrs	r2, r3
 8003360:	6042      	str	r2, [r0, #4]
 8003362:	4770      	bx	lr

08003364 <pin_set_alternate_function>:

void pin_set_alternate_function(GPIO_TypeDef *gpio,
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
 8003364:	290f      	cmp	r1, #15
 8003366:	d822      	bhi.n	80033ae <pin_set_alternate_function+0x4a>
 8003368:	2a0f      	cmp	r2, #15
 800336a:	d820      	bhi.n	80033ae <pin_set_alternate_function+0x4a>
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 800336c:	2907      	cmp	r1, #7
}

void pin_set_alternate_function(GPIO_TypeDef *gpio,
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
 800336e:	b470      	push	{r4, r5, r6}
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 8003370:	d91e      	bls.n	80033b0 <pin_set_alternate_function+0x4c>
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
 8003372:	f1a1 0308 	sub.w	r3, r1, #8
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 8003376:	6a44      	ldr	r4, [r0, #36]	; 0x24
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	b2db      	uxtb	r3, r3
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 800337c:	4625      	mov	r5, r4
 800337e:	f100 0624 	add.w	r6, r0, #36	; 0x24
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
  *af_reg &= ~(0xf << reg_ofs); // zero out whatever was there before
 8003382:	240f      	movs	r4, #15
 8003384:	409c      	lsls	r4, r3
 8003386:	ea25 0404 	bic.w	r4, r5, r4
 800338a:	6034      	str	r4, [r6, #0]
  *af_reg |= function_idx << reg_ofs; // set the alternate function register
 800338c:	6834      	ldr	r4, [r6, #0]
 800338e:	409a      	lsls	r2, r3
 8003390:	4322      	orrs	r2, r4
 8003392:	6032      	str	r2, [r6, #0]
  gpio->MODER &= ~(3 << (pin_idx * 2)); // zero out whatever was there before
 8003394:	6802      	ldr	r2, [r0, #0]
 8003396:	0049      	lsls	r1, r1, #1
 8003398:	2303      	movs	r3, #3
 800339a:	408b      	lsls	r3, r1
 800339c:	ea22 0303 	bic.w	r3, r2, r3
 80033a0:	6003      	str	r3, [r0, #0]
  gpio->MODER |= 2 << (pin_idx * 2); // put the GPIO in alternate-function mode
}
 80033a2:	bc70      	pop	{r4, r5, r6}
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
  *af_reg &= ~(0xf << reg_ofs); // zero out whatever was there before
  *af_reg |= function_idx << reg_ofs; // set the alternate function register
  gpio->MODER &= ~(3 << (pin_idx * 2)); // zero out whatever was there before
  gpio->MODER |= 2 << (pin_idx * 2); // put the GPIO in alternate-function mode
 80033a4:	6802      	ldr	r2, [r0, #0]
 80033a6:	2302      	movs	r3, #2
 80033a8:	408b      	lsls	r3, r1
 80033aa:	4313      	orrs	r3, r2
 80033ac:	6003      	str	r3, [r0, #0]
}
 80033ae:	4770      	bx	lr
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 80033b0:	6a04      	ldr	r4, [r0, #32]
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
 80033b2:	008b      	lsls	r3, r1, #2
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 80033b4:	4625      	mov	r5, r4
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
 80033b6:	b2db      	uxtb	r3, r3
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 80033b8:	f100 0620 	add.w	r6, r0, #32
 80033bc:	e7e1      	b.n	8003382 <pin_set_alternate_function+0x1e>
 80033be:	bf00      	nop

080033c0 <pin_set_output>:
  gpio->MODER |= 2 << (pin_idx * 2); // put the GPIO in alternate-function mode
}

void pin_set_output(GPIO_TypeDef *gpio, const uint8_t pin_idx)
{
  if (pin_idx > 15)
 80033c0:	290f      	cmp	r1, #15
 80033c2:	d80b      	bhi.n	80033dc <pin_set_output+0x1c>
    return; // adios amigo
  gpio->MODER &= ~(3 << (pin_idx * 2));
 80033c4:	6802      	ldr	r2, [r0, #0]
 80033c6:	0049      	lsls	r1, r1, #1
 80033c8:	2303      	movs	r3, #3
 80033ca:	408b      	lsls	r3, r1
 80033cc:	ea22 0303 	bic.w	r3, r2, r3
 80033d0:	6003      	str	r3, [r0, #0]
  gpio->MODER |= 1 << (pin_idx * 2);
 80033d2:	6802      	ldr	r2, [r0, #0]
 80033d4:	2301      	movs	r3, #1
 80033d6:	408b      	lsls	r3, r1
 80033d8:	4313      	orrs	r3, r2
 80033da:	6003      	str	r3, [r0, #0]
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop

080033e0 <pin_set_output_level>:

void pin_set_output_level(GPIO_TypeDef *gpio, 
                          const uint8_t pin_idx, 
                          const uint8_t pin_level)
{
  if (pin_idx > 15)
 80033e0:	290f      	cmp	r1, #15
 80033e2:	d804      	bhi.n	80033ee <pin_set_output_level+0xe>
    return;
  if (pin_level)
    gpio->BSRRL = 1 << pin_idx;
 80033e4:	2301      	movs	r3, #1
 80033e6:	408b      	lsls	r3, r1
 80033e8:	b29b      	uxth	r3, r3
                          const uint8_t pin_idx, 
                          const uint8_t pin_level)
{
  if (pin_idx > 15)
    return;
  if (pin_level)
 80033ea:	b90a      	cbnz	r2, 80033f0 <pin_set_output_level+0x10>
    gpio->BSRRL = 1 << pin_idx;
  else
    gpio->BSRRH = 1 << pin_idx;
 80033ec:	8343      	strh	r3, [r0, #26]
 80033ee:	4770      	bx	lr
                          const uint8_t pin_level)
{
  if (pin_idx > 15)
    return;
  if (pin_level)
    gpio->BSRRL = 1 << pin_idx;
 80033f0:	8303      	strh	r3, [r0, #24]
 80033f2:	4770      	bx	lr

080033f4 <encInit>:
void encInit()
{
  // initializing encoders state
  for (int i = 0; i < NUM_ENC; i++)
  {
    handState.encoders[i] = 0;
 80033f4:	4b07      	ldr	r3, [pc, #28]	; (8003414 <encInit+0x20>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8b3 10a0 	ldrh.w	r1, [r3, #160]	; 0xa0
 80033fc:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8003400:	f8b3 10a2 	ldrh.w	r1, [r3, #162]	; 0xa2
 8003404:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8003408:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	; 0xa4
 800340c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	200101fc 	.word	0x200101fc

08003418 <setEncoderRegister>:
      break;
  }
}

uint8_t setEncoderRegister(uint8_t encoderNumber, uint8_t encoderRegister,int timeout)
{
 8003418:	b470      	push	{r4, r5, r6}
  uint8_t result = 0;
  switch ((uint32_t) handPorts.encoder[encoderNumber])
 800341a:	f100 0526 	add.w	r5, r0, #38	; 0x26
 800341e:	4c10      	ldr	r4, [pc, #64]	; (8003460 <setEncoderRegister+0x48>)
 8003420:	4e10      	ldr	r6, [pc, #64]	; (8003464 <setEncoderRegister+0x4c>)
 8003422:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
 8003426:	42b3      	cmp	r3, r6
      break;
  }
}

uint8_t setEncoderRegister(uint8_t encoderNumber, uint8_t encoderRegister,int timeout)
{
 8003428:	460a      	mov	r2, r1
  uint8_t result = 0;
  switch ((uint32_t) handPorts.encoder[encoderNumber])
 800342a:	d009      	beq.n	8003440 <setEncoderRegister+0x28>
 800342c:	490e      	ldr	r1, [pc, #56]	; (8003468 <setEncoderRegister+0x50>)
 800342e:	428b      	cmp	r3, r1
 8003430:	d00e      	beq.n	8003450 <setEncoderRegister+0x38>
 8003432:	f5a1 415c 	sub.w	r1, r1, #56320	; 0xdc00
 8003436:	428b      	cmp	r3, r1
 8003438:	d002      	beq.n	8003440 <setEncoderRegister+0x28>
    case SPI1_BASE:
      result = writeRegisterSPI(handPorts.encoder[encoderNumber], handPorts.encoderI2CAddress[encoderNumber], encoderRegister);
    break;
  }
  return result;
}
 800343a:	2000      	movs	r0, #0
 800343c:	bc70      	pop	{r4, r5, r6}
 800343e:	4770      	bx	lr
  {
    case I2C1_BASE:
      result = writeRegisterI2C(handPorts.encoder[encoderNumber], handPorts.encoderI2CAddress[encoderNumber], encoderRegister);
    break;
    case I2C3_BASE:
      result = writeRegisterI2C(handPorts.encoder[encoderNumber], handPorts.encoderI2CAddress[encoderNumber], encoderRegister);
 8003440:	1823      	adds	r3, r4, r0
 8003442:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8003446:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
    case SPI1_BASE:
      result = writeRegisterSPI(handPorts.encoder[encoderNumber], handPorts.encoderI2CAddress[encoderNumber], encoderRegister);
    break;
  }
  return result;
}
 800344a:	bc70      	pop	{r4, r5, r6}
  {
    case I2C1_BASE:
      result = writeRegisterI2C(handPorts.encoder[encoderNumber], handPorts.encoderI2CAddress[encoderNumber], encoderRegister);
    break;
    case I2C3_BASE:
      result = writeRegisterI2C(handPorts.encoder[encoderNumber], handPorts.encoderI2CAddress[encoderNumber], encoderRegister);
 800344c:	f7fd bcbc 	b.w	8000dc8 <writeRegisterI2C>
    break;
    case SPI1_BASE:
      result = writeRegisterSPI(handPorts.encoder[encoderNumber], handPorts.encoderI2CAddress[encoderNumber], encoderRegister);
 8003450:	1823      	adds	r3, r4, r0
 8003452:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8003456:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
    break;
  }
  return result;
}
 800345a:	bc70      	pop	{r4, r5, r6}
    break;
    case I2C3_BASE:
      result = writeRegisterI2C(handPorts.encoder[encoderNumber], handPorts.encoderI2CAddress[encoderNumber], encoderRegister);
    break;
    case SPI1_BASE:
      result = writeRegisterSPI(handPorts.encoder[encoderNumber], handPorts.encoderI2CAddress[encoderNumber], encoderRegister);
 800345c:	f7fd bf10 	b.w	8001280 <writeRegisterSPI>
 8003460:	20010074 	.word	0x20010074
 8003464:	40005c00 	.word	0x40005c00
 8003468:	40013000 	.word	0x40013000

0800346c <readEncoderValues>:
  }
  return result;
}

uint8_t readEncoderValues(uint8_t encoderNumber, int timeout)
{
 800346c:	b510      	push	{r4, lr}
  uint8_t result = 0;
  uint8_t valueRead[2];
  switch ((uint32_t) handPorts.encoder[encoderNumber])
 800346e:	f100 0126 	add.w	r1, r0, #38	; 0x26
 8003472:	4b1a      	ldr	r3, [pc, #104]	; (80034dc <readEncoderValues+0x70>)
  }
  return result;
}

uint8_t readEncoderValues(uint8_t encoderNumber, int timeout)
{
 8003474:	4604      	mov	r4, r0
  uint8_t result = 0;
  uint8_t valueRead[2];
  switch ((uint32_t) handPorts.encoder[encoderNumber])
 8003476:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800347a:	4819      	ldr	r0, [pc, #100]	; (80034e0 <readEncoderValues+0x74>)
 800347c:	4282      	cmp	r2, r0
  }
  return result;
}

uint8_t readEncoderValues(uint8_t encoderNumber, int timeout)
{
 800347e:	b082      	sub	sp, #8
  uint8_t result = 0;
  uint8_t valueRead[2];
  switch ((uint32_t) handPorts.encoder[encoderNumber])
 8003480:	d009      	beq.n	8003496 <readEncoderValues+0x2a>
 8003482:	f500 4054 	add.w	r0, r0, #54272	; 0xd400
 8003486:	4282      	cmp	r2, r0
 8003488:	d01e      	beq.n	80034c8 <readEncoderValues+0x5c>
 800348a:	f5a0 405c 	sub.w	r0, r0, #56320	; 0xdc00
 800348e:	4282      	cmp	r2, r0
 8003490:	d001      	beq.n	8003496 <readEncoderValues+0x2a>
  return result;
}

uint8_t readEncoderValues(uint8_t encoderNumber, int timeout)
{
  uint8_t result = 0;
 8003492:	2000      	movs	r0, #0
 8003494:	e008      	b.n	80034a8 <readEncoderValues+0x3c>
  {
    case I2C1_BASE:
      result = readBytesI2C(handPorts.encoder[encoderNumber], handPorts.encoderI2CAddress[encoderNumber], 2, valueRead);
    break;
    case I2C3_BASE:
      result = readBytesI2C(handPorts.encoder[encoderNumber], handPorts.encoderI2CAddress[encoderNumber], 2, valueRead);
 8003496:	191a      	adds	r2, r3, r4
 8003498:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800349c:	f892 10b4 	ldrb.w	r1, [r2, #180]	; 0xb4
 80034a0:	ab01      	add	r3, sp, #4
 80034a2:	2202      	movs	r2, #2
 80034a4:	f7fd fd14 	bl	8000ed0 <readBytesI2C>
    break;
    case SPI1_BASE:
      result = readBytesSPI(handPorts.encoder[encoderNumber], handPorts.encoderI2CAddress[encoderNumber], 2, valueRead);
    break;
  }
  handState.encoders[encoderNumber] = (((uint16_t) valueRead[0] << 6) + ((uint16_t) (valueRead[1] & 0x3F)));
 80034a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80034ac:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80034b0:	4a0c      	ldr	r2, [pc, #48]	; (80034e4 <readEncoderValues+0x78>)
 80034b2:	3450      	adds	r4, #80	; 0x50
 80034b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034b8:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 80034bc:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 80034c0:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
  return result;
 80034c4:	b002      	add	sp, #8
 80034c6:	bd10      	pop	{r4, pc}
    break;
    case I2C3_BASE:
      result = readBytesI2C(handPorts.encoder[encoderNumber], handPorts.encoderI2CAddress[encoderNumber], 2, valueRead);
    break;
    case SPI1_BASE:
      result = readBytesSPI(handPorts.encoder[encoderNumber], handPorts.encoderI2CAddress[encoderNumber], 2, valueRead);
 80034c8:	191a      	adds	r2, r3, r4
 80034ca:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80034ce:	f892 10b4 	ldrb.w	r1, [r2, #180]	; 0xb4
 80034d2:	ab01      	add	r3, sp, #4
 80034d4:	2202      	movs	r2, #2
 80034d6:	f7fd ff07 	bl	80012e8 <readBytesSPI>
    break;
 80034da:	e7e5      	b.n	80034a8 <readEncoderValues+0x3c>
 80034dc:	20010074 	.word	0x20010074
 80034e0:	40005c00 	.word	0x40005c00
 80034e4:	200101fc 	.word	0x200101fc

080034e8 <enc_poll_nonblocking_tick>:
    0 -> Port I2C1
    1 -> Port SPI
    2 -> Port I2C3
*/
void enc_poll_nonblocking_tick(const uint8_t encoderNumber)
{
 80034e8:	b538      	push	{r3, r4, r5, lr}
  enc_async_poll_state_t* state = (enc_async_poll_state_t*)&(enc_poll_state[encoderNumber]);
  switch(*state)
 80034ea:	4c10      	ldr	r4, [pc, #64]	; (800352c <enc_poll_nonblocking_tick+0x44>)
 80034ec:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 80034f0:	2b01      	cmp	r3, #1
    0 -> Port I2C1
    1 -> Port SPI
    2 -> Port I2C3
*/
void enc_poll_nonblocking_tick(const uint8_t encoderNumber)
{
 80034f2:	4605      	mov	r5, r0
  enc_async_poll_state_t* state = (enc_async_poll_state_t*)&(enc_poll_state[encoderNumber]);
  switch(*state)
 80034f4:	d011      	beq.n	800351a <enc_poll_nonblocking_tick+0x32>
 80034f6:	d307      	bcc.n	8003508 <enc_poll_nonblocking_tick+0x20>
 80034f8:	3301      	adds	r3, #1
 80034fa:	d100      	bne.n	80034fe <enc_poll_nonblocking_tick+0x16>
 80034fc:	bd38      	pop	{r3, r4, r5, pc}
        *state = ENCODER_STATE_WAIT;
      break;
    case ENCODER_STATE_WAIT:
      break;
    default:
      *state = ENCODER_STATE_WAIT;
 80034fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003502:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 8003506:	bd38      	pop	{r3, r4, r5, pc}
{
  enc_async_poll_state_t* state = (enc_async_poll_state_t*)&(enc_poll_state[encoderNumber]);
  switch(*state)
  {
    case ENCODER_STATE_SET_REGISTER:
      if (setEncoderRegister(encoderNumber, AS5048B_ANGLLSB_REG, SPI_TIMEOUT));
 8003508:	21ff      	movs	r1, #255	; 0xff
 800350a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800350e:	f7ff ff83 	bl	8003418 <setEncoderRegister>
        *state = ENCODER_STATE_READ_VALUES;
 8003512:	2301      	movs	r3, #1
 8003514:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
      break;
 8003518:	bd38      	pop	{r3, r4, r5, pc}
    case ENCODER_STATE_READ_VALUES:
      if(readEncoderValues(encoderNumber, SPI_TIMEOUT));
 800351a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800351e:	f7ff ffa5 	bl	800346c <readEncoderValues>
        *state = ENCODER_STATE_WAIT;
 8003522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003526:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
      break;
 800352a:	bd38      	pop	{r3, r4, r5, pc}
 800352c:	20000098 	.word	0x20000098

08003530 <state_init>:
volatile status_t handStatus;

void state_init()
{
	// initializing handState
	handState.header[0] = 0x01; // version number of this state format
 8003530:	4929      	ldr	r1, [pc, #164]	; (80035d8 <state_init+0xa8>)
	handState.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
 8003532:	2200      	movs	r2, #0
volatile status_t handStatus;

void state_init()
{
	// initializing handState
	handState.header[0] = 0x01; // version number of this state format
 8003534:	2301      	movs	r3, #1
// GLOBAL ALL FILES VARIABLES
volatile state_t handState;
volatile status_t handStatus;

void state_init()
{
 8003536:	b430      	push	{r4, r5}
	// initializing handState
	handState.header[0] = 0x01; // version number of this state format
 8003538:	700b      	strb	r3, [r1, #0]
	handState.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
 800353a:	704a      	strb	r2, [r1, #1]
	handState.header[2] = 0x00; // ditto
 800353c:	708a      	strb	r2, [r1, #2]
	handState.header[3] = 0x00; // ditto
 800353e:	70ca      	strb	r2, [r1, #3]
	handState.systime = 0;
 8003540:	6848      	ldr	r0, [r1, #4]
 8003542:	604a      	str	r2, [r1, #4]
	for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 8003544:	4613      	mov	r3, r2
		handState.takktile_pressures[i] = handState.takktile_temperatures[i] = 0;
 8003546:	4614      	mov	r4, r2
 8003548:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800354c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8003550:	1d18      	adds	r0, r3, #4
	handState.header[0] = 0x01; // version number of this state format
	handState.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
	handState.header[2] = 0x00; // ditto
	handState.header[3] = 0x00; // ditto
	handState.systime = 0;
	for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 8003552:	3301      	adds	r3, #1
		handState.takktile_pressures[i] = handState.takktile_temperatures[i] = 0;
 8003554:	8895      	ldrh	r5, [r2, #4]
 8003556:	8094      	strh	r4, [r2, #4]
	handState.header[0] = 0x01; // version number of this state format
	handState.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
	handState.header[2] = 0x00; // ditto
	handState.header[3] = 0x00; // ditto
	handState.systime = 0;
	for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 8003558:	2b26      	cmp	r3, #38	; 0x26
		handState.takktile_pressures[i] = handState.takktile_temperatures[i] = 0;
 800355a:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
 800355e:	4d1e      	ldr	r5, [pc, #120]	; (80035d8 <state_init+0xa8>)
 8003560:	f821 4010 	strh.w	r4, [r1, r0, lsl #1]
 8003564:	f04f 0000 	mov.w	r0, #0
	handState.header[0] = 0x01; // version number of this state format
	handState.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
	handState.header[2] = 0x00; // ditto
	handState.header[3] = 0x00; // ditto
	handState.systime = 0;
	for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 8003568:	d1ee      	bne.n	8003548 <state_init+0x18>
		handState.takktile_pressures[i] = handState.takktile_temperatures[i] = 0;
	for (uint_fast8_t i = 0; i < NUM_ENC; i++)
		handState.encoders[i] = 0;
 800356a:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
 800356e:	f8a5 00a0 	strh.w	r0, [r5, #160]	; 0xa0
 8003572:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
 8003576:	f8a5 00a2 	strh.w	r0, [r5, #162]	; 0xa2
 800357a:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800357e:	f8a5 00a4 	strh.w	r0, [r5, #164]	; 0xa4
 8003582:	4602      	mov	r2, r0
	for (uint_fast8_t i = 0; i < NUM_IMUS*4; i++)
	    handState.imus[i] = 0;
 8003584:	f102 0364 	add.w	r3, r2, #100	; 0x64
 8003588:	eb01 0343 	add.w	r3, r1, r3, lsl #1
	handState.systime = 0;
	for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
		handState.takktile_pressures[i] = handState.takktile_temperatures[i] = 0;
	for (uint_fast8_t i = 0; i < NUM_ENC; i++)
		handState.encoders[i] = 0;
	for (uint_fast8_t i = 0; i < NUM_IMUS*4; i++)
 800358c:	3201      	adds	r2, #1
 800358e:	2a10      	cmp	r2, #16
	    handState.imus[i] = 0;
 8003590:	885c      	ldrh	r4, [r3, #2]
 8003592:	8058      	strh	r0, [r3, #2]
	handState.systime = 0;
	for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
		handState.takktile_pressures[i] = handState.takktile_temperatures[i] = 0;
	for (uint_fast8_t i = 0; i < NUM_ENC; i++)
		handState.encoders[i] = 0;
	for (uint_fast8_t i = 0; i < NUM_IMUS*4; i++)
 8003594:	d1f6      	bne.n	8003584 <state_init+0x54>
	    handState.imus[i] = 0;

	// initializing handStatus
	for (uint_fast8_t i = 0; i < NUM_FINGERS; i++)
		handStatus.finger[i] = 1;
 8003596:	4911      	ldr	r1, [pc, #68]	; (80035dc <state_init+0xac>)
 8003598:	2201      	movs	r2, #1
 800359a:	700a      	strb	r2, [r1, #0]
	for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
		handStatus.takktileSensor[i] = 1;
 800359c:	4614      	mov	r4, r2
	for (uint_fast8_t i = 0; i < NUM_IMUS*4; i++)
	    handState.imus[i] = 0;

	// initializing handStatus
	for (uint_fast8_t i = 0; i < NUM_FINGERS; i++)
		handStatus.finger[i] = 1;
 800359e:	704a      	strb	r2, [r1, #1]
 80035a0:	2300      	movs	r3, #0
 80035a2:	708a      	strb	r2, [r1, #2]
	for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
		handStatus.takktileSensor[i] = 1;
 80035a4:	18ca      	adds	r2, r1, r3
	    handState.imus[i] = 0;

	// initializing handStatus
	for (uint_fast8_t i = 0; i < NUM_FINGERS; i++)
		handStatus.finger[i] = 1;
	for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 80035a6:	3301      	adds	r3, #1
 80035a8:	2b26      	cmp	r3, #38	; 0x26
		handStatus.takktileSensor[i] = 1;
 80035aa:	70d4      	strb	r4, [r2, #3]
 80035ac:	f04f 0001 	mov.w	r0, #1
 80035b0:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <state_init+0xac>)
	    handState.imus[i] = 0;

	// initializing handStatus
	for (uint_fast8_t i = 0; i < NUM_FINGERS; i++)
		handStatus.finger[i] = 1;
	for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 80035b2:	d1f7      	bne.n	80035a4 <state_init+0x74>
		handStatus.takktileSensor[i] = 1;
	for (uint_fast8_t i = 0; i < NUM_ENC; i++)
		handStatus.encoders[i] = 1;
	for (uint_fast8_t i = 0; i < NUM_IMUS; i++)
	    handStatus.imus[i] = 0;
 80035b4:	2300      	movs	r3, #0
	for (uint_fast8_t i = 0; i < NUM_FINGERS; i++)
		handStatus.finger[i] = 1;
	for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
		handStatus.takktileSensor[i] = 1;
	for (uint_fast8_t i = 0; i < NUM_ENC; i++)
		handStatus.encoders[i] = 1;
 80035b6:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
 80035ba:	f882 002a 	strb.w	r0, [r2, #42]	; 0x2a
 80035be:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
	for (uint_fast8_t i = 0; i < NUM_IMUS; i++)
	    handStatus.imus[i] = 0;
 80035c2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
 80035c6:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
 80035ca:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 80035ce:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
}
 80035d2:	bc30      	pop	{r4, r5}
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	200101fc 	.word	0x200101fc
 80035dc:	200102e8 	.word	0x200102e8

080035e0 <asyncInit>:
  // { imu_poll_nonblocking_tick     , 2, (int *)(&imu_poll_state[2])       },
  // { imu_poll_nonblocking_tick     , 3, (int *)(&imu_poll_state[3])       }
}; 

void asyncInit()
{
 80035e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035e4:	4c0e      	ldr	r4, [pc, #56]	; (8003620 <asyncInit+0x40>)
 80035e6:	f06f 0502 	mvn.w	r5, #2
 80035ea:	f104 0784 	add.w	r7, r4, #132	; 0x84
  for (uint_fast8_t i = 0; i < NUM_STATE_FUNCTIONS; i++)
  {
    if (i < 3 || i > 6)
      *stateMachines[i].poll_state = 0;
    else
      *stateMachines[i].poll_state = ASYNC_POLL_DONE;
 80035ee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
void asyncInit()
{
  for (uint_fast8_t i = 0; i < NUM_STATE_FUNCTIONS; i++)
  {
    if (i < 3 || i > 6)
      *stateMachines[i].poll_state = 0;
 80035f2:	f04f 0800 	mov.w	r8, #0
 80035f6:	68a3      	ldr	r3, [r4, #8]

void asyncInit()
{
  for (uint_fast8_t i = 0; i < NUM_STATE_FUNCTIONS; i++)
  {
    if (i < 3 || i > 6)
 80035f8:	2d03      	cmp	r5, #3
      *stateMachines[i].poll_state = 0;
 80035fa:	bf8c      	ite	hi
 80035fc:	f8c3 8000 	strhi.w	r8, [r3]
    else
      *stateMachines[i].poll_state = ASYNC_POLL_DONE;
 8003600:	601e      	strls	r6, [r3, #0]
    stateMachines[i].fptr(stateMachines[i].arg);
 8003602:	7920      	ldrb	r0, [r4, #4]
 8003604:	f854 3b0c 	ldr.w	r3, [r4], #12
 8003608:	4798      	blx	r3
  // { imu_poll_nonblocking_tick     , 3, (int *)(&imu_poll_state[3])       }
}; 

void asyncInit()
{
  for (uint_fast8_t i = 0; i < NUM_STATE_FUNCTIONS; i++)
 800360a:	42bc      	cmp	r4, r7
 800360c:	f105 0501 	add.w	r5, r5, #1
 8003610:	d1f1      	bne.n	80035f6 <asyncInit+0x16>
      *stateMachines[i].poll_state = 0;
    else
      *stateMachines[i].poll_state = ASYNC_POLL_DONE;
    stateMachines[i].fptr(stateMachines[i].arg);
  }
  asyncStartTime = SYSTIME;
 8003612:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003616:	4b03      	ldr	r3, [pc, #12]	; (8003624 <asyncInit+0x44>)
 8003618:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003620:	0800ac74 	.word	0x0800ac74
 8003624:	20010014 	.word	0x20010014

08003628 <asyncUpdate>:
}

uint8_t asyncUpdate()
{
 8003628:	b570      	push	{r4, r5, r6, lr}
 800362a:	4c0a      	ldr	r4, [pc, #40]	; (8003654 <asyncUpdate+0x2c>)
  uint8_t allDone = 1;
 800362c:	2601      	movs	r6, #1
 800362e:	f104 0584 	add.w	r5, r4, #132	; 0x84
  // if (SYSTIME - asyncStartTime > MAX_CYCLE_PERIOD)
  //   asyncInit();

  for (uint_fast8_t i = 0; i < NUM_STATE_FUNCTIONS; i++)
  {
    if (!(*(stateMachines[i].poll_state) == (int)ASYNC_POLL_DONE))
 8003632:	68a3      	ldr	r3, [r4, #8]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3301      	adds	r3, #1
 8003638:	d003      	beq.n	8003642 <asyncUpdate+0x1a>
    {
      allDone = 0;
      stateMachines[i].fptr(stateMachines[i].arg);
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	7920      	ldrb	r0, [r4, #4]
 800363e:	4798      	blx	r3

  for (uint_fast8_t i = 0; i < NUM_STATE_FUNCTIONS; i++)
  {
    if (!(*(stateMachines[i].poll_state) == (int)ASYNC_POLL_DONE))
    {
      allDone = 0;
 8003640:	2600      	movs	r6, #0
 8003642:	340c      	adds	r4, #12

  // if stateMachines did not finish before MAX_CYCLE_PERIOD, restart
  // if (SYSTIME - asyncStartTime > MAX_CYCLE_PERIOD)
  //   asyncInit();

  for (uint_fast8_t i = 0; i < NUM_STATE_FUNCTIONS; i++)
 8003644:	42ac      	cmp	r4, r5
 8003646:	d1f4      	bne.n	8003632 <asyncUpdate+0xa>
    {
      allDone = 0;
      stateMachines[i].fptr(stateMachines[i].arg);
    }
  }
  if (allDone)                // if all stateMachines finished
 8003648:	b10e      	cbz	r6, 800364e <asyncUpdate+0x26>
    asyncInit();              // restart
 800364a:	f7ff ffc9 	bl	80035e0 <asyncInit>

  return allDone;
}
 800364e:	4630      	mov	r0, r6
 8003650:	bd70      	pop	{r4, r5, r6, pc}
 8003652:	bf00      	nop
 8003654:	0800ac74 	.word	0x0800ac74

08003658 <delay_ns>:
#include <stdint.h>

// TODO: tune this better on an oscilloscope

void delay_ns(uint32_t ns)
{
 8003658:	b082      	sub	sp, #8
  for (volatile uint32_t i = 0; i < ns/10; i++) { }
 800365a:	4b08      	ldr	r3, [pc, #32]	; (800367c <delay_ns+0x24>)
 800365c:	2200      	movs	r2, #0
 800365e:	9201      	str	r2, [sp, #4]
 8003660:	fba3 3000 	umull	r3, r0, r3, r0
 8003664:	9b01      	ldr	r3, [sp, #4]
 8003666:	08c0      	lsrs	r0, r0, #3
 8003668:	4298      	cmp	r0, r3
 800366a:	d905      	bls.n	8003678 <delay_ns+0x20>
 800366c:	9b01      	ldr	r3, [sp, #4]
 800366e:	3301      	adds	r3, #1
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	9b01      	ldr	r3, [sp, #4]
 8003674:	4283      	cmp	r3, r0
 8003676:	d3f9      	bcc.n	800366c <delay_ns+0x14>
}
 8003678:	b002      	add	sp, #8
 800367a:	4770      	bx	lr
 800367c:	cccccccd 	.word	0xcccccccd

08003680 <delay_us>:

void delay_us(uint32_t us)
{
 8003680:	b082      	sub	sp, #8
  for (volatile int i = 0; i < us*10; i++) { }
 8003682:	2300      	movs	r3, #0
 8003684:	9301      	str	r3, [sp, #4]
 8003686:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800368a:	9b01      	ldr	r3, [sp, #4]
 800368c:	0040      	lsls	r0, r0, #1
 800368e:	4283      	cmp	r3, r0
 8003690:	d205      	bcs.n	800369e <delay_us+0x1e>
 8003692:	9b01      	ldr	r3, [sp, #4]
 8003694:	3301      	adds	r3, #1
 8003696:	9301      	str	r3, [sp, #4]
 8003698:	9b01      	ldr	r3, [sp, #4]
 800369a:	4283      	cmp	r3, r0
 800369c:	d3f9      	bcc.n	8003692 <delay_us+0x12>
}
 800369e:	b002      	add	sp, #8
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop

080036a4 <delay_ms>:

void delay_ms(uint32_t ms)
{
 80036a4:	b082      	sub	sp, #8
  for (volatile int i = 0; i < ms; i++)
 80036a6:	2100      	movs	r1, #0
 80036a8:	9100      	str	r1, [sp, #0]
 80036aa:	9b00      	ldr	r3, [sp, #0]
 80036ac:	4298      	cmp	r0, r3
 80036ae:	d911      	bls.n	80036d4 <delay_ms+0x30>
  for (volatile uint32_t i = 0; i < ns/10; i++) { }
}

void delay_us(uint32_t us)
{
  for (volatile int i = 0; i < us*10; i++) { }
 80036b0:	f242 720f 	movw	r2, #9999	; 0x270f
 80036b4:	9101      	str	r1, [sp, #4]
 80036b6:	9b01      	ldr	r3, [sp, #4]
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d805      	bhi.n	80036c8 <delay_ms+0x24>
 80036bc:	9b01      	ldr	r3, [sp, #4]
 80036be:	3301      	adds	r3, #1
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	9b01      	ldr	r3, [sp, #4]
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d9f9      	bls.n	80036bc <delay_ms+0x18>
}

void delay_ms(uint32_t ms)
{
  for (volatile int i = 0; i < ms; i++)
 80036c8:	9b00      	ldr	r3, [sp, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	9b00      	ldr	r3, [sp, #0]
 80036d0:	4283      	cmp	r3, r0
 80036d2:	d3ef      	bcc.n	80036b4 <delay_ms+0x10>
    delay_us(1000);
}
 80036d4:	b002      	add	sp, #8
 80036d6:	4770      	bx	lr

080036d8 <setLEDs>:
static uint8_t errDetected[ERR_NUMBER] = {0};


// Displays the appropriate LED pattern for a given error at a point in its
// sequence
void setLEDs(uint8_t errorIndex, uint8_t flashIndex) {
 80036d8:	b538      	push	{r3, r4, r5, lr}
  uint8_t pattern = errSequence[errorIndex][flashIndex];
 80036da:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <setLEDs+0x2c>)
 80036e0:	5c5d      	ldrb	r5, [r3, r1]
  for (int i = 0; i < NUM_LEDs; i++) {
 80036e2:	2400      	movs	r4, #0
    if (pattern & (1 << i)) {
 80036e4:	fa45 f304 	asr.w	r3, r5, r4
 80036e8:	f013 0f01 	tst.w	r3, #1
      leds_on(i);
 80036ec:	b2e0      	uxtb	r0, r4
// Displays the appropriate LED pattern for a given error at a point in its
// sequence
void setLEDs(uint8_t errorIndex, uint8_t flashIndex) {
  uint8_t pattern = errSequence[errorIndex][flashIndex];
  for (int i = 0; i < NUM_LEDs; i++) {
    if (pattern & (1 << i)) {
 80036ee:	d005      	beq.n	80036fc <setLEDs+0x24>
      leds_on(i);
 80036f0:	f7fd fed8 	bl	80014a4 <leds_on>

// Displays the appropriate LED pattern for a given error at a point in its
// sequence
void setLEDs(uint8_t errorIndex, uint8_t flashIndex) {
  uint8_t pattern = errSequence[errorIndex][flashIndex];
  for (int i = 0; i < NUM_LEDs; i++) {
 80036f4:	3401      	adds	r4, #1
 80036f6:	2c04      	cmp	r4, #4
 80036f8:	d1f4      	bne.n	80036e4 <setLEDs+0xc>
      leds_on(i);
    } else {
      leds_off(i);
    }
  }
}
 80036fa:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t pattern = errSequence[errorIndex][flashIndex];
  for (int i = 0; i < NUM_LEDs; i++) {
    if (pattern & (1 << i)) {
      leds_on(i);
    } else {
      leds_off(i);
 80036fc:	b2e0      	uxtb	r0, r4
 80036fe:	f7fd fef5 	bl	80014ec <leds_off>
 8003702:	e7f7      	b.n	80036f4 <setLEDs+0x1c>
 8003704:	0800acf8 	.word	0x0800acf8

08003708 <errorService>:
  static uint32_t flashStartTime = 0;

  // err_set(ERR_TAC_0_PROBLEM + takktile_port);

  // We should continue with our current display
  if (displaying)
 8003708:	4a27      	ldr	r2, [pc, #156]	; (80037a8 <errorService+0xa0>)
 800370a:	7811      	ldrb	r1, [r2, #0]
}

// This displays the error codes one by one. Each dispay is made up of four
// "flashes" of LED patterns over the first second of the display with no LEDs
// in the second second of the display
void errorService() {
 800370c:	b430      	push	{r4, r5}
  static uint32_t flashStartTime = 0;

  // err_set(ERR_TAC_0_PROBLEM + takktile_port);

  // We should continue with our current display
  if (displaying)
 800370e:	b329      	cbz	r1, 800375c <errorService+0x54>
  {
    if (SYSTIME - flashStartTime < FLASH_INTERVAL_US)
 8003710:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003714:	4825      	ldr	r0, [pc, #148]	; (80037ac <errorService+0xa4>)
 8003716:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003718:	6805      	ldr	r5, [r0, #0]
 800371a:	4c25      	ldr	r4, [pc, #148]	; (80037b0 <errorService+0xa8>)
 800371c:	1b5b      	subs	r3, r3, r5
 800371e:	42a3      	cmp	r3, r4
 8003720:	d91a      	bls.n	8003758 <errorService+0x50>
    {
      return;
    }

    flashStartTime = SYSTIME;
    flashIndex++;
 8003722:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <errorService+0xac>)
    if (SYSTIME - flashStartTime < FLASH_INTERVAL_US)
    {
      return;
    }

    flashStartTime = SYSTIME;
 8003724:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    flashIndex++;
 8003726:	7819      	ldrb	r1, [r3, #0]
    if (SYSTIME - flashStartTime < FLASH_INTERVAL_US)
    {
      return;
    }

    flashStartTime = SYSTIME;
 8003728:	6004      	str	r4, [r0, #0]
    flashIndex++;
 800372a:	3101      	adds	r1, #1
 800372c:	b2c9      	uxtb	r1, r1
    if (flashIndex < NUM_FLASHES)
 800372e:	2907      	cmp	r1, #7
    {
      return;
    }

    flashStartTime = SYSTIME;
    flashIndex++;
 8003730:	7019      	strb	r1, [r3, #0]
    if (flashIndex < NUM_FLASHES)
 8003732:	d933      	bls.n	800379c <errorService+0x94>
      setLEDs(errorIndex, flashIndex);
      return;
    }

    // If all are stuck we don't need to then display each individual stuck encoder
    if (errorIndex == ERR_ENC_ALL_STUCK)
 8003734:	4820      	ldr	r0, [pc, #128]	; (80037b8 <errorService+0xb0>)
 8003736:	7803      	ldrb	r3, [r0, #0]
 8003738:	2b04      	cmp	r3, #4
 800373a:	d02d      	beq.n	8003798 <errorService+0x90>
    {
      errorIndex += 4;
    }
    else
    {
      errorIndex++;
 800373c:	3301      	adds	r3, #1
 800373e:	491f      	ldr	r1, [pc, #124]	; (80037bc <errorService+0xb4>)
 8003740:	b2db      	uxtb	r3, r3
 8003742:	fba1 4103 	umull	r4, r1, r1, r3
 8003746:	08c9      	lsrs	r1, r1, #3
 8003748:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800374c:	eba3 0381 	sub.w	r3, r3, r1, lsl #2
 8003750:	b2db      	uxtb	r3, r3
    }
    errorIndex %= ERR_NUMBER;
    displaying = false;
 8003752:	2100      	movs	r1, #0
    }
    else
    {
      errorIndex++;
    }
    errorIndex %= ERR_NUMBER;
 8003754:	7003      	strb	r3, [r0, #0]
    displaying = false;
 8003756:	7011      	strb	r1, [r2, #0]
  {
    errorIndex++;
    errorIndex %= ERR_NUMBER;
  }
  return;
}
 8003758:	bc30      	pop	{r4, r5}
 800375a:	4770      	bx	lr
    displaying = false;
    return;
  }

  // If we've found a new error start displaying it
  if (errDetected[errorIndex])
 800375c:	4c16      	ldr	r4, [pc, #88]	; (80037b8 <errorService+0xb0>)
 800375e:	4b18      	ldr	r3, [pc, #96]	; (80037c0 <errorService+0xb8>)
 8003760:	7820      	ldrb	r0, [r4, #0]
 8003762:	5c1b      	ldrb	r3, [r3, r0]
 8003764:	b963      	cbnz	r3, 8003780 <errorService+0x78>
    return;
  }
  // Otherwise keep cycling and looking for an error
  else
  {
    errorIndex++;
 8003766:	3001      	adds	r0, #1
    errorIndex %= ERR_NUMBER;
 8003768:	4b14      	ldr	r3, [pc, #80]	; (80037bc <errorService+0xb4>)
 800376a:	b2c0      	uxtb	r0, r0
 800376c:	fba3 2300 	umull	r2, r3, r3, r0
 8003770:	08db      	lsrs	r3, r3, #3
 8003772:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003776:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 800377a:	7020      	strb	r0, [r4, #0]
  }
  return;
}
 800377c:	bc30      	pop	{r4, r5}
 800377e:	4770      	bx	lr

  // If we've found a new error start displaying it
  if (errDetected[errorIndex])
  {
    displaying = true;
    flashIndex = 0;
 8003780:	4c0c      	ldr	r4, [pc, #48]	; (80037b4 <errorService+0xac>)
    flashStartTime = SYSTIME;
 8003782:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <errorService+0xa4>)

  // If we've found a new error start displaying it
  if (errDetected[errorIndex])
  {
    displaying = true;
    flashIndex = 0;
 8003784:	7021      	strb	r1, [r4, #0]
    flashStartTime = SYSTIME;
 8003786:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  }

  // If we've found a new error start displaying it
  if (errDetected[errorIndex])
  {
    displaying = true;
 800378a:	2501      	movs	r5, #1
 800378c:	7015      	strb	r5, [r2, #0]
    flashIndex = 0;
    flashStartTime = SYSTIME;
 800378e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003790:	601a      	str	r2, [r3, #0]
  {
    errorIndex++;
    errorIndex %= ERR_NUMBER;
  }
  return;
}
 8003792:	bc30      	pop	{r4, r5}
  if (errDetected[errorIndex])
  {
    displaying = true;
    flashIndex = 0;
    flashStartTime = SYSTIME;
    setLEDs(errorIndex, flashIndex);
 8003794:	f7ff bfa0 	b.w	80036d8 <setLEDs>
 8003798:	2308      	movs	r3, #8
 800379a:	e7da      	b.n	8003752 <errorService+0x4a>

    flashStartTime = SYSTIME;
    flashIndex++;
    if (flashIndex < NUM_FLASHES)
    {
      setLEDs(errorIndex, flashIndex);
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <errorService+0xb0>)
  {
    errorIndex++;
    errorIndex %= ERR_NUMBER;
  }
  return;
}
 800379e:	bc30      	pop	{r4, r5}

    flashStartTime = SYSTIME;
    flashIndex++;
    if (flashIndex < NUM_FLASHES)
    {
      setLEDs(errorIndex, flashIndex);
 80037a0:	7818      	ldrb	r0, [r3, #0]
 80037a2:	f7ff bf99 	b.w	80036d8 <setLEDs>
 80037a6:	bf00      	nop
 80037a8:	20010030 	.word	0x20010030
 80037ac:	2001001c 	.word	0x2001001c
 80037b0:	0003d08f 	.word	0x0003d08f
 80037b4:	20010018 	.word	0x20010018
 80037b8:	20010020 	.word	0x20010020
 80037bc:	aaaaaaab 	.word	0xaaaaaaab
 80037c0:	20010024 	.word	0x20010024

080037c4 <err_set>:
  }
  return;
}

void err_set(error_type_t err) {
  errDetected[err] = 1;
 80037c4:	4b01      	ldr	r3, [pc, #4]	; (80037cc <err_set+0x8>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	541a      	strb	r2, [r3, r0]
 80037ca:	4770      	bx	lr
 80037cc:	20010024 	.word	0x20010024

080037d0 <err_unset>:
}

void err_unset(error_type_t err) {
  errDetected[err] = 0;
 80037d0:	4b01      	ldr	r3, [pc, #4]	; (80037d8 <err_unset+0x8>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	541a      	strb	r2, [r3, r0]
 80037d6:	4770      	bx	lr
 80037d8:	20010024 	.word	0x20010024

080037dc <exit>:
 80037dc:	b508      	push	{r3, lr}
 80037de:	2100      	movs	r1, #0
 80037e0:	4604      	mov	r4, r0
 80037e2:	f001 fc7b 	bl	80050dc <__call_exitprocs>
 80037e6:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <exit+0x1c>)
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80037ec:	b103      	cbz	r3, 80037f0 <exit+0x14>
 80037ee:	4798      	blx	r3
 80037f0:	4620      	mov	r0, r4
 80037f2:	f7fd ff3f 	bl	8001674 <_exit>
 80037f6:	bf00      	nop
 80037f8:	0800ad5c 	.word	0x0800ad5c

080037fc <__libc_init_array>:
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	4e0f      	ldr	r6, [pc, #60]	; (800383c <__libc_init_array+0x40>)
 8003800:	4d0f      	ldr	r5, [pc, #60]	; (8003840 <__libc_init_array+0x44>)
 8003802:	1b76      	subs	r6, r6, r5
 8003804:	10b6      	asrs	r6, r6, #2
 8003806:	bf18      	it	ne
 8003808:	2400      	movne	r4, #0
 800380a:	d005      	beq.n	8003818 <__libc_init_array+0x1c>
 800380c:	3401      	adds	r4, #1
 800380e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003812:	4798      	blx	r3
 8003814:	42a6      	cmp	r6, r4
 8003816:	d1f9      	bne.n	800380c <__libc_init_array+0x10>
 8003818:	4e0a      	ldr	r6, [pc, #40]	; (8003844 <__libc_init_array+0x48>)
 800381a:	4d0b      	ldr	r5, [pc, #44]	; (8003848 <__libc_init_array+0x4c>)
 800381c:	1b76      	subs	r6, r6, r5
 800381e:	f007 fb83 	bl	800af28 <_init>
 8003822:	10b6      	asrs	r6, r6, #2
 8003824:	bf18      	it	ne
 8003826:	2400      	movne	r4, #0
 8003828:	d006      	beq.n	8003838 <__libc_init_array+0x3c>
 800382a:	3401      	adds	r4, #1
 800382c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003830:	4798      	blx	r3
 8003832:	42a6      	cmp	r6, r4
 8003834:	d1f9      	bne.n	800382a <__libc_init_array+0x2e>
 8003836:	bd70      	pop	{r4, r5, r6, pc}
 8003838:	bd70      	pop	{r4, r5, r6, pc}
 800383a:	bf00      	nop
 800383c:	0800af34 	.word	0x0800af34
 8003840:	0800af34 	.word	0x0800af34
 8003844:	0800af3c 	.word	0x0800af3c
 8003848:	0800af34 	.word	0x0800af34

0800384c <memcpy>:
 800384c:	4684      	mov	ip, r0
 800384e:	ea41 0300 	orr.w	r3, r1, r0
 8003852:	f013 0303 	ands.w	r3, r3, #3
 8003856:	d16d      	bne.n	8003934 <memcpy+0xe8>
 8003858:	3a40      	subs	r2, #64	; 0x40
 800385a:	d341      	bcc.n	80038e0 <memcpy+0x94>
 800385c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003860:	f840 3b04 	str.w	r3, [r0], #4
 8003864:	f851 3b04 	ldr.w	r3, [r1], #4
 8003868:	f840 3b04 	str.w	r3, [r0], #4
 800386c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003870:	f840 3b04 	str.w	r3, [r0], #4
 8003874:	f851 3b04 	ldr.w	r3, [r1], #4
 8003878:	f840 3b04 	str.w	r3, [r0], #4
 800387c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003880:	f840 3b04 	str.w	r3, [r0], #4
 8003884:	f851 3b04 	ldr.w	r3, [r1], #4
 8003888:	f840 3b04 	str.w	r3, [r0], #4
 800388c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003890:	f840 3b04 	str.w	r3, [r0], #4
 8003894:	f851 3b04 	ldr.w	r3, [r1], #4
 8003898:	f840 3b04 	str.w	r3, [r0], #4
 800389c:	f851 3b04 	ldr.w	r3, [r1], #4
 80038a0:	f840 3b04 	str.w	r3, [r0], #4
 80038a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80038a8:	f840 3b04 	str.w	r3, [r0], #4
 80038ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80038b0:	f840 3b04 	str.w	r3, [r0], #4
 80038b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80038b8:	f840 3b04 	str.w	r3, [r0], #4
 80038bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80038c0:	f840 3b04 	str.w	r3, [r0], #4
 80038c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80038c8:	f840 3b04 	str.w	r3, [r0], #4
 80038cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80038d0:	f840 3b04 	str.w	r3, [r0], #4
 80038d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80038d8:	f840 3b04 	str.w	r3, [r0], #4
 80038dc:	3a40      	subs	r2, #64	; 0x40
 80038de:	d2bd      	bcs.n	800385c <memcpy+0x10>
 80038e0:	3230      	adds	r2, #48	; 0x30
 80038e2:	d311      	bcc.n	8003908 <memcpy+0xbc>
 80038e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80038e8:	f840 3b04 	str.w	r3, [r0], #4
 80038ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80038f0:	f840 3b04 	str.w	r3, [r0], #4
 80038f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80038f8:	f840 3b04 	str.w	r3, [r0], #4
 80038fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8003900:	f840 3b04 	str.w	r3, [r0], #4
 8003904:	3a10      	subs	r2, #16
 8003906:	d2ed      	bcs.n	80038e4 <memcpy+0x98>
 8003908:	320c      	adds	r2, #12
 800390a:	d305      	bcc.n	8003918 <memcpy+0xcc>
 800390c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003910:	f840 3b04 	str.w	r3, [r0], #4
 8003914:	3a04      	subs	r2, #4
 8003916:	d2f9      	bcs.n	800390c <memcpy+0xc0>
 8003918:	3204      	adds	r2, #4
 800391a:	d008      	beq.n	800392e <memcpy+0xe2>
 800391c:	07d2      	lsls	r2, r2, #31
 800391e:	bf1c      	itt	ne
 8003920:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003924:	f800 3b01 	strbne.w	r3, [r0], #1
 8003928:	d301      	bcc.n	800392e <memcpy+0xe2>
 800392a:	880b      	ldrh	r3, [r1, #0]
 800392c:	8003      	strh	r3, [r0, #0]
 800392e:	4660      	mov	r0, ip
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	2a08      	cmp	r2, #8
 8003936:	d313      	bcc.n	8003960 <memcpy+0x114>
 8003938:	078b      	lsls	r3, r1, #30
 800393a:	d08d      	beq.n	8003858 <memcpy+0xc>
 800393c:	f010 0303 	ands.w	r3, r0, #3
 8003940:	d08a      	beq.n	8003858 <memcpy+0xc>
 8003942:	f1c3 0304 	rsb	r3, r3, #4
 8003946:	1ad2      	subs	r2, r2, r3
 8003948:	07db      	lsls	r3, r3, #31
 800394a:	bf1c      	itt	ne
 800394c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003950:	f800 3b01 	strbne.w	r3, [r0], #1
 8003954:	d380      	bcc.n	8003858 <memcpy+0xc>
 8003956:	f831 3b02 	ldrh.w	r3, [r1], #2
 800395a:	f820 3b02 	strh.w	r3, [r0], #2
 800395e:	e77b      	b.n	8003858 <memcpy+0xc>
 8003960:	3a04      	subs	r2, #4
 8003962:	d3d9      	bcc.n	8003918 <memcpy+0xcc>
 8003964:	3a01      	subs	r2, #1
 8003966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800396a:	f800 3b01 	strb.w	r3, [r0], #1
 800396e:	d2f9      	bcs.n	8003964 <memcpy+0x118>
 8003970:	780b      	ldrb	r3, [r1, #0]
 8003972:	7003      	strb	r3, [r0, #0]
 8003974:	784b      	ldrb	r3, [r1, #1]
 8003976:	7043      	strb	r3, [r0, #1]
 8003978:	788b      	ldrb	r3, [r1, #2]
 800397a:	7083      	strb	r3, [r0, #2]
 800397c:	4660      	mov	r0, ip
 800397e:	4770      	bx	lr

08003980 <memset>:
 8003980:	b470      	push	{r4, r5, r6}
 8003982:	0784      	lsls	r4, r0, #30
 8003984:	d046      	beq.n	8003a14 <memset+0x94>
 8003986:	1e54      	subs	r4, r2, #1
 8003988:	2a00      	cmp	r2, #0
 800398a:	d041      	beq.n	8003a10 <memset+0x90>
 800398c:	b2cd      	uxtb	r5, r1
 800398e:	4603      	mov	r3, r0
 8003990:	e002      	b.n	8003998 <memset+0x18>
 8003992:	1e62      	subs	r2, r4, #1
 8003994:	b3e4      	cbz	r4, 8003a10 <memset+0x90>
 8003996:	4614      	mov	r4, r2
 8003998:	f803 5b01 	strb.w	r5, [r3], #1
 800399c:	079a      	lsls	r2, r3, #30
 800399e:	d1f8      	bne.n	8003992 <memset+0x12>
 80039a0:	2c03      	cmp	r4, #3
 80039a2:	d92e      	bls.n	8003a02 <memset+0x82>
 80039a4:	b2cd      	uxtb	r5, r1
 80039a6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80039aa:	2c0f      	cmp	r4, #15
 80039ac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80039b0:	d919      	bls.n	80039e6 <memset+0x66>
 80039b2:	f103 0210 	add.w	r2, r3, #16
 80039b6:	4626      	mov	r6, r4
 80039b8:	3e10      	subs	r6, #16
 80039ba:	2e0f      	cmp	r6, #15
 80039bc:	f842 5c10 	str.w	r5, [r2, #-16]
 80039c0:	f842 5c0c 	str.w	r5, [r2, #-12]
 80039c4:	f842 5c08 	str.w	r5, [r2, #-8]
 80039c8:	f842 5c04 	str.w	r5, [r2, #-4]
 80039cc:	f102 0210 	add.w	r2, r2, #16
 80039d0:	d8f2      	bhi.n	80039b8 <memset+0x38>
 80039d2:	f1a4 0210 	sub.w	r2, r4, #16
 80039d6:	f022 020f 	bic.w	r2, r2, #15
 80039da:	f004 040f 	and.w	r4, r4, #15
 80039de:	3210      	adds	r2, #16
 80039e0:	2c03      	cmp	r4, #3
 80039e2:	4413      	add	r3, r2
 80039e4:	d90d      	bls.n	8003a02 <memset+0x82>
 80039e6:	461e      	mov	r6, r3
 80039e8:	4622      	mov	r2, r4
 80039ea:	3a04      	subs	r2, #4
 80039ec:	2a03      	cmp	r2, #3
 80039ee:	f846 5b04 	str.w	r5, [r6], #4
 80039f2:	d8fa      	bhi.n	80039ea <memset+0x6a>
 80039f4:	1f22      	subs	r2, r4, #4
 80039f6:	f022 0203 	bic.w	r2, r2, #3
 80039fa:	3204      	adds	r2, #4
 80039fc:	4413      	add	r3, r2
 80039fe:	f004 0403 	and.w	r4, r4, #3
 8003a02:	b12c      	cbz	r4, 8003a10 <memset+0x90>
 8003a04:	b2c9      	uxtb	r1, r1
 8003a06:	441c      	add	r4, r3
 8003a08:	f803 1b01 	strb.w	r1, [r3], #1
 8003a0c:	42a3      	cmp	r3, r4
 8003a0e:	d1fb      	bne.n	8003a08 <memset+0x88>
 8003a10:	bc70      	pop	{r4, r5, r6}
 8003a12:	4770      	bx	lr
 8003a14:	4614      	mov	r4, r2
 8003a16:	4603      	mov	r3, r0
 8003a18:	e7c2      	b.n	80039a0 <memset+0x20>
 8003a1a:	bf00      	nop

08003a1c <_printf_r>:
 8003a1c:	b40e      	push	{r1, r2, r3}
 8003a1e:	b500      	push	{lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	ab03      	add	r3, sp, #12
 8003a24:	6881      	ldr	r1, [r0, #8]
 8003a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a2a:	9301      	str	r3, [sp, #4]
 8003a2c:	f000 f890 	bl	8003b50 <_vfprintf_r>
 8003a30:	b002      	add	sp, #8
 8003a32:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a36:	b003      	add	sp, #12
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop

08003a3c <printf>:
 8003a3c:	b40f      	push	{r0, r1, r2, r3}
 8003a3e:	b500      	push	{lr}
 8003a40:	4907      	ldr	r1, [pc, #28]	; (8003a60 <printf+0x24>)
 8003a42:	b083      	sub	sp, #12
 8003a44:	ab04      	add	r3, sp, #16
 8003a46:	6808      	ldr	r0, [r1, #0]
 8003a48:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a4c:	6881      	ldr	r1, [r0, #8]
 8003a4e:	9301      	str	r3, [sp, #4]
 8003a50:	f000 f87e 	bl	8003b50 <_vfprintf_r>
 8003a54:	b003      	add	sp, #12
 8003a56:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a5a:	b004      	add	sp, #16
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	200004d0 	.word	0x200004d0

08003a64 <_putchar_r>:
 8003a64:	6882      	ldr	r2, [r0, #8]
 8003a66:	f004 b8e7 	b.w	8007c38 <_putc_r>
 8003a6a:	bf00      	nop

08003a6c <putchar>:
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <putchar+0x10>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4601      	mov	r1, r0
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f004 b8df 	b.w	8007c38 <_putc_r>
 8003a7a:	bf00      	nop
 8003a7c:	200004d0 	.word	0x200004d0

08003a80 <_puts_r>:
 8003a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a82:	4605      	mov	r5, r0
 8003a84:	b089      	sub	sp, #36	; 0x24
 8003a86:	4608      	mov	r0, r1
 8003a88:	460c      	mov	r4, r1
 8003a8a:	f000 f833 	bl	8003af4 <strlen>
 8003a8e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003a90:	4f13      	ldr	r7, [pc, #76]	; (8003ae0 <_puts_r+0x60>)
 8003a92:	9404      	str	r4, [sp, #16]
 8003a94:	2601      	movs	r6, #1
 8003a96:	1c44      	adds	r4, r0, #1
 8003a98:	a904      	add	r1, sp, #16
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	9403      	str	r4, [sp, #12]
 8003a9e:	9005      	str	r0, [sp, #20]
 8003aa0:	68ac      	ldr	r4, [r5, #8]
 8003aa2:	9706      	str	r7, [sp, #24]
 8003aa4:	9607      	str	r6, [sp, #28]
 8003aa6:	9101      	str	r1, [sp, #4]
 8003aa8:	9202      	str	r2, [sp, #8]
 8003aaa:	b1ab      	cbz	r3, 8003ad8 <_puts_r+0x58>
 8003aac:	89a3      	ldrh	r3, [r4, #12]
 8003aae:	049a      	lsls	r2, r3, #18
 8003ab0:	d406      	bmi.n	8003ac0 <_puts_r+0x40>
 8003ab2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ab4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ab8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003abc:	81a3      	strh	r3, [r4, #12]
 8003abe:	6662      	str	r2, [r4, #100]	; 0x64
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	aa01      	add	r2, sp, #4
 8003ac6:	f002 fe79 	bl	80067bc <__sfvwrite_r>
 8003aca:	2800      	cmp	r0, #0
 8003acc:	bf14      	ite	ne
 8003ace:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8003ad2:	200a      	moveq	r0, #10
 8003ad4:	b009      	add	sp, #36	; 0x24
 8003ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad8:	4628      	mov	r0, r5
 8003ada:	f002 fd11 	bl	8006500 <__sinit>
 8003ade:	e7e5      	b.n	8003aac <_puts_r+0x2c>
 8003ae0:	0800ab5c 	.word	0x0800ab5c

08003ae4 <puts>:
 8003ae4:	4b02      	ldr	r3, [pc, #8]	; (8003af0 <puts+0xc>)
 8003ae6:	4601      	mov	r1, r0
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	f7ff bfc9 	b.w	8003a80 <_puts_r>
 8003aee:	bf00      	nop
 8003af0:	200004d0 	.word	0x200004d0

08003af4 <strlen>:
 8003af4:	f020 0103 	bic.w	r1, r0, #3
 8003af8:	f010 0003 	ands.w	r0, r0, #3
 8003afc:	f1c0 0000 	rsb	r0, r0, #0
 8003b00:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b04:	f100 0c04 	add.w	ip, r0, #4
 8003b08:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8003b0c:	f06f 0200 	mvn.w	r2, #0
 8003b10:	bf1c      	itt	ne
 8003b12:	fa22 f20c 	lsrne.w	r2, r2, ip
 8003b16:	4313      	orrne	r3, r2
 8003b18:	f04f 0c01 	mov.w	ip, #1
 8003b1c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8003b20:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8003b24:	eba3 020c 	sub.w	r2, r3, ip
 8003b28:	ea22 0203 	bic.w	r2, r2, r3
 8003b2c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8003b30:	bf04      	itt	eq
 8003b32:	f851 3b04 	ldreq.w	r3, [r1], #4
 8003b36:	3004      	addeq	r0, #4
 8003b38:	d0f4      	beq.n	8003b24 <strlen+0x30>
 8003b3a:	f1c2 0100 	rsb	r1, r2, #0
 8003b3e:	ea02 0201 	and.w	r2, r2, r1
 8003b42:	fab2 f282 	clz	r2, r2
 8003b46:	f1c2 021f 	rsb	r2, r2, #31
 8003b4a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8003b4e:	4770      	bx	lr

08003b50 <_vfprintf_r>:
 8003b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b54:	b0bd      	sub	sp, #244	; 0xf4
 8003b56:	461c      	mov	r4, r3
 8003b58:	4689      	mov	r9, r1
 8003b5a:	9204      	str	r2, [sp, #16]
 8003b5c:	4607      	mov	r7, r0
 8003b5e:	f003 f83b 	bl	8006bd8 <_localeconv_r>
 8003b62:	6803      	ldr	r3, [r0, #0]
 8003b64:	9311      	str	r3, [sp, #68]	; 0x44
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff ffc4 	bl	8003af4 <strlen>
 8003b6c:	9408      	str	r4, [sp, #32]
 8003b6e:	9012      	str	r0, [sp, #72]	; 0x48
 8003b70:	b11f      	cbz	r7, 8003b7a <_vfprintf_r+0x2a>
 8003b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80f3 	beq.w	8003d60 <_vfprintf_r+0x210>
 8003b7a:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8003b7e:	b293      	uxth	r3, r2
 8003b80:	049e      	lsls	r6, r3, #18
 8003b82:	d40a      	bmi.n	8003b9a <_vfprintf_r+0x4a>
 8003b84:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 8003b88:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8003b8c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8003b90:	f8a9 300c 	strh.w	r3, [r9, #12]
 8003b94:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	071d      	lsls	r5, r3, #28
 8003b9c:	f140 80aa 	bpl.w	8003cf4 <_vfprintf_r+0x1a4>
 8003ba0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8003ba4:	2a00      	cmp	r2, #0
 8003ba6:	f000 80a5 	beq.w	8003cf4 <_vfprintf_r+0x1a4>
 8003baa:	f003 031a 	and.w	r3, r3, #26
 8003bae:	2b0a      	cmp	r3, #10
 8003bb0:	f000 80ac 	beq.w	8003d0c <_vfprintf_r+0x1bc>
 8003bb4:	ed9f 7b6e 	vldr	d7, [pc, #440]	; 8003d70 <_vfprintf_r+0x220>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003bbe:	930d      	str	r3, [sp, #52]	; 0x34
 8003bc0:	9321      	str	r3, [sp, #132]	; 0x84
 8003bc2:	9320      	str	r3, [sp, #128]	; 0x80
 8003bc4:	9310      	str	r3, [sp, #64]	; 0x40
 8003bc6:	9313      	str	r3, [sp, #76]	; 0x4c
 8003bc8:	9305      	str	r3, [sp, #20]
 8003bca:	ab2c      	add	r3, sp, #176	; 0xb0
 8003bcc:	931f      	str	r3, [sp, #124]	; 0x7c
 8003bce:	461c      	mov	r4, r3
 8003bd0:	46b8      	mov	r8, r7
 8003bd2:	9d04      	ldr	r5, [sp, #16]
 8003bd4:	782b      	ldrb	r3, [r5, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 80c6 	beq.w	8003d68 <_vfprintf_r+0x218>
 8003bdc:	2b25      	cmp	r3, #37	; 0x25
 8003bde:	d102      	bne.n	8003be6 <_vfprintf_r+0x96>
 8003be0:	e0c2      	b.n	8003d68 <_vfprintf_r+0x218>
 8003be2:	2b25      	cmp	r3, #37	; 0x25
 8003be4:	d003      	beq.n	8003bee <_vfprintf_r+0x9e>
 8003be6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f9      	bne.n	8003be2 <_vfprintf_r+0x92>
 8003bee:	9b04      	ldr	r3, [sp, #16]
 8003bf0:	1aee      	subs	r6, r5, r3
 8003bf2:	b17e      	cbz	r6, 8003c14 <_vfprintf_r+0xc4>
 8003bf4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003bf6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003bf8:	9904      	ldr	r1, [sp, #16]
 8003bfa:	6021      	str	r1, [r4, #0]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	4432      	add	r2, r6
 8003c00:	2b07      	cmp	r3, #7
 8003c02:	6066      	str	r6, [r4, #4]
 8003c04:	9221      	str	r2, [sp, #132]	; 0x84
 8003c06:	9320      	str	r3, [sp, #128]	; 0x80
 8003c08:	f300 8093 	bgt.w	8003d32 <_vfprintf_r+0x1e2>
 8003c0c:	3408      	adds	r4, #8
 8003c0e:	9b05      	ldr	r3, [sp, #20]
 8003c10:	4433      	add	r3, r6
 8003c12:	9305      	str	r3, [sp, #20]
 8003c14:	782b      	ldrb	r3, [r5, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 8093 	beq.w	8003d42 <_vfprintf_r+0x1f2>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	1c69      	adds	r1, r5, #1
 8003c20:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003c24:	786d      	ldrb	r5, [r5, #1]
 8003c26:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	9306      	str	r3, [sp, #24]
 8003c2e:	9302      	str	r3, [sp, #8]
 8003c30:	4656      	mov	r6, sl
 8003c32:	1c4b      	adds	r3, r1, #1
 8003c34:	f1a5 0120 	sub.w	r1, r5, #32
 8003c38:	2958      	cmp	r1, #88	; 0x58
 8003c3a:	f200 83cd 	bhi.w	80043d8 <_vfprintf_r+0x888>
 8003c3e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003c42:	025c      	.short	0x025c
 8003c44:	03cb03cb 	.word	0x03cb03cb
 8003c48:	03cb0302 	.word	0x03cb0302
 8003c4c:	03cb03cb 	.word	0x03cb03cb
 8003c50:	03cb03cb 	.word	0x03cb03cb
 8003c54:	030903cb 	.word	0x030903cb
 8003c58:	03cb02d2 	.word	0x03cb02d2
 8003c5c:	035301f8 	.word	0x035301f8
 8003c60:	02d603cb 	.word	0x02d603cb
 8003c64:	02dd02dd 	.word	0x02dd02dd
 8003c68:	02dd02dd 	.word	0x02dd02dd
 8003c6c:	02dd02dd 	.word	0x02dd02dd
 8003c70:	02dd02dd 	.word	0x02dd02dd
 8003c74:	03cb02dd 	.word	0x03cb02dd
 8003c78:	03cb03cb 	.word	0x03cb03cb
 8003c7c:	03cb03cb 	.word	0x03cb03cb
 8003c80:	03cb03cb 	.word	0x03cb03cb
 8003c84:	03cb03cb 	.word	0x03cb03cb
 8003c88:	027103cb 	.word	0x027103cb
 8003c8c:	03cb0293 	.word	0x03cb0293
 8003c90:	03cb0293 	.word	0x03cb0293
 8003c94:	03cb03cb 	.word	0x03cb03cb
 8003c98:	02cb03cb 	.word	0x02cb03cb
 8003c9c:	03cb03cb 	.word	0x03cb03cb
 8003ca0:	03cb036e 	.word	0x03cb036e
 8003ca4:	03cb03cb 	.word	0x03cb03cb
 8003ca8:	03cb03cb 	.word	0x03cb03cb
 8003cac:	03cb03b5 	.word	0x03cb03b5
 8003cb0:	038b03cb 	.word	0x038b03cb
 8003cb4:	03cb03cb 	.word	0x03cb03cb
 8003cb8:	03cb03cb 	.word	0x03cb03cb
 8003cbc:	03cb03cb 	.word	0x03cb03cb
 8003cc0:	03cb03cb 	.word	0x03cb03cb
 8003cc4:	03cb03cb 	.word	0x03cb03cb
 8003cc8:	031703a0 	.word	0x031703a0
 8003ccc:	02930293 	.word	0x02930293
 8003cd0:	03300293 	.word	0x03300293
 8003cd4:	03cb0317 	.word	0x03cb0317
 8003cd8:	033703cb 	.word	0x033703cb
 8003cdc:	034103cb 	.word	0x034103cb
 8003ce0:	02ec01ff 	.word	0x02ec01ff
 8003ce4:	03cb0263 	.word	0x03cb0263
 8003ce8:	03cb0211 	.word	0x03cb0211
 8003cec:	03cb009b 	.word	0x03cb009b
 8003cf0:	023603cb 	.word	0x023603cb
 8003cf4:	4638      	mov	r0, r7
 8003cf6:	4649      	mov	r1, r9
 8003cf8:	f001 f984 	bl	8005004 <__swsetup_r>
 8003cfc:	b9a0      	cbnz	r0, 8003d28 <_vfprintf_r+0x1d8>
 8003cfe:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003d02:	f003 031a 	and.w	r3, r3, #26
 8003d06:	2b0a      	cmp	r3, #10
 8003d08:	f47f af54 	bne.w	8003bb4 <_vfprintf_r+0x64>
 8003d0c:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f6ff af4f 	blt.w	8003bb4 <_vfprintf_r+0x64>
 8003d16:	4638      	mov	r0, r7
 8003d18:	4649      	mov	r1, r9
 8003d1a:	9a04      	ldr	r2, [sp, #16]
 8003d1c:	4623      	mov	r3, r4
 8003d1e:	f001 f935 	bl	8004f8c <__sbprintf>
 8003d22:	b03d      	add	sp, #244	; 0xf4
 8003d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d2c:	b03d      	add	sp, #244	; 0xf4
 8003d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d32:	4640      	mov	r0, r8
 8003d34:	4649      	mov	r1, r9
 8003d36:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d38:	f004 fc0c 	bl	8008554 <__sprint_r>
 8003d3c:	b940      	cbnz	r0, 8003d50 <_vfprintf_r+0x200>
 8003d3e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003d40:	e765      	b.n	8003c0e <_vfprintf_r+0xbe>
 8003d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d44:	b123      	cbz	r3, 8003d50 <_vfprintf_r+0x200>
 8003d46:	4640      	mov	r0, r8
 8003d48:	4649      	mov	r1, r9
 8003d4a:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d4c:	f004 fc02 	bl	8008554 <__sprint_r>
 8003d50:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003d54:	065a      	lsls	r2, r3, #25
 8003d56:	d4e7      	bmi.n	8003d28 <_vfprintf_r+0x1d8>
 8003d58:	9805      	ldr	r0, [sp, #20]
 8003d5a:	b03d      	add	sp, #244	; 0xf4
 8003d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d60:	4638      	mov	r0, r7
 8003d62:	f002 fbcd 	bl	8006500 <__sinit>
 8003d66:	e708      	b.n	8003b7a <_vfprintf_r+0x2a>
 8003d68:	9d04      	ldr	r5, [sp, #16]
 8003d6a:	e753      	b.n	8003c14 <_vfprintf_r+0xc4>
 8003d6c:	f3af 8000 	nop.w
	...
 8003d78:	9304      	str	r3, [sp, #16]
 8003d7a:	9b02      	ldr	r3, [sp, #8]
 8003d7c:	46b2      	mov	sl, r6
 8003d7e:	069e      	lsls	r6, r3, #26
 8003d80:	f140 831e 	bpl.w	80043c0 <_vfprintf_r+0x870>
 8003d84:	9f08      	ldr	r7, [sp, #32]
 8003d86:	3707      	adds	r7, #7
 8003d88:	f027 0307 	bic.w	r3, r7, #7
 8003d8c:	f103 0208 	add.w	r2, r3, #8
 8003d90:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003d94:	9208      	str	r2, [sp, #32]
 8003d96:	2301      	movs	r3, #1
 8003d98:	f04f 0c00 	mov.w	ip, #0
 8003d9c:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 8003da0:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8003da4:	f1ba 0f00 	cmp.w	sl, #0
 8003da8:	db03      	blt.n	8003db2 <_vfprintf_r+0x262>
 8003daa:	9a02      	ldr	r2, [sp, #8]
 8003dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003db0:	9202      	str	r2, [sp, #8]
 8003db2:	ea56 0207 	orrs.w	r2, r6, r7
 8003db6:	f040 831f 	bne.w	80043f8 <_vfprintf_r+0x8a8>
 8003dba:	f1ba 0f00 	cmp.w	sl, #0
 8003dbe:	f000 841c 	beq.w	80045fa <_vfprintf_r+0xaaa>
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	f000 8320 	beq.w	8004408 <_vfprintf_r+0x8b8>
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	f000 8452 	beq.w	8004672 <_vfprintf_r+0xb22>
 8003dce:	a92c      	add	r1, sp, #176	; 0xb0
 8003dd0:	08f2      	lsrs	r2, r6, #3
 8003dd2:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8003dd6:	08f8      	lsrs	r0, r7, #3
 8003dd8:	f006 0307 	and.w	r3, r6, #7
 8003ddc:	4607      	mov	r7, r0
 8003dde:	4616      	mov	r6, r2
 8003de0:	3330      	adds	r3, #48	; 0x30
 8003de2:	ea56 0207 	orrs.w	r2, r6, r7
 8003de6:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8003dea:	d1f1      	bne.n	8003dd0 <_vfprintf_r+0x280>
 8003dec:	9a02      	ldr	r2, [sp, #8]
 8003dee:	910a      	str	r1, [sp, #40]	; 0x28
 8003df0:	07d0      	lsls	r0, r2, #31
 8003df2:	f100 84f9 	bmi.w	80047e8 <_vfprintf_r+0xc98>
 8003df6:	ab2c      	add	r3, sp, #176	; 0xb0
 8003df8:	1a5b      	subs	r3, r3, r1
 8003dfa:	9307      	str	r3, [sp, #28]
 8003dfc:	9a07      	ldr	r2, [sp, #28]
 8003dfe:	4592      	cmp	sl, r2
 8003e00:	4653      	mov	r3, sl
 8003e02:	bfb8      	it	lt
 8003e04:	4613      	movlt	r3, r2
 8003e06:	9303      	str	r3, [sp, #12]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	930c      	str	r3, [sp, #48]	; 0x30
 8003e0c:	f1bc 0f00 	cmp.w	ip, #0
 8003e10:	d002      	beq.n	8003e18 <_vfprintf_r+0x2c8>
 8003e12:	9b03      	ldr	r3, [sp, #12]
 8003e14:	3301      	adds	r3, #1
 8003e16:	9303      	str	r3, [sp, #12]
 8003e18:	9b02      	ldr	r3, [sp, #8]
 8003e1a:	f013 0302 	ands.w	r3, r3, #2
 8003e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e20:	d002      	beq.n	8003e28 <_vfprintf_r+0x2d8>
 8003e22:	9b03      	ldr	r3, [sp, #12]
 8003e24:	3302      	adds	r3, #2
 8003e26:	9303      	str	r3, [sp, #12]
 8003e28:	9b02      	ldr	r3, [sp, #8]
 8003e2a:	f013 0684 	ands.w	r6, r3, #132	; 0x84
 8003e2e:	f040 82e0 	bne.w	80043f2 <_vfprintf_r+0x8a2>
 8003e32:	9b06      	ldr	r3, [sp, #24]
 8003e34:	9a03      	ldr	r2, [sp, #12]
 8003e36:	ebc2 0a03 	rsb	sl, r2, r3
 8003e3a:	f1ba 0f00 	cmp.w	sl, #0
 8003e3e:	f340 82d8 	ble.w	80043f2 <_vfprintf_r+0x8a2>
 8003e42:	f1ba 0f10 	cmp.w	sl, #16
 8003e46:	9921      	ldr	r1, [sp, #132]	; 0x84
 8003e48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003e4a:	4fb3      	ldr	r7, [pc, #716]	; (8004118 <_vfprintf_r+0x5c8>)
 8003e4c:	bfc8      	it	gt
 8003e4e:	f04f 0b10 	movgt.w	fp, #16
 8003e52:	dc07      	bgt.n	8003e64 <_vfprintf_r+0x314>
 8003e54:	e01e      	b.n	8003e94 <_vfprintf_r+0x344>
 8003e56:	f1aa 0a10 	sub.w	sl, sl, #16
 8003e5a:	f1ba 0f10 	cmp.w	sl, #16
 8003e5e:	f104 0408 	add.w	r4, r4, #8
 8003e62:	dd17      	ble.n	8003e94 <_vfprintf_r+0x344>
 8003e64:	3201      	adds	r2, #1
 8003e66:	3110      	adds	r1, #16
 8003e68:	2a07      	cmp	r2, #7
 8003e6a:	9121      	str	r1, [sp, #132]	; 0x84
 8003e6c:	9220      	str	r2, [sp, #128]	; 0x80
 8003e6e:	e884 0880 	stmia.w	r4, {r7, fp}
 8003e72:	ddf0      	ble.n	8003e56 <_vfprintf_r+0x306>
 8003e74:	4640      	mov	r0, r8
 8003e76:	4649      	mov	r1, r9
 8003e78:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e7a:	f004 fb6b 	bl	8008554 <__sprint_r>
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	f47f af66 	bne.w	8003d50 <_vfprintf_r+0x200>
 8003e84:	f1aa 0a10 	sub.w	sl, sl, #16
 8003e88:	f1ba 0f10 	cmp.w	sl, #16
 8003e8c:	9921      	ldr	r1, [sp, #132]	; 0x84
 8003e8e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003e90:	ac2c      	add	r4, sp, #176	; 0xb0
 8003e92:	dce7      	bgt.n	8003e64 <_vfprintf_r+0x314>
 8003e94:	3201      	adds	r2, #1
 8003e96:	eb0a 0b01 	add.w	fp, sl, r1
 8003e9a:	2a07      	cmp	r2, #7
 8003e9c:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8003ea0:	9220      	str	r2, [sp, #128]	; 0x80
 8003ea2:	e884 0480 	stmia.w	r4, {r7, sl}
 8003ea6:	f300 844a 	bgt.w	800473e <_vfprintf_r+0xbee>
 8003eaa:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8003eae:	3408      	adds	r4, #8
 8003eb0:	f1bc 0f00 	cmp.w	ip, #0
 8003eb4:	d00f      	beq.n	8003ed6 <_vfprintf_r+0x386>
 8003eb6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003eb8:	3301      	adds	r3, #1
 8003eba:	f10b 0b01 	add.w	fp, fp, #1
 8003ebe:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	2b07      	cmp	r3, #7
 8003ec6:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8003eca:	9320      	str	r3, [sp, #128]	; 0x80
 8003ecc:	e884 0006 	stmia.w	r4, {r1, r2}
 8003ed0:	f300 83b1 	bgt.w	8004636 <_vfprintf_r+0xae6>
 8003ed4:	3408      	adds	r4, #8
 8003ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ed8:	b173      	cbz	r3, 8003ef8 <_vfprintf_r+0x3a8>
 8003eda:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003edc:	3301      	adds	r3, #1
 8003ede:	f10b 0b02 	add.w	fp, fp, #2
 8003ee2:	a918      	add	r1, sp, #96	; 0x60
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	2b07      	cmp	r3, #7
 8003ee8:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8003eec:	9320      	str	r3, [sp, #128]	; 0x80
 8003eee:	e884 0006 	stmia.w	r4, {r1, r2}
 8003ef2:	f300 83ac 	bgt.w	800464e <_vfprintf_r+0xafe>
 8003ef6:	3408      	adds	r4, #8
 8003ef8:	2e80      	cmp	r6, #128	; 0x80
 8003efa:	f000 82f0 	beq.w	80044de <_vfprintf_r+0x98e>
 8003efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f00:	9a07      	ldr	r2, [sp, #28]
 8003f02:	ebc2 0a03 	rsb	sl, r2, r3
 8003f06:	f1ba 0f00 	cmp.w	sl, #0
 8003f0a:	dd32      	ble.n	8003f72 <_vfprintf_r+0x422>
 8003f0c:	f1ba 0f10 	cmp.w	sl, #16
 8003f10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003f12:	4f82      	ldr	r7, [pc, #520]	; (800411c <_vfprintf_r+0x5cc>)
 8003f14:	dd22      	ble.n	8003f5c <_vfprintf_r+0x40c>
 8003f16:	2610      	movs	r6, #16
 8003f18:	465b      	mov	r3, fp
 8003f1a:	e006      	b.n	8003f2a <_vfprintf_r+0x3da>
 8003f1c:	f1aa 0a10 	sub.w	sl, sl, #16
 8003f20:	f1ba 0f10 	cmp.w	sl, #16
 8003f24:	f104 0408 	add.w	r4, r4, #8
 8003f28:	dd17      	ble.n	8003f5a <_vfprintf_r+0x40a>
 8003f2a:	3201      	adds	r2, #1
 8003f2c:	3310      	adds	r3, #16
 8003f2e:	2a07      	cmp	r2, #7
 8003f30:	9321      	str	r3, [sp, #132]	; 0x84
 8003f32:	9220      	str	r2, [sp, #128]	; 0x80
 8003f34:	6027      	str	r7, [r4, #0]
 8003f36:	6066      	str	r6, [r4, #4]
 8003f38:	ddf0      	ble.n	8003f1c <_vfprintf_r+0x3cc>
 8003f3a:	4640      	mov	r0, r8
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f40:	f004 fb08 	bl	8008554 <__sprint_r>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	f47f af03 	bne.w	8003d50 <_vfprintf_r+0x200>
 8003f4a:	f1aa 0a10 	sub.w	sl, sl, #16
 8003f4e:	f1ba 0f10 	cmp.w	sl, #16
 8003f52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003f56:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f58:	dce7      	bgt.n	8003f2a <_vfprintf_r+0x3da>
 8003f5a:	469b      	mov	fp, r3
 8003f5c:	3201      	adds	r2, #1
 8003f5e:	44d3      	add	fp, sl
 8003f60:	2a07      	cmp	r2, #7
 8003f62:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8003f66:	9220      	str	r2, [sp, #128]	; 0x80
 8003f68:	e884 0480 	stmia.w	r4, {r7, sl}
 8003f6c:	f300 8357 	bgt.w	800461e <_vfprintf_r+0xace>
 8003f70:	3408      	adds	r4, #8
 8003f72:	9b02      	ldr	r3, [sp, #8]
 8003f74:	05db      	lsls	r3, r3, #23
 8003f76:	f100 825b 	bmi.w	8004430 <_vfprintf_r+0x8e0>
 8003f7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f7c:	9907      	ldr	r1, [sp, #28]
 8003f7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f80:	6022      	str	r2, [r4, #0]
 8003f82:	3301      	adds	r3, #1
 8003f84:	448b      	add	fp, r1
 8003f86:	2b07      	cmp	r3, #7
 8003f88:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8003f8c:	6061      	str	r1, [r4, #4]
 8003f8e:	9320      	str	r3, [sp, #128]	; 0x80
 8003f90:	f300 831d 	bgt.w	80045ce <_vfprintf_r+0xa7e>
 8003f94:	3408      	adds	r4, #8
 8003f96:	9b02      	ldr	r3, [sp, #8]
 8003f98:	0759      	lsls	r1, r3, #29
 8003f9a:	d53a      	bpl.n	8004012 <_vfprintf_r+0x4c2>
 8003f9c:	9b06      	ldr	r3, [sp, #24]
 8003f9e:	9a03      	ldr	r2, [sp, #12]
 8003fa0:	1a9d      	subs	r5, r3, r2
 8003fa2:	2d00      	cmp	r5, #0
 8003fa4:	dd35      	ble.n	8004012 <_vfprintf_r+0x4c2>
 8003fa6:	2d10      	cmp	r5, #16
 8003fa8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003faa:	4f5b      	ldr	r7, [pc, #364]	; (8004118 <_vfprintf_r+0x5c8>)
 8003fac:	dd1e      	ble.n	8003fec <_vfprintf_r+0x49c>
 8003fae:	2610      	movs	r6, #16
 8003fb0:	465a      	mov	r2, fp
 8003fb2:	e004      	b.n	8003fbe <_vfprintf_r+0x46e>
 8003fb4:	3d10      	subs	r5, #16
 8003fb6:	2d10      	cmp	r5, #16
 8003fb8:	f104 0408 	add.w	r4, r4, #8
 8003fbc:	dd15      	ble.n	8003fea <_vfprintf_r+0x49a>
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	3210      	adds	r2, #16
 8003fc2:	2b07      	cmp	r3, #7
 8003fc4:	9221      	str	r2, [sp, #132]	; 0x84
 8003fc6:	9320      	str	r3, [sp, #128]	; 0x80
 8003fc8:	6027      	str	r7, [r4, #0]
 8003fca:	6066      	str	r6, [r4, #4]
 8003fcc:	ddf2      	ble.n	8003fb4 <_vfprintf_r+0x464>
 8003fce:	4640      	mov	r0, r8
 8003fd0:	4649      	mov	r1, r9
 8003fd2:	aa1f      	add	r2, sp, #124	; 0x7c
 8003fd4:	f004 fabe 	bl	8008554 <__sprint_r>
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	f47f aeb9 	bne.w	8003d50 <_vfprintf_r+0x200>
 8003fde:	3d10      	subs	r5, #16
 8003fe0:	2d10      	cmp	r5, #16
 8003fe2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003fe4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003fe6:	ac2c      	add	r4, sp, #176	; 0xb0
 8003fe8:	dce9      	bgt.n	8003fbe <_vfprintf_r+0x46e>
 8003fea:	4693      	mov	fp, r2
 8003fec:	3301      	adds	r3, #1
 8003fee:	44ab      	add	fp, r5
 8003ff0:	2b07      	cmp	r3, #7
 8003ff2:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8003ff6:	9320      	str	r3, [sp, #128]	; 0x80
 8003ff8:	6027      	str	r7, [r4, #0]
 8003ffa:	6065      	str	r5, [r4, #4]
 8003ffc:	dd09      	ble.n	8004012 <_vfprintf_r+0x4c2>
 8003ffe:	4640      	mov	r0, r8
 8004000:	4649      	mov	r1, r9
 8004002:	aa1f      	add	r2, sp, #124	; 0x7c
 8004004:	f004 faa6 	bl	8008554 <__sprint_r>
 8004008:	2800      	cmp	r0, #0
 800400a:	f47f aea1 	bne.w	8003d50 <_vfprintf_r+0x200>
 800400e:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004012:	9b05      	ldr	r3, [sp, #20]
 8004014:	9a03      	ldr	r2, [sp, #12]
 8004016:	9906      	ldr	r1, [sp, #24]
 8004018:	428a      	cmp	r2, r1
 800401a:	bfac      	ite	ge
 800401c:	189b      	addge	r3, r3, r2
 800401e:	185b      	addlt	r3, r3, r1
 8004020:	9305      	str	r3, [sp, #20]
 8004022:	f1bb 0f00 	cmp.w	fp, #0
 8004026:	f040 82de 	bne.w	80045e6 <_vfprintf_r+0xa96>
 800402a:	2300      	movs	r3, #0
 800402c:	9320      	str	r3, [sp, #128]	; 0x80
 800402e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004030:	e5cf      	b.n	8003bd2 <_vfprintf_r+0x82>
 8004032:	4619      	mov	r1, r3
 8004034:	9802      	ldr	r0, [sp, #8]
 8004036:	781d      	ldrb	r5, [r3, #0]
 8004038:	f040 0004 	orr.w	r0, r0, #4
 800403c:	9002      	str	r0, [sp, #8]
 800403e:	e5f8      	b.n	8003c32 <_vfprintf_r+0xe2>
 8004040:	9304      	str	r3, [sp, #16]
 8004042:	9b02      	ldr	r3, [sp, #8]
 8004044:	f013 0320 	ands.w	r3, r3, #32
 8004048:	46b2      	mov	sl, r6
 800404a:	f000 8173 	beq.w	8004334 <_vfprintf_r+0x7e4>
 800404e:	9f08      	ldr	r7, [sp, #32]
 8004050:	3707      	adds	r7, #7
 8004052:	f027 0307 	bic.w	r3, r7, #7
 8004056:	f103 0208 	add.w	r2, r3, #8
 800405a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800405e:	9208      	str	r2, [sp, #32]
 8004060:	2300      	movs	r3, #0
 8004062:	e699      	b.n	8003d98 <_vfprintf_r+0x248>
 8004064:	9a08      	ldr	r2, [sp, #32]
 8004066:	9304      	str	r3, [sp, #16]
 8004068:	6813      	ldr	r3, [r2, #0]
 800406a:	930a      	str	r3, [sp, #40]	; 0x28
 800406c:	f04f 0b00 	mov.w	fp, #0
 8004070:	f88d b05f 	strb.w	fp, [sp, #95]	; 0x5f
 8004074:	1d17      	adds	r7, r2, #4
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 865e 	beq.w	8004d38 <_vfprintf_r+0x11e8>
 800407c:	2e00      	cmp	r6, #0
 800407e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004080:	f2c0 8612 	blt.w	8004ca8 <_vfprintf_r+0x1158>
 8004084:	4659      	mov	r1, fp
 8004086:	4632      	mov	r2, r6
 8004088:	f003 f8b8 	bl	80071fc <memchr>
 800408c:	2800      	cmp	r0, #0
 800408e:	f000 868f 	beq.w	8004db0 <_vfprintf_r+0x1260>
 8004092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004094:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004098:	1ac3      	subs	r3, r0, r3
 800409a:	9307      	str	r3, [sp, #28]
 800409c:	9708      	str	r7, [sp, #32]
 800409e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80040a2:	9303      	str	r3, [sp, #12]
 80040a4:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80040a8:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80040ac:	e6ae      	b.n	8003e0c <_vfprintf_r+0x2bc>
 80040ae:	9304      	str	r3, [sp, #16]
 80040b0:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <_vfprintf_r+0x5d0>)
 80040b2:	9310      	str	r3, [sp, #64]	; 0x40
 80040b4:	9b02      	ldr	r3, [sp, #8]
 80040b6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80040ba:	0699      	lsls	r1, r3, #26
 80040bc:	46b2      	mov	sl, r6
 80040be:	f140 8155 	bpl.w	800436c <_vfprintf_r+0x81c>
 80040c2:	9f08      	ldr	r7, [sp, #32]
 80040c4:	3707      	adds	r7, #7
 80040c6:	f027 0307 	bic.w	r3, r7, #7
 80040ca:	e9d3 6700 	ldrd	r6, r7, [r3]
 80040ce:	f103 0208 	add.w	r2, r3, #8
 80040d2:	9208      	str	r2, [sp, #32]
 80040d4:	9b02      	ldr	r3, [sp, #8]
 80040d6:	07db      	lsls	r3, r3, #31
 80040d8:	f140 82e4 	bpl.w	80046a4 <_vfprintf_r+0xb54>
 80040dc:	ea56 0307 	orrs.w	r3, r6, r7
 80040e0:	f000 82e0 	beq.w	80046a4 <_vfprintf_r+0xb54>
 80040e4:	9a02      	ldr	r2, [sp, #8]
 80040e6:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
 80040ea:	2330      	movs	r3, #48	; 0x30
 80040ec:	f042 0202 	orr.w	r2, r2, #2
 80040f0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80040f4:	9202      	str	r2, [sp, #8]
 80040f6:	2302      	movs	r3, #2
 80040f8:	e64e      	b.n	8003d98 <_vfprintf_r+0x248>
 80040fa:	781d      	ldrb	r5, [r3, #0]
 80040fc:	4619      	mov	r1, r3
 80040fe:	2a00      	cmp	r2, #0
 8004100:	f47f ad97 	bne.w	8003c32 <_vfprintf_r+0xe2>
 8004104:	2220      	movs	r2, #32
 8004106:	e594      	b.n	8003c32 <_vfprintf_r+0xe2>
 8004108:	9902      	ldr	r1, [sp, #8]
 800410a:	f041 0120 	orr.w	r1, r1, #32
 800410e:	9102      	str	r1, [sp, #8]
 8004110:	781d      	ldrb	r5, [r3, #0]
 8004112:	4619      	mov	r1, r3
 8004114:	e58d      	b.n	8003c32 <_vfprintf_r+0xe2>
 8004116:	bf00      	nop
 8004118:	0800adb4 	.word	0x0800adb4
 800411c:	0800ad60 	.word	0x0800ad60
 8004120:	0800ad94 	.word	0x0800ad94
 8004124:	9304      	str	r3, [sp, #16]
 8004126:	9b02      	ldr	r3, [sp, #8]
 8004128:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800412c:	f043 0310 	orr.w	r3, r3, #16
 8004130:	9302      	str	r3, [sp, #8]
 8004132:	9b02      	ldr	r3, [sp, #8]
 8004134:	0698      	lsls	r0, r3, #26
 8004136:	46b2      	mov	sl, r6
 8004138:	f140 80a2 	bpl.w	8004280 <_vfprintf_r+0x730>
 800413c:	9f08      	ldr	r7, [sp, #32]
 800413e:	3707      	adds	r7, #7
 8004140:	f027 0707 	bic.w	r7, r7, #7
 8004144:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004148:	f107 0108 	add.w	r1, r7, #8
 800414c:	9108      	str	r1, [sp, #32]
 800414e:	4616      	mov	r6, r2
 8004150:	461f      	mov	r7, r3
 8004152:	2a00      	cmp	r2, #0
 8004154:	f173 0300 	sbcs.w	r3, r3, #0
 8004158:	f2c0 841c 	blt.w	8004994 <_vfprintf_r+0xe44>
 800415c:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8004160:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8004164:	2301      	movs	r3, #1
 8004166:	e61d      	b.n	8003da4 <_vfprintf_r+0x254>
 8004168:	9304      	str	r3, [sp, #16]
 800416a:	9b02      	ldr	r3, [sp, #8]
 800416c:	9f08      	ldr	r7, [sp, #32]
 800416e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004172:	071b      	lsls	r3, r3, #28
 8004174:	46b2      	mov	sl, r6
 8004176:	46b3      	mov	fp, r6
 8004178:	f107 0707 	add.w	r7, r7, #7
 800417c:	f140 849b 	bpl.w	8004ab6 <_vfprintf_r+0xf66>
 8004180:	f027 0307 	bic.w	r3, r7, #7
 8004184:	ed93 7b00 	vldr	d7, [r3]
 8004188:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800418c:	f103 0208 	add.w	r2, r3, #8
 8004190:	9208      	str	r2, [sp, #32]
 8004192:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8004196:	f003 ffa1 	bl	80080dc <__fpclassifyd>
 800419a:	2801      	cmp	r0, #1
 800419c:	f040 8408 	bne.w	80049b0 <_vfprintf_r+0xe60>
 80041a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80041a4:	2200      	movs	r2, #0
 80041a6:	2300      	movs	r3, #0
 80041a8:	f005 ff42 	bl	800a030 <__aeabi_dcmplt>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	f040 85ec 	bne.w	8004d8a <_vfprintf_r+0x123a>
 80041b2:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80041b6:	9e02      	ldr	r6, [sp, #8]
 80041b8:	4a99      	ldr	r2, [pc, #612]	; (8004420 <_vfprintf_r+0x8d0>)
 80041ba:	4b9a      	ldr	r3, [pc, #616]	; (8004424 <_vfprintf_r+0x8d4>)
 80041bc:	2103      	movs	r1, #3
 80041be:	2000      	movs	r0, #0
 80041c0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 80041c4:	2d47      	cmp	r5, #71	; 0x47
 80041c6:	bfd8      	it	le
 80041c8:	461a      	movle	r2, r3
 80041ca:	9103      	str	r1, [sp, #12]
 80041cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80041ce:	9602      	str	r6, [sp, #8]
 80041d0:	920a      	str	r2, [sp, #40]	; 0x28
 80041d2:	9107      	str	r1, [sp, #28]
 80041d4:	900c      	str	r0, [sp, #48]	; 0x30
 80041d6:	e619      	b.n	8003e0c <_vfprintf_r+0x2bc>
 80041d8:	9902      	ldr	r1, [sp, #8]
 80041da:	f041 0108 	orr.w	r1, r1, #8
 80041de:	9102      	str	r1, [sp, #8]
 80041e0:	781d      	ldrb	r5, [r3, #0]
 80041e2:	4619      	mov	r1, r3
 80041e4:	e525      	b.n	8003c32 <_vfprintf_r+0xe2>
 80041e6:	781d      	ldrb	r5, [r3, #0]
 80041e8:	4619      	mov	r1, r3
 80041ea:	222b      	movs	r2, #43	; 0x2b
 80041ec:	e521      	b.n	8003c32 <_vfprintf_r+0xe2>
 80041ee:	9902      	ldr	r1, [sp, #8]
 80041f0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80041f4:	9102      	str	r1, [sp, #8]
 80041f6:	781d      	ldrb	r5, [r3, #0]
 80041f8:	4619      	mov	r1, r3
 80041fa:	e51a      	b.n	8003c32 <_vfprintf_r+0xe2>
 80041fc:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8004200:	2100      	movs	r1, #0
 8004202:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004206:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800420a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800420e:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8004212:	2809      	cmp	r0, #9
 8004214:	d9f5      	bls.n	8004202 <_vfprintf_r+0x6b2>
 8004216:	9106      	str	r1, [sp, #24]
 8004218:	e50c      	b.n	8003c34 <_vfprintf_r+0xe4>
 800421a:	9908      	ldr	r1, [sp, #32]
 800421c:	9304      	str	r3, [sp, #16]
 800421e:	2330      	movs	r3, #48	; 0x30
 8004220:	9a02      	ldr	r2, [sp, #8]
 8004222:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8004226:	460b      	mov	r3, r1
 8004228:	3304      	adds	r3, #4
 800422a:	2578      	movs	r5, #120	; 0x78
 800422c:	f042 0202 	orr.w	r2, r2, #2
 8004230:	9308      	str	r3, [sp, #32]
 8004232:	4b7d      	ldr	r3, [pc, #500]	; (8004428 <_vfprintf_r+0x8d8>)
 8004234:	9310      	str	r3, [sp, #64]	; 0x40
 8004236:	46b2      	mov	sl, r6
 8004238:	9202      	str	r2, [sp, #8]
 800423a:	680e      	ldr	r6, [r1, #0]
 800423c:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
 8004240:	2700      	movs	r7, #0
 8004242:	2302      	movs	r3, #2
 8004244:	e5a8      	b.n	8003d98 <_vfprintf_r+0x248>
 8004246:	9902      	ldr	r1, [sp, #8]
 8004248:	f041 0101 	orr.w	r1, r1, #1
 800424c:	9102      	str	r1, [sp, #8]
 800424e:	781d      	ldrb	r5, [r3, #0]
 8004250:	4619      	mov	r1, r3
 8004252:	e4ee      	b.n	8003c32 <_vfprintf_r+0xe2>
 8004254:	9d08      	ldr	r5, [sp, #32]
 8004256:	6829      	ldr	r1, [r5, #0]
 8004258:	9106      	str	r1, [sp, #24]
 800425a:	4608      	mov	r0, r1
 800425c:	2800      	cmp	r0, #0
 800425e:	4629      	mov	r1, r5
 8004260:	f101 0104 	add.w	r1, r1, #4
 8004264:	f2c0 84ee 	blt.w	8004c44 <_vfprintf_r+0x10f4>
 8004268:	9108      	str	r1, [sp, #32]
 800426a:	781d      	ldrb	r5, [r3, #0]
 800426c:	4619      	mov	r1, r3
 800426e:	e4e0      	b.n	8003c32 <_vfprintf_r+0xe2>
 8004270:	9304      	str	r3, [sp, #16]
 8004272:	9b02      	ldr	r3, [sp, #8]
 8004274:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004278:	0698      	lsls	r0, r3, #26
 800427a:	46b2      	mov	sl, r6
 800427c:	f53f af5e 	bmi.w	800413c <_vfprintf_r+0x5ec>
 8004280:	9b02      	ldr	r3, [sp, #8]
 8004282:	06d9      	lsls	r1, r3, #27
 8004284:	f100 829b 	bmi.w	80047be <_vfprintf_r+0xc6e>
 8004288:	9b02      	ldr	r3, [sp, #8]
 800428a:	065a      	lsls	r2, r3, #25
 800428c:	f140 8297 	bpl.w	80047be <_vfprintf_r+0xc6e>
 8004290:	9908      	ldr	r1, [sp, #32]
 8004292:	f9b1 6000 	ldrsh.w	r6, [r1]
 8004296:	3104      	adds	r1, #4
 8004298:	17f7      	asrs	r7, r6, #31
 800429a:	4632      	mov	r2, r6
 800429c:	463b      	mov	r3, r7
 800429e:	9108      	str	r1, [sp, #32]
 80042a0:	e757      	b.n	8004152 <_vfprintf_r+0x602>
 80042a2:	9902      	ldr	r1, [sp, #8]
 80042a4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80042a8:	9102      	str	r1, [sp, #8]
 80042aa:	781d      	ldrb	r5, [r3, #0]
 80042ac:	4619      	mov	r1, r3
 80042ae:	e4c0      	b.n	8003c32 <_vfprintf_r+0xe2>
 80042b0:	781d      	ldrb	r5, [r3, #0]
 80042b2:	9902      	ldr	r1, [sp, #8]
 80042b4:	2d6c      	cmp	r5, #108	; 0x6c
 80042b6:	f000 84be 	beq.w	8004c36 <_vfprintf_r+0x10e6>
 80042ba:	f041 0110 	orr.w	r1, r1, #16
 80042be:	9102      	str	r1, [sp, #8]
 80042c0:	4619      	mov	r1, r3
 80042c2:	e4b6      	b.n	8003c32 <_vfprintf_r+0xe2>
 80042c4:	9304      	str	r3, [sp, #16]
 80042c6:	9b02      	ldr	r3, [sp, #8]
 80042c8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80042cc:	069a      	lsls	r2, r3, #26
 80042ce:	f140 83fd 	bpl.w	8004acc <_vfprintf_r+0xf7c>
 80042d2:	9a08      	ldr	r2, [sp, #32]
 80042d4:	9905      	ldr	r1, [sp, #20]
 80042d6:	6813      	ldr	r3, [r2, #0]
 80042d8:	17cf      	asrs	r7, r1, #31
 80042da:	4608      	mov	r0, r1
 80042dc:	3204      	adds	r2, #4
 80042de:	4639      	mov	r1, r7
 80042e0:	9208      	str	r2, [sp, #32]
 80042e2:	e9c3 0100 	strd	r0, r1, [r3]
 80042e6:	e474      	b.n	8003bd2 <_vfprintf_r+0x82>
 80042e8:	781d      	ldrb	r5, [r3, #0]
 80042ea:	2d2a      	cmp	r5, #42	; 0x2a
 80042ec:	f103 0101 	add.w	r1, r3, #1
 80042f0:	f000 862a 	beq.w	8004f48 <_vfprintf_r+0x13f8>
 80042f4:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80042f8:	2809      	cmp	r0, #9
 80042fa:	460b      	mov	r3, r1
 80042fc:	f04f 0600 	mov.w	r6, #0
 8004300:	f63f ac98 	bhi.w	8003c34 <_vfprintf_r+0xe4>
 8004304:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004308:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800430c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8004310:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8004314:	2809      	cmp	r0, #9
 8004316:	d9f5      	bls.n	8004304 <_vfprintf_r+0x7b4>
 8004318:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 800431c:	e48a      	b.n	8003c34 <_vfprintf_r+0xe4>
 800431e:	9304      	str	r3, [sp, #16]
 8004320:	9b02      	ldr	r3, [sp, #8]
 8004322:	f043 0310 	orr.w	r3, r3, #16
 8004326:	9302      	str	r3, [sp, #8]
 8004328:	9b02      	ldr	r3, [sp, #8]
 800432a:	f013 0320 	ands.w	r3, r3, #32
 800432e:	46b2      	mov	sl, r6
 8004330:	f47f ae8d 	bne.w	800404e <_vfprintf_r+0x4fe>
 8004334:	9a02      	ldr	r2, [sp, #8]
 8004336:	f012 0210 	ands.w	r2, r2, #16
 800433a:	f040 8238 	bne.w	80047ae <_vfprintf_r+0xc5e>
 800433e:	9b02      	ldr	r3, [sp, #8]
 8004340:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8004344:	f000 8233 	beq.w	80047ae <_vfprintf_r+0xc5e>
 8004348:	9908      	ldr	r1, [sp, #32]
 800434a:	4613      	mov	r3, r2
 800434c:	460a      	mov	r2, r1
 800434e:	3204      	adds	r2, #4
 8004350:	880e      	ldrh	r6, [r1, #0]
 8004352:	9208      	str	r2, [sp, #32]
 8004354:	2700      	movs	r7, #0
 8004356:	e51f      	b.n	8003d98 <_vfprintf_r+0x248>
 8004358:	9304      	str	r3, [sp, #16]
 800435a:	4b34      	ldr	r3, [pc, #208]	; (800442c <_vfprintf_r+0x8dc>)
 800435c:	9310      	str	r3, [sp, #64]	; 0x40
 800435e:	9b02      	ldr	r3, [sp, #8]
 8004360:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004364:	0699      	lsls	r1, r3, #26
 8004366:	46b2      	mov	sl, r6
 8004368:	f53f aeab 	bmi.w	80040c2 <_vfprintf_r+0x572>
 800436c:	9b02      	ldr	r3, [sp, #8]
 800436e:	06da      	lsls	r2, r3, #27
 8004370:	f140 83d1 	bpl.w	8004b16 <_vfprintf_r+0xfc6>
 8004374:	9a08      	ldr	r2, [sp, #32]
 8004376:	4613      	mov	r3, r2
 8004378:	3304      	adds	r3, #4
 800437a:	6816      	ldr	r6, [r2, #0]
 800437c:	9308      	str	r3, [sp, #32]
 800437e:	2700      	movs	r7, #0
 8004380:	e6a8      	b.n	80040d4 <_vfprintf_r+0x584>
 8004382:	9908      	ldr	r1, [sp, #32]
 8004384:	9304      	str	r3, [sp, #16]
 8004386:	680a      	ldr	r2, [r1, #0]
 8004388:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 800438c:	2300      	movs	r3, #0
 800438e:	2201      	movs	r2, #1
 8004390:	3104      	adds	r1, #4
 8004392:	469c      	mov	ip, r3
 8004394:	9203      	str	r2, [sp, #12]
 8004396:	9108      	str	r1, [sp, #32]
 8004398:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800439c:	ab22      	add	r3, sp, #136	; 0x88
 800439e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80043a2:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80043a6:	9207      	str	r2, [sp, #28]
 80043a8:	930a      	str	r3, [sp, #40]	; 0x28
 80043aa:	e535      	b.n	8003e18 <_vfprintf_r+0x2c8>
 80043ac:	9304      	str	r3, [sp, #16]
 80043ae:	9b02      	ldr	r3, [sp, #8]
 80043b0:	f043 0310 	orr.w	r3, r3, #16
 80043b4:	9302      	str	r3, [sp, #8]
 80043b6:	9b02      	ldr	r3, [sp, #8]
 80043b8:	46b2      	mov	sl, r6
 80043ba:	069e      	lsls	r6, r3, #26
 80043bc:	f53f ace2 	bmi.w	8003d84 <_vfprintf_r+0x234>
 80043c0:	9b02      	ldr	r3, [sp, #8]
 80043c2:	06d8      	lsls	r0, r3, #27
 80043c4:	f140 8399 	bpl.w	8004afa <_vfprintf_r+0xfaa>
 80043c8:	9a08      	ldr	r2, [sp, #32]
 80043ca:	4613      	mov	r3, r2
 80043cc:	3204      	adds	r2, #4
 80043ce:	681e      	ldr	r6, [r3, #0]
 80043d0:	9208      	str	r2, [sp, #32]
 80043d2:	2301      	movs	r3, #1
 80043d4:	2700      	movs	r7, #0
 80043d6:	e4df      	b.n	8003d98 <_vfprintf_r+0x248>
 80043d8:	9304      	str	r3, [sp, #16]
 80043da:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80043de:	2d00      	cmp	r5, #0
 80043e0:	f43f acaf 	beq.w	8003d42 <_vfprintf_r+0x1f2>
 80043e4:	2300      	movs	r3, #0
 80043e6:	2201      	movs	r2, #1
 80043e8:	469c      	mov	ip, r3
 80043ea:	9203      	str	r2, [sp, #12]
 80043ec:	f88d 5088 	strb.w	r5, [sp, #136]	; 0x88
 80043f0:	e7d2      	b.n	8004398 <_vfprintf_r+0x848>
 80043f2:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80043f6:	e55b      	b.n	8003eb0 <_vfprintf_r+0x360>
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	f47f ace5 	bne.w	8003dc8 <_vfprintf_r+0x278>
 80043fe:	2f00      	cmp	r7, #0
 8004400:	bf08      	it	eq
 8004402:	2e0a      	cmpeq	r6, #10
 8004404:	f080 81ff 	bcs.w	8004806 <_vfprintf_r+0xcb6>
 8004408:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 800440c:	3630      	adds	r6, #48	; 0x30
 800440e:	f80b 6d41 	strb.w	r6, [fp, #-65]!
 8004412:	ab2c      	add	r3, sp, #176	; 0xb0
 8004414:	ebcb 0303 	rsb	r3, fp, r3
 8004418:	9307      	str	r3, [sp, #28]
 800441a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800441e:	e4ed      	b.n	8003dfc <_vfprintf_r+0x2ac>
 8004420:	0800ad74 	.word	0x0800ad74
 8004424:	0800ad70 	.word	0x0800ad70
 8004428:	0800ad94 	.word	0x0800ad94
 800442c:	0800ad80 	.word	0x0800ad80
 8004430:	2d65      	cmp	r5, #101	; 0x65
 8004432:	f340 808a 	ble.w	800454a <_vfprintf_r+0x9fa>
 8004436:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800443a:	2200      	movs	r2, #0
 800443c:	2300      	movs	r3, #0
 800443e:	f005 fded 	bl	800a01c <__aeabi_dcmpeq>
 8004442:	2800      	cmp	r0, #0
 8004444:	f000 8131 	beq.w	80046aa <_vfprintf_r+0xb5a>
 8004448:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800444a:	4aae      	ldr	r2, [pc, #696]	; (8004704 <_vfprintf_r+0xbb4>)
 800444c:	6022      	str	r2, [r4, #0]
 800444e:	3301      	adds	r3, #1
 8004450:	f10b 0b01 	add.w	fp, fp, #1
 8004454:	2201      	movs	r2, #1
 8004456:	2b07      	cmp	r3, #7
 8004458:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800445c:	9320      	str	r3, [sp, #128]	; 0x80
 800445e:	6062      	str	r2, [r4, #4]
 8004460:	f300 8372 	bgt.w	8004b48 <_vfprintf_r+0xff8>
 8004464:	3408      	adds	r4, #8
 8004466:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004468:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800446a:	4293      	cmp	r3, r2
 800446c:	db03      	blt.n	8004476 <_vfprintf_r+0x926>
 800446e:	9b02      	ldr	r3, [sp, #8]
 8004470:	07df      	lsls	r7, r3, #31
 8004472:	f57f ad90 	bpl.w	8003f96 <_vfprintf_r+0x446>
 8004476:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004478:	9912      	ldr	r1, [sp, #72]	; 0x48
 800447a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800447c:	6022      	str	r2, [r4, #0]
 800447e:	3301      	adds	r3, #1
 8004480:	448b      	add	fp, r1
 8004482:	2b07      	cmp	r3, #7
 8004484:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004488:	6061      	str	r1, [r4, #4]
 800448a:	9320      	str	r3, [sp, #128]	; 0x80
 800448c:	f300 83e1 	bgt.w	8004c52 <_vfprintf_r+0x1102>
 8004490:	3408      	adds	r4, #8
 8004492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004494:	1e5d      	subs	r5, r3, #1
 8004496:	2d00      	cmp	r5, #0
 8004498:	f77f ad7d 	ble.w	8003f96 <_vfprintf_r+0x446>
 800449c:	2d10      	cmp	r5, #16
 800449e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80044a0:	4f99      	ldr	r7, [pc, #612]	; (8004708 <_vfprintf_r+0xbb8>)
 80044a2:	f340 8196 	ble.w	80047d2 <_vfprintf_r+0xc82>
 80044a6:	2610      	movs	r6, #16
 80044a8:	465a      	mov	r2, fp
 80044aa:	e004      	b.n	80044b6 <_vfprintf_r+0x966>
 80044ac:	3408      	adds	r4, #8
 80044ae:	3d10      	subs	r5, #16
 80044b0:	2d10      	cmp	r5, #16
 80044b2:	f340 818d 	ble.w	80047d0 <_vfprintf_r+0xc80>
 80044b6:	3301      	adds	r3, #1
 80044b8:	3210      	adds	r2, #16
 80044ba:	2b07      	cmp	r3, #7
 80044bc:	9221      	str	r2, [sp, #132]	; 0x84
 80044be:	9320      	str	r3, [sp, #128]	; 0x80
 80044c0:	6027      	str	r7, [r4, #0]
 80044c2:	6066      	str	r6, [r4, #4]
 80044c4:	ddf2      	ble.n	80044ac <_vfprintf_r+0x95c>
 80044c6:	4640      	mov	r0, r8
 80044c8:	4649      	mov	r1, r9
 80044ca:	aa1f      	add	r2, sp, #124	; 0x7c
 80044cc:	f004 f842 	bl	8008554 <__sprint_r>
 80044d0:	2800      	cmp	r0, #0
 80044d2:	f47f ac3d 	bne.w	8003d50 <_vfprintf_r+0x200>
 80044d6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80044d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80044da:	ac2c      	add	r4, sp, #176	; 0xb0
 80044dc:	e7e7      	b.n	80044ae <_vfprintf_r+0x95e>
 80044de:	9b06      	ldr	r3, [sp, #24]
 80044e0:	9a03      	ldr	r2, [sp, #12]
 80044e2:	1a9e      	subs	r6, r3, r2
 80044e4:	2e00      	cmp	r6, #0
 80044e6:	f77f ad0a 	ble.w	8003efe <_vfprintf_r+0x3ae>
 80044ea:	2e10      	cmp	r6, #16
 80044ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80044ee:	4f86      	ldr	r7, [pc, #536]	; (8004708 <_vfprintf_r+0xbb8>)
 80044f0:	dd1f      	ble.n	8004532 <_vfprintf_r+0x9e2>
 80044f2:	f04f 0a10 	mov.w	sl, #16
 80044f6:	465b      	mov	r3, fp
 80044f8:	e004      	b.n	8004504 <_vfprintf_r+0x9b4>
 80044fa:	3e10      	subs	r6, #16
 80044fc:	2e10      	cmp	r6, #16
 80044fe:	f104 0408 	add.w	r4, r4, #8
 8004502:	dd15      	ble.n	8004530 <_vfprintf_r+0x9e0>
 8004504:	3201      	adds	r2, #1
 8004506:	3310      	adds	r3, #16
 8004508:	2a07      	cmp	r2, #7
 800450a:	9321      	str	r3, [sp, #132]	; 0x84
 800450c:	9220      	str	r2, [sp, #128]	; 0x80
 800450e:	e884 0480 	stmia.w	r4, {r7, sl}
 8004512:	ddf2      	ble.n	80044fa <_vfprintf_r+0x9aa>
 8004514:	4640      	mov	r0, r8
 8004516:	4649      	mov	r1, r9
 8004518:	aa1f      	add	r2, sp, #124	; 0x7c
 800451a:	f004 f81b 	bl	8008554 <__sprint_r>
 800451e:	2800      	cmp	r0, #0
 8004520:	f47f ac16 	bne.w	8003d50 <_vfprintf_r+0x200>
 8004524:	3e10      	subs	r6, #16
 8004526:	2e10      	cmp	r6, #16
 8004528:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800452a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800452c:	ac2c      	add	r4, sp, #176	; 0xb0
 800452e:	dce9      	bgt.n	8004504 <_vfprintf_r+0x9b4>
 8004530:	469b      	mov	fp, r3
 8004532:	3201      	adds	r2, #1
 8004534:	44b3      	add	fp, r6
 8004536:	2a07      	cmp	r2, #7
 8004538:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800453c:	9220      	str	r2, [sp, #128]	; 0x80
 800453e:	6027      	str	r7, [r4, #0]
 8004540:	6066      	str	r6, [r4, #4]
 8004542:	f300 821a 	bgt.w	800497a <_vfprintf_r+0xe2a>
 8004546:	3408      	adds	r4, #8
 8004548:	e4d9      	b.n	8003efe <_vfprintf_r+0x3ae>
 800454a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800454c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800454e:	2b01      	cmp	r3, #1
 8004550:	f340 81d5 	ble.w	80048fe <_vfprintf_r+0xdae>
 8004554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004556:	6023      	str	r3, [r4, #0]
 8004558:	3501      	adds	r5, #1
 800455a:	f10b 0601 	add.w	r6, fp, #1
 800455e:	2301      	movs	r3, #1
 8004560:	2d07      	cmp	r5, #7
 8004562:	9621      	str	r6, [sp, #132]	; 0x84
 8004564:	9520      	str	r5, [sp, #128]	; 0x80
 8004566:	6063      	str	r3, [r4, #4]
 8004568:	f300 81e5 	bgt.w	8004936 <_vfprintf_r+0xde6>
 800456c:	3408      	adds	r4, #8
 800456e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004570:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004572:	6023      	str	r3, [r4, #0]
 8004574:	3501      	adds	r5, #1
 8004576:	4416      	add	r6, r2
 8004578:	2d07      	cmp	r5, #7
 800457a:	9621      	str	r6, [sp, #132]	; 0x84
 800457c:	9520      	str	r5, [sp, #128]	; 0x80
 800457e:	6062      	str	r2, [r4, #4]
 8004580:	f300 81ef 	bgt.w	8004962 <_vfprintf_r+0xe12>
 8004584:	3408      	adds	r4, #8
 8004586:	2300      	movs	r3, #0
 8004588:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800458c:	2200      	movs	r2, #0
 800458e:	f005 fd45 	bl	800a01c <__aeabi_dcmpeq>
 8004592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004594:	2800      	cmp	r0, #0
 8004596:	f040 80e1 	bne.w	800475c <_vfprintf_r+0xc0c>
 800459a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800459c:	3b01      	subs	r3, #1
 800459e:	3501      	adds	r5, #1
 80045a0:	3201      	adds	r2, #1
 80045a2:	441e      	add	r6, r3
 80045a4:	2d07      	cmp	r5, #7
 80045a6:	9520      	str	r5, [sp, #128]	; 0x80
 80045a8:	9621      	str	r6, [sp, #132]	; 0x84
 80045aa:	6022      	str	r2, [r4, #0]
 80045ac:	6063      	str	r3, [r4, #4]
 80045ae:	f300 81b6 	bgt.w	800491e <_vfprintf_r+0xdce>
 80045b2:	3408      	adds	r4, #8
 80045b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80045b6:	6062      	str	r2, [r4, #4]
 80045b8:	3501      	adds	r5, #1
 80045ba:	eb06 0b02 	add.w	fp, r6, r2
 80045be:	ab1b      	add	r3, sp, #108	; 0x6c
 80045c0:	2d07      	cmp	r5, #7
 80045c2:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80045c6:	9520      	str	r5, [sp, #128]	; 0x80
 80045c8:	6023      	str	r3, [r4, #0]
 80045ca:	f77f ace3 	ble.w	8003f94 <_vfprintf_r+0x444>
 80045ce:	4640      	mov	r0, r8
 80045d0:	4649      	mov	r1, r9
 80045d2:	aa1f      	add	r2, sp, #124	; 0x7c
 80045d4:	f003 ffbe 	bl	8008554 <__sprint_r>
 80045d8:	2800      	cmp	r0, #0
 80045da:	f47f abb9 	bne.w	8003d50 <_vfprintf_r+0x200>
 80045de:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80045e2:	ac2c      	add	r4, sp, #176	; 0xb0
 80045e4:	e4d7      	b.n	8003f96 <_vfprintf_r+0x446>
 80045e6:	4640      	mov	r0, r8
 80045e8:	4649      	mov	r1, r9
 80045ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80045ec:	f003 ffb2 	bl	8008554 <__sprint_r>
 80045f0:	2800      	cmp	r0, #0
 80045f2:	f43f ad1a 	beq.w	800402a <_vfprintf_r+0x4da>
 80045f6:	f7ff bbab 	b.w	8003d50 <_vfprintf_r+0x200>
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d133      	bne.n	8004666 <_vfprintf_r+0xb16>
 80045fe:	9b02      	ldr	r3, [sp, #8]
 8004600:	07da      	lsls	r2, r3, #31
 8004602:	d530      	bpl.n	8004666 <_vfprintf_r+0xb16>
 8004604:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 8004608:	2330      	movs	r3, #48	; 0x30
 800460a:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 800460e:	ab2c      	add	r3, sp, #176	; 0xb0
 8004610:	ebcb 0303 	rsb	r3, fp, r3
 8004614:	9307      	str	r3, [sp, #28]
 8004616:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800461a:	f7ff bbef 	b.w	8003dfc <_vfprintf_r+0x2ac>
 800461e:	4640      	mov	r0, r8
 8004620:	4649      	mov	r1, r9
 8004622:	aa1f      	add	r2, sp, #124	; 0x7c
 8004624:	f003 ff96 	bl	8008554 <__sprint_r>
 8004628:	2800      	cmp	r0, #0
 800462a:	f47f ab91 	bne.w	8003d50 <_vfprintf_r+0x200>
 800462e:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004632:	ac2c      	add	r4, sp, #176	; 0xb0
 8004634:	e49d      	b.n	8003f72 <_vfprintf_r+0x422>
 8004636:	4640      	mov	r0, r8
 8004638:	4649      	mov	r1, r9
 800463a:	aa1f      	add	r2, sp, #124	; 0x7c
 800463c:	f003 ff8a 	bl	8008554 <__sprint_r>
 8004640:	2800      	cmp	r0, #0
 8004642:	f47f ab85 	bne.w	8003d50 <_vfprintf_r+0x200>
 8004646:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800464a:	ac2c      	add	r4, sp, #176	; 0xb0
 800464c:	e443      	b.n	8003ed6 <_vfprintf_r+0x386>
 800464e:	4640      	mov	r0, r8
 8004650:	4649      	mov	r1, r9
 8004652:	aa1f      	add	r2, sp, #124	; 0x7c
 8004654:	f003 ff7e 	bl	8008554 <__sprint_r>
 8004658:	2800      	cmp	r0, #0
 800465a:	f47f ab79 	bne.w	8003d50 <_vfprintf_r+0x200>
 800465e:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004662:	ac2c      	add	r4, sp, #176	; 0xb0
 8004664:	e448      	b.n	8003ef8 <_vfprintf_r+0x3a8>
 8004666:	ab2c      	add	r3, sp, #176	; 0xb0
 8004668:	f8cd a01c 	str.w	sl, [sp, #28]
 800466c:	930a      	str	r3, [sp, #40]	; 0x28
 800466e:	f7ff bbc5 	b.w	8003dfc <_vfprintf_r+0x2ac>
 8004672:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004674:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
 8004678:	0933      	lsrs	r3, r6, #4
 800467a:	f006 010f 	and.w	r1, r6, #15
 800467e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8004682:	093a      	lsrs	r2, r7, #4
 8004684:	461e      	mov	r6, r3
 8004686:	4617      	mov	r7, r2
 8004688:	5c43      	ldrb	r3, [r0, r1]
 800468a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 800468e:	ea56 0307 	orrs.w	r3, r6, r7
 8004692:	d1f1      	bne.n	8004678 <_vfprintf_r+0xb28>
 8004694:	465a      	mov	r2, fp
 8004696:	ab2c      	add	r3, sp, #176	; 0xb0
 8004698:	1a9b      	subs	r3, r3, r2
 800469a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800469e:	9307      	str	r3, [sp, #28]
 80046a0:	f7ff bbac 	b.w	8003dfc <_vfprintf_r+0x2ac>
 80046a4:	2302      	movs	r3, #2
 80046a6:	f7ff bb77 	b.w	8003d98 <_vfprintf_r+0x248>
 80046aa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80046ac:	2d00      	cmp	r5, #0
 80046ae:	f340 8257 	ble.w	8004b60 <_vfprintf_r+0x1010>
 80046b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80046b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80046b6:	428a      	cmp	r2, r1
 80046b8:	4613      	mov	r3, r2
 80046ba:	bfa8      	it	ge
 80046bc:	460b      	movge	r3, r1
 80046be:	461d      	mov	r5, r3
 80046c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80046c2:	2d00      	cmp	r5, #0
 80046c4:	eb01 0a02 	add.w	sl, r1, r2
 80046c8:	dd0b      	ble.n	80046e2 <_vfprintf_r+0xb92>
 80046ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80046cc:	6021      	str	r1, [r4, #0]
 80046ce:	3301      	adds	r3, #1
 80046d0:	44ab      	add	fp, r5
 80046d2:	2b07      	cmp	r3, #7
 80046d4:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80046d8:	6065      	str	r5, [r4, #4]
 80046da:	9320      	str	r3, [sp, #128]	; 0x80
 80046dc:	f300 8309 	bgt.w	8004cf2 <_vfprintf_r+0x11a2>
 80046e0:	3408      	adds	r4, #8
 80046e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046e4:	2d00      	cmp	r5, #0
 80046e6:	bfa8      	it	ge
 80046e8:	1b5b      	subge	r3, r3, r5
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	461d      	mov	r5, r3
 80046ee:	f340 80b0 	ble.w	8004852 <_vfprintf_r+0xd02>
 80046f2:	2d10      	cmp	r5, #16
 80046f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80046f6:	4f04      	ldr	r7, [pc, #16]	; (8004708 <_vfprintf_r+0xbb8>)
 80046f8:	f340 821a 	ble.w	8004b30 <_vfprintf_r+0xfe0>
 80046fc:	2610      	movs	r6, #16
 80046fe:	465a      	mov	r2, fp
 8004700:	e009      	b.n	8004716 <_vfprintf_r+0xbc6>
 8004702:	bf00      	nop
 8004704:	0800adb0 	.word	0x0800adb0
 8004708:	0800ad60 	.word	0x0800ad60
 800470c:	3408      	adds	r4, #8
 800470e:	3d10      	subs	r5, #16
 8004710:	2d10      	cmp	r5, #16
 8004712:	f340 820c 	ble.w	8004b2e <_vfprintf_r+0xfde>
 8004716:	3301      	adds	r3, #1
 8004718:	3210      	adds	r2, #16
 800471a:	2b07      	cmp	r3, #7
 800471c:	9221      	str	r2, [sp, #132]	; 0x84
 800471e:	9320      	str	r3, [sp, #128]	; 0x80
 8004720:	6027      	str	r7, [r4, #0]
 8004722:	6066      	str	r6, [r4, #4]
 8004724:	ddf2      	ble.n	800470c <_vfprintf_r+0xbbc>
 8004726:	4640      	mov	r0, r8
 8004728:	4649      	mov	r1, r9
 800472a:	aa1f      	add	r2, sp, #124	; 0x7c
 800472c:	f003 ff12 	bl	8008554 <__sprint_r>
 8004730:	2800      	cmp	r0, #0
 8004732:	f47f ab0d 	bne.w	8003d50 <_vfprintf_r+0x200>
 8004736:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004738:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800473a:	ac2c      	add	r4, sp, #176	; 0xb0
 800473c:	e7e7      	b.n	800470e <_vfprintf_r+0xbbe>
 800473e:	4640      	mov	r0, r8
 8004740:	4649      	mov	r1, r9
 8004742:	aa1f      	add	r2, sp, #124	; 0x7c
 8004744:	f003 ff06 	bl	8008554 <__sprint_r>
 8004748:	2800      	cmp	r0, #0
 800474a:	f47f ab01 	bne.w	8003d50 <_vfprintf_r+0x200>
 800474e:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8004752:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004756:	ac2c      	add	r4, sp, #176	; 0xb0
 8004758:	f7ff bbaa 	b.w	8003eb0 <_vfprintf_r+0x360>
 800475c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8004760:	f1ba 0f00 	cmp.w	sl, #0
 8004764:	f77f af26 	ble.w	80045b4 <_vfprintf_r+0xa64>
 8004768:	f1ba 0f10 	cmp.w	sl, #16
 800476c:	4f8f      	ldr	r7, [pc, #572]	; (80049ac <_vfprintf_r+0xe5c>)
 800476e:	bfc8      	it	gt
 8004770:	f04f 0b10 	movgt.w	fp, #16
 8004774:	dc07      	bgt.n	8004786 <_vfprintf_r+0xc36>
 8004776:	e0ea      	b.n	800494e <_vfprintf_r+0xdfe>
 8004778:	3408      	adds	r4, #8
 800477a:	f1aa 0a10 	sub.w	sl, sl, #16
 800477e:	f1ba 0f10 	cmp.w	sl, #16
 8004782:	f340 80e4 	ble.w	800494e <_vfprintf_r+0xdfe>
 8004786:	3501      	adds	r5, #1
 8004788:	3610      	adds	r6, #16
 800478a:	2d07      	cmp	r5, #7
 800478c:	9621      	str	r6, [sp, #132]	; 0x84
 800478e:	9520      	str	r5, [sp, #128]	; 0x80
 8004790:	e884 0880 	stmia.w	r4, {r7, fp}
 8004794:	ddf0      	ble.n	8004778 <_vfprintf_r+0xc28>
 8004796:	4640      	mov	r0, r8
 8004798:	4649      	mov	r1, r9
 800479a:	aa1f      	add	r2, sp, #124	; 0x7c
 800479c:	f003 feda 	bl	8008554 <__sprint_r>
 80047a0:	2800      	cmp	r0, #0
 80047a2:	f47f aad5 	bne.w	8003d50 <_vfprintf_r+0x200>
 80047a6:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80047a8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80047aa:	ac2c      	add	r4, sp, #176	; 0xb0
 80047ac:	e7e5      	b.n	800477a <_vfprintf_r+0xc2a>
 80047ae:	9908      	ldr	r1, [sp, #32]
 80047b0:	460a      	mov	r2, r1
 80047b2:	3204      	adds	r2, #4
 80047b4:	680e      	ldr	r6, [r1, #0]
 80047b6:	9208      	str	r2, [sp, #32]
 80047b8:	2700      	movs	r7, #0
 80047ba:	f7ff baed 	b.w	8003d98 <_vfprintf_r+0x248>
 80047be:	9a08      	ldr	r2, [sp, #32]
 80047c0:	6816      	ldr	r6, [r2, #0]
 80047c2:	4613      	mov	r3, r2
 80047c4:	3304      	adds	r3, #4
 80047c6:	17f7      	asrs	r7, r6, #31
 80047c8:	9308      	str	r3, [sp, #32]
 80047ca:	4632      	mov	r2, r6
 80047cc:	463b      	mov	r3, r7
 80047ce:	e4c0      	b.n	8004152 <_vfprintf_r+0x602>
 80047d0:	4693      	mov	fp, r2
 80047d2:	3301      	adds	r3, #1
 80047d4:	44ab      	add	fp, r5
 80047d6:	2b07      	cmp	r3, #7
 80047d8:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80047dc:	9320      	str	r3, [sp, #128]	; 0x80
 80047de:	6027      	str	r7, [r4, #0]
 80047e0:	6065      	str	r5, [r4, #4]
 80047e2:	f77f abd7 	ble.w	8003f94 <_vfprintf_r+0x444>
 80047e6:	e6f2      	b.n	80045ce <_vfprintf_r+0xa7e>
 80047e8:	2b30      	cmp	r3, #48	; 0x30
 80047ea:	f000 823e 	beq.w	8004c6a <_vfprintf_r+0x111a>
 80047ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047f0:	3b01      	subs	r3, #1
 80047f2:	461a      	mov	r2, r3
 80047f4:	a82c      	add	r0, sp, #176	; 0xb0
 80047f6:	930a      	str	r3, [sp, #40]	; 0x28
 80047f8:	1a82      	subs	r2, r0, r2
 80047fa:	2330      	movs	r3, #48	; 0x30
 80047fc:	9207      	str	r2, [sp, #28]
 80047fe:	f801 3c01 	strb.w	r3, [r1, #-1]
 8004802:	f7ff bafb 	b.w	8003dfc <_vfprintf_r+0x2ac>
 8004806:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
 800480a:	f8cd c00c 	str.w	ip, [sp, #12]
 800480e:	4630      	mov	r0, r6
 8004810:	4639      	mov	r1, r7
 8004812:	220a      	movs	r2, #10
 8004814:	2300      	movs	r3, #0
 8004816:	f005 fc5b 	bl	800a0d0 <__aeabi_uldivmod>
 800481a:	3230      	adds	r2, #48	; 0x30
 800481c:	4630      	mov	r0, r6
 800481e:	4639      	mov	r1, r7
 8004820:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8004824:	2300      	movs	r3, #0
 8004826:	220a      	movs	r2, #10
 8004828:	f005 fc52 	bl	800a0d0 <__aeabi_uldivmod>
 800482c:	4606      	mov	r6, r0
 800482e:	460f      	mov	r7, r1
 8004830:	ea56 0307 	orrs.w	r3, r6, r7
 8004834:	d1eb      	bne.n	800480e <_vfprintf_r+0xcbe>
 8004836:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800483a:	e72b      	b.n	8004694 <_vfprintf_r+0xb44>
 800483c:	4640      	mov	r0, r8
 800483e:	4649      	mov	r1, r9
 8004840:	aa1f      	add	r2, sp, #124	; 0x7c
 8004842:	f003 fe87 	bl	8008554 <__sprint_r>
 8004846:	2800      	cmp	r0, #0
 8004848:	f47f aa82 	bne.w	8003d50 <_vfprintf_r+0x200>
 800484c:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004850:	ac2c      	add	r4, sp, #176	; 0xb0
 8004852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004854:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004856:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004858:	440a      	add	r2, r1
 800485a:	4616      	mov	r6, r2
 800485c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800485e:	4293      	cmp	r3, r2
 8004860:	db3e      	blt.n	80048e0 <_vfprintf_r+0xd90>
 8004862:	9a02      	ldr	r2, [sp, #8]
 8004864:	07d5      	lsls	r5, r2, #31
 8004866:	d43b      	bmi.n	80048e0 <_vfprintf_r+0xd90>
 8004868:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800486a:	ebc6 050a 	rsb	r5, r6, sl
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	429d      	cmp	r5, r3
 8004872:	bfa8      	it	ge
 8004874:	461d      	movge	r5, r3
 8004876:	2d00      	cmp	r5, #0
 8004878:	462f      	mov	r7, r5
 800487a:	dd0b      	ble.n	8004894 <_vfprintf_r+0xd44>
 800487c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800487e:	6026      	str	r6, [r4, #0]
 8004880:	3201      	adds	r2, #1
 8004882:	44ab      	add	fp, r5
 8004884:	2a07      	cmp	r2, #7
 8004886:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800488a:	6065      	str	r5, [r4, #4]
 800488c:	9220      	str	r2, [sp, #128]	; 0x80
 800488e:	f300 8266 	bgt.w	8004d5e <_vfprintf_r+0x120e>
 8004892:	3408      	adds	r4, #8
 8004894:	2f00      	cmp	r7, #0
 8004896:	bfac      	ite	ge
 8004898:	1bdd      	subge	r5, r3, r7
 800489a:	461d      	movlt	r5, r3
 800489c:	2d00      	cmp	r5, #0
 800489e:	f77f ab7a 	ble.w	8003f96 <_vfprintf_r+0x446>
 80048a2:	2d10      	cmp	r5, #16
 80048a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80048a6:	4f41      	ldr	r7, [pc, #260]	; (80049ac <_vfprintf_r+0xe5c>)
 80048a8:	dd93      	ble.n	80047d2 <_vfprintf_r+0xc82>
 80048aa:	2610      	movs	r6, #16
 80048ac:	465a      	mov	r2, fp
 80048ae:	e003      	b.n	80048b8 <_vfprintf_r+0xd68>
 80048b0:	3408      	adds	r4, #8
 80048b2:	3d10      	subs	r5, #16
 80048b4:	2d10      	cmp	r5, #16
 80048b6:	dd8b      	ble.n	80047d0 <_vfprintf_r+0xc80>
 80048b8:	3301      	adds	r3, #1
 80048ba:	3210      	adds	r2, #16
 80048bc:	2b07      	cmp	r3, #7
 80048be:	9221      	str	r2, [sp, #132]	; 0x84
 80048c0:	9320      	str	r3, [sp, #128]	; 0x80
 80048c2:	6027      	str	r7, [r4, #0]
 80048c4:	6066      	str	r6, [r4, #4]
 80048c6:	ddf3      	ble.n	80048b0 <_vfprintf_r+0xd60>
 80048c8:	4640      	mov	r0, r8
 80048ca:	4649      	mov	r1, r9
 80048cc:	aa1f      	add	r2, sp, #124	; 0x7c
 80048ce:	f003 fe41 	bl	8008554 <__sprint_r>
 80048d2:	2800      	cmp	r0, #0
 80048d4:	f47f aa3c 	bne.w	8003d50 <_vfprintf_r+0x200>
 80048d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80048da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80048dc:	ac2c      	add	r4, sp, #176	; 0xb0
 80048de:	e7e8      	b.n	80048b2 <_vfprintf_r+0xd62>
 80048e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80048e2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80048e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80048e6:	6021      	str	r1, [r4, #0]
 80048e8:	3201      	adds	r2, #1
 80048ea:	4483      	add	fp, r0
 80048ec:	2a07      	cmp	r2, #7
 80048ee:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80048f2:	6060      	str	r0, [r4, #4]
 80048f4:	9220      	str	r2, [sp, #128]	; 0x80
 80048f6:	f300 8208 	bgt.w	8004d0a <_vfprintf_r+0x11ba>
 80048fa:	3408      	adds	r4, #8
 80048fc:	e7b4      	b.n	8004868 <_vfprintf_r+0xd18>
 80048fe:	9b02      	ldr	r3, [sp, #8]
 8004900:	07d8      	lsls	r0, r3, #31
 8004902:	f53f ae27 	bmi.w	8004554 <_vfprintf_r+0xa04>
 8004906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004908:	6023      	str	r3, [r4, #0]
 800490a:	3501      	adds	r5, #1
 800490c:	f10b 0601 	add.w	r6, fp, #1
 8004910:	2301      	movs	r3, #1
 8004912:	2d07      	cmp	r5, #7
 8004914:	9621      	str	r6, [sp, #132]	; 0x84
 8004916:	9520      	str	r5, [sp, #128]	; 0x80
 8004918:	6063      	str	r3, [r4, #4]
 800491a:	f77f ae4a 	ble.w	80045b2 <_vfprintf_r+0xa62>
 800491e:	4640      	mov	r0, r8
 8004920:	4649      	mov	r1, r9
 8004922:	aa1f      	add	r2, sp, #124	; 0x7c
 8004924:	f003 fe16 	bl	8008554 <__sprint_r>
 8004928:	2800      	cmp	r0, #0
 800492a:	f47f aa11 	bne.w	8003d50 <_vfprintf_r+0x200>
 800492e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8004930:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004932:	ac2c      	add	r4, sp, #176	; 0xb0
 8004934:	e63e      	b.n	80045b4 <_vfprintf_r+0xa64>
 8004936:	4640      	mov	r0, r8
 8004938:	4649      	mov	r1, r9
 800493a:	aa1f      	add	r2, sp, #124	; 0x7c
 800493c:	f003 fe0a 	bl	8008554 <__sprint_r>
 8004940:	2800      	cmp	r0, #0
 8004942:	f47f aa05 	bne.w	8003d50 <_vfprintf_r+0x200>
 8004946:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8004948:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800494a:	ac2c      	add	r4, sp, #176	; 0xb0
 800494c:	e60f      	b.n	800456e <_vfprintf_r+0xa1e>
 800494e:	3501      	adds	r5, #1
 8004950:	4456      	add	r6, sl
 8004952:	2d07      	cmp	r5, #7
 8004954:	9621      	str	r6, [sp, #132]	; 0x84
 8004956:	9520      	str	r5, [sp, #128]	; 0x80
 8004958:	e884 0480 	stmia.w	r4, {r7, sl}
 800495c:	f77f ae29 	ble.w	80045b2 <_vfprintf_r+0xa62>
 8004960:	e7dd      	b.n	800491e <_vfprintf_r+0xdce>
 8004962:	4640      	mov	r0, r8
 8004964:	4649      	mov	r1, r9
 8004966:	aa1f      	add	r2, sp, #124	; 0x7c
 8004968:	f003 fdf4 	bl	8008554 <__sprint_r>
 800496c:	2800      	cmp	r0, #0
 800496e:	f47f a9ef 	bne.w	8003d50 <_vfprintf_r+0x200>
 8004972:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8004974:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004976:	ac2c      	add	r4, sp, #176	; 0xb0
 8004978:	e605      	b.n	8004586 <_vfprintf_r+0xa36>
 800497a:	4640      	mov	r0, r8
 800497c:	4649      	mov	r1, r9
 800497e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004980:	f003 fde8 	bl	8008554 <__sprint_r>
 8004984:	2800      	cmp	r0, #0
 8004986:	f47f a9e3 	bne.w	8003d50 <_vfprintf_r+0x200>
 800498a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800498e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004990:	f7ff bab5 	b.w	8003efe <_vfprintf_r+0x3ae>
 8004994:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8004998:	4276      	negs	r6, r6
 800499a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800499e:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 80049a2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80049a6:	2301      	movs	r3, #1
 80049a8:	f7ff b9fc 	b.w	8003da4 <_vfprintf_r+0x254>
 80049ac:	0800ad60 	.word	0x0800ad60
 80049b0:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80049b4:	f003 fb92 	bl	80080dc <__fpclassifyd>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	f000 8116 	beq.w	8004bea <_vfprintf_r+0x109a>
 80049be:	f025 0320 	bic.w	r3, r5, #32
 80049c2:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80049c6:	9303      	str	r3, [sp, #12]
 80049c8:	f000 8260 	beq.w	8004e8c <_vfprintf_r+0x133c>
 80049cc:	2b47      	cmp	r3, #71	; 0x47
 80049ce:	d105      	bne.n	80049dc <_vfprintf_r+0xe8c>
 80049d0:	f1ba 0f00 	cmp.w	sl, #0
 80049d4:	bf14      	ite	ne
 80049d6:	46d3      	movne	fp, sl
 80049d8:	f04f 0b01 	moveq.w	fp, #1
 80049dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80049de:	9a02      	ldr	r2, [sp, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049e6:	9209      	str	r2, [sp, #36]	; 0x24
 80049e8:	f2c0 8260 	blt.w	8004eac <_vfprintf_r+0x135c>
 80049ec:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 80049f0:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80049f4:	f04f 0a00 	mov.w	sl, #0
 80049f8:	2d66      	cmp	r5, #102	; 0x66
 80049fa:	f000 815e 	beq.w	8004cba <_vfprintf_r+0x116a>
 80049fe:	2d46      	cmp	r5, #70	; 0x46
 8004a00:	f000 815b 	beq.w	8004cba <_vfprintf_r+0x116a>
 8004a04:	9b03      	ldr	r3, [sp, #12]
 8004a06:	2b45      	cmp	r3, #69	; 0x45
 8004a08:	bf0c      	ite	eq
 8004a0a:	f10b 0701 	addeq.w	r7, fp, #1
 8004a0e:	465f      	movne	r7, fp
 8004a10:	aa1a      	add	r2, sp, #104	; 0x68
 8004a12:	ab1d      	add	r3, sp, #116	; 0x74
 8004a14:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004a18:	4640      	mov	r0, r8
 8004a1a:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8004a1e:	2102      	movs	r1, #2
 8004a20:	463a      	mov	r2, r7
 8004a22:	ab19      	add	r3, sp, #100	; 0x64
 8004a24:	f000 fc60 	bl	80052e8 <_dtoa_r>
 8004a28:	2d67      	cmp	r5, #103	; 0x67
 8004a2a:	900a      	str	r0, [sp, #40]	; 0x28
 8004a2c:	d002      	beq.n	8004a34 <_vfprintf_r+0xee4>
 8004a2e:	2d47      	cmp	r5, #71	; 0x47
 8004a30:	f040 8151 	bne.w	8004cd6 <_vfprintf_r+0x1186>
 8004a34:	9b02      	ldr	r3, [sp, #8]
 8004a36:	07db      	lsls	r3, r3, #31
 8004a38:	f140 8241 	bpl.w	8004ebe <_vfprintf_r+0x136e>
 8004a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a3e:	19de      	adds	r6, r3, r7
 8004a40:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004a44:	2200      	movs	r2, #0
 8004a46:	2300      	movs	r3, #0
 8004a48:	f005 fae8 	bl	800a01c <__aeabi_dcmpeq>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	f040 81ad 	bne.w	8004dac <_vfprintf_r+0x125c>
 8004a52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004a54:	429e      	cmp	r6, r3
 8004a56:	d906      	bls.n	8004a66 <_vfprintf_r+0xf16>
 8004a58:	2130      	movs	r1, #48	; 0x30
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	921d      	str	r2, [sp, #116]	; 0x74
 8004a5e:	7019      	strb	r1, [r3, #0]
 8004a60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004a62:	429e      	cmp	r6, r3
 8004a64:	d8f9      	bhi.n	8004a5a <_vfprintf_r+0xf0a>
 8004a66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	930d      	str	r3, [sp, #52]	; 0x34
 8004a6c:	9b03      	ldr	r3, [sp, #12]
 8004a6e:	2b47      	cmp	r3, #71	; 0x47
 8004a70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a72:	f000 8183 	beq.w	8004d7c <_vfprintf_r+0x122c>
 8004a76:	2d65      	cmp	r5, #101	; 0x65
 8004a78:	f340 81a6 	ble.w	8004dc8 <_vfprintf_r+0x1278>
 8004a7c:	2d66      	cmp	r5, #102	; 0x66
 8004a7e:	930c      	str	r3, [sp, #48]	; 0x30
 8004a80:	f000 821f 	beq.w	8004ec2 <_vfprintf_r+0x1372>
 8004a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	f300 8202 	bgt.w	8004e92 <_vfprintf_r+0x1342>
 8004a8e:	9b02      	ldr	r3, [sp, #8]
 8004a90:	07d9      	lsls	r1, r3, #31
 8004a92:	f100 8239 	bmi.w	8004f08 <_vfprintf_r+0x13b8>
 8004a96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004a9a:	9207      	str	r2, [sp, #28]
 8004a9c:	f1ba 0f00 	cmp.w	sl, #0
 8004aa0:	f040 8179 	bne.w	8004d96 <_vfprintf_r+0x1246>
 8004aa4:	9303      	str	r3, [sp, #12]
 8004aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aa8:	9302      	str	r3, [sp, #8]
 8004aaa:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8004aae:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8004ab2:	f7ff b9ab 	b.w	8003e0c <_vfprintf_r+0x2bc>
 8004ab6:	f027 0707 	bic.w	r7, r7, #7
 8004aba:	ed97 7b00 	vldr	d7, [r7]
 8004abe:	f107 0308 	add.w	r3, r7, #8
 8004ac2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004ac6:	9308      	str	r3, [sp, #32]
 8004ac8:	f7ff bb63 	b.w	8004192 <_vfprintf_r+0x642>
 8004acc:	9b02      	ldr	r3, [sp, #8]
 8004ace:	06db      	lsls	r3, r3, #27
 8004ad0:	d40b      	bmi.n	8004aea <_vfprintf_r+0xf9a>
 8004ad2:	9b02      	ldr	r3, [sp, #8]
 8004ad4:	065f      	lsls	r7, r3, #25
 8004ad6:	d508      	bpl.n	8004aea <_vfprintf_r+0xf9a>
 8004ad8:	9a08      	ldr	r2, [sp, #32]
 8004ada:	6813      	ldr	r3, [r2, #0]
 8004adc:	3204      	adds	r2, #4
 8004ade:	9208      	str	r2, [sp, #32]
 8004ae0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8004ae4:	801a      	strh	r2, [r3, #0]
 8004ae6:	f7ff b874 	b.w	8003bd2 <_vfprintf_r+0x82>
 8004aea:	9a08      	ldr	r2, [sp, #32]
 8004aec:	6813      	ldr	r3, [r2, #0]
 8004aee:	3204      	adds	r2, #4
 8004af0:	9208      	str	r2, [sp, #32]
 8004af2:	9a05      	ldr	r2, [sp, #20]
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	f7ff b86c 	b.w	8003bd2 <_vfprintf_r+0x82>
 8004afa:	9b02      	ldr	r3, [sp, #8]
 8004afc:	9a08      	ldr	r2, [sp, #32]
 8004afe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004b02:	4613      	mov	r3, r2
 8004b04:	f43f ac62 	beq.w	80043cc <_vfprintf_r+0x87c>
 8004b08:	8816      	ldrh	r6, [r2, #0]
 8004b0a:	3204      	adds	r2, #4
 8004b0c:	2700      	movs	r7, #0
 8004b0e:	2301      	movs	r3, #1
 8004b10:	9208      	str	r2, [sp, #32]
 8004b12:	f7ff b941 	b.w	8003d98 <_vfprintf_r+0x248>
 8004b16:	9b02      	ldr	r3, [sp, #8]
 8004b18:	9a08      	ldr	r2, [sp, #32]
 8004b1a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004b1e:	4613      	mov	r3, r2
 8004b20:	d076      	beq.n	8004c10 <_vfprintf_r+0x10c0>
 8004b22:	3304      	adds	r3, #4
 8004b24:	8816      	ldrh	r6, [r2, #0]
 8004b26:	9308      	str	r3, [sp, #32]
 8004b28:	2700      	movs	r7, #0
 8004b2a:	f7ff bad3 	b.w	80040d4 <_vfprintf_r+0x584>
 8004b2e:	4693      	mov	fp, r2
 8004b30:	3301      	adds	r3, #1
 8004b32:	44ab      	add	fp, r5
 8004b34:	2b07      	cmp	r3, #7
 8004b36:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004b3a:	9320      	str	r3, [sp, #128]	; 0x80
 8004b3c:	6027      	str	r7, [r4, #0]
 8004b3e:	6065      	str	r5, [r4, #4]
 8004b40:	f73f ae7c 	bgt.w	800483c <_vfprintf_r+0xcec>
 8004b44:	3408      	adds	r4, #8
 8004b46:	e684      	b.n	8004852 <_vfprintf_r+0xd02>
 8004b48:	4640      	mov	r0, r8
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b4e:	f003 fd01 	bl	8008554 <__sprint_r>
 8004b52:	2800      	cmp	r0, #0
 8004b54:	f47f a8fc 	bne.w	8003d50 <_vfprintf_r+0x200>
 8004b58:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004b5c:	ac2c      	add	r4, sp, #176	; 0xb0
 8004b5e:	e482      	b.n	8004466 <_vfprintf_r+0x916>
 8004b60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004b62:	4ab0      	ldr	r2, [pc, #704]	; (8004e24 <_vfprintf_r+0x12d4>)
 8004b64:	6022      	str	r2, [r4, #0]
 8004b66:	3301      	adds	r3, #1
 8004b68:	f10b 0b01 	add.w	fp, fp, #1
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	2b07      	cmp	r3, #7
 8004b70:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004b74:	9320      	str	r3, [sp, #128]	; 0x80
 8004b76:	6062      	str	r2, [r4, #4]
 8004b78:	dc50      	bgt.n	8004c1c <_vfprintf_r+0x10cc>
 8004b7a:	3408      	adds	r4, #8
 8004b7c:	b92d      	cbnz	r5, 8004b8a <_vfprintf_r+0x103a>
 8004b7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b80:	b91b      	cbnz	r3, 8004b8a <_vfprintf_r+0x103a>
 8004b82:	9b02      	ldr	r3, [sp, #8]
 8004b84:	07de      	lsls	r6, r3, #31
 8004b86:	f57f aa06 	bpl.w	8003f96 <_vfprintf_r+0x446>
 8004b8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004b8c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004b8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004b90:	6022      	str	r2, [r4, #0]
 8004b92:	3301      	adds	r3, #1
 8004b94:	eb0b 0201 	add.w	r2, fp, r1
 8004b98:	2b07      	cmp	r3, #7
 8004b9a:	9221      	str	r2, [sp, #132]	; 0x84
 8004b9c:	6061      	str	r1, [r4, #4]
 8004b9e:	9320      	str	r3, [sp, #128]	; 0x80
 8004ba0:	f300 8167 	bgt.w	8004e72 <_vfprintf_r+0x1322>
 8004ba4:	3408      	adds	r4, #8
 8004ba6:	426d      	negs	r5, r5
 8004ba8:	2d00      	cmp	r5, #0
 8004baa:	dd6f      	ble.n	8004c8c <_vfprintf_r+0x113c>
 8004bac:	2d10      	cmp	r5, #16
 8004bae:	4f9e      	ldr	r7, [pc, #632]	; (8004e28 <_vfprintf_r+0x12d8>)
 8004bb0:	bfc8      	it	gt
 8004bb2:	2610      	movgt	r6, #16
 8004bb4:	dc05      	bgt.n	8004bc2 <_vfprintf_r+0x1072>
 8004bb6:	e0b5      	b.n	8004d24 <_vfprintf_r+0x11d4>
 8004bb8:	3408      	adds	r4, #8
 8004bba:	3d10      	subs	r5, #16
 8004bbc:	2d10      	cmp	r5, #16
 8004bbe:	f340 80b1 	ble.w	8004d24 <_vfprintf_r+0x11d4>
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	3210      	adds	r2, #16
 8004bc6:	2b07      	cmp	r3, #7
 8004bc8:	9221      	str	r2, [sp, #132]	; 0x84
 8004bca:	9320      	str	r3, [sp, #128]	; 0x80
 8004bcc:	6027      	str	r7, [r4, #0]
 8004bce:	6066      	str	r6, [r4, #4]
 8004bd0:	ddf2      	ble.n	8004bb8 <_vfprintf_r+0x1068>
 8004bd2:	4640      	mov	r0, r8
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	aa1f      	add	r2, sp, #124	; 0x7c
 8004bd8:	f003 fcbc 	bl	8008554 <__sprint_r>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	f47f a8b7 	bne.w	8003d50 <_vfprintf_r+0x200>
 8004be2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004be4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004be6:	ac2c      	add	r4, sp, #176	; 0xb0
 8004be8:	e7e7      	b.n	8004bba <_vfprintf_r+0x106a>
 8004bea:	9e02      	ldr	r6, [sp, #8]
 8004bec:	4a8f      	ldr	r2, [pc, #572]	; (8004e2c <_vfprintf_r+0x12dc>)
 8004bee:	4b90      	ldr	r3, [pc, #576]	; (8004e30 <_vfprintf_r+0x12e0>)
 8004bf0:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8004bf4:	900b      	str	r0, [sp, #44]	; 0x2c
 8004bf6:	2103      	movs	r1, #3
 8004bf8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8004bfc:	2d47      	cmp	r5, #71	; 0x47
 8004bfe:	bfd8      	it	le
 8004c00:	461a      	movle	r2, r3
 8004c02:	9103      	str	r1, [sp, #12]
 8004c04:	9602      	str	r6, [sp, #8]
 8004c06:	900c      	str	r0, [sp, #48]	; 0x30
 8004c08:	920a      	str	r2, [sp, #40]	; 0x28
 8004c0a:	9107      	str	r1, [sp, #28]
 8004c0c:	f7ff b8fe 	b.w	8003e0c <_vfprintf_r+0x2bc>
 8004c10:	3304      	adds	r3, #4
 8004c12:	6816      	ldr	r6, [r2, #0]
 8004c14:	9308      	str	r3, [sp, #32]
 8004c16:	2700      	movs	r7, #0
 8004c18:	f7ff ba5c 	b.w	80040d4 <_vfprintf_r+0x584>
 8004c1c:	4640      	mov	r0, r8
 8004c1e:	4649      	mov	r1, r9
 8004c20:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c22:	f003 fc97 	bl	8008554 <__sprint_r>
 8004c26:	2800      	cmp	r0, #0
 8004c28:	f47f a892 	bne.w	8003d50 <_vfprintf_r+0x200>
 8004c2c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004c2e:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004c32:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c34:	e7a2      	b.n	8004b7c <_vfprintf_r+0x102c>
 8004c36:	f041 0120 	orr.w	r1, r1, #32
 8004c3a:	9102      	str	r1, [sp, #8]
 8004c3c:	785d      	ldrb	r5, [r3, #1]
 8004c3e:	1c59      	adds	r1, r3, #1
 8004c40:	f7fe bff7 	b.w	8003c32 <_vfprintf_r+0xe2>
 8004c44:	9806      	ldr	r0, [sp, #24]
 8004c46:	9108      	str	r1, [sp, #32]
 8004c48:	4240      	negs	r0, r0
 8004c4a:	9006      	str	r0, [sp, #24]
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	f7ff b9f1 	b.w	8004034 <_vfprintf_r+0x4e4>
 8004c52:	4640      	mov	r0, r8
 8004c54:	4649      	mov	r1, r9
 8004c56:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c58:	f003 fc7c 	bl	8008554 <__sprint_r>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	f47f a877 	bne.w	8003d50 <_vfprintf_r+0x200>
 8004c62:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004c66:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c68:	e413      	b.n	8004492 <_vfprintf_r+0x942>
 8004c6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c6c:	ab2c      	add	r3, sp, #176	; 0xb0
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	9307      	str	r3, [sp, #28]
 8004c72:	f7ff b8c3 	b.w	8003dfc <_vfprintf_r+0x2ac>
 8004c76:	4640      	mov	r0, r8
 8004c78:	4649      	mov	r1, r9
 8004c7a:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c7c:	f003 fc6a 	bl	8008554 <__sprint_r>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	f47f a865 	bne.w	8003d50 <_vfprintf_r+0x200>
 8004c86:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c88:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c8a:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c8c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004c8e:	6060      	str	r0, [r4, #4]
 8004c90:	3301      	adds	r3, #1
 8004c92:	eb02 0b00 	add.w	fp, r2, r0
 8004c96:	2b07      	cmp	r3, #7
 8004c98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c9a:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004c9e:	9320      	str	r3, [sp, #128]	; 0x80
 8004ca0:	6022      	str	r2, [r4, #0]
 8004ca2:	f77f a977 	ble.w	8003f94 <_vfprintf_r+0x444>
 8004ca6:	e492      	b.n	80045ce <_vfprintf_r+0xa7e>
 8004ca8:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004cac:	f7fe ff22 	bl	8003af4 <strlen>
 8004cb0:	9708      	str	r7, [sp, #32]
 8004cb2:	9007      	str	r0, [sp, #28]
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f7ff b9f2 	b.w	800409e <_vfprintf_r+0x54e>
 8004cba:	aa1a      	add	r2, sp, #104	; 0x68
 8004cbc:	ab1d      	add	r3, sp, #116	; 0x74
 8004cbe:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004cc2:	4640      	mov	r0, r8
 8004cc4:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8004cc8:	2103      	movs	r1, #3
 8004cca:	465a      	mov	r2, fp
 8004ccc:	ab19      	add	r3, sp, #100	; 0x64
 8004cce:	f000 fb0b 	bl	80052e8 <_dtoa_r>
 8004cd2:	465f      	mov	r7, fp
 8004cd4:	900a      	str	r0, [sp, #40]	; 0x28
 8004cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cd8:	19de      	adds	r6, r3, r7
 8004cda:	9b03      	ldr	r3, [sp, #12]
 8004cdc:	2b46      	cmp	r3, #70	; 0x46
 8004cde:	f47f aeaf 	bne.w	8004a40 <_vfprintf_r+0xef0>
 8004ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b30      	cmp	r3, #48	; 0x30
 8004ce8:	f000 8100 	beq.w	8004eec <_vfprintf_r+0x139c>
 8004cec:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8004cee:	443e      	add	r6, r7
 8004cf0:	e6a6      	b.n	8004a40 <_vfprintf_r+0xef0>
 8004cf2:	4640      	mov	r0, r8
 8004cf4:	4649      	mov	r1, r9
 8004cf6:	aa1f      	add	r2, sp, #124	; 0x7c
 8004cf8:	f003 fc2c 	bl	8008554 <__sprint_r>
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	f47f a827 	bne.w	8003d50 <_vfprintf_r+0x200>
 8004d02:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004d06:	ac2c      	add	r4, sp, #176	; 0xb0
 8004d08:	e4eb      	b.n	80046e2 <_vfprintf_r+0xb92>
 8004d0a:	4640      	mov	r0, r8
 8004d0c:	4649      	mov	r1, r9
 8004d0e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d10:	f003 fc20 	bl	8008554 <__sprint_r>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	f47f a81b 	bne.w	8003d50 <_vfprintf_r+0x200>
 8004d1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d1c:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004d20:	ac2c      	add	r4, sp, #176	; 0xb0
 8004d22:	e5a1      	b.n	8004868 <_vfprintf_r+0xd18>
 8004d24:	3301      	adds	r3, #1
 8004d26:	442a      	add	r2, r5
 8004d28:	2b07      	cmp	r3, #7
 8004d2a:	9221      	str	r2, [sp, #132]	; 0x84
 8004d2c:	9320      	str	r3, [sp, #128]	; 0x80
 8004d2e:	6027      	str	r7, [r4, #0]
 8004d30:	6065      	str	r5, [r4, #4]
 8004d32:	dca0      	bgt.n	8004c76 <_vfprintf_r+0x1126>
 8004d34:	3408      	adds	r4, #8
 8004d36:	e7a9      	b.n	8004c8c <_vfprintf_r+0x113c>
 8004d38:	2e06      	cmp	r6, #6
 8004d3a:	4633      	mov	r3, r6
 8004d3c:	bf28      	it	cs
 8004d3e:	2306      	movcs	r3, #6
 8004d40:	9307      	str	r3, [sp, #28]
 8004d42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004d46:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8004d4a:	9303      	str	r3, [sp, #12]
 8004d4c:	4b39      	ldr	r3, [pc, #228]	; (8004e34 <_vfprintf_r+0x12e4>)
 8004d4e:	9708      	str	r7, [sp, #32]
 8004d50:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8004d54:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8004d58:	930a      	str	r3, [sp, #40]	; 0x28
 8004d5a:	f7ff b857 	b.w	8003e0c <_vfprintf_r+0x2bc>
 8004d5e:	4640      	mov	r0, r8
 8004d60:	4649      	mov	r1, r9
 8004d62:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d64:	f003 fbf6 	bl	8008554 <__sprint_r>
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	f47e aff1 	bne.w	8003d50 <_vfprintf_r+0x200>
 8004d6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d72:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	ac2c      	add	r4, sp, #176	; 0xb0
 8004d7a:	e58b      	b.n	8004894 <_vfprintf_r+0xd44>
 8004d7c:	1cdf      	adds	r7, r3, #3
 8004d7e:	db22      	blt.n	8004dc6 <_vfprintf_r+0x1276>
 8004d80:	459b      	cmp	fp, r3
 8004d82:	db20      	blt.n	8004dc6 <_vfprintf_r+0x1276>
 8004d84:	930c      	str	r3, [sp, #48]	; 0x30
 8004d86:	2567      	movs	r5, #103	; 0x67
 8004d88:	e67c      	b.n	8004a84 <_vfprintf_r+0xf34>
 8004d8a:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8004d8e:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 8004d92:	f7ff ba10 	b.w	80041b6 <_vfprintf_r+0x666>
 8004d96:	9303      	str	r3, [sp, #12]
 8004d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d9a:	9302      	str	r3, [sp, #8]
 8004d9c:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8004da0:	2300      	movs	r3, #0
 8004da2:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 8004da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004da8:	f7ff b833 	b.w	8003e12 <_vfprintf_r+0x2c2>
 8004dac:	4633      	mov	r3, r6
 8004dae:	e65a      	b.n	8004a66 <_vfprintf_r+0xf16>
 8004db0:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8004db4:	900b      	str	r0, [sp, #44]	; 0x2c
 8004db6:	9708      	str	r7, [sp, #32]
 8004db8:	900c      	str	r0, [sp, #48]	; 0x30
 8004dba:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8004dbe:	9303      	str	r3, [sp, #12]
 8004dc0:	9607      	str	r6, [sp, #28]
 8004dc2:	f7ff b823 	b.w	8003e0c <_vfprintf_r+0x2bc>
 8004dc6:	3d02      	subs	r5, #2
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	9319      	str	r3, [sp, #100]	; 0x64
 8004dce:	bfba      	itte	lt
 8004dd0:	425b      	neglt	r3, r3
 8004dd2:	222d      	movlt	r2, #45	; 0x2d
 8004dd4:	222b      	movge	r2, #43	; 0x2b
 8004dd6:	2b09      	cmp	r3, #9
 8004dd8:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
 8004ddc:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8004de0:	f340 8098 	ble.w	8004f14 <_vfprintf_r+0x13c4>
 8004de4:	f10d 067b 	add.w	r6, sp, #123	; 0x7b
 8004de8:	4630      	mov	r0, r6
 8004dea:	4a13      	ldr	r2, [pc, #76]	; (8004e38 <_vfprintf_r+0x12e8>)
 8004dec:	fb82 2103 	smull	r2, r1, r2, r3
 8004df0:	17da      	asrs	r2, r3, #31
 8004df2:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8004df6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004dfa:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8004dfe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004e02:	2a09      	cmp	r2, #9
 8004e04:	4613      	mov	r3, r2
 8004e06:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8004e0a:	dcee      	bgt.n	8004dea <_vfprintf_r+0x129a>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	3330      	adds	r3, #48	; 0x30
 8004e10:	b2d9      	uxtb	r1, r3
 8004e12:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8004e16:	4296      	cmp	r6, r2
 8004e18:	f240 80a9 	bls.w	8004f6e <_vfprintf_r+0x141e>
 8004e1c:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8004e20:	4603      	mov	r3, r0
 8004e22:	e00d      	b.n	8004e40 <_vfprintf_r+0x12f0>
 8004e24:	0800adb0 	.word	0x0800adb0
 8004e28:	0800ad60 	.word	0x0800ad60
 8004e2c:	0800ad7c 	.word	0x0800ad7c
 8004e30:	0800ad78 	.word	0x0800ad78
 8004e34:	0800ada8 	.word	0x0800ada8
 8004e38:	66666667 	.word	0x66666667
 8004e3c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004e40:	f802 1b01 	strb.w	r1, [r2], #1
 8004e44:	42b3      	cmp	r3, r6
 8004e46:	d1f9      	bne.n	8004e3c <_vfprintf_r+0x12ec>
 8004e48:	ab1f      	add	r3, sp, #124	; 0x7c
 8004e4a:	1a1b      	subs	r3, r3, r0
 8004e4c:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8004e50:	4413      	add	r3, r2
 8004e52:	aa1b      	add	r2, sp, #108	; 0x6c
 8004e54:	1a9b      	subs	r3, r3, r2
 8004e56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e58:	9313      	str	r3, [sp, #76]	; 0x4c
 8004e5a:	2a01      	cmp	r2, #1
 8004e5c:	4413      	add	r3, r2
 8004e5e:	9307      	str	r3, [sp, #28]
 8004e60:	dd69      	ble.n	8004f36 <_vfprintf_r+0x13e6>
 8004e62:	9b07      	ldr	r3, [sp, #28]
 8004e64:	2200      	movs	r2, #0
 8004e66:	3301      	adds	r3, #1
 8004e68:	9307      	str	r3, [sp, #28]
 8004e6a:	920c      	str	r2, [sp, #48]	; 0x30
 8004e6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004e70:	e614      	b.n	8004a9c <_vfprintf_r+0xf4c>
 8004e72:	4640      	mov	r0, r8
 8004e74:	4649      	mov	r1, r9
 8004e76:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e78:	f003 fb6c 	bl	8008554 <__sprint_r>
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	f47e af67 	bne.w	8003d50 <_vfprintf_r+0x200>
 8004e82:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004e84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004e86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004e88:	ac2c      	add	r4, sp, #176	; 0xb0
 8004e8a:	e68c      	b.n	8004ba6 <_vfprintf_r+0x1056>
 8004e8c:	f04f 0b06 	mov.w	fp, #6
 8004e90:	e5a4      	b.n	80049dc <_vfprintf_r+0xe8c>
 8004e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bfd8      	it	le
 8004e98:	f1c3 0602 	rsble	r6, r3, #2
 8004e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e9e:	bfc8      	it	gt
 8004ea0:	2601      	movgt	r6, #1
 8004ea2:	18f3      	adds	r3, r6, r3
 8004ea4:	9307      	str	r3, [sp, #28]
 8004ea6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004eaa:	e5f7      	b.n	8004a9c <_vfprintf_r+0xf4c>
 8004eac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004eb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004eb4:	9014      	str	r0, [sp, #80]	; 0x50
 8004eb6:	9315      	str	r3, [sp, #84]	; 0x54
 8004eb8:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8004ebc:	e59c      	b.n	80049f8 <_vfprintf_r+0xea8>
 8004ebe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004ec0:	e5d1      	b.n	8004a66 <_vfprintf_r+0xf16>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	dd2e      	ble.n	8004f24 <_vfprintf_r+0x13d4>
 8004ec6:	f1bb 0f00 	cmp.w	fp, #0
 8004eca:	d107      	bne.n	8004edc <_vfprintf_r+0x138c>
 8004ecc:	9b02      	ldr	r3, [sp, #8]
 8004ece:	07de      	lsls	r6, r3, #31
 8004ed0:	d404      	bmi.n	8004edc <_vfprintf_r+0x138c>
 8004ed2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ed4:	9207      	str	r2, [sp, #28]
 8004ed6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004eda:	e5df      	b.n	8004a9c <_vfprintf_r+0xf4c>
 8004edc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ede:	f10b 0601 	add.w	r6, fp, #1
 8004ee2:	4433      	add	r3, r6
 8004ee4:	9307      	str	r3, [sp, #28]
 8004ee6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004eea:	e5d7      	b.n	8004a9c <_vfprintf_r+0xf4c>
 8004eec:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f005 f892 	bl	800a01c <__aeabi_dcmpeq>
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	f47f aef7 	bne.w	8004cec <_vfprintf_r+0x119c>
 8004efe:	f1c7 0701 	rsb	r7, r7, #1
 8004f02:	9719      	str	r7, [sp, #100]	; 0x64
 8004f04:	443e      	add	r6, r7
 8004f06:	e59b      	b.n	8004a40 <_vfprintf_r+0xef0>
 8004f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	9307      	str	r3, [sp, #28]
 8004f0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004f12:	e5c3      	b.n	8004a9c <_vfprintf_r+0xf4c>
 8004f14:	3330      	adds	r3, #48	; 0x30
 8004f16:	2230      	movs	r2, #48	; 0x30
 8004f18:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8004f1c:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8004f20:	ab1c      	add	r3, sp, #112	; 0x70
 8004f22:	e796      	b.n	8004e52 <_vfprintf_r+0x1302>
 8004f24:	f1bb 0f00 	cmp.w	fp, #0
 8004f28:	d11b      	bne.n	8004f62 <_vfprintf_r+0x1412>
 8004f2a:	9b02      	ldr	r3, [sp, #8]
 8004f2c:	07d8      	lsls	r0, r3, #31
 8004f2e:	d418      	bmi.n	8004f62 <_vfprintf_r+0x1412>
 8004f30:	2301      	movs	r3, #1
 8004f32:	9307      	str	r3, [sp, #28]
 8004f34:	e5b2      	b.n	8004a9c <_vfprintf_r+0xf4c>
 8004f36:	9b02      	ldr	r3, [sp, #8]
 8004f38:	f013 0301 	ands.w	r3, r3, #1
 8004f3c:	d191      	bne.n	8004e62 <_vfprintf_r+0x1312>
 8004f3e:	930c      	str	r3, [sp, #48]	; 0x30
 8004f40:	9b07      	ldr	r3, [sp, #28]
 8004f42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004f46:	e5a9      	b.n	8004a9c <_vfprintf_r+0xf4c>
 8004f48:	9d08      	ldr	r5, [sp, #32]
 8004f4a:	682e      	ldr	r6, [r5, #0]
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	3004      	adds	r0, #4
 8004f50:	2e00      	cmp	r6, #0
 8004f52:	785d      	ldrb	r5, [r3, #1]
 8004f54:	9008      	str	r0, [sp, #32]
 8004f56:	f6be ae6c 	bge.w	8003c32 <_vfprintf_r+0xe2>
 8004f5a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8004f5e:	f7fe be68 	b.w	8003c32 <_vfprintf_r+0xe2>
 8004f62:	f10b 0302 	add.w	r3, fp, #2
 8004f66:	9307      	str	r3, [sp, #28]
 8004f68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004f6c:	e596      	b.n	8004a9c <_vfprintf_r+0xf4c>
 8004f6e:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8004f72:	e76e      	b.n	8004e52 <_vfprintf_r+0x1302>

08004f74 <vfprintf>:
 8004f74:	b430      	push	{r4, r5}
 8004f76:	4c04      	ldr	r4, [pc, #16]	; (8004f88 <vfprintf+0x14>)
 8004f78:	460d      	mov	r5, r1
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	4601      	mov	r1, r0
 8004f7e:	462a      	mov	r2, r5
 8004f80:	6820      	ldr	r0, [r4, #0]
 8004f82:	bc30      	pop	{r4, r5}
 8004f84:	f7fe bde4 	b.w	8003b50 <_vfprintf_r>
 8004f88:	200004d0 	.word	0x200004d0

08004f8c <__sbprintf>:
 8004f8c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8004f90:	460c      	mov	r4, r1
 8004f92:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8004f96:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8004f9a:	69e7      	ldr	r7, [r4, #28]
 8004f9c:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8004f9e:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 8004fa2:	9119      	str	r1, [sp, #100]	; 0x64
 8004fa4:	ad1a      	add	r5, sp, #104	; 0x68
 8004fa6:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8004faa:	f02e 0e02 	bic.w	lr, lr, #2
 8004fae:	f04f 0c00 	mov.w	ip, #0
 8004fb2:	9707      	str	r7, [sp, #28]
 8004fb4:	4669      	mov	r1, sp
 8004fb6:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8004fb8:	9500      	str	r5, [sp, #0]
 8004fba:	9504      	str	r5, [sp, #16]
 8004fbc:	9602      	str	r6, [sp, #8]
 8004fbe:	9605      	str	r6, [sp, #20]
 8004fc0:	f8ad e00c 	strh.w	lr, [sp, #12]
 8004fc4:	f8ad 900e 	strh.w	r9, [sp, #14]
 8004fc8:	9709      	str	r7, [sp, #36]	; 0x24
 8004fca:	f8cd c018 	str.w	ip, [sp, #24]
 8004fce:	4606      	mov	r6, r0
 8004fd0:	f7fe fdbe 	bl	8003b50 <_vfprintf_r>
 8004fd4:	1e05      	subs	r5, r0, #0
 8004fd6:	db07      	blt.n	8004fe8 <__sbprintf+0x5c>
 8004fd8:	4630      	mov	r0, r6
 8004fda:	4669      	mov	r1, sp
 8004fdc:	f001 f980 	bl	80062e0 <_fflush_r>
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	bf18      	it	ne
 8004fe4:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8004fe8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004fec:	065b      	lsls	r3, r3, #25
 8004fee:	d503      	bpl.n	8004ff8 <__sbprintf+0x6c>
 8004ff0:	89a3      	ldrh	r3, [r4, #12]
 8004ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ff6:	81a3      	strh	r3, [r4, #12]
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8004ffe:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8005002:	bf00      	nop

08005004 <__swsetup_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4b2f      	ldr	r3, [pc, #188]	; (80050c4 <__swsetup_r+0xc0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4605      	mov	r5, r0
 800500c:	460c      	mov	r4, r1
 800500e:	b113      	cbz	r3, 8005016 <__swsetup_r+0x12>
 8005010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005012:	2a00      	cmp	r2, #0
 8005014:	d036      	beq.n	8005084 <__swsetup_r+0x80>
 8005016:	89a2      	ldrh	r2, [r4, #12]
 8005018:	b293      	uxth	r3, r2
 800501a:	0718      	lsls	r0, r3, #28
 800501c:	d50c      	bpl.n	8005038 <__swsetup_r+0x34>
 800501e:	6920      	ldr	r0, [r4, #16]
 8005020:	b1a8      	cbz	r0, 800504e <__swsetup_r+0x4a>
 8005022:	f013 0201 	ands.w	r2, r3, #1
 8005026:	d01e      	beq.n	8005066 <__swsetup_r+0x62>
 8005028:	6963      	ldr	r3, [r4, #20]
 800502a:	2200      	movs	r2, #0
 800502c:	425b      	negs	r3, r3
 800502e:	61a3      	str	r3, [r4, #24]
 8005030:	60a2      	str	r2, [r4, #8]
 8005032:	b1f0      	cbz	r0, 8005072 <__swsetup_r+0x6e>
 8005034:	2000      	movs	r0, #0
 8005036:	bd38      	pop	{r3, r4, r5, pc}
 8005038:	06d9      	lsls	r1, r3, #27
 800503a:	d53b      	bpl.n	80050b4 <__swsetup_r+0xb0>
 800503c:	0758      	lsls	r0, r3, #29
 800503e:	d425      	bmi.n	800508c <__swsetup_r+0x88>
 8005040:	6920      	ldr	r0, [r4, #16]
 8005042:	f042 0308 	orr.w	r3, r2, #8
 8005046:	81a3      	strh	r3, [r4, #12]
 8005048:	b29b      	uxth	r3, r3
 800504a:	2800      	cmp	r0, #0
 800504c:	d1e9      	bne.n	8005022 <__swsetup_r+0x1e>
 800504e:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8005052:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005056:	d0e4      	beq.n	8005022 <__swsetup_r+0x1e>
 8005058:	4628      	mov	r0, r5
 800505a:	4621      	mov	r1, r4
 800505c:	f001 fdcc 	bl	8006bf8 <__smakebuf_r>
 8005060:	89a3      	ldrh	r3, [r4, #12]
 8005062:	6920      	ldr	r0, [r4, #16]
 8005064:	e7dd      	b.n	8005022 <__swsetup_r+0x1e>
 8005066:	0799      	lsls	r1, r3, #30
 8005068:	bf58      	it	pl
 800506a:	6962      	ldrpl	r2, [r4, #20]
 800506c:	60a2      	str	r2, [r4, #8]
 800506e:	2800      	cmp	r0, #0
 8005070:	d1e0      	bne.n	8005034 <__swsetup_r+0x30>
 8005072:	89a3      	ldrh	r3, [r4, #12]
 8005074:	061a      	lsls	r2, r3, #24
 8005076:	d5de      	bpl.n	8005036 <__swsetup_r+0x32>
 8005078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800507c:	81a3      	strh	r3, [r4, #12]
 800507e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005082:	bd38      	pop	{r3, r4, r5, pc}
 8005084:	4618      	mov	r0, r3
 8005086:	f001 fa3b 	bl	8006500 <__sinit>
 800508a:	e7c4      	b.n	8005016 <__swsetup_r+0x12>
 800508c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800508e:	b149      	cbz	r1, 80050a4 <__swsetup_r+0xa0>
 8005090:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8005094:	4299      	cmp	r1, r3
 8005096:	d003      	beq.n	80050a0 <__swsetup_r+0x9c>
 8005098:	4628      	mov	r0, r5
 800509a:	f001 fab7 	bl	800660c <_free_r>
 800509e:	89a2      	ldrh	r2, [r4, #12]
 80050a0:	2300      	movs	r3, #0
 80050a2:	6323      	str	r3, [r4, #48]	; 0x30
 80050a4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 80050a8:	2300      	movs	r3, #0
 80050aa:	6920      	ldr	r0, [r4, #16]
 80050ac:	6063      	str	r3, [r4, #4]
 80050ae:	b292      	uxth	r2, r2
 80050b0:	6020      	str	r0, [r4, #0]
 80050b2:	e7c6      	b.n	8005042 <__swsetup_r+0x3e>
 80050b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050b8:	2309      	movs	r3, #9
 80050ba:	602b      	str	r3, [r5, #0]
 80050bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050c0:	81a2      	strh	r2, [r4, #12]
 80050c2:	bd38      	pop	{r3, r4, r5, pc}
 80050c4:	200004d0 	.word	0x200004d0

080050c8 <register_fini>:
 80050c8:	4b02      	ldr	r3, [pc, #8]	; (80050d4 <register_fini+0xc>)
 80050ca:	b113      	cbz	r3, 80050d2 <register_fini+0xa>
 80050cc:	4802      	ldr	r0, [pc, #8]	; (80050d8 <register_fini+0x10>)
 80050ce:	f000 b86f 	b.w	80051b0 <atexit>
 80050d2:	4770      	bx	lr
 80050d4:	00000000 	.word	0x00000000
 80050d8:	08006545 	.word	0x08006545

080050dc <__call_exitprocs>:
 80050dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e0:	4b31      	ldr	r3, [pc, #196]	; (80051a8 <__call_exitprocs+0xcc>)
 80050e2:	b083      	sub	sp, #12
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80050ec:	4681      	mov	r9, r0
 80050ee:	460e      	mov	r6, r1
 80050f0:	9301      	str	r3, [sp, #4]
 80050f2:	9b00      	ldr	r3, [sp, #0]
 80050f4:	f8d3 7148 	ldr.w	r7, [r3, #328]	; 0x148
 80050f8:	b327      	cbz	r7, 8005144 <__call_exitprocs+0x68>
 80050fa:	f8dd a004 	ldr.w	sl, [sp, #4]
 80050fe:	687c      	ldr	r4, [r7, #4]
 8005100:	1e65      	subs	r5, r4, #1
 8005102:	d40e      	bmi.n	8005122 <__call_exitprocs+0x46>
 8005104:	3401      	adds	r4, #1
 8005106:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800510a:	f04f 0800 	mov.w	r8, #0
 800510e:	b1e6      	cbz	r6, 800514a <__call_exitprocs+0x6e>
 8005110:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005114:	42b3      	cmp	r3, r6
 8005116:	d018      	beq.n	800514a <__call_exitprocs+0x6e>
 8005118:	3d01      	subs	r5, #1
 800511a:	1c6b      	adds	r3, r5, #1
 800511c:	f1a4 0404 	sub.w	r4, r4, #4
 8005120:	d1f5      	bne.n	800510e <__call_exitprocs+0x32>
 8005122:	4b22      	ldr	r3, [pc, #136]	; (80051ac <__call_exitprocs+0xd0>)
 8005124:	b173      	cbz	r3, 8005144 <__call_exitprocs+0x68>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d136      	bne.n	800519a <__call_exitprocs+0xbe>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d034      	beq.n	800519c <__call_exitprocs+0xc0>
 8005132:	4638      	mov	r0, r7
 8005134:	f8ca 3000 	str.w	r3, [sl]
 8005138:	f3af 8000 	nop.w
 800513c:	f8da 7000 	ldr.w	r7, [sl]
 8005140:	2f00      	cmp	r7, #0
 8005142:	d1dc      	bne.n	80050fe <__call_exitprocs+0x22>
 8005144:	b003      	add	sp, #12
 8005146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6822      	ldr	r2, [r4, #0]
 800514e:	3b01      	subs	r3, #1
 8005150:	42ab      	cmp	r3, r5
 8005152:	bf0c      	ite	eq
 8005154:	607d      	streq	r5, [r7, #4]
 8005156:	f8c4 8000 	strne.w	r8, [r4]
 800515a:	2a00      	cmp	r2, #0
 800515c:	d0dc      	beq.n	8005118 <__call_exitprocs+0x3c>
 800515e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005162:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8005166:	2101      	movs	r1, #1
 8005168:	40a9      	lsls	r1, r5
 800516a:	4219      	tst	r1, r3
 800516c:	d108      	bne.n	8005180 <__call_exitprocs+0xa4>
 800516e:	4790      	blx	r2
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	455b      	cmp	r3, fp
 8005174:	d1bd      	bne.n	80050f2 <__call_exitprocs+0x16>
 8005176:	f8da 3000 	ldr.w	r3, [sl]
 800517a:	42bb      	cmp	r3, r7
 800517c:	d0cc      	beq.n	8005118 <__call_exitprocs+0x3c>
 800517e:	e7b8      	b.n	80050f2 <__call_exitprocs+0x16>
 8005180:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005184:	4219      	tst	r1, r3
 8005186:	d104      	bne.n	8005192 <__call_exitprocs+0xb6>
 8005188:	4648      	mov	r0, r9
 800518a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800518e:	4790      	blx	r2
 8005190:	e7ee      	b.n	8005170 <__call_exitprocs+0x94>
 8005192:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005196:	4790      	blx	r2
 8005198:	e7ea      	b.n	8005170 <__call_exitprocs+0x94>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	46ba      	mov	sl, r7
 800519e:	461f      	mov	r7, r3
 80051a0:	2f00      	cmp	r7, #0
 80051a2:	d1ac      	bne.n	80050fe <__call_exitprocs+0x22>
 80051a4:	e7ce      	b.n	8005144 <__call_exitprocs+0x68>
 80051a6:	bf00      	nop
 80051a8:	0800ad5c 	.word	0x0800ad5c
 80051ac:	00000000 	.word	0x00000000

080051b0 <atexit>:
 80051b0:	4601      	mov	r1, r0
 80051b2:	2000      	movs	r0, #0
 80051b4:	4602      	mov	r2, r0
 80051b6:	4603      	mov	r3, r0
 80051b8:	f004 b898 	b.w	80092ec <__register_exitproc>

080051bc <quorem>:
 80051bc:	6902      	ldr	r2, [r0, #16]
 80051be:	690b      	ldr	r3, [r1, #16]
 80051c0:	4293      	cmp	r3, r2
 80051c2:	f300 808f 	bgt.w	80052e4 <quorem+0x128>
 80051c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ca:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80051ce:	f101 0714 	add.w	r7, r1, #20
 80051d2:	f100 0b14 	add.w	fp, r0, #20
 80051d6:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 80051da:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 80051de:	ea4f 0488 	mov.w	r4, r8, lsl #2
 80051e2:	b083      	sub	sp, #12
 80051e4:	3201      	adds	r2, #1
 80051e6:	fbb3 f9f2 	udiv	r9, r3, r2
 80051ea:	eb0b 0304 	add.w	r3, fp, r4
 80051ee:	9400      	str	r4, [sp, #0]
 80051f0:	eb07 0a04 	add.w	sl, r7, r4
 80051f4:	9301      	str	r3, [sp, #4]
 80051f6:	f1b9 0f00 	cmp.w	r9, #0
 80051fa:	d03b      	beq.n	8005274 <quorem+0xb8>
 80051fc:	2600      	movs	r6, #0
 80051fe:	4632      	mov	r2, r6
 8005200:	46bc      	mov	ip, r7
 8005202:	46de      	mov	lr, fp
 8005204:	4634      	mov	r4, r6
 8005206:	f85c 6b04 	ldr.w	r6, [ip], #4
 800520a:	f8de 5000 	ldr.w	r5, [lr]
 800520e:	b2b3      	uxth	r3, r6
 8005210:	0c36      	lsrs	r6, r6, #16
 8005212:	fb03 4409 	mla	r4, r3, r9, r4
 8005216:	fb06 f609 	mul.w	r6, r6, r9
 800521a:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 800521e:	b2a3      	uxth	r3, r4
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	b2b4      	uxth	r4, r6
 8005224:	fa13 f385 	uxtah	r3, r3, r5
 8005228:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 800522c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005230:	b29b      	uxth	r3, r3
 8005232:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005236:	45e2      	cmp	sl, ip
 8005238:	ea4f 4224 	mov.w	r2, r4, asr #16
 800523c:	f84e 3b04 	str.w	r3, [lr], #4
 8005240:	ea4f 4416 	mov.w	r4, r6, lsr #16
 8005244:	d2df      	bcs.n	8005206 <quorem+0x4a>
 8005246:	9b00      	ldr	r3, [sp, #0]
 8005248:	f85b 3003 	ldr.w	r3, [fp, r3]
 800524c:	b993      	cbnz	r3, 8005274 <quorem+0xb8>
 800524e:	9c01      	ldr	r4, [sp, #4]
 8005250:	1f23      	subs	r3, r4, #4
 8005252:	459b      	cmp	fp, r3
 8005254:	d20c      	bcs.n	8005270 <quorem+0xb4>
 8005256:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800525a:	b94b      	cbnz	r3, 8005270 <quorem+0xb4>
 800525c:	f1a4 0308 	sub.w	r3, r4, #8
 8005260:	e002      	b.n	8005268 <quorem+0xac>
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	3b04      	subs	r3, #4
 8005266:	b91a      	cbnz	r2, 8005270 <quorem+0xb4>
 8005268:	459b      	cmp	fp, r3
 800526a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800526e:	d3f8      	bcc.n	8005262 <quorem+0xa6>
 8005270:	f8c0 8010 	str.w	r8, [r0, #16]
 8005274:	4604      	mov	r4, r0
 8005276:	f002 fac9 	bl	800780c <__mcmp>
 800527a:	2800      	cmp	r0, #0
 800527c:	db2e      	blt.n	80052dc <quorem+0x120>
 800527e:	f109 0901 	add.w	r9, r9, #1
 8005282:	465d      	mov	r5, fp
 8005284:	2300      	movs	r3, #0
 8005286:	f857 1b04 	ldr.w	r1, [r7], #4
 800528a:	6828      	ldr	r0, [r5, #0]
 800528c:	b28a      	uxth	r2, r1
 800528e:	1a9a      	subs	r2, r3, r2
 8005290:	0c09      	lsrs	r1, r1, #16
 8005292:	fa12 f280 	uxtah	r2, r2, r0
 8005296:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 800529a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800529e:	b291      	uxth	r1, r2
 80052a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80052a4:	45ba      	cmp	sl, r7
 80052a6:	f845 1b04 	str.w	r1, [r5], #4
 80052aa:	ea4f 4323 	mov.w	r3, r3, asr #16
 80052ae:	d2ea      	bcs.n	8005286 <quorem+0xca>
 80052b0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 80052b4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 80052b8:	b982      	cbnz	r2, 80052dc <quorem+0x120>
 80052ba:	1f1a      	subs	r2, r3, #4
 80052bc:	4593      	cmp	fp, r2
 80052be:	d20b      	bcs.n	80052d8 <quorem+0x11c>
 80052c0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80052c4:	b942      	cbnz	r2, 80052d8 <quorem+0x11c>
 80052c6:	3b08      	subs	r3, #8
 80052c8:	e002      	b.n	80052d0 <quorem+0x114>
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	3b04      	subs	r3, #4
 80052ce:	b91a      	cbnz	r2, 80052d8 <quorem+0x11c>
 80052d0:	459b      	cmp	fp, r3
 80052d2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80052d6:	d3f8      	bcc.n	80052ca <quorem+0x10e>
 80052d8:	f8c4 8010 	str.w	r8, [r4, #16]
 80052dc:	4648      	mov	r0, r9
 80052de:	b003      	add	sp, #12
 80052e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e4:	2000      	movs	r0, #0
 80052e6:	4770      	bx	lr

080052e8 <_dtoa_r>:
 80052e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ec:	b099      	sub	sp, #100	; 0x64
 80052ee:	4604      	mov	r4, r0
 80052f0:	9103      	str	r1, [sp, #12]
 80052f2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80052f4:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80052f6:	9304      	str	r3, [sp, #16]
 80052f8:	4692      	mov	sl, r2
 80052fa:	ed8d 0b00 	vstr	d0, [sp]
 80052fe:	b141      	cbz	r1, 8005312 <_dtoa_r+0x2a>
 8005300:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005302:	604a      	str	r2, [r1, #4]
 8005304:	2301      	movs	r3, #1
 8005306:	4093      	lsls	r3, r2
 8005308:	608b      	str	r3, [r1, #8]
 800530a:	f002 f84f 	bl	80073ac <_Bfree>
 800530e:	2300      	movs	r3, #0
 8005310:	6423      	str	r3, [r4, #64]	; 0x40
 8005312:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005316:	2b00      	cmp	r3, #0
 8005318:	4699      	mov	r9, r3
 800531a:	db36      	blt.n	800538a <_dtoa_r+0xa2>
 800531c:	2300      	movs	r3, #0
 800531e:	602b      	str	r3, [r5, #0]
 8005320:	4ba5      	ldr	r3, [pc, #660]	; (80055b8 <_dtoa_r+0x2d0>)
 8005322:	461a      	mov	r2, r3
 8005324:	ea09 0303 	and.w	r3, r9, r3
 8005328:	4293      	cmp	r3, r2
 800532a:	d017      	beq.n	800535c <_dtoa_r+0x74>
 800532c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005330:	2200      	movs	r2, #0
 8005332:	2300      	movs	r3, #0
 8005334:	4630      	mov	r0, r6
 8005336:	4639      	mov	r1, r7
 8005338:	f004 fe70 	bl	800a01c <__aeabi_dcmpeq>
 800533c:	4680      	mov	r8, r0
 800533e:	2800      	cmp	r0, #0
 8005340:	d02b      	beq.n	800539a <_dtoa_r+0xb2>
 8005342:	9a04      	ldr	r2, [sp, #16]
 8005344:	2301      	movs	r3, #1
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 80cc 	beq.w	80054e8 <_dtoa_r+0x200>
 8005350:	489a      	ldr	r0, [pc, #616]	; (80055bc <_dtoa_r+0x2d4>)
 8005352:	6018      	str	r0, [r3, #0]
 8005354:	3801      	subs	r0, #1
 8005356:	b019      	add	sp, #100	; 0x64
 8005358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535c:	9a04      	ldr	r2, [sp, #16]
 800535e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	9b00      	ldr	r3, [sp, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 80a7 	beq.w	80054ba <_dtoa_r+0x1d2>
 800536c:	4894      	ldr	r0, [pc, #592]	; (80055c0 <_dtoa_r+0x2d8>)
 800536e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f0      	beq.n	8005356 <_dtoa_r+0x6e>
 8005374:	78c3      	ldrb	r3, [r0, #3]
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 80b8 	beq.w	80054ec <_dtoa_r+0x204>
 800537c:	f100 0308 	add.w	r3, r0, #8
 8005380:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	b019      	add	sp, #100	; 0x64
 8005386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800538a:	9a01      	ldr	r2, [sp, #4]
 800538c:	2301      	movs	r3, #1
 800538e:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 8005392:	602b      	str	r3, [r5, #0]
 8005394:	f8cd 9004 	str.w	r9, [sp, #4]
 8005398:	e7c2      	b.n	8005320 <_dtoa_r+0x38>
 800539a:	4620      	mov	r0, r4
 800539c:	ec47 6b10 	vmov	d0, r6, r7
 80053a0:	a917      	add	r1, sp, #92	; 0x5c
 80053a2:	aa16      	add	r2, sp, #88	; 0x58
 80053a4:	f002 fb4a 	bl	8007a3c <__d2b>
 80053a8:	ea5f 5519 	movs.w	r5, r9, lsr #20
 80053ac:	4683      	mov	fp, r0
 80053ae:	f040 808d 	bne.w	80054cc <_dtoa_r+0x1e4>
 80053b2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80053b6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80053b8:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80053bc:	4445      	add	r5, r8
 80053be:	429d      	cmp	r5, r3
 80053c0:	f2c0 829e 	blt.w	8005900 <_dtoa_r+0x618>
 80053c4:	4a7f      	ldr	r2, [pc, #508]	; (80055c4 <_dtoa_r+0x2dc>)
 80053c6:	1b52      	subs	r2, r2, r5
 80053c8:	fa09 f902 	lsl.w	r9, r9, r2
 80053cc:	9a00      	ldr	r2, [sp, #0]
 80053ce:	f205 4312 	addw	r3, r5, #1042	; 0x412
 80053d2:	fa22 f003 	lsr.w	r0, r2, r3
 80053d6:	ea49 0000 	orr.w	r0, r9, r0
 80053da:	f004 fb41 	bl	8009a60 <__aeabi_ui2d>
 80053de:	2301      	movs	r3, #1
 80053e0:	3d01      	subs	r5, #1
 80053e2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80053e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80053e8:	2200      	movs	r2, #0
 80053ea:	4b77      	ldr	r3, [pc, #476]	; (80055c8 <_dtoa_r+0x2e0>)
 80053ec:	f004 f9fa 	bl	80097e4 <__aeabi_dsub>
 80053f0:	a36b      	add	r3, pc, #428	; (adr r3, 80055a0 <_dtoa_r+0x2b8>)
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f004 fba9 	bl	8009b4c <__aeabi_dmul>
 80053fa:	a36b      	add	r3, pc, #428	; (adr r3, 80055a8 <_dtoa_r+0x2c0>)
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f004 f9f2 	bl	80097e8 <__adddf3>
 8005404:	4606      	mov	r6, r0
 8005406:	4628      	mov	r0, r5
 8005408:	460f      	mov	r7, r1
 800540a:	f004 fb39 	bl	8009a80 <__aeabi_i2d>
 800540e:	a368      	add	r3, pc, #416	; (adr r3, 80055b0 <_dtoa_r+0x2c8>)
 8005410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005414:	f004 fb9a 	bl	8009b4c <__aeabi_dmul>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4630      	mov	r0, r6
 800541e:	4639      	mov	r1, r7
 8005420:	f004 f9e2 	bl	80097e8 <__adddf3>
 8005424:	4606      	mov	r6, r0
 8005426:	460f      	mov	r7, r1
 8005428:	f004 fe2a 	bl	800a080 <__aeabi_d2iz>
 800542c:	4639      	mov	r1, r7
 800542e:	9005      	str	r0, [sp, #20]
 8005430:	2200      	movs	r2, #0
 8005432:	4630      	mov	r0, r6
 8005434:	2300      	movs	r3, #0
 8005436:	f004 fdfb 	bl	800a030 <__aeabi_dcmplt>
 800543a:	2800      	cmp	r0, #0
 800543c:	f040 81ab 	bne.w	8005796 <_dtoa_r+0x4ae>
 8005440:	9b05      	ldr	r3, [sp, #20]
 8005442:	2b16      	cmp	r3, #22
 8005444:	f200 81a4 	bhi.w	8005790 <_dtoa_r+0x4a8>
 8005448:	9a05      	ldr	r2, [sp, #20]
 800544a:	4b60      	ldr	r3, [pc, #384]	; (80055cc <_dtoa_r+0x2e4>)
 800544c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005450:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005454:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005458:	f004 fe08 	bl	800a06c <__aeabi_dcmpgt>
 800545c:	2800      	cmp	r0, #0
 800545e:	f000 8255 	beq.w	800590c <_dtoa_r+0x624>
 8005462:	9b05      	ldr	r3, [sp, #20]
 8005464:	3b01      	subs	r3, #1
 8005466:	9305      	str	r3, [sp, #20]
 8005468:	2300      	movs	r3, #0
 800546a:	930d      	str	r3, [sp, #52]	; 0x34
 800546c:	ebc5 0508 	rsb	r5, r5, r8
 8005470:	1e6b      	subs	r3, r5, #1
 8005472:	9306      	str	r3, [sp, #24]
 8005474:	f100 81a6 	bmi.w	80057c4 <_dtoa_r+0x4dc>
 8005478:	2300      	movs	r3, #0
 800547a:	9307      	str	r3, [sp, #28]
 800547c:	9b05      	ldr	r3, [sp, #20]
 800547e:	2b00      	cmp	r3, #0
 8005480:	f2c0 8197 	blt.w	80057b2 <_dtoa_r+0x4ca>
 8005484:	9a06      	ldr	r2, [sp, #24]
 8005486:	930c      	str	r3, [sp, #48]	; 0x30
 8005488:	4611      	mov	r1, r2
 800548a:	4419      	add	r1, r3
 800548c:	2300      	movs	r3, #0
 800548e:	9106      	str	r1, [sp, #24]
 8005490:	930a      	str	r3, [sp, #40]	; 0x28
 8005492:	9b03      	ldr	r3, [sp, #12]
 8005494:	2b09      	cmp	r3, #9
 8005496:	d82b      	bhi.n	80054f0 <_dtoa_r+0x208>
 8005498:	2b05      	cmp	r3, #5
 800549a:	f340 8673 	ble.w	8006184 <_dtoa_r+0xe9c>
 800549e:	3b04      	subs	r3, #4
 80054a0:	9303      	str	r3, [sp, #12]
 80054a2:	2700      	movs	r7, #0
 80054a4:	9b03      	ldr	r3, [sp, #12]
 80054a6:	3b02      	subs	r3, #2
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	f200 8651 	bhi.w	8006150 <_dtoa_r+0xe68>
 80054ae:	e8df f013 	tbh	[pc, r3, lsl #1]
 80054b2:	03d1      	.short	0x03d1
 80054b4:	02b603c4 	.word	0x02b603c4
 80054b8:	0666      	.short	0x0666
 80054ba:	4b41      	ldr	r3, [pc, #260]	; (80055c0 <_dtoa_r+0x2d8>)
 80054bc:	4a44      	ldr	r2, [pc, #272]	; (80055d0 <_dtoa_r+0x2e8>)
 80054be:	f3c9 0013 	ubfx	r0, r9, #0, #20
 80054c2:	2800      	cmp	r0, #0
 80054c4:	bf14      	ite	ne
 80054c6:	4618      	movne	r0, r3
 80054c8:	4610      	moveq	r0, r2
 80054ca:	e750      	b.n	800536e <_dtoa_r+0x86>
 80054cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80054d0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80054d4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80054d8:	4630      	mov	r0, r6
 80054da:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054de:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80054e2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80054e6:	e77f      	b.n	80053e8 <_dtoa_r+0x100>
 80054e8:	483a      	ldr	r0, [pc, #232]	; (80055d4 <_dtoa_r+0x2ec>)
 80054ea:	e734      	b.n	8005356 <_dtoa_r+0x6e>
 80054ec:	1cc3      	adds	r3, r0, #3
 80054ee:	e747      	b.n	8005380 <_dtoa_r+0x98>
 80054f0:	2100      	movs	r1, #0
 80054f2:	6461      	str	r1, [r4, #68]	; 0x44
 80054f4:	4620      	mov	r0, r4
 80054f6:	468a      	mov	sl, r1
 80054f8:	9103      	str	r1, [sp, #12]
 80054fa:	f001 ff31 	bl	8007360 <_Balloc>
 80054fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005502:	9308      	str	r3, [sp, #32]
 8005504:	930e      	str	r3, [sp, #56]	; 0x38
 8005506:	2301      	movs	r3, #1
 8005508:	9009      	str	r0, [sp, #36]	; 0x24
 800550a:	6420      	str	r0, [r4, #64]	; 0x40
 800550c:	930b      	str	r3, [sp, #44]	; 0x2c
 800550e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005510:	2b00      	cmp	r3, #0
 8005512:	f2c0 80d3 	blt.w	80056bc <_dtoa_r+0x3d4>
 8005516:	9a05      	ldr	r2, [sp, #20]
 8005518:	2a0e      	cmp	r2, #14
 800551a:	f300 80cf 	bgt.w	80056bc <_dtoa_r+0x3d4>
 800551e:	4b2b      	ldr	r3, [pc, #172]	; (80055cc <_dtoa_r+0x2e4>)
 8005520:	f1ba 0f00 	cmp.w	sl, #0
 8005524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005528:	e9d3 8900 	ldrd	r8, r9, [r3]
 800552c:	f2c0 8395 	blt.w	8005c5a <_dtoa_r+0x972>
 8005530:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005534:	4642      	mov	r2, r8
 8005536:	464b      	mov	r3, r9
 8005538:	4630      	mov	r0, r6
 800553a:	4639      	mov	r1, r7
 800553c:	f004 fc30 	bl	8009da0 <__aeabi_ddiv>
 8005540:	f004 fd9e 	bl	800a080 <__aeabi_d2iz>
 8005544:	4682      	mov	sl, r0
 8005546:	f004 fa9b 	bl	8009a80 <__aeabi_i2d>
 800554a:	4642      	mov	r2, r8
 800554c:	464b      	mov	r3, r9
 800554e:	f004 fafd 	bl	8009b4c <__aeabi_dmul>
 8005552:	460b      	mov	r3, r1
 8005554:	4602      	mov	r2, r0
 8005556:	4639      	mov	r1, r7
 8005558:	4630      	mov	r0, r6
 800555a:	f004 f943 	bl	80097e4 <__aeabi_dsub>
 800555e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005560:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 8005564:	702b      	strb	r3, [r5, #0]
 8005566:	9b08      	ldr	r3, [sp, #32]
 8005568:	2b01      	cmp	r3, #1
 800556a:	4606      	mov	r6, r0
 800556c:	460f      	mov	r7, r1
 800556e:	f105 0501 	add.w	r5, r5, #1
 8005572:	d063      	beq.n	800563c <_dtoa_r+0x354>
 8005574:	2200      	movs	r2, #0
 8005576:	4b18      	ldr	r3, [pc, #96]	; (80055d8 <_dtoa_r+0x2f0>)
 8005578:	f004 fae8 	bl	8009b4c <__aeabi_dmul>
 800557c:	2200      	movs	r2, #0
 800557e:	2300      	movs	r3, #0
 8005580:	4606      	mov	r6, r0
 8005582:	460f      	mov	r7, r1
 8005584:	f004 fd4a 	bl	800a01c <__aeabi_dcmpeq>
 8005588:	2800      	cmp	r0, #0
 800558a:	f040 8084 	bne.w	8005696 <_dtoa_r+0x3ae>
 800558e:	f8cd b000 	str.w	fp, [sp]
 8005592:	9403      	str	r4, [sp, #12]
 8005594:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8005598:	9c08      	ldr	r4, [sp, #32]
 800559a:	e02a      	b.n	80055f2 <_dtoa_r+0x30a>
 800559c:	f3af 8000 	nop.w
 80055a0:	636f4361 	.word	0x636f4361
 80055a4:	3fd287a7 	.word	0x3fd287a7
 80055a8:	8b60c8b3 	.word	0x8b60c8b3
 80055ac:	3fc68a28 	.word	0x3fc68a28
 80055b0:	509f79fb 	.word	0x509f79fb
 80055b4:	3fd34413 	.word	0x3fd34413
 80055b8:	7ff00000 	.word	0x7ff00000
 80055bc:	0800adb1 	.word	0x0800adb1
 80055c0:	0800add0 	.word	0x0800add0
 80055c4:	fffffc0e 	.word	0xfffffc0e
 80055c8:	3ff80000 	.word	0x3ff80000
 80055cc:	0800ade0 	.word	0x0800ade0
 80055d0:	0800adc4 	.word	0x0800adc4
 80055d4:	0800adb0 	.word	0x0800adb0
 80055d8:	40240000 	.word	0x40240000
 80055dc:	f004 fab6 	bl	8009b4c <__aeabi_dmul>
 80055e0:	2200      	movs	r2, #0
 80055e2:	2300      	movs	r3, #0
 80055e4:	4606      	mov	r6, r0
 80055e6:	460f      	mov	r7, r1
 80055e8:	f004 fd18 	bl	800a01c <__aeabi_dcmpeq>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	f040 83e4 	bne.w	8005dba <_dtoa_r+0xad2>
 80055f2:	4642      	mov	r2, r8
 80055f4:	464b      	mov	r3, r9
 80055f6:	4630      	mov	r0, r6
 80055f8:	4639      	mov	r1, r7
 80055fa:	f004 fbd1 	bl	8009da0 <__aeabi_ddiv>
 80055fe:	f004 fd3f 	bl	800a080 <__aeabi_d2iz>
 8005602:	4682      	mov	sl, r0
 8005604:	f004 fa3c 	bl	8009a80 <__aeabi_i2d>
 8005608:	4642      	mov	r2, r8
 800560a:	464b      	mov	r3, r9
 800560c:	f004 fa9e 	bl	8009b4c <__aeabi_dmul>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4630      	mov	r0, r6
 8005616:	4639      	mov	r1, r7
 8005618:	f004 f8e4 	bl	80097e4 <__aeabi_dsub>
 800561c:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 8005620:	f805 eb01 	strb.w	lr, [r5], #1
 8005624:	ebcb 0e05 	rsb	lr, fp, r5
 8005628:	4574      	cmp	r4, lr
 800562a:	4606      	mov	r6, r0
 800562c:	460f      	mov	r7, r1
 800562e:	f04f 0200 	mov.w	r2, #0
 8005632:	4bb7      	ldr	r3, [pc, #732]	; (8005910 <_dtoa_r+0x628>)
 8005634:	d1d2      	bne.n	80055dc <_dtoa_r+0x2f4>
 8005636:	f8dd b000 	ldr.w	fp, [sp]
 800563a:	9c03      	ldr	r4, [sp, #12]
 800563c:	4632      	mov	r2, r6
 800563e:	463b      	mov	r3, r7
 8005640:	4630      	mov	r0, r6
 8005642:	4639      	mov	r1, r7
 8005644:	f004 f8d0 	bl	80097e8 <__adddf3>
 8005648:	4606      	mov	r6, r0
 800564a:	460f      	mov	r7, r1
 800564c:	4640      	mov	r0, r8
 800564e:	4649      	mov	r1, r9
 8005650:	4632      	mov	r2, r6
 8005652:	463b      	mov	r3, r7
 8005654:	f004 fcec 	bl	800a030 <__aeabi_dcmplt>
 8005658:	b948      	cbnz	r0, 800566e <_dtoa_r+0x386>
 800565a:	4640      	mov	r0, r8
 800565c:	4649      	mov	r1, r9
 800565e:	4632      	mov	r2, r6
 8005660:	463b      	mov	r3, r7
 8005662:	f004 fcdb 	bl	800a01c <__aeabi_dcmpeq>
 8005666:	b1b0      	cbz	r0, 8005696 <_dtoa_r+0x3ae>
 8005668:	f01a 0f01 	tst.w	sl, #1
 800566c:	d013      	beq.n	8005696 <_dtoa_r+0x3ae>
 800566e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8005672:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005674:	1e6b      	subs	r3, r5, #1
 8005676:	e004      	b.n	8005682 <_dtoa_r+0x39a>
 8005678:	428b      	cmp	r3, r1
 800567a:	f000 8448 	beq.w	8005f0e <_dtoa_r+0xc26>
 800567e:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 8005682:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005686:	f103 0501 	add.w	r5, r3, #1
 800568a:	461a      	mov	r2, r3
 800568c:	d0f4      	beq.n	8005678 <_dtoa_r+0x390>
 800568e:	f108 0301 	add.w	r3, r8, #1
 8005692:	b2db      	uxtb	r3, r3
 8005694:	7013      	strb	r3, [r2, #0]
 8005696:	4620      	mov	r0, r4
 8005698:	4659      	mov	r1, fp
 800569a:	f001 fe87 	bl	80073ac <_Bfree>
 800569e:	2200      	movs	r2, #0
 80056a0:	9b05      	ldr	r3, [sp, #20]
 80056a2:	702a      	strb	r2, [r5, #0]
 80056a4:	9a04      	ldr	r2, [sp, #16]
 80056a6:	3301      	adds	r3, #1
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 834b 	beq.w	8005d48 <_dtoa_r+0xa60>
 80056b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056b4:	601d      	str	r5, [r3, #0]
 80056b6:	b019      	add	sp, #100	; 0x64
 80056b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056be:	2a00      	cmp	r2, #0
 80056c0:	f000 8085 	beq.w	80057ce <_dtoa_r+0x4e6>
 80056c4:	9a03      	ldr	r2, [sp, #12]
 80056c6:	2a01      	cmp	r2, #1
 80056c8:	f340 830a 	ble.w	8005ce0 <_dtoa_r+0x9f8>
 80056cc:	9b08      	ldr	r3, [sp, #32]
 80056ce:	1e5f      	subs	r7, r3, #1
 80056d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056d2:	42bb      	cmp	r3, r7
 80056d4:	f2c0 83a6 	blt.w	8005e24 <_dtoa_r+0xb3c>
 80056d8:	1bdf      	subs	r7, r3, r7
 80056da:	9b08      	ldr	r3, [sp, #32]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f2c0 84a4 	blt.w	800602a <_dtoa_r+0xd42>
 80056e2:	9d07      	ldr	r5, [sp, #28]
 80056e4:	9b08      	ldr	r3, [sp, #32]
 80056e6:	9a07      	ldr	r2, [sp, #28]
 80056e8:	441a      	add	r2, r3
 80056ea:	9207      	str	r2, [sp, #28]
 80056ec:	9a06      	ldr	r2, [sp, #24]
 80056ee:	4620      	mov	r0, r4
 80056f0:	441a      	add	r2, r3
 80056f2:	2101      	movs	r1, #1
 80056f4:	9206      	str	r2, [sp, #24]
 80056f6:	f001 ff3f 	bl	8007578 <__i2b>
 80056fa:	4606      	mov	r6, r0
 80056fc:	b165      	cbz	r5, 8005718 <_dtoa_r+0x430>
 80056fe:	9906      	ldr	r1, [sp, #24]
 8005700:	2900      	cmp	r1, #0
 8005702:	460b      	mov	r3, r1
 8005704:	dd08      	ble.n	8005718 <_dtoa_r+0x430>
 8005706:	42a9      	cmp	r1, r5
 8005708:	9a07      	ldr	r2, [sp, #28]
 800570a:	bfa8      	it	ge
 800570c:	462b      	movge	r3, r5
 800570e:	1ad2      	subs	r2, r2, r3
 8005710:	1aed      	subs	r5, r5, r3
 8005712:	1acb      	subs	r3, r1, r3
 8005714:	9207      	str	r2, [sp, #28]
 8005716:	9306      	str	r3, [sp, #24]
 8005718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800571a:	2b00      	cmp	r3, #0
 800571c:	dd1a      	ble.n	8005754 <_dtoa_r+0x46c>
 800571e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 8378 	beq.w	8005e16 <_dtoa_r+0xb2e>
 8005726:	2f00      	cmp	r7, #0
 8005728:	dd10      	ble.n	800574c <_dtoa_r+0x464>
 800572a:	4631      	mov	r1, r6
 800572c:	463a      	mov	r2, r7
 800572e:	4620      	mov	r0, r4
 8005730:	f001 ffc6 	bl	80076c0 <__pow5mult>
 8005734:	4606      	mov	r6, r0
 8005736:	465a      	mov	r2, fp
 8005738:	4631      	mov	r1, r6
 800573a:	4620      	mov	r0, r4
 800573c:	f001 ff26 	bl	800758c <__multiply>
 8005740:	4659      	mov	r1, fp
 8005742:	4680      	mov	r8, r0
 8005744:	4620      	mov	r0, r4
 8005746:	f001 fe31 	bl	80073ac <_Bfree>
 800574a:	46c3      	mov	fp, r8
 800574c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800574e:	1bda      	subs	r2, r3, r7
 8005750:	f040 82a5 	bne.w	8005c9e <_dtoa_r+0x9b6>
 8005754:	4620      	mov	r0, r4
 8005756:	2101      	movs	r1, #1
 8005758:	f001 ff0e 	bl	8007578 <__i2b>
 800575c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800575e:	2b00      	cmp	r3, #0
 8005760:	4680      	mov	r8, r0
 8005762:	dd38      	ble.n	80057d6 <_dtoa_r+0x4ee>
 8005764:	4601      	mov	r1, r0
 8005766:	461a      	mov	r2, r3
 8005768:	4620      	mov	r0, r4
 800576a:	f001 ffa9 	bl	80076c0 <__pow5mult>
 800576e:	9b03      	ldr	r3, [sp, #12]
 8005770:	2b01      	cmp	r3, #1
 8005772:	4680      	mov	r8, r0
 8005774:	f340 8299 	ble.w	8005caa <_dtoa_r+0x9c2>
 8005778:	f04f 0900 	mov.w	r9, #0
 800577c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005780:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8005784:	6918      	ldr	r0, [r3, #16]
 8005786:	f001 fea9 	bl	80074dc <__hi0bits>
 800578a:	f1c0 0020 	rsb	r0, r0, #32
 800578e:	e02c      	b.n	80057ea <_dtoa_r+0x502>
 8005790:	2301      	movs	r3, #1
 8005792:	930d      	str	r3, [sp, #52]	; 0x34
 8005794:	e66a      	b.n	800546c <_dtoa_r+0x184>
 8005796:	9805      	ldr	r0, [sp, #20]
 8005798:	f004 f972 	bl	8009a80 <__aeabi_i2d>
 800579c:	4632      	mov	r2, r6
 800579e:	463b      	mov	r3, r7
 80057a0:	f004 fc3c 	bl	800a01c <__aeabi_dcmpeq>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	f47f ae4b 	bne.w	8005440 <_dtoa_r+0x158>
 80057aa:	9b05      	ldr	r3, [sp, #20]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	9305      	str	r3, [sp, #20]
 80057b0:	e646      	b.n	8005440 <_dtoa_r+0x158>
 80057b2:	9a07      	ldr	r2, [sp, #28]
 80057b4:	9b05      	ldr	r3, [sp, #20]
 80057b6:	1ad2      	subs	r2, r2, r3
 80057b8:	425b      	negs	r3, r3
 80057ba:	930a      	str	r3, [sp, #40]	; 0x28
 80057bc:	2300      	movs	r3, #0
 80057be:	9207      	str	r2, [sp, #28]
 80057c0:	930c      	str	r3, [sp, #48]	; 0x30
 80057c2:	e666      	b.n	8005492 <_dtoa_r+0x1aa>
 80057c4:	425b      	negs	r3, r3
 80057c6:	9307      	str	r3, [sp, #28]
 80057c8:	2300      	movs	r3, #0
 80057ca:	9306      	str	r3, [sp, #24]
 80057cc:	e656      	b.n	800547c <_dtoa_r+0x194>
 80057ce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80057d0:	9d07      	ldr	r5, [sp, #28]
 80057d2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80057d4:	e792      	b.n	80056fc <_dtoa_r+0x414>
 80057d6:	9b03      	ldr	r3, [sp, #12]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	f340 82b8 	ble.w	8005d4e <_dtoa_r+0xa66>
 80057de:	f04f 0900 	mov.w	r9, #0
 80057e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1c9      	bne.n	800577c <_dtoa_r+0x494>
 80057e8:	2001      	movs	r0, #1
 80057ea:	9b06      	ldr	r3, [sp, #24]
 80057ec:	4418      	add	r0, r3
 80057ee:	f010 001f 	ands.w	r0, r0, #31
 80057f2:	f000 8083 	beq.w	80058fc <_dtoa_r+0x614>
 80057f6:	f1c0 0320 	rsb	r3, r0, #32
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	f340 84b9 	ble.w	8006172 <_dtoa_r+0xe8a>
 8005800:	f1c0 001c 	rsb	r0, r0, #28
 8005804:	9b07      	ldr	r3, [sp, #28]
 8005806:	4403      	add	r3, r0
 8005808:	9307      	str	r3, [sp, #28]
 800580a:	9b06      	ldr	r3, [sp, #24]
 800580c:	4403      	add	r3, r0
 800580e:	4405      	add	r5, r0
 8005810:	9306      	str	r3, [sp, #24]
 8005812:	9b07      	ldr	r3, [sp, #28]
 8005814:	2b00      	cmp	r3, #0
 8005816:	dd05      	ble.n	8005824 <_dtoa_r+0x53c>
 8005818:	4659      	mov	r1, fp
 800581a:	461a      	mov	r2, r3
 800581c:	4620      	mov	r0, r4
 800581e:	f001 ff9f 	bl	8007760 <__lshift>
 8005822:	4683      	mov	fp, r0
 8005824:	9b06      	ldr	r3, [sp, #24]
 8005826:	2b00      	cmp	r3, #0
 8005828:	dd05      	ble.n	8005836 <_dtoa_r+0x54e>
 800582a:	4641      	mov	r1, r8
 800582c:	461a      	mov	r2, r3
 800582e:	4620      	mov	r0, r4
 8005830:	f001 ff96 	bl	8007760 <__lshift>
 8005834:	4680      	mov	r8, r0
 8005836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005838:	2b00      	cmp	r3, #0
 800583a:	f040 826a 	bne.w	8005d12 <_dtoa_r+0xa2a>
 800583e:	9b08      	ldr	r3, [sp, #32]
 8005840:	2b00      	cmp	r3, #0
 8005842:	f340 8297 	ble.w	8005d74 <_dtoa_r+0xa8c>
 8005846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005848:	2b00      	cmp	r3, #0
 800584a:	d171      	bne.n	8005930 <_dtoa_r+0x648>
 800584c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005850:	9f08      	ldr	r7, [sp, #32]
 8005852:	464d      	mov	r5, r9
 8005854:	e002      	b.n	800585c <_dtoa_r+0x574>
 8005856:	f001 fdb3 	bl	80073c0 <__multadd>
 800585a:	4683      	mov	fp, r0
 800585c:	4641      	mov	r1, r8
 800585e:	4658      	mov	r0, fp
 8005860:	f7ff fcac 	bl	80051bc <quorem>
 8005864:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8005868:	f805 cb01 	strb.w	ip, [r5], #1
 800586c:	ebc9 0305 	rsb	r3, r9, r5
 8005870:	42bb      	cmp	r3, r7
 8005872:	4620      	mov	r0, r4
 8005874:	4659      	mov	r1, fp
 8005876:	f04f 020a 	mov.w	r2, #10
 800587a:	f04f 0300 	mov.w	r3, #0
 800587e:	dbea      	blt.n	8005856 <_dtoa_r+0x56e>
 8005880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005882:	9a08      	ldr	r2, [sp, #32]
 8005884:	2a01      	cmp	r2, #1
 8005886:	bfac      	ite	ge
 8005888:	189b      	addge	r3, r3, r2
 800588a:	3301      	addlt	r3, #1
 800588c:	461d      	mov	r5, r3
 800588e:	f04f 0a00 	mov.w	sl, #0
 8005892:	4659      	mov	r1, fp
 8005894:	2201      	movs	r2, #1
 8005896:	4620      	mov	r0, r4
 8005898:	f8cd c000 	str.w	ip, [sp]
 800589c:	f001 ff60 	bl	8007760 <__lshift>
 80058a0:	4641      	mov	r1, r8
 80058a2:	4683      	mov	fp, r0
 80058a4:	f001 ffb2 	bl	800780c <__mcmp>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	f8dd c000 	ldr.w	ip, [sp]
 80058ae:	f340 82ef 	ble.w	8005e90 <_dtoa_r+0xba8>
 80058b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80058b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058b8:	1e6b      	subs	r3, r5, #1
 80058ba:	e004      	b.n	80058c6 <_dtoa_r+0x5de>
 80058bc:	428b      	cmp	r3, r1
 80058be:	f000 8275 	beq.w	8005dac <_dtoa_r+0xac4>
 80058c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058c6:	2a39      	cmp	r2, #57	; 0x39
 80058c8:	f103 0501 	add.w	r5, r3, #1
 80058cc:	d0f6      	beq.n	80058bc <_dtoa_r+0x5d4>
 80058ce:	3201      	adds	r2, #1
 80058d0:	701a      	strb	r2, [r3, #0]
 80058d2:	4641      	mov	r1, r8
 80058d4:	4620      	mov	r0, r4
 80058d6:	f001 fd69 	bl	80073ac <_Bfree>
 80058da:	2e00      	cmp	r6, #0
 80058dc:	f43f aedb 	beq.w	8005696 <_dtoa_r+0x3ae>
 80058e0:	f1ba 0f00 	cmp.w	sl, #0
 80058e4:	d005      	beq.n	80058f2 <_dtoa_r+0x60a>
 80058e6:	45b2      	cmp	sl, r6
 80058e8:	d003      	beq.n	80058f2 <_dtoa_r+0x60a>
 80058ea:	4651      	mov	r1, sl
 80058ec:	4620      	mov	r0, r4
 80058ee:	f001 fd5d 	bl	80073ac <_Bfree>
 80058f2:	4631      	mov	r1, r6
 80058f4:	4620      	mov	r0, r4
 80058f6:	f001 fd59 	bl	80073ac <_Bfree>
 80058fa:	e6cc      	b.n	8005696 <_dtoa_r+0x3ae>
 80058fc:	201c      	movs	r0, #28
 80058fe:	e781      	b.n	8005804 <_dtoa_r+0x51c>
 8005900:	4b04      	ldr	r3, [pc, #16]	; (8005914 <_dtoa_r+0x62c>)
 8005902:	9a00      	ldr	r2, [sp, #0]
 8005904:	1b5b      	subs	r3, r3, r5
 8005906:	fa02 f003 	lsl.w	r0, r2, r3
 800590a:	e566      	b.n	80053da <_dtoa_r+0xf2>
 800590c:	900d      	str	r0, [sp, #52]	; 0x34
 800590e:	e5ad      	b.n	800546c <_dtoa_r+0x184>
 8005910:	40240000 	.word	0x40240000
 8005914:	fffffbee 	.word	0xfffffbee
 8005918:	4631      	mov	r1, r6
 800591a:	2300      	movs	r3, #0
 800591c:	4620      	mov	r0, r4
 800591e:	220a      	movs	r2, #10
 8005920:	f001 fd4e 	bl	80073c0 <__multadd>
 8005924:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005926:	2b00      	cmp	r3, #0
 8005928:	4606      	mov	r6, r0
 800592a:	f340 840b 	ble.w	8006144 <_dtoa_r+0xe5c>
 800592e:	9308      	str	r3, [sp, #32]
 8005930:	2d00      	cmp	r5, #0
 8005932:	dd05      	ble.n	8005940 <_dtoa_r+0x658>
 8005934:	4631      	mov	r1, r6
 8005936:	462a      	mov	r2, r5
 8005938:	4620      	mov	r0, r4
 800593a:	f001 ff11 	bl	8007760 <__lshift>
 800593e:	4606      	mov	r6, r0
 8005940:	f1b9 0f00 	cmp.w	r9, #0
 8005944:	f040 82ed 	bne.w	8005f22 <_dtoa_r+0xc3a>
 8005948:	46b1      	mov	r9, r6
 800594a:	9b08      	ldr	r3, [sp, #32]
 800594c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800594e:	3b01      	subs	r3, #1
 8005950:	18d3      	adds	r3, r2, r3
 8005952:	9308      	str	r3, [sp, #32]
 8005954:	9b00      	ldr	r3, [sp, #0]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	930a      	str	r3, [sp, #40]	; 0x28
 800595c:	4617      	mov	r7, r2
 800595e:	4641      	mov	r1, r8
 8005960:	4658      	mov	r0, fp
 8005962:	f7ff fc2b 	bl	80051bc <quorem>
 8005966:	4631      	mov	r1, r6
 8005968:	4605      	mov	r5, r0
 800596a:	4658      	mov	r0, fp
 800596c:	f001 ff4e 	bl	800780c <__mcmp>
 8005970:	464a      	mov	r2, r9
 8005972:	4682      	mov	sl, r0
 8005974:	4641      	mov	r1, r8
 8005976:	4620      	mov	r0, r4
 8005978:	f001 ff6c 	bl	8007854 <__mdiff>
 800597c:	68c2      	ldr	r2, [r0, #12]
 800597e:	4603      	mov	r3, r0
 8005980:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8005984:	2a00      	cmp	r2, #0
 8005986:	f040 81ba 	bne.w	8005cfe <_dtoa_r+0xa16>
 800598a:	4619      	mov	r1, r3
 800598c:	4658      	mov	r0, fp
 800598e:	f8cd c01c 	str.w	ip, [sp, #28]
 8005992:	9306      	str	r3, [sp, #24]
 8005994:	f001 ff3a 	bl	800780c <__mcmp>
 8005998:	9b06      	ldr	r3, [sp, #24]
 800599a:	9000      	str	r0, [sp, #0]
 800599c:	4619      	mov	r1, r3
 800599e:	4620      	mov	r0, r4
 80059a0:	f001 fd04 	bl	80073ac <_Bfree>
 80059a4:	9a00      	ldr	r2, [sp, #0]
 80059a6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80059aa:	b92a      	cbnz	r2, 80059b8 <_dtoa_r+0x6d0>
 80059ac:	9b03      	ldr	r3, [sp, #12]
 80059ae:	b91b      	cbnz	r3, 80059b8 <_dtoa_r+0x6d0>
 80059b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 83aa 	beq.w	800610c <_dtoa_r+0xe24>
 80059b8:	f1ba 0f00 	cmp.w	sl, #0
 80059bc:	f2c0 824a 	blt.w	8005e54 <_dtoa_r+0xb6c>
 80059c0:	d105      	bne.n	80059ce <_dtoa_r+0x6e6>
 80059c2:	9b03      	ldr	r3, [sp, #12]
 80059c4:	b91b      	cbnz	r3, 80059ce <_dtoa_r+0x6e6>
 80059c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 8243 	beq.w	8005e54 <_dtoa_r+0xb6c>
 80059ce:	2a00      	cmp	r2, #0
 80059d0:	f300 82bb 	bgt.w	8005f4a <_dtoa_r+0xc62>
 80059d4:	9b08      	ldr	r3, [sp, #32]
 80059d6:	f887 c000 	strb.w	ip, [r7]
 80059da:	f107 0a01 	add.w	sl, r7, #1
 80059de:	429f      	cmp	r7, r3
 80059e0:	4655      	mov	r5, sl
 80059e2:	f000 82be 	beq.w	8005f62 <_dtoa_r+0xc7a>
 80059e6:	4659      	mov	r1, fp
 80059e8:	220a      	movs	r2, #10
 80059ea:	2300      	movs	r3, #0
 80059ec:	4620      	mov	r0, r4
 80059ee:	f001 fce7 	bl	80073c0 <__multadd>
 80059f2:	454e      	cmp	r6, r9
 80059f4:	4683      	mov	fp, r0
 80059f6:	4631      	mov	r1, r6
 80059f8:	4620      	mov	r0, r4
 80059fa:	f04f 020a 	mov.w	r2, #10
 80059fe:	f04f 0300 	mov.w	r3, #0
 8005a02:	f000 8176 	beq.w	8005cf2 <_dtoa_r+0xa0a>
 8005a06:	f001 fcdb 	bl	80073c0 <__multadd>
 8005a0a:	4649      	mov	r1, r9
 8005a0c:	4606      	mov	r6, r0
 8005a0e:	220a      	movs	r2, #10
 8005a10:	4620      	mov	r0, r4
 8005a12:	2300      	movs	r3, #0
 8005a14:	f001 fcd4 	bl	80073c0 <__multadd>
 8005a18:	4657      	mov	r7, sl
 8005a1a:	4681      	mov	r9, r0
 8005a1c:	e79f      	b.n	800595e <_dtoa_r+0x676>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a22:	f1ba 0f00 	cmp.w	sl, #0
 8005a26:	f340 820c 	ble.w	8005e42 <_dtoa_r+0xb5a>
 8005a2a:	4656      	mov	r6, sl
 8005a2c:	4655      	mov	r5, sl
 8005a2e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005a32:	f8cd a020 	str.w	sl, [sp, #32]
 8005a36:	2100      	movs	r1, #0
 8005a38:	2e17      	cmp	r6, #23
 8005a3a:	6461      	str	r1, [r4, #68]	; 0x44
 8005a3c:	d90a      	bls.n	8005a54 <_dtoa_r+0x76c>
 8005a3e:	2201      	movs	r2, #1
 8005a40:	2304      	movs	r3, #4
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	f103 0014 	add.w	r0, r3, #20
 8005a48:	4286      	cmp	r6, r0
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	f102 0201 	add.w	r2, r2, #1
 8005a50:	d2f7      	bcs.n	8005a42 <_dtoa_r+0x75a>
 8005a52:	6461      	str	r1, [r4, #68]	; 0x44
 8005a54:	4620      	mov	r0, r4
 8005a56:	f001 fc83 	bl	8007360 <_Balloc>
 8005a5a:	2d0e      	cmp	r5, #14
 8005a5c:	9009      	str	r0, [sp, #36]	; 0x24
 8005a5e:	6420      	str	r0, [r4, #64]	; 0x40
 8005a60:	f63f ad55 	bhi.w	800550e <_dtoa_r+0x226>
 8005a64:	2f00      	cmp	r7, #0
 8005a66:	f43f ad52 	beq.w	800550e <_dtoa_r+0x226>
 8005a6a:	ed9d 7b00 	vldr	d7, [sp]
 8005a6e:	9905      	ldr	r1, [sp, #20]
 8005a70:	2900      	cmp	r1, #0
 8005a72:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005a76:	f340 8223 	ble.w	8005ec0 <_dtoa_r+0xbd8>
 8005a7a:	4bb7      	ldr	r3, [pc, #732]	; (8005d58 <_dtoa_r+0xa70>)
 8005a7c:	f001 020f 	and.w	r2, r1, #15
 8005a80:	110d      	asrs	r5, r1, #4
 8005a82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a86:	06e9      	lsls	r1, r5, #27
 8005a88:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005a8c:	f140 81d2 	bpl.w	8005e34 <_dtoa_r+0xb4c>
 8005a90:	4bb2      	ldr	r3, [pc, #712]	; (8005d5c <_dtoa_r+0xa74>)
 8005a92:	ec51 0b17 	vmov	r0, r1, d7
 8005a96:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a9a:	f004 f981 	bl	8009da0 <__aeabi_ddiv>
 8005a9e:	e9cd 0100 	strd	r0, r1, [sp]
 8005aa2:	f005 050f 	and.w	r5, r5, #15
 8005aa6:	f04f 0803 	mov.w	r8, #3
 8005aaa:	b18d      	cbz	r5, 8005ad0 <_dtoa_r+0x7e8>
 8005aac:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8005d5c <_dtoa_r+0xa74>
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	4639      	mov	r1, r7
 8005ab4:	07ea      	lsls	r2, r5, #31
 8005ab6:	d505      	bpl.n	8005ac4 <_dtoa_r+0x7dc>
 8005ab8:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005abc:	f004 f846 	bl	8009b4c <__aeabi_dmul>
 8005ac0:	f108 0801 	add.w	r8, r8, #1
 8005ac4:	106d      	asrs	r5, r5, #1
 8005ac6:	f109 0908 	add.w	r9, r9, #8
 8005aca:	d1f3      	bne.n	8005ab4 <_dtoa_r+0x7cc>
 8005acc:	4606      	mov	r6, r0
 8005ace:	460f      	mov	r7, r1
 8005ad0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ad4:	4632      	mov	r2, r6
 8005ad6:	463b      	mov	r3, r7
 8005ad8:	f004 f962 	bl	8009da0 <__aeabi_ddiv>
 8005adc:	e9cd 0100 	strd	r0, r1, [sp]
 8005ae0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ae2:	b143      	cbz	r3, 8005af6 <_dtoa_r+0x80e>
 8005ae4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	4b9d      	ldr	r3, [pc, #628]	; (8005d60 <_dtoa_r+0xa78>)
 8005aec:	f004 faa0 	bl	800a030 <__aeabi_dcmplt>
 8005af0:	2800      	cmp	r0, #0
 8005af2:	f040 82ae 	bne.w	8006052 <_dtoa_r+0xd6a>
 8005af6:	4640      	mov	r0, r8
 8005af8:	f003 ffc2 	bl	8009a80 <__aeabi_i2d>
 8005afc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b00:	f004 f824 	bl	8009b4c <__aeabi_dmul>
 8005b04:	4b97      	ldr	r3, [pc, #604]	; (8005d64 <_dtoa_r+0xa7c>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	f003 fe6e 	bl	80097e8 <__adddf3>
 8005b0c:	9b08      	ldr	r3, [sp, #32]
 8005b0e:	4606      	mov	r6, r0
 8005b10:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 8162 	beq.w	8005dde <_dtoa_r+0xaf6>
 8005b1a:	9b05      	ldr	r3, [sp, #20]
 8005b1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b20:	9314      	str	r3, [sp, #80]	; 0x50
 8005b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 8223 	beq.w	8005f70 <_dtoa_r+0xc88>
 8005b2a:	4b8b      	ldr	r3, [pc, #556]	; (8005d58 <_dtoa_r+0xa70>)
 8005b2c:	498e      	ldr	r1, [pc, #568]	; (8005d68 <_dtoa_r+0xa80>)
 8005b2e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005b32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b36:	2000      	movs	r0, #0
 8005b38:	f004 f932 	bl	8009da0 <__aeabi_ddiv>
 8005b3c:	4632      	mov	r2, r6
 8005b3e:	463b      	mov	r3, r7
 8005b40:	f003 fe50 	bl	80097e4 <__aeabi_dsub>
 8005b44:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005b48:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8005b4c:	4639      	mov	r1, r7
 8005b4e:	4630      	mov	r0, r6
 8005b50:	f004 fa96 	bl	800a080 <__aeabi_d2iz>
 8005b54:	4605      	mov	r5, r0
 8005b56:	f003 ff93 	bl	8009a80 <__aeabi_i2d>
 8005b5a:	3530      	adds	r5, #48	; 0x30
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4630      	mov	r0, r6
 8005b62:	4639      	mov	r1, r7
 8005b64:	f003 fe3e 	bl	80097e4 <__aeabi_dsub>
 8005b68:	fa5f f885 	uxtb.w	r8, r5
 8005b6c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005b6e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005b72:	f885 8000 	strb.w	r8, [r5]
 8005b76:	4606      	mov	r6, r0
 8005b78:	460f      	mov	r7, r1
 8005b7a:	3501      	adds	r5, #1
 8005b7c:	f004 fa58 	bl	800a030 <__aeabi_dcmplt>
 8005b80:	2800      	cmp	r0, #0
 8005b82:	f040 82a7 	bne.w	80060d4 <_dtoa_r+0xdec>
 8005b86:	4632      	mov	r2, r6
 8005b88:	463b      	mov	r3, r7
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	4974      	ldr	r1, [pc, #464]	; (8005d60 <_dtoa_r+0xa78>)
 8005b8e:	f003 fe29 	bl	80097e4 <__aeabi_dsub>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005b9a:	f004 fa67 	bl	800a06c <__aeabi_dcmpgt>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	f040 82ad 	bne.w	80060fe <_dtoa_r+0xe16>
 8005ba4:	f1b9 0f01 	cmp.w	r9, #1
 8005ba8:	f340 8184 	ble.w	8005eb4 <_dtoa_r+0xbcc>
 8005bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bae:	f8cd b000 	str.w	fp, [sp]
 8005bb2:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 8005bb6:	4499      	add	r9, r3
 8005bb8:	46a0      	mov	r8, r4
 8005bba:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8005bbe:	e00d      	b.n	8005bdc <_dtoa_r+0x8f4>
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	4967      	ldr	r1, [pc, #412]	; (8005d60 <_dtoa_r+0xa78>)
 8005bc4:	f003 fe0e 	bl	80097e4 <__aeabi_dsub>
 8005bc8:	4652      	mov	r2, sl
 8005bca:	465b      	mov	r3, fp
 8005bcc:	f004 fa30 	bl	800a030 <__aeabi_dcmplt>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	f040 828f 	bne.w	80060f4 <_dtoa_r+0xe0c>
 8005bd6:	454d      	cmp	r5, r9
 8005bd8:	f000 8167 	beq.w	8005eaa <_dtoa_r+0xbc2>
 8005bdc:	4650      	mov	r0, sl
 8005bde:	4659      	mov	r1, fp
 8005be0:	2200      	movs	r2, #0
 8005be2:	4b62      	ldr	r3, [pc, #392]	; (8005d6c <_dtoa_r+0xa84>)
 8005be4:	f003 ffb2 	bl	8009b4c <__aeabi_dmul>
 8005be8:	2200      	movs	r2, #0
 8005bea:	4b60      	ldr	r3, [pc, #384]	; (8005d6c <_dtoa_r+0xa84>)
 8005bec:	4682      	mov	sl, r0
 8005bee:	468b      	mov	fp, r1
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	4639      	mov	r1, r7
 8005bf4:	f003 ffaa 	bl	8009b4c <__aeabi_dmul>
 8005bf8:	460f      	mov	r7, r1
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	f004 fa40 	bl	800a080 <__aeabi_d2iz>
 8005c00:	4604      	mov	r4, r0
 8005c02:	f003 ff3d 	bl	8009a80 <__aeabi_i2d>
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	4639      	mov	r1, r7
 8005c0e:	f003 fde9 	bl	80097e4 <__aeabi_dsub>
 8005c12:	3430      	adds	r4, #48	; 0x30
 8005c14:	b2e4      	uxtb	r4, r4
 8005c16:	4652      	mov	r2, sl
 8005c18:	465b      	mov	r3, fp
 8005c1a:	f805 4b01 	strb.w	r4, [r5], #1
 8005c1e:	4606      	mov	r6, r0
 8005c20:	460f      	mov	r7, r1
 8005c22:	f004 fa05 	bl	800a030 <__aeabi_dcmplt>
 8005c26:	4632      	mov	r2, r6
 8005c28:	463b      	mov	r3, r7
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	d0c8      	beq.n	8005bc0 <_dtoa_r+0x8d8>
 8005c2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c30:	f8dd b000 	ldr.w	fp, [sp]
 8005c34:	9305      	str	r3, [sp, #20]
 8005c36:	4644      	mov	r4, r8
 8005c38:	e52d      	b.n	8005696 <_dtoa_r+0x3ae>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c3e:	9b05      	ldr	r3, [sp, #20]
 8005c40:	4453      	add	r3, sl
 8005c42:	930e      	str	r3, [sp, #56]	; 0x38
 8005c44:	3301      	adds	r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	9308      	str	r3, [sp, #32]
 8005c4a:	f340 8101 	ble.w	8005e50 <_dtoa_r+0xb68>
 8005c4e:	9d08      	ldr	r5, [sp, #32]
 8005c50:	462e      	mov	r6, r5
 8005c52:	e6f0      	b.n	8005a36 <_dtoa_r+0x74e>
 8005c54:	2300      	movs	r3, #0
 8005c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c58:	e6e3      	b.n	8005a22 <_dtoa_r+0x73a>
 8005c5a:	9b08      	ldr	r3, [sp, #32]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f73f ac67 	bgt.w	8005530 <_dtoa_r+0x248>
 8005c62:	f040 80d4 	bne.w	8005e0e <_dtoa_r+0xb26>
 8005c66:	4640      	mov	r0, r8
 8005c68:	2200      	movs	r2, #0
 8005c6a:	4b41      	ldr	r3, [pc, #260]	; (8005d70 <_dtoa_r+0xa88>)
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	f003 ff6d 	bl	8009b4c <__aeabi_dmul>
 8005c72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c76:	f004 f9ef 	bl	800a058 <__aeabi_dcmpge>
 8005c7a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c7e:	4646      	mov	r6, r8
 8005c80:	2800      	cmp	r0, #0
 8005c82:	f000 808b 	beq.w	8005d9c <_dtoa_r+0xab4>
 8005c86:	ea6f 030a 	mvn.w	r3, sl
 8005c8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005c8c:	9305      	str	r3, [sp, #20]
 8005c8e:	4641      	mov	r1, r8
 8005c90:	4620      	mov	r0, r4
 8005c92:	f001 fb8b 	bl	80073ac <_Bfree>
 8005c96:	2e00      	cmp	r6, #0
 8005c98:	f47f ae2b 	bne.w	80058f2 <_dtoa_r+0x60a>
 8005c9c:	e4fb      	b.n	8005696 <_dtoa_r+0x3ae>
 8005c9e:	4659      	mov	r1, fp
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f001 fd0d 	bl	80076c0 <__pow5mult>
 8005ca6:	4683      	mov	fp, r0
 8005ca8:	e554      	b.n	8005754 <_dtoa_r+0x46c>
 8005caa:	9b00      	ldr	r3, [sp, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f47f ad63 	bne.w	8005778 <_dtoa_r+0x490>
 8005cb2:	9b01      	ldr	r3, [sp, #4]
 8005cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f47f ad90 	bne.w	80057de <_dtoa_r+0x4f6>
 8005cbe:	9b01      	ldr	r3, [sp, #4]
 8005cc0:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8005cc4:	0d3f      	lsrs	r7, r7, #20
 8005cc6:	053f      	lsls	r7, r7, #20
 8005cc8:	2f00      	cmp	r7, #0
 8005cca:	f000 821c 	beq.w	8006106 <_dtoa_r+0xe1e>
 8005cce:	9b07      	ldr	r3, [sp, #28]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	9307      	str	r3, [sp, #28]
 8005cd4:	9b06      	ldr	r3, [sp, #24]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	9306      	str	r3, [sp, #24]
 8005cda:	f04f 0901 	mov.w	r9, #1
 8005cde:	e580      	b.n	80057e2 <_dtoa_r+0x4fa>
 8005ce0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ce2:	2a00      	cmp	r2, #0
 8005ce4:	f000 81a7 	beq.w	8006036 <_dtoa_r+0xd4e>
 8005ce8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005cec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005cee:	9d07      	ldr	r5, [sp, #28]
 8005cf0:	e4f9      	b.n	80056e6 <_dtoa_r+0x3fe>
 8005cf2:	f001 fb65 	bl	80073c0 <__multadd>
 8005cf6:	4657      	mov	r7, sl
 8005cf8:	4606      	mov	r6, r0
 8005cfa:	4681      	mov	r9, r0
 8005cfc:	e62f      	b.n	800595e <_dtoa_r+0x676>
 8005cfe:	4601      	mov	r1, r0
 8005d00:	4620      	mov	r0, r4
 8005d02:	f8cd c000 	str.w	ip, [sp]
 8005d06:	f001 fb51 	bl	80073ac <_Bfree>
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f8dd c000 	ldr.w	ip, [sp]
 8005d10:	e652      	b.n	80059b8 <_dtoa_r+0x6d0>
 8005d12:	4658      	mov	r0, fp
 8005d14:	4641      	mov	r1, r8
 8005d16:	f001 fd79 	bl	800780c <__mcmp>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	f6bf ad8f 	bge.w	800583e <_dtoa_r+0x556>
 8005d20:	9f05      	ldr	r7, [sp, #20]
 8005d22:	4659      	mov	r1, fp
 8005d24:	2300      	movs	r3, #0
 8005d26:	4620      	mov	r0, r4
 8005d28:	220a      	movs	r2, #10
 8005d2a:	3f01      	subs	r7, #1
 8005d2c:	9705      	str	r7, [sp, #20]
 8005d2e:	f001 fb47 	bl	80073c0 <__multadd>
 8005d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d34:	4683      	mov	fp, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f47f adee 	bne.w	8005918 <_dtoa_r+0x630>
 8005d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f340 81f5 	ble.w	800612e <_dtoa_r+0xe46>
 8005d44:	9308      	str	r3, [sp, #32]
 8005d46:	e581      	b.n	800584c <_dtoa_r+0x564>
 8005d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d4a:	f7ff bb04 	b.w	8005356 <_dtoa_r+0x6e>
 8005d4e:	9b00      	ldr	r3, [sp, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f47f ad44 	bne.w	80057de <_dtoa_r+0x4f6>
 8005d56:	e7ac      	b.n	8005cb2 <_dtoa_r+0x9ca>
 8005d58:	0800ade0 	.word	0x0800ade0
 8005d5c:	0800aeb8 	.word	0x0800aeb8
 8005d60:	3ff00000 	.word	0x3ff00000
 8005d64:	401c0000 	.word	0x401c0000
 8005d68:	3fe00000 	.word	0x3fe00000
 8005d6c:	40240000 	.word	0x40240000
 8005d70:	40140000 	.word	0x40140000
 8005d74:	9b03      	ldr	r3, [sp, #12]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	f77f ad65 	ble.w	8005846 <_dtoa_r+0x55e>
 8005d7c:	9b08      	ldr	r3, [sp, #32]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d181      	bne.n	8005c86 <_dtoa_r+0x99e>
 8005d82:	4641      	mov	r1, r8
 8005d84:	2205      	movs	r2, #5
 8005d86:	4620      	mov	r0, r4
 8005d88:	f001 fb1a 	bl	80073c0 <__multadd>
 8005d8c:	4680      	mov	r8, r0
 8005d8e:	4641      	mov	r1, r8
 8005d90:	4658      	mov	r0, fp
 8005d92:	f001 fd3b 	bl	800780c <__mcmp>
 8005d96:	2800      	cmp	r0, #0
 8005d98:	f77f af75 	ble.w	8005c86 <_dtoa_r+0x99e>
 8005d9c:	9a05      	ldr	r2, [sp, #20]
 8005d9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005da0:	2331      	movs	r3, #49	; 0x31
 8005da2:	3201      	adds	r2, #1
 8005da4:	9205      	str	r2, [sp, #20]
 8005da6:	700b      	strb	r3, [r1, #0]
 8005da8:	1c4d      	adds	r5, r1, #1
 8005daa:	e770      	b.n	8005c8e <_dtoa_r+0x9a6>
 8005dac:	9a05      	ldr	r2, [sp, #20]
 8005dae:	3201      	adds	r2, #1
 8005db0:	9205      	str	r2, [sp, #20]
 8005db2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005db4:	2331      	movs	r3, #49	; 0x31
 8005db6:	7013      	strb	r3, [r2, #0]
 8005db8:	e58b      	b.n	80058d2 <_dtoa_r+0x5ea>
 8005dba:	f8dd b000 	ldr.w	fp, [sp]
 8005dbe:	9c03      	ldr	r4, [sp, #12]
 8005dc0:	e469      	b.n	8005696 <_dtoa_r+0x3ae>
 8005dc2:	4640      	mov	r0, r8
 8005dc4:	f003 fe5c 	bl	8009a80 <__aeabi_i2d>
 8005dc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dcc:	f003 febe 	bl	8009b4c <__aeabi_dmul>
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	4bc2      	ldr	r3, [pc, #776]	; (80060dc <_dtoa_r+0xdf4>)
 8005dd4:	f003 fd08 	bl	80097e8 <__adddf3>
 8005dd8:	4606      	mov	r6, r0
 8005dda:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8005dde:	2200      	movs	r2, #0
 8005de0:	4bbf      	ldr	r3, [pc, #764]	; (80060e0 <_dtoa_r+0xdf8>)
 8005de2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005de6:	f003 fcfd 	bl	80097e4 <__aeabi_dsub>
 8005dea:	4632      	mov	r2, r6
 8005dec:	463b      	mov	r3, r7
 8005dee:	4680      	mov	r8, r0
 8005df0:	4689      	mov	r9, r1
 8005df2:	f004 f93b 	bl	800a06c <__aeabi_dcmpgt>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	f040 80b6 	bne.w	8005f68 <_dtoa_r+0xc80>
 8005dfc:	4632      	mov	r2, r6
 8005dfe:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005e02:	4640      	mov	r0, r8
 8005e04:	4649      	mov	r1, r9
 8005e06:	f004 f913 	bl	800a030 <__aeabi_dcmplt>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d052      	beq.n	8005eb4 <_dtoa_r+0xbcc>
 8005e0e:	f04f 0800 	mov.w	r8, #0
 8005e12:	4646      	mov	r6, r8
 8005e14:	e737      	b.n	8005c86 <_dtoa_r+0x99e>
 8005e16:	4659      	mov	r1, fp
 8005e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f001 fc50 	bl	80076c0 <__pow5mult>
 8005e20:	4683      	mov	fp, r0
 8005e22:	e497      	b.n	8005754 <_dtoa_r+0x46c>
 8005e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e28:	970a      	str	r7, [sp, #40]	; 0x28
 8005e2a:	1afb      	subs	r3, r7, r3
 8005e2c:	441a      	add	r2, r3
 8005e2e:	920c      	str	r2, [sp, #48]	; 0x30
 8005e30:	2700      	movs	r7, #0
 8005e32:	e452      	b.n	80056da <_dtoa_r+0x3f2>
 8005e34:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8005e38:	f04f 0802 	mov.w	r8, #2
 8005e3c:	ed8d 7b00 	vstr	d7, [sp]
 8005e40:	e633      	b.n	8005aaa <_dtoa_r+0x7c2>
 8005e42:	2501      	movs	r5, #1
 8005e44:	950e      	str	r5, [sp, #56]	; 0x38
 8005e46:	9508      	str	r5, [sp, #32]
 8005e48:	46aa      	mov	sl, r5
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	6461      	str	r1, [r4, #68]	; 0x44
 8005e4e:	e601      	b.n	8005a54 <_dtoa_r+0x76c>
 8005e50:	461d      	mov	r5, r3
 8005e52:	e7fa      	b.n	8005e4a <_dtoa_r+0xb62>
 8005e54:	2a00      	cmp	r2, #0
 8005e56:	dd15      	ble.n	8005e84 <_dtoa_r+0xb9c>
 8005e58:	4659      	mov	r1, fp
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f8cd c000 	str.w	ip, [sp]
 8005e62:	f001 fc7d 	bl	8007760 <__lshift>
 8005e66:	4641      	mov	r1, r8
 8005e68:	4683      	mov	fp, r0
 8005e6a:	f001 fccf 	bl	800780c <__mcmp>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	f8dd c000 	ldr.w	ip, [sp]
 8005e74:	f340 8154 	ble.w	8006120 <_dtoa_r+0xe38>
 8005e78:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8005e7c:	f000 8111 	beq.w	80060a2 <_dtoa_r+0xdba>
 8005e80:	f10c 0c01 	add.w	ip, ip, #1
 8005e84:	46b2      	mov	sl, r6
 8005e86:	f887 c000 	strb.w	ip, [r7]
 8005e8a:	1c7d      	adds	r5, r7, #1
 8005e8c:	464e      	mov	r6, r9
 8005e8e:	e520      	b.n	80058d2 <_dtoa_r+0x5ea>
 8005e90:	d104      	bne.n	8005e9c <_dtoa_r+0xbb4>
 8005e92:	f01c 0f01 	tst.w	ip, #1
 8005e96:	d001      	beq.n	8005e9c <_dtoa_r+0xbb4>
 8005e98:	e50b      	b.n	80058b2 <_dtoa_r+0x5ca>
 8005e9a:	4615      	mov	r5, r2
 8005e9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ea0:	2b30      	cmp	r3, #48	; 0x30
 8005ea2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005ea6:	d0f8      	beq.n	8005e9a <_dtoa_r+0xbb2>
 8005ea8:	e513      	b.n	80058d2 <_dtoa_r+0x5ea>
 8005eaa:	f8dd b000 	ldr.w	fp, [sp]
 8005eae:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8005eb2:	4644      	mov	r4, r8
 8005eb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005eb8:	e9cd 2300 	strd	r2, r3, [sp]
 8005ebc:	f7ff bb27 	b.w	800550e <_dtoa_r+0x226>
 8005ec0:	9b05      	ldr	r3, [sp, #20]
 8005ec2:	425d      	negs	r5, r3
 8005ec4:	2d00      	cmp	r5, #0
 8005ec6:	f000 80bd 	beq.w	8006044 <_dtoa_r+0xd5c>
 8005eca:	4b86      	ldr	r3, [pc, #536]	; (80060e4 <_dtoa_r+0xdfc>)
 8005ecc:	f005 020f 	and.w	r2, r5, #15
 8005ed0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005edc:	f003 fe36 	bl	8009b4c <__aeabi_dmul>
 8005ee0:	112d      	asrs	r5, r5, #4
 8005ee2:	e9cd 0100 	strd	r0, r1, [sp]
 8005ee6:	f000 8127 	beq.w	8006138 <_dtoa_r+0xe50>
 8005eea:	4e7f      	ldr	r6, [pc, #508]	; (80060e8 <_dtoa_r+0xe00>)
 8005eec:	f04f 0802 	mov.w	r8, #2
 8005ef0:	07eb      	lsls	r3, r5, #31
 8005ef2:	d505      	bpl.n	8005f00 <_dtoa_r+0xc18>
 8005ef4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ef8:	f003 fe28 	bl	8009b4c <__aeabi_dmul>
 8005efc:	f108 0801 	add.w	r8, r8, #1
 8005f00:	106d      	asrs	r5, r5, #1
 8005f02:	f106 0608 	add.w	r6, r6, #8
 8005f06:	d1f3      	bne.n	8005ef0 <_dtoa_r+0xc08>
 8005f08:	e9cd 0100 	strd	r0, r1, [sp]
 8005f0c:	e5e8      	b.n	8005ae0 <_dtoa_r+0x7f8>
 8005f0e:	9a05      	ldr	r2, [sp, #20]
 8005f10:	3201      	adds	r2, #1
 8005f12:	9205      	str	r2, [sp, #20]
 8005f14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f16:	2330      	movs	r3, #48	; 0x30
 8005f18:	7013      	strb	r3, [r2, #0]
 8005f1a:	2331      	movs	r3, #49	; 0x31
 8005f1c:	7013      	strb	r3, [r2, #0]
 8005f1e:	f7ff bbba 	b.w	8005696 <_dtoa_r+0x3ae>
 8005f22:	6871      	ldr	r1, [r6, #4]
 8005f24:	4620      	mov	r0, r4
 8005f26:	f001 fa1b 	bl	8007360 <_Balloc>
 8005f2a:	6933      	ldr	r3, [r6, #16]
 8005f2c:	1c9a      	adds	r2, r3, #2
 8005f2e:	4605      	mov	r5, r0
 8005f30:	0092      	lsls	r2, r2, #2
 8005f32:	f106 010c 	add.w	r1, r6, #12
 8005f36:	300c      	adds	r0, #12
 8005f38:	f7fd fc88 	bl	800384c <memcpy>
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	4629      	mov	r1, r5
 8005f40:	2201      	movs	r2, #1
 8005f42:	f001 fc0d 	bl	8007760 <__lshift>
 8005f46:	4681      	mov	r9, r0
 8005f48:	e4ff      	b.n	800594a <_dtoa_r+0x662>
 8005f4a:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8005f4e:	f000 80a8 	beq.w	80060a2 <_dtoa_r+0xdba>
 8005f52:	f10c 0c01 	add.w	ip, ip, #1
 8005f56:	46b2      	mov	sl, r6
 8005f58:	f887 c000 	strb.w	ip, [r7]
 8005f5c:	1c7d      	adds	r5, r7, #1
 8005f5e:	464e      	mov	r6, r9
 8005f60:	e4b7      	b.n	80058d2 <_dtoa_r+0x5ea>
 8005f62:	46b2      	mov	sl, r6
 8005f64:	464e      	mov	r6, r9
 8005f66:	e494      	b.n	8005892 <_dtoa_r+0x5aa>
 8005f68:	f04f 0800 	mov.w	r8, #0
 8005f6c:	4646      	mov	r6, r8
 8005f6e:	e715      	b.n	8005d9c <_dtoa_r+0xab4>
 8005f70:	495c      	ldr	r1, [pc, #368]	; (80060e4 <_dtoa_r+0xdfc>)
 8005f72:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8005f76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005f7a:	4632      	mov	r2, r6
 8005f7c:	9315      	str	r3, [sp, #84]	; 0x54
 8005f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f82:	463b      	mov	r3, r7
 8005f84:	f003 fde2 	bl	8009b4c <__aeabi_dmul>
 8005f88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005f8c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8005f90:	4639      	mov	r1, r7
 8005f92:	4630      	mov	r0, r6
 8005f94:	f004 f874 	bl	800a080 <__aeabi_d2iz>
 8005f98:	4605      	mov	r5, r0
 8005f9a:	f003 fd71 	bl	8009a80 <__aeabi_i2d>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	4639      	mov	r1, r7
 8005fa6:	f003 fc1d 	bl	80097e4 <__aeabi_dsub>
 8005faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fac:	3530      	adds	r5, #48	; 0x30
 8005fae:	f1b9 0f01 	cmp.w	r9, #1
 8005fb2:	7015      	strb	r5, [r2, #0]
 8005fb4:	4606      	mov	r6, r0
 8005fb6:	460f      	mov	r7, r1
 8005fb8:	f102 0501 	add.w	r5, r2, #1
 8005fbc:	d023      	beq.n	8006006 <_dtoa_r+0xd1e>
 8005fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fc0:	f8cd b000 	str.w	fp, [sp]
 8005fc4:	444b      	add	r3, r9
 8005fc6:	4698      	mov	r8, r3
 8005fc8:	46a9      	mov	r9, r5
 8005fca:	46ab      	mov	fp, r5
 8005fcc:	2200      	movs	r2, #0
 8005fce:	4b47      	ldr	r3, [pc, #284]	; (80060ec <_dtoa_r+0xe04>)
 8005fd0:	f003 fdbc 	bl	8009b4c <__aeabi_dmul>
 8005fd4:	460f      	mov	r7, r1
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	f004 f852 	bl	800a080 <__aeabi_d2iz>
 8005fdc:	4605      	mov	r5, r0
 8005fde:	f003 fd4f 	bl	8009a80 <__aeabi_i2d>
 8005fe2:	3530      	adds	r5, #48	; 0x30
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4630      	mov	r0, r6
 8005fea:	4639      	mov	r1, r7
 8005fec:	f003 fbfa 	bl	80097e4 <__aeabi_dsub>
 8005ff0:	f809 5b01 	strb.w	r5, [r9], #1
 8005ff4:	45c1      	cmp	r9, r8
 8005ff6:	d1e9      	bne.n	8005fcc <_dtoa_r+0xce4>
 8005ff8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ffa:	465d      	mov	r5, fp
 8005ffc:	f8dd b000 	ldr.w	fp, [sp]
 8006000:	4606      	mov	r6, r0
 8006002:	460f      	mov	r7, r1
 8006004:	441d      	add	r5, r3
 8006006:	2200      	movs	r2, #0
 8006008:	4b39      	ldr	r3, [pc, #228]	; (80060f0 <_dtoa_r+0xe08>)
 800600a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800600e:	f003 fbeb 	bl	80097e8 <__adddf3>
 8006012:	4632      	mov	r2, r6
 8006014:	463b      	mov	r3, r7
 8006016:	f004 f80b 	bl	800a030 <__aeabi_dcmplt>
 800601a:	2800      	cmp	r0, #0
 800601c:	d047      	beq.n	80060ae <_dtoa_r+0xdc6>
 800601e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006020:	9305      	str	r3, [sp, #20]
 8006022:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8006026:	f7ff bb24 	b.w	8005672 <_dtoa_r+0x38a>
 800602a:	9b07      	ldr	r3, [sp, #28]
 800602c:	9a08      	ldr	r2, [sp, #32]
 800602e:	1a9d      	subs	r5, r3, r2
 8006030:	2300      	movs	r3, #0
 8006032:	f7ff bb58 	b.w	80056e6 <_dtoa_r+0x3fe>
 8006036:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006038:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800603a:	9d07      	ldr	r5, [sp, #28]
 800603c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006040:	f7ff bb51 	b.w	80056e6 <_dtoa_r+0x3fe>
 8006044:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8006048:	f04f 0802 	mov.w	r8, #2
 800604c:	ed8d 7b00 	vstr	d7, [sp]
 8006050:	e546      	b.n	8005ae0 <_dtoa_r+0x7f8>
 8006052:	9b08      	ldr	r3, [sp, #32]
 8006054:	2b00      	cmp	r3, #0
 8006056:	f43f aeb4 	beq.w	8005dc2 <_dtoa_r+0xada>
 800605a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800605c:	2d00      	cmp	r5, #0
 800605e:	f77f af29 	ble.w	8005eb4 <_dtoa_r+0xbcc>
 8006062:	2200      	movs	r2, #0
 8006064:	4b21      	ldr	r3, [pc, #132]	; (80060ec <_dtoa_r+0xe04>)
 8006066:	e9dd 0100 	ldrd	r0, r1, [sp]
 800606a:	f003 fd6f 	bl	8009b4c <__aeabi_dmul>
 800606e:	4606      	mov	r6, r0
 8006070:	460f      	mov	r7, r1
 8006072:	f108 0001 	add.w	r0, r8, #1
 8006076:	e9cd 6700 	strd	r6, r7, [sp]
 800607a:	f003 fd01 	bl	8009a80 <__aeabi_i2d>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4630      	mov	r0, r6
 8006084:	4639      	mov	r1, r7
 8006086:	f003 fd61 	bl	8009b4c <__aeabi_dmul>
 800608a:	4b14      	ldr	r3, [pc, #80]	; (80060dc <_dtoa_r+0xdf4>)
 800608c:	2200      	movs	r2, #0
 800608e:	f003 fbab 	bl	80097e8 <__adddf3>
 8006092:	9b05      	ldr	r3, [sp, #20]
 8006094:	3b01      	subs	r3, #1
 8006096:	4606      	mov	r6, r0
 8006098:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800609c:	9314      	str	r3, [sp, #80]	; 0x50
 800609e:	46a9      	mov	r9, r5
 80060a0:	e53f      	b.n	8005b22 <_dtoa_r+0x83a>
 80060a2:	2239      	movs	r2, #57	; 0x39
 80060a4:	46b2      	mov	sl, r6
 80060a6:	703a      	strb	r2, [r7, #0]
 80060a8:	464e      	mov	r6, r9
 80060aa:	1c7d      	adds	r5, r7, #1
 80060ac:	e403      	b.n	80058b6 <_dtoa_r+0x5ce>
 80060ae:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80060b2:	2000      	movs	r0, #0
 80060b4:	490e      	ldr	r1, [pc, #56]	; (80060f0 <_dtoa_r+0xe08>)
 80060b6:	f003 fb95 	bl	80097e4 <__aeabi_dsub>
 80060ba:	4632      	mov	r2, r6
 80060bc:	463b      	mov	r3, r7
 80060be:	f003 ffd5 	bl	800a06c <__aeabi_dcmpgt>
 80060c2:	b908      	cbnz	r0, 80060c8 <_dtoa_r+0xde0>
 80060c4:	e6f6      	b.n	8005eb4 <_dtoa_r+0xbcc>
 80060c6:	4615      	mov	r5, r2
 80060c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060cc:	2b30      	cmp	r3, #48	; 0x30
 80060ce:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80060d2:	d0f8      	beq.n	80060c6 <_dtoa_r+0xdde>
 80060d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060d6:	9305      	str	r3, [sp, #20]
 80060d8:	f7ff badd 	b.w	8005696 <_dtoa_r+0x3ae>
 80060dc:	401c0000 	.word	0x401c0000
 80060e0:	40140000 	.word	0x40140000
 80060e4:	0800ade0 	.word	0x0800ade0
 80060e8:	0800aeb8 	.word	0x0800aeb8
 80060ec:	40240000 	.word	0x40240000
 80060f0:	3fe00000 	.word	0x3fe00000
 80060f4:	4643      	mov	r3, r8
 80060f6:	f8dd b000 	ldr.w	fp, [sp]
 80060fa:	46a0      	mov	r8, r4
 80060fc:	461c      	mov	r4, r3
 80060fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006100:	9305      	str	r3, [sp, #20]
 8006102:	f7ff bab6 	b.w	8005672 <_dtoa_r+0x38a>
 8006106:	46b9      	mov	r9, r7
 8006108:	f7ff bb6b 	b.w	80057e2 <_dtoa_r+0x4fa>
 800610c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8006110:	d0c7      	beq.n	80060a2 <_dtoa_r+0xdba>
 8006112:	f1ba 0f00 	cmp.w	sl, #0
 8006116:	f77f aeb5 	ble.w	8005e84 <_dtoa_r+0xb9c>
 800611a:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 800611e:	e6b1      	b.n	8005e84 <_dtoa_r+0xb9c>
 8006120:	f47f aeb0 	bne.w	8005e84 <_dtoa_r+0xb9c>
 8006124:	f01c 0f01 	tst.w	ip, #1
 8006128:	f43f aeac 	beq.w	8005e84 <_dtoa_r+0xb9c>
 800612c:	e6a4      	b.n	8005e78 <_dtoa_r+0xb90>
 800612e:	9b03      	ldr	r3, [sp, #12]
 8006130:	2b02      	cmp	r3, #2
 8006132:	dc04      	bgt.n	800613e <_dtoa_r+0xe56>
 8006134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006136:	e605      	b.n	8005d44 <_dtoa_r+0xa5c>
 8006138:	f04f 0802 	mov.w	r8, #2
 800613c:	e4d0      	b.n	8005ae0 <_dtoa_r+0x7f8>
 800613e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006140:	9308      	str	r3, [sp, #32]
 8006142:	e61b      	b.n	8005d7c <_dtoa_r+0xa94>
 8006144:	9b03      	ldr	r3, [sp, #12]
 8006146:	2b02      	cmp	r3, #2
 8006148:	dcf9      	bgt.n	800613e <_dtoa_r+0xe56>
 800614a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800614c:	f7ff bbef 	b.w	800592e <_dtoa_r+0x646>
 8006150:	2500      	movs	r5, #0
 8006152:	6465      	str	r5, [r4, #68]	; 0x44
 8006154:	4629      	mov	r1, r5
 8006156:	4620      	mov	r0, r4
 8006158:	f001 f902 	bl	8007360 <_Balloc>
 800615c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006160:	9308      	str	r3, [sp, #32]
 8006162:	930e      	str	r3, [sp, #56]	; 0x38
 8006164:	2301      	movs	r3, #1
 8006166:	9009      	str	r0, [sp, #36]	; 0x24
 8006168:	46aa      	mov	sl, r5
 800616a:	6420      	str	r0, [r4, #64]	; 0x40
 800616c:	930b      	str	r3, [sp, #44]	; 0x2c
 800616e:	f7ff b9ce 	b.w	800550e <_dtoa_r+0x226>
 8006172:	f43f ab4e 	beq.w	8005812 <_dtoa_r+0x52a>
 8006176:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800617a:	f7ff bb43 	b.w	8005804 <_dtoa_r+0x51c>
 800617e:	2301      	movs	r3, #1
 8006180:	930b      	str	r3, [sp, #44]	; 0x2c
 8006182:	e55c      	b.n	8005c3e <_dtoa_r+0x956>
 8006184:	2701      	movs	r7, #1
 8006186:	f7ff b98d 	b.w	80054a4 <_dtoa_r+0x1bc>
 800618a:	bf00      	nop

0800618c <__sflush_r>:
 800618c:	898b      	ldrh	r3, [r1, #12]
 800618e:	b29a      	uxth	r2, r3
 8006190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006194:	460d      	mov	r5, r1
 8006196:	0711      	lsls	r1, r2, #28
 8006198:	4680      	mov	r8, r0
 800619a:	d43c      	bmi.n	8006216 <__sflush_r+0x8a>
 800619c:	686a      	ldr	r2, [r5, #4]
 800619e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80061a2:	2a00      	cmp	r2, #0
 80061a4:	81ab      	strh	r3, [r5, #12]
 80061a6:	dd65      	ble.n	8006274 <__sflush_r+0xe8>
 80061a8:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80061aa:	2e00      	cmp	r6, #0
 80061ac:	d04b      	beq.n	8006246 <__sflush_r+0xba>
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80061b4:	2100      	movs	r1, #0
 80061b6:	b292      	uxth	r2, r2
 80061b8:	f8d8 4000 	ldr.w	r4, [r8]
 80061bc:	f8c8 1000 	str.w	r1, [r8]
 80061c0:	2a00      	cmp	r2, #0
 80061c2:	d05b      	beq.n	800627c <__sflush_r+0xf0>
 80061c4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80061c6:	075f      	lsls	r7, r3, #29
 80061c8:	d505      	bpl.n	80061d6 <__sflush_r+0x4a>
 80061ca:	6869      	ldr	r1, [r5, #4]
 80061cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80061ce:	1a52      	subs	r2, r2, r1
 80061d0:	b10b      	cbz	r3, 80061d6 <__sflush_r+0x4a>
 80061d2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80061d4:	1ad2      	subs	r2, r2, r3
 80061d6:	4640      	mov	r0, r8
 80061d8:	69e9      	ldr	r1, [r5, #28]
 80061da:	2300      	movs	r3, #0
 80061dc:	47b0      	blx	r6
 80061de:	1c46      	adds	r6, r0, #1
 80061e0:	d056      	beq.n	8006290 <__sflush_r+0x104>
 80061e2:	89ab      	ldrh	r3, [r5, #12]
 80061e4:	692a      	ldr	r2, [r5, #16]
 80061e6:	602a      	str	r2, [r5, #0]
 80061e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	2200      	movs	r2, #0
 80061f0:	606a      	str	r2, [r5, #4]
 80061f2:	04da      	lsls	r2, r3, #19
 80061f4:	81ab      	strh	r3, [r5, #12]
 80061f6:	d43b      	bmi.n	8006270 <__sflush_r+0xe4>
 80061f8:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80061fa:	f8c8 4000 	str.w	r4, [r8]
 80061fe:	b311      	cbz	r1, 8006246 <__sflush_r+0xba>
 8006200:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8006204:	4299      	cmp	r1, r3
 8006206:	d002      	beq.n	800620e <__sflush_r+0x82>
 8006208:	4640      	mov	r0, r8
 800620a:	f000 f9ff 	bl	800660c <_free_r>
 800620e:	2000      	movs	r0, #0
 8006210:	6328      	str	r0, [r5, #48]	; 0x30
 8006212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006216:	692e      	ldr	r6, [r5, #16]
 8006218:	b1ae      	cbz	r6, 8006246 <__sflush_r+0xba>
 800621a:	682c      	ldr	r4, [r5, #0]
 800621c:	602e      	str	r6, [r5, #0]
 800621e:	0791      	lsls	r1, r2, #30
 8006220:	bf0c      	ite	eq
 8006222:	696b      	ldreq	r3, [r5, #20]
 8006224:	2300      	movne	r3, #0
 8006226:	1ba4      	subs	r4, r4, r6
 8006228:	60ab      	str	r3, [r5, #8]
 800622a:	e00a      	b.n	8006242 <__sflush_r+0xb6>
 800622c:	4632      	mov	r2, r6
 800622e:	4623      	mov	r3, r4
 8006230:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8006232:	69e9      	ldr	r1, [r5, #28]
 8006234:	4640      	mov	r0, r8
 8006236:	47b8      	blx	r7
 8006238:	2800      	cmp	r0, #0
 800623a:	eba4 0400 	sub.w	r4, r4, r0
 800623e:	4406      	add	r6, r0
 8006240:	dd04      	ble.n	800624c <__sflush_r+0xc0>
 8006242:	2c00      	cmp	r4, #0
 8006244:	dcf2      	bgt.n	800622c <__sflush_r+0xa0>
 8006246:	2000      	movs	r0, #0
 8006248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800624c:	89ab      	ldrh	r3, [r5, #12]
 800624e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006252:	81ab      	strh	r3, [r5, #12]
 8006254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800625c:	89ab      	ldrh	r3, [r5, #12]
 800625e:	692a      	ldr	r2, [r5, #16]
 8006260:	6069      	str	r1, [r5, #4]
 8006262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006266:	b29b      	uxth	r3, r3
 8006268:	81ab      	strh	r3, [r5, #12]
 800626a:	04db      	lsls	r3, r3, #19
 800626c:	602a      	str	r2, [r5, #0]
 800626e:	d5c3      	bpl.n	80061f8 <__sflush_r+0x6c>
 8006270:	6528      	str	r0, [r5, #80]	; 0x50
 8006272:	e7c1      	b.n	80061f8 <__sflush_r+0x6c>
 8006274:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8006276:	2a00      	cmp	r2, #0
 8006278:	dc96      	bgt.n	80061a8 <__sflush_r+0x1c>
 800627a:	e7e4      	b.n	8006246 <__sflush_r+0xba>
 800627c:	2301      	movs	r3, #1
 800627e:	4640      	mov	r0, r8
 8006280:	69e9      	ldr	r1, [r5, #28]
 8006282:	47b0      	blx	r6
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	4602      	mov	r2, r0
 8006288:	d019      	beq.n	80062be <__sflush_r+0x132>
 800628a:	89ab      	ldrh	r3, [r5, #12]
 800628c:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800628e:	e79a      	b.n	80061c6 <__sflush_r+0x3a>
 8006290:	f8d8 1000 	ldr.w	r1, [r8]
 8006294:	2900      	cmp	r1, #0
 8006296:	d0e1      	beq.n	800625c <__sflush_r+0xd0>
 8006298:	291d      	cmp	r1, #29
 800629a:	d007      	beq.n	80062ac <__sflush_r+0x120>
 800629c:	2916      	cmp	r1, #22
 800629e:	d005      	beq.n	80062ac <__sflush_r+0x120>
 80062a0:	89ab      	ldrh	r3, [r5, #12]
 80062a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062a6:	81ab      	strh	r3, [r5, #12]
 80062a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062ac:	89ab      	ldrh	r3, [r5, #12]
 80062ae:	692a      	ldr	r2, [r5, #16]
 80062b0:	602a      	str	r2, [r5, #0]
 80062b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062b6:	2200      	movs	r2, #0
 80062b8:	81ab      	strh	r3, [r5, #12]
 80062ba:	606a      	str	r2, [r5, #4]
 80062bc:	e79c      	b.n	80061f8 <__sflush_r+0x6c>
 80062be:	f8d8 3000 	ldr.w	r3, [r8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0e1      	beq.n	800628a <__sflush_r+0xfe>
 80062c6:	2b1d      	cmp	r3, #29
 80062c8:	d007      	beq.n	80062da <__sflush_r+0x14e>
 80062ca:	2b16      	cmp	r3, #22
 80062cc:	d005      	beq.n	80062da <__sflush_r+0x14e>
 80062ce:	89ab      	ldrh	r3, [r5, #12]
 80062d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062d4:	81ab      	strh	r3, [r5, #12]
 80062d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062da:	f8c8 4000 	str.w	r4, [r8]
 80062de:	e7b2      	b.n	8006246 <__sflush_r+0xba>

080062e0 <_fflush_r>:
 80062e0:	b510      	push	{r4, lr}
 80062e2:	4604      	mov	r4, r0
 80062e4:	b082      	sub	sp, #8
 80062e6:	b108      	cbz	r0, 80062ec <_fflush_r+0xc>
 80062e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80062ea:	b153      	cbz	r3, 8006302 <_fflush_r+0x22>
 80062ec:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80062f0:	b908      	cbnz	r0, 80062f6 <_fflush_r+0x16>
 80062f2:	b002      	add	sp, #8
 80062f4:	bd10      	pop	{r4, pc}
 80062f6:	4620      	mov	r0, r4
 80062f8:	b002      	add	sp, #8
 80062fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062fe:	f7ff bf45 	b.w	800618c <__sflush_r>
 8006302:	9101      	str	r1, [sp, #4]
 8006304:	f000 f8fc 	bl	8006500 <__sinit>
 8006308:	9901      	ldr	r1, [sp, #4]
 800630a:	e7ef      	b.n	80062ec <_fflush_r+0xc>

0800630c <fflush>:
 800630c:	b120      	cbz	r0, 8006318 <fflush+0xc>
 800630e:	4b05      	ldr	r3, [pc, #20]	; (8006324 <fflush+0x18>)
 8006310:	4601      	mov	r1, r0
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	f7ff bfe4 	b.w	80062e0 <_fflush_r>
 8006318:	4b03      	ldr	r3, [pc, #12]	; (8006328 <fflush+0x1c>)
 800631a:	4904      	ldr	r1, [pc, #16]	; (800632c <fflush+0x20>)
 800631c:	6818      	ldr	r0, [r3, #0]
 800631e:	f000 bbff 	b.w	8006b20 <_fwalk_reent>
 8006322:	bf00      	nop
 8006324:	200004d0 	.word	0x200004d0
 8006328:	0800ad5c 	.word	0x0800ad5c
 800632c:	080062e1 	.word	0x080062e1

08006330 <__fp_lock>:
 8006330:	2000      	movs	r0, #0
 8006332:	4770      	bx	lr

08006334 <__fp_unlock>:
 8006334:	2000      	movs	r0, #0
 8006336:	4770      	bx	lr

08006338 <_cleanup_r>:
 8006338:	4901      	ldr	r1, [pc, #4]	; (8006340 <_cleanup_r+0x8>)
 800633a:	f000 bbf1 	b.w	8006b20 <_fwalk_reent>
 800633e:	bf00      	nop
 8006340:	08009415 	.word	0x08009415

08006344 <__sinit.part.1>:
 8006344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006348:	4b35      	ldr	r3, [pc, #212]	; (8006420 <__sinit.part.1+0xdc>)
 800634a:	6845      	ldr	r5, [r0, #4]
 800634c:	63c3      	str	r3, [r0, #60]	; 0x3c
 800634e:	2400      	movs	r4, #0
 8006350:	4607      	mov	r7, r0
 8006352:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8006356:	2304      	movs	r3, #4
 8006358:	2103      	movs	r1, #3
 800635a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 800635e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8006362:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8006366:	b083      	sub	sp, #12
 8006368:	602c      	str	r4, [r5, #0]
 800636a:	606c      	str	r4, [r5, #4]
 800636c:	60ac      	str	r4, [r5, #8]
 800636e:	666c      	str	r4, [r5, #100]	; 0x64
 8006370:	81ec      	strh	r4, [r5, #14]
 8006372:	612c      	str	r4, [r5, #16]
 8006374:	616c      	str	r4, [r5, #20]
 8006376:	61ac      	str	r4, [r5, #24]
 8006378:	81ab      	strh	r3, [r5, #12]
 800637a:	4621      	mov	r1, r4
 800637c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8006380:	2208      	movs	r2, #8
 8006382:	f7fd fafd 	bl	8003980 <memset>
 8006386:	68be      	ldr	r6, [r7, #8]
 8006388:	f8df b098 	ldr.w	fp, [pc, #152]	; 8006424 <__sinit.part.1+0xe0>
 800638c:	f8df a098 	ldr.w	sl, [pc, #152]	; 8006428 <__sinit.part.1+0xe4>
 8006390:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800642c <__sinit.part.1+0xe8>
 8006394:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8006430 <__sinit.part.1+0xec>
 8006398:	f8c5 b020 	str.w	fp, [r5, #32]
 800639c:	2301      	movs	r3, #1
 800639e:	2209      	movs	r2, #9
 80063a0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80063a4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80063a8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80063ac:	61ed      	str	r5, [r5, #28]
 80063ae:	4621      	mov	r1, r4
 80063b0:	81f3      	strh	r3, [r6, #14]
 80063b2:	81b2      	strh	r2, [r6, #12]
 80063b4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80063b8:	6034      	str	r4, [r6, #0]
 80063ba:	6074      	str	r4, [r6, #4]
 80063bc:	60b4      	str	r4, [r6, #8]
 80063be:	6674      	str	r4, [r6, #100]	; 0x64
 80063c0:	6134      	str	r4, [r6, #16]
 80063c2:	6174      	str	r4, [r6, #20]
 80063c4:	61b4      	str	r4, [r6, #24]
 80063c6:	2208      	movs	r2, #8
 80063c8:	9301      	str	r3, [sp, #4]
 80063ca:	f7fd fad9 	bl	8003980 <memset>
 80063ce:	68fd      	ldr	r5, [r7, #12]
 80063d0:	61f6      	str	r6, [r6, #28]
 80063d2:	2012      	movs	r0, #18
 80063d4:	2202      	movs	r2, #2
 80063d6:	f8c6 b020 	str.w	fp, [r6, #32]
 80063da:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 80063de:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 80063e2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 80063e6:	4621      	mov	r1, r4
 80063e8:	81a8      	strh	r0, [r5, #12]
 80063ea:	81ea      	strh	r2, [r5, #14]
 80063ec:	602c      	str	r4, [r5, #0]
 80063ee:	606c      	str	r4, [r5, #4]
 80063f0:	60ac      	str	r4, [r5, #8]
 80063f2:	666c      	str	r4, [r5, #100]	; 0x64
 80063f4:	612c      	str	r4, [r5, #16]
 80063f6:	616c      	str	r4, [r5, #20]
 80063f8:	61ac      	str	r4, [r5, #24]
 80063fa:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80063fe:	2208      	movs	r2, #8
 8006400:	f7fd fabe 	bl	8003980 <memset>
 8006404:	9b01      	ldr	r3, [sp, #4]
 8006406:	61ed      	str	r5, [r5, #28]
 8006408:	f8c5 b020 	str.w	fp, [r5, #32]
 800640c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8006410:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8006414:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8006418:	63bb      	str	r3, [r7, #56]	; 0x38
 800641a:	b003      	add	sp, #12
 800641c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006420:	08006339 	.word	0x08006339
 8006424:	0800815d 	.word	0x0800815d
 8006428:	08008185 	.word	0x08008185
 800642c:	080081bd 	.word	0x080081bd
 8006430:	080081dd 	.word	0x080081dd

08006434 <__sfmoreglue>:
 8006434:	b570      	push	{r4, r5, r6, lr}
 8006436:	2368      	movs	r3, #104	; 0x68
 8006438:	1e4d      	subs	r5, r1, #1
 800643a:	fb03 f505 	mul.w	r5, r3, r5
 800643e:	460e      	mov	r6, r1
 8006440:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006444:	f000 fc48 	bl	8006cd8 <_malloc_r>
 8006448:	4604      	mov	r4, r0
 800644a:	b140      	cbz	r0, 800645e <__sfmoreglue+0x2a>
 800644c:	2100      	movs	r1, #0
 800644e:	300c      	adds	r0, #12
 8006450:	6066      	str	r6, [r4, #4]
 8006452:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006456:	6021      	str	r1, [r4, #0]
 8006458:	60a0      	str	r0, [r4, #8]
 800645a:	f7fd fa91 	bl	8003980 <memset>
 800645e:	4620      	mov	r0, r4
 8006460:	bd70      	pop	{r4, r5, r6, pc}
 8006462:	bf00      	nop

08006464 <__sfp>:
 8006464:	4b20      	ldr	r3, [pc, #128]	; (80064e8 <__sfp+0x84>)
 8006466:	b570      	push	{r4, r5, r6, lr}
 8006468:	681d      	ldr	r5, [r3, #0]
 800646a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800646c:	4606      	mov	r6, r0
 800646e:	b913      	cbnz	r3, 8006476 <__sfp+0x12>
 8006470:	4628      	mov	r0, r5
 8006472:	f7ff ff67 	bl	8006344 <__sinit.part.1>
 8006476:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 800647a:	686b      	ldr	r3, [r5, #4]
 800647c:	68ac      	ldr	r4, [r5, #8]
 800647e:	3b01      	subs	r3, #1
 8006480:	d505      	bpl.n	800648e <__sfp+0x2a>
 8006482:	e021      	b.n	80064c8 <__sfp+0x64>
 8006484:	3b01      	subs	r3, #1
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800648c:	d01c      	beq.n	80064c8 <__sfp+0x64>
 800648e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006492:	2a00      	cmp	r2, #0
 8006494:	d1f6      	bne.n	8006484 <__sfp+0x20>
 8006496:	2500      	movs	r5, #0
 8006498:	2301      	movs	r3, #1
 800649a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800649e:	81e2      	strh	r2, [r4, #14]
 80064a0:	81a3      	strh	r3, [r4, #12]
 80064a2:	6665      	str	r5, [r4, #100]	; 0x64
 80064a4:	6025      	str	r5, [r4, #0]
 80064a6:	60a5      	str	r5, [r4, #8]
 80064a8:	6065      	str	r5, [r4, #4]
 80064aa:	6125      	str	r5, [r4, #16]
 80064ac:	6165      	str	r5, [r4, #20]
 80064ae:	61a5      	str	r5, [r4, #24]
 80064b0:	4629      	mov	r1, r5
 80064b2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80064b6:	2208      	movs	r2, #8
 80064b8:	f7fd fa62 	bl	8003980 <memset>
 80064bc:	6325      	str	r5, [r4, #48]	; 0x30
 80064be:	6365      	str	r5, [r4, #52]	; 0x34
 80064c0:	6465      	str	r5, [r4, #68]	; 0x44
 80064c2:	64a5      	str	r5, [r4, #72]	; 0x48
 80064c4:	4620      	mov	r0, r4
 80064c6:	bd70      	pop	{r4, r5, r6, pc}
 80064c8:	682b      	ldr	r3, [r5, #0]
 80064ca:	b10b      	cbz	r3, 80064d0 <__sfp+0x6c>
 80064cc:	461d      	mov	r5, r3
 80064ce:	e7d4      	b.n	800647a <__sfp+0x16>
 80064d0:	4630      	mov	r0, r6
 80064d2:	2104      	movs	r1, #4
 80064d4:	f7ff ffae 	bl	8006434 <__sfmoreglue>
 80064d8:	6028      	str	r0, [r5, #0]
 80064da:	b108      	cbz	r0, 80064e0 <__sfp+0x7c>
 80064dc:	4605      	mov	r5, r0
 80064de:	e7cc      	b.n	800647a <__sfp+0x16>
 80064e0:	230c      	movs	r3, #12
 80064e2:	6033      	str	r3, [r6, #0]
 80064e4:	bd70      	pop	{r4, r5, r6, pc}
 80064e6:	bf00      	nop
 80064e8:	0800ad5c 	.word	0x0800ad5c

080064ec <_cleanup>:
 80064ec:	4b02      	ldr	r3, [pc, #8]	; (80064f8 <_cleanup+0xc>)
 80064ee:	4903      	ldr	r1, [pc, #12]	; (80064fc <_cleanup+0x10>)
 80064f0:	6818      	ldr	r0, [r3, #0]
 80064f2:	f000 bb15 	b.w	8006b20 <_fwalk_reent>
 80064f6:	bf00      	nop
 80064f8:	0800ad5c 	.word	0x0800ad5c
 80064fc:	08009415 	.word	0x08009415

08006500 <__sinit>:
 8006500:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006502:	b103      	cbz	r3, 8006506 <__sinit+0x6>
 8006504:	4770      	bx	lr
 8006506:	f7ff bf1d 	b.w	8006344 <__sinit.part.1>
 800650a:	bf00      	nop

0800650c <__sfp_lock_acquire>:
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop

08006510 <__sfp_lock_release>:
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop

08006514 <__sinit_lock_acquire>:
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop

08006518 <__sinit_lock_release>:
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop

0800651c <__fp_lock_all>:
 800651c:	4b02      	ldr	r3, [pc, #8]	; (8006528 <__fp_lock_all+0xc>)
 800651e:	4903      	ldr	r1, [pc, #12]	; (800652c <__fp_lock_all+0x10>)
 8006520:	6818      	ldr	r0, [r3, #0]
 8006522:	f000 bad7 	b.w	8006ad4 <_fwalk>
 8006526:	bf00      	nop
 8006528:	200004d0 	.word	0x200004d0
 800652c:	08006331 	.word	0x08006331

08006530 <__fp_unlock_all>:
 8006530:	4b02      	ldr	r3, [pc, #8]	; (800653c <__fp_unlock_all+0xc>)
 8006532:	4903      	ldr	r1, [pc, #12]	; (8006540 <__fp_unlock_all+0x10>)
 8006534:	6818      	ldr	r0, [r3, #0]
 8006536:	f000 bacd 	b.w	8006ad4 <_fwalk>
 800653a:	bf00      	nop
 800653c:	200004d0 	.word	0x200004d0
 8006540:	08006335 	.word	0x08006335

08006544 <__libc_fini_array>:
 8006544:	b538      	push	{r3, r4, r5, lr}
 8006546:	4b08      	ldr	r3, [pc, #32]	; (8006568 <__libc_fini_array+0x24>)
 8006548:	4d08      	ldr	r5, [pc, #32]	; (800656c <__libc_fini_array+0x28>)
 800654a:	1aed      	subs	r5, r5, r3
 800654c:	10ac      	asrs	r4, r5, #2
 800654e:	bf18      	it	ne
 8006550:	18ed      	addne	r5, r5, r3
 8006552:	d005      	beq.n	8006560 <__libc_fini_array+0x1c>
 8006554:	3c01      	subs	r4, #1
 8006556:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800655a:	4798      	blx	r3
 800655c:	2c00      	cmp	r4, #0
 800655e:	d1f9      	bne.n	8006554 <__libc_fini_array+0x10>
 8006560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006564:	f004 bcea 	b.w	800af3c <_fini>
 8006568:	0800af48 	.word	0x0800af48
 800656c:	0800af4c 	.word	0x0800af4c

08006570 <_malloc_trim_r>:
 8006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006572:	4f23      	ldr	r7, [pc, #140]	; (8006600 <_malloc_trim_r+0x90>)
 8006574:	460c      	mov	r4, r1
 8006576:	4606      	mov	r6, r0
 8006578:	f000 feee 	bl	8007358 <__malloc_lock>
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	685d      	ldr	r5, [r3, #4]
 8006580:	f025 0503 	bic.w	r5, r5, #3
 8006584:	1b29      	subs	r1, r5, r4
 8006586:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 800658a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800658e:	f021 010f 	bic.w	r1, r1, #15
 8006592:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8006596:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800659a:	db07      	blt.n	80065ac <_malloc_trim_r+0x3c>
 800659c:	4630      	mov	r0, r6
 800659e:	2100      	movs	r1, #0
 80065a0:	f001 fdca 	bl	8008138 <_sbrk_r>
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	442b      	add	r3, r5
 80065a8:	4298      	cmp	r0, r3
 80065aa:	d004      	beq.n	80065b6 <_malloc_trim_r+0x46>
 80065ac:	4630      	mov	r0, r6
 80065ae:	f000 fed5 	bl	800735c <__malloc_unlock>
 80065b2:	2000      	movs	r0, #0
 80065b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065b6:	4630      	mov	r0, r6
 80065b8:	4261      	negs	r1, r4
 80065ba:	f001 fdbd 	bl	8008138 <_sbrk_r>
 80065be:	3001      	adds	r0, #1
 80065c0:	d00d      	beq.n	80065de <_malloc_trim_r+0x6e>
 80065c2:	4b10      	ldr	r3, [pc, #64]	; (8006604 <_malloc_trim_r+0x94>)
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	6819      	ldr	r1, [r3, #0]
 80065c8:	1b2d      	subs	r5, r5, r4
 80065ca:	f045 0501 	orr.w	r5, r5, #1
 80065ce:	4630      	mov	r0, r6
 80065d0:	1b09      	subs	r1, r1, r4
 80065d2:	6055      	str	r5, [r2, #4]
 80065d4:	6019      	str	r1, [r3, #0]
 80065d6:	f000 fec1 	bl	800735c <__malloc_unlock>
 80065da:	2001      	movs	r0, #1
 80065dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065de:	4630      	mov	r0, r6
 80065e0:	2100      	movs	r1, #0
 80065e2:	f001 fda9 	bl	8008138 <_sbrk_r>
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	1a83      	subs	r3, r0, r2
 80065ea:	2b0f      	cmp	r3, #15
 80065ec:	ddde      	ble.n	80065ac <_malloc_trim_r+0x3c>
 80065ee:	4c06      	ldr	r4, [pc, #24]	; (8006608 <_malloc_trim_r+0x98>)
 80065f0:	4904      	ldr	r1, [pc, #16]	; (8006604 <_malloc_trim_r+0x94>)
 80065f2:	6824      	ldr	r4, [r4, #0]
 80065f4:	f043 0301 	orr.w	r3, r3, #1
 80065f8:	1b00      	subs	r0, r0, r4
 80065fa:	6053      	str	r3, [r2, #4]
 80065fc:	6008      	str	r0, [r1, #0]
 80065fe:	e7d5      	b.n	80065ac <_malloc_trim_r+0x3c>
 8006600:	20000550 	.word	0x20000550
 8006604:	2001004c 	.word	0x2001004c
 8006608:	2000095c 	.word	0x2000095c

0800660c <_free_r>:
 800660c:	2900      	cmp	r1, #0
 800660e:	d04e      	beq.n	80066ae <_free_r+0xa2>
 8006610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006614:	460c      	mov	r4, r1
 8006616:	4680      	mov	r8, r0
 8006618:	f000 fe9e 	bl	8007358 <__malloc_lock>
 800661c:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8006620:	4962      	ldr	r1, [pc, #392]	; (80067ac <_free_r+0x1a0>)
 8006622:	f027 0201 	bic.w	r2, r7, #1
 8006626:	f1a4 0508 	sub.w	r5, r4, #8
 800662a:	18ab      	adds	r3, r5, r2
 800662c:	688e      	ldr	r6, [r1, #8]
 800662e:	6858      	ldr	r0, [r3, #4]
 8006630:	429e      	cmp	r6, r3
 8006632:	f020 0003 	bic.w	r0, r0, #3
 8006636:	d05a      	beq.n	80066ee <_free_r+0xe2>
 8006638:	07fe      	lsls	r6, r7, #31
 800663a:	6058      	str	r0, [r3, #4]
 800663c:	d40b      	bmi.n	8006656 <_free_r+0x4a>
 800663e:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8006642:	1bed      	subs	r5, r5, r7
 8006644:	f101 0e08 	add.w	lr, r1, #8
 8006648:	68ac      	ldr	r4, [r5, #8]
 800664a:	4574      	cmp	r4, lr
 800664c:	443a      	add	r2, r7
 800664e:	d067      	beq.n	8006720 <_free_r+0x114>
 8006650:	68ef      	ldr	r7, [r5, #12]
 8006652:	60e7      	str	r7, [r4, #12]
 8006654:	60bc      	str	r4, [r7, #8]
 8006656:	181c      	adds	r4, r3, r0
 8006658:	6864      	ldr	r4, [r4, #4]
 800665a:	07e4      	lsls	r4, r4, #31
 800665c:	d40c      	bmi.n	8006678 <_free_r+0x6c>
 800665e:	4f54      	ldr	r7, [pc, #336]	; (80067b0 <_free_r+0x1a4>)
 8006660:	689c      	ldr	r4, [r3, #8]
 8006662:	42bc      	cmp	r4, r7
 8006664:	4402      	add	r2, r0
 8006666:	d07c      	beq.n	8006762 <_free_r+0x156>
 8006668:	68d8      	ldr	r0, [r3, #12]
 800666a:	60e0      	str	r0, [r4, #12]
 800666c:	f042 0301 	orr.w	r3, r2, #1
 8006670:	6084      	str	r4, [r0, #8]
 8006672:	606b      	str	r3, [r5, #4]
 8006674:	50aa      	str	r2, [r5, r2]
 8006676:	e003      	b.n	8006680 <_free_r+0x74>
 8006678:	f042 0301 	orr.w	r3, r2, #1
 800667c:	606b      	str	r3, [r5, #4]
 800667e:	50aa      	str	r2, [r5, r2]
 8006680:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8006684:	d214      	bcs.n	80066b0 <_free_r+0xa4>
 8006686:	08d2      	lsrs	r2, r2, #3
 8006688:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 800668c:	6848      	ldr	r0, [r1, #4]
 800668e:	689f      	ldr	r7, [r3, #8]
 8006690:	60af      	str	r7, [r5, #8]
 8006692:	1092      	asrs	r2, r2, #2
 8006694:	2401      	movs	r4, #1
 8006696:	fa04 f202 	lsl.w	r2, r4, r2
 800669a:	4310      	orrs	r0, r2
 800669c:	60eb      	str	r3, [r5, #12]
 800669e:	6048      	str	r0, [r1, #4]
 80066a0:	609d      	str	r5, [r3, #8]
 80066a2:	60fd      	str	r5, [r7, #12]
 80066a4:	4640      	mov	r0, r8
 80066a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066aa:	f000 be57 	b.w	800735c <__malloc_unlock>
 80066ae:	4770      	bx	lr
 80066b0:	0a53      	lsrs	r3, r2, #9
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d847      	bhi.n	8006746 <_free_r+0x13a>
 80066b6:	0993      	lsrs	r3, r2, #6
 80066b8:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80066bc:	0060      	lsls	r0, r4, #1
 80066be:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80066c2:	493a      	ldr	r1, [pc, #232]	; (80067ac <_free_r+0x1a0>)
 80066c4:	6883      	ldr	r3, [r0, #8]
 80066c6:	4283      	cmp	r3, r0
 80066c8:	d043      	beq.n	8006752 <_free_r+0x146>
 80066ca:	6859      	ldr	r1, [r3, #4]
 80066cc:	f021 0103 	bic.w	r1, r1, #3
 80066d0:	4291      	cmp	r1, r2
 80066d2:	d902      	bls.n	80066da <_free_r+0xce>
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	4298      	cmp	r0, r3
 80066d8:	d1f7      	bne.n	80066ca <_free_r+0xbe>
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	60ea      	str	r2, [r5, #12]
 80066de:	60ab      	str	r3, [r5, #8]
 80066e0:	4640      	mov	r0, r8
 80066e2:	6095      	str	r5, [r2, #8]
 80066e4:	60dd      	str	r5, [r3, #12]
 80066e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066ea:	f000 be37 	b.w	800735c <__malloc_unlock>
 80066ee:	07ff      	lsls	r7, r7, #31
 80066f0:	4402      	add	r2, r0
 80066f2:	d407      	bmi.n	8006704 <_free_r+0xf8>
 80066f4:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80066f8:	1aed      	subs	r5, r5, r3
 80066fa:	441a      	add	r2, r3
 80066fc:	68a8      	ldr	r0, [r5, #8]
 80066fe:	68eb      	ldr	r3, [r5, #12]
 8006700:	60c3      	str	r3, [r0, #12]
 8006702:	6098      	str	r0, [r3, #8]
 8006704:	4b2b      	ldr	r3, [pc, #172]	; (80067b4 <_free_r+0x1a8>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f042 0001 	orr.w	r0, r2, #1
 800670c:	429a      	cmp	r2, r3
 800670e:	6068      	str	r0, [r5, #4]
 8006710:	608d      	str	r5, [r1, #8]
 8006712:	d3c7      	bcc.n	80066a4 <_free_r+0x98>
 8006714:	4b28      	ldr	r3, [pc, #160]	; (80067b8 <_free_r+0x1ac>)
 8006716:	4640      	mov	r0, r8
 8006718:	6819      	ldr	r1, [r3, #0]
 800671a:	f7ff ff29 	bl	8006570 <_malloc_trim_r>
 800671e:	e7c1      	b.n	80066a4 <_free_r+0x98>
 8006720:	1819      	adds	r1, r3, r0
 8006722:	6849      	ldr	r1, [r1, #4]
 8006724:	07c9      	lsls	r1, r1, #31
 8006726:	d409      	bmi.n	800673c <_free_r+0x130>
 8006728:	68d9      	ldr	r1, [r3, #12]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	4402      	add	r2, r0
 800672e:	f042 0001 	orr.w	r0, r2, #1
 8006732:	60d9      	str	r1, [r3, #12]
 8006734:	608b      	str	r3, [r1, #8]
 8006736:	6068      	str	r0, [r5, #4]
 8006738:	50aa      	str	r2, [r5, r2]
 800673a:	e7b3      	b.n	80066a4 <_free_r+0x98>
 800673c:	f042 0301 	orr.w	r3, r2, #1
 8006740:	606b      	str	r3, [r5, #4]
 8006742:	50aa      	str	r2, [r5, r2]
 8006744:	e7ae      	b.n	80066a4 <_free_r+0x98>
 8006746:	2b14      	cmp	r3, #20
 8006748:	d814      	bhi.n	8006774 <_free_r+0x168>
 800674a:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 800674e:	0060      	lsls	r0, r4, #1
 8006750:	e7b5      	b.n	80066be <_free_r+0xb2>
 8006752:	684a      	ldr	r2, [r1, #4]
 8006754:	10a4      	asrs	r4, r4, #2
 8006756:	2001      	movs	r0, #1
 8006758:	40a0      	lsls	r0, r4
 800675a:	4302      	orrs	r2, r0
 800675c:	604a      	str	r2, [r1, #4]
 800675e:	461a      	mov	r2, r3
 8006760:	e7bc      	b.n	80066dc <_free_r+0xd0>
 8006762:	f042 0301 	orr.w	r3, r2, #1
 8006766:	614d      	str	r5, [r1, #20]
 8006768:	610d      	str	r5, [r1, #16]
 800676a:	60ec      	str	r4, [r5, #12]
 800676c:	60ac      	str	r4, [r5, #8]
 800676e:	606b      	str	r3, [r5, #4]
 8006770:	50aa      	str	r2, [r5, r2]
 8006772:	e797      	b.n	80066a4 <_free_r+0x98>
 8006774:	2b54      	cmp	r3, #84	; 0x54
 8006776:	d804      	bhi.n	8006782 <_free_r+0x176>
 8006778:	0b13      	lsrs	r3, r2, #12
 800677a:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 800677e:	0060      	lsls	r0, r4, #1
 8006780:	e79d      	b.n	80066be <_free_r+0xb2>
 8006782:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006786:	d804      	bhi.n	8006792 <_free_r+0x186>
 8006788:	0bd3      	lsrs	r3, r2, #15
 800678a:	f103 0477 	add.w	r4, r3, #119	; 0x77
 800678e:	0060      	lsls	r0, r4, #1
 8006790:	e795      	b.n	80066be <_free_r+0xb2>
 8006792:	f240 5054 	movw	r0, #1364	; 0x554
 8006796:	4283      	cmp	r3, r0
 8006798:	d804      	bhi.n	80067a4 <_free_r+0x198>
 800679a:	0c93      	lsrs	r3, r2, #18
 800679c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80067a0:	0060      	lsls	r0, r4, #1
 80067a2:	e78c      	b.n	80066be <_free_r+0xb2>
 80067a4:	20fc      	movs	r0, #252	; 0xfc
 80067a6:	247e      	movs	r4, #126	; 0x7e
 80067a8:	e789      	b.n	80066be <_free_r+0xb2>
 80067aa:	bf00      	nop
 80067ac:	20000550 	.word	0x20000550
 80067b0:	20000558 	.word	0x20000558
 80067b4:	20000958 	.word	0x20000958
 80067b8:	20010048 	.word	0x20010048

080067bc <__sfvwrite_r>:
 80067bc:	6893      	ldr	r3, [r2, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d07a      	beq.n	80068b8 <__sfvwrite_r+0xfc>
 80067c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c6:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 80067ca:	f01e 0f08 	tst.w	lr, #8
 80067ce:	b083      	sub	sp, #12
 80067d0:	460c      	mov	r4, r1
 80067d2:	4681      	mov	r9, r0
 80067d4:	4616      	mov	r6, r2
 80067d6:	d026      	beq.n	8006826 <__sfvwrite_r+0x6a>
 80067d8:	690b      	ldr	r3, [r1, #16]
 80067da:	b323      	cbz	r3, 8006826 <__sfvwrite_r+0x6a>
 80067dc:	f00e 0802 	and.w	r8, lr, #2
 80067e0:	fa1f f088 	uxth.w	r0, r8
 80067e4:	6835      	ldr	r5, [r6, #0]
 80067e6:	b370      	cbz	r0, 8006846 <__sfvwrite_r+0x8a>
 80067e8:	f04f 0a00 	mov.w	sl, #0
 80067ec:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 8006ad0 <__sfvwrite_r+0x314>
 80067f0:	46d0      	mov	r8, sl
 80067f2:	45d8      	cmp	r8, fp
 80067f4:	4643      	mov	r3, r8
 80067f6:	4652      	mov	r2, sl
 80067f8:	bf28      	it	cs
 80067fa:	465b      	movcs	r3, fp
 80067fc:	4648      	mov	r0, r9
 80067fe:	f1b8 0f00 	cmp.w	r8, #0
 8006802:	d053      	beq.n	80068ac <__sfvwrite_r+0xf0>
 8006804:	69e1      	ldr	r1, [r4, #28]
 8006806:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006808:	47b8      	blx	r7
 800680a:	2800      	cmp	r0, #0
 800680c:	dd73      	ble.n	80068f6 <__sfvwrite_r+0x13a>
 800680e:	68b3      	ldr	r3, [r6, #8]
 8006810:	1a1b      	subs	r3, r3, r0
 8006812:	4482      	add	sl, r0
 8006814:	ebc0 0808 	rsb	r8, r0, r8
 8006818:	60b3      	str	r3, [r6, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1e9      	bne.n	80067f2 <__sfvwrite_r+0x36>
 800681e:	2000      	movs	r0, #0
 8006820:	b003      	add	sp, #12
 8006822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006826:	4648      	mov	r0, r9
 8006828:	4621      	mov	r1, r4
 800682a:	f7fe fbeb 	bl	8005004 <__swsetup_r>
 800682e:	2800      	cmp	r0, #0
 8006830:	f040 8145 	bne.w	8006abe <__sfvwrite_r+0x302>
 8006834:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8006838:	6835      	ldr	r5, [r6, #0]
 800683a:	f00e 0802 	and.w	r8, lr, #2
 800683e:	fa1f f088 	uxth.w	r0, r8
 8006842:	2800      	cmp	r0, #0
 8006844:	d1d0      	bne.n	80067e8 <__sfvwrite_r+0x2c>
 8006846:	f01e 0b01 	ands.w	fp, lr, #1
 800684a:	d15d      	bne.n	8006908 <__sfvwrite_r+0x14c>
 800684c:	46d8      	mov	r8, fp
 800684e:	f1b8 0f00 	cmp.w	r8, #0
 8006852:	d025      	beq.n	80068a0 <__sfvwrite_r+0xe4>
 8006854:	f41e 7f00 	tst.w	lr, #512	; 0x200
 8006858:	68a7      	ldr	r7, [r4, #8]
 800685a:	d02f      	beq.n	80068bc <__sfvwrite_r+0x100>
 800685c:	45b8      	cmp	r8, r7
 800685e:	46ba      	mov	sl, r7
 8006860:	f0c0 80a9 	bcc.w	80069b6 <__sfvwrite_r+0x1fa>
 8006864:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 8006868:	f040 80b6 	bne.w	80069d8 <__sfvwrite_r+0x21c>
 800686c:	6820      	ldr	r0, [r4, #0]
 800686e:	4652      	mov	r2, sl
 8006870:	4659      	mov	r1, fp
 8006872:	f000 fd0d 	bl	8007290 <memmove>
 8006876:	68a0      	ldr	r0, [r4, #8]
 8006878:	6822      	ldr	r2, [r4, #0]
 800687a:	1bc0      	subs	r0, r0, r7
 800687c:	eb02 030a 	add.w	r3, r2, sl
 8006880:	60a0      	str	r0, [r4, #8]
 8006882:	6023      	str	r3, [r4, #0]
 8006884:	4640      	mov	r0, r8
 8006886:	68b3      	ldr	r3, [r6, #8]
 8006888:	1a1b      	subs	r3, r3, r0
 800688a:	4483      	add	fp, r0
 800688c:	ebc0 0808 	rsb	r8, r0, r8
 8006890:	60b3      	str	r3, [r6, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0c3      	beq.n	800681e <__sfvwrite_r+0x62>
 8006896:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 800689a:	f1b8 0f00 	cmp.w	r8, #0
 800689e:	d1d9      	bne.n	8006854 <__sfvwrite_r+0x98>
 80068a0:	f8d5 b000 	ldr.w	fp, [r5]
 80068a4:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80068a8:	3508      	adds	r5, #8
 80068aa:	e7d0      	b.n	800684e <__sfvwrite_r+0x92>
 80068ac:	f8d5 a000 	ldr.w	sl, [r5]
 80068b0:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80068b4:	3508      	adds	r5, #8
 80068b6:	e79c      	b.n	80067f2 <__sfvwrite_r+0x36>
 80068b8:	2000      	movs	r0, #0
 80068ba:	4770      	bx	lr
 80068bc:	6820      	ldr	r0, [r4, #0]
 80068be:	6923      	ldr	r3, [r4, #16]
 80068c0:	4298      	cmp	r0, r3
 80068c2:	d803      	bhi.n	80068cc <__sfvwrite_r+0x110>
 80068c4:	6962      	ldr	r2, [r4, #20]
 80068c6:	4590      	cmp	r8, r2
 80068c8:	f080 80b9 	bcs.w	8006a3e <__sfvwrite_r+0x282>
 80068cc:	4547      	cmp	r7, r8
 80068ce:	bf28      	it	cs
 80068d0:	4647      	movcs	r7, r8
 80068d2:	463a      	mov	r2, r7
 80068d4:	4659      	mov	r1, fp
 80068d6:	f000 fcdb 	bl	8007290 <memmove>
 80068da:	68a3      	ldr	r3, [r4, #8]
 80068dc:	6822      	ldr	r2, [r4, #0]
 80068de:	1bdb      	subs	r3, r3, r7
 80068e0:	443a      	add	r2, r7
 80068e2:	60a3      	str	r3, [r4, #8]
 80068e4:	6022      	str	r2, [r4, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d14a      	bne.n	8006980 <__sfvwrite_r+0x1c4>
 80068ea:	4648      	mov	r0, r9
 80068ec:	4621      	mov	r1, r4
 80068ee:	f7ff fcf7 	bl	80062e0 <_fflush_r>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d044      	beq.n	8006980 <__sfvwrite_r+0x1c4>
 80068f6:	89a3      	ldrh	r3, [r4, #12]
 80068f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006900:	81a3      	strh	r3, [r4, #12]
 8006902:	b003      	add	sp, #12
 8006904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006908:	4680      	mov	r8, r0
 800690a:	9000      	str	r0, [sp, #0]
 800690c:	4683      	mov	fp, r0
 800690e:	4682      	mov	sl, r0
 8006910:	f1ba 0f00 	cmp.w	sl, #0
 8006914:	d02c      	beq.n	8006970 <__sfvwrite_r+0x1b4>
 8006916:	9b00      	ldr	r3, [sp, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d050      	beq.n	80069be <__sfvwrite_r+0x202>
 800691c:	6820      	ldr	r0, [r4, #0]
 800691e:	6921      	ldr	r1, [r4, #16]
 8006920:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8006924:	6962      	ldr	r2, [r4, #20]
 8006926:	45d0      	cmp	r8, sl
 8006928:	4643      	mov	r3, r8
 800692a:	bf28      	it	cs
 800692c:	4653      	movcs	r3, sl
 800692e:	4288      	cmp	r0, r1
 8006930:	461f      	mov	r7, r3
 8006932:	d904      	bls.n	800693e <__sfvwrite_r+0x182>
 8006934:	eb0e 0c02 	add.w	ip, lr, r2
 8006938:	4563      	cmp	r3, ip
 800693a:	f300 8092 	bgt.w	8006a62 <__sfvwrite_r+0x2a6>
 800693e:	4293      	cmp	r3, r2
 8006940:	db20      	blt.n	8006984 <__sfvwrite_r+0x1c8>
 8006942:	4613      	mov	r3, r2
 8006944:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006946:	69e1      	ldr	r1, [r4, #28]
 8006948:	4648      	mov	r0, r9
 800694a:	465a      	mov	r2, fp
 800694c:	47b8      	blx	r7
 800694e:	1e07      	subs	r7, r0, #0
 8006950:	ddd1      	ble.n	80068f6 <__sfvwrite_r+0x13a>
 8006952:	ebb8 0807 	subs.w	r8, r8, r7
 8006956:	d025      	beq.n	80069a4 <__sfvwrite_r+0x1e8>
 8006958:	68b3      	ldr	r3, [r6, #8]
 800695a:	1bdb      	subs	r3, r3, r7
 800695c:	44bb      	add	fp, r7
 800695e:	ebc7 0a0a 	rsb	sl, r7, sl
 8006962:	60b3      	str	r3, [r6, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	f43f af5a 	beq.w	800681e <__sfvwrite_r+0x62>
 800696a:	f1ba 0f00 	cmp.w	sl, #0
 800696e:	d1d2      	bne.n	8006916 <__sfvwrite_r+0x15a>
 8006970:	2300      	movs	r3, #0
 8006972:	f8d5 b000 	ldr.w	fp, [r5]
 8006976:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	3508      	adds	r5, #8
 800697e:	e7c7      	b.n	8006910 <__sfvwrite_r+0x154>
 8006980:	4638      	mov	r0, r7
 8006982:	e780      	b.n	8006886 <__sfvwrite_r+0xca>
 8006984:	461a      	mov	r2, r3
 8006986:	4659      	mov	r1, fp
 8006988:	9301      	str	r3, [sp, #4]
 800698a:	f000 fc81 	bl	8007290 <memmove>
 800698e:	68a2      	ldr	r2, [r4, #8]
 8006990:	6821      	ldr	r1, [r4, #0]
 8006992:	9b01      	ldr	r3, [sp, #4]
 8006994:	ebb8 0807 	subs.w	r8, r8, r7
 8006998:	eba2 0203 	sub.w	r2, r2, r3
 800699c:	440b      	add	r3, r1
 800699e:	60a2      	str	r2, [r4, #8]
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	d1d9      	bne.n	8006958 <__sfvwrite_r+0x19c>
 80069a4:	4648      	mov	r0, r9
 80069a6:	4621      	mov	r1, r4
 80069a8:	f7ff fc9a 	bl	80062e0 <_fflush_r>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	d1a2      	bne.n	80068f6 <__sfvwrite_r+0x13a>
 80069b0:	f8cd 8000 	str.w	r8, [sp]
 80069b4:	e7d0      	b.n	8006958 <__sfvwrite_r+0x19c>
 80069b6:	6820      	ldr	r0, [r4, #0]
 80069b8:	4647      	mov	r7, r8
 80069ba:	46c2      	mov	sl, r8
 80069bc:	e757      	b.n	800686e <__sfvwrite_r+0xb2>
 80069be:	4658      	mov	r0, fp
 80069c0:	210a      	movs	r1, #10
 80069c2:	4652      	mov	r2, sl
 80069c4:	f000 fc1a 	bl	80071fc <memchr>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d073      	beq.n	8006ab4 <__sfvwrite_r+0x2f8>
 80069cc:	3001      	adds	r0, #1
 80069ce:	2301      	movs	r3, #1
 80069d0:	ebcb 0800 	rsb	r8, fp, r0
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	e7a1      	b.n	800691c <__sfvwrite_r+0x160>
 80069d8:	6967      	ldr	r7, [r4, #20]
 80069da:	6921      	ldr	r1, [r4, #16]
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80069e2:	1a5b      	subs	r3, r3, r1
 80069e4:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80069e8:	1c58      	adds	r0, r3, #1
 80069ea:	107f      	asrs	r7, r7, #1
 80069ec:	4440      	add	r0, r8
 80069ee:	4287      	cmp	r7, r0
 80069f0:	463a      	mov	r2, r7
 80069f2:	bf3c      	itt	cc
 80069f4:	4607      	movcc	r7, r0
 80069f6:	463a      	movcc	r2, r7
 80069f8:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	d046      	beq.n	8006a8e <__sfvwrite_r+0x2d2>
 8006a00:	4611      	mov	r1, r2
 8006a02:	4648      	mov	r0, r9
 8006a04:	f000 f968 	bl	8006cd8 <_malloc_r>
 8006a08:	9b00      	ldr	r3, [sp, #0]
 8006a0a:	4682      	mov	sl, r0
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d059      	beq.n	8006ac4 <__sfvwrite_r+0x308>
 8006a10:	461a      	mov	r2, r3
 8006a12:	6921      	ldr	r1, [r4, #16]
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	f7fc ff19 	bl	800384c <memcpy>
 8006a1a:	89a2      	ldrh	r2, [r4, #12]
 8006a1c:	9b00      	ldr	r3, [sp, #0]
 8006a1e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8006a22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a26:	81a2      	strh	r2, [r4, #12]
 8006a28:	eb0a 0003 	add.w	r0, sl, r3
 8006a2c:	1afb      	subs	r3, r7, r3
 8006a2e:	f8c4 a010 	str.w	sl, [r4, #16]
 8006a32:	6167      	str	r7, [r4, #20]
 8006a34:	6020      	str	r0, [r4, #0]
 8006a36:	60a3      	str	r3, [r4, #8]
 8006a38:	4647      	mov	r7, r8
 8006a3a:	46c2      	mov	sl, r8
 8006a3c:	e717      	b.n	800686e <__sfvwrite_r+0xb2>
 8006a3e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006a42:	4543      	cmp	r3, r8
 8006a44:	bf28      	it	cs
 8006a46:	4643      	movcs	r3, r8
 8006a48:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006a4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a4e:	4648      	mov	r0, r9
 8006a50:	fb03 f302 	mul.w	r3, r3, r2
 8006a54:	69e1      	ldr	r1, [r4, #28]
 8006a56:	465a      	mov	r2, fp
 8006a58:	47b8      	blx	r7
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	f73f af13 	bgt.w	8006886 <__sfvwrite_r+0xca>
 8006a60:	e749      	b.n	80068f6 <__sfvwrite_r+0x13a>
 8006a62:	4662      	mov	r2, ip
 8006a64:	4659      	mov	r1, fp
 8006a66:	f8cd c004 	str.w	ip, [sp, #4]
 8006a6a:	f000 fc11 	bl	8007290 <memmove>
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006a74:	4463      	add	r3, ip
 8006a76:	6023      	str	r3, [r4, #0]
 8006a78:	4648      	mov	r0, r9
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	f7ff fc30 	bl	80062e0 <_fflush_r>
 8006a80:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006a84:	2800      	cmp	r0, #0
 8006a86:	f47f af36 	bne.w	80068f6 <__sfvwrite_r+0x13a>
 8006a8a:	4667      	mov	r7, ip
 8006a8c:	e761      	b.n	8006952 <__sfvwrite_r+0x196>
 8006a8e:	4648      	mov	r0, r9
 8006a90:	f001 f92e 	bl	8007cf0 <_realloc_r>
 8006a94:	9b00      	ldr	r3, [sp, #0]
 8006a96:	4682      	mov	sl, r0
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	d1c5      	bne.n	8006a28 <__sfvwrite_r+0x26c>
 8006a9c:	4648      	mov	r0, r9
 8006a9e:	6921      	ldr	r1, [r4, #16]
 8006aa0:	f7ff fdb4 	bl	800660c <_free_r>
 8006aa4:	89a3      	ldrh	r3, [r4, #12]
 8006aa6:	220c      	movs	r2, #12
 8006aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	f8c9 2000 	str.w	r2, [r9]
 8006ab2:	e721      	b.n	80068f8 <__sfvwrite_r+0x13c>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	f10a 0801 	add.w	r8, sl, #1
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	e72e      	b.n	800691c <__sfvwrite_r+0x160>
 8006abe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ac2:	e6ad      	b.n	8006820 <__sfvwrite_r+0x64>
 8006ac4:	230c      	movs	r3, #12
 8006ac6:	f8c9 3000 	str.w	r3, [r9]
 8006aca:	89a3      	ldrh	r3, [r4, #12]
 8006acc:	e714      	b.n	80068f8 <__sfvwrite_r+0x13c>
 8006ace:	bf00      	nop
 8006ad0:	7ffffc00 	.word	0x7ffffc00

08006ad4 <_fwalk>:
 8006ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8006adc:	d01b      	beq.n	8006b16 <_fwalk+0x42>
 8006ade:	4688      	mov	r8, r1
 8006ae0:	2600      	movs	r6, #0
 8006ae2:	687d      	ldr	r5, [r7, #4]
 8006ae4:	68bc      	ldr	r4, [r7, #8]
 8006ae6:	3d01      	subs	r5, #1
 8006ae8:	d40f      	bmi.n	8006b0a <_fwalk+0x36>
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8006af2:	d906      	bls.n	8006b02 <_fwalk+0x2e>
 8006af4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8006af8:	3301      	adds	r3, #1
 8006afa:	4620      	mov	r0, r4
 8006afc:	d001      	beq.n	8006b02 <_fwalk+0x2e>
 8006afe:	47c0      	blx	r8
 8006b00:	4306      	orrs	r6, r0
 8006b02:	1c6b      	adds	r3, r5, #1
 8006b04:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8006b08:	d1ef      	bne.n	8006aea <_fwalk+0x16>
 8006b0a:	683f      	ldr	r7, [r7, #0]
 8006b0c:	2f00      	cmp	r7, #0
 8006b0e:	d1e8      	bne.n	8006ae2 <_fwalk+0xe>
 8006b10:	4630      	mov	r0, r6
 8006b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b16:	463e      	mov	r6, r7
 8006b18:	4630      	mov	r0, r6
 8006b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b1e:	bf00      	nop

08006b20 <_fwalk_reent>:
 8006b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b24:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8006b28:	d01f      	beq.n	8006b6a <_fwalk_reent+0x4a>
 8006b2a:	4688      	mov	r8, r1
 8006b2c:	4606      	mov	r6, r0
 8006b2e:	f04f 0900 	mov.w	r9, #0
 8006b32:	687d      	ldr	r5, [r7, #4]
 8006b34:	68bc      	ldr	r4, [r7, #8]
 8006b36:	3d01      	subs	r5, #1
 8006b38:	d411      	bmi.n	8006b5e <_fwalk_reent+0x3e>
 8006b3a:	89a3      	ldrh	r3, [r4, #12]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8006b42:	d908      	bls.n	8006b56 <_fwalk_reent+0x36>
 8006b44:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	4621      	mov	r1, r4
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	d002      	beq.n	8006b56 <_fwalk_reent+0x36>
 8006b50:	47c0      	blx	r8
 8006b52:	ea49 0900 	orr.w	r9, r9, r0
 8006b56:	1c6b      	adds	r3, r5, #1
 8006b58:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8006b5c:	d1ed      	bne.n	8006b3a <_fwalk_reent+0x1a>
 8006b5e:	683f      	ldr	r7, [r7, #0]
 8006b60:	2f00      	cmp	r7, #0
 8006b62:	d1e6      	bne.n	8006b32 <_fwalk_reent+0x12>
 8006b64:	4648      	mov	r0, r9
 8006b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b6a:	46b9      	mov	r9, r7
 8006b6c:	4648      	mov	r0, r9
 8006b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b72:	bf00      	nop

08006b74 <_setlocale_r>:
 8006b74:	b1c2      	cbz	r2, 8006ba8 <_setlocale_r+0x34>
 8006b76:	b510      	push	{r4, lr}
 8006b78:	4610      	mov	r0, r2
 8006b7a:	490c      	ldr	r1, [pc, #48]	; (8006bac <_setlocale_r+0x38>)
 8006b7c:	4614      	mov	r4, r2
 8006b7e:	f001 fb43 	bl	8008208 <strcmp>
 8006b82:	b908      	cbnz	r0, 8006b88 <_setlocale_r+0x14>
 8006b84:	480a      	ldr	r0, [pc, #40]	; (8006bb0 <_setlocale_r+0x3c>)
 8006b86:	bd10      	pop	{r4, pc}
 8006b88:	4620      	mov	r0, r4
 8006b8a:	4909      	ldr	r1, [pc, #36]	; (8006bb0 <_setlocale_r+0x3c>)
 8006b8c:	f001 fb3c 	bl	8008208 <strcmp>
 8006b90:	2800      	cmp	r0, #0
 8006b92:	d0f7      	beq.n	8006b84 <_setlocale_r+0x10>
 8006b94:	4620      	mov	r0, r4
 8006b96:	4907      	ldr	r1, [pc, #28]	; (8006bb4 <_setlocale_r+0x40>)
 8006b98:	f001 fb36 	bl	8008208 <strcmp>
 8006b9c:	4b04      	ldr	r3, [pc, #16]	; (8006bb0 <_setlocale_r+0x3c>)
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	bf0c      	ite	eq
 8006ba2:	4618      	moveq	r0, r3
 8006ba4:	2000      	movne	r0, #0
 8006ba6:	bd10      	pop	{r4, pc}
 8006ba8:	4801      	ldr	r0, [pc, #4]	; (8006bb0 <_setlocale_r+0x3c>)
 8006baa:	4770      	bx	lr
 8006bac:	0800add4 	.word	0x0800add4
 8006bb0:	0800ad58 	.word	0x0800ad58
 8006bb4:	0800a70c 	.word	0x0800a70c

08006bb8 <__locale_charset>:
 8006bb8:	4800      	ldr	r0, [pc, #0]	; (8006bbc <__locale_charset+0x4>)
 8006bba:	4770      	bx	lr
 8006bbc:	2000052c 	.word	0x2000052c

08006bc0 <__locale_mb_cur_max>:
 8006bc0:	4b01      	ldr	r3, [pc, #4]	; (8006bc8 <__locale_mb_cur_max+0x8>)
 8006bc2:	6818      	ldr	r0, [r3, #0]
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	2000054c 	.word	0x2000054c

08006bcc <__locale_msgcharset>:
 8006bcc:	4800      	ldr	r0, [pc, #0]	; (8006bd0 <__locale_msgcharset+0x4>)
 8006bce:	4770      	bx	lr
 8006bd0:	200004d4 	.word	0x200004d4

08006bd4 <__locale_cjk_lang>:
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	4770      	bx	lr

08006bd8 <_localeconv_r>:
 8006bd8:	4800      	ldr	r0, [pc, #0]	; (8006bdc <_localeconv_r+0x4>)
 8006bda:	4770      	bx	lr
 8006bdc:	200004f4 	.word	0x200004f4

08006be0 <setlocale>:
 8006be0:	4b02      	ldr	r3, [pc, #8]	; (8006bec <setlocale+0xc>)
 8006be2:	460a      	mov	r2, r1
 8006be4:	4601      	mov	r1, r0
 8006be6:	6818      	ldr	r0, [r3, #0]
 8006be8:	f7ff bfc4 	b.w	8006b74 <_setlocale_r>
 8006bec:	200004d0 	.word	0x200004d0

08006bf0 <localeconv>:
 8006bf0:	4800      	ldr	r0, [pc, #0]	; (8006bf4 <localeconv+0x4>)
 8006bf2:	4770      	bx	lr
 8006bf4:	200004f4 	.word	0x200004f4

08006bf8 <__smakebuf_r>:
 8006bf8:	898b      	ldrh	r3, [r1, #12]
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	f012 0f02 	tst.w	r2, #2
 8006c00:	d13c      	bne.n	8006c7c <__smakebuf_r+0x84>
 8006c02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c04:	460c      	mov	r4, r1
 8006c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c0a:	2900      	cmp	r1, #0
 8006c0c:	b091      	sub	sp, #68	; 0x44
 8006c0e:	4605      	mov	r5, r0
 8006c10:	db19      	blt.n	8006c46 <__smakebuf_r+0x4e>
 8006c12:	aa01      	add	r2, sp, #4
 8006c14:	f002 fcc6 	bl	80095a4 <_fstat_r>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	db12      	blt.n	8006c42 <__smakebuf_r+0x4a>
 8006c1c:	9b02      	ldr	r3, [sp, #8]
 8006c1e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c26:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 8006c2a:	fab7 f787 	clz	r7, r7
 8006c2e:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8006c32:	d02a      	beq.n	8006c8a <__smakebuf_r+0x92>
 8006c34:	89a3      	ldrh	r3, [r4, #12]
 8006c36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c3a:	81a3      	strh	r3, [r4, #12]
 8006c3c:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8006c40:	e00b      	b.n	8006c5a <__smakebuf_r+0x62>
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006c4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c4e:	81a3      	strh	r3, [r4, #12]
 8006c50:	bf0c      	ite	eq
 8006c52:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8006c56:	2640      	movne	r6, #64	; 0x40
 8006c58:	2700      	movs	r7, #0
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	f000 f83b 	bl	8006cd8 <_malloc_r>
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	b340      	cbz	r0, 8006cb8 <__smakebuf_r+0xc0>
 8006c66:	4a1a      	ldr	r2, [pc, #104]	; (8006cd0 <__smakebuf_r+0xd8>)
 8006c68:	63ea      	str	r2, [r5, #60]	; 0x3c
 8006c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c6e:	81a3      	strh	r3, [r4, #12]
 8006c70:	6020      	str	r0, [r4, #0]
 8006c72:	6120      	str	r0, [r4, #16]
 8006c74:	6166      	str	r6, [r4, #20]
 8006c76:	b99f      	cbnz	r7, 8006ca0 <__smakebuf_r+0xa8>
 8006c78:	b011      	add	sp, #68	; 0x44
 8006c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c7c:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8006c80:	2201      	movs	r2, #1
 8006c82:	600b      	str	r3, [r1, #0]
 8006c84:	610b      	str	r3, [r1, #16]
 8006c86:	614a      	str	r2, [r1, #20]
 8006c88:	4770      	bx	lr
 8006c8a:	4b12      	ldr	r3, [pc, #72]	; (8006cd4 <__smakebuf_r+0xdc>)
 8006c8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d1d0      	bne.n	8006c34 <__smakebuf_r+0x3c>
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8006c98:	4333      	orrs	r3, r6
 8006c9a:	81a3      	strh	r3, [r4, #12]
 8006c9c:	64e6      	str	r6, [r4, #76]	; 0x4c
 8006c9e:	e7dc      	b.n	8006c5a <__smakebuf_r+0x62>
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ca6:	f002 fc91 	bl	80095cc <_isatty_r>
 8006caa:	2800      	cmp	r0, #0
 8006cac:	d0e4      	beq.n	8006c78 <__smakebuf_r+0x80>
 8006cae:	89a3      	ldrh	r3, [r4, #12]
 8006cb0:	f043 0301 	orr.w	r3, r3, #1
 8006cb4:	81a3      	strh	r3, [r4, #12]
 8006cb6:	e7df      	b.n	8006c78 <__smakebuf_r+0x80>
 8006cb8:	059a      	lsls	r2, r3, #22
 8006cba:	d4dd      	bmi.n	8006c78 <__smakebuf_r+0x80>
 8006cbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cc0:	f043 0302 	orr.w	r3, r3, #2
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	81a3      	strh	r3, [r4, #12]
 8006cc8:	6022      	str	r2, [r4, #0]
 8006cca:	6122      	str	r2, [r4, #16]
 8006ccc:	6161      	str	r1, [r4, #20]
 8006cce:	e7d3      	b.n	8006c78 <__smakebuf_r+0x80>
 8006cd0:	08006339 	.word	0x08006339
 8006cd4:	080081bd 	.word	0x080081bd

08006cd8 <_malloc_r>:
 8006cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cdc:	f101 050b 	add.w	r5, r1, #11
 8006ce0:	2d16      	cmp	r5, #22
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	4606      	mov	r6, r0
 8006ce6:	d927      	bls.n	8006d38 <_malloc_r+0x60>
 8006ce8:	f035 0507 	bics.w	r5, r5, #7
 8006cec:	f100 80b6 	bmi.w	8006e5c <_malloc_r+0x184>
 8006cf0:	42a9      	cmp	r1, r5
 8006cf2:	f200 80b3 	bhi.w	8006e5c <_malloc_r+0x184>
 8006cf6:	f000 fb2f 	bl	8007358 <__malloc_lock>
 8006cfa:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8006cfe:	d222      	bcs.n	8006d46 <_malloc_r+0x6e>
 8006d00:	4fc2      	ldr	r7, [pc, #776]	; (800700c <_malloc_r+0x334>)
 8006d02:	08e8      	lsrs	r0, r5, #3
 8006d04:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8006d08:	68dc      	ldr	r4, [r3, #12]
 8006d0a:	429c      	cmp	r4, r3
 8006d0c:	f000 81c8 	beq.w	80070a0 <_malloc_r+0x3c8>
 8006d10:	6863      	ldr	r3, [r4, #4]
 8006d12:	68e1      	ldr	r1, [r4, #12]
 8006d14:	68a5      	ldr	r5, [r4, #8]
 8006d16:	f023 0303 	bic.w	r3, r3, #3
 8006d1a:	4423      	add	r3, r4
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	60e9      	str	r1, [r5, #12]
 8006d22:	f042 0201 	orr.w	r2, r2, #1
 8006d26:	608d      	str	r5, [r1, #8]
 8006d28:	605a      	str	r2, [r3, #4]
 8006d2a:	f000 fb17 	bl	800735c <__malloc_unlock>
 8006d2e:	3408      	adds	r4, #8
 8006d30:	4620      	mov	r0, r4
 8006d32:	b003      	add	sp, #12
 8006d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d38:	2910      	cmp	r1, #16
 8006d3a:	f200 808f 	bhi.w	8006e5c <_malloc_r+0x184>
 8006d3e:	f000 fb0b 	bl	8007358 <__malloc_lock>
 8006d42:	2510      	movs	r5, #16
 8006d44:	e7dc      	b.n	8006d00 <_malloc_r+0x28>
 8006d46:	0a68      	lsrs	r0, r5, #9
 8006d48:	f000 808f 	beq.w	8006e6a <_malloc_r+0x192>
 8006d4c:	2804      	cmp	r0, #4
 8006d4e:	f200 8154 	bhi.w	8006ffa <_malloc_r+0x322>
 8006d52:	09a8      	lsrs	r0, r5, #6
 8006d54:	3038      	adds	r0, #56	; 0x38
 8006d56:	0041      	lsls	r1, r0, #1
 8006d58:	4fac      	ldr	r7, [pc, #688]	; (800700c <_malloc_r+0x334>)
 8006d5a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8006d5e:	68cc      	ldr	r4, [r1, #12]
 8006d60:	42a1      	cmp	r1, r4
 8006d62:	d106      	bne.n	8006d72 <_malloc_r+0x9a>
 8006d64:	e00c      	b.n	8006d80 <_malloc_r+0xa8>
 8006d66:	2a00      	cmp	r2, #0
 8006d68:	f280 8082 	bge.w	8006e70 <_malloc_r+0x198>
 8006d6c:	68e4      	ldr	r4, [r4, #12]
 8006d6e:	42a1      	cmp	r1, r4
 8006d70:	d006      	beq.n	8006d80 <_malloc_r+0xa8>
 8006d72:	6863      	ldr	r3, [r4, #4]
 8006d74:	f023 0303 	bic.w	r3, r3, #3
 8006d78:	1b5a      	subs	r2, r3, r5
 8006d7a:	2a0f      	cmp	r2, #15
 8006d7c:	ddf3      	ble.n	8006d66 <_malloc_r+0x8e>
 8006d7e:	3801      	subs	r0, #1
 8006d80:	3001      	adds	r0, #1
 8006d82:	49a2      	ldr	r1, [pc, #648]	; (800700c <_malloc_r+0x334>)
 8006d84:	693c      	ldr	r4, [r7, #16]
 8006d86:	f101 0e08 	add.w	lr, r1, #8
 8006d8a:	4574      	cmp	r4, lr
 8006d8c:	f000 817d 	beq.w	800708a <_malloc_r+0x3b2>
 8006d90:	6863      	ldr	r3, [r4, #4]
 8006d92:	f023 0303 	bic.w	r3, r3, #3
 8006d96:	1b5a      	subs	r2, r3, r5
 8006d98:	2a0f      	cmp	r2, #15
 8006d9a:	f300 8163 	bgt.w	8007064 <_malloc_r+0x38c>
 8006d9e:	2a00      	cmp	r2, #0
 8006da0:	f8c1 e014 	str.w	lr, [r1, #20]
 8006da4:	f8c1 e010 	str.w	lr, [r1, #16]
 8006da8:	da73      	bge.n	8006e92 <_malloc_r+0x1ba>
 8006daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dae:	f080 8139 	bcs.w	8007024 <_malloc_r+0x34c>
 8006db2:	08db      	lsrs	r3, r3, #3
 8006db4:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8006db8:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8006dbc:	684a      	ldr	r2, [r1, #4]
 8006dbe:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8006dc2:	f8c4 9008 	str.w	r9, [r4, #8]
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	fa03 f30c 	lsl.w	r3, r3, ip
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	f8c4 800c 	str.w	r8, [r4, #12]
 8006dd2:	604b      	str	r3, [r1, #4]
 8006dd4:	f8c8 4008 	str.w	r4, [r8, #8]
 8006dd8:	f8c9 400c 	str.w	r4, [r9, #12]
 8006ddc:	1082      	asrs	r2, r0, #2
 8006dde:	2401      	movs	r4, #1
 8006de0:	4094      	lsls	r4, r2
 8006de2:	429c      	cmp	r4, r3
 8006de4:	d862      	bhi.n	8006eac <_malloc_r+0x1d4>
 8006de6:	4223      	tst	r3, r4
 8006de8:	d106      	bne.n	8006df8 <_malloc_r+0x120>
 8006dea:	f020 0003 	bic.w	r0, r0, #3
 8006dee:	0064      	lsls	r4, r4, #1
 8006df0:	4223      	tst	r3, r4
 8006df2:	f100 0004 	add.w	r0, r0, #4
 8006df6:	d0fa      	beq.n	8006dee <_malloc_r+0x116>
 8006df8:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8006dfc:	46c4      	mov	ip, r8
 8006dfe:	4681      	mov	r9, r0
 8006e00:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8006e04:	459c      	cmp	ip, r3
 8006e06:	d107      	bne.n	8006e18 <_malloc_r+0x140>
 8006e08:	e141      	b.n	800708e <_malloc_r+0x3b6>
 8006e0a:	2900      	cmp	r1, #0
 8006e0c:	f280 8151 	bge.w	80070b2 <_malloc_r+0x3da>
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	459c      	cmp	ip, r3
 8006e14:	f000 813b 	beq.w	800708e <_malloc_r+0x3b6>
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	f022 0203 	bic.w	r2, r2, #3
 8006e1e:	1b51      	subs	r1, r2, r5
 8006e20:	290f      	cmp	r1, #15
 8006e22:	ddf2      	ble.n	8006e0a <_malloc_r+0x132>
 8006e24:	461c      	mov	r4, r3
 8006e26:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8006e2a:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8006e2e:	195a      	adds	r2, r3, r5
 8006e30:	f045 0901 	orr.w	r9, r5, #1
 8006e34:	f041 0501 	orr.w	r5, r1, #1
 8006e38:	f8c3 9004 	str.w	r9, [r3, #4]
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f8c8 c00c 	str.w	ip, [r8, #12]
 8006e42:	f8cc 8008 	str.w	r8, [ip, #8]
 8006e46:	617a      	str	r2, [r7, #20]
 8006e48:	613a      	str	r2, [r7, #16]
 8006e4a:	f8c2 e00c 	str.w	lr, [r2, #12]
 8006e4e:	f8c2 e008 	str.w	lr, [r2, #8]
 8006e52:	6055      	str	r5, [r2, #4]
 8006e54:	5051      	str	r1, [r2, r1]
 8006e56:	f000 fa81 	bl	800735c <__malloc_unlock>
 8006e5a:	e769      	b.n	8006d30 <_malloc_r+0x58>
 8006e5c:	2400      	movs	r4, #0
 8006e5e:	230c      	movs	r3, #12
 8006e60:	4620      	mov	r0, r4
 8006e62:	6033      	str	r3, [r6, #0]
 8006e64:	b003      	add	sp, #12
 8006e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6a:	217e      	movs	r1, #126	; 0x7e
 8006e6c:	203f      	movs	r0, #63	; 0x3f
 8006e6e:	e773      	b.n	8006d58 <_malloc_r+0x80>
 8006e70:	4423      	add	r3, r4
 8006e72:	68e1      	ldr	r1, [r4, #12]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	68a5      	ldr	r5, [r4, #8]
 8006e78:	f042 0201 	orr.w	r2, r2, #1
 8006e7c:	60e9      	str	r1, [r5, #12]
 8006e7e:	4630      	mov	r0, r6
 8006e80:	608d      	str	r5, [r1, #8]
 8006e82:	605a      	str	r2, [r3, #4]
 8006e84:	f000 fa6a 	bl	800735c <__malloc_unlock>
 8006e88:	3408      	adds	r4, #8
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	b003      	add	sp, #12
 8006e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e92:	4423      	add	r3, r4
 8006e94:	4630      	mov	r0, r6
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	f042 0201 	orr.w	r2, r2, #1
 8006e9c:	605a      	str	r2, [r3, #4]
 8006e9e:	f000 fa5d 	bl	800735c <__malloc_unlock>
 8006ea2:	3408      	adds	r4, #8
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	b003      	add	sp, #12
 8006ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eac:	68bc      	ldr	r4, [r7, #8]
 8006eae:	6863      	ldr	r3, [r4, #4]
 8006eb0:	f023 0803 	bic.w	r8, r3, #3
 8006eb4:	4545      	cmp	r5, r8
 8006eb6:	d804      	bhi.n	8006ec2 <_malloc_r+0x1ea>
 8006eb8:	ebc5 0308 	rsb	r3, r5, r8
 8006ebc:	2b0f      	cmp	r3, #15
 8006ebe:	f300 808c 	bgt.w	8006fda <_malloc_r+0x302>
 8006ec2:	4b53      	ldr	r3, [pc, #332]	; (8007010 <_malloc_r+0x338>)
 8006ec4:	f8df a158 	ldr.w	sl, [pc, #344]	; 8007020 <_malloc_r+0x348>
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	f8da 3000 	ldr.w	r3, [sl]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	442a      	add	r2, r5
 8006ed2:	eb04 0b08 	add.w	fp, r4, r8
 8006ed6:	f000 8150 	beq.w	800717a <_malloc_r+0x4a2>
 8006eda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ede:	320f      	adds	r2, #15
 8006ee0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8006ee4:	f022 020f 	bic.w	r2, r2, #15
 8006ee8:	4611      	mov	r1, r2
 8006eea:	4630      	mov	r0, r6
 8006eec:	9201      	str	r2, [sp, #4]
 8006eee:	f001 f923 	bl	8008138 <_sbrk_r>
 8006ef2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006ef6:	4681      	mov	r9, r0
 8006ef8:	9a01      	ldr	r2, [sp, #4]
 8006efa:	f000 8147 	beq.w	800718c <_malloc_r+0x4b4>
 8006efe:	4583      	cmp	fp, r0
 8006f00:	f200 80ee 	bhi.w	80070e0 <_malloc_r+0x408>
 8006f04:	4b43      	ldr	r3, [pc, #268]	; (8007014 <_malloc_r+0x33c>)
 8006f06:	6819      	ldr	r1, [r3, #0]
 8006f08:	45cb      	cmp	fp, r9
 8006f0a:	4411      	add	r1, r2
 8006f0c:	6019      	str	r1, [r3, #0]
 8006f0e:	f000 8142 	beq.w	8007196 <_malloc_r+0x4be>
 8006f12:	f8da 0000 	ldr.w	r0, [sl]
 8006f16:	f8df e108 	ldr.w	lr, [pc, #264]	; 8007020 <_malloc_r+0x348>
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	bf1b      	ittet	ne
 8006f1e:	ebcb 0b09 	rsbne	fp, fp, r9
 8006f22:	4459      	addne	r1, fp
 8006f24:	f8ce 9000 	streq.w	r9, [lr]
 8006f28:	6019      	strne	r1, [r3, #0]
 8006f2a:	f019 0107 	ands.w	r1, r9, #7
 8006f2e:	f000 8107 	beq.w	8007140 <_malloc_r+0x468>
 8006f32:	f1c1 0008 	rsb	r0, r1, #8
 8006f36:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8006f3a:	4481      	add	r9, r0
 8006f3c:	3108      	adds	r1, #8
 8006f3e:	444a      	add	r2, r9
 8006f40:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8006f44:	ebc2 0a01 	rsb	sl, r2, r1
 8006f48:	4651      	mov	r1, sl
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	f001 f8f3 	bl	8008138 <_sbrk_r>
 8006f52:	1c43      	adds	r3, r0, #1
 8006f54:	9b01      	ldr	r3, [sp, #4]
 8006f56:	f000 812c 	beq.w	80071b2 <_malloc_r+0x4da>
 8006f5a:	ebc9 0200 	rsb	r2, r9, r0
 8006f5e:	4452      	add	r2, sl
 8006f60:	f042 0201 	orr.w	r2, r2, #1
 8006f64:	6819      	ldr	r1, [r3, #0]
 8006f66:	f8c7 9008 	str.w	r9, [r7, #8]
 8006f6a:	4451      	add	r1, sl
 8006f6c:	42bc      	cmp	r4, r7
 8006f6e:	f8c9 2004 	str.w	r2, [r9, #4]
 8006f72:	6019      	str	r1, [r3, #0]
 8006f74:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8007014 <_malloc_r+0x33c>
 8006f78:	d016      	beq.n	8006fa8 <_malloc_r+0x2d0>
 8006f7a:	f1b8 0f0f 	cmp.w	r8, #15
 8006f7e:	f240 80ee 	bls.w	800715e <_malloc_r+0x486>
 8006f82:	6862      	ldr	r2, [r4, #4]
 8006f84:	f1a8 030c 	sub.w	r3, r8, #12
 8006f88:	f023 0307 	bic.w	r3, r3, #7
 8006f8c:	18e0      	adds	r0, r4, r3
 8006f8e:	f002 0201 	and.w	r2, r2, #1
 8006f92:	f04f 0e05 	mov.w	lr, #5
 8006f96:	431a      	orrs	r2, r3
 8006f98:	2b0f      	cmp	r3, #15
 8006f9a:	6062      	str	r2, [r4, #4]
 8006f9c:	f8c0 e004 	str.w	lr, [r0, #4]
 8006fa0:	f8c0 e008 	str.w	lr, [r0, #8]
 8006fa4:	f200 8109 	bhi.w	80071ba <_malloc_r+0x4e2>
 8006fa8:	4b1b      	ldr	r3, [pc, #108]	; (8007018 <_malloc_r+0x340>)
 8006faa:	68bc      	ldr	r4, [r7, #8]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	4291      	cmp	r1, r2
 8006fb0:	bf88      	it	hi
 8006fb2:	6019      	strhi	r1, [r3, #0]
 8006fb4:	4b19      	ldr	r3, [pc, #100]	; (800701c <_malloc_r+0x344>)
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	4291      	cmp	r1, r2
 8006fba:	6862      	ldr	r2, [r4, #4]
 8006fbc:	bf88      	it	hi
 8006fbe:	6019      	strhi	r1, [r3, #0]
 8006fc0:	f022 0203 	bic.w	r2, r2, #3
 8006fc4:	4295      	cmp	r5, r2
 8006fc6:	eba2 0305 	sub.w	r3, r2, r5
 8006fca:	d801      	bhi.n	8006fd0 <_malloc_r+0x2f8>
 8006fcc:	2b0f      	cmp	r3, #15
 8006fce:	dc04      	bgt.n	8006fda <_malloc_r+0x302>
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	f000 f9c3 	bl	800735c <__malloc_unlock>
 8006fd6:	2400      	movs	r4, #0
 8006fd8:	e6aa      	b.n	8006d30 <_malloc_r+0x58>
 8006fda:	1962      	adds	r2, r4, r5
 8006fdc:	f043 0301 	orr.w	r3, r3, #1
 8006fe0:	f045 0501 	orr.w	r5, r5, #1
 8006fe4:	6065      	str	r5, [r4, #4]
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	60ba      	str	r2, [r7, #8]
 8006fea:	6053      	str	r3, [r2, #4]
 8006fec:	f000 f9b6 	bl	800735c <__malloc_unlock>
 8006ff0:	3408      	adds	r4, #8
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	b003      	add	sp, #12
 8006ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ffa:	2814      	cmp	r0, #20
 8006ffc:	d968      	bls.n	80070d0 <_malloc_r+0x3f8>
 8006ffe:	2854      	cmp	r0, #84	; 0x54
 8007000:	f200 8097 	bhi.w	8007132 <_malloc_r+0x45a>
 8007004:	0b28      	lsrs	r0, r5, #12
 8007006:	306e      	adds	r0, #110	; 0x6e
 8007008:	0041      	lsls	r1, r0, #1
 800700a:	e6a5      	b.n	8006d58 <_malloc_r+0x80>
 800700c:	20000550 	.word	0x20000550
 8007010:	20010048 	.word	0x20010048
 8007014:	2001004c 	.word	0x2001004c
 8007018:	20010044 	.word	0x20010044
 800701c:	20010040 	.word	0x20010040
 8007020:	2000095c 	.word	0x2000095c
 8007024:	0a5a      	lsrs	r2, r3, #9
 8007026:	2a04      	cmp	r2, #4
 8007028:	d955      	bls.n	80070d6 <_malloc_r+0x3fe>
 800702a:	2a14      	cmp	r2, #20
 800702c:	f200 80a7 	bhi.w	800717e <_malloc_r+0x4a6>
 8007030:	325b      	adds	r2, #91	; 0x5b
 8007032:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8007036:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 800703a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80071f8 <_malloc_r+0x520>
 800703e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8007042:	4561      	cmp	r1, ip
 8007044:	d07f      	beq.n	8007146 <_malloc_r+0x46e>
 8007046:	684a      	ldr	r2, [r1, #4]
 8007048:	f022 0203 	bic.w	r2, r2, #3
 800704c:	4293      	cmp	r3, r2
 800704e:	d202      	bcs.n	8007056 <_malloc_r+0x37e>
 8007050:	6889      	ldr	r1, [r1, #8]
 8007052:	458c      	cmp	ip, r1
 8007054:	d1f7      	bne.n	8007046 <_malloc_r+0x36e>
 8007056:	68ca      	ldr	r2, [r1, #12]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	60e2      	str	r2, [r4, #12]
 800705c:	60a1      	str	r1, [r4, #8]
 800705e:	6094      	str	r4, [r2, #8]
 8007060:	60cc      	str	r4, [r1, #12]
 8007062:	e6bb      	b.n	8006ddc <_malloc_r+0x104>
 8007064:	1963      	adds	r3, r4, r5
 8007066:	f042 0701 	orr.w	r7, r2, #1
 800706a:	f045 0501 	orr.w	r5, r5, #1
 800706e:	6065      	str	r5, [r4, #4]
 8007070:	4630      	mov	r0, r6
 8007072:	614b      	str	r3, [r1, #20]
 8007074:	610b      	str	r3, [r1, #16]
 8007076:	f8c3 e00c 	str.w	lr, [r3, #12]
 800707a:	f8c3 e008 	str.w	lr, [r3, #8]
 800707e:	605f      	str	r7, [r3, #4]
 8007080:	509a      	str	r2, [r3, r2]
 8007082:	3408      	adds	r4, #8
 8007084:	f000 f96a 	bl	800735c <__malloc_unlock>
 8007088:	e652      	b.n	8006d30 <_malloc_r+0x58>
 800708a:	684b      	ldr	r3, [r1, #4]
 800708c:	e6a6      	b.n	8006ddc <_malloc_r+0x104>
 800708e:	f109 0901 	add.w	r9, r9, #1
 8007092:	f019 0f03 	tst.w	r9, #3
 8007096:	f10c 0c08 	add.w	ip, ip, #8
 800709a:	f47f aeb1 	bne.w	8006e00 <_malloc_r+0x128>
 800709e:	e02c      	b.n	80070fa <_malloc_r+0x422>
 80070a0:	f104 0308 	add.w	r3, r4, #8
 80070a4:	6964      	ldr	r4, [r4, #20]
 80070a6:	42a3      	cmp	r3, r4
 80070a8:	bf08      	it	eq
 80070aa:	3002      	addeq	r0, #2
 80070ac:	f43f ae69 	beq.w	8006d82 <_malloc_r+0xaa>
 80070b0:	e62e      	b.n	8006d10 <_malloc_r+0x38>
 80070b2:	441a      	add	r2, r3
 80070b4:	461c      	mov	r4, r3
 80070b6:	6851      	ldr	r1, [r2, #4]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f854 5f08 	ldr.w	r5, [r4, #8]!
 80070be:	f041 0101 	orr.w	r1, r1, #1
 80070c2:	6051      	str	r1, [r2, #4]
 80070c4:	4630      	mov	r0, r6
 80070c6:	60eb      	str	r3, [r5, #12]
 80070c8:	609d      	str	r5, [r3, #8]
 80070ca:	f000 f947 	bl	800735c <__malloc_unlock>
 80070ce:	e62f      	b.n	8006d30 <_malloc_r+0x58>
 80070d0:	305b      	adds	r0, #91	; 0x5b
 80070d2:	0041      	lsls	r1, r0, #1
 80070d4:	e640      	b.n	8006d58 <_malloc_r+0x80>
 80070d6:	099a      	lsrs	r2, r3, #6
 80070d8:	3238      	adds	r2, #56	; 0x38
 80070da:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80070de:	e7aa      	b.n	8007036 <_malloc_r+0x35e>
 80070e0:	42bc      	cmp	r4, r7
 80070e2:	4b45      	ldr	r3, [pc, #276]	; (80071f8 <_malloc_r+0x520>)
 80070e4:	f43f af0e 	beq.w	8006f04 <_malloc_r+0x22c>
 80070e8:	689c      	ldr	r4, [r3, #8]
 80070ea:	6862      	ldr	r2, [r4, #4]
 80070ec:	f022 0203 	bic.w	r2, r2, #3
 80070f0:	e768      	b.n	8006fc4 <_malloc_r+0x2ec>
 80070f2:	f8d8 8000 	ldr.w	r8, [r8]
 80070f6:	4598      	cmp	r8, r3
 80070f8:	d17c      	bne.n	80071f4 <_malloc_r+0x51c>
 80070fa:	f010 0f03 	tst.w	r0, #3
 80070fe:	f1a8 0308 	sub.w	r3, r8, #8
 8007102:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8007106:	d1f4      	bne.n	80070f2 <_malloc_r+0x41a>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	ea23 0304 	bic.w	r3, r3, r4
 800710e:	607b      	str	r3, [r7, #4]
 8007110:	0064      	lsls	r4, r4, #1
 8007112:	429c      	cmp	r4, r3
 8007114:	f63f aeca 	bhi.w	8006eac <_malloc_r+0x1d4>
 8007118:	2c00      	cmp	r4, #0
 800711a:	f43f aec7 	beq.w	8006eac <_malloc_r+0x1d4>
 800711e:	4223      	tst	r3, r4
 8007120:	4648      	mov	r0, r9
 8007122:	f47f ae69 	bne.w	8006df8 <_malloc_r+0x120>
 8007126:	0064      	lsls	r4, r4, #1
 8007128:	4223      	tst	r3, r4
 800712a:	f100 0004 	add.w	r0, r0, #4
 800712e:	d0fa      	beq.n	8007126 <_malloc_r+0x44e>
 8007130:	e662      	b.n	8006df8 <_malloc_r+0x120>
 8007132:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8007136:	d818      	bhi.n	800716a <_malloc_r+0x492>
 8007138:	0be8      	lsrs	r0, r5, #15
 800713a:	3077      	adds	r0, #119	; 0x77
 800713c:	0041      	lsls	r1, r0, #1
 800713e:	e60b      	b.n	8006d58 <_malloc_r+0x80>
 8007140:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007144:	e6fb      	b.n	8006f3e <_malloc_r+0x266>
 8007146:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800714a:	1092      	asrs	r2, r2, #2
 800714c:	f04f 0c01 	mov.w	ip, #1
 8007150:	fa0c f202 	lsl.w	r2, ip, r2
 8007154:	4313      	orrs	r3, r2
 8007156:	f8c8 3004 	str.w	r3, [r8, #4]
 800715a:	460a      	mov	r2, r1
 800715c:	e77d      	b.n	800705a <_malloc_r+0x382>
 800715e:	2301      	movs	r3, #1
 8007160:	f8c9 3004 	str.w	r3, [r9, #4]
 8007164:	464c      	mov	r4, r9
 8007166:	2200      	movs	r2, #0
 8007168:	e72c      	b.n	8006fc4 <_malloc_r+0x2ec>
 800716a:	f240 5354 	movw	r3, #1364	; 0x554
 800716e:	4298      	cmp	r0, r3
 8007170:	d81c      	bhi.n	80071ac <_malloc_r+0x4d4>
 8007172:	0ca8      	lsrs	r0, r5, #18
 8007174:	307c      	adds	r0, #124	; 0x7c
 8007176:	0041      	lsls	r1, r0, #1
 8007178:	e5ee      	b.n	8006d58 <_malloc_r+0x80>
 800717a:	3210      	adds	r2, #16
 800717c:	e6b4      	b.n	8006ee8 <_malloc_r+0x210>
 800717e:	2a54      	cmp	r2, #84	; 0x54
 8007180:	d823      	bhi.n	80071ca <_malloc_r+0x4f2>
 8007182:	0b1a      	lsrs	r2, r3, #12
 8007184:	326e      	adds	r2, #110	; 0x6e
 8007186:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800718a:	e754      	b.n	8007036 <_malloc_r+0x35e>
 800718c:	68bc      	ldr	r4, [r7, #8]
 800718e:	6862      	ldr	r2, [r4, #4]
 8007190:	f022 0203 	bic.w	r2, r2, #3
 8007194:	e716      	b.n	8006fc4 <_malloc_r+0x2ec>
 8007196:	f3cb 000b 	ubfx	r0, fp, #0, #12
 800719a:	2800      	cmp	r0, #0
 800719c:	f47f aeb9 	bne.w	8006f12 <_malloc_r+0x23a>
 80071a0:	4442      	add	r2, r8
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f042 0201 	orr.w	r2, r2, #1
 80071a8:	605a      	str	r2, [r3, #4]
 80071aa:	e6fd      	b.n	8006fa8 <_malloc_r+0x2d0>
 80071ac:	21fc      	movs	r1, #252	; 0xfc
 80071ae:	207e      	movs	r0, #126	; 0x7e
 80071b0:	e5d2      	b.n	8006d58 <_malloc_r+0x80>
 80071b2:	2201      	movs	r2, #1
 80071b4:	f04f 0a00 	mov.w	sl, #0
 80071b8:	e6d4      	b.n	8006f64 <_malloc_r+0x28c>
 80071ba:	f104 0108 	add.w	r1, r4, #8
 80071be:	4630      	mov	r0, r6
 80071c0:	f7ff fa24 	bl	800660c <_free_r>
 80071c4:	f8da 1000 	ldr.w	r1, [sl]
 80071c8:	e6ee      	b.n	8006fa8 <_malloc_r+0x2d0>
 80071ca:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80071ce:	d804      	bhi.n	80071da <_malloc_r+0x502>
 80071d0:	0bda      	lsrs	r2, r3, #15
 80071d2:	3277      	adds	r2, #119	; 0x77
 80071d4:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80071d8:	e72d      	b.n	8007036 <_malloc_r+0x35e>
 80071da:	f240 5154 	movw	r1, #1364	; 0x554
 80071de:	428a      	cmp	r2, r1
 80071e0:	d804      	bhi.n	80071ec <_malloc_r+0x514>
 80071e2:	0c9a      	lsrs	r2, r3, #18
 80071e4:	327c      	adds	r2, #124	; 0x7c
 80071e6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80071ea:	e724      	b.n	8007036 <_malloc_r+0x35e>
 80071ec:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 80071f0:	227e      	movs	r2, #126	; 0x7e
 80071f2:	e720      	b.n	8007036 <_malloc_r+0x35e>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	e78b      	b.n	8007110 <_malloc_r+0x438>
 80071f8:	20000550 	.word	0x20000550

080071fc <memchr>:
 80071fc:	0783      	lsls	r3, r0, #30
 80071fe:	b470      	push	{r4, r5, r6}
 8007200:	b2c9      	uxtb	r1, r1
 8007202:	d040      	beq.n	8007286 <memchr+0x8a>
 8007204:	1e54      	subs	r4, r2, #1
 8007206:	2a00      	cmp	r2, #0
 8007208:	d03f      	beq.n	800728a <memchr+0x8e>
 800720a:	7803      	ldrb	r3, [r0, #0]
 800720c:	428b      	cmp	r3, r1
 800720e:	bf18      	it	ne
 8007210:	1c43      	addne	r3, r0, #1
 8007212:	d106      	bne.n	8007222 <memchr+0x26>
 8007214:	e01d      	b.n	8007252 <memchr+0x56>
 8007216:	b1f4      	cbz	r4, 8007256 <memchr+0x5a>
 8007218:	7802      	ldrb	r2, [r0, #0]
 800721a:	428a      	cmp	r2, r1
 800721c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007220:	d017      	beq.n	8007252 <memchr+0x56>
 8007222:	f013 0f03 	tst.w	r3, #3
 8007226:	4618      	mov	r0, r3
 8007228:	f103 0301 	add.w	r3, r3, #1
 800722c:	d1f3      	bne.n	8007216 <memchr+0x1a>
 800722e:	2c03      	cmp	r4, #3
 8007230:	d814      	bhi.n	800725c <memchr+0x60>
 8007232:	b184      	cbz	r4, 8007256 <memchr+0x5a>
 8007234:	7803      	ldrb	r3, [r0, #0]
 8007236:	428b      	cmp	r3, r1
 8007238:	d00b      	beq.n	8007252 <memchr+0x56>
 800723a:	1905      	adds	r5, r0, r4
 800723c:	1c43      	adds	r3, r0, #1
 800723e:	e002      	b.n	8007246 <memchr+0x4a>
 8007240:	7802      	ldrb	r2, [r0, #0]
 8007242:	428a      	cmp	r2, r1
 8007244:	d005      	beq.n	8007252 <memchr+0x56>
 8007246:	42ab      	cmp	r3, r5
 8007248:	4618      	mov	r0, r3
 800724a:	f103 0301 	add.w	r3, r3, #1
 800724e:	d1f7      	bne.n	8007240 <memchr+0x44>
 8007250:	2000      	movs	r0, #0
 8007252:	bc70      	pop	{r4, r5, r6}
 8007254:	4770      	bx	lr
 8007256:	4620      	mov	r0, r4
 8007258:	bc70      	pop	{r4, r5, r6}
 800725a:	4770      	bx	lr
 800725c:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8007260:	4602      	mov	r2, r0
 8007262:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8007266:	4610      	mov	r0, r2
 8007268:	3204      	adds	r2, #4
 800726a:	6803      	ldr	r3, [r0, #0]
 800726c:	4073      	eors	r3, r6
 800726e:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8007272:	ea25 0303 	bic.w	r3, r5, r3
 8007276:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800727a:	d1da      	bne.n	8007232 <memchr+0x36>
 800727c:	3c04      	subs	r4, #4
 800727e:	2c03      	cmp	r4, #3
 8007280:	4610      	mov	r0, r2
 8007282:	d8f0      	bhi.n	8007266 <memchr+0x6a>
 8007284:	e7d5      	b.n	8007232 <memchr+0x36>
 8007286:	4614      	mov	r4, r2
 8007288:	e7d1      	b.n	800722e <memchr+0x32>
 800728a:	4610      	mov	r0, r2
 800728c:	e7e1      	b.n	8007252 <memchr+0x56>
 800728e:	bf00      	nop

08007290 <memmove>:
 8007290:	4288      	cmp	r0, r1
 8007292:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007294:	d90d      	bls.n	80072b2 <memmove+0x22>
 8007296:	188b      	adds	r3, r1, r2
 8007298:	4298      	cmp	r0, r3
 800729a:	d20a      	bcs.n	80072b2 <memmove+0x22>
 800729c:	1881      	adds	r1, r0, r2
 800729e:	2a00      	cmp	r2, #0
 80072a0:	d054      	beq.n	800734c <memmove+0xbc>
 80072a2:	1a9a      	subs	r2, r3, r2
 80072a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072a8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d1f9      	bne.n	80072a4 <memmove+0x14>
 80072b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072b2:	2a0f      	cmp	r2, #15
 80072b4:	d948      	bls.n	8007348 <memmove+0xb8>
 80072b6:	ea40 0301 	orr.w	r3, r0, r1
 80072ba:	079b      	lsls	r3, r3, #30
 80072bc:	d147      	bne.n	800734e <memmove+0xbe>
 80072be:	f100 0410 	add.w	r4, r0, #16
 80072c2:	f101 0310 	add.w	r3, r1, #16
 80072c6:	4615      	mov	r5, r2
 80072c8:	f853 6c10 	ldr.w	r6, [r3, #-16]
 80072cc:	f844 6c10 	str.w	r6, [r4, #-16]
 80072d0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 80072d4:	f844 6c0c 	str.w	r6, [r4, #-12]
 80072d8:	f853 6c08 	ldr.w	r6, [r3, #-8]
 80072dc:	f844 6c08 	str.w	r6, [r4, #-8]
 80072e0:	3d10      	subs	r5, #16
 80072e2:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80072e6:	f844 6c04 	str.w	r6, [r4, #-4]
 80072ea:	2d0f      	cmp	r5, #15
 80072ec:	f103 0310 	add.w	r3, r3, #16
 80072f0:	f104 0410 	add.w	r4, r4, #16
 80072f4:	d8e8      	bhi.n	80072c8 <memmove+0x38>
 80072f6:	f1a2 0310 	sub.w	r3, r2, #16
 80072fa:	f023 030f 	bic.w	r3, r3, #15
 80072fe:	f002 0e0f 	and.w	lr, r2, #15
 8007302:	3310      	adds	r3, #16
 8007304:	f1be 0f03 	cmp.w	lr, #3
 8007308:	4419      	add	r1, r3
 800730a:	4403      	add	r3, r0
 800730c:	d921      	bls.n	8007352 <memmove+0xc2>
 800730e:	1f1e      	subs	r6, r3, #4
 8007310:	460d      	mov	r5, r1
 8007312:	4674      	mov	r4, lr
 8007314:	3c04      	subs	r4, #4
 8007316:	f855 7b04 	ldr.w	r7, [r5], #4
 800731a:	f846 7f04 	str.w	r7, [r6, #4]!
 800731e:	2c03      	cmp	r4, #3
 8007320:	d8f8      	bhi.n	8007314 <memmove+0x84>
 8007322:	f1ae 0404 	sub.w	r4, lr, #4
 8007326:	f024 0403 	bic.w	r4, r4, #3
 800732a:	3404      	adds	r4, #4
 800732c:	4423      	add	r3, r4
 800732e:	4421      	add	r1, r4
 8007330:	f002 0203 	and.w	r2, r2, #3
 8007334:	b152      	cbz	r2, 800734c <memmove+0xbc>
 8007336:	3b01      	subs	r3, #1
 8007338:	440a      	add	r2, r1
 800733a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800733e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007342:	4291      	cmp	r1, r2
 8007344:	d1f9      	bne.n	800733a <memmove+0xaa>
 8007346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007348:	4603      	mov	r3, r0
 800734a:	e7f3      	b.n	8007334 <memmove+0xa4>
 800734c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800734e:	4603      	mov	r3, r0
 8007350:	e7f1      	b.n	8007336 <memmove+0xa6>
 8007352:	4672      	mov	r2, lr
 8007354:	e7ee      	b.n	8007334 <memmove+0xa4>
 8007356:	bf00      	nop

08007358 <__malloc_lock>:
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop

0800735c <__malloc_unlock>:
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop

08007360 <_Balloc>:
 8007360:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007362:	b570      	push	{r4, r5, r6, lr}
 8007364:	4605      	mov	r5, r0
 8007366:	460c      	mov	r4, r1
 8007368:	b14b      	cbz	r3, 800737e <_Balloc+0x1e>
 800736a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800736e:	b180      	cbz	r0, 8007392 <_Balloc+0x32>
 8007370:	6802      	ldr	r2, [r0, #0]
 8007372:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8007376:	2300      	movs	r3, #0
 8007378:	6103      	str	r3, [r0, #16]
 800737a:	60c3      	str	r3, [r0, #12]
 800737c:	bd70      	pop	{r4, r5, r6, pc}
 800737e:	2104      	movs	r1, #4
 8007380:	2221      	movs	r2, #33	; 0x21
 8007382:	f002 f805 	bl	8009390 <_calloc_r>
 8007386:	64e8      	str	r0, [r5, #76]	; 0x4c
 8007388:	4603      	mov	r3, r0
 800738a:	2800      	cmp	r0, #0
 800738c:	d1ed      	bne.n	800736a <_Balloc+0xa>
 800738e:	2000      	movs	r0, #0
 8007390:	bd70      	pop	{r4, r5, r6, pc}
 8007392:	2101      	movs	r1, #1
 8007394:	fa01 f604 	lsl.w	r6, r1, r4
 8007398:	1d72      	adds	r2, r6, #5
 800739a:	4628      	mov	r0, r5
 800739c:	0092      	lsls	r2, r2, #2
 800739e:	f001 fff7 	bl	8009390 <_calloc_r>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	d0f3      	beq.n	800738e <_Balloc+0x2e>
 80073a6:	6044      	str	r4, [r0, #4]
 80073a8:	6086      	str	r6, [r0, #8]
 80073aa:	e7e4      	b.n	8007376 <_Balloc+0x16>

080073ac <_Bfree>:
 80073ac:	b131      	cbz	r1, 80073bc <_Bfree+0x10>
 80073ae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80073b0:	684a      	ldr	r2, [r1, #4]
 80073b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80073b6:	6008      	str	r0, [r1, #0]
 80073b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop

080073c0 <__multadd>:
 80073c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073c2:	690c      	ldr	r4, [r1, #16]
 80073c4:	b083      	sub	sp, #12
 80073c6:	460d      	mov	r5, r1
 80073c8:	4606      	mov	r6, r0
 80073ca:	f101 0e14 	add.w	lr, r1, #20
 80073ce:	2700      	movs	r7, #0
 80073d0:	f8de 1000 	ldr.w	r1, [lr]
 80073d4:	b288      	uxth	r0, r1
 80073d6:	0c09      	lsrs	r1, r1, #16
 80073d8:	fb02 3300 	mla	r3, r2, r0, r3
 80073dc:	fb02 f101 	mul.w	r1, r2, r1
 80073e0:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 80073e4:	3701      	adds	r7, #1
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 80073ec:	42bc      	cmp	r4, r7
 80073ee:	f84e 3b04 	str.w	r3, [lr], #4
 80073f2:	ea4f 4311 	mov.w	r3, r1, lsr #16
 80073f6:	dceb      	bgt.n	80073d0 <__multadd+0x10>
 80073f8:	b13b      	cbz	r3, 800740a <__multadd+0x4a>
 80073fa:	68aa      	ldr	r2, [r5, #8]
 80073fc:	4294      	cmp	r4, r2
 80073fe:	da07      	bge.n	8007410 <__multadd+0x50>
 8007400:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8007404:	3401      	adds	r4, #1
 8007406:	6153      	str	r3, [r2, #20]
 8007408:	612c      	str	r4, [r5, #16]
 800740a:	4628      	mov	r0, r5
 800740c:	b003      	add	sp, #12
 800740e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007410:	6869      	ldr	r1, [r5, #4]
 8007412:	9301      	str	r3, [sp, #4]
 8007414:	3101      	adds	r1, #1
 8007416:	4630      	mov	r0, r6
 8007418:	f7ff ffa2 	bl	8007360 <_Balloc>
 800741c:	692a      	ldr	r2, [r5, #16]
 800741e:	3202      	adds	r2, #2
 8007420:	f105 010c 	add.w	r1, r5, #12
 8007424:	4607      	mov	r7, r0
 8007426:	0092      	lsls	r2, r2, #2
 8007428:	300c      	adds	r0, #12
 800742a:	f7fc fa0f 	bl	800384c <memcpy>
 800742e:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8007430:	6869      	ldr	r1, [r5, #4]
 8007432:	9b01      	ldr	r3, [sp, #4]
 8007434:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8007438:	6028      	str	r0, [r5, #0]
 800743a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800743e:	463d      	mov	r5, r7
 8007440:	e7de      	b.n	8007400 <__multadd+0x40>
 8007442:	bf00      	nop

08007444 <__s2b>:
 8007444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007448:	4c23      	ldr	r4, [pc, #140]	; (80074d8 <__s2b+0x94>)
 800744a:	9e08      	ldr	r6, [sp, #32]
 800744c:	461f      	mov	r7, r3
 800744e:	3308      	adds	r3, #8
 8007450:	fb84 4e03 	smull	r4, lr, r4, r3
 8007454:	17db      	asrs	r3, r3, #31
 8007456:	ebc3 0e6e 	rsb	lr, r3, lr, asr #1
 800745a:	f1be 0f01 	cmp.w	lr, #1
 800745e:	4605      	mov	r5, r0
 8007460:	460c      	mov	r4, r1
 8007462:	4690      	mov	r8, r2
 8007464:	dd35      	ble.n	80074d2 <__s2b+0x8e>
 8007466:	2301      	movs	r3, #1
 8007468:	2100      	movs	r1, #0
 800746a:	005b      	lsls	r3, r3, #1
 800746c:	459e      	cmp	lr, r3
 800746e:	f101 0101 	add.w	r1, r1, #1
 8007472:	dcfa      	bgt.n	800746a <__s2b+0x26>
 8007474:	4628      	mov	r0, r5
 8007476:	f7ff ff73 	bl	8007360 <_Balloc>
 800747a:	2301      	movs	r3, #1
 800747c:	f1b8 0f09 	cmp.w	r8, #9
 8007480:	6146      	str	r6, [r0, #20]
 8007482:	6103      	str	r3, [r0, #16]
 8007484:	dd21      	ble.n	80074ca <__s2b+0x86>
 8007486:	f104 0909 	add.w	r9, r4, #9
 800748a:	464e      	mov	r6, r9
 800748c:	4444      	add	r4, r8
 800748e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8007492:	4601      	mov	r1, r0
 8007494:	3b30      	subs	r3, #48	; 0x30
 8007496:	4628      	mov	r0, r5
 8007498:	220a      	movs	r2, #10
 800749a:	f7ff ff91 	bl	80073c0 <__multadd>
 800749e:	42a6      	cmp	r6, r4
 80074a0:	d1f5      	bne.n	800748e <__s2b+0x4a>
 80074a2:	eb09 0408 	add.w	r4, r9, r8
 80074a6:	3c08      	subs	r4, #8
 80074a8:	4547      	cmp	r7, r8
 80074aa:	dd0c      	ble.n	80074c6 <__s2b+0x82>
 80074ac:	ebc8 0707 	rsb	r7, r8, r7
 80074b0:	4427      	add	r7, r4
 80074b2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80074b6:	4601      	mov	r1, r0
 80074b8:	3b30      	subs	r3, #48	; 0x30
 80074ba:	4628      	mov	r0, r5
 80074bc:	220a      	movs	r2, #10
 80074be:	f7ff ff7f 	bl	80073c0 <__multadd>
 80074c2:	42bc      	cmp	r4, r7
 80074c4:	d1f5      	bne.n	80074b2 <__s2b+0x6e>
 80074c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ca:	340a      	adds	r4, #10
 80074cc:	f04f 0809 	mov.w	r8, #9
 80074d0:	e7ea      	b.n	80074a8 <__s2b+0x64>
 80074d2:	2100      	movs	r1, #0
 80074d4:	e7ce      	b.n	8007474 <__s2b+0x30>
 80074d6:	bf00      	nop
 80074d8:	38e38e39 	.word	0x38e38e39

080074dc <__hi0bits>:
 80074dc:	0c03      	lsrs	r3, r0, #16
 80074de:	041b      	lsls	r3, r3, #16
 80074e0:	b9b3      	cbnz	r3, 8007510 <__hi0bits+0x34>
 80074e2:	0400      	lsls	r0, r0, #16
 80074e4:	2310      	movs	r3, #16
 80074e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80074ea:	bf04      	itt	eq
 80074ec:	0200      	lsleq	r0, r0, #8
 80074ee:	3308      	addeq	r3, #8
 80074f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80074f4:	bf04      	itt	eq
 80074f6:	0100      	lsleq	r0, r0, #4
 80074f8:	3304      	addeq	r3, #4
 80074fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80074fe:	bf04      	itt	eq
 8007500:	0080      	lsleq	r0, r0, #2
 8007502:	3302      	addeq	r3, #2
 8007504:	2800      	cmp	r0, #0
 8007506:	db07      	blt.n	8007518 <__hi0bits+0x3c>
 8007508:	0042      	lsls	r2, r0, #1
 800750a:	d403      	bmi.n	8007514 <__hi0bits+0x38>
 800750c:	2020      	movs	r0, #32
 800750e:	4770      	bx	lr
 8007510:	2300      	movs	r3, #0
 8007512:	e7e8      	b.n	80074e6 <__hi0bits+0xa>
 8007514:	1c58      	adds	r0, r3, #1
 8007516:	4770      	bx	lr
 8007518:	4618      	mov	r0, r3
 800751a:	4770      	bx	lr

0800751c <__lo0bits>:
 800751c:	6803      	ldr	r3, [r0, #0]
 800751e:	f013 0207 	ands.w	r2, r3, #7
 8007522:	d007      	beq.n	8007534 <__lo0bits+0x18>
 8007524:	07d9      	lsls	r1, r3, #31
 8007526:	d420      	bmi.n	800756a <__lo0bits+0x4e>
 8007528:	079a      	lsls	r2, r3, #30
 800752a:	d420      	bmi.n	800756e <__lo0bits+0x52>
 800752c:	089b      	lsrs	r3, r3, #2
 800752e:	6003      	str	r3, [r0, #0]
 8007530:	2002      	movs	r0, #2
 8007532:	4770      	bx	lr
 8007534:	b299      	uxth	r1, r3
 8007536:	b909      	cbnz	r1, 800753c <__lo0bits+0x20>
 8007538:	0c1b      	lsrs	r3, r3, #16
 800753a:	2210      	movs	r2, #16
 800753c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007540:	bf04      	itt	eq
 8007542:	0a1b      	lsreq	r3, r3, #8
 8007544:	3208      	addeq	r2, #8
 8007546:	0719      	lsls	r1, r3, #28
 8007548:	bf04      	itt	eq
 800754a:	091b      	lsreq	r3, r3, #4
 800754c:	3204      	addeq	r2, #4
 800754e:	0799      	lsls	r1, r3, #30
 8007550:	bf04      	itt	eq
 8007552:	089b      	lsreq	r3, r3, #2
 8007554:	3202      	addeq	r2, #2
 8007556:	07d9      	lsls	r1, r3, #31
 8007558:	d404      	bmi.n	8007564 <__lo0bits+0x48>
 800755a:	085b      	lsrs	r3, r3, #1
 800755c:	d101      	bne.n	8007562 <__lo0bits+0x46>
 800755e:	2020      	movs	r0, #32
 8007560:	4770      	bx	lr
 8007562:	3201      	adds	r2, #1
 8007564:	6003      	str	r3, [r0, #0]
 8007566:	4610      	mov	r0, r2
 8007568:	4770      	bx	lr
 800756a:	2000      	movs	r0, #0
 800756c:	4770      	bx	lr
 800756e:	085b      	lsrs	r3, r3, #1
 8007570:	6003      	str	r3, [r0, #0]
 8007572:	2001      	movs	r0, #1
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop

08007578 <__i2b>:
 8007578:	b510      	push	{r4, lr}
 800757a:	460c      	mov	r4, r1
 800757c:	2101      	movs	r1, #1
 800757e:	f7ff feef 	bl	8007360 <_Balloc>
 8007582:	2201      	movs	r2, #1
 8007584:	6144      	str	r4, [r0, #20]
 8007586:	6102      	str	r2, [r0, #16]
 8007588:	bd10      	pop	{r4, pc}
 800758a:	bf00      	nop

0800758c <__multiply>:
 800758c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007590:	690f      	ldr	r7, [r1, #16]
 8007592:	6916      	ldr	r6, [r2, #16]
 8007594:	42b7      	cmp	r7, r6
 8007596:	b083      	sub	sp, #12
 8007598:	460d      	mov	r5, r1
 800759a:	4614      	mov	r4, r2
 800759c:	f2c0 808d 	blt.w	80076ba <__multiply+0x12e>
 80075a0:	4633      	mov	r3, r6
 80075a2:	463e      	mov	r6, r7
 80075a4:	461f      	mov	r7, r3
 80075a6:	68ab      	ldr	r3, [r5, #8]
 80075a8:	6869      	ldr	r1, [r5, #4]
 80075aa:	eb06 0807 	add.w	r8, r6, r7
 80075ae:	4598      	cmp	r8, r3
 80075b0:	bfc8      	it	gt
 80075b2:	3101      	addgt	r1, #1
 80075b4:	f7ff fed4 	bl	8007360 <_Balloc>
 80075b8:	f100 0c14 	add.w	ip, r0, #20
 80075bc:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 80075c0:	45cc      	cmp	ip, r9
 80075c2:	9000      	str	r0, [sp, #0]
 80075c4:	d205      	bcs.n	80075d2 <__multiply+0x46>
 80075c6:	4663      	mov	r3, ip
 80075c8:	2100      	movs	r1, #0
 80075ca:	f843 1b04 	str.w	r1, [r3], #4
 80075ce:	4599      	cmp	r9, r3
 80075d0:	d8fb      	bhi.n	80075ca <__multiply+0x3e>
 80075d2:	f104 0214 	add.w	r2, r4, #20
 80075d6:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 80075da:	f105 0314 	add.w	r3, r5, #20
 80075de:	4552      	cmp	r2, sl
 80075e0:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 80075e4:	d254      	bcs.n	8007690 <__multiply+0x104>
 80075e6:	f8cd 9004 	str.w	r9, [sp, #4]
 80075ea:	4699      	mov	r9, r3
 80075ec:	f852 3b04 	ldr.w	r3, [r2], #4
 80075f0:	fa1f fb83 	uxth.w	fp, r3
 80075f4:	f1bb 0f00 	cmp.w	fp, #0
 80075f8:	d020      	beq.n	800763c <__multiply+0xb0>
 80075fa:	2000      	movs	r0, #0
 80075fc:	464f      	mov	r7, r9
 80075fe:	4666      	mov	r6, ip
 8007600:	4605      	mov	r5, r0
 8007602:	e000      	b.n	8007606 <__multiply+0x7a>
 8007604:	461e      	mov	r6, r3
 8007606:	f857 4b04 	ldr.w	r4, [r7], #4
 800760a:	6830      	ldr	r0, [r6, #0]
 800760c:	b2a1      	uxth	r1, r4
 800760e:	b283      	uxth	r3, r0
 8007610:	fb0b 3101 	mla	r1, fp, r1, r3
 8007614:	0c24      	lsrs	r4, r4, #16
 8007616:	0c00      	lsrs	r0, r0, #16
 8007618:	194b      	adds	r3, r1, r5
 800761a:	fb0b 0004 	mla	r0, fp, r4, r0
 800761e:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8007622:	b299      	uxth	r1, r3
 8007624:	4633      	mov	r3, r6
 8007626:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800762a:	45be      	cmp	lr, r7
 800762c:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8007630:	f843 1b04 	str.w	r1, [r3], #4
 8007634:	d8e6      	bhi.n	8007604 <__multiply+0x78>
 8007636:	6075      	str	r5, [r6, #4]
 8007638:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800763c:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8007640:	d020      	beq.n	8007684 <__multiply+0xf8>
 8007642:	f8dc 3000 	ldr.w	r3, [ip]
 8007646:	4667      	mov	r7, ip
 8007648:	4618      	mov	r0, r3
 800764a:	464d      	mov	r5, r9
 800764c:	2100      	movs	r1, #0
 800764e:	e000      	b.n	8007652 <__multiply+0xc6>
 8007650:	4637      	mov	r7, r6
 8007652:	882c      	ldrh	r4, [r5, #0]
 8007654:	0c00      	lsrs	r0, r0, #16
 8007656:	fb0b 0004 	mla	r0, fp, r4, r0
 800765a:	4401      	add	r1, r0
 800765c:	b29c      	uxth	r4, r3
 800765e:	463e      	mov	r6, r7
 8007660:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8007664:	f846 3b04 	str.w	r3, [r6], #4
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f855 4b04 	ldr.w	r4, [r5], #4
 800766e:	b283      	uxth	r3, r0
 8007670:	0c24      	lsrs	r4, r4, #16
 8007672:	fb0b 3404 	mla	r4, fp, r4, r3
 8007676:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 800767a:	45ae      	cmp	lr, r5
 800767c:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8007680:	d8e6      	bhi.n	8007650 <__multiply+0xc4>
 8007682:	607b      	str	r3, [r7, #4]
 8007684:	4592      	cmp	sl, r2
 8007686:	f10c 0c04 	add.w	ip, ip, #4
 800768a:	d8af      	bhi.n	80075ec <__multiply+0x60>
 800768c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007690:	f1b8 0f00 	cmp.w	r8, #0
 8007694:	dd0b      	ble.n	80076ae <__multiply+0x122>
 8007696:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800769a:	f1a9 0904 	sub.w	r9, r9, #4
 800769e:	b11b      	cbz	r3, 80076a8 <__multiply+0x11c>
 80076a0:	e005      	b.n	80076ae <__multiply+0x122>
 80076a2:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 80076a6:	b913      	cbnz	r3, 80076ae <__multiply+0x122>
 80076a8:	f1b8 0801 	subs.w	r8, r8, #1
 80076ac:	d1f9      	bne.n	80076a2 <__multiply+0x116>
 80076ae:	9800      	ldr	r0, [sp, #0]
 80076b0:	f8c0 8010 	str.w	r8, [r0, #16]
 80076b4:	b003      	add	sp, #12
 80076b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ba:	4615      	mov	r5, r2
 80076bc:	460c      	mov	r4, r1
 80076be:	e772      	b.n	80075a6 <__multiply+0x1a>

080076c0 <__pow5mult>:
 80076c0:	f012 0303 	ands.w	r3, r2, #3
 80076c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c8:	4614      	mov	r4, r2
 80076ca:	4607      	mov	r7, r0
 80076cc:	460e      	mov	r6, r1
 80076ce:	d12d      	bne.n	800772c <__pow5mult+0x6c>
 80076d0:	10a4      	asrs	r4, r4, #2
 80076d2:	d01c      	beq.n	800770e <__pow5mult+0x4e>
 80076d4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80076d6:	b395      	cbz	r5, 800773e <__pow5mult+0x7e>
 80076d8:	07e3      	lsls	r3, r4, #31
 80076da:	f04f 0800 	mov.w	r8, #0
 80076de:	d406      	bmi.n	80076ee <__pow5mult+0x2e>
 80076e0:	1064      	asrs	r4, r4, #1
 80076e2:	d014      	beq.n	800770e <__pow5mult+0x4e>
 80076e4:	6828      	ldr	r0, [r5, #0]
 80076e6:	b1a8      	cbz	r0, 8007714 <__pow5mult+0x54>
 80076e8:	4605      	mov	r5, r0
 80076ea:	07e3      	lsls	r3, r4, #31
 80076ec:	d5f8      	bpl.n	80076e0 <__pow5mult+0x20>
 80076ee:	4638      	mov	r0, r7
 80076f0:	4631      	mov	r1, r6
 80076f2:	462a      	mov	r2, r5
 80076f4:	f7ff ff4a 	bl	800758c <__multiply>
 80076f8:	b1b6      	cbz	r6, 8007728 <__pow5mult+0x68>
 80076fa:	6872      	ldr	r2, [r6, #4]
 80076fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076fe:	1064      	asrs	r4, r4, #1
 8007700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007704:	6031      	str	r1, [r6, #0]
 8007706:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800770a:	4606      	mov	r6, r0
 800770c:	d1ea      	bne.n	80076e4 <__pow5mult+0x24>
 800770e:	4630      	mov	r0, r6
 8007710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007714:	4629      	mov	r1, r5
 8007716:	462a      	mov	r2, r5
 8007718:	4638      	mov	r0, r7
 800771a:	f7ff ff37 	bl	800758c <__multiply>
 800771e:	6028      	str	r0, [r5, #0]
 8007720:	f8c0 8000 	str.w	r8, [r0]
 8007724:	4605      	mov	r5, r0
 8007726:	e7e0      	b.n	80076ea <__pow5mult+0x2a>
 8007728:	4606      	mov	r6, r0
 800772a:	e7d9      	b.n	80076e0 <__pow5mult+0x20>
 800772c:	1e5a      	subs	r2, r3, #1
 800772e:	4d0b      	ldr	r5, [pc, #44]	; (800775c <__pow5mult+0x9c>)
 8007730:	2300      	movs	r3, #0
 8007732:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8007736:	f7ff fe43 	bl	80073c0 <__multadd>
 800773a:	4606      	mov	r6, r0
 800773c:	e7c8      	b.n	80076d0 <__pow5mult+0x10>
 800773e:	2101      	movs	r1, #1
 8007740:	4638      	mov	r0, r7
 8007742:	f7ff fe0d 	bl	8007360 <_Balloc>
 8007746:	f240 2171 	movw	r1, #625	; 0x271
 800774a:	2201      	movs	r2, #1
 800774c:	2300      	movs	r3, #0
 800774e:	6141      	str	r1, [r0, #20]
 8007750:	6102      	str	r2, [r0, #16]
 8007752:	4605      	mov	r5, r0
 8007754:	64b8      	str	r0, [r7, #72]	; 0x48
 8007756:	6003      	str	r3, [r0, #0]
 8007758:	e7be      	b.n	80076d8 <__pow5mult+0x18>
 800775a:	bf00      	nop
 800775c:	0800aea8 	.word	0x0800aea8

08007760 <__lshift>:
 8007760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007764:	690f      	ldr	r7, [r1, #16]
 8007766:	688b      	ldr	r3, [r1, #8]
 8007768:	ea4f 1962 	mov.w	r9, r2, asr #5
 800776c:	444f      	add	r7, r9
 800776e:	1c7d      	adds	r5, r7, #1
 8007770:	429d      	cmp	r5, r3
 8007772:	460e      	mov	r6, r1
 8007774:	4614      	mov	r4, r2
 8007776:	6849      	ldr	r1, [r1, #4]
 8007778:	4680      	mov	r8, r0
 800777a:	dd04      	ble.n	8007786 <__lshift+0x26>
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	429d      	cmp	r5, r3
 8007780:	f101 0101 	add.w	r1, r1, #1
 8007784:	dcfa      	bgt.n	800777c <__lshift+0x1c>
 8007786:	4640      	mov	r0, r8
 8007788:	f7ff fdea 	bl	8007360 <_Balloc>
 800778c:	f1b9 0f00 	cmp.w	r9, #0
 8007790:	f100 0114 	add.w	r1, r0, #20
 8007794:	dd09      	ble.n	80077aa <__lshift+0x4a>
 8007796:	2300      	movs	r3, #0
 8007798:	469e      	mov	lr, r3
 800779a:	460a      	mov	r2, r1
 800779c:	3301      	adds	r3, #1
 800779e:	454b      	cmp	r3, r9
 80077a0:	f842 eb04 	str.w	lr, [r2], #4
 80077a4:	d1fa      	bne.n	800779c <__lshift+0x3c>
 80077a6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80077aa:	6932      	ldr	r2, [r6, #16]
 80077ac:	f106 0314 	add.w	r3, r6, #20
 80077b0:	f014 0c1f 	ands.w	ip, r4, #31
 80077b4:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 80077b8:	d01f      	beq.n	80077fa <__lshift+0x9a>
 80077ba:	f1cc 0920 	rsb	r9, ip, #32
 80077be:	2200      	movs	r2, #0
 80077c0:	681c      	ldr	r4, [r3, #0]
 80077c2:	fa04 f40c 	lsl.w	r4, r4, ip
 80077c6:	4314      	orrs	r4, r2
 80077c8:	468a      	mov	sl, r1
 80077ca:	f841 4b04 	str.w	r4, [r1], #4
 80077ce:	f853 4b04 	ldr.w	r4, [r3], #4
 80077d2:	459e      	cmp	lr, r3
 80077d4:	fa24 f209 	lsr.w	r2, r4, r9
 80077d8:	d8f2      	bhi.n	80077c0 <__lshift+0x60>
 80077da:	f8ca 2004 	str.w	r2, [sl, #4]
 80077de:	b102      	cbz	r2, 80077e2 <__lshift+0x82>
 80077e0:	1cbd      	adds	r5, r7, #2
 80077e2:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80077e6:	6872      	ldr	r2, [r6, #4]
 80077e8:	3d01      	subs	r5, #1
 80077ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077ee:	6105      	str	r5, [r0, #16]
 80077f0:	6031      	str	r1, [r6, #0]
 80077f2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80077f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077fa:	3904      	subs	r1, #4
 80077fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007800:	f841 2f04 	str.w	r2, [r1, #4]!
 8007804:	459e      	cmp	lr, r3
 8007806:	d8f9      	bhi.n	80077fc <__lshift+0x9c>
 8007808:	e7eb      	b.n	80077e2 <__lshift+0x82>
 800780a:	bf00      	nop

0800780c <__mcmp>:
 800780c:	6902      	ldr	r2, [r0, #16]
 800780e:	690b      	ldr	r3, [r1, #16]
 8007810:	1ad2      	subs	r2, r2, r3
 8007812:	d113      	bne.n	800783c <__mcmp+0x30>
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	3014      	adds	r0, #20
 8007818:	3114      	adds	r1, #20
 800781a:	4419      	add	r1, r3
 800781c:	b410      	push	{r4}
 800781e:	4403      	add	r3, r0
 8007820:	e001      	b.n	8007826 <__mcmp+0x1a>
 8007822:	4298      	cmp	r0, r3
 8007824:	d20c      	bcs.n	8007840 <__mcmp+0x34>
 8007826:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800782a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800782e:	4294      	cmp	r4, r2
 8007830:	d0f7      	beq.n	8007822 <__mcmp+0x16>
 8007832:	d309      	bcc.n	8007848 <__mcmp+0x3c>
 8007834:	2001      	movs	r0, #1
 8007836:	f85d 4b04 	ldr.w	r4, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	4610      	mov	r0, r2
 800783e:	4770      	bx	lr
 8007840:	2000      	movs	r0, #0
 8007842:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800784c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop

08007854 <__mdiff>:
 8007854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007858:	460e      	mov	r6, r1
 800785a:	4605      	mov	r5, r0
 800785c:	4611      	mov	r1, r2
 800785e:	4630      	mov	r0, r6
 8007860:	4614      	mov	r4, r2
 8007862:	f7ff ffd3 	bl	800780c <__mcmp>
 8007866:	1e07      	subs	r7, r0, #0
 8007868:	d054      	beq.n	8007914 <__mdiff+0xc0>
 800786a:	db4d      	blt.n	8007908 <__mdiff+0xb4>
 800786c:	f04f 0800 	mov.w	r8, #0
 8007870:	6871      	ldr	r1, [r6, #4]
 8007872:	4628      	mov	r0, r5
 8007874:	f7ff fd74 	bl	8007360 <_Balloc>
 8007878:	6937      	ldr	r7, [r6, #16]
 800787a:	6923      	ldr	r3, [r4, #16]
 800787c:	f8c0 800c 	str.w	r8, [r0, #12]
 8007880:	3614      	adds	r6, #20
 8007882:	f104 0214 	add.w	r2, r4, #20
 8007886:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 800788a:	f100 0514 	add.w	r5, r0, #20
 800788e:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 8007892:	2300      	movs	r3, #0
 8007894:	f856 8b04 	ldr.w	r8, [r6], #4
 8007898:	f852 4b04 	ldr.w	r4, [r2], #4
 800789c:	fa13 f388 	uxtah	r3, r3, r8
 80078a0:	b2a1      	uxth	r1, r4
 80078a2:	0c24      	lsrs	r4, r4, #16
 80078a4:	1a59      	subs	r1, r3, r1
 80078a6:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 80078aa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80078ae:	b289      	uxth	r1, r1
 80078b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80078b4:	4594      	cmp	ip, r2
 80078b6:	f845 1b04 	str.w	r1, [r5], #4
 80078ba:	ea4f 4323 	mov.w	r3, r3, asr #16
 80078be:	4634      	mov	r4, r6
 80078c0:	d8e8      	bhi.n	8007894 <__mdiff+0x40>
 80078c2:	45b6      	cmp	lr, r6
 80078c4:	46ac      	mov	ip, r5
 80078c6:	d915      	bls.n	80078f4 <__mdiff+0xa0>
 80078c8:	f854 2b04 	ldr.w	r2, [r4], #4
 80078cc:	fa13 f182 	uxtah	r1, r3, r2
 80078d0:	0c13      	lsrs	r3, r2, #16
 80078d2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80078d6:	b289      	uxth	r1, r1
 80078d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80078dc:	45a6      	cmp	lr, r4
 80078de:	f845 1b04 	str.w	r1, [r5], #4
 80078e2:	ea4f 4323 	mov.w	r3, r3, asr #16
 80078e6:	d8ef      	bhi.n	80078c8 <__mdiff+0x74>
 80078e8:	43f6      	mvns	r6, r6
 80078ea:	4476      	add	r6, lr
 80078ec:	f026 0503 	bic.w	r5, r6, #3
 80078f0:	3504      	adds	r5, #4
 80078f2:	4465      	add	r5, ip
 80078f4:	3d04      	subs	r5, #4
 80078f6:	b921      	cbnz	r1, 8007902 <__mdiff+0xae>
 80078f8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80078fc:	3f01      	subs	r7, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d0fa      	beq.n	80078f8 <__mdiff+0xa4>
 8007902:	6107      	str	r7, [r0, #16]
 8007904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007908:	4633      	mov	r3, r6
 800790a:	f04f 0801 	mov.w	r8, #1
 800790e:	4626      	mov	r6, r4
 8007910:	461c      	mov	r4, r3
 8007912:	e7ad      	b.n	8007870 <__mdiff+0x1c>
 8007914:	4628      	mov	r0, r5
 8007916:	4639      	mov	r1, r7
 8007918:	f7ff fd22 	bl	8007360 <_Balloc>
 800791c:	2301      	movs	r3, #1
 800791e:	6147      	str	r7, [r0, #20]
 8007920:	6103      	str	r3, [r0, #16]
 8007922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007926:	bf00      	nop

08007928 <__ulp>:
 8007928:	4b12      	ldr	r3, [pc, #72]	; (8007974 <__ulp+0x4c>)
 800792a:	ee10 2a90 	vmov	r2, s1
 800792e:	401a      	ands	r2, r3
 8007930:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007934:	2b00      	cmp	r3, #0
 8007936:	dd04      	ble.n	8007942 <__ulp+0x1a>
 8007938:	2000      	movs	r0, #0
 800793a:	4619      	mov	r1, r3
 800793c:	ec41 0b10 	vmov	d0, r0, r1
 8007940:	4770      	bx	lr
 8007942:	425b      	negs	r3, r3
 8007944:	151b      	asrs	r3, r3, #20
 8007946:	2b13      	cmp	r3, #19
 8007948:	dd0c      	ble.n	8007964 <__ulp+0x3c>
 800794a:	2b32      	cmp	r3, #50	; 0x32
 800794c:	bfdd      	ittte	le
 800794e:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
 8007952:	2201      	movle	r2, #1
 8007954:	fa02 f303 	lslle.w	r3, r2, r3
 8007958:	2301      	movgt	r3, #1
 800795a:	2100      	movs	r1, #0
 800795c:	4618      	mov	r0, r3
 800795e:	ec41 0b10 	vmov	d0, r0, r1
 8007962:	4770      	bx	lr
 8007964:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007968:	2000      	movs	r0, #0
 800796a:	fa42 f103 	asr.w	r1, r2, r3
 800796e:	ec41 0b10 	vmov	d0, r0, r1
 8007972:	4770      	bx	lr
 8007974:	7ff00000 	.word	0x7ff00000

08007978 <__b2d>:
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	6904      	ldr	r4, [r0, #16]
 800797c:	f100 0714 	add.w	r7, r0, #20
 8007980:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8007984:	460d      	mov	r5, r1
 8007986:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800798a:	4630      	mov	r0, r6
 800798c:	f7ff fda6 	bl	80074dc <__hi0bits>
 8007990:	f1c0 0320 	rsb	r3, r0, #32
 8007994:	280a      	cmp	r0, #10
 8007996:	602b      	str	r3, [r5, #0]
 8007998:	f1a4 0104 	sub.w	r1, r4, #4
 800799c:	dc16      	bgt.n	80079cc <__b2d+0x54>
 800799e:	428f      	cmp	r7, r1
 80079a0:	f1c0 050b 	rsb	r5, r0, #11
 80079a4:	bf38      	it	cc
 80079a6:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 80079aa:	fa26 fe05 	lsr.w	lr, r6, r5
 80079ae:	f100 0015 	add.w	r0, r0, #21
 80079b2:	f04e 537f 	orr.w	r3, lr, #1069547520	; 0x3fc00000
 80079b6:	bf34      	ite	cc
 80079b8:	40e9      	lsrcc	r1, r5
 80079ba:	2100      	movcs	r1, #0
 80079bc:	4086      	lsls	r6, r0
 80079be:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80079c2:	ea41 0206 	orr.w	r2, r1, r6
 80079c6:	ec43 2b10 	vmov	d0, r2, r3
 80079ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079cc:	428f      	cmp	r7, r1
 80079ce:	d220      	bcs.n	8007a12 <__b2d+0x9a>
 80079d0:	f1b0 0e0b 	subs.w	lr, r0, #11
 80079d4:	f1a4 0c08 	sub.w	ip, r4, #8
 80079d8:	f854 1c08 	ldr.w	r1, [r4, #-8]
 80079dc:	d026      	beq.n	8007a2c <__b2d+0xb4>
 80079de:	f1c0 052b 	rsb	r5, r0, #43	; 0x2b
 80079e2:	4567      	cmp	r7, ip
 80079e4:	fa21 f305 	lsr.w	r3, r1, r5
 80079e8:	fa06 f60e 	lsl.w	r6, r6, lr
 80079ec:	ea46 0603 	orr.w	r6, r6, r3
 80079f0:	bf38      	it	cc
 80079f2:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
 80079f6:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
 80079fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80079fe:	bf34      	ite	cc
 8007a00:	40e8      	lsrcc	r0, r5
 8007a02:	2000      	movcs	r0, #0
 8007a04:	fa01 f10e 	lsl.w	r1, r1, lr
 8007a08:	ea41 0200 	orr.w	r2, r1, r0
 8007a0c:	ec43 2b10 	vmov	d0, r2, r3
 8007a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a12:	f1b0 0e0b 	subs.w	lr, r0, #11
 8007a16:	d008      	beq.n	8007a2a <__b2d+0xb2>
 8007a18:	fa06 f60e 	lsl.w	r6, r6, lr
 8007a1c:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
 8007a20:	2000      	movs	r0, #0
 8007a22:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007a26:	4601      	mov	r1, r0
 8007a28:	e7ec      	b.n	8007a04 <__b2d+0x8c>
 8007a2a:	4671      	mov	r1, lr
 8007a2c:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
 8007a30:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007a34:	460a      	mov	r2, r1
 8007a36:	ec43 2b10 	vmov	d0, r2, r3
 8007a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007a3c <__d2b>:
 8007a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a40:	ec57 6b10 	vmov	r6, r7, d0
 8007a44:	b083      	sub	sp, #12
 8007a46:	4688      	mov	r8, r1
 8007a48:	2101      	movs	r1, #1
 8007a4a:	463c      	mov	r4, r7
 8007a4c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007a50:	4617      	mov	r7, r2
 8007a52:	f7ff fc85 	bl	8007360 <_Balloc>
 8007a56:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007a5a:	4681      	mov	r9, r0
 8007a5c:	b10d      	cbz	r5, 8007a62 <__d2b+0x26>
 8007a5e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8007a62:	9401      	str	r4, [sp, #4]
 8007a64:	b31e      	cbz	r6, 8007aae <__d2b+0x72>
 8007a66:	a802      	add	r0, sp, #8
 8007a68:	f840 6d08 	str.w	r6, [r0, #-8]!
 8007a6c:	f7ff fd56 	bl	800751c <__lo0bits>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d134      	bne.n	8007ade <__d2b+0xa2>
 8007a74:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8007a78:	f8c9 2014 	str.w	r2, [r9, #20]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	bf14      	ite	ne
 8007a80:	2402      	movne	r4, #2
 8007a82:	2401      	moveq	r4, #1
 8007a84:	f8c9 3018 	str.w	r3, [r9, #24]
 8007a88:	f8c9 4010 	str.w	r4, [r9, #16]
 8007a8c:	b9dd      	cbnz	r5, 8007ac6 <__d2b+0x8a>
 8007a8e:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 8007a92:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a96:	f8c8 0000 	str.w	r0, [r8]
 8007a9a:	6918      	ldr	r0, [r3, #16]
 8007a9c:	f7ff fd1e 	bl	80074dc <__hi0bits>
 8007aa0:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8007aa4:	6038      	str	r0, [r7, #0]
 8007aa6:	4648      	mov	r0, r9
 8007aa8:	b003      	add	sp, #12
 8007aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007aae:	a801      	add	r0, sp, #4
 8007ab0:	f7ff fd34 	bl	800751c <__lo0bits>
 8007ab4:	2401      	movs	r4, #1
 8007ab6:	9b01      	ldr	r3, [sp, #4]
 8007ab8:	f8c9 3014 	str.w	r3, [r9, #20]
 8007abc:	3020      	adds	r0, #32
 8007abe:	f8c9 4010 	str.w	r4, [r9, #16]
 8007ac2:	2d00      	cmp	r5, #0
 8007ac4:	d0e3      	beq.n	8007a8e <__d2b+0x52>
 8007ac6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007aca:	4405      	add	r5, r0
 8007acc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ad0:	f8c8 5000 	str.w	r5, [r8]
 8007ad4:	6038      	str	r0, [r7, #0]
 8007ad6:	4648      	mov	r0, r9
 8007ad8:	b003      	add	sp, #12
 8007ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ade:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8007ae2:	f1c0 0120 	rsb	r1, r0, #32
 8007ae6:	fa03 f101 	lsl.w	r1, r3, r1
 8007aea:	430a      	orrs	r2, r1
 8007aec:	40c3      	lsrs	r3, r0
 8007aee:	9301      	str	r3, [sp, #4]
 8007af0:	f8c9 2014 	str.w	r2, [r9, #20]
 8007af4:	e7c2      	b.n	8007a7c <__d2b+0x40>
 8007af6:	bf00      	nop

08007af8 <__ratio>:
 8007af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007afc:	b083      	sub	sp, #12
 8007afe:	4688      	mov	r8, r1
 8007b00:	4669      	mov	r1, sp
 8007b02:	4681      	mov	r9, r0
 8007b04:	f7ff ff38 	bl	8007978 <__b2d>
 8007b08:	4640      	mov	r0, r8
 8007b0a:	a901      	add	r1, sp, #4
 8007b0c:	ec55 4b10 	vmov	r4, r5, d0
 8007b10:	f7ff ff32 	bl	8007978 <__b2d>
 8007b14:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8007b18:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8007b1c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8007b20:	1ac9      	subs	r1, r1, r3
 8007b22:	1a12      	subs	r2, r2, r0
 8007b24:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	ec57 6b10 	vmov	r6, r7, d0
 8007b2e:	dd0d      	ble.n	8007b4c <__ratio+0x54>
 8007b30:	eb05 5103 	add.w	r1, r5, r3, lsl #20
 8007b34:	460d      	mov	r5, r1
 8007b36:	4620      	mov	r0, r4
 8007b38:	4629      	mov	r1, r5
 8007b3a:	4632      	mov	r2, r6
 8007b3c:	463b      	mov	r3, r7
 8007b3e:	f002 f92f 	bl	8009da0 <__aeabi_ddiv>
 8007b42:	ec41 0b10 	vmov	d0, r0, r1
 8007b46:	b003      	add	sp, #12
 8007b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b4c:	eba7 5903 	sub.w	r9, r7, r3, lsl #20
 8007b50:	ee10 6a10 	vmov	r6, s0
 8007b54:	464f      	mov	r7, r9
 8007b56:	e7ee      	b.n	8007b36 <__ratio+0x3e>

08007b58 <_mprec_log10>:
 8007b58:	2817      	cmp	r0, #23
 8007b5a:	b510      	push	{r4, lr}
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	dd0a      	ble.n	8007b76 <_mprec_log10+0x1e>
 8007b60:	4908      	ldr	r1, [pc, #32]	; (8007b84 <_mprec_log10+0x2c>)
 8007b62:	2000      	movs	r0, #0
 8007b64:	2200      	movs	r2, #0
 8007b66:	4b08      	ldr	r3, [pc, #32]	; (8007b88 <_mprec_log10+0x30>)
 8007b68:	f001 fff0 	bl	8009b4c <__aeabi_dmul>
 8007b6c:	3c01      	subs	r4, #1
 8007b6e:	d1f9      	bne.n	8007b64 <_mprec_log10+0xc>
 8007b70:	ec41 0b10 	vmov	d0, r0, r1
 8007b74:	bd10      	pop	{r4, pc}
 8007b76:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <_mprec_log10+0x34>)
 8007b78:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8007b7c:	ed94 0b00 	vldr	d0, [r4]
 8007b80:	bd10      	pop	{r4, pc}
 8007b82:	bf00      	nop
 8007b84:	3ff00000 	.word	0x3ff00000
 8007b88:	40240000 	.word	0x40240000
 8007b8c:	0800ade0 	.word	0x0800ade0

08007b90 <__copybits>:
 8007b90:	b470      	push	{r4, r5, r6}
 8007b92:	6914      	ldr	r4, [r2, #16]
 8007b94:	f102 0314 	add.w	r3, r2, #20
 8007b98:	3901      	subs	r1, #1
 8007b9a:	114e      	asrs	r6, r1, #5
 8007b9c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007ba0:	3601      	adds	r6, #1
 8007ba2:	42a3      	cmp	r3, r4
 8007ba4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007ba8:	d20c      	bcs.n	8007bc4 <__copybits+0x34>
 8007baa:	1f01      	subs	r1, r0, #4
 8007bac:	f853 5b04 	ldr.w	r5, [r3], #4
 8007bb0:	f841 5f04 	str.w	r5, [r1, #4]!
 8007bb4:	429c      	cmp	r4, r3
 8007bb6:	d8f9      	bhi.n	8007bac <__copybits+0x1c>
 8007bb8:	1aa3      	subs	r3, r4, r2
 8007bba:	3b15      	subs	r3, #21
 8007bbc:	f023 0303 	bic.w	r3, r3, #3
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	4418      	add	r0, r3
 8007bc4:	4286      	cmp	r6, r0
 8007bc6:	d904      	bls.n	8007bd2 <__copybits+0x42>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	f840 3b04 	str.w	r3, [r0], #4
 8007bce:	4286      	cmp	r6, r0
 8007bd0:	d8fb      	bhi.n	8007bca <__copybits+0x3a>
 8007bd2:	bc70      	pop	{r4, r5, r6}
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop

08007bd8 <__any_on>:
 8007bd8:	6903      	ldr	r3, [r0, #16]
 8007bda:	114a      	asrs	r2, r1, #5
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	b410      	push	{r4}
 8007be0:	f100 0414 	add.w	r4, r0, #20
 8007be4:	da10      	bge.n	8007c08 <__any_on+0x30>
 8007be6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007bea:	429c      	cmp	r4, r3
 8007bec:	d221      	bcs.n	8007c32 <__any_on+0x5a>
 8007bee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007bf2:	3b04      	subs	r3, #4
 8007bf4:	b118      	cbz	r0, 8007bfe <__any_on+0x26>
 8007bf6:	e015      	b.n	8007c24 <__any_on+0x4c>
 8007bf8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007bfc:	b992      	cbnz	r2, 8007c24 <__any_on+0x4c>
 8007bfe:	429c      	cmp	r4, r3
 8007c00:	d3fa      	bcc.n	8007bf8 <__any_on+0x20>
 8007c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	dd10      	ble.n	8007c2c <__any_on+0x54>
 8007c0a:	f011 011f 	ands.w	r1, r1, #31
 8007c0e:	d00d      	beq.n	8007c2c <__any_on+0x54>
 8007c10:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 8007c14:	fa20 f301 	lsr.w	r3, r0, r1
 8007c18:	fa03 f101 	lsl.w	r1, r3, r1
 8007c1c:	4281      	cmp	r1, r0
 8007c1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c22:	d0e2      	beq.n	8007bea <__any_on+0x12>
 8007c24:	2001      	movs	r0, #1
 8007c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c30:	e7db      	b.n	8007bea <__any_on+0x12>
 8007c32:	2000      	movs	r0, #0
 8007c34:	e7e5      	b.n	8007c02 <__any_on+0x2a>
 8007c36:	bf00      	nop

08007c38 <_putc_r>:
 8007c38:	b570      	push	{r4, r5, r6, lr}
 8007c3a:	460d      	mov	r5, r1
 8007c3c:	4614      	mov	r4, r2
 8007c3e:	4606      	mov	r6, r0
 8007c40:	b108      	cbz	r0, 8007c46 <_putc_r+0xe>
 8007c42:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007c44:	b1d3      	cbz	r3, 8007c7c <_putc_r+0x44>
 8007c46:	68a3      	ldr	r3, [r4, #8]
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	60a3      	str	r3, [r4, #8]
 8007c4e:	db06      	blt.n	8007c5e <_putc_r+0x26>
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	701d      	strb	r5, [r3, #0]
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	6022      	str	r2, [r4, #0]
 8007c5a:	7818      	ldrb	r0, [r3, #0]
 8007c5c:	bd70      	pop	{r4, r5, r6, pc}
 8007c5e:	69a2      	ldr	r2, [r4, #24]
 8007c60:	4293      	cmp	r3, r2
 8007c62:	db0e      	blt.n	8007c82 <_putc_r+0x4a>
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	701d      	strb	r5, [r3, #0]
 8007c68:	6823      	ldr	r3, [r4, #0]
 8007c6a:	7819      	ldrb	r1, [r3, #0]
 8007c6c:	290a      	cmp	r1, #10
 8007c6e:	d1f2      	bne.n	8007c56 <_putc_r+0x1e>
 8007c70:	4630      	mov	r0, r6
 8007c72:	4622      	mov	r2, r4
 8007c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c78:	f001 bac8 	b.w	800920c <__swbuf_r>
 8007c7c:	f7fe fc40 	bl	8006500 <__sinit>
 8007c80:	e7e1      	b.n	8007c46 <_putc_r+0xe>
 8007c82:	4630      	mov	r0, r6
 8007c84:	4629      	mov	r1, r5
 8007c86:	4622      	mov	r2, r4
 8007c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c8c:	f001 babe 	b.w	800920c <__swbuf_r>

08007c90 <putc>:
 8007c90:	4b16      	ldr	r3, [pc, #88]	; (8007cec <putc+0x5c>)
 8007c92:	b570      	push	{r4, r5, r6, lr}
 8007c94:	681d      	ldr	r5, [r3, #0]
 8007c96:	4606      	mov	r6, r0
 8007c98:	460c      	mov	r4, r1
 8007c9a:	b10d      	cbz	r5, 8007ca0 <putc+0x10>
 8007c9c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007c9e:	b1d3      	cbz	r3, 8007cd6 <putc+0x46>
 8007ca0:	68a3      	ldr	r3, [r4, #8]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	60a3      	str	r3, [r4, #8]
 8007ca8:	db06      	blt.n	8007cb8 <putc+0x28>
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	701e      	strb	r6, [r3, #0]
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	6022      	str	r2, [r4, #0]
 8007cb4:	7818      	ldrb	r0, [r3, #0]
 8007cb6:	bd70      	pop	{r4, r5, r6, pc}
 8007cb8:	69a2      	ldr	r2, [r4, #24]
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	db0f      	blt.n	8007cde <putc+0x4e>
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	701e      	strb	r6, [r3, #0]
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	7819      	ldrb	r1, [r3, #0]
 8007cc6:	290a      	cmp	r1, #10
 8007cc8:	d1f2      	bne.n	8007cb0 <putc+0x20>
 8007cca:	4628      	mov	r0, r5
 8007ccc:	4622      	mov	r2, r4
 8007cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007cd2:	f001 ba9b 	b.w	800920c <__swbuf_r>
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f7fe fc12 	bl	8006500 <__sinit>
 8007cdc:	e7e0      	b.n	8007ca0 <putc+0x10>
 8007cde:	4628      	mov	r0, r5
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4622      	mov	r2, r4
 8007ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ce8:	f001 ba90 	b.w	800920c <__swbuf_r>
 8007cec:	200004d0 	.word	0x200004d0

08007cf0 <_realloc_r>:
 8007cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	4617      	mov	r7, r2
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	460e      	mov	r6, r1
 8007cfa:	2900      	cmp	r1, #0
 8007cfc:	f000 80e7 	beq.w	8007ece <_realloc_r+0x1de>
 8007d00:	4681      	mov	r9, r0
 8007d02:	f107 050b 	add.w	r5, r7, #11
 8007d06:	f7ff fb27 	bl	8007358 <__malloc_lock>
 8007d0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007d0e:	2d16      	cmp	r5, #22
 8007d10:	f023 0403 	bic.w	r4, r3, #3
 8007d14:	f1a6 0808 	sub.w	r8, r6, #8
 8007d18:	d84c      	bhi.n	8007db4 <_realloc_r+0xc4>
 8007d1a:	2210      	movs	r2, #16
 8007d1c:	4615      	mov	r5, r2
 8007d1e:	42af      	cmp	r7, r5
 8007d20:	d84d      	bhi.n	8007dbe <_realloc_r+0xce>
 8007d22:	4294      	cmp	r4, r2
 8007d24:	f280 8084 	bge.w	8007e30 <_realloc_r+0x140>
 8007d28:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 80080d8 <_realloc_r+0x3e8>
 8007d2c:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007d30:	eb08 0104 	add.w	r1, r8, r4
 8007d34:	4288      	cmp	r0, r1
 8007d36:	f000 80d6 	beq.w	8007ee6 <_realloc_r+0x1f6>
 8007d3a:	6848      	ldr	r0, [r1, #4]
 8007d3c:	f020 0e01 	bic.w	lr, r0, #1
 8007d40:	448e      	add	lr, r1
 8007d42:	f8de e004 	ldr.w	lr, [lr, #4]
 8007d46:	f01e 0f01 	tst.w	lr, #1
 8007d4a:	d13f      	bne.n	8007dcc <_realloc_r+0xdc>
 8007d4c:	f020 0003 	bic.w	r0, r0, #3
 8007d50:	4420      	add	r0, r4
 8007d52:	4290      	cmp	r0, r2
 8007d54:	f280 80c1 	bge.w	8007eda <_realloc_r+0x1ea>
 8007d58:	07db      	lsls	r3, r3, #31
 8007d5a:	f100 808f 	bmi.w	8007e7c <_realloc_r+0x18c>
 8007d5e:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8007d62:	ebc3 0a08 	rsb	sl, r3, r8
 8007d66:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007d6a:	f023 0303 	bic.w	r3, r3, #3
 8007d6e:	eb00 0e03 	add.w	lr, r0, r3
 8007d72:	4596      	cmp	lr, r2
 8007d74:	db34      	blt.n	8007de0 <_realloc_r+0xf0>
 8007d76:	68cb      	ldr	r3, [r1, #12]
 8007d78:	688a      	ldr	r2, [r1, #8]
 8007d7a:	4657      	mov	r7, sl
 8007d7c:	60d3      	str	r3, [r2, #12]
 8007d7e:	609a      	str	r2, [r3, #8]
 8007d80:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8007d84:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007d88:	60cb      	str	r3, [r1, #12]
 8007d8a:	1f22      	subs	r2, r4, #4
 8007d8c:	2a24      	cmp	r2, #36	; 0x24
 8007d8e:	6099      	str	r1, [r3, #8]
 8007d90:	f200 8136 	bhi.w	8008000 <_realloc_r+0x310>
 8007d94:	2a13      	cmp	r2, #19
 8007d96:	f240 80fd 	bls.w	8007f94 <_realloc_r+0x2a4>
 8007d9a:	6833      	ldr	r3, [r6, #0]
 8007d9c:	f8ca 3008 	str.w	r3, [sl, #8]
 8007da0:	6873      	ldr	r3, [r6, #4]
 8007da2:	f8ca 300c 	str.w	r3, [sl, #12]
 8007da6:	2a1b      	cmp	r2, #27
 8007da8:	f200 8140 	bhi.w	800802c <_realloc_r+0x33c>
 8007dac:	3608      	adds	r6, #8
 8007dae:	f10a 0310 	add.w	r3, sl, #16
 8007db2:	e0f0      	b.n	8007f96 <_realloc_r+0x2a6>
 8007db4:	f025 0507 	bic.w	r5, r5, #7
 8007db8:	2d00      	cmp	r5, #0
 8007dba:	462a      	mov	r2, r5
 8007dbc:	daaf      	bge.n	8007d1e <_realloc_r+0x2e>
 8007dbe:	230c      	movs	r3, #12
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	f8c9 3000 	str.w	r3, [r9]
 8007dc6:	b003      	add	sp, #12
 8007dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dcc:	07d9      	lsls	r1, r3, #31
 8007dce:	d455      	bmi.n	8007e7c <_realloc_r+0x18c>
 8007dd0:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8007dd4:	ebc3 0a08 	rsb	sl, r3, r8
 8007dd8:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007ddc:	f023 0303 	bic.w	r3, r3, #3
 8007de0:	4423      	add	r3, r4
 8007de2:	4293      	cmp	r3, r2
 8007de4:	db4a      	blt.n	8007e7c <_realloc_r+0x18c>
 8007de6:	4657      	mov	r7, sl
 8007de8:	f8da 100c 	ldr.w	r1, [sl, #12]
 8007dec:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8007df0:	1f22      	subs	r2, r4, #4
 8007df2:	2a24      	cmp	r2, #36	; 0x24
 8007df4:	60c1      	str	r1, [r0, #12]
 8007df6:	6088      	str	r0, [r1, #8]
 8007df8:	f200 810e 	bhi.w	8008018 <_realloc_r+0x328>
 8007dfc:	2a13      	cmp	r2, #19
 8007dfe:	f240 8109 	bls.w	8008014 <_realloc_r+0x324>
 8007e02:	6831      	ldr	r1, [r6, #0]
 8007e04:	f8ca 1008 	str.w	r1, [sl, #8]
 8007e08:	6871      	ldr	r1, [r6, #4]
 8007e0a:	f8ca 100c 	str.w	r1, [sl, #12]
 8007e0e:	2a1b      	cmp	r2, #27
 8007e10:	f200 8121 	bhi.w	8008056 <_realloc_r+0x366>
 8007e14:	3608      	adds	r6, #8
 8007e16:	f10a 0210 	add.w	r2, sl, #16
 8007e1a:	6831      	ldr	r1, [r6, #0]
 8007e1c:	6011      	str	r1, [r2, #0]
 8007e1e:	6871      	ldr	r1, [r6, #4]
 8007e20:	6051      	str	r1, [r2, #4]
 8007e22:	68b1      	ldr	r1, [r6, #8]
 8007e24:	6091      	str	r1, [r2, #8]
 8007e26:	461c      	mov	r4, r3
 8007e28:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007e2c:	463e      	mov	r6, r7
 8007e2e:	46d0      	mov	r8, sl
 8007e30:	1b62      	subs	r2, r4, r5
 8007e32:	2a0f      	cmp	r2, #15
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	d80e      	bhi.n	8007e58 <_realloc_r+0x168>
 8007e3a:	4323      	orrs	r3, r4
 8007e3c:	4444      	add	r4, r8
 8007e3e:	f8c8 3004 	str.w	r3, [r8, #4]
 8007e42:	6863      	ldr	r3, [r4, #4]
 8007e44:	f043 0301 	orr.w	r3, r3, #1
 8007e48:	6063      	str	r3, [r4, #4]
 8007e4a:	4648      	mov	r0, r9
 8007e4c:	f7ff fa86 	bl	800735c <__malloc_unlock>
 8007e50:	4630      	mov	r0, r6
 8007e52:	b003      	add	sp, #12
 8007e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e58:	eb08 0105 	add.w	r1, r8, r5
 8007e5c:	431d      	orrs	r5, r3
 8007e5e:	f042 0301 	orr.w	r3, r2, #1
 8007e62:	440a      	add	r2, r1
 8007e64:	f8c8 5004 	str.w	r5, [r8, #4]
 8007e68:	604b      	str	r3, [r1, #4]
 8007e6a:	6853      	ldr	r3, [r2, #4]
 8007e6c:	f043 0301 	orr.w	r3, r3, #1
 8007e70:	3108      	adds	r1, #8
 8007e72:	6053      	str	r3, [r2, #4]
 8007e74:	4648      	mov	r0, r9
 8007e76:	f7fe fbc9 	bl	800660c <_free_r>
 8007e7a:	e7e6      	b.n	8007e4a <_realloc_r+0x15a>
 8007e7c:	4639      	mov	r1, r7
 8007e7e:	4648      	mov	r0, r9
 8007e80:	f7fe ff2a 	bl	8006cd8 <_malloc_r>
 8007e84:	4607      	mov	r7, r0
 8007e86:	b1d8      	cbz	r0, 8007ec0 <_realloc_r+0x1d0>
 8007e88:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007e8c:	f023 0201 	bic.w	r2, r3, #1
 8007e90:	4442      	add	r2, r8
 8007e92:	f1a0 0108 	sub.w	r1, r0, #8
 8007e96:	4291      	cmp	r1, r2
 8007e98:	f000 80ac 	beq.w	8007ff4 <_realloc_r+0x304>
 8007e9c:	1f22      	subs	r2, r4, #4
 8007e9e:	2a24      	cmp	r2, #36	; 0x24
 8007ea0:	f200 8099 	bhi.w	8007fd6 <_realloc_r+0x2e6>
 8007ea4:	2a13      	cmp	r2, #19
 8007ea6:	d86a      	bhi.n	8007f7e <_realloc_r+0x28e>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	4632      	mov	r2, r6
 8007eac:	6811      	ldr	r1, [r2, #0]
 8007eae:	6019      	str	r1, [r3, #0]
 8007eb0:	6851      	ldr	r1, [r2, #4]
 8007eb2:	6059      	str	r1, [r3, #4]
 8007eb4:	6892      	ldr	r2, [r2, #8]
 8007eb6:	609a      	str	r2, [r3, #8]
 8007eb8:	4631      	mov	r1, r6
 8007eba:	4648      	mov	r0, r9
 8007ebc:	f7fe fba6 	bl	800660c <_free_r>
 8007ec0:	4648      	mov	r0, r9
 8007ec2:	f7ff fa4b 	bl	800735c <__malloc_unlock>
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	b003      	add	sp, #12
 8007eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ece:	4611      	mov	r1, r2
 8007ed0:	b003      	add	sp, #12
 8007ed2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed6:	f7fe beff 	b.w	8006cd8 <_malloc_r>
 8007eda:	68ca      	ldr	r2, [r1, #12]
 8007edc:	6889      	ldr	r1, [r1, #8]
 8007ede:	4604      	mov	r4, r0
 8007ee0:	60ca      	str	r2, [r1, #12]
 8007ee2:	6091      	str	r1, [r2, #8]
 8007ee4:	e7a4      	b.n	8007e30 <_realloc_r+0x140>
 8007ee6:	6841      	ldr	r1, [r0, #4]
 8007ee8:	f021 0103 	bic.w	r1, r1, #3
 8007eec:	4421      	add	r1, r4
 8007eee:	f105 0010 	add.w	r0, r5, #16
 8007ef2:	4281      	cmp	r1, r0
 8007ef4:	da5b      	bge.n	8007fae <_realloc_r+0x2be>
 8007ef6:	07db      	lsls	r3, r3, #31
 8007ef8:	d4c0      	bmi.n	8007e7c <_realloc_r+0x18c>
 8007efa:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8007efe:	ebc3 0a08 	rsb	sl, r3, r8
 8007f02:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007f06:	f023 0303 	bic.w	r3, r3, #3
 8007f0a:	eb01 0c03 	add.w	ip, r1, r3
 8007f0e:	4560      	cmp	r0, ip
 8007f10:	f73f af66 	bgt.w	8007de0 <_realloc_r+0xf0>
 8007f14:	4657      	mov	r7, sl
 8007f16:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007f1a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8007f1e:	1f22      	subs	r2, r4, #4
 8007f20:	2a24      	cmp	r2, #36	; 0x24
 8007f22:	60cb      	str	r3, [r1, #12]
 8007f24:	6099      	str	r1, [r3, #8]
 8007f26:	f200 80b8 	bhi.w	800809a <_realloc_r+0x3aa>
 8007f2a:	2a13      	cmp	r2, #19
 8007f2c:	f240 80a9 	bls.w	8008082 <_realloc_r+0x392>
 8007f30:	6833      	ldr	r3, [r6, #0]
 8007f32:	f8ca 3008 	str.w	r3, [sl, #8]
 8007f36:	6873      	ldr	r3, [r6, #4]
 8007f38:	f8ca 300c 	str.w	r3, [sl, #12]
 8007f3c:	2a1b      	cmp	r2, #27
 8007f3e:	f200 80b5 	bhi.w	80080ac <_realloc_r+0x3bc>
 8007f42:	3608      	adds	r6, #8
 8007f44:	f10a 0310 	add.w	r3, sl, #16
 8007f48:	6832      	ldr	r2, [r6, #0]
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	6872      	ldr	r2, [r6, #4]
 8007f4e:	605a      	str	r2, [r3, #4]
 8007f50:	68b2      	ldr	r2, [r6, #8]
 8007f52:	609a      	str	r2, [r3, #8]
 8007f54:	eb0a 0205 	add.w	r2, sl, r5
 8007f58:	ebc5 030c 	rsb	r3, r5, ip
 8007f5c:	f043 0301 	orr.w	r3, r3, #1
 8007f60:	f8cb 2008 	str.w	r2, [fp, #8]
 8007f64:	6053      	str	r3, [r2, #4]
 8007f66:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	431d      	orrs	r5, r3
 8007f70:	4648      	mov	r0, r9
 8007f72:	f8ca 5004 	str.w	r5, [sl, #4]
 8007f76:	f7ff f9f1 	bl	800735c <__malloc_unlock>
 8007f7a:	4638      	mov	r0, r7
 8007f7c:	e769      	b.n	8007e52 <_realloc_r+0x162>
 8007f7e:	6833      	ldr	r3, [r6, #0]
 8007f80:	6003      	str	r3, [r0, #0]
 8007f82:	6873      	ldr	r3, [r6, #4]
 8007f84:	6043      	str	r3, [r0, #4]
 8007f86:	2a1b      	cmp	r2, #27
 8007f88:	d829      	bhi.n	8007fde <_realloc_r+0x2ee>
 8007f8a:	f100 0308 	add.w	r3, r0, #8
 8007f8e:	f106 0208 	add.w	r2, r6, #8
 8007f92:	e78b      	b.n	8007eac <_realloc_r+0x1bc>
 8007f94:	463b      	mov	r3, r7
 8007f96:	6832      	ldr	r2, [r6, #0]
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	6872      	ldr	r2, [r6, #4]
 8007f9c:	605a      	str	r2, [r3, #4]
 8007f9e:	68b2      	ldr	r2, [r6, #8]
 8007fa0:	609a      	str	r2, [r3, #8]
 8007fa2:	463e      	mov	r6, r7
 8007fa4:	4674      	mov	r4, lr
 8007fa6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007faa:	46d0      	mov	r8, sl
 8007fac:	e740      	b.n	8007e30 <_realloc_r+0x140>
 8007fae:	eb08 0205 	add.w	r2, r8, r5
 8007fb2:	1b4b      	subs	r3, r1, r5
 8007fb4:	f043 0301 	orr.w	r3, r3, #1
 8007fb8:	f8cb 2008 	str.w	r2, [fp, #8]
 8007fbc:	6053      	str	r3, [r2, #4]
 8007fbe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	431d      	orrs	r5, r3
 8007fc8:	4648      	mov	r0, r9
 8007fca:	f846 5c04 	str.w	r5, [r6, #-4]
 8007fce:	f7ff f9c5 	bl	800735c <__malloc_unlock>
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	e73d      	b.n	8007e52 <_realloc_r+0x162>
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	f7ff f95a 	bl	8007290 <memmove>
 8007fdc:	e76c      	b.n	8007eb8 <_realloc_r+0x1c8>
 8007fde:	68b3      	ldr	r3, [r6, #8]
 8007fe0:	6083      	str	r3, [r0, #8]
 8007fe2:	68f3      	ldr	r3, [r6, #12]
 8007fe4:	60c3      	str	r3, [r0, #12]
 8007fe6:	2a24      	cmp	r2, #36	; 0x24
 8007fe8:	d02c      	beq.n	8008044 <_realloc_r+0x354>
 8007fea:	f100 0310 	add.w	r3, r0, #16
 8007fee:	f106 0210 	add.w	r2, r6, #16
 8007ff2:	e75b      	b.n	8007eac <_realloc_r+0x1bc>
 8007ff4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007ff8:	f022 0203 	bic.w	r2, r2, #3
 8007ffc:	4414      	add	r4, r2
 8007ffe:	e717      	b.n	8007e30 <_realloc_r+0x140>
 8008000:	4631      	mov	r1, r6
 8008002:	4638      	mov	r0, r7
 8008004:	4674      	mov	r4, lr
 8008006:	463e      	mov	r6, r7
 8008008:	f7ff f942 	bl	8007290 <memmove>
 800800c:	46d0      	mov	r8, sl
 800800e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008012:	e70d      	b.n	8007e30 <_realloc_r+0x140>
 8008014:	463a      	mov	r2, r7
 8008016:	e700      	b.n	8007e1a <_realloc_r+0x12a>
 8008018:	4631      	mov	r1, r6
 800801a:	4638      	mov	r0, r7
 800801c:	461c      	mov	r4, r3
 800801e:	463e      	mov	r6, r7
 8008020:	f7ff f936 	bl	8007290 <memmove>
 8008024:	46d0      	mov	r8, sl
 8008026:	f8da 3004 	ldr.w	r3, [sl, #4]
 800802a:	e701      	b.n	8007e30 <_realloc_r+0x140>
 800802c:	68b3      	ldr	r3, [r6, #8]
 800802e:	f8ca 3010 	str.w	r3, [sl, #16]
 8008032:	68f3      	ldr	r3, [r6, #12]
 8008034:	f8ca 3014 	str.w	r3, [sl, #20]
 8008038:	2a24      	cmp	r2, #36	; 0x24
 800803a:	d018      	beq.n	800806e <_realloc_r+0x37e>
 800803c:	3610      	adds	r6, #16
 800803e:	f10a 0318 	add.w	r3, sl, #24
 8008042:	e7a8      	b.n	8007f96 <_realloc_r+0x2a6>
 8008044:	6933      	ldr	r3, [r6, #16]
 8008046:	6103      	str	r3, [r0, #16]
 8008048:	6973      	ldr	r3, [r6, #20]
 800804a:	6143      	str	r3, [r0, #20]
 800804c:	f106 0218 	add.w	r2, r6, #24
 8008050:	f100 0318 	add.w	r3, r0, #24
 8008054:	e72a      	b.n	8007eac <_realloc_r+0x1bc>
 8008056:	68b1      	ldr	r1, [r6, #8]
 8008058:	f8ca 1010 	str.w	r1, [sl, #16]
 800805c:	68f1      	ldr	r1, [r6, #12]
 800805e:	f8ca 1014 	str.w	r1, [sl, #20]
 8008062:	2a24      	cmp	r2, #36	; 0x24
 8008064:	d00f      	beq.n	8008086 <_realloc_r+0x396>
 8008066:	3610      	adds	r6, #16
 8008068:	f10a 0218 	add.w	r2, sl, #24
 800806c:	e6d5      	b.n	8007e1a <_realloc_r+0x12a>
 800806e:	6933      	ldr	r3, [r6, #16]
 8008070:	f8ca 3018 	str.w	r3, [sl, #24]
 8008074:	6973      	ldr	r3, [r6, #20]
 8008076:	f8ca 301c 	str.w	r3, [sl, #28]
 800807a:	3618      	adds	r6, #24
 800807c:	f10a 0320 	add.w	r3, sl, #32
 8008080:	e789      	b.n	8007f96 <_realloc_r+0x2a6>
 8008082:	463b      	mov	r3, r7
 8008084:	e760      	b.n	8007f48 <_realloc_r+0x258>
 8008086:	6932      	ldr	r2, [r6, #16]
 8008088:	f8ca 2018 	str.w	r2, [sl, #24]
 800808c:	6972      	ldr	r2, [r6, #20]
 800808e:	f8ca 201c 	str.w	r2, [sl, #28]
 8008092:	3618      	adds	r6, #24
 8008094:	f10a 0220 	add.w	r2, sl, #32
 8008098:	e6bf      	b.n	8007e1a <_realloc_r+0x12a>
 800809a:	4631      	mov	r1, r6
 800809c:	4638      	mov	r0, r7
 800809e:	f8cd c004 	str.w	ip, [sp, #4]
 80080a2:	f7ff f8f5 	bl	8007290 <memmove>
 80080a6:	f8dd c004 	ldr.w	ip, [sp, #4]
 80080aa:	e753      	b.n	8007f54 <_realloc_r+0x264>
 80080ac:	68b3      	ldr	r3, [r6, #8]
 80080ae:	f8ca 3010 	str.w	r3, [sl, #16]
 80080b2:	68f3      	ldr	r3, [r6, #12]
 80080b4:	f8ca 3014 	str.w	r3, [sl, #20]
 80080b8:	2a24      	cmp	r2, #36	; 0x24
 80080ba:	d003      	beq.n	80080c4 <_realloc_r+0x3d4>
 80080bc:	3610      	adds	r6, #16
 80080be:	f10a 0318 	add.w	r3, sl, #24
 80080c2:	e741      	b.n	8007f48 <_realloc_r+0x258>
 80080c4:	6933      	ldr	r3, [r6, #16]
 80080c6:	f8ca 3018 	str.w	r3, [sl, #24]
 80080ca:	6973      	ldr	r3, [r6, #20]
 80080cc:	f8ca 301c 	str.w	r3, [sl, #28]
 80080d0:	3618      	adds	r6, #24
 80080d2:	f10a 0320 	add.w	r3, sl, #32
 80080d6:	e737      	b.n	8007f48 <_realloc_r+0x258>
 80080d8:	20000550 	.word	0x20000550

080080dc <__fpclassifyd>:
 80080dc:	ec53 2b10 	vmov	r2, r3, d0
 80080e0:	b410      	push	{r4}
 80080e2:	f033 4400 	bics.w	r4, r3, #2147483648	; 0x80000000
 80080e6:	d008      	beq.n	80080fa <__fpclassifyd+0x1e>
 80080e8:	4911      	ldr	r1, [pc, #68]	; (8008130 <__fpclassifyd+0x54>)
 80080ea:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 80080ee:	4288      	cmp	r0, r1
 80080f0:	d808      	bhi.n	8008104 <__fpclassifyd+0x28>
 80080f2:	2004      	movs	r0, #4
 80080f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	b91a      	cbnz	r2, 8008104 <__fpclassifyd+0x28>
 80080fc:	2002      	movs	r0, #2
 80080fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8008108:	4909      	ldr	r1, [pc, #36]	; (8008130 <__fpclassifyd+0x54>)
 800810a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800810e:	428b      	cmp	r3, r1
 8008110:	d9ef      	bls.n	80080f2 <__fpclassifyd+0x16>
 8008112:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008116:	d201      	bcs.n	800811c <__fpclassifyd+0x40>
 8008118:	2003      	movs	r0, #3
 800811a:	e7eb      	b.n	80080f4 <__fpclassifyd+0x18>
 800811c:	4b05      	ldr	r3, [pc, #20]	; (8008134 <__fpclassifyd+0x58>)
 800811e:	429c      	cmp	r4, r3
 8008120:	d001      	beq.n	8008126 <__fpclassifyd+0x4a>
 8008122:	2000      	movs	r0, #0
 8008124:	e7e6      	b.n	80080f4 <__fpclassifyd+0x18>
 8008126:	fab2 f082 	clz	r0, r2
 800812a:	0940      	lsrs	r0, r0, #5
 800812c:	e7e2      	b.n	80080f4 <__fpclassifyd+0x18>
 800812e:	bf00      	nop
 8008130:	7fdfffff 	.word	0x7fdfffff
 8008134:	7ff00000 	.word	0x7ff00000

08008138 <_sbrk_r>:
 8008138:	b538      	push	{r3, r4, r5, lr}
 800813a:	4c07      	ldr	r4, [pc, #28]	; (8008158 <_sbrk_r+0x20>)
 800813c:	2300      	movs	r3, #0
 800813e:	4605      	mov	r5, r0
 8008140:	4608      	mov	r0, r1
 8008142:	6023      	str	r3, [r4, #0]
 8008144:	f7f9 fa84 	bl	8001650 <_sbrk>
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	d000      	beq.n	800814e <_sbrk_r+0x16>
 800814c:	bd38      	pop	{r3, r4, r5, pc}
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d0fb      	beq.n	800814c <_sbrk_r+0x14>
 8008154:	602b      	str	r3, [r5, #0]
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	20010318 	.word	0x20010318

0800815c <__sread>:
 800815c:	b510      	push	{r4, lr}
 800815e:	460c      	mov	r4, r1
 8008160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008164:	f001 fa58 	bl	8009618 <_read_r>
 8008168:	2800      	cmp	r0, #0
 800816a:	db03      	blt.n	8008174 <__sread+0x18>
 800816c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800816e:	4403      	add	r3, r0
 8008170:	6523      	str	r3, [r4, #80]	; 0x50
 8008172:	bd10      	pop	{r4, pc}
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800817a:	81a3      	strh	r3, [r4, #12]
 800817c:	bd10      	pop	{r4, pc}
 800817e:	bf00      	nop

08008180 <__seofread>:
 8008180:	2000      	movs	r0, #0
 8008182:	4770      	bx	lr

08008184 <__swrite>:
 8008184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008188:	4616      	mov	r6, r2
 800818a:	898a      	ldrh	r2, [r1, #12]
 800818c:	461d      	mov	r5, r3
 800818e:	05d3      	lsls	r3, r2, #23
 8008190:	460c      	mov	r4, r1
 8008192:	4607      	mov	r7, r0
 8008194:	d506      	bpl.n	80081a4 <__swrite+0x20>
 8008196:	2200      	movs	r2, #0
 8008198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800819c:	2302      	movs	r3, #2
 800819e:	f001 fa27 	bl	80095f0 <_lseek_r>
 80081a2:	89a2      	ldrh	r2, [r4, #12]
 80081a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081ac:	81a2      	strh	r2, [r4, #12]
 80081ae:	4638      	mov	r0, r7
 80081b0:	4632      	mov	r2, r6
 80081b2:	462b      	mov	r3, r5
 80081b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081b8:	f001 b884 	b.w	80092c4 <_write_r>

080081bc <__sseek>:
 80081bc:	b510      	push	{r4, lr}
 80081be:	460c      	mov	r4, r1
 80081c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c4:	f001 fa14 	bl	80095f0 <_lseek_r>
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	1c42      	adds	r2, r0, #1
 80081cc:	bf0e      	itee	eq
 80081ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80081d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80081d6:	6520      	strne	r0, [r4, #80]	; 0x50
 80081d8:	81a3      	strh	r3, [r4, #12]
 80081da:	bd10      	pop	{r4, pc}

080081dc <__sclose>:
 80081dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e0:	f001 b906 	b.w	80093f0 <_close_r>
	...
 8008200:	eba2 0003 	sub.w	r0, r2, r3
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop

08008208 <strcmp>:
 8008208:	7802      	ldrb	r2, [r0, #0]
 800820a:	780b      	ldrb	r3, [r1, #0]
 800820c:	2a01      	cmp	r2, #1
 800820e:	bf28      	it	cs
 8008210:	429a      	cmpcs	r2, r3
 8008212:	d1f5      	bne.n	8008200 <__sclose+0x24>
 8008214:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8008218:	ea40 0401 	orr.w	r4, r0, r1
 800821c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008220:	f06f 0c00 	mvn.w	ip, #0
 8008224:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8008228:	b312      	cbz	r2, 8008270 <strcmp+0x68>
 800822a:	ea80 0401 	eor.w	r4, r0, r1
 800822e:	f014 0f07 	tst.w	r4, #7
 8008232:	d16a      	bne.n	800830a <strcmp+0x102>
 8008234:	f000 0407 	and.w	r4, r0, #7
 8008238:	f020 0007 	bic.w	r0, r0, #7
 800823c:	f004 0503 	and.w	r5, r4, #3
 8008240:	f021 0107 	bic.w	r1, r1, #7
 8008244:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8008248:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800824c:	f014 0f04 	tst.w	r4, #4
 8008250:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8008254:	fa0c f405 	lsl.w	r4, ip, r5
 8008258:	ea62 0204 	orn	r2, r2, r4
 800825c:	ea66 0604 	orn	r6, r6, r4
 8008260:	d00a      	beq.n	8008278 <strcmp+0x70>
 8008262:	ea63 0304 	orn	r3, r3, r4
 8008266:	4662      	mov	r2, ip
 8008268:	ea67 0704 	orn	r7, r7, r4
 800826c:	4666      	mov	r6, ip
 800826e:	e003      	b.n	8008278 <strcmp+0x70>
 8008270:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8008274:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8008278:	fa82 f54c 	uadd8	r5, r2, ip
 800827c:	ea82 0406 	eor.w	r4, r2, r6
 8008280:	faa4 f48c 	sel	r4, r4, ip
 8008284:	bb6c      	cbnz	r4, 80082e2 <strcmp+0xda>
 8008286:	fa83 f54c 	uadd8	r5, r3, ip
 800828a:	ea83 0507 	eor.w	r5, r3, r7
 800828e:	faa5 f58c 	sel	r5, r5, ip
 8008292:	b995      	cbnz	r5, 80082ba <strcmp+0xb2>
 8008294:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8008298:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800829c:	fa82 f54c 	uadd8	r5, r2, ip
 80082a0:	ea82 0406 	eor.w	r4, r2, r6
 80082a4:	faa4 f48c 	sel	r4, r4, ip
 80082a8:	fa83 f54c 	uadd8	r5, r3, ip
 80082ac:	ea83 0507 	eor.w	r5, r3, r7
 80082b0:	faa5 f58c 	sel	r5, r5, ip
 80082b4:	4325      	orrs	r5, r4
 80082b6:	d0db      	beq.n	8008270 <strcmp+0x68>
 80082b8:	b99c      	cbnz	r4, 80082e2 <strcmp+0xda>
 80082ba:	ba2d      	rev	r5, r5
 80082bc:	fab5 f485 	clz	r4, r5
 80082c0:	f024 0407 	bic.w	r4, r4, #7
 80082c4:	fa27 f104 	lsr.w	r1, r7, r4
 80082c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80082cc:	fa23 f304 	lsr.w	r3, r3, r4
 80082d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80082d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80082d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80082dc:	eba0 0001 	sub.w	r0, r0, r1
 80082e0:	4770      	bx	lr
 80082e2:	ba24      	rev	r4, r4
 80082e4:	fab4 f484 	clz	r4, r4
 80082e8:	f024 0407 	bic.w	r4, r4, #7
 80082ec:	fa26 f104 	lsr.w	r1, r6, r4
 80082f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80082f4:	fa22 f204 	lsr.w	r2, r2, r4
 80082f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80082fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008300:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8008304:	eba0 0001 	sub.w	r0, r0, r1
 8008308:	4770      	bx	lr
 800830a:	f014 0f03 	tst.w	r4, #3
 800830e:	d13c      	bne.n	800838a <strcmp+0x182>
 8008310:	f010 0403 	ands.w	r4, r0, #3
 8008314:	d128      	bne.n	8008368 <strcmp+0x160>
 8008316:	f850 2b08 	ldr.w	r2, [r0], #8
 800831a:	f851 3b08 	ldr.w	r3, [r1], #8
 800831e:	fa82 f54c 	uadd8	r5, r2, ip
 8008322:	ea82 0503 	eor.w	r5, r2, r3
 8008326:	faa5 f58c 	sel	r5, r5, ip
 800832a:	b95d      	cbnz	r5, 8008344 <strcmp+0x13c>
 800832c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008334:	fa82 f54c 	uadd8	r5, r2, ip
 8008338:	ea82 0503 	eor.w	r5, r2, r3
 800833c:	faa5 f58c 	sel	r5, r5, ip
 8008340:	2d00      	cmp	r5, #0
 8008342:	d0e8      	beq.n	8008316 <strcmp+0x10e>
 8008344:	ba2d      	rev	r5, r5
 8008346:	fab5 f485 	clz	r4, r5
 800834a:	f024 0407 	bic.w	r4, r4, #7
 800834e:	fa23 f104 	lsr.w	r1, r3, r4
 8008352:	fa22 f204 	lsr.w	r2, r2, r4
 8008356:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800835a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800835e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8008362:	eba0 0001 	sub.w	r0, r0, r1
 8008366:	4770      	bx	lr
 8008368:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800836c:	f020 0003 	bic.w	r0, r0, #3
 8008370:	f850 2b08 	ldr.w	r2, [r0], #8
 8008374:	f021 0103 	bic.w	r1, r1, #3
 8008378:	f851 3b08 	ldr.w	r3, [r1], #8
 800837c:	fa0c f404 	lsl.w	r4, ip, r4
 8008380:	ea62 0204 	orn	r2, r2, r4
 8008384:	ea63 0304 	orn	r3, r3, r4
 8008388:	e7c9      	b.n	800831e <strcmp+0x116>
 800838a:	f010 0403 	ands.w	r4, r0, #3
 800838e:	d01a      	beq.n	80083c6 <strcmp+0x1be>
 8008390:	eba1 0104 	sub.w	r1, r1, r4
 8008394:	f020 0003 	bic.w	r0, r0, #3
 8008398:	07e4      	lsls	r4, r4, #31
 800839a:	f850 2b04 	ldr.w	r2, [r0], #4
 800839e:	d006      	beq.n	80083ae <strcmp+0x1a6>
 80083a0:	d20f      	bcs.n	80083c2 <strcmp+0x1ba>
 80083a2:	788b      	ldrb	r3, [r1, #2]
 80083a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 80083a8:	1ae4      	subs	r4, r4, r3
 80083aa:	d106      	bne.n	80083ba <strcmp+0x1b2>
 80083ac:	b12b      	cbz	r3, 80083ba <strcmp+0x1b2>
 80083ae:	78cb      	ldrb	r3, [r1, #3]
 80083b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 80083b4:	1ae4      	subs	r4, r4, r3
 80083b6:	d100      	bne.n	80083ba <strcmp+0x1b2>
 80083b8:	b91b      	cbnz	r3, 80083c2 <strcmp+0x1ba>
 80083ba:	4620      	mov	r0, r4
 80083bc:	f85d 4b10 	ldr.w	r4, [sp], #16
 80083c0:	4770      	bx	lr
 80083c2:	f101 0104 	add.w	r1, r1, #4
 80083c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80083ca:	07cc      	lsls	r4, r1, #31
 80083cc:	f021 0103 	bic.w	r1, r1, #3
 80083d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80083d4:	d848      	bhi.n	8008468 <strcmp+0x260>
 80083d6:	d224      	bcs.n	8008422 <strcmp+0x21a>
 80083d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 80083dc:	fa82 f54c 	uadd8	r5, r2, ip
 80083e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 80083e4:	faa5 f58c 	sel	r5, r5, ip
 80083e8:	d10a      	bne.n	8008400 <strcmp+0x1f8>
 80083ea:	b965      	cbnz	r5, 8008406 <strcmp+0x1fe>
 80083ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80083f0:	ea84 0402 	eor.w	r4, r4, r2
 80083f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 80083f8:	d10e      	bne.n	8008418 <strcmp+0x210>
 80083fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80083fe:	e7eb      	b.n	80083d8 <strcmp+0x1d0>
 8008400:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8008404:	e055      	b.n	80084b2 <strcmp+0x2aa>
 8008406:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800840a:	d14d      	bne.n	80084a8 <strcmp+0x2a0>
 800840c:	7808      	ldrb	r0, [r1, #0]
 800840e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8008412:	f1c0 0000 	rsb	r0, r0, #0
 8008416:	4770      	bx	lr
 8008418:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800841c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8008420:	e047      	b.n	80084b2 <strcmp+0x2aa>
 8008422:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8008426:	fa82 f54c 	uadd8	r5, r2, ip
 800842a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800842e:	faa5 f58c 	sel	r5, r5, ip
 8008432:	d10a      	bne.n	800844a <strcmp+0x242>
 8008434:	b965      	cbnz	r5, 8008450 <strcmp+0x248>
 8008436:	f851 3b04 	ldr.w	r3, [r1], #4
 800843a:	ea84 0402 	eor.w	r4, r4, r2
 800843e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8008442:	d10c      	bne.n	800845e <strcmp+0x256>
 8008444:	f850 2b04 	ldr.w	r2, [r0], #4
 8008448:	e7eb      	b.n	8008422 <strcmp+0x21a>
 800844a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800844e:	e030      	b.n	80084b2 <strcmp+0x2aa>
 8008450:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8008454:	d128      	bne.n	80084a8 <strcmp+0x2a0>
 8008456:	880b      	ldrh	r3, [r1, #0]
 8008458:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800845c:	e029      	b.n	80084b2 <strcmp+0x2aa>
 800845e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8008462:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8008466:	e024      	b.n	80084b2 <strcmp+0x2aa>
 8008468:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800846c:	fa82 f54c 	uadd8	r5, r2, ip
 8008470:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8008474:	faa5 f58c 	sel	r5, r5, ip
 8008478:	d10a      	bne.n	8008490 <strcmp+0x288>
 800847a:	b965      	cbnz	r5, 8008496 <strcmp+0x28e>
 800847c:	f851 3b04 	ldr.w	r3, [r1], #4
 8008480:	ea84 0402 	eor.w	r4, r4, r2
 8008484:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8008488:	d109      	bne.n	800849e <strcmp+0x296>
 800848a:	f850 2b04 	ldr.w	r2, [r0], #4
 800848e:	e7eb      	b.n	8008468 <strcmp+0x260>
 8008490:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8008494:	e00d      	b.n	80084b2 <strcmp+0x2aa>
 8008496:	f015 0fff 	tst.w	r5, #255	; 0xff
 800849a:	d105      	bne.n	80084a8 <strcmp+0x2a0>
 800849c:	680b      	ldr	r3, [r1, #0]
 800849e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80084a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80084a6:	e004      	b.n	80084b2 <strcmp+0x2aa>
 80084a8:	f04f 0000 	mov.w	r0, #0
 80084ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80084b0:	4770      	bx	lr
 80084b2:	ba12      	rev	r2, r2
 80084b4:	ba1b      	rev	r3, r3
 80084b6:	fa82 f44c 	uadd8	r4, r2, ip
 80084ba:	ea82 0403 	eor.w	r4, r2, r3
 80084be:	faa4 f58c 	sel	r5, r4, ip
 80084c2:	fab5 f485 	clz	r4, r5
 80084c6:	fa02 f204 	lsl.w	r2, r2, r4
 80084ca:	fa03 f304 	lsl.w	r3, r3, r4
 80084ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
 80084d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80084d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 80084da:	4770      	bx	lr

080084dc <__sprint_r.part.0>:
 80084dc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80084de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e2:	049c      	lsls	r4, r3, #18
 80084e4:	460f      	mov	r7, r1
 80084e6:	4692      	mov	sl, r2
 80084e8:	d52b      	bpl.n	8008542 <__sprint_r.part.0+0x66>
 80084ea:	6893      	ldr	r3, [r2, #8]
 80084ec:	6812      	ldr	r2, [r2, #0]
 80084ee:	b333      	cbz	r3, 800853e <__sprint_r.part.0+0x62>
 80084f0:	4680      	mov	r8, r0
 80084f2:	f102 0908 	add.w	r9, r2, #8
 80084f6:	e919 0060 	ldmdb	r9, {r5, r6}
 80084fa:	08b6      	lsrs	r6, r6, #2
 80084fc:	d017      	beq.n	800852e <__sprint_r.part.0+0x52>
 80084fe:	3d04      	subs	r5, #4
 8008500:	2400      	movs	r4, #0
 8008502:	e001      	b.n	8008508 <__sprint_r.part.0+0x2c>
 8008504:	42a6      	cmp	r6, r4
 8008506:	d010      	beq.n	800852a <__sprint_r.part.0+0x4e>
 8008508:	4640      	mov	r0, r8
 800850a:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800850e:	463a      	mov	r2, r7
 8008510:	f001 f822 	bl	8009558 <_fputwc_r>
 8008514:	1c43      	adds	r3, r0, #1
 8008516:	f104 0401 	add.w	r4, r4, #1
 800851a:	d1f3      	bne.n	8008504 <__sprint_r.part.0+0x28>
 800851c:	2300      	movs	r3, #0
 800851e:	f8ca 3008 	str.w	r3, [sl, #8]
 8008522:	f8ca 3004 	str.w	r3, [sl, #4]
 8008526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800852a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800852e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 8008532:	f8ca 3008 	str.w	r3, [sl, #8]
 8008536:	f109 0908 	add.w	r9, r9, #8
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1db      	bne.n	80084f6 <__sprint_r.part.0+0x1a>
 800853e:	2000      	movs	r0, #0
 8008540:	e7ec      	b.n	800851c <__sprint_r.part.0+0x40>
 8008542:	f7fe f93b 	bl	80067bc <__sfvwrite_r>
 8008546:	2300      	movs	r3, #0
 8008548:	f8ca 3008 	str.w	r3, [sl, #8]
 800854c:	f8ca 3004 	str.w	r3, [sl, #4]
 8008550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008554 <__sprint_r>:
 8008554:	6893      	ldr	r3, [r2, #8]
 8008556:	b410      	push	{r4}
 8008558:	b11b      	cbz	r3, 8008562 <__sprint_r+0xe>
 800855a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800855e:	f7ff bfbd 	b.w	80084dc <__sprint_r.part.0>
 8008562:	4618      	mov	r0, r3
 8008564:	6053      	str	r3, [r2, #4]
 8008566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800856a:	4770      	bx	lr

0800856c <_vfiprintf_r>:
 800856c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008570:	b0ab      	sub	sp, #172	; 0xac
 8008572:	461c      	mov	r4, r3
 8008574:	9100      	str	r1, [sp, #0]
 8008576:	4693      	mov	fp, r2
 8008578:	9304      	str	r3, [sp, #16]
 800857a:	9001      	str	r0, [sp, #4]
 800857c:	b118      	cbz	r0, 8008586 <_vfiprintf_r+0x1a>
 800857e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008580:	2b00      	cmp	r3, #0
 8008582:	f000 80e3 	beq.w	800874c <_vfiprintf_r+0x1e0>
 8008586:	9b00      	ldr	r3, [sp, #0]
 8008588:	8999      	ldrh	r1, [r3, #12]
 800858a:	b28a      	uxth	r2, r1
 800858c:	0490      	lsls	r0, r2, #18
 800858e:	d408      	bmi.n	80085a2 <_vfiprintf_r+0x36>
 8008590:	4618      	mov	r0, r3
 8008592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008594:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 8008598:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800859c:	8182      	strh	r2, [r0, #12]
 800859e:	6643      	str	r3, [r0, #100]	; 0x64
 80085a0:	b292      	uxth	r2, r2
 80085a2:	0711      	lsls	r1, r2, #28
 80085a4:	f140 80b2 	bpl.w	800870c <_vfiprintf_r+0x1a0>
 80085a8:	9b00      	ldr	r3, [sp, #0]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 80ad 	beq.w	800870c <_vfiprintf_r+0x1a0>
 80085b2:	f002 021a 	and.w	r2, r2, #26
 80085b6:	2a0a      	cmp	r2, #10
 80085b8:	f000 80b4 	beq.w	8008724 <_vfiprintf_r+0x1b8>
 80085bc:	2300      	movs	r3, #0
 80085be:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80085c2:	9309      	str	r3, [sp, #36]	; 0x24
 80085c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80085c6:	930e      	str	r3, [sp, #56]	; 0x38
 80085c8:	9302      	str	r3, [sp, #8]
 80085ca:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80085ce:	4654      	mov	r4, sl
 80085d0:	f89b 3000 	ldrb.w	r3, [fp]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 84a3 	beq.w	8008f20 <_vfiprintf_r+0x9b4>
 80085da:	2b25      	cmp	r3, #37	; 0x25
 80085dc:	f000 84a0 	beq.w	8008f20 <_vfiprintf_r+0x9b4>
 80085e0:	465a      	mov	r2, fp
 80085e2:	e001      	b.n	80085e8 <_vfiprintf_r+0x7c>
 80085e4:	2b25      	cmp	r3, #37	; 0x25
 80085e6:	d003      	beq.n	80085f0 <_vfiprintf_r+0x84>
 80085e8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1f9      	bne.n	80085e4 <_vfiprintf_r+0x78>
 80085f0:	ebcb 0602 	rsb	r6, fp, r2
 80085f4:	4615      	mov	r5, r2
 80085f6:	b196      	cbz	r6, 800861e <_vfiprintf_r+0xb2>
 80085f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80085fc:	f8c4 b000 	str.w	fp, [r4]
 8008600:	3301      	adds	r3, #1
 8008602:	4432      	add	r2, r6
 8008604:	2b07      	cmp	r3, #7
 8008606:	6066      	str	r6, [r4, #4]
 8008608:	920f      	str	r2, [sp, #60]	; 0x3c
 800860a:	930e      	str	r3, [sp, #56]	; 0x38
 800860c:	dd79      	ble.n	8008702 <_vfiprintf_r+0x196>
 800860e:	2a00      	cmp	r2, #0
 8008610:	f040 84af 	bne.w	8008f72 <_vfiprintf_r+0xa06>
 8008614:	9b02      	ldr	r3, [sp, #8]
 8008616:	920e      	str	r2, [sp, #56]	; 0x38
 8008618:	4433      	add	r3, r6
 800861a:	4654      	mov	r4, sl
 800861c:	9302      	str	r3, [sp, #8]
 800861e:	782b      	ldrb	r3, [r5, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 8360 	beq.w	8008ce6 <_vfiprintf_r+0x77a>
 8008626:	2100      	movs	r1, #0
 8008628:	f04f 0300 	mov.w	r3, #0
 800862c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008630:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8008634:	1c68      	adds	r0, r5, #1
 8008636:	786b      	ldrb	r3, [r5, #1]
 8008638:	4688      	mov	r8, r1
 800863a:	460d      	mov	r5, r1
 800863c:	4666      	mov	r6, ip
 800863e:	f100 0b01 	add.w	fp, r0, #1
 8008642:	f1a3 0220 	sub.w	r2, r3, #32
 8008646:	2a58      	cmp	r2, #88	; 0x58
 8008648:	f200 82ab 	bhi.w	8008ba2 <_vfiprintf_r+0x636>
 800864c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008650:	02a9029b 	.word	0x02a9029b
 8008654:	02a302a9 	.word	0x02a302a9
 8008658:	02a902a9 	.word	0x02a902a9
 800865c:	02a902a9 	.word	0x02a902a9
 8008660:	02a902a9 	.word	0x02a902a9
 8008664:	02620255 	.word	0x02620255
 8008668:	010d02a9 	.word	0x010d02a9
 800866c:	02a9026e 	.word	0x02a9026e
 8008670:	012f0129 	.word	0x012f0129
 8008674:	012f012f 	.word	0x012f012f
 8008678:	012f012f 	.word	0x012f012f
 800867c:	012f012f 	.word	0x012f012f
 8008680:	012f012f 	.word	0x012f012f
 8008684:	02a902a9 	.word	0x02a902a9
 8008688:	02a902a9 	.word	0x02a902a9
 800868c:	02a902a9 	.word	0x02a902a9
 8008690:	02a902a9 	.word	0x02a902a9
 8008694:	02a902a9 	.word	0x02a902a9
 8008698:	02a9013d 	.word	0x02a9013d
 800869c:	02a902a9 	.word	0x02a902a9
 80086a0:	02a902a9 	.word	0x02a902a9
 80086a4:	02a902a9 	.word	0x02a902a9
 80086a8:	02a902a9 	.word	0x02a902a9
 80086ac:	017402a9 	.word	0x017402a9
 80086b0:	02a902a9 	.word	0x02a902a9
 80086b4:	02a902a9 	.word	0x02a902a9
 80086b8:	018b02a9 	.word	0x018b02a9
 80086bc:	02a902a9 	.word	0x02a902a9
 80086c0:	02a901a3 	.word	0x02a901a3
 80086c4:	02a902a9 	.word	0x02a902a9
 80086c8:	02a902a9 	.word	0x02a902a9
 80086cc:	02a902a9 	.word	0x02a902a9
 80086d0:	02a902a9 	.word	0x02a902a9
 80086d4:	01c702a9 	.word	0x01c702a9
 80086d8:	02a901da 	.word	0x02a901da
 80086dc:	02a902a9 	.word	0x02a902a9
 80086e0:	01da0123 	.word	0x01da0123
 80086e4:	02a902a9 	.word	0x02a902a9
 80086e8:	02a9024c 	.word	0x02a9024c
 80086ec:	0113028a 	.word	0x0113028a
 80086f0:	020701f3 	.word	0x020701f3
 80086f4:	020d02a9 	.word	0x020d02a9
 80086f8:	008102a9 	.word	0x008102a9
 80086fc:	02a902a9 	.word	0x02a902a9
 8008700:	0233      	.short	0x0233
 8008702:	3408      	adds	r4, #8
 8008704:	9b02      	ldr	r3, [sp, #8]
 8008706:	4433      	add	r3, r6
 8008708:	9302      	str	r3, [sp, #8]
 800870a:	e788      	b.n	800861e <_vfiprintf_r+0xb2>
 800870c:	9801      	ldr	r0, [sp, #4]
 800870e:	9900      	ldr	r1, [sp, #0]
 8008710:	f7fc fc78 	bl	8005004 <__swsetup_r>
 8008714:	b9a8      	cbnz	r0, 8008742 <_vfiprintf_r+0x1d6>
 8008716:	9b00      	ldr	r3, [sp, #0]
 8008718:	899a      	ldrh	r2, [r3, #12]
 800871a:	f002 021a 	and.w	r2, r2, #26
 800871e:	2a0a      	cmp	r2, #10
 8008720:	f47f af4c 	bne.w	80085bc <_vfiprintf_r+0x50>
 8008724:	9b00      	ldr	r3, [sp, #0]
 8008726:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800872a:	2b00      	cmp	r3, #0
 800872c:	f6ff af46 	blt.w	80085bc <_vfiprintf_r+0x50>
 8008730:	9801      	ldr	r0, [sp, #4]
 8008732:	9900      	ldr	r1, [sp, #0]
 8008734:	465a      	mov	r2, fp
 8008736:	4623      	mov	r3, r4
 8008738:	f000 fd2c 	bl	8009194 <__sbprintf>
 800873c:	b02b      	add	sp, #172	; 0xac
 800873e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008746:	b02b      	add	sp, #172	; 0xac
 8008748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874c:	f7fd fed8 	bl	8006500 <__sinit>
 8008750:	e719      	b.n	8008586 <_vfiprintf_r+0x1a>
 8008752:	f018 0f20 	tst.w	r8, #32
 8008756:	9503      	str	r5, [sp, #12]
 8008758:	46b4      	mov	ip, r6
 800875a:	f000 810c 	beq.w	8008976 <_vfiprintf_r+0x40a>
 800875e:	9b04      	ldr	r3, [sp, #16]
 8008760:	3307      	adds	r3, #7
 8008762:	f023 0307 	bic.w	r3, r3, #7
 8008766:	f103 0208 	add.w	r2, r3, #8
 800876a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800876e:	9204      	str	r2, [sp, #16]
 8008770:	2301      	movs	r3, #1
 8008772:	f04f 0200 	mov.w	r2, #0
 8008776:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 800877a:	46e1      	mov	r9, ip
 800877c:	2500      	movs	r5, #0
 800877e:	f1bc 0f00 	cmp.w	ip, #0
 8008782:	bfa8      	it	ge
 8008784:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
 8008788:	ea56 0207 	orrs.w	r2, r6, r7
 800878c:	f040 80c4 	bne.w	8008918 <_vfiprintf_r+0x3ac>
 8008790:	f1bc 0f00 	cmp.w	ip, #0
 8008794:	f000 8381 	beq.w	8008e9a <_vfiprintf_r+0x92e>
 8008798:	2b01      	cmp	r3, #1
 800879a:	f000 80c5 	beq.w	8008928 <_vfiprintf_r+0x3bc>
 800879e:	2b02      	cmp	r3, #2
 80087a0:	f000 8387 	beq.w	8008eb2 <_vfiprintf_r+0x946>
 80087a4:	4651      	mov	r1, sl
 80087a6:	08f2      	lsrs	r2, r6, #3
 80087a8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80087ac:	08f8      	lsrs	r0, r7, #3
 80087ae:	f006 0307 	and.w	r3, r6, #7
 80087b2:	4607      	mov	r7, r0
 80087b4:	4616      	mov	r6, r2
 80087b6:	3330      	adds	r3, #48	; 0x30
 80087b8:	ea56 0207 	orrs.w	r2, r6, r7
 80087bc:	f801 3d01 	strb.w	r3, [r1, #-1]!
 80087c0:	d1f1      	bne.n	80087a6 <_vfiprintf_r+0x23a>
 80087c2:	f018 0f01 	tst.w	r8, #1
 80087c6:	9107      	str	r1, [sp, #28]
 80087c8:	f040 83fc 	bne.w	8008fc4 <_vfiprintf_r+0xa58>
 80087cc:	ebc1 090a 	rsb	r9, r1, sl
 80087d0:	45e1      	cmp	r9, ip
 80087d2:	464e      	mov	r6, r9
 80087d4:	bfb8      	it	lt
 80087d6:	4666      	movlt	r6, ip
 80087d8:	b105      	cbz	r5, 80087dc <_vfiprintf_r+0x270>
 80087da:	3601      	adds	r6, #1
 80087dc:	f018 0302 	ands.w	r3, r8, #2
 80087e0:	9305      	str	r3, [sp, #20]
 80087e2:	bf18      	it	ne
 80087e4:	3602      	addne	r6, #2
 80087e6:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 80087ea:	9306      	str	r3, [sp, #24]
 80087ec:	f040 81fa 	bne.w	8008be4 <_vfiprintf_r+0x678>
 80087f0:	9b03      	ldr	r3, [sp, #12]
 80087f2:	1b9d      	subs	r5, r3, r6
 80087f4:	2d00      	cmp	r5, #0
 80087f6:	f340 81f5 	ble.w	8008be4 <_vfiprintf_r+0x678>
 80087fa:	2d10      	cmp	r5, #16
 80087fc:	f340 848c 	ble.w	8009118 <_vfiprintf_r+0xbac>
 8008800:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8008804:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008806:	4fc6      	ldr	r7, [pc, #792]	; (8008b20 <_vfiprintf_r+0x5b4>)
 8008808:	4620      	mov	r0, r4
 800880a:	2310      	movs	r3, #16
 800880c:	4664      	mov	r4, ip
 800880e:	4671      	mov	r1, lr
 8008810:	4684      	mov	ip, r0
 8008812:	e007      	b.n	8008824 <_vfiprintf_r+0x2b8>
 8008814:	f101 0e02 	add.w	lr, r1, #2
 8008818:	f10c 0c08 	add.w	ip, ip, #8
 800881c:	4601      	mov	r1, r0
 800881e:	3d10      	subs	r5, #16
 8008820:	2d10      	cmp	r5, #16
 8008822:	dd13      	ble.n	800884c <_vfiprintf_r+0x2e0>
 8008824:	1c48      	adds	r0, r1, #1
 8008826:	3210      	adds	r2, #16
 8008828:	2807      	cmp	r0, #7
 800882a:	920f      	str	r2, [sp, #60]	; 0x3c
 800882c:	f8cc 7000 	str.w	r7, [ip]
 8008830:	f8cc 3004 	str.w	r3, [ip, #4]
 8008834:	900e      	str	r0, [sp, #56]	; 0x38
 8008836:	dded      	ble.n	8008814 <_vfiprintf_r+0x2a8>
 8008838:	2a00      	cmp	r2, #0
 800883a:	f040 81c3 	bne.w	8008bc4 <_vfiprintf_r+0x658>
 800883e:	3d10      	subs	r5, #16
 8008840:	2d10      	cmp	r5, #16
 8008842:	4611      	mov	r1, r2
 8008844:	f04f 0e01 	mov.w	lr, #1
 8008848:	46d4      	mov	ip, sl
 800884a:	dceb      	bgt.n	8008824 <_vfiprintf_r+0x2b8>
 800884c:	4663      	mov	r3, ip
 800884e:	4671      	mov	r1, lr
 8008850:	46a4      	mov	ip, r4
 8008852:	461c      	mov	r4, r3
 8008854:	442a      	add	r2, r5
 8008856:	2907      	cmp	r1, #7
 8008858:	920f      	str	r2, [sp, #60]	; 0x3c
 800885a:	6027      	str	r7, [r4, #0]
 800885c:	6065      	str	r5, [r4, #4]
 800885e:	910e      	str	r1, [sp, #56]	; 0x38
 8008860:	f300 8346 	bgt.w	8008ef0 <_vfiprintf_r+0x984>
 8008864:	3408      	adds	r4, #8
 8008866:	1c48      	adds	r0, r1, #1
 8008868:	e1bf      	b.n	8008bea <_vfiprintf_r+0x67e>
 800886a:	4658      	mov	r0, fp
 800886c:	f048 0804 	orr.w	r8, r8, #4
 8008870:	f89b 3000 	ldrb.w	r3, [fp]
 8008874:	e6e3      	b.n	800863e <_vfiprintf_r+0xd2>
 8008876:	f018 0320 	ands.w	r3, r8, #32
 800887a:	9503      	str	r5, [sp, #12]
 800887c:	46b4      	mov	ip, r6
 800887e:	d062      	beq.n	8008946 <_vfiprintf_r+0x3da>
 8008880:	9b04      	ldr	r3, [sp, #16]
 8008882:	3307      	adds	r3, #7
 8008884:	f023 0307 	bic.w	r3, r3, #7
 8008888:	f103 0208 	add.w	r2, r3, #8
 800888c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008890:	9204      	str	r2, [sp, #16]
 8008892:	2300      	movs	r3, #0
 8008894:	e76d      	b.n	8008772 <_vfiprintf_r+0x206>
 8008896:	f048 0840 	orr.w	r8, r8, #64	; 0x40
 800889a:	f89b 3000 	ldrb.w	r3, [fp]
 800889e:	4658      	mov	r0, fp
 80088a0:	e6cd      	b.n	800863e <_vfiprintf_r+0xd2>
 80088a2:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 80088a6:	f89b 3000 	ldrb.w	r3, [fp]
 80088aa:	4658      	mov	r0, fp
 80088ac:	e6c7      	b.n	800863e <_vfiprintf_r+0xd2>
 80088ae:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80088b2:	2500      	movs	r5, #0
 80088b4:	f81b 3b01 	ldrb.w	r3, [fp], #1
 80088b8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80088bc:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 80088c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80088c4:	2a09      	cmp	r2, #9
 80088c6:	d9f5      	bls.n	80088b4 <_vfiprintf_r+0x348>
 80088c8:	e6bb      	b.n	8008642 <_vfiprintf_r+0xd6>
 80088ca:	f048 0810 	orr.w	r8, r8, #16
 80088ce:	f018 0f20 	tst.w	r8, #32
 80088d2:	9503      	str	r5, [sp, #12]
 80088d4:	46b4      	mov	ip, r6
 80088d6:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80088da:	f000 809b 	beq.w	8008a14 <_vfiprintf_r+0x4a8>
 80088de:	9904      	ldr	r1, [sp, #16]
 80088e0:	3107      	adds	r1, #7
 80088e2:	f021 0107 	bic.w	r1, r1, #7
 80088e6:	e9d1 2300 	ldrd	r2, r3, [r1]
 80088ea:	3108      	adds	r1, #8
 80088ec:	9104      	str	r1, [sp, #16]
 80088ee:	4616      	mov	r6, r2
 80088f0:	461f      	mov	r7, r3
 80088f2:	2a00      	cmp	r2, #0
 80088f4:	f173 0300 	sbcs.w	r3, r3, #0
 80088f8:	f2c0 83a6 	blt.w	8009048 <_vfiprintf_r+0xadc>
 80088fc:	f1bc 0f00 	cmp.w	ip, #0
 8008900:	bfa8      	it	ge
 8008902:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
 8008906:	ea56 0207 	orrs.w	r2, r6, r7
 800890a:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 800890e:	46e1      	mov	r9, ip
 8008910:	f04f 0301 	mov.w	r3, #1
 8008914:	f43f af3c 	beq.w	8008790 <_vfiprintf_r+0x224>
 8008918:	2b01      	cmp	r3, #1
 800891a:	f47f af40 	bne.w	800879e <_vfiprintf_r+0x232>
 800891e:	2f00      	cmp	r7, #0
 8008920:	bf08      	it	eq
 8008922:	2e0a      	cmpeq	r6, #10
 8008924:	f080 8334 	bcs.w	8008f90 <_vfiprintf_r+0xa24>
 8008928:	ab2a      	add	r3, sp, #168	; 0xa8
 800892a:	3630      	adds	r6, #48	; 0x30
 800892c:	f803 6d41 	strb.w	r6, [r3, #-65]!
 8008930:	ebc3 090a 	rsb	r9, r3, sl
 8008934:	9307      	str	r3, [sp, #28]
 8008936:	e74b      	b.n	80087d0 <_vfiprintf_r+0x264>
 8008938:	f048 0810 	orr.w	r8, r8, #16
 800893c:	f018 0320 	ands.w	r3, r8, #32
 8008940:	9503      	str	r5, [sp, #12]
 8008942:	46b4      	mov	ip, r6
 8008944:	d19c      	bne.n	8008880 <_vfiprintf_r+0x314>
 8008946:	f018 0210 	ands.w	r2, r8, #16
 800894a:	f040 82f7 	bne.w	8008f3c <_vfiprintf_r+0x9d0>
 800894e:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8008952:	f000 82f3 	beq.w	8008f3c <_vfiprintf_r+0x9d0>
 8008956:	9904      	ldr	r1, [sp, #16]
 8008958:	4613      	mov	r3, r2
 800895a:	460a      	mov	r2, r1
 800895c:	3204      	adds	r2, #4
 800895e:	880e      	ldrh	r6, [r1, #0]
 8008960:	9204      	str	r2, [sp, #16]
 8008962:	2700      	movs	r7, #0
 8008964:	e705      	b.n	8008772 <_vfiprintf_r+0x206>
 8008966:	f048 0810 	orr.w	r8, r8, #16
 800896a:	f018 0f20 	tst.w	r8, #32
 800896e:	9503      	str	r5, [sp, #12]
 8008970:	46b4      	mov	ip, r6
 8008972:	f47f aef4 	bne.w	800875e <_vfiprintf_r+0x1f2>
 8008976:	9a04      	ldr	r2, [sp, #16]
 8008978:	f018 0f10 	tst.w	r8, #16
 800897c:	4613      	mov	r3, r2
 800897e:	f040 82e4 	bne.w	8008f4a <_vfiprintf_r+0x9de>
 8008982:	f018 0f40 	tst.w	r8, #64	; 0x40
 8008986:	f000 82e0 	beq.w	8008f4a <_vfiprintf_r+0x9de>
 800898a:	8816      	ldrh	r6, [r2, #0]
 800898c:	3204      	adds	r2, #4
 800898e:	2700      	movs	r7, #0
 8008990:	2301      	movs	r3, #1
 8008992:	9204      	str	r2, [sp, #16]
 8008994:	e6ed      	b.n	8008772 <_vfiprintf_r+0x206>
 8008996:	4a63      	ldr	r2, [pc, #396]	; (8008b24 <_vfiprintf_r+0x5b8>)
 8008998:	9503      	str	r5, [sp, #12]
 800899a:	f018 0f20 	tst.w	r8, #32
 800899e:	46b4      	mov	ip, r6
 80089a0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80089a4:	9209      	str	r2, [sp, #36]	; 0x24
 80089a6:	f000 8090 	beq.w	8008aca <_vfiprintf_r+0x55e>
 80089aa:	9a04      	ldr	r2, [sp, #16]
 80089ac:	3207      	adds	r2, #7
 80089ae:	f022 0207 	bic.w	r2, r2, #7
 80089b2:	e9d2 6700 	ldrd	r6, r7, [r2]
 80089b6:	f102 0108 	add.w	r1, r2, #8
 80089ba:	9104      	str	r1, [sp, #16]
 80089bc:	f018 0f01 	tst.w	r8, #1
 80089c0:	f000 8290 	beq.w	8008ee4 <_vfiprintf_r+0x978>
 80089c4:	ea56 0207 	orrs.w	r2, r6, r7
 80089c8:	f000 828c 	beq.w	8008ee4 <_vfiprintf_r+0x978>
 80089cc:	2230      	movs	r2, #48	; 0x30
 80089ce:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 80089d2:	f048 0802 	orr.w	r8, r8, #2
 80089d6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 80089da:	2302      	movs	r3, #2
 80089dc:	e6c9      	b.n	8008772 <_vfiprintf_r+0x206>
 80089de:	9a04      	ldr	r2, [sp, #16]
 80089e0:	9503      	str	r5, [sp, #12]
 80089e2:	6813      	ldr	r3, [r2, #0]
 80089e4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80089e8:	4613      	mov	r3, r2
 80089ea:	3304      	adds	r3, #4
 80089ec:	2601      	movs	r6, #1
 80089ee:	f04f 0100 	mov.w	r1, #0
 80089f2:	9304      	str	r3, [sp, #16]
 80089f4:	ab10      	add	r3, sp, #64	; 0x40
 80089f6:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80089fa:	46b1      	mov	r9, r6
 80089fc:	9307      	str	r3, [sp, #28]
 80089fe:	f04f 0c00 	mov.w	ip, #0
 8008a02:	e6eb      	b.n	80087dc <_vfiprintf_r+0x270>
 8008a04:	f018 0f20 	tst.w	r8, #32
 8008a08:	9503      	str	r5, [sp, #12]
 8008a0a:	46b4      	mov	ip, r6
 8008a0c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8008a10:	f47f af65 	bne.w	80088de <_vfiprintf_r+0x372>
 8008a14:	f018 0f10 	tst.w	r8, #16
 8008a18:	f040 82a2 	bne.w	8008f60 <_vfiprintf_r+0x9f4>
 8008a1c:	f018 0f40 	tst.w	r8, #64	; 0x40
 8008a20:	f000 829e 	beq.w	8008f60 <_vfiprintf_r+0x9f4>
 8008a24:	9904      	ldr	r1, [sp, #16]
 8008a26:	f9b1 6000 	ldrsh.w	r6, [r1]
 8008a2a:	3104      	adds	r1, #4
 8008a2c:	17f7      	asrs	r7, r6, #31
 8008a2e:	4632      	mov	r2, r6
 8008a30:	463b      	mov	r3, r7
 8008a32:	9104      	str	r1, [sp, #16]
 8008a34:	e75d      	b.n	80088f2 <_vfiprintf_r+0x386>
 8008a36:	9904      	ldr	r1, [sp, #16]
 8008a38:	9503      	str	r5, [sp, #12]
 8008a3a:	2330      	movs	r3, #48	; 0x30
 8008a3c:	460a      	mov	r2, r1
 8008a3e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8008a42:	2378      	movs	r3, #120	; 0x78
 8008a44:	3204      	adds	r2, #4
 8008a46:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8008a4a:	4b37      	ldr	r3, [pc, #220]	; (8008b28 <_vfiprintf_r+0x5bc>)
 8008a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a4e:	46b4      	mov	ip, r6
 8008a50:	f048 0802 	orr.w	r8, r8, #2
 8008a54:	680e      	ldr	r6, [r1, #0]
 8008a56:	9204      	str	r2, [sp, #16]
 8008a58:	2700      	movs	r7, #0
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	e689      	b.n	8008772 <_vfiprintf_r+0x206>
 8008a5e:	f048 0820 	orr.w	r8, r8, #32
 8008a62:	f89b 3000 	ldrb.w	r3, [fp]
 8008a66:	4658      	mov	r0, fp
 8008a68:	e5e9      	b.n	800863e <_vfiprintf_r+0xd2>
 8008a6a:	9a04      	ldr	r2, [sp, #16]
 8008a6c:	9503      	str	r5, [sp, #12]
 8008a6e:	6813      	ldr	r3, [r2, #0]
 8008a70:	9307      	str	r3, [sp, #28]
 8008a72:	f04f 0100 	mov.w	r1, #0
 8008a76:	46b4      	mov	ip, r6
 8008a78:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8008a7c:	1d16      	adds	r6, r2, #4
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f000 8350 	beq.w	8009124 <_vfiprintf_r+0xbb8>
 8008a84:	f1bc 0f00 	cmp.w	ip, #0
 8008a88:	f2c0 832a 	blt.w	80090e0 <_vfiprintf_r+0xb74>
 8008a8c:	9d07      	ldr	r5, [sp, #28]
 8008a8e:	f8cd c010 	str.w	ip, [sp, #16]
 8008a92:	4662      	mov	r2, ip
 8008a94:	4628      	mov	r0, r5
 8008a96:	2100      	movs	r1, #0
 8008a98:	f7fe fbb0 	bl	80071fc <memchr>
 8008a9c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	f000 8350 	beq.w	8009146 <_vfiprintf_r+0xbda>
 8008aa6:	ebc5 0900 	rsb	r9, r5, r0
 8008aaa:	9604      	str	r6, [sp, #16]
 8008aac:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 8008ab0:	f04f 0c00 	mov.w	ip, #0
 8008ab4:	e68c      	b.n	80087d0 <_vfiprintf_r+0x264>
 8008ab6:	4a1c      	ldr	r2, [pc, #112]	; (8008b28 <_vfiprintf_r+0x5bc>)
 8008ab8:	9503      	str	r5, [sp, #12]
 8008aba:	f018 0f20 	tst.w	r8, #32
 8008abe:	46b4      	mov	ip, r6
 8008ac0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ac2:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8008ac6:	f47f af70 	bne.w	80089aa <_vfiprintf_r+0x43e>
 8008aca:	9904      	ldr	r1, [sp, #16]
 8008acc:	f018 0f10 	tst.w	r8, #16
 8008ad0:	460a      	mov	r2, r1
 8008ad2:	f040 8240 	bne.w	8008f56 <_vfiprintf_r+0x9ea>
 8008ad6:	f018 0f40 	tst.w	r8, #64	; 0x40
 8008ada:	f000 823c 	beq.w	8008f56 <_vfiprintf_r+0x9ea>
 8008ade:	3204      	adds	r2, #4
 8008ae0:	880e      	ldrh	r6, [r1, #0]
 8008ae2:	9204      	str	r2, [sp, #16]
 8008ae4:	2700      	movs	r7, #0
 8008ae6:	e769      	b.n	80089bc <_vfiprintf_r+0x450>
 8008ae8:	f89b 3000 	ldrb.w	r3, [fp]
 8008aec:	2b6c      	cmp	r3, #108	; 0x6c
 8008aee:	f000 82ea 	beq.w	80090c6 <_vfiprintf_r+0xb5a>
 8008af2:	f048 0810 	orr.w	r8, r8, #16
 8008af6:	4658      	mov	r0, fp
 8008af8:	e5a1      	b.n	800863e <_vfiprintf_r+0xd2>
 8008afa:	9a04      	ldr	r2, [sp, #16]
 8008afc:	6815      	ldr	r5, [r2, #0]
 8008afe:	4613      	mov	r3, r2
 8008b00:	2d00      	cmp	r5, #0
 8008b02:	f103 0304 	add.w	r3, r3, #4
 8008b06:	f2c0 82e6 	blt.w	80090d6 <_vfiprintf_r+0xb6a>
 8008b0a:	9304      	str	r3, [sp, #16]
 8008b0c:	f89b 3000 	ldrb.w	r3, [fp]
 8008b10:	4658      	mov	r0, fp
 8008b12:	e594      	b.n	800863e <_vfiprintf_r+0xd2>
 8008b14:	f89b 3000 	ldrb.w	r3, [fp]
 8008b18:	4658      	mov	r0, fp
 8008b1a:	212b      	movs	r1, #43	; 0x2b
 8008b1c:	e58f      	b.n	800863e <_vfiprintf_r+0xd2>
 8008b1e:	bf00      	nop
 8008b20:	0800af18 	.word	0x0800af18
 8008b24:	0800ad80 	.word	0x0800ad80
 8008b28:	0800ad94 	.word	0x0800ad94
 8008b2c:	f89b 3000 	ldrb.w	r3, [fp]
 8008b30:	2b2a      	cmp	r3, #42	; 0x2a
 8008b32:	f10b 0001 	add.w	r0, fp, #1
 8008b36:	f000 830f 	beq.w	8009158 <_vfiprintf_r+0xbec>
 8008b3a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008b3e:	2a09      	cmp	r2, #9
 8008b40:	4683      	mov	fp, r0
 8008b42:	f04f 0600 	mov.w	r6, #0
 8008b46:	f63f ad7c 	bhi.w	8008642 <_vfiprintf_r+0xd6>
 8008b4a:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8008b4e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8008b52:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 8008b56:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008b5a:	2a09      	cmp	r2, #9
 8008b5c:	d9f5      	bls.n	8008b4a <_vfiprintf_r+0x5de>
 8008b5e:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 8008b62:	e56e      	b.n	8008642 <_vfiprintf_r+0xd6>
 8008b64:	f018 0f20 	tst.w	r8, #32
 8008b68:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8008b6c:	f000 8283 	beq.w	8009076 <_vfiprintf_r+0xb0a>
 8008b70:	9a04      	ldr	r2, [sp, #16]
 8008b72:	9902      	ldr	r1, [sp, #8]
 8008b74:	6813      	ldr	r3, [r2, #0]
 8008b76:	17cf      	asrs	r7, r1, #31
 8008b78:	4608      	mov	r0, r1
 8008b7a:	3204      	adds	r2, #4
 8008b7c:	4639      	mov	r1, r7
 8008b7e:	9204      	str	r2, [sp, #16]
 8008b80:	e9c3 0100 	strd	r0, r1, [r3]
 8008b84:	e524      	b.n	80085d0 <_vfiprintf_r+0x64>
 8008b86:	4658      	mov	r0, fp
 8008b88:	f89b 3000 	ldrb.w	r3, [fp]
 8008b8c:	2900      	cmp	r1, #0
 8008b8e:	f47f ad56 	bne.w	800863e <_vfiprintf_r+0xd2>
 8008b92:	2120      	movs	r1, #32
 8008b94:	e553      	b.n	800863e <_vfiprintf_r+0xd2>
 8008b96:	f048 0801 	orr.w	r8, r8, #1
 8008b9a:	4658      	mov	r0, fp
 8008b9c:	f89b 3000 	ldrb.w	r3, [fp]
 8008ba0:	e54d      	b.n	800863e <_vfiprintf_r+0xd2>
 8008ba2:	9503      	str	r5, [sp, #12]
 8008ba4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 809c 	beq.w	8008ce6 <_vfiprintf_r+0x77a>
 8008bae:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8008bb2:	f04f 0300 	mov.w	r3, #0
 8008bb6:	2601      	movs	r6, #1
 8008bb8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8008bbc:	ab10      	add	r3, sp, #64	; 0x40
 8008bbe:	46b1      	mov	r9, r6
 8008bc0:	9307      	str	r3, [sp, #28]
 8008bc2:	e71c      	b.n	80089fe <_vfiprintf_r+0x492>
 8008bc4:	9801      	ldr	r0, [sp, #4]
 8008bc6:	9900      	ldr	r1, [sp, #0]
 8008bc8:	9308      	str	r3, [sp, #32]
 8008bca:	aa0d      	add	r2, sp, #52	; 0x34
 8008bcc:	f7ff fc86 	bl	80084dc <__sprint_r.part.0>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	f040 808f 	bne.w	8008cf4 <_vfiprintf_r+0x788>
 8008bd6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008bd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bda:	9b08      	ldr	r3, [sp, #32]
 8008bdc:	f101 0e01 	add.w	lr, r1, #1
 8008be0:	46d4      	mov	ip, sl
 8008be2:	e61c      	b.n	800881e <_vfiprintf_r+0x2b2>
 8008be4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008be6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008be8:	1c48      	adds	r0, r1, #1
 8008bea:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8008bee:	b16b      	cbz	r3, 8008c0c <_vfiprintf_r+0x6a0>
 8008bf0:	3201      	adds	r2, #1
 8008bf2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8008bf6:	2101      	movs	r1, #1
 8008bf8:	2807      	cmp	r0, #7
 8008bfa:	920f      	str	r2, [sp, #60]	; 0x3c
 8008bfc:	900e      	str	r0, [sp, #56]	; 0x38
 8008bfe:	6023      	str	r3, [r4, #0]
 8008c00:	6061      	str	r1, [r4, #4]
 8008c02:	f300 8134 	bgt.w	8008e6e <_vfiprintf_r+0x902>
 8008c06:	4601      	mov	r1, r0
 8008c08:	3408      	adds	r4, #8
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	9b05      	ldr	r3, [sp, #20]
 8008c0e:	b163      	cbz	r3, 8008c2a <_vfiprintf_r+0x6be>
 8008c10:	3202      	adds	r2, #2
 8008c12:	a90c      	add	r1, sp, #48	; 0x30
 8008c14:	2302      	movs	r3, #2
 8008c16:	2807      	cmp	r0, #7
 8008c18:	920f      	str	r2, [sp, #60]	; 0x3c
 8008c1a:	900e      	str	r0, [sp, #56]	; 0x38
 8008c1c:	e884 000a 	stmia.w	r4, {r1, r3}
 8008c20:	f300 8134 	bgt.w	8008e8c <_vfiprintf_r+0x920>
 8008c24:	4601      	mov	r1, r0
 8008c26:	3408      	adds	r4, #8
 8008c28:	3001      	adds	r0, #1
 8008c2a:	9b06      	ldr	r3, [sp, #24]
 8008c2c:	2b80      	cmp	r3, #128	; 0x80
 8008c2e:	f000 80d4 	beq.w	8008dda <_vfiprintf_r+0x86e>
 8008c32:	ebc9 070c 	rsb	r7, r9, ip
 8008c36:	2f00      	cmp	r7, #0
 8008c38:	dd2b      	ble.n	8008c92 <_vfiprintf_r+0x726>
 8008c3a:	2f10      	cmp	r7, #16
 8008c3c:	4daa      	ldr	r5, [pc, #680]	; (8008ee8 <_vfiprintf_r+0x97c>)
 8008c3e:	dd1f      	ble.n	8008c80 <_vfiprintf_r+0x714>
 8008c40:	46a6      	mov	lr, r4
 8008c42:	2310      	movs	r3, #16
 8008c44:	9c01      	ldr	r4, [sp, #4]
 8008c46:	e007      	b.n	8008c58 <_vfiprintf_r+0x6ec>
 8008c48:	f101 0c02 	add.w	ip, r1, #2
 8008c4c:	f10e 0e08 	add.w	lr, lr, #8
 8008c50:	4601      	mov	r1, r0
 8008c52:	3f10      	subs	r7, #16
 8008c54:	2f10      	cmp	r7, #16
 8008c56:	dd11      	ble.n	8008c7c <_vfiprintf_r+0x710>
 8008c58:	1c48      	adds	r0, r1, #1
 8008c5a:	3210      	adds	r2, #16
 8008c5c:	2807      	cmp	r0, #7
 8008c5e:	920f      	str	r2, [sp, #60]	; 0x3c
 8008c60:	f8ce 5000 	str.w	r5, [lr]
 8008c64:	f8ce 3004 	str.w	r3, [lr, #4]
 8008c68:	900e      	str	r0, [sp, #56]	; 0x38
 8008c6a:	dded      	ble.n	8008c48 <_vfiprintf_r+0x6dc>
 8008c6c:	bb6a      	cbnz	r2, 8008cca <_vfiprintf_r+0x75e>
 8008c6e:	3f10      	subs	r7, #16
 8008c70:	2f10      	cmp	r7, #16
 8008c72:	f04f 0c01 	mov.w	ip, #1
 8008c76:	4611      	mov	r1, r2
 8008c78:	46d6      	mov	lr, sl
 8008c7a:	dced      	bgt.n	8008c58 <_vfiprintf_r+0x6ec>
 8008c7c:	4674      	mov	r4, lr
 8008c7e:	4660      	mov	r0, ip
 8008c80:	443a      	add	r2, r7
 8008c82:	2807      	cmp	r0, #7
 8008c84:	920f      	str	r2, [sp, #60]	; 0x3c
 8008c86:	e884 00a0 	stmia.w	r4, {r5, r7}
 8008c8a:	900e      	str	r0, [sp, #56]	; 0x38
 8008c8c:	dc3b      	bgt.n	8008d06 <_vfiprintf_r+0x79a>
 8008c8e:	3408      	adds	r4, #8
 8008c90:	3001      	adds	r0, #1
 8008c92:	eb02 0309 	add.w	r3, r2, r9
 8008c96:	9a07      	ldr	r2, [sp, #28]
 8008c98:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c9a:	2807      	cmp	r0, #7
 8008c9c:	e884 0204 	stmia.w	r4, {r2, r9}
 8008ca0:	900e      	str	r0, [sp, #56]	; 0x38
 8008ca2:	dd3d      	ble.n	8008d20 <_vfiprintf_r+0x7b4>
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f040 813e 	bne.w	8008f26 <_vfiprintf_r+0x9ba>
 8008caa:	f018 0f04 	tst.w	r8, #4
 8008cae:	930e      	str	r3, [sp, #56]	; 0x38
 8008cb0:	f040 812f 	bne.w	8008f12 <_vfiprintf_r+0x9a6>
 8008cb4:	9b02      	ldr	r3, [sp, #8]
 8008cb6:	9a03      	ldr	r2, [sp, #12]
 8008cb8:	4296      	cmp	r6, r2
 8008cba:	bfac      	ite	ge
 8008cbc:	199b      	addge	r3, r3, r6
 8008cbe:	189b      	addlt	r3, r3, r2
 8008cc0:	9302      	str	r3, [sp, #8]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	930e      	str	r3, [sp, #56]	; 0x38
 8008cc6:	4654      	mov	r4, sl
 8008cc8:	e482      	b.n	80085d0 <_vfiprintf_r+0x64>
 8008cca:	4620      	mov	r0, r4
 8008ccc:	9900      	ldr	r1, [sp, #0]
 8008cce:	9305      	str	r3, [sp, #20]
 8008cd0:	aa0d      	add	r2, sp, #52	; 0x34
 8008cd2:	f7ff fc03 	bl	80084dc <__sprint_r.part.0>
 8008cd6:	b968      	cbnz	r0, 8008cf4 <_vfiprintf_r+0x788>
 8008cd8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008cda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cdc:	9b05      	ldr	r3, [sp, #20]
 8008cde:	f101 0c01 	add.w	ip, r1, #1
 8008ce2:	46d6      	mov	lr, sl
 8008ce4:	e7b5      	b.n	8008c52 <_vfiprintf_r+0x6e6>
 8008ce6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ce8:	b123      	cbz	r3, 8008cf4 <_vfiprintf_r+0x788>
 8008cea:	9801      	ldr	r0, [sp, #4]
 8008cec:	9900      	ldr	r1, [sp, #0]
 8008cee:	aa0d      	add	r2, sp, #52	; 0x34
 8008cf0:	f7ff fbf4 	bl	80084dc <__sprint_r.part.0>
 8008cf4:	9b00      	ldr	r3, [sp, #0]
 8008cf6:	899b      	ldrh	r3, [r3, #12]
 8008cf8:	065b      	lsls	r3, r3, #25
 8008cfa:	f53f ad22 	bmi.w	8008742 <_vfiprintf_r+0x1d6>
 8008cfe:	9802      	ldr	r0, [sp, #8]
 8008d00:	b02b      	add	sp, #172	; 0xac
 8008d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d06:	2a00      	cmp	r2, #0
 8008d08:	f040 8191 	bne.w	800902e <_vfiprintf_r+0xac2>
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	9907      	ldr	r1, [sp, #28]
 8008d10:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 8008d14:	464b      	mov	r3, r9
 8008d16:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8008d1a:	911a      	str	r1, [sp, #104]	; 0x68
 8008d1c:	920e      	str	r2, [sp, #56]	; 0x38
 8008d1e:	4654      	mov	r4, sl
 8008d20:	f104 0208 	add.w	r2, r4, #8
 8008d24:	f018 0f04 	tst.w	r8, #4
 8008d28:	d039      	beq.n	8008d9e <_vfiprintf_r+0x832>
 8008d2a:	9903      	ldr	r1, [sp, #12]
 8008d2c:	1b8d      	subs	r5, r1, r6
 8008d2e:	2d00      	cmp	r5, #0
 8008d30:	dd35      	ble.n	8008d9e <_vfiprintf_r+0x832>
 8008d32:	2d10      	cmp	r5, #16
 8008d34:	f340 8202 	ble.w	800913c <_vfiprintf_r+0xbd0>
 8008d38:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008d3a:	4f6c      	ldr	r7, [pc, #432]	; (8008eec <_vfiprintf_r+0x980>)
 8008d3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008d40:	f8dd 9000 	ldr.w	r9, [sp]
 8008d44:	2410      	movs	r4, #16
 8008d46:	e006      	b.n	8008d56 <_vfiprintf_r+0x7ea>
 8008d48:	f100 0e02 	add.w	lr, r0, #2
 8008d4c:	3208      	adds	r2, #8
 8008d4e:	4608      	mov	r0, r1
 8008d50:	3d10      	subs	r5, #16
 8008d52:	2d10      	cmp	r5, #16
 8008d54:	dd10      	ble.n	8008d78 <_vfiprintf_r+0x80c>
 8008d56:	1c41      	adds	r1, r0, #1
 8008d58:	3310      	adds	r3, #16
 8008d5a:	2907      	cmp	r1, #7
 8008d5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d5e:	6017      	str	r7, [r2, #0]
 8008d60:	6054      	str	r4, [r2, #4]
 8008d62:	910e      	str	r1, [sp, #56]	; 0x38
 8008d64:	ddf0      	ble.n	8008d48 <_vfiprintf_r+0x7dc>
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d12a      	bne.n	8008dc0 <_vfiprintf_r+0x854>
 8008d6a:	3d10      	subs	r5, #16
 8008d6c:	2d10      	cmp	r5, #16
 8008d6e:	f04f 0e01 	mov.w	lr, #1
 8008d72:	4618      	mov	r0, r3
 8008d74:	4652      	mov	r2, sl
 8008d76:	dcee      	bgt.n	8008d56 <_vfiprintf_r+0x7ea>
 8008d78:	442b      	add	r3, r5
 8008d7a:	f1be 0f07 	cmp.w	lr, #7
 8008d7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d80:	6017      	str	r7, [r2, #0]
 8008d82:	6055      	str	r5, [r2, #4]
 8008d84:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8008d88:	dd09      	ble.n	8008d9e <_vfiprintf_r+0x832>
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d092      	beq.n	8008cb4 <_vfiprintf_r+0x748>
 8008d8e:	9801      	ldr	r0, [sp, #4]
 8008d90:	9900      	ldr	r1, [sp, #0]
 8008d92:	aa0d      	add	r2, sp, #52	; 0x34
 8008d94:	f7ff fba2 	bl	80084dc <__sprint_r.part.0>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d1ab      	bne.n	8008cf4 <_vfiprintf_r+0x788>
 8008d9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d9e:	9a02      	ldr	r2, [sp, #8]
 8008da0:	9903      	ldr	r1, [sp, #12]
 8008da2:	428e      	cmp	r6, r1
 8008da4:	bfac      	ite	ge
 8008da6:	1992      	addge	r2, r2, r6
 8008da8:	1852      	addlt	r2, r2, r1
 8008daa:	9202      	str	r2, [sp, #8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d088      	beq.n	8008cc2 <_vfiprintf_r+0x756>
 8008db0:	9801      	ldr	r0, [sp, #4]
 8008db2:	9900      	ldr	r1, [sp, #0]
 8008db4:	aa0d      	add	r2, sp, #52	; 0x34
 8008db6:	f7ff fb91 	bl	80084dc <__sprint_r.part.0>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d081      	beq.n	8008cc2 <_vfiprintf_r+0x756>
 8008dbe:	e799      	b.n	8008cf4 <_vfiprintf_r+0x788>
 8008dc0:	4640      	mov	r0, r8
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	aa0d      	add	r2, sp, #52	; 0x34
 8008dc6:	f7ff fb89 	bl	80084dc <__sprint_r.part.0>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	d192      	bne.n	8008cf4 <_vfiprintf_r+0x788>
 8008dce:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008dd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008dd2:	f100 0e01 	add.w	lr, r0, #1
 8008dd6:	4652      	mov	r2, sl
 8008dd8:	e7ba      	b.n	8008d50 <_vfiprintf_r+0x7e4>
 8008dda:	9b03      	ldr	r3, [sp, #12]
 8008ddc:	1b9f      	subs	r7, r3, r6
 8008dde:	2f00      	cmp	r7, #0
 8008de0:	f77f af27 	ble.w	8008c32 <_vfiprintf_r+0x6c6>
 8008de4:	2f10      	cmp	r7, #16
 8008de6:	4d40      	ldr	r5, [pc, #256]	; (8008ee8 <_vfiprintf_r+0x97c>)
 8008de8:	f340 81b4 	ble.w	8009154 <_vfiprintf_r+0xbe8>
 8008dec:	4620      	mov	r0, r4
 8008dee:	2310      	movs	r3, #16
 8008df0:	4664      	mov	r4, ip
 8008df2:	4684      	mov	ip, r0
 8008df4:	e007      	b.n	8008e06 <_vfiprintf_r+0x89a>
 8008df6:	f101 0e02 	add.w	lr, r1, #2
 8008dfa:	f10c 0c08 	add.w	ip, ip, #8
 8008dfe:	4601      	mov	r1, r0
 8008e00:	3f10      	subs	r7, #16
 8008e02:	2f10      	cmp	r7, #16
 8008e04:	dd11      	ble.n	8008e2a <_vfiprintf_r+0x8be>
 8008e06:	1c48      	adds	r0, r1, #1
 8008e08:	3210      	adds	r2, #16
 8008e0a:	2807      	cmp	r0, #7
 8008e0c:	920f      	str	r2, [sp, #60]	; 0x3c
 8008e0e:	f8cc 5000 	str.w	r5, [ip]
 8008e12:	f8cc 3004 	str.w	r3, [ip, #4]
 8008e16:	900e      	str	r0, [sp, #56]	; 0x38
 8008e18:	dded      	ble.n	8008df6 <_vfiprintf_r+0x88a>
 8008e1a:	b9c2      	cbnz	r2, 8008e4e <_vfiprintf_r+0x8e2>
 8008e1c:	3f10      	subs	r7, #16
 8008e1e:	2f10      	cmp	r7, #16
 8008e20:	f04f 0e01 	mov.w	lr, #1
 8008e24:	4611      	mov	r1, r2
 8008e26:	46d4      	mov	ip, sl
 8008e28:	dced      	bgt.n	8008e06 <_vfiprintf_r+0x89a>
 8008e2a:	4663      	mov	r3, ip
 8008e2c:	46a4      	mov	ip, r4
 8008e2e:	461c      	mov	r4, r3
 8008e30:	443a      	add	r2, r7
 8008e32:	f1be 0f07 	cmp.w	lr, #7
 8008e36:	920f      	str	r2, [sp, #60]	; 0x3c
 8008e38:	e884 00a0 	stmia.w	r4, {r5, r7}
 8008e3c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8008e40:	f300 80ef 	bgt.w	8009022 <_vfiprintf_r+0xab6>
 8008e44:	3408      	adds	r4, #8
 8008e46:	f10e 0001 	add.w	r0, lr, #1
 8008e4a:	4671      	mov	r1, lr
 8008e4c:	e6f1      	b.n	8008c32 <_vfiprintf_r+0x6c6>
 8008e4e:	9801      	ldr	r0, [sp, #4]
 8008e50:	9900      	ldr	r1, [sp, #0]
 8008e52:	9305      	str	r3, [sp, #20]
 8008e54:	aa0d      	add	r2, sp, #52	; 0x34
 8008e56:	f7ff fb41 	bl	80084dc <__sprint_r.part.0>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	f47f af4a 	bne.w	8008cf4 <_vfiprintf_r+0x788>
 8008e60:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008e62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e64:	9b05      	ldr	r3, [sp, #20]
 8008e66:	f101 0e01 	add.w	lr, r1, #1
 8008e6a:	46d4      	mov	ip, sl
 8008e6c:	e7c8      	b.n	8008e00 <_vfiprintf_r+0x894>
 8008e6e:	2a00      	cmp	r2, #0
 8008e70:	f040 80c6 	bne.w	8009000 <_vfiprintf_r+0xa94>
 8008e74:	9b05      	ldr	r3, [sp, #20]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f000 8086 	beq.w	8008f88 <_vfiprintf_r+0xa1c>
 8008e7c:	aa0c      	add	r2, sp, #48	; 0x30
 8008e7e:	2302      	movs	r3, #2
 8008e80:	921a      	str	r2, [sp, #104]	; 0x68
 8008e82:	4608      	mov	r0, r1
 8008e84:	931b      	str	r3, [sp, #108]	; 0x6c
 8008e86:	461a      	mov	r2, r3
 8008e88:	4654      	mov	r4, sl
 8008e8a:	e6cb      	b.n	8008c24 <_vfiprintf_r+0x6b8>
 8008e8c:	2a00      	cmp	r2, #0
 8008e8e:	f040 80a6 	bne.w	8008fde <_vfiprintf_r+0xa72>
 8008e92:	2001      	movs	r0, #1
 8008e94:	4611      	mov	r1, r2
 8008e96:	4654      	mov	r4, sl
 8008e98:	e6c7      	b.n	8008c2a <_vfiprintf_r+0x6be>
 8008e9a:	bb03      	cbnz	r3, 8008ede <_vfiprintf_r+0x972>
 8008e9c:	f018 0f01 	tst.w	r8, #1
 8008ea0:	d01d      	beq.n	8008ede <_vfiprintf_r+0x972>
 8008ea2:	ab2a      	add	r3, sp, #168	; 0xa8
 8008ea4:	2230      	movs	r2, #48	; 0x30
 8008ea6:	f803 2d41 	strb.w	r2, [r3, #-65]!
 8008eaa:	ebc3 090a 	rsb	r9, r3, sl
 8008eae:	9307      	str	r3, [sp, #28]
 8008eb0:	e48e      	b.n	80087d0 <_vfiprintf_r+0x264>
 8008eb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008eb4:	46d1      	mov	r9, sl
 8008eb6:	0933      	lsrs	r3, r6, #4
 8008eb8:	f006 010f 	and.w	r1, r6, #15
 8008ebc:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8008ec0:	093a      	lsrs	r2, r7, #4
 8008ec2:	461e      	mov	r6, r3
 8008ec4:	4617      	mov	r7, r2
 8008ec6:	5c43      	ldrb	r3, [r0, r1]
 8008ec8:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8008ecc:	ea56 0307 	orrs.w	r3, r6, r7
 8008ed0:	d1f1      	bne.n	8008eb6 <_vfiprintf_r+0x94a>
 8008ed2:	464b      	mov	r3, r9
 8008ed4:	f8cd 901c 	str.w	r9, [sp, #28]
 8008ed8:	ebc3 090a 	rsb	r9, r3, sl
 8008edc:	e478      	b.n	80087d0 <_vfiprintf_r+0x264>
 8008ede:	f8cd a01c 	str.w	sl, [sp, #28]
 8008ee2:	e475      	b.n	80087d0 <_vfiprintf_r+0x264>
 8008ee4:	2302      	movs	r3, #2
 8008ee6:	e444      	b.n	8008772 <_vfiprintf_r+0x206>
 8008ee8:	0800af08 	.word	0x0800af08
 8008eec:	0800af18 	.word	0x0800af18
 8008ef0:	2a00      	cmp	r2, #0
 8008ef2:	f040 80d7 	bne.w	80090a4 <_vfiprintf_r+0xb38>
 8008ef6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 80ae 	beq.w	800905c <_vfiprintf_r+0xaf0>
 8008f00:	2301      	movs	r3, #1
 8008f02:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8008f06:	4618      	mov	r0, r3
 8008f08:	931b      	str	r3, [sp, #108]	; 0x6c
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	911a      	str	r1, [sp, #104]	; 0x68
 8008f0e:	4654      	mov	r4, sl
 8008f10:	e679      	b.n	8008c06 <_vfiprintf_r+0x69a>
 8008f12:	9a03      	ldr	r2, [sp, #12]
 8008f14:	1b95      	subs	r5, r2, r6
 8008f16:	2d00      	cmp	r5, #0
 8008f18:	4652      	mov	r2, sl
 8008f1a:	f73f af0a 	bgt.w	8008d32 <_vfiprintf_r+0x7c6>
 8008f1e:	e6c9      	b.n	8008cb4 <_vfiprintf_r+0x748>
 8008f20:	465d      	mov	r5, fp
 8008f22:	f7ff bb7c 	b.w	800861e <_vfiprintf_r+0xb2>
 8008f26:	9801      	ldr	r0, [sp, #4]
 8008f28:	9900      	ldr	r1, [sp, #0]
 8008f2a:	aa0d      	add	r2, sp, #52	; 0x34
 8008f2c:	f7ff fad6 	bl	80084dc <__sprint_r.part.0>
 8008f30:	2800      	cmp	r0, #0
 8008f32:	f47f aedf 	bne.w	8008cf4 <_vfiprintf_r+0x788>
 8008f36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f38:	4652      	mov	r2, sl
 8008f3a:	e6f3      	b.n	8008d24 <_vfiprintf_r+0x7b8>
 8008f3c:	9904      	ldr	r1, [sp, #16]
 8008f3e:	460a      	mov	r2, r1
 8008f40:	3204      	adds	r2, #4
 8008f42:	680e      	ldr	r6, [r1, #0]
 8008f44:	9204      	str	r2, [sp, #16]
 8008f46:	2700      	movs	r7, #0
 8008f48:	e413      	b.n	8008772 <_vfiprintf_r+0x206>
 8008f4a:	3204      	adds	r2, #4
 8008f4c:	681e      	ldr	r6, [r3, #0]
 8008f4e:	9204      	str	r2, [sp, #16]
 8008f50:	2301      	movs	r3, #1
 8008f52:	2700      	movs	r7, #0
 8008f54:	e40d      	b.n	8008772 <_vfiprintf_r+0x206>
 8008f56:	6816      	ldr	r6, [r2, #0]
 8008f58:	3204      	adds	r2, #4
 8008f5a:	9204      	str	r2, [sp, #16]
 8008f5c:	2700      	movs	r7, #0
 8008f5e:	e52d      	b.n	80089bc <_vfiprintf_r+0x450>
 8008f60:	9a04      	ldr	r2, [sp, #16]
 8008f62:	6816      	ldr	r6, [r2, #0]
 8008f64:	4613      	mov	r3, r2
 8008f66:	3304      	adds	r3, #4
 8008f68:	17f7      	asrs	r7, r6, #31
 8008f6a:	9304      	str	r3, [sp, #16]
 8008f6c:	4632      	mov	r2, r6
 8008f6e:	463b      	mov	r3, r7
 8008f70:	e4bf      	b.n	80088f2 <_vfiprintf_r+0x386>
 8008f72:	9801      	ldr	r0, [sp, #4]
 8008f74:	9900      	ldr	r1, [sp, #0]
 8008f76:	aa0d      	add	r2, sp, #52	; 0x34
 8008f78:	f7ff fab0 	bl	80084dc <__sprint_r.part.0>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	f47f aeb9 	bne.w	8008cf4 <_vfiprintf_r+0x788>
 8008f82:	4654      	mov	r4, sl
 8008f84:	f7ff bbbe 	b.w	8008704 <_vfiprintf_r+0x198>
 8008f88:	4608      	mov	r0, r1
 8008f8a:	4654      	mov	r4, sl
 8008f8c:	4611      	mov	r1, r2
 8008f8e:	e64c      	b.n	8008c2a <_vfiprintf_r+0x6be>
 8008f90:	46d1      	mov	r9, sl
 8008f92:	f8cd c014 	str.w	ip, [sp, #20]
 8008f96:	4630      	mov	r0, r6
 8008f98:	4639      	mov	r1, r7
 8008f9a:	220a      	movs	r2, #10
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f001 f897 	bl	800a0d0 <__aeabi_uldivmod>
 8008fa2:	3230      	adds	r2, #48	; 0x30
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	4639      	mov	r1, r7
 8008fa8:	f809 2d01 	strb.w	r2, [r9, #-1]!
 8008fac:	2300      	movs	r3, #0
 8008fae:	220a      	movs	r2, #10
 8008fb0:	f001 f88e 	bl	800a0d0 <__aeabi_uldivmod>
 8008fb4:	4606      	mov	r6, r0
 8008fb6:	460f      	mov	r7, r1
 8008fb8:	ea56 0307 	orrs.w	r3, r6, r7
 8008fbc:	d1eb      	bne.n	8008f96 <_vfiprintf_r+0xa2a>
 8008fbe:	f8dd c014 	ldr.w	ip, [sp, #20]
 8008fc2:	e786      	b.n	8008ed2 <_vfiprintf_r+0x966>
 8008fc4:	2b30      	cmp	r3, #48	; 0x30
 8008fc6:	9b07      	ldr	r3, [sp, #28]
 8008fc8:	d086      	beq.n	8008ed8 <_vfiprintf_r+0x96c>
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	461a      	mov	r2, r3
 8008fce:	9307      	str	r3, [sp, #28]
 8008fd0:	2330      	movs	r3, #48	; 0x30
 8008fd2:	ebc2 090a 	rsb	r9, r2, sl
 8008fd6:	f801 3c01 	strb.w	r3, [r1, #-1]
 8008fda:	f7ff bbf9 	b.w	80087d0 <_vfiprintf_r+0x264>
 8008fde:	9801      	ldr	r0, [sp, #4]
 8008fe0:	9900      	ldr	r1, [sp, #0]
 8008fe2:	f8cd c014 	str.w	ip, [sp, #20]
 8008fe6:	aa0d      	add	r2, sp, #52	; 0x34
 8008fe8:	f7ff fa78 	bl	80084dc <__sprint_r.part.0>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	f47f ae81 	bne.w	8008cf4 <_vfiprintf_r+0x788>
 8008ff2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008ff4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ff6:	f8dd c014 	ldr.w	ip, [sp, #20]
 8008ffa:	1c48      	adds	r0, r1, #1
 8008ffc:	4654      	mov	r4, sl
 8008ffe:	e614      	b.n	8008c2a <_vfiprintf_r+0x6be>
 8009000:	9801      	ldr	r0, [sp, #4]
 8009002:	9900      	ldr	r1, [sp, #0]
 8009004:	f8cd c020 	str.w	ip, [sp, #32]
 8009008:	aa0d      	add	r2, sp, #52	; 0x34
 800900a:	f7ff fa67 	bl	80084dc <__sprint_r.part.0>
 800900e:	2800      	cmp	r0, #0
 8009010:	f47f ae70 	bne.w	8008cf4 <_vfiprintf_r+0x788>
 8009014:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009016:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009018:	f8dd c020 	ldr.w	ip, [sp, #32]
 800901c:	1c48      	adds	r0, r1, #1
 800901e:	4654      	mov	r4, sl
 8009020:	e5f4      	b.n	8008c0c <_vfiprintf_r+0x6a0>
 8009022:	2a00      	cmp	r2, #0
 8009024:	d167      	bne.n	80090f6 <_vfiprintf_r+0xb8a>
 8009026:	2001      	movs	r0, #1
 8009028:	4611      	mov	r1, r2
 800902a:	4654      	mov	r4, sl
 800902c:	e601      	b.n	8008c32 <_vfiprintf_r+0x6c6>
 800902e:	9801      	ldr	r0, [sp, #4]
 8009030:	9900      	ldr	r1, [sp, #0]
 8009032:	aa0d      	add	r2, sp, #52	; 0x34
 8009034:	f7ff fa52 	bl	80084dc <__sprint_r.part.0>
 8009038:	2800      	cmp	r0, #0
 800903a:	f47f ae5b 	bne.w	8008cf4 <_vfiprintf_r+0x788>
 800903e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009040:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009042:	3001      	adds	r0, #1
 8009044:	4654      	mov	r4, sl
 8009046:	e624      	b.n	8008c92 <_vfiprintf_r+0x726>
 8009048:	252d      	movs	r5, #45	; 0x2d
 800904a:	4276      	negs	r6, r6
 800904c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8009050:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 8009054:	46e1      	mov	r9, ip
 8009056:	2301      	movs	r3, #1
 8009058:	f7ff bb91 	b.w	800877e <_vfiprintf_r+0x212>
 800905c:	9b05      	ldr	r3, [sp, #20]
 800905e:	4611      	mov	r1, r2
 8009060:	2001      	movs	r0, #1
 8009062:	4654      	mov	r4, sl
 8009064:	2b00      	cmp	r3, #0
 8009066:	f43f ade4 	beq.w	8008c32 <_vfiprintf_r+0x6c6>
 800906a:	aa0c      	add	r2, sp, #48	; 0x30
 800906c:	2302      	movs	r3, #2
 800906e:	e88a 000c 	stmia.w	sl, {r2, r3}
 8009072:	461a      	mov	r2, r3
 8009074:	e5d6      	b.n	8008c24 <_vfiprintf_r+0x6b8>
 8009076:	f018 0f10 	tst.w	r8, #16
 800907a:	d10b      	bne.n	8009094 <_vfiprintf_r+0xb28>
 800907c:	f018 0f40 	tst.w	r8, #64	; 0x40
 8009080:	d008      	beq.n	8009094 <_vfiprintf_r+0xb28>
 8009082:	9a04      	ldr	r2, [sp, #16]
 8009084:	6813      	ldr	r3, [r2, #0]
 8009086:	3204      	adds	r2, #4
 8009088:	9204      	str	r2, [sp, #16]
 800908a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800908e:	801a      	strh	r2, [r3, #0]
 8009090:	f7ff ba9e 	b.w	80085d0 <_vfiprintf_r+0x64>
 8009094:	9a04      	ldr	r2, [sp, #16]
 8009096:	6813      	ldr	r3, [r2, #0]
 8009098:	3204      	adds	r2, #4
 800909a:	9204      	str	r2, [sp, #16]
 800909c:	9a02      	ldr	r2, [sp, #8]
 800909e:	601a      	str	r2, [r3, #0]
 80090a0:	f7ff ba96 	b.w	80085d0 <_vfiprintf_r+0x64>
 80090a4:	9801      	ldr	r0, [sp, #4]
 80090a6:	9900      	ldr	r1, [sp, #0]
 80090a8:	f8cd c020 	str.w	ip, [sp, #32]
 80090ac:	aa0d      	add	r2, sp, #52	; 0x34
 80090ae:	f7ff fa15 	bl	80084dc <__sprint_r.part.0>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	f47f ae1e 	bne.w	8008cf4 <_vfiprintf_r+0x788>
 80090b8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80090ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090bc:	f8dd c020 	ldr.w	ip, [sp, #32]
 80090c0:	1c48      	adds	r0, r1, #1
 80090c2:	4654      	mov	r4, sl
 80090c4:	e591      	b.n	8008bea <_vfiprintf_r+0x67e>
 80090c6:	f048 0820 	orr.w	r8, r8, #32
 80090ca:	f10b 0001 	add.w	r0, fp, #1
 80090ce:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80090d2:	f7ff bab4 	b.w	800863e <_vfiprintf_r+0xd2>
 80090d6:	426d      	negs	r5, r5
 80090d8:	9304      	str	r3, [sp, #16]
 80090da:	4658      	mov	r0, fp
 80090dc:	f7ff bbc6 	b.w	800886c <_vfiprintf_r+0x300>
 80090e0:	9807      	ldr	r0, [sp, #28]
 80090e2:	9604      	str	r6, [sp, #16]
 80090e4:	f7fa fd06 	bl	8003af4 <strlen>
 80090e8:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 80090ec:	4681      	mov	r9, r0
 80090ee:	f04f 0c00 	mov.w	ip, #0
 80090f2:	f7ff bb6d 	b.w	80087d0 <_vfiprintf_r+0x264>
 80090f6:	9801      	ldr	r0, [sp, #4]
 80090f8:	9900      	ldr	r1, [sp, #0]
 80090fa:	f8cd c014 	str.w	ip, [sp, #20]
 80090fe:	aa0d      	add	r2, sp, #52	; 0x34
 8009100:	f7ff f9ec 	bl	80084dc <__sprint_r.part.0>
 8009104:	2800      	cmp	r0, #0
 8009106:	f47f adf5 	bne.w	8008cf4 <_vfiprintf_r+0x788>
 800910a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800910c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800910e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8009112:	1c48      	adds	r0, r1, #1
 8009114:	4654      	mov	r4, sl
 8009116:	e58c      	b.n	8008c32 <_vfiprintf_r+0x6c6>
 8009118:	990e      	ldr	r1, [sp, #56]	; 0x38
 800911a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800911c:	4f15      	ldr	r7, [pc, #84]	; (8009174 <_vfiprintf_r+0xc08>)
 800911e:	3101      	adds	r1, #1
 8009120:	f7ff bb98 	b.w	8008854 <_vfiprintf_r+0x2e8>
 8009124:	f1bc 0f06 	cmp.w	ip, #6
 8009128:	bf28      	it	cs
 800912a:	f04f 0c06 	movcs.w	ip, #6
 800912e:	4b12      	ldr	r3, [pc, #72]	; (8009178 <_vfiprintf_r+0xc0c>)
 8009130:	9604      	str	r6, [sp, #16]
 8009132:	46e1      	mov	r9, ip
 8009134:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
 8009138:	9307      	str	r3, [sp, #28]
 800913a:	e460      	b.n	80089fe <_vfiprintf_r+0x492>
 800913c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800913e:	4f0d      	ldr	r7, [pc, #52]	; (8009174 <_vfiprintf_r+0xc08>)
 8009140:	f101 0e01 	add.w	lr, r1, #1
 8009144:	e618      	b.n	8008d78 <_vfiprintf_r+0x80c>
 8009146:	46e1      	mov	r9, ip
 8009148:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 800914c:	9604      	str	r6, [sp, #16]
 800914e:	4684      	mov	ip, r0
 8009150:	f7ff bb3e 	b.w	80087d0 <_vfiprintf_r+0x264>
 8009154:	4686      	mov	lr, r0
 8009156:	e66b      	b.n	8008e30 <_vfiprintf_r+0x8c4>
 8009158:	9a04      	ldr	r2, [sp, #16]
 800915a:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800915e:	6816      	ldr	r6, [r2, #0]
 8009160:	3204      	adds	r2, #4
 8009162:	2e00      	cmp	r6, #0
 8009164:	9204      	str	r2, [sp, #16]
 8009166:	f6bf aa6a 	bge.w	800863e <_vfiprintf_r+0xd2>
 800916a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800916e:	f7ff ba66 	b.w	800863e <_vfiprintf_r+0xd2>
 8009172:	bf00      	nop
 8009174:	0800af18 	.word	0x0800af18
 8009178:	0800ada8 	.word	0x0800ada8

0800917c <vfiprintf>:
 800917c:	b430      	push	{r4, r5}
 800917e:	4c04      	ldr	r4, [pc, #16]	; (8009190 <vfiprintf+0x14>)
 8009180:	460d      	mov	r5, r1
 8009182:	4613      	mov	r3, r2
 8009184:	4601      	mov	r1, r0
 8009186:	462a      	mov	r2, r5
 8009188:	6820      	ldr	r0, [r4, #0]
 800918a:	bc30      	pop	{r4, r5}
 800918c:	f7ff b9ee 	b.w	800856c <_vfiprintf_r>
 8009190:	200004d0 	.word	0x200004d0

08009194 <__sbprintf>:
 8009194:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8009198:	460c      	mov	r4, r1
 800919a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 800919e:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 80091a2:	69e7      	ldr	r7, [r4, #28]
 80091a4:	6e49      	ldr	r1, [r1, #100]	; 0x64
 80091a6:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 80091aa:	9119      	str	r1, [sp, #100]	; 0x64
 80091ac:	ad1a      	add	r5, sp, #104	; 0x68
 80091ae:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80091b2:	f02e 0e02 	bic.w	lr, lr, #2
 80091b6:	f04f 0c00 	mov.w	ip, #0
 80091ba:	9707      	str	r7, [sp, #28]
 80091bc:	4669      	mov	r1, sp
 80091be:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80091c0:	9500      	str	r5, [sp, #0]
 80091c2:	9504      	str	r5, [sp, #16]
 80091c4:	9602      	str	r6, [sp, #8]
 80091c6:	9605      	str	r6, [sp, #20]
 80091c8:	f8ad e00c 	strh.w	lr, [sp, #12]
 80091cc:	f8ad 900e 	strh.w	r9, [sp, #14]
 80091d0:	9709      	str	r7, [sp, #36]	; 0x24
 80091d2:	f8cd c018 	str.w	ip, [sp, #24]
 80091d6:	4606      	mov	r6, r0
 80091d8:	f7ff f9c8 	bl	800856c <_vfiprintf_r>
 80091dc:	1e05      	subs	r5, r0, #0
 80091de:	db07      	blt.n	80091f0 <__sbprintf+0x5c>
 80091e0:	4630      	mov	r0, r6
 80091e2:	4669      	mov	r1, sp
 80091e4:	f7fd f87c 	bl	80062e0 <_fflush_r>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	bf18      	it	ne
 80091ec:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80091f0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80091f4:	065b      	lsls	r3, r3, #25
 80091f6:	d503      	bpl.n	8009200 <__sbprintf+0x6c>
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091fe:	81a3      	strh	r3, [r4, #12]
 8009200:	4628      	mov	r0, r5
 8009202:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8009206:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 800920a:	bf00      	nop

0800920c <__swbuf_r>:
 800920c:	b570      	push	{r4, r5, r6, lr}
 800920e:	460d      	mov	r5, r1
 8009210:	4614      	mov	r4, r2
 8009212:	4606      	mov	r6, r0
 8009214:	b110      	cbz	r0, 800921c <__swbuf_r+0x10>
 8009216:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009218:	2b00      	cmp	r3, #0
 800921a:	d048      	beq.n	80092ae <__swbuf_r+0xa2>
 800921c:	89a2      	ldrh	r2, [r4, #12]
 800921e:	69a3      	ldr	r3, [r4, #24]
 8009220:	60a3      	str	r3, [r4, #8]
 8009222:	b291      	uxth	r1, r2
 8009224:	0708      	lsls	r0, r1, #28
 8009226:	d538      	bpl.n	800929a <__swbuf_r+0x8e>
 8009228:	6923      	ldr	r3, [r4, #16]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d035      	beq.n	800929a <__swbuf_r+0x8e>
 800922e:	0489      	lsls	r1, r1, #18
 8009230:	b2ed      	uxtb	r5, r5
 8009232:	d515      	bpl.n	8009260 <__swbuf_r+0x54>
 8009234:	6822      	ldr	r2, [r4, #0]
 8009236:	6961      	ldr	r1, [r4, #20]
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	428b      	cmp	r3, r1
 800923c:	da1c      	bge.n	8009278 <__swbuf_r+0x6c>
 800923e:	3301      	adds	r3, #1
 8009240:	68a1      	ldr	r1, [r4, #8]
 8009242:	1c50      	adds	r0, r2, #1
 8009244:	3901      	subs	r1, #1
 8009246:	60a1      	str	r1, [r4, #8]
 8009248:	6020      	str	r0, [r4, #0]
 800924a:	7015      	strb	r5, [r2, #0]
 800924c:	6962      	ldr	r2, [r4, #20]
 800924e:	429a      	cmp	r2, r3
 8009250:	d01a      	beq.n	8009288 <__swbuf_r+0x7c>
 8009252:	89a3      	ldrh	r3, [r4, #12]
 8009254:	07db      	lsls	r3, r3, #31
 8009256:	d501      	bpl.n	800925c <__swbuf_r+0x50>
 8009258:	2d0a      	cmp	r5, #10
 800925a:	d015      	beq.n	8009288 <__swbuf_r+0x7c>
 800925c:	4628      	mov	r0, r5
 800925e:	bd70      	pop	{r4, r5, r6, pc}
 8009260:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009262:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009266:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800926a:	81a2      	strh	r2, [r4, #12]
 800926c:	6822      	ldr	r2, [r4, #0]
 800926e:	6661      	str	r1, [r4, #100]	; 0x64
 8009270:	6961      	ldr	r1, [r4, #20]
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	428b      	cmp	r3, r1
 8009276:	dbe2      	blt.n	800923e <__swbuf_r+0x32>
 8009278:	4630      	mov	r0, r6
 800927a:	4621      	mov	r1, r4
 800927c:	f7fd f830 	bl	80062e0 <_fflush_r>
 8009280:	b940      	cbnz	r0, 8009294 <__swbuf_r+0x88>
 8009282:	6822      	ldr	r2, [r4, #0]
 8009284:	2301      	movs	r3, #1
 8009286:	e7db      	b.n	8009240 <__swbuf_r+0x34>
 8009288:	4630      	mov	r0, r6
 800928a:	4621      	mov	r1, r4
 800928c:	f7fd f828 	bl	80062e0 <_fflush_r>
 8009290:	2800      	cmp	r0, #0
 8009292:	d0e3      	beq.n	800925c <__swbuf_r+0x50>
 8009294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009298:	bd70      	pop	{r4, r5, r6, pc}
 800929a:	4630      	mov	r0, r6
 800929c:	4621      	mov	r1, r4
 800929e:	f7fb feb1 	bl	8005004 <__swsetup_r>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	d1f6      	bne.n	8009294 <__swbuf_r+0x88>
 80092a6:	89a2      	ldrh	r2, [r4, #12]
 80092a8:	6923      	ldr	r3, [r4, #16]
 80092aa:	b291      	uxth	r1, r2
 80092ac:	e7bf      	b.n	800922e <__swbuf_r+0x22>
 80092ae:	f7fd f927 	bl	8006500 <__sinit>
 80092b2:	e7b3      	b.n	800921c <__swbuf_r+0x10>

080092b4 <__swbuf>:
 80092b4:	4b02      	ldr	r3, [pc, #8]	; (80092c0 <__swbuf+0xc>)
 80092b6:	460a      	mov	r2, r1
 80092b8:	4601      	mov	r1, r0
 80092ba:	6818      	ldr	r0, [r3, #0]
 80092bc:	f7ff bfa6 	b.w	800920c <__swbuf_r>
 80092c0:	200004d0 	.word	0x200004d0

080092c4 <_write_r>:
 80092c4:	b570      	push	{r4, r5, r6, lr}
 80092c6:	4c08      	ldr	r4, [pc, #32]	; (80092e8 <_write_r+0x24>)
 80092c8:	4606      	mov	r6, r0
 80092ca:	2500      	movs	r5, #0
 80092cc:	4608      	mov	r0, r1
 80092ce:	4611      	mov	r1, r2
 80092d0:	461a      	mov	r2, r3
 80092d2:	6025      	str	r5, [r4, #0]
 80092d4:	f7f8 f9d2 	bl	800167c <_write>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d000      	beq.n	80092de <_write_r+0x1a>
 80092dc:	bd70      	pop	{r4, r5, r6, pc}
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d0fb      	beq.n	80092dc <_write_r+0x18>
 80092e4:	6033      	str	r3, [r6, #0]
 80092e6:	bd70      	pop	{r4, r5, r6, pc}
 80092e8:	20010318 	.word	0x20010318

080092ec <__register_exitproc>:
 80092ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f0:	4c25      	ldr	r4, [pc, #148]	; (8009388 <__register_exitproc+0x9c>)
 80092f2:	6825      	ldr	r5, [r4, #0]
 80092f4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80092f8:	4606      	mov	r6, r0
 80092fa:	4688      	mov	r8, r1
 80092fc:	4692      	mov	sl, r2
 80092fe:	4699      	mov	r9, r3
 8009300:	b3cc      	cbz	r4, 8009376 <__register_exitproc+0x8a>
 8009302:	6860      	ldr	r0, [r4, #4]
 8009304:	281f      	cmp	r0, #31
 8009306:	dc18      	bgt.n	800933a <__register_exitproc+0x4e>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	b17e      	cbz	r6, 800932c <__register_exitproc+0x40>
 800930c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8009310:	2101      	movs	r1, #1
 8009312:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 8009316:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 800931a:	fa01 f200 	lsl.w	r2, r1, r0
 800931e:	4317      	orrs	r7, r2
 8009320:	2e02      	cmp	r6, #2
 8009322:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8009326:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 800932a:	d01e      	beq.n	800936a <__register_exitproc+0x7e>
 800932c:	3002      	adds	r0, #2
 800932e:	6063      	str	r3, [r4, #4]
 8009330:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8009334:	2000      	movs	r0, #0
 8009336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800933a:	4b14      	ldr	r3, [pc, #80]	; (800938c <__register_exitproc+0xa0>)
 800933c:	b303      	cbz	r3, 8009380 <__register_exitproc+0x94>
 800933e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009342:	f3af 8000 	nop.w
 8009346:	4604      	mov	r4, r0
 8009348:	b1d0      	cbz	r0, 8009380 <__register_exitproc+0x94>
 800934a:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800934e:	2700      	movs	r7, #0
 8009350:	e880 0088 	stmia.w	r0, {r3, r7}
 8009354:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8009358:	4638      	mov	r0, r7
 800935a:	2301      	movs	r3, #1
 800935c:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8009360:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8009364:	2e00      	cmp	r6, #0
 8009366:	d0e1      	beq.n	800932c <__register_exitproc+0x40>
 8009368:	e7d0      	b.n	800930c <__register_exitproc+0x20>
 800936a:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 800936e:	430a      	orrs	r2, r1
 8009370:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8009374:	e7da      	b.n	800932c <__register_exitproc+0x40>
 8009376:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 800937a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800937e:	e7c0      	b.n	8009302 <__register_exitproc+0x16>
 8009380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009388:	0800ad5c 	.word	0x0800ad5c
 800938c:	00000000 	.word	0x00000000

08009390 <_calloc_r>:
 8009390:	b510      	push	{r4, lr}
 8009392:	fb02 f101 	mul.w	r1, r2, r1
 8009396:	f7fd fc9f 	bl	8006cd8 <_malloc_r>
 800939a:	4604      	mov	r4, r0
 800939c:	b168      	cbz	r0, 80093ba <_calloc_r+0x2a>
 800939e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80093a2:	f022 0203 	bic.w	r2, r2, #3
 80093a6:	3a04      	subs	r2, #4
 80093a8:	2a24      	cmp	r2, #36	; 0x24
 80093aa:	d818      	bhi.n	80093de <_calloc_r+0x4e>
 80093ac:	2a13      	cmp	r2, #19
 80093ae:	d806      	bhi.n	80093be <_calloc_r+0x2e>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2200      	movs	r2, #0
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	605a      	str	r2, [r3, #4]
 80093b8:	609a      	str	r2, [r3, #8]
 80093ba:	4620      	mov	r0, r4
 80093bc:	bd10      	pop	{r4, pc}
 80093be:	2300      	movs	r3, #0
 80093c0:	2a1b      	cmp	r2, #27
 80093c2:	6003      	str	r3, [r0, #0]
 80093c4:	6043      	str	r3, [r0, #4]
 80093c6:	d90f      	bls.n	80093e8 <_calloc_r+0x58>
 80093c8:	2a24      	cmp	r2, #36	; 0x24
 80093ca:	6083      	str	r3, [r0, #8]
 80093cc:	60c3      	str	r3, [r0, #12]
 80093ce:	bf05      	ittet	eq
 80093d0:	6103      	streq	r3, [r0, #16]
 80093d2:	6143      	streq	r3, [r0, #20]
 80093d4:	f100 0310 	addne.w	r3, r0, #16
 80093d8:	f100 0318 	addeq.w	r3, r0, #24
 80093dc:	e7e9      	b.n	80093b2 <_calloc_r+0x22>
 80093de:	2100      	movs	r1, #0
 80093e0:	f7fa face 	bl	8003980 <memset>
 80093e4:	4620      	mov	r0, r4
 80093e6:	bd10      	pop	{r4, pc}
 80093e8:	f100 0308 	add.w	r3, r0, #8
 80093ec:	e7e1      	b.n	80093b2 <_calloc_r+0x22>
 80093ee:	bf00      	nop

080093f0 <_close_r>:
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	4c07      	ldr	r4, [pc, #28]	; (8009410 <_close_r+0x20>)
 80093f4:	2300      	movs	r3, #0
 80093f6:	4605      	mov	r5, r0
 80093f8:	4608      	mov	r0, r1
 80093fa:	6023      	str	r3, [r4, #0]
 80093fc:	f7f8 f946 	bl	800168c <_close>
 8009400:	1c43      	adds	r3, r0, #1
 8009402:	d000      	beq.n	8009406 <_close_r+0x16>
 8009404:	bd38      	pop	{r3, r4, r5, pc}
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d0fb      	beq.n	8009404 <_close_r+0x14>
 800940c:	602b      	str	r3, [r5, #0]
 800940e:	bd38      	pop	{r3, r4, r5, pc}
 8009410:	20010318 	.word	0x20010318

08009414 <_fclose_r>:
 8009414:	2900      	cmp	r1, #0
 8009416:	d03d      	beq.n	8009494 <_fclose_r+0x80>
 8009418:	b570      	push	{r4, r5, r6, lr}
 800941a:	4605      	mov	r5, r0
 800941c:	460c      	mov	r4, r1
 800941e:	b108      	cbz	r0, 8009424 <_fclose_r+0x10>
 8009420:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009422:	b37b      	cbz	r3, 8009484 <_fclose_r+0x70>
 8009424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009428:	b90b      	cbnz	r3, 800942e <_fclose_r+0x1a>
 800942a:	2000      	movs	r0, #0
 800942c:	bd70      	pop	{r4, r5, r6, pc}
 800942e:	4628      	mov	r0, r5
 8009430:	4621      	mov	r1, r4
 8009432:	f7fc feab 	bl	800618c <__sflush_r>
 8009436:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009438:	4606      	mov	r6, r0
 800943a:	b133      	cbz	r3, 800944a <_fclose_r+0x36>
 800943c:	4628      	mov	r0, r5
 800943e:	69e1      	ldr	r1, [r4, #28]
 8009440:	4798      	blx	r3
 8009442:	2800      	cmp	r0, #0
 8009444:	bfb8      	it	lt
 8009446:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 800944a:	89a3      	ldrh	r3, [r4, #12]
 800944c:	061b      	lsls	r3, r3, #24
 800944e:	d41c      	bmi.n	800948a <_fclose_r+0x76>
 8009450:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009452:	b141      	cbz	r1, 8009466 <_fclose_r+0x52>
 8009454:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009458:	4299      	cmp	r1, r3
 800945a:	d002      	beq.n	8009462 <_fclose_r+0x4e>
 800945c:	4628      	mov	r0, r5
 800945e:	f7fd f8d5 	bl	800660c <_free_r>
 8009462:	2300      	movs	r3, #0
 8009464:	6323      	str	r3, [r4, #48]	; 0x30
 8009466:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009468:	b121      	cbz	r1, 8009474 <_fclose_r+0x60>
 800946a:	4628      	mov	r0, r5
 800946c:	f7fd f8ce 	bl	800660c <_free_r>
 8009470:	2300      	movs	r3, #0
 8009472:	6463      	str	r3, [r4, #68]	; 0x44
 8009474:	f7fd f84a 	bl	800650c <__sfp_lock_acquire>
 8009478:	2300      	movs	r3, #0
 800947a:	81a3      	strh	r3, [r4, #12]
 800947c:	f7fd f848 	bl	8006510 <__sfp_lock_release>
 8009480:	4630      	mov	r0, r6
 8009482:	bd70      	pop	{r4, r5, r6, pc}
 8009484:	f7fd f83c 	bl	8006500 <__sinit>
 8009488:	e7cc      	b.n	8009424 <_fclose_r+0x10>
 800948a:	4628      	mov	r0, r5
 800948c:	6921      	ldr	r1, [r4, #16]
 800948e:	f7fd f8bd 	bl	800660c <_free_r>
 8009492:	e7dd      	b.n	8009450 <_fclose_r+0x3c>
 8009494:	2000      	movs	r0, #0
 8009496:	4770      	bx	lr

08009498 <fclose>:
 8009498:	4b02      	ldr	r3, [pc, #8]	; (80094a4 <fclose+0xc>)
 800949a:	4601      	mov	r1, r0
 800949c:	6818      	ldr	r0, [r3, #0]
 800949e:	f7ff bfb9 	b.w	8009414 <_fclose_r>
 80094a2:	bf00      	nop
 80094a4:	200004d0 	.word	0x200004d0

080094a8 <__fputwc>:
 80094a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ac:	b082      	sub	sp, #8
 80094ae:	4607      	mov	r7, r0
 80094b0:	460e      	mov	r6, r1
 80094b2:	4614      	mov	r4, r2
 80094b4:	f7fd fb84 	bl	8006bc0 <__locale_mb_cur_max>
 80094b8:	2801      	cmp	r0, #1
 80094ba:	d041      	beq.n	8009540 <__fputwc+0x98>
 80094bc:	4638      	mov	r0, r7
 80094be:	a901      	add	r1, sp, #4
 80094c0:	4632      	mov	r2, r6
 80094c2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80094c6:	f000 f90d 	bl	80096e4 <_wcrtomb_r>
 80094ca:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80094ce:	4680      	mov	r8, r0
 80094d0:	d02f      	beq.n	8009532 <__fputwc+0x8a>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d03c      	beq.n	8009550 <__fputwc+0xa8>
 80094d6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80094da:	2500      	movs	r5, #0
 80094dc:	e009      	b.n	80094f2 <__fputwc+0x4a>
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	7019      	strb	r1, [r3, #0]
 80094e2:	6823      	ldr	r3, [r4, #0]
 80094e4:	3301      	adds	r3, #1
 80094e6:	6023      	str	r3, [r4, #0]
 80094e8:	3501      	adds	r5, #1
 80094ea:	45a8      	cmp	r8, r5
 80094ec:	d930      	bls.n	8009550 <__fputwc+0xa8>
 80094ee:	ab01      	add	r3, sp, #4
 80094f0:	5d59      	ldrb	r1, [r3, r5]
 80094f2:	68a3      	ldr	r3, [r4, #8]
 80094f4:	3b01      	subs	r3, #1
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	60a3      	str	r3, [r4, #8]
 80094fa:	daf0      	bge.n	80094de <__fputwc+0x36>
 80094fc:	69a2      	ldr	r2, [r4, #24]
 80094fe:	4293      	cmp	r3, r2
 8009500:	db07      	blt.n	8009512 <__fputwc+0x6a>
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	7019      	strb	r1, [r3, #0]
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	7819      	ldrb	r1, [r3, #0]
 800950a:	290a      	cmp	r1, #10
 800950c:	f103 0301 	add.w	r3, r3, #1
 8009510:	d1e9      	bne.n	80094e6 <__fputwc+0x3e>
 8009512:	4638      	mov	r0, r7
 8009514:	4622      	mov	r2, r4
 8009516:	f7ff fe79 	bl	800920c <__swbuf_r>
 800951a:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 800951e:	fab0 f080 	clz	r0, r0
 8009522:	0940      	lsrs	r0, r0, #5
 8009524:	2800      	cmp	r0, #0
 8009526:	d0df      	beq.n	80094e8 <__fputwc+0x40>
 8009528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800952c:	b002      	add	sp, #8
 800952e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009538:	81a3      	strh	r3, [r4, #12]
 800953a:	b002      	add	sp, #8
 800953c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009540:	1e73      	subs	r3, r6, #1
 8009542:	2bfe      	cmp	r3, #254	; 0xfe
 8009544:	d8ba      	bhi.n	80094bc <__fputwc+0x14>
 8009546:	b2f1      	uxtb	r1, r6
 8009548:	4680      	mov	r8, r0
 800954a:	f88d 1004 	strb.w	r1, [sp, #4]
 800954e:	e7c4      	b.n	80094da <__fputwc+0x32>
 8009550:	4630      	mov	r0, r6
 8009552:	b002      	add	sp, #8
 8009554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009558 <_fputwc_r>:
 8009558:	8993      	ldrh	r3, [r2, #12]
 800955a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800955e:	d10b      	bne.n	8009578 <_fputwc_r+0x20>
 8009560:	b410      	push	{r4}
 8009562:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8009564:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009568:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800956c:	6654      	str	r4, [r2, #100]	; 0x64
 800956e:	8193      	strh	r3, [r2, #12]
 8009570:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009574:	f7ff bf98 	b.w	80094a8 <__fputwc>
 8009578:	f7ff bf96 	b.w	80094a8 <__fputwc>

0800957c <fputwc>:
 800957c:	4b08      	ldr	r3, [pc, #32]	; (80095a0 <fputwc+0x24>)
 800957e:	b570      	push	{r4, r5, r6, lr}
 8009580:	681c      	ldr	r4, [r3, #0]
 8009582:	4606      	mov	r6, r0
 8009584:	460d      	mov	r5, r1
 8009586:	b124      	cbz	r4, 8009592 <fputwc+0x16>
 8009588:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800958a:	b913      	cbnz	r3, 8009592 <fputwc+0x16>
 800958c:	4620      	mov	r0, r4
 800958e:	f7fc ffb7 	bl	8006500 <__sinit>
 8009592:	4620      	mov	r0, r4
 8009594:	4631      	mov	r1, r6
 8009596:	462a      	mov	r2, r5
 8009598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800959c:	f7ff bfdc 	b.w	8009558 <_fputwc_r>
 80095a0:	200004d0 	.word	0x200004d0

080095a4 <_fstat_r>:
 80095a4:	b538      	push	{r3, r4, r5, lr}
 80095a6:	4c08      	ldr	r4, [pc, #32]	; (80095c8 <_fstat_r+0x24>)
 80095a8:	2300      	movs	r3, #0
 80095aa:	4605      	mov	r5, r0
 80095ac:	4608      	mov	r0, r1
 80095ae:	4611      	mov	r1, r2
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	f7f8 f86f 	bl	8001694 <_fstat>
 80095b6:	1c43      	adds	r3, r0, #1
 80095b8:	d000      	beq.n	80095bc <_fstat_r+0x18>
 80095ba:	bd38      	pop	{r3, r4, r5, pc}
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d0fb      	beq.n	80095ba <_fstat_r+0x16>
 80095c2:	602b      	str	r3, [r5, #0]
 80095c4:	bd38      	pop	{r3, r4, r5, pc}
 80095c6:	bf00      	nop
 80095c8:	20010318 	.word	0x20010318

080095cc <_isatty_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4c07      	ldr	r4, [pc, #28]	; (80095ec <_isatty_r+0x20>)
 80095d0:	2300      	movs	r3, #0
 80095d2:	4605      	mov	r5, r0
 80095d4:	4608      	mov	r0, r1
 80095d6:	6023      	str	r3, [r4, #0]
 80095d8:	f7f8 f862 	bl	80016a0 <_isatty>
 80095dc:	1c43      	adds	r3, r0, #1
 80095de:	d000      	beq.n	80095e2 <_isatty_r+0x16>
 80095e0:	bd38      	pop	{r3, r4, r5, pc}
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d0fb      	beq.n	80095e0 <_isatty_r+0x14>
 80095e8:	602b      	str	r3, [r5, #0]
 80095ea:	bd38      	pop	{r3, r4, r5, pc}
 80095ec:	20010318 	.word	0x20010318

080095f0 <_lseek_r>:
 80095f0:	b570      	push	{r4, r5, r6, lr}
 80095f2:	4c08      	ldr	r4, [pc, #32]	; (8009614 <_lseek_r+0x24>)
 80095f4:	4606      	mov	r6, r0
 80095f6:	2500      	movs	r5, #0
 80095f8:	4608      	mov	r0, r1
 80095fa:	4611      	mov	r1, r2
 80095fc:	461a      	mov	r2, r3
 80095fe:	6025      	str	r5, [r4, #0]
 8009600:	f7f8 f850 	bl	80016a4 <_lseek>
 8009604:	1c43      	adds	r3, r0, #1
 8009606:	d000      	beq.n	800960a <_lseek_r+0x1a>
 8009608:	bd70      	pop	{r4, r5, r6, pc}
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d0fb      	beq.n	8009608 <_lseek_r+0x18>
 8009610:	6033      	str	r3, [r6, #0]
 8009612:	bd70      	pop	{r4, r5, r6, pc}
 8009614:	20010318 	.word	0x20010318

08009618 <_read_r>:
 8009618:	b570      	push	{r4, r5, r6, lr}
 800961a:	4c08      	ldr	r4, [pc, #32]	; (800963c <_read_r+0x24>)
 800961c:	4606      	mov	r6, r0
 800961e:	2500      	movs	r5, #0
 8009620:	4608      	mov	r0, r1
 8009622:	4611      	mov	r1, r2
 8009624:	461a      	mov	r2, r3
 8009626:	6025      	str	r5, [r4, #0]
 8009628:	f7f8 f83e 	bl	80016a8 <_read>
 800962c:	1c43      	adds	r3, r0, #1
 800962e:	d000      	beq.n	8009632 <_read_r+0x1a>
 8009630:	bd70      	pop	{r4, r5, r6, pc}
 8009632:	6823      	ldr	r3, [r4, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d0fb      	beq.n	8009630 <_read_r+0x18>
 8009638:	6033      	str	r3, [r6, #0]
 800963a:	bd70      	pop	{r4, r5, r6, pc}
 800963c:	20010318 	.word	0x20010318

08009640 <cleanup_glue>:
 8009640:	b538      	push	{r3, r4, r5, lr}
 8009642:	460c      	mov	r4, r1
 8009644:	6809      	ldr	r1, [r1, #0]
 8009646:	4605      	mov	r5, r0
 8009648:	b109      	cbz	r1, 800964e <cleanup_glue+0xe>
 800964a:	f7ff fff9 	bl	8009640 <cleanup_glue>
 800964e:	4628      	mov	r0, r5
 8009650:	4621      	mov	r1, r4
 8009652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009656:	f7fc bfd9 	b.w	800660c <_free_r>
 800965a:	bf00      	nop

0800965c <_reclaim_reent>:
 800965c:	4b20      	ldr	r3, [pc, #128]	; (80096e0 <_reclaim_reent+0x84>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4298      	cmp	r0, r3
 8009662:	d03c      	beq.n	80096de <_reclaim_reent+0x82>
 8009664:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009666:	b570      	push	{r4, r5, r6, lr}
 8009668:	4605      	mov	r5, r0
 800966a:	b18b      	cbz	r3, 8009690 <_reclaim_reent+0x34>
 800966c:	2600      	movs	r6, #0
 800966e:	5999      	ldr	r1, [r3, r6]
 8009670:	b139      	cbz	r1, 8009682 <_reclaim_reent+0x26>
 8009672:	680c      	ldr	r4, [r1, #0]
 8009674:	4628      	mov	r0, r5
 8009676:	f7fc ffc9 	bl	800660c <_free_r>
 800967a:	4621      	mov	r1, r4
 800967c:	2c00      	cmp	r4, #0
 800967e:	d1f8      	bne.n	8009672 <_reclaim_reent+0x16>
 8009680:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009682:	3604      	adds	r6, #4
 8009684:	2e80      	cmp	r6, #128	; 0x80
 8009686:	d1f2      	bne.n	800966e <_reclaim_reent+0x12>
 8009688:	4619      	mov	r1, r3
 800968a:	4628      	mov	r0, r5
 800968c:	f7fc ffbe 	bl	800660c <_free_r>
 8009690:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8009692:	b111      	cbz	r1, 800969a <_reclaim_reent+0x3e>
 8009694:	4628      	mov	r0, r5
 8009696:	f7fc ffb9 	bl	800660c <_free_r>
 800969a:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 800969e:	b151      	cbz	r1, 80096b6 <_reclaim_reent+0x5a>
 80096a0:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 80096a4:	42b1      	cmp	r1, r6
 80096a6:	d006      	beq.n	80096b6 <_reclaim_reent+0x5a>
 80096a8:	680c      	ldr	r4, [r1, #0]
 80096aa:	4628      	mov	r0, r5
 80096ac:	f7fc ffae 	bl	800660c <_free_r>
 80096b0:	42a6      	cmp	r6, r4
 80096b2:	4621      	mov	r1, r4
 80096b4:	d1f8      	bne.n	80096a8 <_reclaim_reent+0x4c>
 80096b6:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80096b8:	b111      	cbz	r1, 80096c0 <_reclaim_reent+0x64>
 80096ba:	4628      	mov	r0, r5
 80096bc:	f7fc ffa6 	bl	800660c <_free_r>
 80096c0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80096c2:	b903      	cbnz	r3, 80096c6 <_reclaim_reent+0x6a>
 80096c4:	bd70      	pop	{r4, r5, r6, pc}
 80096c6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80096c8:	4628      	mov	r0, r5
 80096ca:	4798      	blx	r3
 80096cc:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 80096d0:	2900      	cmp	r1, #0
 80096d2:	d0f7      	beq.n	80096c4 <_reclaim_reent+0x68>
 80096d4:	4628      	mov	r0, r5
 80096d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80096da:	f7ff bfb1 	b.w	8009640 <cleanup_glue>
 80096de:	4770      	bx	lr
 80096e0:	200004d0 	.word	0x200004d0

080096e4 <_wcrtomb_r>:
 80096e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e8:	4605      	mov	r5, r0
 80096ea:	b086      	sub	sp, #24
 80096ec:	461e      	mov	r6, r3
 80096ee:	460c      	mov	r4, r1
 80096f0:	b1a1      	cbz	r1, 800971c <_wcrtomb_r+0x38>
 80096f2:	4b10      	ldr	r3, [pc, #64]	; (8009734 <_wcrtomb_r+0x50>)
 80096f4:	4617      	mov	r7, r2
 80096f6:	f8d3 8000 	ldr.w	r8, [r3]
 80096fa:	f7fd fa5d 	bl	8006bb8 <__locale_charset>
 80096fe:	9600      	str	r6, [sp, #0]
 8009700:	4603      	mov	r3, r0
 8009702:	4621      	mov	r1, r4
 8009704:	463a      	mov	r2, r7
 8009706:	4628      	mov	r0, r5
 8009708:	47c0      	blx	r8
 800970a:	1c43      	adds	r3, r0, #1
 800970c:	d103      	bne.n	8009716 <_wcrtomb_r+0x32>
 800970e:	2200      	movs	r2, #0
 8009710:	238a      	movs	r3, #138	; 0x8a
 8009712:	6032      	str	r2, [r6, #0]
 8009714:	602b      	str	r3, [r5, #0]
 8009716:	b006      	add	sp, #24
 8009718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800971c:	4b05      	ldr	r3, [pc, #20]	; (8009734 <_wcrtomb_r+0x50>)
 800971e:	681f      	ldr	r7, [r3, #0]
 8009720:	f7fd fa4a 	bl	8006bb8 <__locale_charset>
 8009724:	9600      	str	r6, [sp, #0]
 8009726:	4603      	mov	r3, r0
 8009728:	4622      	mov	r2, r4
 800972a:	4628      	mov	r0, r5
 800972c:	a903      	add	r1, sp, #12
 800972e:	47b8      	blx	r7
 8009730:	e7eb      	b.n	800970a <_wcrtomb_r+0x26>
 8009732:	bf00      	nop
 8009734:	20000960 	.word	0x20000960

08009738 <wcrtomb>:
 8009738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800973c:	4b12      	ldr	r3, [pc, #72]	; (8009788 <wcrtomb+0x50>)
 800973e:	b086      	sub	sp, #24
 8009740:	4616      	mov	r6, r2
 8009742:	681d      	ldr	r5, [r3, #0]
 8009744:	4604      	mov	r4, r0
 8009746:	b1a0      	cbz	r0, 8009772 <wcrtomb+0x3a>
 8009748:	4b10      	ldr	r3, [pc, #64]	; (800978c <wcrtomb+0x54>)
 800974a:	460f      	mov	r7, r1
 800974c:	f8d3 8000 	ldr.w	r8, [r3]
 8009750:	f7fd fa32 	bl	8006bb8 <__locale_charset>
 8009754:	9600      	str	r6, [sp, #0]
 8009756:	4603      	mov	r3, r0
 8009758:	4621      	mov	r1, r4
 800975a:	463a      	mov	r2, r7
 800975c:	4628      	mov	r0, r5
 800975e:	47c0      	blx	r8
 8009760:	1c43      	adds	r3, r0, #1
 8009762:	d103      	bne.n	800976c <wcrtomb+0x34>
 8009764:	2200      	movs	r2, #0
 8009766:	238a      	movs	r3, #138	; 0x8a
 8009768:	6032      	str	r2, [r6, #0]
 800976a:	602b      	str	r3, [r5, #0]
 800976c:	b006      	add	sp, #24
 800976e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009772:	4b06      	ldr	r3, [pc, #24]	; (800978c <wcrtomb+0x54>)
 8009774:	681f      	ldr	r7, [r3, #0]
 8009776:	f7fd fa1f 	bl	8006bb8 <__locale_charset>
 800977a:	9600      	str	r6, [sp, #0]
 800977c:	4603      	mov	r3, r0
 800977e:	4622      	mov	r2, r4
 8009780:	4628      	mov	r0, r5
 8009782:	a903      	add	r1, sp, #12
 8009784:	47b8      	blx	r7
 8009786:	e7eb      	b.n	8009760 <wcrtomb+0x28>
 8009788:	200004d0 	.word	0x200004d0
 800978c:	20000960 	.word	0x20000960

08009790 <__ascii_wctomb>:
 8009790:	b121      	cbz	r1, 800979c <__ascii_wctomb+0xc>
 8009792:	2aff      	cmp	r2, #255	; 0xff
 8009794:	d804      	bhi.n	80097a0 <__ascii_wctomb+0x10>
 8009796:	700a      	strb	r2, [r1, #0]
 8009798:	2001      	movs	r0, #1
 800979a:	4770      	bx	lr
 800979c:	4608      	mov	r0, r1
 800979e:	4770      	bx	lr
 80097a0:	238a      	movs	r3, #138	; 0x8a
 80097a2:	6003      	str	r3, [r0, #0]
 80097a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop

080097ac <_wctomb_r>:
 80097ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097b0:	4c09      	ldr	r4, [pc, #36]	; (80097d8 <_wctomb_r+0x2c>)
 80097b2:	b082      	sub	sp, #8
 80097b4:	4698      	mov	r8, r3
 80097b6:	4605      	mov	r5, r0
 80097b8:	460f      	mov	r7, r1
 80097ba:	4616      	mov	r6, r2
 80097bc:	6824      	ldr	r4, [r4, #0]
 80097be:	f7fd f9fb 	bl	8006bb8 <__locale_charset>
 80097c2:	f8cd 8000 	str.w	r8, [sp]
 80097c6:	4603      	mov	r3, r0
 80097c8:	4639      	mov	r1, r7
 80097ca:	4632      	mov	r2, r6
 80097cc:	4628      	mov	r0, r5
 80097ce:	47a0      	blx	r4
 80097d0:	b002      	add	sp, #8
 80097d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097d6:	bf00      	nop
 80097d8:	20000960 	.word	0x20000960

080097dc <__aeabi_drsub>:
 80097dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80097e0:	e002      	b.n	80097e8 <__adddf3>
 80097e2:	bf00      	nop

080097e4 <__aeabi_dsub>:
 80097e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080097e8 <__adddf3>:
 80097e8:	b530      	push	{r4, r5, lr}
 80097ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80097ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80097f2:	ea94 0f05 	teq	r4, r5
 80097f6:	bf08      	it	eq
 80097f8:	ea90 0f02 	teqeq	r0, r2
 80097fc:	bf1f      	itttt	ne
 80097fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8009802:	ea55 0c02 	orrsne.w	ip, r5, r2
 8009806:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800980a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800980e:	f000 80e2 	beq.w	80099d6 <__adddf3+0x1ee>
 8009812:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8009816:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800981a:	bfb8      	it	lt
 800981c:	426d      	neglt	r5, r5
 800981e:	dd0c      	ble.n	800983a <__adddf3+0x52>
 8009820:	442c      	add	r4, r5
 8009822:	ea80 0202 	eor.w	r2, r0, r2
 8009826:	ea81 0303 	eor.w	r3, r1, r3
 800982a:	ea82 0000 	eor.w	r0, r2, r0
 800982e:	ea83 0101 	eor.w	r1, r3, r1
 8009832:	ea80 0202 	eor.w	r2, r0, r2
 8009836:	ea81 0303 	eor.w	r3, r1, r3
 800983a:	2d36      	cmp	r5, #54	; 0x36
 800983c:	bf88      	it	hi
 800983e:	bd30      	pophi	{r4, r5, pc}
 8009840:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8009844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8009848:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800984c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8009850:	d002      	beq.n	8009858 <__adddf3+0x70>
 8009852:	4240      	negs	r0, r0
 8009854:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8009858:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800985c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8009860:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8009864:	d002      	beq.n	800986c <__adddf3+0x84>
 8009866:	4252      	negs	r2, r2
 8009868:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800986c:	ea94 0f05 	teq	r4, r5
 8009870:	f000 80a7 	beq.w	80099c2 <__adddf3+0x1da>
 8009874:	f1a4 0401 	sub.w	r4, r4, #1
 8009878:	f1d5 0e20 	rsbs	lr, r5, #32
 800987c:	db0d      	blt.n	800989a <__adddf3+0xb2>
 800987e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8009882:	fa22 f205 	lsr.w	r2, r2, r5
 8009886:	1880      	adds	r0, r0, r2
 8009888:	f141 0100 	adc.w	r1, r1, #0
 800988c:	fa03 f20e 	lsl.w	r2, r3, lr
 8009890:	1880      	adds	r0, r0, r2
 8009892:	fa43 f305 	asr.w	r3, r3, r5
 8009896:	4159      	adcs	r1, r3
 8009898:	e00e      	b.n	80098b8 <__adddf3+0xd0>
 800989a:	f1a5 0520 	sub.w	r5, r5, #32
 800989e:	f10e 0e20 	add.w	lr, lr, #32
 80098a2:	2a01      	cmp	r2, #1
 80098a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80098a8:	bf28      	it	cs
 80098aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80098ae:	fa43 f305 	asr.w	r3, r3, r5
 80098b2:	18c0      	adds	r0, r0, r3
 80098b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80098b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80098bc:	d507      	bpl.n	80098ce <__adddf3+0xe6>
 80098be:	f04f 0e00 	mov.w	lr, #0
 80098c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80098c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80098ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80098ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80098d2:	d31b      	bcc.n	800990c <__adddf3+0x124>
 80098d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80098d8:	d30c      	bcc.n	80098f4 <__adddf3+0x10c>
 80098da:	0849      	lsrs	r1, r1, #1
 80098dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80098e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80098e4:	f104 0401 	add.w	r4, r4, #1
 80098e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80098ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80098f0:	f080 809a 	bcs.w	8009a28 <__adddf3+0x240>
 80098f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80098f8:	bf08      	it	eq
 80098fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80098fe:	f150 0000 	adcs.w	r0, r0, #0
 8009902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8009906:	ea41 0105 	orr.w	r1, r1, r5
 800990a:	bd30      	pop	{r4, r5, pc}
 800990c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8009910:	4140      	adcs	r0, r0
 8009912:	eb41 0101 	adc.w	r1, r1, r1
 8009916:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800991a:	f1a4 0401 	sub.w	r4, r4, #1
 800991e:	d1e9      	bne.n	80098f4 <__adddf3+0x10c>
 8009920:	f091 0f00 	teq	r1, #0
 8009924:	bf04      	itt	eq
 8009926:	4601      	moveq	r1, r0
 8009928:	2000      	moveq	r0, #0
 800992a:	fab1 f381 	clz	r3, r1
 800992e:	bf08      	it	eq
 8009930:	3320      	addeq	r3, #32
 8009932:	f1a3 030b 	sub.w	r3, r3, #11
 8009936:	f1b3 0220 	subs.w	r2, r3, #32
 800993a:	da0c      	bge.n	8009956 <__adddf3+0x16e>
 800993c:	320c      	adds	r2, #12
 800993e:	dd08      	ble.n	8009952 <__adddf3+0x16a>
 8009940:	f102 0c14 	add.w	ip, r2, #20
 8009944:	f1c2 020c 	rsb	r2, r2, #12
 8009948:	fa01 f00c 	lsl.w	r0, r1, ip
 800994c:	fa21 f102 	lsr.w	r1, r1, r2
 8009950:	e00c      	b.n	800996c <__adddf3+0x184>
 8009952:	f102 0214 	add.w	r2, r2, #20
 8009956:	bfd8      	it	le
 8009958:	f1c2 0c20 	rsble	ip, r2, #32
 800995c:	fa01 f102 	lsl.w	r1, r1, r2
 8009960:	fa20 fc0c 	lsr.w	ip, r0, ip
 8009964:	bfdc      	itt	le
 8009966:	ea41 010c 	orrle.w	r1, r1, ip
 800996a:	4090      	lslle	r0, r2
 800996c:	1ae4      	subs	r4, r4, r3
 800996e:	bfa2      	ittt	ge
 8009970:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8009974:	4329      	orrge	r1, r5
 8009976:	bd30      	popge	{r4, r5, pc}
 8009978:	ea6f 0404 	mvn.w	r4, r4
 800997c:	3c1f      	subs	r4, #31
 800997e:	da1c      	bge.n	80099ba <__adddf3+0x1d2>
 8009980:	340c      	adds	r4, #12
 8009982:	dc0e      	bgt.n	80099a2 <__adddf3+0x1ba>
 8009984:	f104 0414 	add.w	r4, r4, #20
 8009988:	f1c4 0220 	rsb	r2, r4, #32
 800998c:	fa20 f004 	lsr.w	r0, r0, r4
 8009990:	fa01 f302 	lsl.w	r3, r1, r2
 8009994:	ea40 0003 	orr.w	r0, r0, r3
 8009998:	fa21 f304 	lsr.w	r3, r1, r4
 800999c:	ea45 0103 	orr.w	r1, r5, r3
 80099a0:	bd30      	pop	{r4, r5, pc}
 80099a2:	f1c4 040c 	rsb	r4, r4, #12
 80099a6:	f1c4 0220 	rsb	r2, r4, #32
 80099aa:	fa20 f002 	lsr.w	r0, r0, r2
 80099ae:	fa01 f304 	lsl.w	r3, r1, r4
 80099b2:	ea40 0003 	orr.w	r0, r0, r3
 80099b6:	4629      	mov	r1, r5
 80099b8:	bd30      	pop	{r4, r5, pc}
 80099ba:	fa21 f004 	lsr.w	r0, r1, r4
 80099be:	4629      	mov	r1, r5
 80099c0:	bd30      	pop	{r4, r5, pc}
 80099c2:	f094 0f00 	teq	r4, #0
 80099c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80099ca:	bf06      	itte	eq
 80099cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80099d0:	3401      	addeq	r4, #1
 80099d2:	3d01      	subne	r5, #1
 80099d4:	e74e      	b.n	8009874 <__adddf3+0x8c>
 80099d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80099da:	bf18      	it	ne
 80099dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80099e0:	d029      	beq.n	8009a36 <__adddf3+0x24e>
 80099e2:	ea94 0f05 	teq	r4, r5
 80099e6:	bf08      	it	eq
 80099e8:	ea90 0f02 	teqeq	r0, r2
 80099ec:	d005      	beq.n	80099fa <__adddf3+0x212>
 80099ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80099f2:	bf04      	itt	eq
 80099f4:	4619      	moveq	r1, r3
 80099f6:	4610      	moveq	r0, r2
 80099f8:	bd30      	pop	{r4, r5, pc}
 80099fa:	ea91 0f03 	teq	r1, r3
 80099fe:	bf1e      	ittt	ne
 8009a00:	2100      	movne	r1, #0
 8009a02:	2000      	movne	r0, #0
 8009a04:	bd30      	popne	{r4, r5, pc}
 8009a06:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8009a0a:	d105      	bne.n	8009a18 <__adddf3+0x230>
 8009a0c:	0040      	lsls	r0, r0, #1
 8009a0e:	4149      	adcs	r1, r1
 8009a10:	bf28      	it	cs
 8009a12:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8009a16:	bd30      	pop	{r4, r5, pc}
 8009a18:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8009a1c:	bf3c      	itt	cc
 8009a1e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8009a22:	bd30      	popcc	{r4, r5, pc}
 8009a24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8009a28:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8009a2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009a30:	f04f 0000 	mov.w	r0, #0
 8009a34:	bd30      	pop	{r4, r5, pc}
 8009a36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8009a3a:	bf1a      	itte	ne
 8009a3c:	4619      	movne	r1, r3
 8009a3e:	4610      	movne	r0, r2
 8009a40:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8009a44:	bf1c      	itt	ne
 8009a46:	460b      	movne	r3, r1
 8009a48:	4602      	movne	r2, r0
 8009a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8009a4e:	bf06      	itte	eq
 8009a50:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8009a54:	ea91 0f03 	teqeq	r1, r3
 8009a58:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8009a5c:	bd30      	pop	{r4, r5, pc}
 8009a5e:	bf00      	nop

08009a60 <__aeabi_ui2d>:
 8009a60:	f090 0f00 	teq	r0, #0
 8009a64:	bf04      	itt	eq
 8009a66:	2100      	moveq	r1, #0
 8009a68:	4770      	bxeq	lr
 8009a6a:	b530      	push	{r4, r5, lr}
 8009a6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8009a70:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8009a74:	f04f 0500 	mov.w	r5, #0
 8009a78:	f04f 0100 	mov.w	r1, #0
 8009a7c:	e750      	b.n	8009920 <__adddf3+0x138>
 8009a7e:	bf00      	nop

08009a80 <__aeabi_i2d>:
 8009a80:	f090 0f00 	teq	r0, #0
 8009a84:	bf04      	itt	eq
 8009a86:	2100      	moveq	r1, #0
 8009a88:	4770      	bxeq	lr
 8009a8a:	b530      	push	{r4, r5, lr}
 8009a8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8009a90:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8009a94:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8009a98:	bf48      	it	mi
 8009a9a:	4240      	negmi	r0, r0
 8009a9c:	f04f 0100 	mov.w	r1, #0
 8009aa0:	e73e      	b.n	8009920 <__adddf3+0x138>
 8009aa2:	bf00      	nop

08009aa4 <__aeabi_f2d>:
 8009aa4:	0042      	lsls	r2, r0, #1
 8009aa6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8009aaa:	ea4f 0131 	mov.w	r1, r1, rrx
 8009aae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8009ab2:	bf1f      	itttt	ne
 8009ab4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8009ab8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8009abc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8009ac0:	4770      	bxne	lr
 8009ac2:	f092 0f00 	teq	r2, #0
 8009ac6:	bf14      	ite	ne
 8009ac8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8009acc:	4770      	bxeq	lr
 8009ace:	b530      	push	{r4, r5, lr}
 8009ad0:	f44f 7460 	mov.w	r4, #896	; 0x380
 8009ad4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8009ad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009adc:	e720      	b.n	8009920 <__adddf3+0x138>
 8009ade:	bf00      	nop

08009ae0 <__aeabi_ul2d>:
 8009ae0:	ea50 0201 	orrs.w	r2, r0, r1
 8009ae4:	bf08      	it	eq
 8009ae6:	4770      	bxeq	lr
 8009ae8:	b530      	push	{r4, r5, lr}
 8009aea:	f04f 0500 	mov.w	r5, #0
 8009aee:	e00a      	b.n	8009b06 <__aeabi_l2d+0x16>

08009af0 <__aeabi_l2d>:
 8009af0:	ea50 0201 	orrs.w	r2, r0, r1
 8009af4:	bf08      	it	eq
 8009af6:	4770      	bxeq	lr
 8009af8:	b530      	push	{r4, r5, lr}
 8009afa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8009afe:	d502      	bpl.n	8009b06 <__aeabi_l2d+0x16>
 8009b00:	4240      	negs	r0, r0
 8009b02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8009b06:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8009b0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8009b0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8009b12:	f43f aedc 	beq.w	80098ce <__adddf3+0xe6>
 8009b16:	f04f 0203 	mov.w	r2, #3
 8009b1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009b1e:	bf18      	it	ne
 8009b20:	3203      	addne	r2, #3
 8009b22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009b26:	bf18      	it	ne
 8009b28:	3203      	addne	r2, #3
 8009b2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8009b2e:	f1c2 0320 	rsb	r3, r2, #32
 8009b32:	fa00 fc03 	lsl.w	ip, r0, r3
 8009b36:	fa20 f002 	lsr.w	r0, r0, r2
 8009b3a:	fa01 fe03 	lsl.w	lr, r1, r3
 8009b3e:	ea40 000e 	orr.w	r0, r0, lr
 8009b42:	fa21 f102 	lsr.w	r1, r1, r2
 8009b46:	4414      	add	r4, r2
 8009b48:	e6c1      	b.n	80098ce <__adddf3+0xe6>
 8009b4a:	bf00      	nop

08009b4c <__aeabi_dmul>:
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8009b52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8009b56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8009b5a:	bf1d      	ittte	ne
 8009b5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8009b60:	ea94 0f0c 	teqne	r4, ip
 8009b64:	ea95 0f0c 	teqne	r5, ip
 8009b68:	f000 f8de 	bleq	8009d28 <__aeabi_dmul+0x1dc>
 8009b6c:	442c      	add	r4, r5
 8009b6e:	ea81 0603 	eor.w	r6, r1, r3
 8009b72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8009b76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8009b7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8009b7e:	bf18      	it	ne
 8009b80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8009b84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b8c:	d038      	beq.n	8009c00 <__aeabi_dmul+0xb4>
 8009b8e:	fba0 ce02 	umull	ip, lr, r0, r2
 8009b92:	f04f 0500 	mov.w	r5, #0
 8009b96:	fbe1 e502 	umlal	lr, r5, r1, r2
 8009b9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8009b9e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8009ba2:	f04f 0600 	mov.w	r6, #0
 8009ba6:	fbe1 5603 	umlal	r5, r6, r1, r3
 8009baa:	f09c 0f00 	teq	ip, #0
 8009bae:	bf18      	it	ne
 8009bb0:	f04e 0e01 	orrne.w	lr, lr, #1
 8009bb4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8009bb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8009bbc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8009bc0:	d204      	bcs.n	8009bcc <__aeabi_dmul+0x80>
 8009bc2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8009bc6:	416d      	adcs	r5, r5
 8009bc8:	eb46 0606 	adc.w	r6, r6, r6
 8009bcc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8009bd0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8009bd4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8009bd8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8009bdc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8009be0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8009be4:	bf88      	it	hi
 8009be6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8009bea:	d81e      	bhi.n	8009c2a <__aeabi_dmul+0xde>
 8009bec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8009bf0:	bf08      	it	eq
 8009bf2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8009bf6:	f150 0000 	adcs.w	r0, r0, #0
 8009bfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8009bfe:	bd70      	pop	{r4, r5, r6, pc}
 8009c00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8009c04:	ea46 0101 	orr.w	r1, r6, r1
 8009c08:	ea40 0002 	orr.w	r0, r0, r2
 8009c0c:	ea81 0103 	eor.w	r1, r1, r3
 8009c10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8009c14:	bfc2      	ittt	gt
 8009c16:	ebd4 050c 	rsbsgt	r5, r4, ip
 8009c1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8009c1e:	bd70      	popgt	{r4, r5, r6, pc}
 8009c20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009c24:	f04f 0e00 	mov.w	lr, #0
 8009c28:	3c01      	subs	r4, #1
 8009c2a:	f300 80ab 	bgt.w	8009d84 <__aeabi_dmul+0x238>
 8009c2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8009c32:	bfde      	ittt	le
 8009c34:	2000      	movle	r0, #0
 8009c36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8009c3a:	bd70      	pople	{r4, r5, r6, pc}
 8009c3c:	f1c4 0400 	rsb	r4, r4, #0
 8009c40:	3c20      	subs	r4, #32
 8009c42:	da35      	bge.n	8009cb0 <__aeabi_dmul+0x164>
 8009c44:	340c      	adds	r4, #12
 8009c46:	dc1b      	bgt.n	8009c80 <__aeabi_dmul+0x134>
 8009c48:	f104 0414 	add.w	r4, r4, #20
 8009c4c:	f1c4 0520 	rsb	r5, r4, #32
 8009c50:	fa00 f305 	lsl.w	r3, r0, r5
 8009c54:	fa20 f004 	lsr.w	r0, r0, r4
 8009c58:	fa01 f205 	lsl.w	r2, r1, r5
 8009c5c:	ea40 0002 	orr.w	r0, r0, r2
 8009c60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8009c64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009c68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8009c6c:	fa21 f604 	lsr.w	r6, r1, r4
 8009c70:	eb42 0106 	adc.w	r1, r2, r6
 8009c74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009c78:	bf08      	it	eq
 8009c7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8009c7e:	bd70      	pop	{r4, r5, r6, pc}
 8009c80:	f1c4 040c 	rsb	r4, r4, #12
 8009c84:	f1c4 0520 	rsb	r5, r4, #32
 8009c88:	fa00 f304 	lsl.w	r3, r0, r4
 8009c8c:	fa20 f005 	lsr.w	r0, r0, r5
 8009c90:	fa01 f204 	lsl.w	r2, r1, r4
 8009c94:	ea40 0002 	orr.w	r0, r0, r2
 8009c98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009c9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8009ca0:	f141 0100 	adc.w	r1, r1, #0
 8009ca4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009ca8:	bf08      	it	eq
 8009caa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8009cae:	bd70      	pop	{r4, r5, r6, pc}
 8009cb0:	f1c4 0520 	rsb	r5, r4, #32
 8009cb4:	fa00 f205 	lsl.w	r2, r0, r5
 8009cb8:	ea4e 0e02 	orr.w	lr, lr, r2
 8009cbc:	fa20 f304 	lsr.w	r3, r0, r4
 8009cc0:	fa01 f205 	lsl.w	r2, r1, r5
 8009cc4:	ea43 0302 	orr.w	r3, r3, r2
 8009cc8:	fa21 f004 	lsr.w	r0, r1, r4
 8009ccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009cd0:	fa21 f204 	lsr.w	r2, r1, r4
 8009cd4:	ea20 0002 	bic.w	r0, r0, r2
 8009cd8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8009cdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009ce0:	bf08      	it	eq
 8009ce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8009ce6:	bd70      	pop	{r4, r5, r6, pc}
 8009ce8:	f094 0f00 	teq	r4, #0
 8009cec:	d10f      	bne.n	8009d0e <__aeabi_dmul+0x1c2>
 8009cee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8009cf2:	0040      	lsls	r0, r0, #1
 8009cf4:	eb41 0101 	adc.w	r1, r1, r1
 8009cf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009cfc:	bf08      	it	eq
 8009cfe:	3c01      	subeq	r4, #1
 8009d00:	d0f7      	beq.n	8009cf2 <__aeabi_dmul+0x1a6>
 8009d02:	ea41 0106 	orr.w	r1, r1, r6
 8009d06:	f095 0f00 	teq	r5, #0
 8009d0a:	bf18      	it	ne
 8009d0c:	4770      	bxne	lr
 8009d0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8009d12:	0052      	lsls	r2, r2, #1
 8009d14:	eb43 0303 	adc.w	r3, r3, r3
 8009d18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8009d1c:	bf08      	it	eq
 8009d1e:	3d01      	subeq	r5, #1
 8009d20:	d0f7      	beq.n	8009d12 <__aeabi_dmul+0x1c6>
 8009d22:	ea43 0306 	orr.w	r3, r3, r6
 8009d26:	4770      	bx	lr
 8009d28:	ea94 0f0c 	teq	r4, ip
 8009d2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8009d30:	bf18      	it	ne
 8009d32:	ea95 0f0c 	teqne	r5, ip
 8009d36:	d00c      	beq.n	8009d52 <__aeabi_dmul+0x206>
 8009d38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8009d3c:	bf18      	it	ne
 8009d3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8009d42:	d1d1      	bne.n	8009ce8 <__aeabi_dmul+0x19c>
 8009d44:	ea81 0103 	eor.w	r1, r1, r3
 8009d48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009d4c:	f04f 0000 	mov.w	r0, #0
 8009d50:	bd70      	pop	{r4, r5, r6, pc}
 8009d52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8009d56:	bf06      	itte	eq
 8009d58:	4610      	moveq	r0, r2
 8009d5a:	4619      	moveq	r1, r3
 8009d5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8009d60:	d019      	beq.n	8009d96 <__aeabi_dmul+0x24a>
 8009d62:	ea94 0f0c 	teq	r4, ip
 8009d66:	d102      	bne.n	8009d6e <__aeabi_dmul+0x222>
 8009d68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8009d6c:	d113      	bne.n	8009d96 <__aeabi_dmul+0x24a>
 8009d6e:	ea95 0f0c 	teq	r5, ip
 8009d72:	d105      	bne.n	8009d80 <__aeabi_dmul+0x234>
 8009d74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8009d78:	bf1c      	itt	ne
 8009d7a:	4610      	movne	r0, r2
 8009d7c:	4619      	movne	r1, r3
 8009d7e:	d10a      	bne.n	8009d96 <__aeabi_dmul+0x24a>
 8009d80:	ea81 0103 	eor.w	r1, r1, r3
 8009d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009d88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8009d8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d90:	f04f 0000 	mov.w	r0, #0
 8009d94:	bd70      	pop	{r4, r5, r6, pc}
 8009d96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8009d9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8009d9e:	bd70      	pop	{r4, r5, r6, pc}

08009da0 <__aeabi_ddiv>:
 8009da0:	b570      	push	{r4, r5, r6, lr}
 8009da2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8009da6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8009daa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8009dae:	bf1d      	ittte	ne
 8009db0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8009db4:	ea94 0f0c 	teqne	r4, ip
 8009db8:	ea95 0f0c 	teqne	r5, ip
 8009dbc:	f000 f8a7 	bleq	8009f0e <__aeabi_ddiv+0x16e>
 8009dc0:	eba4 0405 	sub.w	r4, r4, r5
 8009dc4:	ea81 0e03 	eor.w	lr, r1, r3
 8009dc8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8009dcc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8009dd0:	f000 8088 	beq.w	8009ee4 <__aeabi_ddiv+0x144>
 8009dd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8009dd8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8009ddc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8009de0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8009de4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8009de8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8009dec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8009df0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8009df4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8009df8:	429d      	cmp	r5, r3
 8009dfa:	bf08      	it	eq
 8009dfc:	4296      	cmpeq	r6, r2
 8009dfe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8009e02:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8009e06:	d202      	bcs.n	8009e0e <__aeabi_ddiv+0x6e>
 8009e08:	085b      	lsrs	r3, r3, #1
 8009e0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8009e0e:	1ab6      	subs	r6, r6, r2
 8009e10:	eb65 0503 	sbc.w	r5, r5, r3
 8009e14:	085b      	lsrs	r3, r3, #1
 8009e16:	ea4f 0232 	mov.w	r2, r2, rrx
 8009e1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009e1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8009e22:	ebb6 0e02 	subs.w	lr, r6, r2
 8009e26:	eb75 0e03 	sbcs.w	lr, r5, r3
 8009e2a:	bf22      	ittt	cs
 8009e2c:	1ab6      	subcs	r6, r6, r2
 8009e2e:	4675      	movcs	r5, lr
 8009e30:	ea40 000c 	orrcs.w	r0, r0, ip
 8009e34:	085b      	lsrs	r3, r3, #1
 8009e36:	ea4f 0232 	mov.w	r2, r2, rrx
 8009e3a:	ebb6 0e02 	subs.w	lr, r6, r2
 8009e3e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8009e42:	bf22      	ittt	cs
 8009e44:	1ab6      	subcs	r6, r6, r2
 8009e46:	4675      	movcs	r5, lr
 8009e48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8009e4c:	085b      	lsrs	r3, r3, #1
 8009e4e:	ea4f 0232 	mov.w	r2, r2, rrx
 8009e52:	ebb6 0e02 	subs.w	lr, r6, r2
 8009e56:	eb75 0e03 	sbcs.w	lr, r5, r3
 8009e5a:	bf22      	ittt	cs
 8009e5c:	1ab6      	subcs	r6, r6, r2
 8009e5e:	4675      	movcs	r5, lr
 8009e60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8009e64:	085b      	lsrs	r3, r3, #1
 8009e66:	ea4f 0232 	mov.w	r2, r2, rrx
 8009e6a:	ebb6 0e02 	subs.w	lr, r6, r2
 8009e6e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8009e72:	bf22      	ittt	cs
 8009e74:	1ab6      	subcs	r6, r6, r2
 8009e76:	4675      	movcs	r5, lr
 8009e78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8009e7c:	ea55 0e06 	orrs.w	lr, r5, r6
 8009e80:	d018      	beq.n	8009eb4 <__aeabi_ddiv+0x114>
 8009e82:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8009e86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8009e8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8009e8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8009e92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8009e96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8009e9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8009e9e:	d1c0      	bne.n	8009e22 <__aeabi_ddiv+0x82>
 8009ea0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009ea4:	d10b      	bne.n	8009ebe <__aeabi_ddiv+0x11e>
 8009ea6:	ea41 0100 	orr.w	r1, r1, r0
 8009eaa:	f04f 0000 	mov.w	r0, #0
 8009eae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8009eb2:	e7b6      	b.n	8009e22 <__aeabi_ddiv+0x82>
 8009eb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009eb8:	bf04      	itt	eq
 8009eba:	4301      	orreq	r1, r0
 8009ebc:	2000      	moveq	r0, #0
 8009ebe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8009ec2:	bf88      	it	hi
 8009ec4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8009ec8:	f63f aeaf 	bhi.w	8009c2a <__aeabi_dmul+0xde>
 8009ecc:	ebb5 0c03 	subs.w	ip, r5, r3
 8009ed0:	bf04      	itt	eq
 8009ed2:	ebb6 0c02 	subseq.w	ip, r6, r2
 8009ed6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8009eda:	f150 0000 	adcs.w	r0, r0, #0
 8009ede:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}
 8009ee4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8009ee8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8009eec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8009ef0:	bfc2      	ittt	gt
 8009ef2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8009ef6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8009efa:	bd70      	popgt	{r4, r5, r6, pc}
 8009efc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009f00:	f04f 0e00 	mov.w	lr, #0
 8009f04:	3c01      	subs	r4, #1
 8009f06:	e690      	b.n	8009c2a <__aeabi_dmul+0xde>
 8009f08:	ea45 0e06 	orr.w	lr, r5, r6
 8009f0c:	e68d      	b.n	8009c2a <__aeabi_dmul+0xde>
 8009f0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8009f12:	ea94 0f0c 	teq	r4, ip
 8009f16:	bf08      	it	eq
 8009f18:	ea95 0f0c 	teqeq	r5, ip
 8009f1c:	f43f af3b 	beq.w	8009d96 <__aeabi_dmul+0x24a>
 8009f20:	ea94 0f0c 	teq	r4, ip
 8009f24:	d10a      	bne.n	8009f3c <__aeabi_ddiv+0x19c>
 8009f26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8009f2a:	f47f af34 	bne.w	8009d96 <__aeabi_dmul+0x24a>
 8009f2e:	ea95 0f0c 	teq	r5, ip
 8009f32:	f47f af25 	bne.w	8009d80 <__aeabi_dmul+0x234>
 8009f36:	4610      	mov	r0, r2
 8009f38:	4619      	mov	r1, r3
 8009f3a:	e72c      	b.n	8009d96 <__aeabi_dmul+0x24a>
 8009f3c:	ea95 0f0c 	teq	r5, ip
 8009f40:	d106      	bne.n	8009f50 <__aeabi_ddiv+0x1b0>
 8009f42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8009f46:	f43f aefd 	beq.w	8009d44 <__aeabi_dmul+0x1f8>
 8009f4a:	4610      	mov	r0, r2
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	e722      	b.n	8009d96 <__aeabi_dmul+0x24a>
 8009f50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8009f54:	bf18      	it	ne
 8009f56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8009f5a:	f47f aec5 	bne.w	8009ce8 <__aeabi_dmul+0x19c>
 8009f5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8009f62:	f47f af0d 	bne.w	8009d80 <__aeabi_dmul+0x234>
 8009f66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8009f6a:	f47f aeeb 	bne.w	8009d44 <__aeabi_dmul+0x1f8>
 8009f6e:	e712      	b.n	8009d96 <__aeabi_dmul+0x24a>

08009f70 <__gedf2>:
 8009f70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009f74:	e006      	b.n	8009f84 <__cmpdf2+0x4>
 8009f76:	bf00      	nop

08009f78 <__ledf2>:
 8009f78:	f04f 0c01 	mov.w	ip, #1
 8009f7c:	e002      	b.n	8009f84 <__cmpdf2+0x4>
 8009f7e:	bf00      	nop

08009f80 <__cmpdf2>:
 8009f80:	f04f 0c01 	mov.w	ip, #1
 8009f84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8009f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8009f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8009f90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8009f94:	bf18      	it	ne
 8009f96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8009f9a:	d01b      	beq.n	8009fd4 <__cmpdf2+0x54>
 8009f9c:	b001      	add	sp, #4
 8009f9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8009fa2:	bf0c      	ite	eq
 8009fa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8009fa8:	ea91 0f03 	teqne	r1, r3
 8009fac:	bf02      	ittt	eq
 8009fae:	ea90 0f02 	teqeq	r0, r2
 8009fb2:	2000      	moveq	r0, #0
 8009fb4:	4770      	bxeq	lr
 8009fb6:	f110 0f00 	cmn.w	r0, #0
 8009fba:	ea91 0f03 	teq	r1, r3
 8009fbe:	bf58      	it	pl
 8009fc0:	4299      	cmppl	r1, r3
 8009fc2:	bf08      	it	eq
 8009fc4:	4290      	cmpeq	r0, r2
 8009fc6:	bf2c      	ite	cs
 8009fc8:	17d8      	asrcs	r0, r3, #31
 8009fca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8009fce:	f040 0001 	orr.w	r0, r0, #1
 8009fd2:	4770      	bx	lr
 8009fd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8009fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8009fdc:	d102      	bne.n	8009fe4 <__cmpdf2+0x64>
 8009fde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8009fe2:	d107      	bne.n	8009ff4 <__cmpdf2+0x74>
 8009fe4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8009fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8009fec:	d1d6      	bne.n	8009f9c <__cmpdf2+0x1c>
 8009fee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8009ff2:	d0d3      	beq.n	8009f9c <__cmpdf2+0x1c>
 8009ff4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop

08009ffc <__aeabi_cdrcmple>:
 8009ffc:	4684      	mov	ip, r0
 8009ffe:	4610      	mov	r0, r2
 800a000:	4662      	mov	r2, ip
 800a002:	468c      	mov	ip, r1
 800a004:	4619      	mov	r1, r3
 800a006:	4663      	mov	r3, ip
 800a008:	e000      	b.n	800a00c <__aeabi_cdcmpeq>
 800a00a:	bf00      	nop

0800a00c <__aeabi_cdcmpeq>:
 800a00c:	b501      	push	{r0, lr}
 800a00e:	f7ff ffb7 	bl	8009f80 <__cmpdf2>
 800a012:	2800      	cmp	r0, #0
 800a014:	bf48      	it	mi
 800a016:	f110 0f00 	cmnmi.w	r0, #0
 800a01a:	bd01      	pop	{r0, pc}

0800a01c <__aeabi_dcmpeq>:
 800a01c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800a020:	f7ff fff4 	bl	800a00c <__aeabi_cdcmpeq>
 800a024:	bf0c      	ite	eq
 800a026:	2001      	moveq	r0, #1
 800a028:	2000      	movne	r0, #0
 800a02a:	f85d fb08 	ldr.w	pc, [sp], #8
 800a02e:	bf00      	nop

0800a030 <__aeabi_dcmplt>:
 800a030:	f84d ed08 	str.w	lr, [sp, #-8]!
 800a034:	f7ff ffea 	bl	800a00c <__aeabi_cdcmpeq>
 800a038:	bf34      	ite	cc
 800a03a:	2001      	movcc	r0, #1
 800a03c:	2000      	movcs	r0, #0
 800a03e:	f85d fb08 	ldr.w	pc, [sp], #8
 800a042:	bf00      	nop

0800a044 <__aeabi_dcmple>:
 800a044:	f84d ed08 	str.w	lr, [sp, #-8]!
 800a048:	f7ff ffe0 	bl	800a00c <__aeabi_cdcmpeq>
 800a04c:	bf94      	ite	ls
 800a04e:	2001      	movls	r0, #1
 800a050:	2000      	movhi	r0, #0
 800a052:	f85d fb08 	ldr.w	pc, [sp], #8
 800a056:	bf00      	nop

0800a058 <__aeabi_dcmpge>:
 800a058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800a05c:	f7ff ffce 	bl	8009ffc <__aeabi_cdrcmple>
 800a060:	bf94      	ite	ls
 800a062:	2001      	movls	r0, #1
 800a064:	2000      	movhi	r0, #0
 800a066:	f85d fb08 	ldr.w	pc, [sp], #8
 800a06a:	bf00      	nop

0800a06c <__aeabi_dcmpgt>:
 800a06c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800a070:	f7ff ffc4 	bl	8009ffc <__aeabi_cdrcmple>
 800a074:	bf34      	ite	cc
 800a076:	2001      	movcc	r0, #1
 800a078:	2000      	movcs	r0, #0
 800a07a:	f85d fb08 	ldr.w	pc, [sp], #8
 800a07e:	bf00      	nop

0800a080 <__aeabi_d2iz>:
 800a080:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800a084:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800a088:	d215      	bcs.n	800a0b6 <__aeabi_d2iz+0x36>
 800a08a:	d511      	bpl.n	800a0b0 <__aeabi_d2iz+0x30>
 800a08c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800a090:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800a094:	d912      	bls.n	800a0bc <__aeabi_d2iz+0x3c>
 800a096:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800a09a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a09e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800a0a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800a0a6:	fa23 f002 	lsr.w	r0, r3, r2
 800a0aa:	bf18      	it	ne
 800a0ac:	4240      	negne	r0, r0
 800a0ae:	4770      	bx	lr
 800a0b0:	f04f 0000 	mov.w	r0, #0
 800a0b4:	4770      	bx	lr
 800a0b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800a0ba:	d105      	bne.n	800a0c8 <__aeabi_d2iz+0x48>
 800a0bc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800a0c0:	bf08      	it	eq
 800a0c2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800a0c6:	4770      	bx	lr
 800a0c8:	f04f 0000 	mov.w	r0, #0
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop

0800a0d0 <__aeabi_uldivmod>:
 800a0d0:	b953      	cbnz	r3, 800a0e8 <__aeabi_uldivmod+0x18>
 800a0d2:	b94a      	cbnz	r2, 800a0e8 <__aeabi_uldivmod+0x18>
 800a0d4:	2900      	cmp	r1, #0
 800a0d6:	bf08      	it	eq
 800a0d8:	2800      	cmpeq	r0, #0
 800a0da:	bf1c      	itt	ne
 800a0dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800a0e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800a0e4:	f000 b83c 	b.w	800a160 <__aeabi_idiv0>
 800a0e8:	b082      	sub	sp, #8
 800a0ea:	46ec      	mov	ip, sp
 800a0ec:	e92d 5000 	stmdb	sp!, {ip, lr}
 800a0f0:	f000 f81e 	bl	800a130 <__gnu_uldivmod_helper>
 800a0f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a0f8:	b002      	add	sp, #8
 800a0fa:	bc0c      	pop	{r2, r3}
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop

0800a100 <__gnu_ldivmod_helper>:
 800a100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a104:	9c06      	ldr	r4, [sp, #24]
 800a106:	4615      	mov	r5, r2
 800a108:	4606      	mov	r6, r0
 800a10a:	460f      	mov	r7, r1
 800a10c:	4698      	mov	r8, r3
 800a10e:	f000 f829 	bl	800a164 <__divdi3>
 800a112:	fb05 f301 	mul.w	r3, r5, r1
 800a116:	fb00 3808 	mla	r8, r0, r8, r3
 800a11a:	fba5 2300 	umull	r2, r3, r5, r0
 800a11e:	1ab2      	subs	r2, r6, r2
 800a120:	4443      	add	r3, r8
 800a122:	eb67 0303 	sbc.w	r3, r7, r3
 800a126:	e9c4 2300 	strd	r2, r3, [r4]
 800a12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a12e:	bf00      	nop

0800a130 <__gnu_uldivmod_helper>:
 800a130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a134:	9c06      	ldr	r4, [sp, #24]
 800a136:	4690      	mov	r8, r2
 800a138:	4606      	mov	r6, r0
 800a13a:	460f      	mov	r7, r1
 800a13c:	461d      	mov	r5, r3
 800a13e:	f000 f95f 	bl	800a400 <__udivdi3>
 800a142:	fb00 f505 	mul.w	r5, r0, r5
 800a146:	fba0 2308 	umull	r2, r3, r0, r8
 800a14a:	fb08 5501 	mla	r5, r8, r1, r5
 800a14e:	1ab2      	subs	r2, r6, r2
 800a150:	442b      	add	r3, r5
 800a152:	eb67 0303 	sbc.w	r3, r7, r3
 800a156:	e9c4 2300 	strd	r2, r3, [r4]
 800a15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a15e:	bf00      	nop

0800a160 <__aeabi_idiv0>:
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop

0800a164 <__divdi3>:
 800a164:	2900      	cmp	r1, #0
 800a166:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a16a:	f2c0 80a6 	blt.w	800a2ba <__divdi3+0x156>
 800a16e:	2600      	movs	r6, #0
 800a170:	2b00      	cmp	r3, #0
 800a172:	f2c0 809c 	blt.w	800a2ae <__divdi3+0x14a>
 800a176:	4688      	mov	r8, r1
 800a178:	4694      	mov	ip, r2
 800a17a:	469e      	mov	lr, r3
 800a17c:	4615      	mov	r5, r2
 800a17e:	4604      	mov	r4, r0
 800a180:	460f      	mov	r7, r1
 800a182:	2b00      	cmp	r3, #0
 800a184:	d13d      	bne.n	800a202 <__divdi3+0x9e>
 800a186:	428a      	cmp	r2, r1
 800a188:	d959      	bls.n	800a23e <__divdi3+0xda>
 800a18a:	fab2 f382 	clz	r3, r2
 800a18e:	b13b      	cbz	r3, 800a1a0 <__divdi3+0x3c>
 800a190:	f1c3 0220 	rsb	r2, r3, #32
 800a194:	409f      	lsls	r7, r3
 800a196:	fa20 f202 	lsr.w	r2, r0, r2
 800a19a:	409d      	lsls	r5, r3
 800a19c:	4317      	orrs	r7, r2
 800a19e:	409c      	lsls	r4, r3
 800a1a0:	0c29      	lsrs	r1, r5, #16
 800a1a2:	0c22      	lsrs	r2, r4, #16
 800a1a4:	fbb7 fef1 	udiv	lr, r7, r1
 800a1a8:	b2a8      	uxth	r0, r5
 800a1aa:	fb01 771e 	mls	r7, r1, lr, r7
 800a1ae:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800a1b2:	fb00 f30e 	mul.w	r3, r0, lr
 800a1b6:	42bb      	cmp	r3, r7
 800a1b8:	d90a      	bls.n	800a1d0 <__divdi3+0x6c>
 800a1ba:	197f      	adds	r7, r7, r5
 800a1bc:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
 800a1c0:	f080 8105 	bcs.w	800a3ce <__divdi3+0x26a>
 800a1c4:	42bb      	cmp	r3, r7
 800a1c6:	f240 8102 	bls.w	800a3ce <__divdi3+0x26a>
 800a1ca:	f1ae 0e02 	sub.w	lr, lr, #2
 800a1ce:	442f      	add	r7, r5
 800a1d0:	1aff      	subs	r7, r7, r3
 800a1d2:	b2a4      	uxth	r4, r4
 800a1d4:	fbb7 f3f1 	udiv	r3, r7, r1
 800a1d8:	fb01 7713 	mls	r7, r1, r3, r7
 800a1dc:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800a1e0:	fb00 f003 	mul.w	r0, r0, r3
 800a1e4:	42b8      	cmp	r0, r7
 800a1e6:	d908      	bls.n	800a1fa <__divdi3+0x96>
 800a1e8:	197f      	adds	r7, r7, r5
 800a1ea:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800a1ee:	f080 80f0 	bcs.w	800a3d2 <__divdi3+0x26e>
 800a1f2:	42b8      	cmp	r0, r7
 800a1f4:	f240 80ed 	bls.w	800a3d2 <__divdi3+0x26e>
 800a1f8:	3b02      	subs	r3, #2
 800a1fa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800a1fe:	2200      	movs	r2, #0
 800a200:	e003      	b.n	800a20a <__divdi3+0xa6>
 800a202:	428b      	cmp	r3, r1
 800a204:	d90f      	bls.n	800a226 <__divdi3+0xc2>
 800a206:	2200      	movs	r2, #0
 800a208:	4613      	mov	r3, r2
 800a20a:	1c34      	adds	r4, r6, #0
 800a20c:	bf18      	it	ne
 800a20e:	2401      	movne	r4, #1
 800a210:	4260      	negs	r0, r4
 800a212:	f04f 0500 	mov.w	r5, #0
 800a216:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 800a21a:	4058      	eors	r0, r3
 800a21c:	4051      	eors	r1, r2
 800a21e:	1900      	adds	r0, r0, r4
 800a220:	4169      	adcs	r1, r5
 800a222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a226:	fab3 f283 	clz	r2, r3
 800a22a:	2a00      	cmp	r2, #0
 800a22c:	f040 8086 	bne.w	800a33c <__divdi3+0x1d8>
 800a230:	428b      	cmp	r3, r1
 800a232:	d302      	bcc.n	800a23a <__divdi3+0xd6>
 800a234:	4584      	cmp	ip, r0
 800a236:	f200 80db 	bhi.w	800a3f0 <__divdi3+0x28c>
 800a23a:	2301      	movs	r3, #1
 800a23c:	e7e5      	b.n	800a20a <__divdi3+0xa6>
 800a23e:	b912      	cbnz	r2, 800a246 <__divdi3+0xe2>
 800a240:	2301      	movs	r3, #1
 800a242:	fbb3 f5f2 	udiv	r5, r3, r2
 800a246:	fab5 f085 	clz	r0, r5
 800a24a:	2800      	cmp	r0, #0
 800a24c:	d13b      	bne.n	800a2c6 <__divdi3+0x162>
 800a24e:	1b78      	subs	r0, r7, r5
 800a250:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800a254:	fa1f fc85 	uxth.w	ip, r5
 800a258:	2201      	movs	r2, #1
 800a25a:	fbb0 f8fe 	udiv	r8, r0, lr
 800a25e:	0c21      	lsrs	r1, r4, #16
 800a260:	fb0e 0718 	mls	r7, lr, r8, r0
 800a264:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 800a268:	fb0c f308 	mul.w	r3, ip, r8
 800a26c:	42bb      	cmp	r3, r7
 800a26e:	d907      	bls.n	800a280 <__divdi3+0x11c>
 800a270:	197f      	adds	r7, r7, r5
 800a272:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 800a276:	d202      	bcs.n	800a27e <__divdi3+0x11a>
 800a278:	42bb      	cmp	r3, r7
 800a27a:	f200 80bd 	bhi.w	800a3f8 <__divdi3+0x294>
 800a27e:	4688      	mov	r8, r1
 800a280:	1aff      	subs	r7, r7, r3
 800a282:	b2a4      	uxth	r4, r4
 800a284:	fbb7 f3fe 	udiv	r3, r7, lr
 800a288:	fb0e 7713 	mls	r7, lr, r3, r7
 800a28c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800a290:	fb0c fc03 	mul.w	ip, ip, r3
 800a294:	45bc      	cmp	ip, r7
 800a296:	d907      	bls.n	800a2a8 <__divdi3+0x144>
 800a298:	197f      	adds	r7, r7, r5
 800a29a:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800a29e:	d202      	bcs.n	800a2a6 <__divdi3+0x142>
 800a2a0:	45bc      	cmp	ip, r7
 800a2a2:	f200 80a7 	bhi.w	800a3f4 <__divdi3+0x290>
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800a2ac:	e7ad      	b.n	800a20a <__divdi3+0xa6>
 800a2ae:	4252      	negs	r2, r2
 800a2b0:	ea6f 0606 	mvn.w	r6, r6
 800a2b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800a2b8:	e75d      	b.n	800a176 <__divdi3+0x12>
 800a2ba:	4240      	negs	r0, r0
 800a2bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800a2c0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800a2c4:	e754      	b.n	800a170 <__divdi3+0xc>
 800a2c6:	f1c0 0220 	rsb	r2, r0, #32
 800a2ca:	fa24 f102 	lsr.w	r1, r4, r2
 800a2ce:	fa07 f300 	lsl.w	r3, r7, r0
 800a2d2:	4085      	lsls	r5, r0
 800a2d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800a2d8:	40d7      	lsrs	r7, r2
 800a2da:	4319      	orrs	r1, r3
 800a2dc:	fbb7 f2fe 	udiv	r2, r7, lr
 800a2e0:	0c0b      	lsrs	r3, r1, #16
 800a2e2:	fb0e 7712 	mls	r7, lr, r2, r7
 800a2e6:	fa1f fc85 	uxth.w	ip, r5
 800a2ea:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a2ee:	fb0c f702 	mul.w	r7, ip, r2
 800a2f2:	429f      	cmp	r7, r3
 800a2f4:	fa04 f400 	lsl.w	r4, r4, r0
 800a2f8:	d907      	bls.n	800a30a <__divdi3+0x1a6>
 800a2fa:	195b      	adds	r3, r3, r5
 800a2fc:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800a300:	d274      	bcs.n	800a3ec <__divdi3+0x288>
 800a302:	429f      	cmp	r7, r3
 800a304:	d972      	bls.n	800a3ec <__divdi3+0x288>
 800a306:	3a02      	subs	r2, #2
 800a308:	442b      	add	r3, r5
 800a30a:	1bdf      	subs	r7, r3, r7
 800a30c:	b289      	uxth	r1, r1
 800a30e:	fbb7 f8fe 	udiv	r8, r7, lr
 800a312:	fb0e 7318 	mls	r3, lr, r8, r7
 800a316:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a31a:	fb0c f708 	mul.w	r7, ip, r8
 800a31e:	429f      	cmp	r7, r3
 800a320:	d908      	bls.n	800a334 <__divdi3+0x1d0>
 800a322:	195b      	adds	r3, r3, r5
 800a324:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 800a328:	d25c      	bcs.n	800a3e4 <__divdi3+0x280>
 800a32a:	429f      	cmp	r7, r3
 800a32c:	d95a      	bls.n	800a3e4 <__divdi3+0x280>
 800a32e:	f1a8 0802 	sub.w	r8, r8, #2
 800a332:	442b      	add	r3, r5
 800a334:	1bd8      	subs	r0, r3, r7
 800a336:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 800a33a:	e78e      	b.n	800a25a <__divdi3+0xf6>
 800a33c:	f1c2 0320 	rsb	r3, r2, #32
 800a340:	fa2c f103 	lsr.w	r1, ip, r3
 800a344:	fa0e fe02 	lsl.w	lr, lr, r2
 800a348:	fa20 f703 	lsr.w	r7, r0, r3
 800a34c:	ea41 0e0e 	orr.w	lr, r1, lr
 800a350:	fa08 f002 	lsl.w	r0, r8, r2
 800a354:	fa28 f103 	lsr.w	r1, r8, r3
 800a358:	ea4f 451e 	mov.w	r5, lr, lsr #16
 800a35c:	4338      	orrs	r0, r7
 800a35e:	fbb1 f8f5 	udiv	r8, r1, r5
 800a362:	0c03      	lsrs	r3, r0, #16
 800a364:	fb05 1118 	mls	r1, r5, r8, r1
 800a368:	fa1f f78e 	uxth.w	r7, lr
 800a36c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800a370:	fb07 f308 	mul.w	r3, r7, r8
 800a374:	428b      	cmp	r3, r1
 800a376:	fa0c fc02 	lsl.w	ip, ip, r2
 800a37a:	d909      	bls.n	800a390 <__divdi3+0x22c>
 800a37c:	eb11 010e 	adds.w	r1, r1, lr
 800a380:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 800a384:	d230      	bcs.n	800a3e8 <__divdi3+0x284>
 800a386:	428b      	cmp	r3, r1
 800a388:	d92e      	bls.n	800a3e8 <__divdi3+0x284>
 800a38a:	f1a8 0802 	sub.w	r8, r8, #2
 800a38e:	4471      	add	r1, lr
 800a390:	1ac9      	subs	r1, r1, r3
 800a392:	b280      	uxth	r0, r0
 800a394:	fbb1 f3f5 	udiv	r3, r1, r5
 800a398:	fb05 1113 	mls	r1, r5, r3, r1
 800a39c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800a3a0:	fb07 f703 	mul.w	r7, r7, r3
 800a3a4:	428f      	cmp	r7, r1
 800a3a6:	d908      	bls.n	800a3ba <__divdi3+0x256>
 800a3a8:	eb11 010e 	adds.w	r1, r1, lr
 800a3ac:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800a3b0:	d216      	bcs.n	800a3e0 <__divdi3+0x27c>
 800a3b2:	428f      	cmp	r7, r1
 800a3b4:	d914      	bls.n	800a3e0 <__divdi3+0x27c>
 800a3b6:	3b02      	subs	r3, #2
 800a3b8:	4471      	add	r1, lr
 800a3ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800a3be:	1bc9      	subs	r1, r1, r7
 800a3c0:	fba3 890c 	umull	r8, r9, r3, ip
 800a3c4:	4549      	cmp	r1, r9
 800a3c6:	d309      	bcc.n	800a3dc <__divdi3+0x278>
 800a3c8:	d005      	beq.n	800a3d6 <__divdi3+0x272>
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	e71d      	b.n	800a20a <__divdi3+0xa6>
 800a3ce:	4696      	mov	lr, r2
 800a3d0:	e6fe      	b.n	800a1d0 <__divdi3+0x6c>
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	e711      	b.n	800a1fa <__divdi3+0x96>
 800a3d6:	4094      	lsls	r4, r2
 800a3d8:	4544      	cmp	r4, r8
 800a3da:	d2f6      	bcs.n	800a3ca <__divdi3+0x266>
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	e7f4      	b.n	800a3ca <__divdi3+0x266>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	e7ea      	b.n	800a3ba <__divdi3+0x256>
 800a3e4:	4688      	mov	r8, r1
 800a3e6:	e7a5      	b.n	800a334 <__divdi3+0x1d0>
 800a3e8:	46c8      	mov	r8, r9
 800a3ea:	e7d1      	b.n	800a390 <__divdi3+0x22c>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	e78c      	b.n	800a30a <__divdi3+0x1a6>
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	e70a      	b.n	800a20a <__divdi3+0xa6>
 800a3f4:	3b02      	subs	r3, #2
 800a3f6:	e757      	b.n	800a2a8 <__divdi3+0x144>
 800a3f8:	f1a8 0802 	sub.w	r8, r8, #2
 800a3fc:	442f      	add	r7, r5
 800a3fe:	e73f      	b.n	800a280 <__divdi3+0x11c>

0800a400 <__udivdi3>:
 800a400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a404:	2b00      	cmp	r3, #0
 800a406:	d144      	bne.n	800a492 <__udivdi3+0x92>
 800a408:	428a      	cmp	r2, r1
 800a40a:	4615      	mov	r5, r2
 800a40c:	4604      	mov	r4, r0
 800a40e:	d94f      	bls.n	800a4b0 <__udivdi3+0xb0>
 800a410:	fab2 f782 	clz	r7, r2
 800a414:	460e      	mov	r6, r1
 800a416:	b14f      	cbz	r7, 800a42c <__udivdi3+0x2c>
 800a418:	f1c7 0320 	rsb	r3, r7, #32
 800a41c:	40b9      	lsls	r1, r7
 800a41e:	fa20 f603 	lsr.w	r6, r0, r3
 800a422:	fa02 f507 	lsl.w	r5, r2, r7
 800a426:	430e      	orrs	r6, r1
 800a428:	fa00 f407 	lsl.w	r4, r0, r7
 800a42c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800a430:	0c23      	lsrs	r3, r4, #16
 800a432:	fbb6 f0fe 	udiv	r0, r6, lr
 800a436:	b2af      	uxth	r7, r5
 800a438:	fb0e 6110 	mls	r1, lr, r0, r6
 800a43c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a440:	fb07 f100 	mul.w	r1, r7, r0
 800a444:	4299      	cmp	r1, r3
 800a446:	d909      	bls.n	800a45c <__udivdi3+0x5c>
 800a448:	195b      	adds	r3, r3, r5
 800a44a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800a44e:	f080 80ec 	bcs.w	800a62a <__udivdi3+0x22a>
 800a452:	4299      	cmp	r1, r3
 800a454:	f240 80e9 	bls.w	800a62a <__udivdi3+0x22a>
 800a458:	3802      	subs	r0, #2
 800a45a:	442b      	add	r3, r5
 800a45c:	1a5a      	subs	r2, r3, r1
 800a45e:	b2a4      	uxth	r4, r4
 800a460:	fbb2 f3fe 	udiv	r3, r2, lr
 800a464:	fb0e 2213 	mls	r2, lr, r3, r2
 800a468:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800a46c:	fb07 f703 	mul.w	r7, r7, r3
 800a470:	4297      	cmp	r7, r2
 800a472:	d908      	bls.n	800a486 <__udivdi3+0x86>
 800a474:	1952      	adds	r2, r2, r5
 800a476:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800a47a:	f080 80d8 	bcs.w	800a62e <__udivdi3+0x22e>
 800a47e:	4297      	cmp	r7, r2
 800a480:	f240 80d5 	bls.w	800a62e <__udivdi3+0x22e>
 800a484:	3b02      	subs	r3, #2
 800a486:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800a48a:	2600      	movs	r6, #0
 800a48c:	4631      	mov	r1, r6
 800a48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a492:	428b      	cmp	r3, r1
 800a494:	d847      	bhi.n	800a526 <__udivdi3+0x126>
 800a496:	fab3 f683 	clz	r6, r3
 800a49a:	2e00      	cmp	r6, #0
 800a49c:	d148      	bne.n	800a530 <__udivdi3+0x130>
 800a49e:	428b      	cmp	r3, r1
 800a4a0:	d302      	bcc.n	800a4a8 <__udivdi3+0xa8>
 800a4a2:	4282      	cmp	r2, r0
 800a4a4:	f200 80cd 	bhi.w	800a642 <__udivdi3+0x242>
 800a4a8:	2001      	movs	r0, #1
 800a4aa:	4631      	mov	r1, r6
 800a4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4b0:	b912      	cbnz	r2, 800a4b8 <__udivdi3+0xb8>
 800a4b2:	2501      	movs	r5, #1
 800a4b4:	fbb5 f5f2 	udiv	r5, r5, r2
 800a4b8:	fab5 f885 	clz	r8, r5
 800a4bc:	f1b8 0f00 	cmp.w	r8, #0
 800a4c0:	d177      	bne.n	800a5b2 <__udivdi3+0x1b2>
 800a4c2:	1b4a      	subs	r2, r1, r5
 800a4c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800a4c8:	b2af      	uxth	r7, r5
 800a4ca:	2601      	movs	r6, #1
 800a4cc:	fbb2 f0fe 	udiv	r0, r2, lr
 800a4d0:	0c23      	lsrs	r3, r4, #16
 800a4d2:	fb0e 2110 	mls	r1, lr, r0, r2
 800a4d6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800a4da:	fb07 f300 	mul.w	r3, r7, r0
 800a4de:	428b      	cmp	r3, r1
 800a4e0:	d907      	bls.n	800a4f2 <__udivdi3+0xf2>
 800a4e2:	1949      	adds	r1, r1, r5
 800a4e4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800a4e8:	d202      	bcs.n	800a4f0 <__udivdi3+0xf0>
 800a4ea:	428b      	cmp	r3, r1
 800a4ec:	f200 80ba 	bhi.w	800a664 <__udivdi3+0x264>
 800a4f0:	4610      	mov	r0, r2
 800a4f2:	1ac9      	subs	r1, r1, r3
 800a4f4:	b2a4      	uxth	r4, r4
 800a4f6:	fbb1 f3fe 	udiv	r3, r1, lr
 800a4fa:	fb0e 1113 	mls	r1, lr, r3, r1
 800a4fe:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800a502:	fb07 f703 	mul.w	r7, r7, r3
 800a506:	42a7      	cmp	r7, r4
 800a508:	d908      	bls.n	800a51c <__udivdi3+0x11c>
 800a50a:	1964      	adds	r4, r4, r5
 800a50c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800a510:	f080 808f 	bcs.w	800a632 <__udivdi3+0x232>
 800a514:	42a7      	cmp	r7, r4
 800a516:	f240 808c 	bls.w	800a632 <__udivdi3+0x232>
 800a51a:	3b02      	subs	r3, #2
 800a51c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800a520:	4631      	mov	r1, r6
 800a522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a526:	2600      	movs	r6, #0
 800a528:	4630      	mov	r0, r6
 800a52a:	4631      	mov	r1, r6
 800a52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a530:	f1c6 0420 	rsb	r4, r6, #32
 800a534:	fa22 f504 	lsr.w	r5, r2, r4
 800a538:	40b3      	lsls	r3, r6
 800a53a:	432b      	orrs	r3, r5
 800a53c:	fa20 fc04 	lsr.w	ip, r0, r4
 800a540:	fa01 f706 	lsl.w	r7, r1, r6
 800a544:	fa21 f504 	lsr.w	r5, r1, r4
 800a548:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a54c:	ea4c 0707 	orr.w	r7, ip, r7
 800a550:	fbb5 f8fe 	udiv	r8, r5, lr
 800a554:	0c39      	lsrs	r1, r7, #16
 800a556:	fb0e 5518 	mls	r5, lr, r8, r5
 800a55a:	fa1f fc83 	uxth.w	ip, r3
 800a55e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800a562:	fb0c f108 	mul.w	r1, ip, r8
 800a566:	42a9      	cmp	r1, r5
 800a568:	fa02 f206 	lsl.w	r2, r2, r6
 800a56c:	d904      	bls.n	800a578 <__udivdi3+0x178>
 800a56e:	18ed      	adds	r5, r5, r3
 800a570:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 800a574:	d367      	bcc.n	800a646 <__udivdi3+0x246>
 800a576:	46a0      	mov	r8, r4
 800a578:	1a6d      	subs	r5, r5, r1
 800a57a:	b2bf      	uxth	r7, r7
 800a57c:	fbb5 f4fe 	udiv	r4, r5, lr
 800a580:	fb0e 5514 	mls	r5, lr, r4, r5
 800a584:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800a588:	fb0c fc04 	mul.w	ip, ip, r4
 800a58c:	458c      	cmp	ip, r1
 800a58e:	d904      	bls.n	800a59a <__udivdi3+0x19a>
 800a590:	18c9      	adds	r1, r1, r3
 800a592:	f104 35ff 	add.w	r5, r4, #4294967295	; 0xffffffff
 800a596:	d35c      	bcc.n	800a652 <__udivdi3+0x252>
 800a598:	462c      	mov	r4, r5
 800a59a:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800a59e:	ebcc 0101 	rsb	r1, ip, r1
 800a5a2:	fba4 2302 	umull	r2, r3, r4, r2
 800a5a6:	4299      	cmp	r1, r3
 800a5a8:	d348      	bcc.n	800a63c <__udivdi3+0x23c>
 800a5aa:	d044      	beq.n	800a636 <__udivdi3+0x236>
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	2600      	movs	r6, #0
 800a5b0:	e76c      	b.n	800a48c <__udivdi3+0x8c>
 800a5b2:	f1c8 0420 	rsb	r4, r8, #32
 800a5b6:	fa01 f308 	lsl.w	r3, r1, r8
 800a5ba:	fa05 f508 	lsl.w	r5, r5, r8
 800a5be:	fa20 f704 	lsr.w	r7, r0, r4
 800a5c2:	40e1      	lsrs	r1, r4
 800a5c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800a5c8:	431f      	orrs	r7, r3
 800a5ca:	fbb1 f6fe 	udiv	r6, r1, lr
 800a5ce:	0c3a      	lsrs	r2, r7, #16
 800a5d0:	fb0e 1116 	mls	r1, lr, r6, r1
 800a5d4:	fa1f fc85 	uxth.w	ip, r5
 800a5d8:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 800a5dc:	fb0c f206 	mul.w	r2, ip, r6
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	fa00 f408 	lsl.w	r4, r0, r8
 800a5e6:	d907      	bls.n	800a5f8 <__udivdi3+0x1f8>
 800a5e8:	195b      	adds	r3, r3, r5
 800a5ea:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 800a5ee:	d237      	bcs.n	800a660 <__udivdi3+0x260>
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d935      	bls.n	800a660 <__udivdi3+0x260>
 800a5f4:	3e02      	subs	r6, #2
 800a5f6:	442b      	add	r3, r5
 800a5f8:	1a9b      	subs	r3, r3, r2
 800a5fa:	b2bf      	uxth	r7, r7
 800a5fc:	fbb3 f0fe 	udiv	r0, r3, lr
 800a600:	fb0e 3310 	mls	r3, lr, r0, r3
 800a604:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800a608:	fb0c f100 	mul.w	r1, ip, r0
 800a60c:	4299      	cmp	r1, r3
 800a60e:	d907      	bls.n	800a620 <__udivdi3+0x220>
 800a610:	195b      	adds	r3, r3, r5
 800a612:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800a616:	d221      	bcs.n	800a65c <__udivdi3+0x25c>
 800a618:	4299      	cmp	r1, r3
 800a61a:	d91f      	bls.n	800a65c <__udivdi3+0x25c>
 800a61c:	3802      	subs	r0, #2
 800a61e:	442b      	add	r3, r5
 800a620:	1a5a      	subs	r2, r3, r1
 800a622:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800a626:	4667      	mov	r7, ip
 800a628:	e750      	b.n	800a4cc <__udivdi3+0xcc>
 800a62a:	4610      	mov	r0, r2
 800a62c:	e716      	b.n	800a45c <__udivdi3+0x5c>
 800a62e:	460b      	mov	r3, r1
 800a630:	e729      	b.n	800a486 <__udivdi3+0x86>
 800a632:	4613      	mov	r3, r2
 800a634:	e772      	b.n	800a51c <__udivdi3+0x11c>
 800a636:	40b0      	lsls	r0, r6
 800a638:	4290      	cmp	r0, r2
 800a63a:	d2b7      	bcs.n	800a5ac <__udivdi3+0x1ac>
 800a63c:	1e60      	subs	r0, r4, #1
 800a63e:	2600      	movs	r6, #0
 800a640:	e724      	b.n	800a48c <__udivdi3+0x8c>
 800a642:	4630      	mov	r0, r6
 800a644:	e722      	b.n	800a48c <__udivdi3+0x8c>
 800a646:	42a9      	cmp	r1, r5
 800a648:	d995      	bls.n	800a576 <__udivdi3+0x176>
 800a64a:	f1a8 0802 	sub.w	r8, r8, #2
 800a64e:	441d      	add	r5, r3
 800a650:	e792      	b.n	800a578 <__udivdi3+0x178>
 800a652:	458c      	cmp	ip, r1
 800a654:	d9a0      	bls.n	800a598 <__udivdi3+0x198>
 800a656:	3c02      	subs	r4, #2
 800a658:	4419      	add	r1, r3
 800a65a:	e79e      	b.n	800a59a <__udivdi3+0x19a>
 800a65c:	4610      	mov	r0, r2
 800a65e:	e7df      	b.n	800a620 <__udivdi3+0x220>
 800a660:	460e      	mov	r6, r1
 800a662:	e7c9      	b.n	800a5f8 <__udivdi3+0x1f8>
 800a664:	3802      	subs	r0, #2
 800a666:	4429      	add	r1, r5
 800a668:	e743      	b.n	800a4f2 <__udivdi3+0xf2>
 800a66a:	bf00      	nop
 800a66c:	72617453 	.word	0x72617453
 800a670:	676e6974 	.word	0x676e6974
 800a674:	002e2e2e 	.word	0x002e2e2e
 800a678:	43435553 	.word	0x43435553
 800a67c:	00535345 	.word	0x00535345
 800a680:	4c494146 	.word	0x4c494146
 800a684:	00004445 	.word	0x00004445
 800a688:	74696e69 	.word	0x74696e69
 800a68c:	696c6169 	.word	0x696c6169
 800a690:	676e697a 	.word	0x676e697a
 800a694:	756d6920 	.word	0x756d6920
 800a698:	61747320 	.word	0x61747320
 800a69c:	203a6574 	.word	0x203a6574
 800a6a0:	00000000 	.word	0x00000000
 800a6a4:	554d4909 	.word	0x554d4909
 800a6a8:	20642520 	.word	0x20642520
 800a6ac:	20746f6e 	.word	0x20746f6e
 800a6b0:	6e756f66 	.word	0x6e756f66
 800a6b4:	49202e64 	.word	0x49202e64
 800a6b8:	25203a44 	.word	0x25203a44
 800a6bc:	41202c64 	.word	0x41202c64
 800a6c0:	65726464 	.word	0x65726464
 800a6c4:	203a7373 	.word	0x203a7373
 800a6c8:	78257830 	.word	0x78257830
 800a6cc:	73655220 	.word	0x73655220
 800a6d0:	3a746c75 	.word	0x3a746c75
 800a6d4:	0a642520 	.word	0x0a642520
 800a6d8:	00000000 	.word	0x00000000
 800a6dc:	554d4909 	.word	0x554d4909
 800a6e0:	20642520 	.word	0x20642520
 800a6e4:	6e756f66 	.word	0x6e756f66
 800a6e8:	49202e64 	.word	0x49202e64
 800a6ec:	25203a44 	.word	0x25203a44
 800a6f0:	41202c64 	.word	0x41202c64
 800a6f4:	65726464 	.word	0x65726464
 800a6f8:	203a7373 	.word	0x203a7373
 800a6fc:	78257830 	.word	0x78257830
 800a700:	73655220 	.word	0x73655220
 800a704:	3a746c75 	.word	0x3a746c75
 800a708:	0a642520 	.word	0x0a642520
 800a70c:	00000000 	.word	0x00000000
 800a710:	74655309 	.word	0x74655309
 800a714:	676e6974 	.word	0x676e6974
 800a718:	646f6d20 	.word	0x646f6d20
 800a71c:	2e2e7365 	.word	0x2e2e7365
 800a720:	6552202e 	.word	0x6552202e
 800a724:	746c7573 	.word	0x746c7573
 800a728:	7325203a 	.word	0x7325203a
 800a72c:	0000000a 	.word	0x0000000a
 800a730:	73655209 	.word	0x73655209
 800a734:	6e697465 	.word	0x6e697465
 800a738:	2e2e2e67 	.word	0x2e2e2e67
 800a73c:	73655220 	.word	0x73655220
 800a740:	3a746c75 	.word	0x3a746c75
 800a744:	0a732520 	.word	0x0a732520
 800a748:	00000000 	.word	0x00000000
 800a74c:	74655309 	.word	0x74655309
 800a750:	676e6974 	.word	0x676e6974
 800a754:	776f7020 	.word	0x776f7020
 800a758:	6d207265 	.word	0x6d207265
 800a75c:	7365646f 	.word	0x7365646f
 800a760:	202e2e2e 	.word	0x202e2e2e
 800a764:	75736552 	.word	0x75736552
 800a768:	203a746c 	.word	0x203a746c
 800a76c:	000a7325 	.word	0x000a7325
 800a770:	74655309 	.word	0x74655309
 800a774:	676e6974 	.word	0x676e6974
 800a778:	67617020 	.word	0x67617020
 800a77c:	64692065 	.word	0x64692065
 800a780:	202e2e2e 	.word	0x202e2e2e
 800a784:	75736552 	.word	0x75736552
 800a788:	203a746c 	.word	0x203a746c
 800a78c:	000a7325 	.word	0x000a7325
 800a790:	74655309 	.word	0x74655309
 800a794:	676e6974 	.word	0x676e6974
 800a798:	74786520 	.word	0x74786520
 800a79c:	616e7265 	.word	0x616e7265
 800a7a0:	7263206c 	.word	0x7263206c
 800a7a4:	61747379 	.word	0x61747379
 800a7a8:	7375206c 	.word	0x7375206c
 800a7ac:	2e2e2e65 	.word	0x2e2e2e65
 800a7b0:	73655220 	.word	0x73655220
 800a7b4:	3a746c75 	.word	0x3a746c75
 800a7b8:	0a732520 	.word	0x0a732520
 800a7bc:	00000000 	.word	0x00000000
 800a7c0:	646e6148 	.word	0x646e6148
 800a7c4:	696e6920 	.word	0x696e6920
 800a7c8:	6c616974 	.word	0x6c616974
 800a7cc:	74617a69 	.word	0x74617a69
 800a7d0:	206e6f69 	.word	0x206e6f69
 800a7d4:	65646e65 	.word	0x65646e65
 800a7d8:	00002e64 	.word	0x00002e64
 800a7dc:	6f636e45 	.word	0x6f636e45
 800a7e0:	73726564 	.word	0x73726564
 800a7e4:	3a31203a 	.word	0x3a31203a
 800a7e8:	20643525 	.word	0x20643525
 800a7ec:	35253a32 	.word	0x35253a32
 800a7f0:	3a332064 	.word	0x3a332064
 800a7f4:	20643525 	.word	0x20643525
 800a7f8:	0000000a 	.word	0x0000000a
 800a7fc:	73657250 	.word	0x73657250
 800a800:	65727573 	.word	0x65727573
 800a804:	64252073 	.word	0x64252073
 800a808:	0000203a 	.word	0x0000203a
 800a80c:	20643325 	.word	0x20643325
 800a810:	00000000 	.word	0x00000000
 800a814:	20554d49 	.word	0x20554d49
 800a818:	3a643225 	.word	0x3a643225
 800a81c:	203a5720 	.word	0x203a5720
 800a820:	20643625 	.word	0x20643625
 800a824:	25203a58 	.word	0x25203a58
 800a828:	59206436 	.word	0x59206436
 800a82c:	3625203a 	.word	0x3625203a
 800a830:	3a5a2064 	.word	0x3a5a2064
 800a834:	64362520 	.word	0x64362520
 800a838:	0000000a 	.word	0x0000000a
 800a83c:	20202020 	.word	0x20202020
 800a840:	20202020 	.word	0x20202020
 800a844:	25203a57 	.word	0x25203a57
 800a848:	66322e36 	.word	0x66322e36
 800a84c:	203a5820 	.word	0x203a5820
 800a850:	322e3625 	.word	0x322e3625
 800a854:	3a592066 	.word	0x3a592066
 800a858:	2e362520 	.word	0x2e362520
 800a85c:	5a206632 	.word	0x5a206632
 800a860:	3625203a 	.word	0x3625203a
 800a864:	0066322e 	.word	0x0066322e
 800a868:	646e6148 	.word	0x646e6148
 800a86c:	61745320 	.word	0x61745320
 800a870:	3a737574 	.word	0x3a737574
 800a874:	00000000 	.word	0x00000000
 800a878:	6b615409 	.word	0x6b615409
 800a87c:	6c69746b 	.word	0x6c69746b
 800a880:	65532065 	.word	0x65532065
 800a884:	726f736e 	.word	0x726f736e
 800a888:	00203a73 	.word	0x00203a73
 800a88c:	69460909 	.word	0x69460909
 800a890:	7265676e 	.word	0x7265676e
 800a894:	29642520 	.word	0x29642520
 800a898:	3a642520 	.word	0x3a642520
 800a89c:	00000020 	.word	0x00000020
 800a8a0:	00206425 	.word	0x00206425
 800a8a4:	74697277 	.word	0x74697277
 800a8a8:	74794265 	.word	0x74794265
 800a8ac:	32497365 	.word	0x32497365
 800a8b0:	00203a43 	.word	0x00203a43
 800a8b4:	696e6920 	.word	0x696e6920
 800a8b8:	6c616974 	.word	0x6c616974
 800a8bc:	656d6954 	.word	0x656d6954
 800a8c0:	6425203a 	.word	0x6425203a
 800a8c4:	00000000 	.word	0x00000000
 800a8c8:	6e696620 	.word	0x6e696620
 800a8cc:	69546c61 	.word	0x69546c61
 800a8d0:	203a656d 	.word	0x203a656d
 800a8d4:	00006425 	.word	0x00006425
 800a8d8:	4d495420 	.word	0x4d495420
 800a8dc:	54554f45 	.word	0x54554f45
 800a8e0:	00000000 	.word	0x00000000
 800a8e4:	74697277 	.word	0x74697277
 800a8e8:	67655265 	.word	0x67655265
 800a8ec:	65747369 	.word	0x65747369
 800a8f0:	43324972 	.word	0x43324972
 800a8f4:	0000203a 	.word	0x0000203a
 800a8f8:	64616572 	.word	0x64616572
 800a8fc:	65747942 	.word	0x65747942
 800a900:	43324973 	.word	0x43324973
 800a904:	0000203a 	.word	0x0000203a
 800a908:	2044454c 	.word	0x2044454c
 800a90c:	64206425 	.word	0x64206425
 800a910:	2073656f 	.word	0x2073656f
 800a914:	20746f6e 	.word	0x20746f6e
 800a918:	73697865 	.word	0x73697865
 800a91c:	00000a74 	.word	0x00000a74
 800a920:	68616f77 	.word	0x68616f77
 800a924:	65687420 	.word	0x65687420
 800a928:	202e6572 	.word	0x202e6572
 800a92c:	65697274 	.word	0x65697274
 800a930:	6f742064 	.word	0x6f742064
 800a934:	69727720 	.word	0x69727720
 800a938:	30206574 	.word	0x30206574
 800a93c:	34302578 	.word	0x34302578
 800a940:	6f742078 	.word	0x6f742078
 800a944:	67657220 	.word	0x67657220
 800a948:	32302520 	.word	0x32302520
 800a94c:	75622064 	.word	0x75622064
 800a950:	74692074 	.word	0x74692074
 800a954:	61657220 	.word	0x61657220
 800a958:	61622064 	.word	0x61622064
 800a95c:	25206b63 	.word	0x25206b63
 800a960:	0d783430 	.word	0x0d783430
 800a964:	0000000a 	.word	0x0000000a
 800a968:	74656e65 	.word	0x74656e65
 800a96c:	696e695f 	.word	0x696e695f
 800a970:	0d292874 	.word	0x0d292874
 800a974:	00000000 	.word	0x00000000
 800a978:	74696177 	.word	0x74696177
 800a97c:	20676e69 	.word	0x20676e69
 800a980:	20726f66 	.word	0x20726f66
 800a984:	20594850 	.word	0x20594850
 800a988:	77206f74 	.word	0x77206f74
 800a98c:	20656b61 	.word	0x20656b61
 800a990:	2e2e7075 	.word	0x2e2e7075
 800a994:	00000d2e 	.word	0x00000d2e
 800a998:	656e6f64 	.word	0x656e6f64
 800a99c:	74697720 	.word	0x74697720
 800a9a0:	48502068 	.word	0x48502068
 800a9a4:	65722059 	.word	0x65722059
 800a9a8:	2e746573 	.word	0x2e746573
 800a9ac:	0000000d 	.word	0x0000000d
 800a9b0:	74746573 	.word	0x74746573
 800a9b4:	20676e69 	.word	0x20676e69
 800a9b8:	74666f73 	.word	0x74666f73
 800a9bc:	65726177 	.word	0x65726177
 800a9c0:	72747320 	.word	0x72747320
 800a9c4:	72207061 	.word	0x72207061
 800a9c8:	73696765 	.word	0x73696765
 800a9cc:	73726574 	.word	0x73726574
 800a9d0:	0d2e2e2e 	.word	0x0d2e2e2e
 800a9d4:	00000000 	.word	0x00000000
 800a9d8:	20594850 	.word	0x20594850
 800a9dc:	20676572 	.word	0x20676572
 800a9e0:	64323025 	.word	0x64323025
 800a9e4:	30203d20 	.word	0x30203d20
 800a9e8:	34302578 	.word	0x34302578
 800a9ec:	000a0d78 	.word	0x000a0d78
 800a9f0:	65636552 	.word	0x65636552
 800a9f4:	64657669 	.word	0x64657669
 800a9f8:	69727020 	.word	0x69727020
 800a9fc:	7453746e 	.word	0x7453746e
 800aa00:	73757461 	.word	0x73757461
 800aa04:	6d6d6f43 	.word	0x6d6d6f43
 800aa08:	2e646e61 	.word	0x2e646e61
 800aa0c:	00002e2e 	.word	0x00002e2e

0800aa10 <g_eth_src_mac>:
 800aa10:	00c1f3a4 00000001 68686861 686e7520     ........ahhh unh
 800aa20:	6c646e61 62206465 20647561 65746172     andled baud rate
 800aa30:	6425203a 00000a0d 6c786d64 696e695f     : %d....dmxl_ini
 800aa40:	0d292874 00000000 63656863 6d75736b     t().....checksum
 800aa50:	69616620 3a64656c 636f6c20 30206c61      failed: local 0
 800aa60:	32302578 3d212078 63657220 65766965     x%02x != receive
 800aa70:	78302064 78323025 00000a0d 68616f77     d 0x%02x....woah
 800aa80:	65687420 70206572 6e747261 202e7265      there partner. 
 800aa90:	78656e75 74636570 64206465 206c786d     unexpected dmxl 
 800aaa0:	73207872 65746174 00000d21 6c786d64     rx state!...dmxl
 800aab0:	20642520 74617473 72207375 72757465      %d status retur
 800aac0:	656c206e 206c6576 6425203d 0000000a     n level = %d....
 800aad0:	6c756f63 74276e64 6c6f7020 7473206c     couldn't poll st
 800aae0:	73757461 74657220 206e7275 6576656c     atus return leve
 800aaf0:	6f66206c 6d642072 25206c78 000a0d64     l for dmxl %d...
 800ab00:	65636572 64657669 20787220 35322040     received rx @ 25
 800ab10:	626b2030 66207469 206d6f72 6c786d64     0 kbit from dmxl
 800ab20:	0d642520 0000000a 72206f6e 65722078      %d.....no rx re
 800ab30:	76696563 66206465 206d6f72 6c786d64     ceived from dmxl
 800ab40:	2e642520 74202e2e 6e697972 37352067      %d... trying 57
 800ab50:	20303036 64756162 0d2e2e2e 0000000a     600 baud........
 800ab60:	00000112 06040200 14121008 00000016     ................
 800ab70:	6b6b6174 656c6974 6e657320 73726f73     takktile sensors
 800ab80:	696e6920 6c616974 74617a69 2e6e6f69      initialization.
 800ab90:	00002e2e 73657209 69747465 5320676e     .....resetting S
 800aba0:	74204950 3249206f 6f632043 7465766e     PI to I2C convet
 800abb0:	2e2e7265 0000002e 004b4f20 49505309     er...... OK..SPI
 800abc0:	206f7420 20433249 766e6f43 65747265      to I2C Converte
 800abd0:	65722072 74736967 3a737265 00000020     r registers: ...
 800abe0:	49200909 6f43204f 6769666e 3a202020     .. IO Config   :
 800abf0:	30232520 000a7832 49200909 7453204f      %#02x.... IO St
 800ac00:	20657461 3a202020 30232520 000a7832     ate    : %#02x..
 800ac10:	49200909 43204332 6b636f6c 3a202020     .. I2C Clock   :
 800ac20:	30232520 000a7832 49200909 54204332      %#02x.... I2C T
 800ac30:	6f656d69 3a207475 30232520 000a7832     imeout : %#02x..
 800ac40:	49200909 53204332 75746174 3a202073     .. I2C Status  :
 800ac50:	30232520 000a7832 49200909 41204332      %#02x.... I2C A
 800ac60:	20726464 3a202020 30232520 000a7832     ddr    : %#02x..
 800ac70:	000d4b4f                                OK..

0800ac74 <stateMachines>:
 800ac74:	080031e9 00000000 20000088 080031e9     .1......... .1..
 800ac84:	00000001 2000008c 080031e9 00000002     ....... .1......
 800ac94:	20000090 08002bb1 00000000 20000078     ... .+......x.. 
 800aca4:	08002bb1 00000001 2000007c 08002bb1     .+......|.. .+..
 800acb4:	00000002 20000080 08002bb1 00000003     ....... .+......
 800acc4:	20000084 080034e9 00000000 20000098     ... .4......... 
 800acd4:	080034e9 00000001 2000009c 080034e9     .4......... .4..
 800ace4:	00000002 200000a0 080006a5 00000000     ....... ........
 800acf4:	20000004                                ... 

0800acf8 <errSequence>:
 800acf8:	01020408 00000000 02010408 00000000     ................
 800ad08:	01040208 00000000 04010208 00000000     ................
 800ad18:	0e000804 00000000 08000804 00000000     ................
 800ad28:	04000804 00000000 02000804 00000000     ................
 800ad38:	08000204 00000000 04000204 00000000     ................
 800ad48:	02000204 00000000 01000204 00000000     ................
 800ad58:	00000043                                C...

0800ad5c <_global_impure_ptr>:
 800ad5c:	200000a8                                ... 

0800ad60 <zeroes.6926>:
 800ad60:	30303030 30303030 30303030 30303030     0000000000000000
 800ad70:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 800ad80:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 800ad90:	00000000 33323130 37363534 62613938     ....0123456789ab
 800ada0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 800adb0:	00000030                                0...

0800adb4 <blanks.6925>:
 800adb4:	20202020 20202020 20202020 20202020                     
 800adc4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 800add4:	49534f50 00000058 00000000              POSIX.......

0800ade0 <__mprec_tens>:
 800ade0:	00000000 3ff00000 00000000 40240000     .......?......$@
 800adf0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800ae00:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800ae10:	00000000 412e8480 00000000 416312d0     .......A......cA
 800ae20:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800ae30:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800ae40:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800ae50:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800ae60:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800ae70:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800ae80:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800ae90:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800aea0:	79d99db4 44ea7843                       ...yCx.D

0800aea8 <p05.5302>:
 800aea8:	00000005 00000019 0000007d 00000000     ........}.......

0800aeb8 <__mprec_bigtens>:
 800aeb8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800aec8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800aed8:	7f73bf3c 75154fdd                       <.s..O.u

0800aee0 <__mprec_tinytens>:
 800aee0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 800aef0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 800af00:	64ac6f43 0ac80628                       Co.d(...

0800af08 <zeroes.6869>:
 800af08:	30303030 30303030 30303030 30303030     0000000000000000

0800af18 <blanks.6868>:
 800af18:	20202020 20202020 20202020 20202020                     

0800af28 <_init>:
 800af28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2a:	bf00      	nop
 800af2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af2e:	bc08      	pop	{r3}
 800af30:	469e      	mov	lr, r3
 800af32:	4770      	bx	lr

0800af34 <__init_array_start>:
 800af34:	080050c9 	.word	0x080050c9

0800af38 <__frame_dummy_init_array_entry>:
 800af38:	08000425                                %...

0800af3c <_fini>:
 800af3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3e:	bf00      	nop
 800af40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af42:	bc08      	pop	{r3}
 800af44:	469e      	mov	lr, r3
 800af46:	4770      	bx	lr

0800af48 <__fini_array_start>:
 800af48:	08000401 	.word	0x08000401
