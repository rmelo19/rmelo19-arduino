
bin/reflex:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_vectors>:
 8000000:	48 46 01 20 d5 06 00 08 d1 06 00 08 d1 06 00 08     HF. ............
 8000010:	d1 06 00 08 d1 06 00 08 d1 06 00 08 00 00 00 00     ................
	...
 800002c:	d1 06 00 08 d1 06 00 08 00 00 00 00 d1 06 00 08     ................
 800003c:	d1 06 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     ................
 800004c:	d1 06 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     ................
 800005c:	d1 06 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     ................
 800006c:	d1 06 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     ................
 800007c:	d1 06 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     ................
 800008c:	d1 06 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     ................
 800009c:	d1 06 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     ................
 80000ac:	d1 06 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     ................
 80000bc:	d1 06 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     ................
 80000cc:	d1 06 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     ................
 80000dc:	8d 1a 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     ................
 80000ec:	d1 06 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     ................
 80000fc:	d1 06 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     ................
 800010c:	d1 06 00 08 c9 1a 00 08 0d 1b 00 08 d1 06 00 08     ................
 800011c:	d1 06 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     ................
 800012c:	d1 06 00 08 d1 06 00 08 99 14 00 08 d1 06 00 08     ................
 800013c:	d1 06 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     ................
 800014c:	d1 06 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     ................
 800015c:	51 1b 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     Q...............
 800016c:	d1 06 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     ................
 800017c:	d1 06 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     ................
 800018c:	d1 06 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     ................
 800019c:	d1 06 00 08 d1 06 00 08 d1 06 00 08 d1 06 00 08     ................
	...

08000400 <__do_global_dtors_aux>:
 8000400:	b510      	push	{r4, lr}
 8000402:	4c05      	ldr	r4, [pc, #20]	; (8000418 <__do_global_dtors_aux+0x18>)
 8000404:	7823      	ldrb	r3, [r4, #0]
 8000406:	b933      	cbnz	r3, 8000416 <__do_global_dtors_aux+0x16>
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <__do_global_dtors_aux+0x1c>)
 800040a:	b113      	cbz	r3, 8000412 <__do_global_dtors_aux+0x12>
 800040c:	4804      	ldr	r0, [pc, #16]	; (8000420 <__do_global_dtors_aux+0x20>)
 800040e:	f3af 8000 	nop.w
 8000412:	2301      	movs	r3, #1
 8000414:	7023      	strb	r3, [r4, #0]
 8000416:	bd10      	pop	{r4, pc}
 8000418:	20000940 	.word	0x20000940
 800041c:	00000000 	.word	0x00000000
 8000420:	0800aeb4 	.word	0x0800aeb4

08000424 <frame_dummy>:
 8000424:	4b08      	ldr	r3, [pc, #32]	; (8000448 <frame_dummy+0x24>)
 8000426:	b510      	push	{r4, lr}
 8000428:	b11b      	cbz	r3, 8000432 <frame_dummy+0xe>
 800042a:	4808      	ldr	r0, [pc, #32]	; (800044c <frame_dummy+0x28>)
 800042c:	4908      	ldr	r1, [pc, #32]	; (8000450 <frame_dummy+0x2c>)
 800042e:	f3af 8000 	nop.w
 8000432:	4808      	ldr	r0, [pc, #32]	; (8000454 <frame_dummy+0x30>)
 8000434:	6803      	ldr	r3, [r0, #0]
 8000436:	b903      	cbnz	r3, 800043a <frame_dummy+0x16>
 8000438:	bd10      	pop	{r4, pc}
 800043a:	4b07      	ldr	r3, [pc, #28]	; (8000458 <frame_dummy+0x34>)
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0fb      	beq.n	8000438 <frame_dummy+0x14>
 8000440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000444:	4718      	bx	r3
 8000446:	bf00      	nop
 8000448:	00000000 	.word	0x00000000
 800044c:	0800aeb4 	.word	0x0800aeb4
 8000450:	20000944 	.word	0x20000944
 8000454:	0800af28 	.word	0x0800af28
 8000458:	00000000 	.word	0x00000000

0800045c <_mainCRTStartup>:
 800045c:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <_mainCRTStartup+0x58>)
 800045e:	2b00      	cmp	r3, #0
 8000460:	bf08      	it	eq
 8000462:	4b13      	ldreq	r3, [pc, #76]	; (80004b0 <_mainCRTStartup+0x54>)
 8000464:	469d      	mov	sp, r3
 8000466:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 800046a:	2100      	movs	r1, #0
 800046c:	468b      	mov	fp, r1
 800046e:	460f      	mov	r7, r1
 8000470:	4813      	ldr	r0, [pc, #76]	; (80004c0 <_mainCRTStartup+0x64>)
 8000472:	4a14      	ldr	r2, [pc, #80]	; (80004c4 <_mainCRTStartup+0x68>)
 8000474:	1a12      	subs	r2, r2, r0
 8000476:	f003 fb91 	bl	8003b9c <memset>
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <_mainCRTStartup+0x5c>)
 800047c:	2b00      	cmp	r3, #0
 800047e:	d000      	beq.n	8000482 <_mainCRTStartup+0x26>
 8000480:	4798      	blx	r3
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <_mainCRTStartup+0x60>)
 8000484:	2b00      	cmp	r3, #0
 8000486:	d000      	beq.n	800048a <_mainCRTStartup+0x2e>
 8000488:	4798      	blx	r3
 800048a:	2000      	movs	r0, #0
 800048c:	2100      	movs	r1, #0
 800048e:	0004      	movs	r4, r0
 8000490:	000d      	movs	r5, r1
 8000492:	480d      	ldr	r0, [pc, #52]	; (80004c8 <_mainCRTStartup+0x6c>)
 8000494:	2800      	cmp	r0, #0
 8000496:	d002      	beq.n	800049e <_mainCRTStartup+0x42>
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <_mainCRTStartup+0x70>)
 800049a:	f004 ff99 	bl	80053d0 <atexit>
 800049e:	f003 fabb 	bl	8003a18 <__libc_init_array>
 80004a2:	0020      	movs	r0, r4
 80004a4:	0029      	movs	r1, r5
 80004a6:	f000 f813 	bl	80004d0 <main>
 80004aa:	f003 faa5 	bl	80039f8 <exit>
 80004ae:	bf00      	nop
 80004b0:	00080000 	.word	0x00080000
	...
 80004c0:	20000940 	.word	0x20000940
 80004c4:	20010650 	.word	0x20010650
 80004c8:	080053d1 	.word	0x080053d1
 80004cc:	08006765 	.word	0x08006765

080004d0 <main>:
#include "config.h"

#include "async_poll.h"
int main()
{
 80004d0:	b508      	push	{r3, lr}
  init();
 80004d2:	f000 f8dd 	bl	8000690 <init>
  
  printf("Starting...\n");
 80004d6:	480c      	ldr	r0, [pc, #48]	; (8000508 <main+0x38>)
 80004d8:	f003 fc12 	bl	8003d00 <puts>
  ledsPattern(OFF, OFF, OFF, ON);
 80004dc:	2000      	movs	r0, #0
 80004de:	4601      	mov	r1, r0
 80004e0:	4602      	mov	r2, r0
 80004e2:	2301      	movs	r3, #1
 80004e4:	f000 fbc8 	bl	8000c78 <ledsPattern>
  uint8_t result;
  udelay(10000);
 80004e8:	f242 7010 	movw	r0, #10000	; 0x2710
 80004ec:	f000 fa12 	bl	8000914 <udelay>
  while(1)
  {
    errorService();
 80004f0:	f003 fa18 	bl	8003924 <errorService>
    // udelay(100000);
    result = asyncUpdate();
 80004f4:	f003 f9a6 	bl	8003844 <asyncUpdate>
      
    if (result)
 80004f8:	2800      	cmp	r0, #0
 80004fa:	d0f9      	beq.n	80004f0 <main+0x20>
    {
      printf("All done, send via ethernet...\n");
 80004fc:	4803      	ldr	r0, [pc, #12]	; (800050c <main+0x3c>)
 80004fe:	f003 fbff 	bl	8003d00 <puts>
      ethernetService();
 8000502:	f001 fa0b 	bl	800191c <ethernetService>
 8000506:	e7f3      	b.n	80004f0 <main+0x20>
 8000508:	0800a88c 	.word	0x0800a88c
 800050c:	0800a898 	.word	0x0800a898

08000510 <configurePorts>:
  asyncInit();                     // initiate state machine
}

void configurePorts(void)
{
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 8000510:	4b56      	ldr	r3, [pc, #344]	; (800066c <configurePorts+0x15c>)
 8000512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000514:	f042 020f 	orr.w	r2, r2, #15

  asyncInit();                     // initiate state machine
}

void configurePorts(void)
{
 8000518:	b570      	push	{r4, r5, r6, lr}
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 800051a:	631a      	str	r2, [r3, #48]	; 0x30
                  RCC_AHB1ENR_GPIOBEN |
                  RCC_AHB1ENR_GPIOCEN |
                  RCC_AHB1ENR_GPIODEN;
  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN |
 800051c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  RCC_APB1ENR_I2C3EN |
                  RCC_APB1ENR_SPI2EN;
  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;

  pin_set_alternate_function(GPIOB, PORTB_I2C1_SCL, 4);
 800051e:	4d54      	ldr	r5, [pc, #336]	; (8000670 <configurePorts+0x160>)
  pin_set_alternate_function(GPIOB, PORTB_I2C1_SDA, 4);
  pin_set_output_type(GPIOB, PORTB_I2C1_SCL, PIN_OUTPUT_TYPE_OPEN_DRAIN);
  pin_set_output_type(GPIOB, PORTB_I2C1_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);

  pin_set_alternate_function(GPIOA, PORTA_I2C3_SCL, 4);
 8000520:	4c54      	ldr	r4, [pc, #336]	; (8000674 <configurePorts+0x164>)
  pin_set_alternate_function(GPIOC, PORTC_I2C3_SDA, 4);
 8000522:	4e55      	ldr	r6, [pc, #340]	; (8000678 <configurePorts+0x168>)
{
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
                  RCC_AHB1ENR_GPIOBEN |
                  RCC_AHB1ENR_GPIOCEN |
                  RCC_AHB1ENR_GPIODEN;
  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN |
 8000524:	f442 0220 	orr.w	r2, r2, #10485760	; 0xa00000
 8000528:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800052c:	641a      	str	r2, [r3, #64]	; 0x40
                  RCC_APB1ENR_I2C3EN |
                  RCC_APB1ENR_SPI2EN;
  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800052e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000530:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000534:	645a      	str	r2, [r3, #68]	; 0x44

  pin_set_alternate_function(GPIOB, PORTB_I2C1_SCL, 4);
 8000536:	4628      	mov	r0, r5
 8000538:	2106      	movs	r1, #6
 800053a:	2204      	movs	r2, #4
 800053c:	f002 ffc8 	bl	80034d0 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOB, PORTB_I2C1_SDA, 4);
 8000540:	4628      	mov	r0, r5
 8000542:	2107      	movs	r1, #7
 8000544:	2204      	movs	r2, #4
 8000546:	f002 ffc3 	bl	80034d0 <pin_set_alternate_function>
  pin_set_output_type(GPIOB, PORTB_I2C1_SCL, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 800054a:	4628      	mov	r0, r5
 800054c:	2106      	movs	r1, #6
 800054e:	2201      	movs	r2, #1
 8000550:	f002 ffb0 	bl	80034b4 <pin_set_output_type>
  pin_set_output_type(GPIOB, PORTB_I2C1_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 8000554:	4628      	mov	r0, r5
 8000556:	2107      	movs	r1, #7
 8000558:	2201      	movs	r2, #1
 800055a:	f002 ffab 	bl	80034b4 <pin_set_output_type>

  pin_set_alternate_function(GPIOA, PORTA_I2C3_SCL, 4);
 800055e:	4620      	mov	r0, r4
 8000560:	2108      	movs	r1, #8
 8000562:	2204      	movs	r2, #4
 8000564:	f002 ffb4 	bl	80034d0 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOC, PORTC_I2C3_SDA, 4);
 8000568:	4630      	mov	r0, r6
 800056a:	2109      	movs	r1, #9
 800056c:	2204      	movs	r2, #4
 800056e:	f002 ffaf 	bl	80034d0 <pin_set_alternate_function>
  pin_set_output_type(GPIOA, PORTA_I2C3_SCL, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 8000572:	4620      	mov	r0, r4
 8000574:	2108      	movs	r1, #8
 8000576:	2201      	movs	r2, #1
 8000578:	f002 ff9c 	bl	80034b4 <pin_set_output_type>
  pin_set_output_type(GPIOC, PORTC_I2C3_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 800057c:	4630      	mov	r0, r6
 800057e:	2109      	movs	r1, #9
 8000580:	2201      	movs	r2, #1
 8000582:	f002 ff97 	bl	80034b4 <pin_set_output_type>

  //I2C1->CCR |= I2C_CCR_FS | // set fast mode
  //             35; // 42 MHz / (3 * 400 kHz) == 35
  //I2C1->TRISE = 42 * 300 / 1000 + 1; // not sure here.
  I2C1->CR2   |= APB_MHZ; // 42MHz -> 101010
 8000586:	4a3d      	ldr	r2, [pc, #244]	; (800067c <configurePorts+0x16c>)
  I2C1->CCR   |= I2C_CCR; // I2C_CCR = 210
  I2C1->TRISE &= ~0x3f; // 0x3f = 0b00111111 -> 0b11000000, clearing register
  I2C1->TRISE |= I2C_TRISE; // = I2C_TRISE = (APB_MHZ * 200 / 1000 + 1), maximum rise time
  I2C1->CR1   |= I2C_CR1_PE; // peripheral enable

  I2C3->CR2   |= APB_MHZ;
 8000588:	4b3d      	ldr	r3, [pc, #244]	; (8000680 <configurePorts+0x170>)
  pin_set_output_type(GPIOC, PORTC_I2C3_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);

  //I2C1->CCR |= I2C_CCR_FS | // set fast mode
  //             35; // 42 MHz / (3 * 400 kHz) == 35
  //I2C1->TRISE = 42 * 300 / 1000 + 1; // not sure here.
  I2C1->CR2   |= APB_MHZ; // 42MHz -> 101010
 800058a:	8891      	ldrh	r1, [r2, #4]
 800058c:	b289      	uxth	r1, r1
 800058e:	f041 012a 	orr.w	r1, r1, #42	; 0x2a
 8000592:	8091      	strh	r1, [r2, #4]
  I2C1->CCR   |= I2C_CCR; // I2C_CCR = 210
 8000594:	8b91      	ldrh	r1, [r2, #28]
 8000596:	b289      	uxth	r1, r1
 8000598:	f041 01d2 	orr.w	r1, r1, #210	; 0xd2
 800059c:	8391      	strh	r1, [r2, #28]
  I2C1->TRISE &= ~0x3f; // 0x3f = 0b00111111 -> 0b11000000, clearing register
 800059e:	8c11      	ldrh	r1, [r2, #32]
 80005a0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80005a4:	0409      	lsls	r1, r1, #16
 80005a6:	0c09      	lsrs	r1, r1, #16
 80005a8:	8411      	strh	r1, [r2, #32]
  I2C1->TRISE |= I2C_TRISE; // = I2C_TRISE = (APB_MHZ * 200 / 1000 + 1), maximum rise time
 80005aa:	8c11      	ldrh	r1, [r2, #32]
 80005ac:	b289      	uxth	r1, r1
 80005ae:	f041 0109 	orr.w	r1, r1, #9
 80005b2:	8411      	strh	r1, [r2, #32]
  I2C1->CR1   |= I2C_CR1_PE; // peripheral enable
 80005b4:	8811      	ldrh	r1, [r2, #0]
 80005b6:	b289      	uxth	r1, r1
 80005b8:	f041 0101 	orr.w	r1, r1, #1
 80005bc:	8011      	strh	r1, [r2, #0]

  I2C3->CR2   |= APB_MHZ;
 80005be:	889a      	ldrh	r2, [r3, #4]
 80005c0:	b292      	uxth	r2, r2
 80005c2:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 80005c6:	809a      	strh	r2, [r3, #4]
  I2C3->CCR   |= I2C_CCR;
 80005c8:	8b9a      	ldrh	r2, [r3, #28]
 80005ca:	b292      	uxth	r2, r2
 80005cc:	f042 02d2 	orr.w	r2, r2, #210	; 0xd2
 80005d0:	839a      	strh	r2, [r3, #28]
  I2C3->TRISE &= ~0x3f;
 80005d2:	8c1a      	ldrh	r2, [r3, #32]
 80005d4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80005d8:	0412      	lsls	r2, r2, #16
 80005da:	0c12      	lsrs	r2, r2, #16
 80005dc:	841a      	strh	r2, [r3, #32]
  I2C3->TRISE |= I2C_TRISE;
 80005de:	8c1a      	ldrh	r2, [r3, #32]
 80005e0:	b292      	uxth	r2, r2
 80005e2:	f042 0209 	orr.w	r2, r2, #9
 80005e6:	841a      	strh	r2, [r3, #32]
  I2C3->CR1   |= I2C_CR1_PE;
 80005e8:	881a      	ldrh	r2, [r3, #0]
 80005ea:	b292      	uxth	r2, r2
 80005ec:	f042 0201 	orr.w	r2, r2, #1
 80005f0:	801a      	strh	r2, [r3, #0]

  // now, set up the spi-to-i2c bridges
  pin_set_output(GPIOC, PORTC_I2C_BRIDGE_RESET);
 80005f2:	4630      	mov	r0, r6
 80005f4:	210e      	movs	r1, #14
 80005f6:	f002 ff99 	bl	800352c <pin_set_output>
  pin_set_output(GPIOA, PORTA_BRIDGE0_CS);
 80005fa:	4620      	mov	r0, r4
 80005fc:	2104      	movs	r1, #4
 80005fe:	f002 ff95 	bl	800352c <pin_set_output>
  pin_set_output(GPIOB, PORTB_BRIDGE1_CS);
 8000602:	4628      	mov	r0, r5
 8000604:	2109      	movs	r1, #9
 8000606:	f002 ff91 	bl	800352c <pin_set_output>
  pin_set_output_level(GPIOA, PORTA_BRIDGE0_CS, 1);
 800060a:	4620      	mov	r0, r4
 800060c:	2104      	movs	r1, #4
 800060e:	2201      	movs	r2, #1
 8000610:	f002 ff9c 	bl	800354c <pin_set_output_level>
  pin_set_output_level(GPIOA, PORTB_BRIDGE1_CS, 1);
 8000614:	4620      	mov	r0, r4
 8000616:	2109      	movs	r1, #9
 8000618:	2201      	movs	r2, #1
 800061a:	f002 ff97 	bl	800354c <pin_set_output_level>

  pin_set_alternate_function(GPIOA, PORTA_BRIDGE0_MISO, 5);
 800061e:	4620      	mov	r0, r4
 8000620:	2106      	movs	r1, #6
 8000622:	2205      	movs	r2, #5
 8000624:	f002 ff54 	bl	80034d0 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOB, PORTB_BRIDGE0_MOSI, 5);
 8000628:	2105      	movs	r1, #5
 800062a:	460a      	mov	r2, r1
 800062c:	4628      	mov	r0, r5
 800062e:	f002 ff4f 	bl	80034d0 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOA, PORTA_BRIDGE0_SCLK, 5);
 8000632:	2105      	movs	r1, #5
 8000634:	460a      	mov	r2, r1
 8000636:	4620      	mov	r0, r4
 8000638:	f002 ff4a 	bl	80034d0 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOC, PORTC_BRIDGE1_MISO, 5);
 800063c:	4630      	mov	r0, r6
 800063e:	2102      	movs	r1, #2
 8000640:	2205      	movs	r2, #5
 8000642:	f002 ff45 	bl	80034d0 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOC, PORTC_BRIDGE1_MOSI, 5);
 8000646:	4630      	mov	r0, r6
 8000648:	2103      	movs	r1, #3
 800064a:	2205      	movs	r2, #5
 800064c:	f002 ff40 	bl	80034d0 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOD, PORTD_BRIDGE1_SCLK, 5);
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <configurePorts+0x174>)
 8000652:	2103      	movs	r1, #3
 8000654:	2205      	movs	r2, #5
 8000656:	f002 ff3b 	bl	80034d0 <pin_set_alternate_function>

  // SPI1
  // running from a 84 MHz pclk. set it up with
  // sclk = pclk/64 to stay within datasheet limits.
  SPI1->CR1 = SPI_CR1_BR_2 | // sclk = pclk/64
 800065a:	490b      	ldr	r1, [pc, #44]	; (8000688 <configurePorts+0x178>)
              SPI_CR1_SSM  | // software slave-select mode
              SPI_CR1_SSI  | // the value of this bit is forced onto the NSS pin and the IO value of the NSS pin is ignored.
              SPI_CR1_SPE;   // SPI enable

  // bit rate = 42 mhz / 32 = 1.313 MHz
  SPI2->CR1 = SPI_CR1_BR_2 | // sclk = pclk/32
 800065c:	4b0b      	ldr	r3, [pc, #44]	; (800068c <configurePorts+0x17c>)
  pin_set_alternate_function(GPIOD, PORTD_BRIDGE1_SCLK, 5);

  // SPI1
  // running from a 84 MHz pclk. set it up with
  // sclk = pclk/64 to stay within datasheet limits.
  SPI1->CR1 = SPI_CR1_BR_2 | // sclk = pclk/64
 800065e:	f240 306f 	movw	r0, #879	; 0x36f
              SPI_CR1_SSM  | // software slave-select mode
              SPI_CR1_SSI  | // the value of this bit is forced onto the NSS pin and the IO value of the NSS pin is ignored.
              SPI_CR1_SPE;   // SPI enable

  // bit rate = 42 mhz / 32 = 1.313 MHz
  SPI2->CR1 = SPI_CR1_BR_2 | // sclk = pclk/32
 8000662:	f240 3267 	movw	r2, #871	; 0x367
  pin_set_alternate_function(GPIOD, PORTD_BRIDGE1_SCLK, 5);

  // SPI1
  // running from a 84 MHz pclk. set it up with
  // sclk = pclk/64 to stay within datasheet limits.
  SPI1->CR1 = SPI_CR1_BR_2 | // sclk = pclk/64
 8000666:	8008      	strh	r0, [r1, #0]
              SPI_CR1_SSM  | // software slave-select mode
              SPI_CR1_SSI  | // the value of this bit is forced onto the NSS pin and the IO value of the NSS pin is ignored.
              SPI_CR1_SPE;   // SPI enable

  // bit rate = 42 mhz / 32 = 1.313 MHz
  SPI2->CR1 = SPI_CR1_BR_2 | // sclk = pclk/32
 8000668:	801a      	strh	r2, [r3, #0]
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	40023800 	.word	0x40023800
 8000670:	40020400 	.word	0x40020400
 8000674:	40020000 	.word	0x40020000
 8000678:	40020800 	.word	0x40020800
 800067c:	40005400 	.word	0x40005400
 8000680:	40005c00 	.word	0x40005c00
 8000684:	40020c00 	.word	0x40020c00
 8000688:	40013000 	.word	0x40013000
 800068c:	40003800 	.word	0x40003800

08000690 <init>:
#include "config.h"

void init()
{
 8000690:	b508      	push	{r3, lr}
  
  configurePorts();                // microcontroller configuration
 8000692:	f7ff ff3d 	bl	8000510 <configurePorts>
  consoleInit();                   // console for printf over UART
 8000696:	f000 fc09 	bl	8000eac <consoleInit>

  takktileInit();                  // takktile
 800069a:	f002 fb41 	bl	8002d20 <takktileInit>
  encInit();                       // encoders
 800069e:	f002 ff5f 	bl	8003560 <encInit>


  systime_init();
 80006a2:	f001 f951 	bl	8001948 <systime_init>
  leds_init();
 80006a6:	f000 fb73 	bl	8000d90 <leds_init>
  enet_init();
 80006aa:	f000 fcdb 	bl	8001064 <enet_init>
  dmxl_init();
 80006ae:	f001 faa5 	bl	8001bfc <dmxl_init>
  fan_init();
 80006b2:	f001 ffd3 	bl	800265c <fan_init>
  
  state_init();
 80006b6:	f003 f87f 	bl	80037b8 <state_init>
  fan_on();                        // todo: be smarter. probably doesn't need to run all the time.
 80006ba:	f001 ffdf 	bl	800267c <fan_on>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80006be:	b662      	cpsie	i
  __enable_irq();
  dmxl_set_baud_rates();
 80006c0:	f001 fcc0 	bl	8002044 <dmxl_set_baud_rates>
  dmxl_set_status_return_levels();
 80006c4:	f001 fc66 	bl	8001f94 <dmxl_set_status_return_levels>


  asyncInit();                     // initiate state machine
}
 80006c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  __enable_irq();
  dmxl_set_baud_rates();
  dmxl_set_status_return_levels();


  asyncInit();                     // initiate state machine
 80006cc:	f003 b8a2 	b.w	8003814 <asyncInit>

080006d0 <unmapped_vector>:
  while (1) { } // hopefully we never get here...
}

void unmapped_vector()
{
  while (1) { } // spin to allow jtag trap
 80006d0:	e7fe      	b.n	80006d0 <unmapped_vector>
 80006d2:	bf00      	nop

080006d4 <reset_vector>:
extern int main();

void startup_clock_init_fail() { while (1) { } }

void reset_vector()
{
 80006d4:	b510      	push	{r4, lr}
 80006d6:	b082      	sub	sp, #8
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d8:	b672      	cpsid	i
  //WDT->WDT_MR = WDT_MR_WDDIS; // disable watchdog for now
  // set up data segment
  __disable_irq();
  pSrc = &_srelocate_flash;
  pDest = &_srelocate;
  if (pSrc != pDest)
 80006da:	4a46      	ldr	r2, [pc, #280]	; (80007f4 <reset_vector+0x120>)
 80006dc:	4946      	ldr	r1, [pc, #280]	; (80007f8 <reset_vector+0x124>)
 80006de:	428a      	cmp	r2, r1
 80006e0:	d00e      	beq.n	8000700 <reset_vector+0x2c>
    for (; pDest < &_erelocate; )
 80006e2:	4b46      	ldr	r3, [pc, #280]	; (80007fc <reset_vector+0x128>)
 80006e4:	4299      	cmp	r1, r3
 80006e6:	d20b      	bcs.n	8000700 <reset_vector+0x2c>
 80006e8:	43c8      	mvns	r0, r1
 80006ea:	4403      	add	r3, r0
 80006ec:	f023 0303 	bic.w	r3, r3, #3
 80006f0:	3304      	adds	r3, #4
 80006f2:	4413      	add	r3, r2
      *pDest++ = *pSrc++;
 80006f4:	f852 0b04 	ldr.w	r0, [r2], #4
 80006f8:	f841 0b04 	str.w	r0, [r1], #4
  // set up data segment
  __disable_irq();
  pSrc = &_srelocate_flash;
  pDest = &_srelocate;
  if (pSrc != pDest)
    for (; pDest < &_erelocate; )
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d1f9      	bne.n	80006f4 <reset_vector+0x20>
      *pDest++ = *pSrc++;
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
 8000700:	4b3f      	ldr	r3, [pc, #252]	; (8000800 <reset_vector+0x12c>)
 8000702:	4a40      	ldr	r2, [pc, #256]	; (8000804 <reset_vector+0x130>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d20a      	bcs.n	800071e <reset_vector+0x4a>
 8000708:	43d9      	mvns	r1, r3
 800070a:	440a      	add	r2, r1
 800070c:	f022 0203 	bic.w	r2, r2, #3
 8000710:	3204      	adds	r2, #4
 8000712:	441a      	add	r2, r3
    *pDest++ = 0;
 8000714:	2100      	movs	r1, #0
 8000716:	f843 1b04 	str.w	r1, [r3], #4
  pDest = &_srelocate;
  if (pSrc != pDest)
    for (; pDest < &_erelocate; )
      *pDest++ = *pSrc++;
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
 800071a:	4293      	cmp	r3, r2
 800071c:	d1fb      	bne.n	8000716 <reset_vector+0x42>
    *pDest++ = 0;
  //__libc_init_array() ;
  SCB->CPACR |= ((3UL << (10*2)) | (3UL << (11*2))); // activate the FPU
 800071e:	493a      	ldr	r1, [pc, #232]	; (8000808 <reset_vector+0x134>)
  RCC->CR |= 0x1; // ensure the HSI (internal) oscillator is on
 8000720:	4b3a      	ldr	r3, [pc, #232]	; (800080c <reset_vector+0x138>)
      *pDest++ = *pSrc++;
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
    *pDest++ = 0;
  //__libc_init_array() ;
  SCB->CPACR |= ((3UL << (10*2)) | (3UL << (11*2))); // activate the FPU
 8000722:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
  RCC->CR |= 0x1; // ensure the HSI (internal) oscillator is on
  RCC->CFGR = 0; // ensure the HSI oscillator is the clock source
  RCC->CR &= 0xfef6ffff; // turn off the main PLL and HSE oscillator
  RCC->PLLCFGR = 0x24003010; // ensure PLLCFGR is at reset state
 8000726:	483a      	ldr	r0, [pc, #232]	; (8000810 <reset_vector+0x13c>)
      *pDest++ = *pSrc++;
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
    *pDest++ = 0;
  //__libc_init_array() ;
  SCB->CPACR |= ((3UL << (10*2)) | (3UL << (11*2))); // activate the FPU
 8000728:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800072c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= 0x1; // ensure the HSI (internal) oscillator is on
 8000730:	681a      	ldr	r2, [r3, #0]
  RCC->CFGR = 0; // ensure the HSI oscillator is the clock source
 8000732:	2100      	movs	r1, #0
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
    *pDest++ = 0;
  //__libc_init_array() ;
  SCB->CPACR |= ((3UL << (10*2)) | (3UL << (11*2))); // activate the FPU
  RCC->CR |= 0x1; // ensure the HSI (internal) oscillator is on
 8000734:	f042 0201 	orr.w	r2, r2, #1
 8000738:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0; // ensure the HSI oscillator is the clock source
 800073a:	6099      	str	r1, [r3, #8]
  RCC->CR &= 0xfef6ffff; // turn off the main PLL and HSE oscillator
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000742:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000746:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010; // ensure PLLCFGR is at reset state
 8000748:	6058      	str	r0, [r3, #4]
  RCC->CR &= 0xfffbffff; // reset HSEBYP (i.e., HSE is *not* bypassed)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000750:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x0; // disable all RCC interrupts
 8000752:	60d9      	str	r1, [r3, #12]
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800075a:	601a      	str	r2, [r3, #0]
  for (volatile uint32_t i = 0; 
 800075c:	9101      	str	r1, [sp, #4]
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
 800075e:	9a01      	ldr	r2, [sp, #4]
  RCC->CR &= 0xfef6ffff; // turn off the main PLL and HSE oscillator
  RCC->PLLCFGR = 0x24003010; // ensure PLLCFGR is at reset state
  RCC->CR &= 0xfffbffff; // reset HSEBYP (i.e., HSE is *not* bypassed)
  RCC->CIR = 0x0; // disable all RCC interrupts
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
  for (volatile uint32_t i = 0; 
 8000760:	f5b2 4fa0 	cmp.w	r2, #20480	; 0x5000
 8000764:	d307      	bcc.n	8000776 <reset_vector+0xa2>
 8000766:	e009      	b.n	800077c <reset_vector+0xa8>
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
 8000768:	9a01      	ldr	r2, [sp, #4]
 800076a:	3201      	adds	r2, #1
 800076c:	9201      	str	r2, [sp, #4]
 800076e:	9a01      	ldr	r2, [sp, #4]
  RCC->CR &= 0xfef6ffff; // turn off the main PLL and HSE oscillator
  RCC->PLLCFGR = 0x24003010; // ensure PLLCFGR is at reset state
  RCC->CR &= 0xfffbffff; // reset HSEBYP (i.e., HSE is *not* bypassed)
  RCC->CIR = 0x0; // disable all RCC interrupts
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
  for (volatile uint32_t i = 0; 
 8000770:	f5b2 4fa0 	cmp.w	r2, #20480	; 0x5000
 8000774:	d202      	bcs.n	800077c <reset_vector+0xa8>
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	0390      	lsls	r0, r2, #14
 800077a:	d5f5      	bpl.n	8000768 <reset_vector+0x94>
  { } // wait for either timeout or HSE to spin up
  FLASH->ACR = 0; // ensure the caches are turned off, so we can reset them
 800077c:	4a25      	ldr	r2, [pc, #148]	; (8000814 <reset_vector+0x140>)
  FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST; // flush the cache
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | 
               FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS; // re-enable the caches
  if (!(RCC->CR & RCC_CR_HSERDY))
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <reset_vector+0x138>)
  RCC->CIR = 0x0; // disable all RCC interrupts
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
  for (volatile uint32_t i = 0; 
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
  { } // wait for either timeout or HSE to spin up
  FLASH->ACR = 0; // ensure the caches are turned off, so we can reset them
 8000780:	2400      	movs	r4, #0
  FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST; // flush the cache
 8000782:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | 
 8000786:	f240 7105 	movw	r1, #1797	; 0x705
  RCC->CIR = 0x0; // disable all RCC interrupts
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
  for (volatile uint32_t i = 0; 
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
  { } // wait for either timeout or HSE to spin up
  FLASH->ACR = 0; // ensure the caches are turned off, so we can reset them
 800078a:	6014      	str	r4, [r2, #0]
  FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST; // flush the cache
 800078c:	6010      	str	r0, [r2, #0]
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | 
 800078e:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS; // re-enable the caches
  if (!(RCC->CR & RCC_CR_HSERDY))
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	0394      	lsls	r4, r2, #14
 8000794:	d400      	bmi.n	8000798 <reset_vector+0xc4>
 8000796:	e7fe      	b.n	8000796 <reset_vector+0xc2>
    startup_clock_init_fail(); // go there and spin forever. BUH BYE
  RCC->APB1ENR |= RCC_APB1ENR_PWREN; // clock up the power controller
 8000798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_VOS; // ensure the voltage regulator is at max beef
 800079a:	491f      	ldr	r1, [pc, #124]	; (8000818 <reset_vector+0x144>)
  // PLL_VCO = 25 mhz / PLL_M * PLL_N = 336 MHz
  #define PLL_P   2
  // SYSCLK = PLL_VCO / PLL_P = 168 MHz
  #define PLL_Q   7
  // USB clock = PLL_VCO / PLL_Q = 48 MHz
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1)-1) << 16) |
 800079c:	481f      	ldr	r0, [pc, #124]	; (800081c <reset_vector+0x148>)
  FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST; // flush the cache
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | 
               FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS; // re-enable the caches
  if (!(RCC->CR & RCC_CR_HSERDY))
    startup_clock_init_fail(); // go there and spin forever. BUH BYE
  RCC->APB1ENR |= RCC_APB1ENR_PWREN; // clock up the power controller
 800079e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007a2:	641a      	str	r2, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_VOS; // ensure the voltage regulator is at max beef
 80007a4:	680a      	ldr	r2, [r1, #0]
 80007a6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80007aa:	600a      	str	r2, [r1, #0]
                         // this will let us run at 168 MHz without overdrive
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1; // set HCLK (AHB clock) to sysclock
 80007ac:	689a      	ldr	r2, [r3, #8]
 80007ae:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV2; // set APB high-speed clock to sysclock/2
 80007b0:	689a      	ldr	r2, [r3, #8]
 80007b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80007b6:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV4; // set APB  low-speed clock to sysclock/4
 80007b8:	689a      	ldr	r2, [r3, #8]
 80007ba:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80007be:	609a      	str	r2, [r3, #8]
  // PLL_VCO = 25 mhz / PLL_M * PLL_N = 336 MHz
  #define PLL_P   2
  // SYSCLK = PLL_VCO / PLL_P = 168 MHz
  #define PLL_Q   7
  // USB clock = PLL_VCO / PLL_Q = 48 MHz
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1)-1) << 16) |
 80007c0:	6058      	str	r0, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
  RCC->CR |= RCC_CR_PLLON; // start spinning up the PLL
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80007c8:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY)) { } // wait until it's spun up
 80007ca:	6819      	ldr	r1, [r3, #0]
 80007cc:	4a0f      	ldr	r2, [pc, #60]	; (800080c <reset_vector+0x138>)
 80007ce:	0189      	lsls	r1, r1, #6
 80007d0:	d5fb      	bpl.n	80007ca <reset_vector+0xf6>
  RCC->CFGR &= ~((uint32_t)RCC_CFGR_SW); // select internal oscillator
 80007d2:	6893      	ldr	r3, [r2, #8]
 80007d4:	f023 0303 	bic.w	r3, r3, #3
 80007d8:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL; // select PLL as clock source
 80007da:	6893      	ldr	r3, [r2, #8]
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL) { } // wait for it...
 80007e2:	6893      	ldr	r3, [r2, #8]
 80007e4:	f003 030c 	and.w	r3, r3, #12
 80007e8:	2b08      	cmp	r3, #8
 80007ea:	d1fa      	bne.n	80007e2 <reset_vector+0x10e>
  // hooray we're done! we're now running at 168 MHz.
  main(); // jump to application main()
 80007ec:	f7ff fe70 	bl	80004d0 <main>
  while (1) { } // hopefully we never get here...
 80007f0:	e7fe      	b.n	80007f0 <reset_vector+0x11c>
 80007f2:	bf00      	nop
 80007f4:	0800af34 	.word	0x0800af34
 80007f8:	20000000 	.word	0x20000000
 80007fc:	2000093c 	.word	0x2000093c
 8000800:	20000940 	.word	0x20000940
 8000804:	20010650 	.word	0x20010650
 8000808:	e000ed00 	.word	0xe000ed00
 800080c:	40023800 	.word	0x40023800
 8000810:	24003010 	.word	0x24003010
 8000814:	40023c00 	.word	0x40023c00
 8000818:	40007000 	.word	0x40007000
 800081c:	07405419 	.word	0x07405419

08000820 <startup_clock_init_fail>:
#include "./stm32/stm32f4xx.h"

extern uint32_t _srelocate_flash, _srelocate, _erelocate, _ebss, _sbss;
extern int main();

void startup_clock_init_fail() { while (1) { } }
 8000820:	e7fe      	b.n	8000820 <startup_clock_init_fail>
 8000822:	bf00      	nop

08000824 <writeRegisterI2C>:
#include "i2cFunc.h"

int writeRegisterI2C(I2C_TypeDef *i2cPort, uint8_t address, uint8_t registerAddress)
{
  // starting i2c communication on I2c bus 3 
  i2cPort->CR1 |=  I2C_CR1_START; // generating start condition
 8000824:	8803      	ldrh	r3, [r0, #0]
 8000826:	b29b      	uxth	r3, r3
 8000828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800082c:	8003      	strh	r3, [r0, #0]
  i2cPort->SR1 &= ~I2C_SR1_AF;    // clearing acknowledge
 800082e:	8a83      	ldrh	r3, [r0, #20]
 8000830:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000834:	041b      	lsls	r3, r3, #16
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	8283      	strh	r3, [r0, #20]

  while (!(i2cPort->SR1 & I2C_SR1_SB));
 800083a:	8a83      	ldrh	r3, [r0, #20]
 800083c:	07db      	lsls	r3, r3, #31
 800083e:	d5fc      	bpl.n	800083a <writeRegisterI2C+0x16>
  // initialTime = SYSTIME; while (!(i2cPort->SR1 & I2C_SR1_SB) && !timeout(1000, initialTime));

  // Send address with write bit
  i2cPort->DR = ((uint8_t) address << 1); // puts the address to be sent on the buffer using global variable
 8000840:	0049      	lsls	r1, r1, #1
 8000842:	8201      	strh	r1, [r0, #16]

  while(!(i2cPort->SR1 & (I2C_SR1_ADDR))); // wait for address transmission
 8000844:	8a83      	ldrh	r3, [r0, #20]
 8000846:	079b      	lsls	r3, r3, #30
 8000848:	d5fc      	bpl.n	8000844 <writeRegisterI2C+0x20>
  i2cPort->SR2; // un-stretch clock by reading here (?)

  i2cPort->DR = registerAddress; // Send the address of the desired register
 800084a:	b292      	uxth	r2, r2

  // Send address with write bit
  i2cPort->DR = ((uint8_t) address << 1); // puts the address to be sent on the buffer using global variable

  while(!(i2cPort->SR1 & (I2C_SR1_ADDR))); // wait for address transmission
  i2cPort->SR2; // un-stretch clock by reading here (?)
 800084c:	8b03      	ldrh	r3, [r0, #24]

  i2cPort->DR = registerAddress; // Send the address of the desired register
 800084e:	8202      	strh	r2, [r0, #16]

  while (!(i2cPort->SR1 & (I2C_SR1_BTF | I2C_SR1_AF)));
 8000850:	8a83      	ldrh	r3, [r0, #20]
 8000852:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8000856:	f023 0303 	bic.w	r3, r3, #3
 800085a:	055b      	lsls	r3, r3, #21
 800085c:	0d5b      	lsrs	r3, r3, #21
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0f6      	beq.n	8000850 <writeRegisterI2C+0x2c>

  i2cPort->CR1 |= I2C_CR1_STOP;
 8000862:	8803      	ldrh	r3, [r0, #0]
 8000864:	b29b      	uxth	r3, r3
 8000866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800086a:	8003      	strh	r3, [r0, #0]
  return 0;
}

int isBusyI2CPort(I2C_TypeDef* i2cPort)
{
  return i2cPort->SR2 & I2C_SR2_BUSY;
 800086c:	8b03      	ldrh	r3, [r0, #24]
 800086e:	f003 0302 	and.w	r3, r3, #2

  while (!(i2cPort->SR1 & (I2C_SR1_BTF | I2C_SR1_AF)));

  i2cPort->CR1 |= I2C_CR1_STOP;

  while (isBusyI2CPort(i2cPort)); // wait until bus is not busy anymore   
 8000872:	b29b      	uxth	r3, r3
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1f9      	bne.n	800086c <writeRegisterI2C+0x48>

  return 0;
}
 8000878:	4618      	mov	r0, r3
 800087a:	4770      	bx	lr

0800087c <readBytesI2C>:


int readBytesI2C(I2C_TypeDef *i2cPort, uint8_t address, int numBytes, uint8_t* values)
{
 800087c:	b430      	push	{r4, r5}
 800087e:	4604      	mov	r4, r0
  // Send the address with the read bit
  // starting I2C communication
  i2cPort->CR1 |=  I2C_CR1_START;
 8000880:	8800      	ldrh	r0, [r0, #0]
 8000882:	b280      	uxth	r0, r0
 8000884:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8000888:	8020      	strh	r0, [r4, #0]
  i2cPort->SR1 &= ~I2C_SR1_AF;
 800088a:	8aa0      	ldrh	r0, [r4, #20]
 800088c:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8000890:	0400      	lsls	r0, r0, #16
 8000892:	0c00      	lsrs	r0, r0, #16
 8000894:	82a0      	strh	r0, [r4, #20]

  while (!(i2cPort->SR1 & I2C_SR1_SB));  
 8000896:	8aa0      	ldrh	r0, [r4, #20]
 8000898:	07c5      	lsls	r5, r0, #31
 800089a:	d5fc      	bpl.n	8000896 <readBytesI2C+0x1a>

  // Send address with read bit
  i2cPort->DR = ((uint8_t) address << 1) + 1; // puts the address to be sent on the buffer using global variable
 800089c:	0049      	lsls	r1, r1, #1
 800089e:	3101      	adds	r1, #1
 80008a0:	8221      	strh	r1, [r4, #16]

  while (!(i2cPort->SR1 & (I2C_SR1_ADDR)));
 80008a2:	8aa1      	ldrh	r1, [r4, #20]
 80008a4:	0788      	lsls	r0, r1, #30
 80008a6:	d5fc      	bpl.n	80008a2 <readBytesI2C+0x26>
  i2cPort->SR2; // un-stretch clock by reading here (?)
 80008a8:	8b21      	ldrh	r1, [r4, #24]

  i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable
 80008aa:	8821      	ldrh	r1, [r4, #0]
 80008ac:	b289      	uxth	r1, r1
 80008ae:	f441 6180 	orr.w	r1, r1, #1024	; 0x400

  for (int i = 0; i < numBytes-1; i++)
 80008b2:	2a01      	cmp	r2, #1
  i2cPort->DR = ((uint8_t) address << 1) + 1; // puts the address to be sent on the buffer using global variable

  while (!(i2cPort->SR1 & (I2C_SR1_ADDR)));
  i2cPort->SR2; // un-stretch clock by reading here (?)

  i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable
 80008b4:	8021      	strh	r1, [r4, #0]

  for (int i = 0; i < numBytes-1; i++)
 80008b6:	dd0f      	ble.n	80008d8 <readBytesI2C+0x5c>
 80008b8:	1e95      	subs	r5, r2, #2
 80008ba:	441d      	add	r5, r3
 80008bc:	1e58      	subs	r0, r3, #1
  {
    while (!(i2cPort->SR1 & I2C_SR1_RXNE));
 80008be:	8aa1      	ldrh	r1, [r4, #20]
 80008c0:	0649      	lsls	r1, r1, #25
 80008c2:	d5fc      	bpl.n	80008be <readBytesI2C+0x42>
    values[i] = i2cPort->DR;
 80008c4:	8a21      	ldrh	r1, [r4, #16]
 80008c6:	f800 1f01 	strb.w	r1, [r0, #1]!
    i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable
 80008ca:	8821      	ldrh	r1, [r4, #0]
 80008cc:	b289      	uxth	r1, r1
 80008ce:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  while (!(i2cPort->SR1 & (I2C_SR1_ADDR)));
  i2cPort->SR2; // un-stretch clock by reading here (?)

  i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable

  for (int i = 0; i < numBytes-1; i++)
 80008d2:	42a8      	cmp	r0, r5
  {
    while (!(i2cPort->SR1 & I2C_SR1_RXNE));
    values[i] = i2cPort->DR;
    i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable
 80008d4:	8021      	strh	r1, [r4, #0]
  while (!(i2cPort->SR1 & (I2C_SR1_ADDR)));
  i2cPort->SR2; // un-stretch clock by reading here (?)

  i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable

  for (int i = 0; i < numBytes-1; i++)
 80008d6:	d1f2      	bne.n	80008be <readBytesI2C+0x42>
  {
    while (!(i2cPort->SR1 & I2C_SR1_RXNE));
    values[i] = i2cPort->DR;
    i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable
  }
  while (!(i2cPort->SR1 & I2C_SR1_RXNE));
 80008d8:	8aa1      	ldrh	r1, [r4, #20]
 80008da:	0649      	lsls	r1, r1, #25
 80008dc:	d5fc      	bpl.n	80008d8 <readBytesI2C+0x5c>
  values[numBytes-1] = i2cPort->DR;
 80008de:	4413      	add	r3, r2
 80008e0:	8a22      	ldrh	r2, [r4, #16]
 80008e2:	f803 2c01 	strb.w	r2, [r3, #-1]
  i2cPort->CR1 &= ~I2C_CR1_ACK; // last read
 80008e6:	8823      	ldrh	r3, [r4, #0]
 80008e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80008ec:	041b      	lsls	r3, r3, #16
 80008ee:	0c1b      	lsrs	r3, r3, #16
 80008f0:	8023      	strh	r3, [r4, #0]

  i2cPort->CR1 |= I2C_CR1_STOP;
 80008f2:	8823      	ldrh	r3, [r4, #0]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008fa:	8023      	strh	r3, [r4, #0]
  return 0;
}

int isBusyI2CPort(I2C_TypeDef* i2cPort)
{
  return i2cPort->SR2 & I2C_SR2_BUSY;
 80008fc:	8b20      	ldrh	r0, [r4, #24]
 80008fe:	f000 0002 	and.w	r0, r0, #2
  values[numBytes-1] = i2cPort->DR;
  i2cPort->CR1 &= ~I2C_CR1_ACK; // last read

  i2cPort->CR1 |= I2C_CR1_STOP;

  while (isBusyI2CPort(i2cPort)); // wait until bus is not busy anymore
 8000902:	b280      	uxth	r0, r0
 8000904:	2800      	cmp	r0, #0
 8000906:	d1f9      	bne.n	80008fc <readBytesI2C+0x80>

  return 0;
}
 8000908:	bc30      	pop	{r4, r5}
 800090a:	4770      	bx	lr

0800090c <isBusyI2CPort>:

int isBusyI2CPort(I2C_TypeDef* i2cPort)
{
  return i2cPort->SR2 & I2C_SR2_BUSY;
 800090c:	8b00      	ldrh	r0, [r0, #24]
 800090e:	f000 0002 	and.w	r0, r0, #2
 8000912:	4770      	bx	lr

08000914 <udelay>:
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000914:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000918:	6a51      	ldr	r1, [r2, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 800091a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	4283      	cmp	r3, r0
 8000920:	d3fb      	bcc.n	800091a <udelay+0x6>
}
 8000922:	4770      	bx	lr

08000924 <writeBytesSPI>:
  uint8_t data[1] = {registerAddress};
  return writeBytesSPI(spiPort, address, data, 1, 0);
}

int writeBytesSPI(SPI_TypeDef* spiPort, uint8_t address, uint8_t* data, int len, int toggleAddress)
{
 8000924:	b4f0      	push	{r4, r5, r6, r7}
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  
  cs_gpio->BSRRH = cs_pin_mask;           // assert CS
 8000926:	4c2a      	ldr	r4, [pc, #168]	; (80009d0 <writeBytesSPI+0xac>)
 8000928:	2610      	movs	r6, #16
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 800092a:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
int writeBytesSPI(SPI_TypeDef* spiPort, uint8_t address, uint8_t* data, int len, int toggleAddress)
{
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  
  cs_gpio->BSRRH = cs_pin_mask;           // assert CS
 800092e:	8366      	strh	r6, [r4, #26]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000930:	6a7d      	ldr	r5, [r7, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000932:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000934:	1b64      	subs	r4, r4, r5
 8000936:	2c03      	cmp	r4, #3
 8000938:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 800093c:	d9f9      	bls.n	8000932 <writeBytesSPI+0xe>
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  
  cs_gpio->BSRRH = cs_pin_mask;           // assert CS
  udelay(4);                              // delay 4us

  spiPort->DR = 0x00;                     // send write command 
 800093e:	2400      	movs	r4, #0
 8000940:	8184      	strh	r4, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000942:	6a75      	ldr	r5, [r6, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000944:	4637      	mov	r7, r6
 8000946:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000948:	1b64      	subs	r4, r4, r5
 800094a:	2c0e      	cmp	r4, #14
 800094c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8000950:	d9f9      	bls.n	8000946 <writeBytesSPI+0x22>
  udelay(4);                              // delay 4us

  spiPort->DR = 0x00;                     // send write command 
  udelay(15);                             // delay 15us

  spiPort->DR = (uint8_t) len;            // send data len
 8000952:	b2dc      	uxtb	r4, r3
 8000954:	8184      	strh	r4, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000956:	6a77      	ldr	r7, [r6, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000958:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800095a:	1be4      	subs	r4, r4, r7
 800095c:	2c0e      	cmp	r4, #14
 800095e:	d9fb      	bls.n	8000958 <writeBytesSPI+0x34>

  spiPort->DR = (uint8_t) len;            // send data len
  udelay(15);                             // delay 15us
  
  uint8_t addr;
  if (toggleAddress == 0)
 8000960:	9c04      	ldr	r4, [sp, #16]
 8000962:	b90c      	cbnz	r4, 8000968 <writeBytesSPI+0x44>
    addr = address << 1;
 8000964:	0049      	lsls	r1, r1, #1
 8000966:	b2c9      	uxtb	r1, r1
  else
    addr = address;                          
  spiPort->DR = ((uint8_t) addr);         // send addr
 8000968:	b289      	uxth	r1, r1
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 800096a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  uint8_t addr;
  if (toggleAddress == 0)
    addr = address << 1;
  else
    addr = address;                          
  spiPort->DR = ((uint8_t) addr);         // send addr
 800096e:	8181      	strh	r1, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000970:	6a65      	ldr	r5, [r4, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000972:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000974:	1b49      	subs	r1, r1, r5
 8000976:	290e      	cmp	r1, #14
 8000978:	d9fb      	bls.n	8000972 <writeBytesSPI+0x4e>
  // (0x0C >> 1) 0x06

  // 0xC0 0b1100 0000 original
  // 0x40 0b0100 0000 no toggle 0xC0 << 1 = 0b1000 0000 = 0x80; 0x80 >> 1 = 0x40
  // 0x60 0b0110 0000 with toggle 0xC0 >> 1 = 0x60
  for (int i = 0; i < len; i++)
 800097a:	2b00      	cmp	r3, #0
 800097c:	dd20      	ble.n	80009c0 <writeBytesSPI+0x9c>
 800097e:	4616      	mov	r6, r2
 8000980:	18d7      	adds	r7, r2, r3
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000982:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  // 0xC0 0b1100 0000 original
  // 0x40 0b0100 0000 no toggle 0xC0 << 1 = 0b1000 0000 = 0x80; 0x80 >> 1 = 0x40
  // 0x60 0b0110 0000 with toggle 0xC0 >> 1 = 0x60
  for (int i = 0; i < len; i++)
  {
    spiPort->DR = data[i];                // send data[i]
 8000986:	f816 1b01 	ldrb.w	r1, [r6], #1
 800098a:	8181      	strh	r1, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 800098c:	6a65      	ldr	r5, [r4, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 800098e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000990:	1b49      	subs	r1, r1, r5
 8000992:	290e      	cmp	r1, #14
 8000994:	d9fb      	bls.n	800098e <writeBytesSPI+0x6a>
  // (0x0C >> 1) 0x06

  // 0xC0 0b1100 0000 original
  // 0x40 0b0100 0000 no toggle 0xC0 << 1 = 0b1000 0000 = 0x80; 0x80 >> 1 = 0x40
  // 0x60 0b0110 0000 with toggle 0xC0 >> 1 = 0x60
  for (int i = 0; i < len; i++)
 8000996:	42be      	cmp	r6, r7
 8000998:	d1f5      	bne.n	8000986 <writeBytesSPI+0x62>
  {
    spiPort->DR = data[i];                // send data[i]
    udelay(15);                           // delay 15us
  }

  cs_gpio->BSRRL = cs_pin_mask;           // de-assert CS
 800099a:	490d      	ldr	r1, [pc, #52]	; (80009d0 <writeBytesSPI+0xac>)
 800099c:	2010      	movs	r0, #16
 800099e:	8308      	strh	r0, [r1, #24]

  if (len == 0 || data == NULL)
 80009a0:	b15a      	cbz	r2, 80009ba <writeBytesSPI+0x96>
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 80009a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000

  cs_gpio->BSRRL = cs_pin_mask;           // de-assert CS

  if (len == 0 || data == NULL)
    return 0;
  const uint32_t wait = 180 + 110 * len;
 80009a6:	226e      	movs	r2, #110	; 0x6e
 80009a8:	fb02 f303 	mul.w	r3, r2, r3
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 80009ac:	6a48      	ldr	r0, [r1, #36]	; 0x24

  cs_gpio->BSRRL = cs_pin_mask;           // de-assert CS

  if (len == 0 || data == NULL)
    return 0;
  const uint32_t wait = 180 + 110 * len;
 80009ae:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
  while(SYSTIME - mytime < utime);
 80009b2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80009b4:	1a1b      	subs	r3, r3, r0
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d8fb      	bhi.n	80009b2 <writeBytesSPI+0x8e>
    return 0;
  const uint32_t wait = 180 + 110 * len;
  udelay(wait);

  return 0;
}
 80009ba:	2000      	movs	r0, #0
 80009bc:	bcf0      	pop	{r4, r5, r6, r7}
 80009be:	4770      	bx	lr
  {
    spiPort->DR = data[i];                // send data[i]
    udelay(15);                           // delay 15us
  }

  cs_gpio->BSRRL = cs_pin_mask;           // de-assert CS
 80009c0:	4903      	ldr	r1, [pc, #12]	; (80009d0 <writeBytesSPI+0xac>)
 80009c2:	f04f 0010 	mov.w	r0, #16
 80009c6:	8308      	strh	r0, [r1, #24]

  if (len == 0 || data == NULL)
 80009c8:	d1ea      	bne.n	80009a0 <writeBytesSPI+0x7c>
    return 0;
  const uint32_t wait = 180 + 110 * len;
  udelay(wait);

  return 0;
}
 80009ca:	2000      	movs	r0, #0
 80009cc:	bcf0      	pop	{r4, r5, r6, r7}
 80009ce:	4770      	bx	lr
 80009d0:	40020000 	.word	0x40020000

080009d4 <writeRegisterSPI>:
  int mytime = SYSTIME;
  while(SYSTIME - mytime < utime);
}

int writeRegisterSPI(SPI_TypeDef* spiPort, uint8_t address, uint8_t registerAddress)
{
 80009d4:	b510      	push	{r4, lr}
 80009d6:	b084      	sub	sp, #16
  uint8_t data[1] = {registerAddress};
 80009d8:	ab04      	add	r3, sp, #16
  return writeBytesSPI(spiPort, address, data, 1, 0);
 80009da:	2400      	movs	r4, #0
  while(SYSTIME - mytime < utime);
}

int writeRegisterSPI(SPI_TypeDef* spiPort, uint8_t address, uint8_t registerAddress)
{
  uint8_t data[1] = {registerAddress};
 80009dc:	f803 2d04 	strb.w	r2, [r3, #-4]!
  return writeBytesSPI(spiPort, address, data, 1, 0);
 80009e0:	9400      	str	r4, [sp, #0]
 80009e2:	461a      	mov	r2, r3
 80009e4:	2301      	movs	r3, #1
 80009e6:	f7ff ff9d 	bl	8000924 <writeBytesSPI>
}
 80009ea:	b004      	add	sp, #16
 80009ec:	bd10      	pop	{r4, pc}
 80009ee:	bf00      	nop

080009f0 <readSPIStatus>:
{
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  uint8_t status;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 80009f0:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <readSPIStatus+0xb0>)
 80009f2:	2110      	movs	r1, #16
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 80009f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  uint8_t status;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 80009f8:	8359      	strh	r1, [r3, #26]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 80009fa:	6a51      	ldr	r1, [r2, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 80009fc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80009fe:	1a5b      	subs	r3, r3, r1
 8000a00:	2b03      	cmp	r3, #3
 8000a02:	d9fb      	bls.n	80009fc <readSPIStatus+0xc>
  uint8_t status;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
  udelay(4);
  spiPort->DR;
  spiPort->DR = 0x21;                         // send read command       
 8000a04:	2321      	movs	r3, #33	; 0x21
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  uint8_t status;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
  udelay(4);
  spiPort->DR;
 8000a06:	8982      	ldrh	r2, [r0, #12]
  spiPort->DR = 0x21;                         // send read command       
 8000a08:	8183      	strh	r3, [r0, #12]
  while (!(spiPort->SR & SPI_SR_TXE)) { } // wait for buffer room
 8000a0a:	8903      	ldrh	r3, [r0, #8]
 8000a0c:	0799      	lsls	r1, r3, #30
 8000a0e:	d5fc      	bpl.n	8000a0a <readSPIStatus+0x1a>
  while (!(spiPort->SR & SPI_SR_RXNE)) { }
 8000a10:	8903      	ldrh	r3, [r0, #8]
 8000a12:	07da      	lsls	r2, r3, #31
 8000a14:	d5fc      	bpl.n	8000a10 <readSPIStatus+0x20>
  while (spiPort->SR & SPI_SR_BSY) { }
 8000a16:	8903      	ldrh	r3, [r0, #8]
 8000a18:	061b      	lsls	r3, r3, #24
 8000a1a:	d4fc      	bmi.n	8000a16 <readSPIStatus+0x26>
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000a1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  spiPort->DR;
  spiPort->DR = 0x21;                         // send read command       
  while (!(spiPort->SR & SPI_SR_TXE)) { } // wait for buffer room
  while (!(spiPort->SR & SPI_SR_RXNE)) { }
  while (spiPort->SR & SPI_SR_BSY) { }
  spiPort->DR;
 8000a20:	8983      	ldrh	r3, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000a22:	6a51      	ldr	r1, [r2, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000a24:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000a26:	1a5b      	subs	r3, r3, r1
 8000a28:	2b0e      	cmp	r3, #14
 8000a2a:	d9fb      	bls.n	8000a24 <readSPIStatus+0x34>
  while (!(spiPort->SR & SPI_SR_RXNE)) { }
  while (spiPort->SR & SPI_SR_BSY) { }
  spiPort->DR;
  udelay(15);

  spiPort->DR = 0x04;                         // send status register address
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	8183      	strh	r3, [r0, #12]
   while (!(spiPort->SR & SPI_SR_TXE)) { } // wait for buffer room
 8000a30:	8903      	ldrh	r3, [r0, #8]
 8000a32:	0799      	lsls	r1, r3, #30
 8000a34:	d5fc      	bpl.n	8000a30 <readSPIStatus+0x40>
    while (!(spiPort->SR & SPI_SR_RXNE)) { }
 8000a36:	8903      	ldrh	r3, [r0, #8]
 8000a38:	07da      	lsls	r2, r3, #31
 8000a3a:	d5fc      	bpl.n	8000a36 <readSPIStatus+0x46>
    while (spiPort->SR & SPI_SR_BSY) { }
 8000a3c:	8903      	ldrh	r3, [r0, #8]
 8000a3e:	061b      	lsls	r3, r3, #24
 8000a40:	d4fc      	bmi.n	8000a3c <readSPIStatus+0x4c>
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000a42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000

  spiPort->DR = 0x04;                         // send status register address
   while (!(spiPort->SR & SPI_SR_TXE)) { } // wait for buffer room
    while (!(spiPort->SR & SPI_SR_RXNE)) { }
    while (spiPort->SR & SPI_SR_BSY) { }
  spiPort->DR;
 8000a46:	8983      	ldrh	r3, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000a48:	6a51      	ldr	r1, [r2, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000a4a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000a4c:	1a5b      	subs	r3, r3, r1
 8000a4e:	2b0e      	cmp	r3, #14
 8000a50:	d9fb      	bls.n	8000a4a <readSPIStatus+0x5a>
    while (!(spiPort->SR & SPI_SR_RXNE)) { }
    while (spiPort->SR & SPI_SR_BSY) { }
  spiPort->DR;
  udelay(15);

  spiPort->DR = 0x00;                         // send dummy data
 8000a52:	2300      	movs	r3, #0
 8000a54:	8183      	strh	r3, [r0, #12]
   while (!(spiPort->SR & SPI_SR_TXE)) { } // wait for buffer room
 8000a56:	8903      	ldrh	r3, [r0, #8]
 8000a58:	0799      	lsls	r1, r3, #30
 8000a5a:	d5fc      	bpl.n	8000a56 <readSPIStatus+0x66>
    while (!(spiPort->SR & SPI_SR_RXNE)) { }
 8000a5c:	8903      	ldrh	r3, [r0, #8]
 8000a5e:	07da      	lsls	r2, r3, #31
 8000a60:	d5fc      	bpl.n	8000a5c <readSPIStatus+0x6c>
    while (spiPort->SR & SPI_SR_BSY) { }
 8000a62:	8903      	ldrh	r3, [r0, #8]
 8000a64:	061b      	lsls	r3, r3, #24
 8000a66:	d4fc      	bmi.n	8000a62 <readSPIStatus+0x72>
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000a68:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000

  spiPort->DR = 0x00;                         // send dummy data
   while (!(spiPort->SR & SPI_SR_TXE)) { } // wait for buffer room
    while (!(spiPort->SR & SPI_SR_RXNE)) { }
    while (spiPort->SR & SPI_SR_BSY) { }
  status = spiPort->DR;
 8000a6c:	8983      	ldrh	r3, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000a6e:	6a48      	ldr	r0, [r1, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000a70:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000a72:	1a1b      	subs	r3, r3, r0
 8000a74:	2b0e      	cmp	r3, #14
 8000a76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a7a:	d9f9      	bls.n	8000a70 <readSPIStatus+0x80>
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000a7c:	6a50      	ldr	r0, [r2, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000a7e:	4611      	mov	r1, r2
 8000a80:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000a82:	1a1b      	subs	r3, r3, r0
 8000a84:	2b0e      	cmp	r3, #14
 8000a86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a8a:	d9f9      	bls.n	8000a80 <readSPIStatus+0x90>
  udelay(15);

  status = status + 1 - 1;
  udelay(15);

  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <readSPIStatus+0xb0>)
 8000a8e:	2110      	movs	r1, #16
 8000a90:	8319      	strh	r1, [r3, #24]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000a92:	6a51      	ldr	r1, [r2, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000a94:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000a96:	1a5b      	subs	r3, r3, r1
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	d9fb      	bls.n	8000a94 <readSPIStatus+0xa4>

  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS
  udelay(4);

  return 0;
}
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	4770      	bx	lr
 8000aa0:	40020000 	.word	0x40020000

08000aa4 <readBytesSPIAssert>:

int readBytesSPIAssert(SPI_TypeDef* spiPort, uint8_t address, uint8_t numBytes, volatile uint8_t* values)
{
 8000aa4:	b4f0      	push	{r4, r5, r6, r7}
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 8000aa6:	4d30      	ldr	r5, [pc, #192]	; (8000b68 <readBytesSPIAssert+0xc4>)
 8000aa8:	2710      	movs	r7, #16
  // udelay(4);                                  // delay 4us
  
  spiPort->DR = 0x01;                         // send read command       
 8000aaa:	2401      	movs	r4, #1
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000aac:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
int readBytesSPIAssert(SPI_TypeDef* spiPort, uint8_t address, uint8_t numBytes, volatile uint8_t* values)
{
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 8000ab0:	836f      	strh	r7, [r5, #26]
  // udelay(4);                                  // delay 4us
  
  spiPort->DR = 0x01;                         // send read command       
 8000ab2:	8184      	strh	r4, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000ab4:	6a77      	ldr	r7, [r6, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000ab6:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8000ab8:	1be4      	subs	r4, r4, r7
 8000aba:	2c0e      	cmp	r4, #14
 8000abc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8000ac0:	d9f9      	bls.n	8000ab6 <readBytesSPIAssert+0x12>
  // udelay(4);                                  // delay 4us
  
  spiPort->DR = 0x01;                         // send read command       
  udelay(SLEEP);                                 // delay 15us

  spiPort->DR = (uint8_t) numBytes;           // send data len
 8000ac2:	b294      	uxth	r4, r2
 8000ac4:	8184      	strh	r4, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000ac6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000ac8:	462e      	mov	r6, r5
 8000aca:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8000acc:	1be4      	subs	r4, r4, r7
 8000ace:	2c0e      	cmp	r4, #14
 8000ad0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8000ad4:	d9f9      	bls.n	8000aca <readBytesSPIAssert+0x26>
  udelay(SLEEP);                                 // delay 15us

  spiPort->DR = (uint8_t) numBytes;           // send data len
  udelay(SLEEP);                                 // delay 15us
                                              
  spiPort->DR = ((uint8_t) address << 1) + 1; // send addr
 8000ad6:	0049      	lsls	r1, r1, #1
 8000ad8:	3101      	adds	r1, #1
 8000ada:	8181      	strh	r1, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000adc:	6a6e      	ldr	r6, [r5, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000ade:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000ae0:	1b89      	subs	r1, r1, r6
 8000ae2:	290e      	cmp	r1, #14
 8000ae4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000ae8:	d9f9      	bls.n	8000ade <readBytesSPIAssert+0x3a>
  udelay(SLEEP);                                 // delay 15us
                                              
  spiPort->DR = ((uint8_t) address << 1) + 1; // send addr
  udelay(SLEEP);                                 // delay 15us
  
  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS
 8000aea:	491f      	ldr	r1, [pc, #124]	; (8000b68 <readBytesSPIAssert+0xc4>)
 8000aec:	2510      	movs	r5, #16
 8000aee:	830d      	strh	r5, [r1, #24]

  if (numBytes == 0 || values == NULL)
 8000af0:	2a00      	cmp	r2, #0
 8000af2:	d035      	beq.n	8000b60 <readBytesSPIAssert+0xbc>
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d033      	beq.n	8000b60 <readBytesSPIAssert+0xbc>
    return 0;

  const uint32_t wait = 180 + 110 * numBytes;
 8000af8:	216e      	movs	r1, #110	; 0x6e
 8000afa:	26b4      	movs	r6, #180	; 0xb4
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000afc:	6a67      	ldr	r7, [r4, #36]	; 0x24
  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS

  if (numBytes == 0 || values == NULL)
    return 0;

  const uint32_t wait = 180 + 110 * numBytes;
 8000afe:	fb11 6602 	smlabb	r6, r1, r2, r6
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
  while(SYSTIME - mytime < utime);
 8000b02:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000b04:	1bc9      	subs	r1, r1, r7
 8000b06:	428e      	cmp	r6, r1
 8000b08:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8000b0c:	d8f9      	bhi.n	8000b02 <readBytesSPIAssert+0x5e>
    return 0;

  const uint32_t wait = 180 + 110 * numBytes;
  udelay(wait);
  
  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 8000b0e:	4916      	ldr	r1, [pc, #88]	; (8000b68 <readBytesSPIAssert+0xc4>)
 8000b10:	2410      	movs	r4, #16
 8000b12:	834c      	strh	r4, [r1, #26]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000b14:	6a6e      	ldr	r6, [r5, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000b16:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000b18:	1b89      	subs	r1, r1, r6
 8000b1a:	2903      	cmp	r1, #3
 8000b1c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000b20:	d9f9      	bls.n	8000b16 <readBytesSPIAssert+0x72>
  udelay(wait);
  
  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
  udelay(4);

  spiPort->DR = 0x06;                         // read buffer command
 8000b22:	2106      	movs	r1, #6
 8000b24:	8181      	strh	r1, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000b26:	6a65      	ldr	r5, [r4, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000b28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000b2a:	1b49      	subs	r1, r1, r5
 8000b2c:	290e      	cmp	r1, #14
 8000b2e:	d9fb      	bls.n	8000b28 <readBytesSPIAssert+0x84>
 8000b30:	189e      	adds	r6, r3, r2
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000b32:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  spiPort->DR = 0x06;                         // read buffer command
  // spiPort->DR; 
  udelay(SLEEP);                                 // delay 15us
  for (int i=0; i<numBytes;i++)
  {
    values[i] = (uint8_t) spiPort->DR;
 8000b36:	8981      	ldrh	r1, [r0, #12]
 8000b38:	b2c9      	uxtb	r1, r1
 8000b3a:	7019      	strb	r1, [r3, #0]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000b3c:	6a65      	ldr	r5, [r4, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000b3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b40:	1b52      	subs	r2, r2, r5
 8000b42:	2a0e      	cmp	r2, #14
 8000b44:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000b48:	d9f9      	bls.n	8000b3e <readBytesSPIAssert+0x9a>
 8000b4a:	3301      	adds	r3, #1
  udelay(4);

  spiPort->DR = 0x06;                         // read buffer command
  // spiPort->DR; 
  udelay(SLEEP);                                 // delay 15us
  for (int i=0; i<numBytes;i++)
 8000b4c:	42b3      	cmp	r3, r6
 8000b4e:	d1f2      	bne.n	8000b36 <readBytesSPIAssert+0x92>
    values[i] = (uint8_t) spiPort->DR;
    // if (i != numBytes-1)
    //   spiPort->DR = 0x0;                      
    udelay(SLEEP);                               // delay 15us
  }
  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <readBytesSPIAssert+0xc4>)
 8000b52:	2210      	movs	r2, #16
 8000b54:	831a      	strh	r2, [r3, #24]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000b56:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000b58:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000b5a:	1a9b      	subs	r3, r3, r2
 8000b5c:	2b1d      	cmp	r3, #29
 8000b5e:	d9fb      	bls.n	8000b58 <readBytesSPIAssert+0xb4>
  }
  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS
  udelay(30);

  return 0;
}
 8000b60:	2000      	movs	r0, #0
 8000b62:	bcf0      	pop	{r4, r5, r6, r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40020000 	.word	0x40020000

08000b6c <readCommmand>:
int readCommmand(SPI_TypeDef* spiPort, uint8_t address, uint8_t numBytes)
{
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <readCommmand+0x5c>)

  return 0;
}

int readCommmand(SPI_TypeDef* spiPort, uint8_t address, uint8_t numBytes)
{
 8000b6e:	b470      	push	{r4, r5, r6}
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 8000b70:	2410      	movs	r4, #16
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000b72:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
int readCommmand(SPI_TypeDef* spiPort, uint8_t address, uint8_t numBytes)
{
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 8000b76:	835c      	strh	r4, [r3, #26]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000b78:	6a6e      	ldr	r6, [r5, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000b7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000b7c:	1b9b      	subs	r3, r3, r6
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000b84:	d9f9      	bls.n	8000b7a <readCommmand+0xe>
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
  udelay(4);
  
  spiPort->DR = 0x01;                         // send read command
 8000b86:	2301      	movs	r3, #1
 8000b88:	8183      	strh	r3, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000b8a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000b8c:	4625      	mov	r5, r4
 8000b8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000b90:	1b9b      	subs	r3, r3, r6
 8000b92:	2b0e      	cmp	r3, #14
 8000b94:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000b98:	d9f9      	bls.n	8000b8e <readCommmand+0x22>
  
  spiPort->DR = 0x01;                         // send read command
  // while((spiPort->SR & (SPI_SR_TXE)));        //while((spiPort->SR & (SPI_SR_BSY)));
  udelay(15);
  
  spiPort->DR = (uint8_t) numBytes;           // send data len                            
 8000b9a:	b292      	uxth	r2, r2
 8000b9c:	8182      	strh	r2, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000b9e:	6a65      	ldr	r5, [r4, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ba2:	1b5b      	subs	r3, r3, r5
 8000ba4:	2b0e      	cmp	r3, #14
 8000ba6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000baa:	d9f9      	bls.n	8000ba0 <readCommmand+0x34>
  
  spiPort->DR = (uint8_t) numBytes;           // send data len                            
  // while((spiPort->SR & (SPI_SR_BSY)));
  udelay(15);
  
  spiPort->DR = ((uint8_t) address << 1) + 1; // send addr
 8000bac:	0049      	lsls	r1, r1, #1
 8000bae:	3101      	adds	r1, #1
 8000bb0:	8181      	strh	r1, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000bb2:	6a51      	ldr	r1, [r2, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000bb4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000bb6:	1a5b      	subs	r3, r3, r1
 8000bb8:	2b0e      	cmp	r3, #14
 8000bba:	d9fb      	bls.n	8000bb4 <readCommmand+0x48>
  
  spiPort->DR = ((uint8_t) address << 1) + 1; // send addr
  // while((spiPort->SR & (SPI_SR_BSY))); 
  udelay(15);
  
  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS
 8000bbc:	4b02      	ldr	r3, [pc, #8]	; (8000bc8 <readCommmand+0x5c>)
 8000bbe:	2210      	movs	r2, #16

  return 0;
}
 8000bc0:	2000      	movs	r0, #0
  
  spiPort->DR = ((uint8_t) address << 1) + 1; // send addr
  // while((spiPort->SR & (SPI_SR_BSY))); 
  udelay(15);
  
  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS
 8000bc2:	831a      	strh	r2, [r3, #24]

  return 0;
}
 8000bc4:	bc70      	pop	{r4, r5, r6}
 8000bc6:	4770      	bx	lr
 8000bc8:	40020000 	.word	0x40020000

08000bcc <readBytesSPI>:


int readBytesSPI(SPI_TypeDef* spiPort, uint8_t address, uint8_t numBytes, uint8_t* values)
{
 8000bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bce:	461e      	mov	r6, r3
 8000bd0:	4615      	mov	r5, r2
 8000bd2:	4604      	mov	r4, r0

  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  // uint8_t status;

  readCommmand(spiPort, address, numBytes);
 8000bd4:	f7ff ffca 	bl	8000b6c <readCommmand>
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000bd8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  // uint8_t status;

  readCommmand(spiPort, address, numBytes);

  uint32_t wait = 180 + 110 * numBytes;
 8000bdc:	236e      	movs	r3, #110	; 0x6e
 8000bde:	20b4      	movs	r0, #180	; 0xb4
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000be0:	6a4f      	ldr	r7, [r1, #36]	; 0x24
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  // uint8_t status;

  readCommmand(spiPort, address, numBytes);

  uint32_t wait = 180 + 110 * numBytes;
 8000be2:	fb13 0005 	smlabb	r0, r3, r5, r0
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
  while(SYSTIME - mytime < utime);
 8000be6:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000be8:	1bd2      	subs	r2, r2, r7
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bf0:	d3f9      	bcc.n	8000be6 <readBytesSPI+0x1a>
  readCommmand(spiPort, address, numBytes);

  uint32_t wait = 180 + 110 * numBytes;
  udelay(wait);

  if (numBytes == 0 || values == NULL)
 8000bf2:	2d00      	cmp	r5, #0
 8000bf4:	d03c      	beq.n	8000c70 <readBytesSPI+0xa4>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d03a      	beq.n	8000c70 <readBytesSPI+0xa4>
    return 0;
  
  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 8000bfa:	4a1e      	ldr	r2, [pc, #120]	; (8000c74 <readBytesSPI+0xa8>)
 8000bfc:	2110      	movs	r1, #16
 8000bfe:	8351      	strh	r1, [r2, #26]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000c00:	6a58      	ldr	r0, [r3, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000c02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c04:	1a12      	subs	r2, r2, r0
 8000c06:	2a03      	cmp	r2, #3
 8000c08:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000c0c:	d9f9      	bls.n	8000c02 <readBytesSPI+0x36>
    return 0;
  
  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
  udelay(4);

  spiPort->DR = 0x06;                         // read buffer command
 8000c0e:	2306      	movs	r3, #6
 8000c10:	81a3      	strh	r3, [r4, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000c12:	6a48      	ldr	r0, [r1, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000c14:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000c16:	1a12      	subs	r2, r2, r0
 8000c18:	2a0e      	cmp	r2, #14
 8000c1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c1e:	d9f9      	bls.n	8000c14 <readBytesSPI+0x48>
  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
  udelay(4);

  spiPort->DR = 0x06;                         // read buffer command
  udelay(SLEEP);
  values[0] =  spiPort->DR;
 8000c20:	89a2      	ldrh	r2, [r4, #12]
 8000c22:	7032      	strb	r2, [r6, #0]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000c24:	6a59      	ldr	r1, [r3, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c28:	1a52      	subs	r2, r2, r1
 8000c2a:	2a0e      	cmp	r2, #14
 8000c2c:	d9fb      	bls.n	8000c26 <readBytesSPI+0x5a>

  spiPort->DR = 0x06;                         // read buffer command
  udelay(SLEEP);
  values[0] =  spiPort->DR;
  udelay(SLEEP);                                 // delay 15us
  for (int i=0; i<numBytes;i++)
 8000c2e:	b1ad      	cbz	r5, 8000c5c <readBytesSPI+0x90>
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000c30:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000c34:	4435      	add	r5, r6
  while(SYSTIME - mytime < utime);
 8000c36:	468e      	mov	lr, r1
  values[0] =  spiPort->DR;
  udelay(SLEEP);                                 // delay 15us
  for (int i=0; i<numBytes;i++)
  {
    // if (i != numBytes-1)
    spiPort->DR = 0x0;
 8000c38:	2700      	movs	r7, #0
 8000c3a:	81a7      	strh	r7, [r4, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000c3c:	6a48      	ldr	r0, [r1, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000c3e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000c40:	1a12      	subs	r2, r2, r0
 8000c42:	2a0e      	cmp	r2, #14
 8000c44:	d9fb      	bls.n	8000c3e <readBytesSPI+0x72>
  for (int i=0; i<numBytes;i++)
  {
    // if (i != numBytes-1)
    spiPort->DR = 0x0;
    udelay(SLEEP);
    values[i] = (uint8_t) spiPort->DR;                     
 8000c46:	89a3      	ldrh	r3, [r4, #12]
 8000c48:	f806 3b01 	strb.w	r3, [r6], #1
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000c4c:	f8de 0024 	ldr.w	r0, [lr, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000c50:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000c52:	1a12      	subs	r2, r2, r0
 8000c54:	2a0e      	cmp	r2, #14
 8000c56:	d9fb      	bls.n	8000c50 <readBytesSPI+0x84>

  spiPort->DR = 0x06;                         // read buffer command
  udelay(SLEEP);
  values[0] =  spiPort->DR;
  udelay(SLEEP);                                 // delay 15us
  for (int i=0; i<numBytes;i++)
 8000c58:	42ae      	cmp	r6, r5
 8000c5a:	d1ee      	bne.n	8000c3a <readBytesSPI+0x6e>
    spiPort->DR = 0x0;
    udelay(SLEEP);
    values[i] = (uint8_t) spiPort->DR;                     
    udelay(SLEEP);                               // delay 15us
  }
  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <readBytesSPI+0xa8>)
 8000c5e:	2110      	movs	r1, #16
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000c60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    spiPort->DR = 0x0;
    udelay(SLEEP);
    values[i] = (uint8_t) spiPort->DR;                     
    udelay(SLEEP);                               // delay 15us
  }
  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS
 8000c64:	8319      	strh	r1, [r3, #24]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000c66:	6a51      	ldr	r1, [r2, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000c68:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000c6a:	1a5b      	subs	r3, r3, r1
 8000c6c:	2b1d      	cmp	r3, #29
 8000c6e:	d9fb      	bls.n	8000c68 <readBytesSPI+0x9c>
  // ledStatus(status);
  // udelay(100);
  // while(1);

  return 0;
}
 8000c70:	2000      	movs	r0, #0
 8000c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c74:	40020000 	.word	0x40020000

08000c78 <ledsPattern>:
      break;
  }
}

void ledsPattern(int led1, int led2, int led3, int led4)
{
 8000c78:	b530      	push	{r4, r5, lr}
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
  {
    if (leds[i] == ON)
 8000c7a:	2801      	cmp	r0, #1
      break;
  }
}

void ledsPattern(int led1, int led2, int led3, int led4)
{
 8000c7c:	b085      	sub	sp, #20
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
 8000c7e:	f04f 0400 	mov.w	r4, #0
  }
}

void ledsPattern(int led1, int led2, int led3, int led4)
{
  int leds[4] = {led1, led2, led3, led4};
 8000c82:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8000c86:	466d      	mov	r5, sp
    {
      leds_on(i);
    }
    else
    {
      leds_off(i);
 8000c88:	b2e0      	uxtb	r0, r4
{
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
  {
    if (leds[i] == ON)
 8000c8a:	d009      	beq.n	8000ca0 <ledsPattern+0x28>

void ledsPattern(int led1, int led2, int led3, int led4)
{
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
 8000c8c:	3401      	adds	r4, #1
    {
      leds_on(i);
    }
    else
    {
      leds_off(i);
 8000c8e:	f000 f8bf 	bl	8000e10 <leds_off>

void ledsPattern(int led1, int led2, int led3, int led4)
{
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
 8000c92:	2c04      	cmp	r4, #4
 8000c94:	d009      	beq.n	8000caa <ledsPattern+0x32>
 8000c96:	f855 0f04 	ldr.w	r0, [r5, #4]!
  {
    if (leds[i] == ON)
 8000c9a:	2801      	cmp	r0, #1
    {
      leds_on(i);
    }
    else
    {
      leds_off(i);
 8000c9c:	b2e0      	uxtb	r0, r4
{
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
  {
    if (leds[i] == ON)
 8000c9e:	d1f5      	bne.n	8000c8c <ledsPattern+0x14>

void ledsPattern(int led1, int led2, int led3, int led4)
{
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
 8000ca0:	3401      	adds	r4, #1
  {
    if (leds[i] == ON)
    {
      leds_on(i);
 8000ca2:	f000 f891 	bl	8000dc8 <leds_on>

void ledsPattern(int led1, int led2, int led3, int led4)
{
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
 8000ca6:	2c04      	cmp	r4, #4
 8000ca8:	d1f5      	bne.n	8000c96 <ledsPattern+0x1e>
    else
    {
      leds_off(i);
    }
  }
 8000caa:	b005      	add	sp, #20
 8000cac:	bd30      	pop	{r4, r5, pc}
 8000cae:	bf00      	nop

08000cb0 <ledStatus>:
  return 0;
}

void ledStatus(uint8_t status)
{
  switch(status & 0xF)
 8000cb0:	f000 000f 	and.w	r0, r0, #15
 8000cb4:	3801      	subs	r0, #1
 8000cb6:	280e      	cmp	r0, #14
 8000cb8:	d80f      	bhi.n	8000cda <ledStatus+0x2a>
 8000cba:	e8df f000 	tbb	[pc, r0]
 8000cbe:	1a14      	.short	0x1a14
 8000cc0:	322c2620 	.word	0x322c2620
 8000cc4:	4a443e38 	.word	0x4a443e38
 8000cc8:	085c5650 	.word	0x085c5650
 8000ccc:	62          	.byte	0x62
 8000ccd:	00          	.byte	0x00
      break;
    case 0xD: // 1101 -> 101 -> 5
      ledsPattern(OFF, OFF, ON, OFF);
      break;
    case 0xE:
      ledsPattern(OFF, OFF, OFF, ON);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	f7ff bfcf 	b.w	8000c78 <ledsPattern>
void ledStatus(uint8_t status)
{
  switch(status & 0xF)
  {
    case 0x0:
      ledsPattern(ON, ON, ON, ON);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	4601      	mov	r1, r0
 8000cde:	4602      	mov	r2, r0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	f7ff bfc9 	b.w	8000c78 <ledsPattern>
      break;
    case 0x1:
      ledsPattern(ON, ON, ON, OFF);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4601      	mov	r1, r0
 8000cea:	4602      	mov	r2, r0
 8000cec:	2300      	movs	r3, #0
 8000cee:	f7ff bfc3 	b.w	8000c78 <ledsPattern>
      break;
    case 0x2:
      ledsPattern(ON, ON, OFF, ON);
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4601      	mov	r1, r0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f7ff bfbd 	b.w	8000c78 <ledsPattern>
      break;
    case 0x3:
      ledsPattern(ON, ON, OFF, OFF);
 8000cfe:	2001      	movs	r0, #1
 8000d00:	2200      	movs	r2, #0
 8000d02:	4601      	mov	r1, r0
 8000d04:	4613      	mov	r3, r2
 8000d06:	f7ff bfb7 	b.w	8000c78 <ledsPattern>
      break;
    case 0x4:
      ledsPattern(ON, OFF, ON, ON);
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2100      	movs	r1, #0
 8000d12:	f7ff bfb1 	b.w	8000c78 <ledsPattern>
      break;
    case 0x5:
      ledsPattern(ON, OFF, ON, OFF);
 8000d16:	2001      	movs	r0, #1
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	f7ff bfab 	b.w	8000c78 <ledsPattern>
      break;
    case 0x6:
      ledsPattern(ON, OFF, OFF, ON);
 8000d22:	2001      	movs	r0, #1
 8000d24:	2100      	movs	r1, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	460a      	mov	r2, r1
 8000d2a:	f7ff bfa5 	b.w	8000c78 <ledsPattern>
      break;
    case 0x7:
      ledsPattern(ON, OFF, OFF, OFF);
 8000d2e:	2100      	movs	r1, #0
 8000d30:	460a      	mov	r2, r1
 8000d32:	460b      	mov	r3, r1
 8000d34:	2001      	movs	r0, #1
 8000d36:	f7ff bf9f 	b.w	8000c78 <ledsPattern>
      break;
    case 0x8:
      ledsPattern(OFF, ON, ON, ON);
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	460a      	mov	r2, r1
 8000d3e:	460b      	mov	r3, r1
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff bf99 	b.w	8000c78 <ledsPattern>
      break;
    case 0x9:
      ledsPattern(OFF, ON, ON, OFF);
 8000d46:	2000      	movs	r0, #0
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	f7ff bf93 	b.w	8000c78 <ledsPattern>
      break;
    case 0xA:
      ledsPattern(OFF, ON, OFF, ON);
 8000d52:	2000      	movs	r0, #0
 8000d54:	2101      	movs	r1, #1
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	f7ff bf8d 	b.w	8000c78 <ledsPattern>
      break;
    case 0xB: // 1011 -> 011 3
      ledsPattern(OFF, ON, OFF, OFF);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	4602      	mov	r2, r0
 8000d62:	4603      	mov	r3, r0
 8000d64:	2101      	movs	r1, #1
 8000d66:	f7ff bf87 	b.w	8000c78 <ledsPattern>
      break;
    case 0xC:
      ledsPattern(OFF, OFF, ON, ON);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4601      	mov	r1, r0
 8000d70:	4613      	mov	r3, r2
 8000d72:	f7ff bf81 	b.w	8000c78 <ledsPattern>
      break;
    case 0xD: // 1101 -> 101 -> 5
      ledsPattern(OFF, OFF, ON, OFF);
 8000d76:	2000      	movs	r0, #0
 8000d78:	4601      	mov	r1, r0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f7ff bf7b 	b.w	8000c78 <ledsPattern>
      break;
    case 0xE:
      ledsPattern(OFF, OFF, OFF, ON);
      break;
    case 0xF:
      ledsPattern(OFF, OFF, OFF, OFF);
 8000d82:	2000      	movs	r0, #0
 8000d84:	4601      	mov	r1, r0
 8000d86:	4602      	mov	r2, r0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	f7ff bf75 	b.w	8000c78 <ledsPattern>
 8000d8e:	bf00      	nop

08000d90 <leds_init>:
#define PORTB_LED2 10
#define PORTE_LED3 15

void leds_init()
{
  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <leds_init+0x2c>)
  GPIOE->MODER   |= (1 << (PORTE_LED0 * 2)) |
 8000d92:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <leds_init+0x30>)
#define PORTB_LED2 10
#define PORTE_LED3 15

void leds_init()
{
  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 8000d94:	6b13      	ldr	r3, [r2, #48]	; 0x30
  GPIOE->MODER   |= (1 << (PORTE_LED0 * 2)) |
                    (1 << (PORTE_LED1 * 2)) |
                    (1 << (PORTE_LED3 * 2));

  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOBEN;
  GPIOB->MODER   |= (1 << (PORTB_LED2 * 2));
 8000d96:	490b      	ldr	r1, [pc, #44]	; (8000dc4 <leds_init+0x34>)
#define PORTB_LED2 10
#define PORTE_LED3 15

void leds_init()
{
  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 8000d98:	f043 0310 	orr.w	r3, r3, #16
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOE->MODER   |= (1 << (PORTE_LED0 * 2)) |
 8000d9e:	6803      	ldr	r3, [r0, #0]
 8000da0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000da4:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8000da8:	6003      	str	r3, [r0, #0]
                    (1 << (PORTE_LED1 * 2)) |
                    (1 << (PORTE_LED3 * 2));

  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOBEN;
 8000daa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOB->MODER   |= (1 << (PORTB_LED2 * 2));
 8000db2:	680b      	ldr	r3, [r1, #0]
 8000db4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000db8:	600b      	str	r3, [r1, #0]
 8000dba:	4770      	bx	lr
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40020400 	.word	0x40020400

08000dc8 <leds_on>:
}

void leds_on(uint8_t led)
{
  if (led == 0)
 8000dc8:	b148      	cbz	r0, 8000dde <leds_on+0x16>
    GPIOE->BSRRL = 1 << PORTE_LED0;
  else if (led == 1)
 8000dca:	2801      	cmp	r0, #1
 8000dcc:	d00b      	beq.n	8000de6 <leds_on+0x1e>
    GPIOE->BSRRL = 1 << PORTE_LED1;
  else if (led == 2)
 8000dce:	2802      	cmp	r0, #2
 8000dd0:	d012      	beq.n	8000df8 <leds_on+0x30>
    GPIOB->BSRRL = 1 << PORTB_LED2;
  else if (led == 3)
 8000dd2:	2803      	cmp	r0, #3
 8000dd4:	d00b      	beq.n	8000dee <leds_on+0x26>
    GPIOE->BSRRL = 1 << PORTE_LED3;
  else
    printf("LED %d does not exist\n", led);
 8000dd6:	4601      	mov	r1, r0
 8000dd8:	480a      	ldr	r0, [pc, #40]	; (8000e04 <leds_on+0x3c>)
 8000dda:	f002 bf3d 	b.w	8003c58 <printf>
}

void leds_on(uint8_t led)
{
  if (led == 0)
    GPIOE->BSRRL = 1 << PORTE_LED0;
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <leds_on+0x40>)
 8000de0:	2208      	movs	r2, #8
 8000de2:	831a      	strh	r2, [r3, #24]
 8000de4:	4770      	bx	lr
  else if (led == 1)
    GPIOE->BSRRL = 1 << PORTE_LED1;
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <leds_on+0x40>)
 8000de8:	2210      	movs	r2, #16
 8000dea:	831a      	strh	r2, [r3, #24]
 8000dec:	4770      	bx	lr
  else if (led == 2)
    GPIOB->BSRRL = 1 << PORTB_LED2;
  else if (led == 3)
    GPIOE->BSRRL = 1 << PORTE_LED3;
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <leds_on+0x40>)
 8000df0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000df4:	831a      	strh	r2, [r3, #24]
 8000df6:	4770      	bx	lr
  if (led == 0)
    GPIOE->BSRRL = 1 << PORTE_LED0;
  else if (led == 1)
    GPIOE->BSRRL = 1 << PORTE_LED1;
  else if (led == 2)
    GPIOB->BSRRL = 1 << PORTB_LED2;
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <leds_on+0x44>)
 8000dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dfe:	831a      	strh	r2, [r3, #24]
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	0800a8b8 	.word	0x0800a8b8
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40020400 	.word	0x40020400

08000e10 <leds_off>:
    printf("LED %d does not exist\n", led);
}

void leds_off(uint8_t led)
{
  if (led == 0)
 8000e10:	b148      	cbz	r0, 8000e26 <leds_off+0x16>
    GPIOE->BSRRH = 1 << PORTE_LED0;
  else if (led == 1)
 8000e12:	2801      	cmp	r0, #1
 8000e14:	d00b      	beq.n	8000e2e <leds_off+0x1e>
    GPIOE->BSRRH = 1 << PORTE_LED1;
  else if (led == 2)
 8000e16:	2802      	cmp	r0, #2
 8000e18:	d012      	beq.n	8000e40 <leds_off+0x30>
    GPIOB->BSRRH = 1 << PORTB_LED2;
  else if (led == 3)
 8000e1a:	2803      	cmp	r0, #3
 8000e1c:	d00b      	beq.n	8000e36 <leds_off+0x26>
    GPIOE->BSRRH = 1 << PORTE_LED3;
  else
    printf("LED %d does not exist\n", led);
 8000e1e:	4601      	mov	r1, r0
 8000e20:	480a      	ldr	r0, [pc, #40]	; (8000e4c <leds_off+0x3c>)
 8000e22:	f002 bf19 	b.w	8003c58 <printf>
}

void leds_off(uint8_t led)
{
  if (led == 0)
    GPIOE->BSRRH = 1 << PORTE_LED0;
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <leds_off+0x40>)
 8000e28:	2208      	movs	r2, #8
 8000e2a:	835a      	strh	r2, [r3, #26]
 8000e2c:	4770      	bx	lr
  else if (led == 1)
    GPIOE->BSRRH = 1 << PORTE_LED1;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <leds_off+0x40>)
 8000e30:	2210      	movs	r2, #16
 8000e32:	835a      	strh	r2, [r3, #26]
 8000e34:	4770      	bx	lr
  else if (led == 2)
    GPIOB->BSRRH = 1 << PORTB_LED2;
  else if (led == 3)
    GPIOE->BSRRH = 1 << PORTE_LED3;
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <leds_off+0x40>)
 8000e38:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e3c:	835a      	strh	r2, [r3, #26]
 8000e3e:	4770      	bx	lr
  if (led == 0)
    GPIOE->BSRRH = 1 << PORTE_LED0;
  else if (led == 1)
    GPIOE->BSRRH = 1 << PORTE_LED1;
  else if (led == 2)
    GPIOB->BSRRH = 1 << PORTB_LED2;
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <leds_off+0x44>)
 8000e42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e46:	835a      	strh	r2, [r3, #26]
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	0800a8b8 	.word	0x0800a8b8
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40020400 	.word	0x40020400

08000e58 <leds_toggle>:
    printf("LED %d does not exist\n", led);
}

void leds_toggle(uint8_t led)
{
  if (led == 0)
 8000e58:	b148      	cbz	r0, 8000e6e <leds_toggle+0x16>
    GPIOE->ODR ^= 1 << PORTE_LED0;
  else if (led == 1)
 8000e5a:	2801      	cmp	r0, #1
 8000e5c:	d00d      	beq.n	8000e7a <leds_toggle+0x22>
    GPIOE->ODR ^= 1 << PORTE_LED1;
  else if (led == 2)
 8000e5e:	2802      	cmp	r0, #2
 8000e60:	d017      	beq.n	8000e92 <leds_toggle+0x3a>
    GPIOB->ODR ^= 1 << PORTB_LED2;
  else if (led == 3)
 8000e62:	2803      	cmp	r0, #3
 8000e64:	d00f      	beq.n	8000e86 <leds_toggle+0x2e>
    GPIOE->ODR ^= 1 << PORTE_LED3;
  else
    printf("LED %d does not exist\n", led);
 8000e66:	4601      	mov	r1, r0
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <leds_toggle+0x48>)
 8000e6a:	f002 bef5 	b.w	8003c58 <printf>
}

void leds_toggle(uint8_t led)
{
  if (led == 0)
    GPIOE->ODR ^= 1 << PORTE_LED0;
 8000e6e:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <leds_toggle+0x4c>)
 8000e70:	6953      	ldr	r3, [r2, #20]
 8000e72:	f083 0308 	eor.w	r3, r3, #8
 8000e76:	6153      	str	r3, [r2, #20]
 8000e78:	4770      	bx	lr
  else if (led == 1)
    GPIOE->ODR ^= 1 << PORTE_LED1;
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <leds_toggle+0x4c>)
 8000e7c:	6953      	ldr	r3, [r2, #20]
 8000e7e:	f083 0310 	eor.w	r3, r3, #16
 8000e82:	6153      	str	r3, [r2, #20]
 8000e84:	4770      	bx	lr
  else if (led == 2)
    GPIOB->ODR ^= 1 << PORTB_LED2;
  else if (led == 3)
    GPIOE->ODR ^= 1 << PORTE_LED3;
 8000e86:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <leds_toggle+0x4c>)
 8000e88:	6953      	ldr	r3, [r2, #20]
 8000e8a:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8000e8e:	6153      	str	r3, [r2, #20]
 8000e90:	4770      	bx	lr
  if (led == 0)
    GPIOE->ODR ^= 1 << PORTE_LED0;
  else if (led == 1)
    GPIOE->ODR ^= 1 << PORTE_LED1;
  else if (led == 2)
    GPIOB->ODR ^= 1 << PORTB_LED2;
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <leds_toggle+0x50>)
 8000e94:	6953      	ldr	r3, [r2, #20]
 8000e96:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 8000e9a:	6153      	str	r3, [r2, #20]
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	0800a8b8 	.word	0x0800a8b8
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40020400 	.word	0x40020400

08000eac <consoleInit>:
#define PORTE_RX 0
#define PORTE_TX 1

void consoleInit()
{
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000eac:	4913      	ldr	r1, [pc, #76]	; (8000efc <consoleInit+0x50>)
  RCC->APB1ENR |= RCC_APB1ENR_UART8EN;
  GPIOE->MODER   |= (0x2) << (PORTE_TX * 2);
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <consoleInit+0x54>)
#define PORTE_RX 0
#define PORTE_TX 1

void consoleInit()
{
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000eb0:	6b08      	ldr	r0, [r1, #48]	; 0x30
  RCC->APB1ENR |= RCC_APB1ENR_UART8EN;
  GPIOE->MODER   |= (0x2) << (PORTE_TX * 2);
  GPIOE->AFR[0]  |= (0x8) << (PORTE_TX * 4);
  // RX not used at the moment. TX only used for stdout
  UART8->CR1 &= ~USART_CR1_UE;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <consoleInit+0x58>)
#define PORTE_RX 0
#define PORTE_TX 1

void consoleInit()
{
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000eb4:	f040 0010 	orr.w	r0, r0, #16
 8000eb8:	6308      	str	r0, [r1, #48]	; 0x30
  RCC->APB1ENR |= RCC_APB1ENR_UART8EN;
 8000eba:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8000ebc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	6408      	str	r0, [r1, #64]	; 0x40
  GPIOE->MODER   |= (0x2) << (PORTE_TX * 2);
 8000ec2:	6811      	ldr	r1, [r2, #0]
 8000ec4:	f041 0108 	orr.w	r1, r1, #8
 8000ec8:	6011      	str	r1, [r2, #0]
  GPIOE->AFR[0]  |= (0x8) << (PORTE_TX * 4);
 8000eca:	6a11      	ldr	r1, [r2, #32]
 8000ecc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000ed0:	6211      	str	r1, [r2, #32]
  // RX not used at the moment. TX only used for stdout
  UART8->CR1 &= ~USART_CR1_UE;
 8000ed2:	899a      	ldrh	r2, [r3, #12]
 8000ed4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000ed8:	0412      	lsls	r2, r2, #16
 8000eda:	0c12      	lsrs	r2, r2, #16
 8000edc:	819a      	strh	r2, [r3, #12]
  UART8->CR1 |=  USART_CR1_TE | USART_CR1_RE;
 8000ede:	899a      	ldrh	r2, [r3, #12]
 8000ee0:	b292      	uxth	r2, r2
 8000ee2:	f042 020c 	orr.w	r2, r2, #12
  // we want 1 megabit. do this with mantissa=2 and fraction (sixteenths)=10
  UART8->BRR  = (22 << 4) | 12;//42000000/115200;//(((uint16_t)2) << 4) | 10;  // 10 << 4 | 1010 -> 101000
 8000ee6:	f44f 71b6 	mov.w	r1, #364	; 0x16c
  RCC->APB1ENR |= RCC_APB1ENR_UART8EN;
  GPIOE->MODER   |= (0x2) << (PORTE_TX * 2);
  GPIOE->AFR[0]  |= (0x8) << (PORTE_TX * 4);
  // RX not used at the moment. TX only used for stdout
  UART8->CR1 &= ~USART_CR1_UE;
  UART8->CR1 |=  USART_CR1_TE | USART_CR1_RE;
 8000eea:	819a      	strh	r2, [r3, #12]
  // we want 1 megabit. do this with mantissa=2 and fraction (sixteenths)=10
  UART8->BRR  = (22 << 4) | 12;//42000000/115200;//(((uint16_t)2) << 4) | 10;  // 10 << 4 | 1010 -> 101000
 8000eec:	8119      	strh	r1, [r3, #8]
  UART8->CR1 |=  USART_CR1_UE;
 8000eee:	899a      	ldrh	r2, [r3, #12]
 8000ef0:	b292      	uxth	r2, r2
 8000ef2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ef6:	819a      	strh	r2, [r3, #12]
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40007c00 	.word	0x40007c00

08000f08 <consolePrint>:
}
// (22 << 4) | 12;  10110 1100 

int consolePrint(const uint8_t *buffer, uint32_t len)
{
 8000f08:	b5f0      	push	{r4, r5, r6, r7, lr}
  int startTime = SYSTIME;
 8000f0a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  
  // make sure transmission buffer is clear
  while (!(UART8->SR & USART_SR_TXE) && (SYSTIME - startTime < UART_TIMEOUT));
 8000f0e:	4d18      	ldr	r5, [pc, #96]	; (8000f70 <consolePrint+0x68>)
}
// (22 << 4) | 12;  10110 1100 

int consolePrint(const uint8_t *buffer, uint32_t len)
{
  int startTime = SYSTIME;
 8000f10:	6a62      	ldr	r2, [r4, #36]	; 0x24
  
  // make sure transmission buffer is clear
  while (!(UART8->SR & USART_SR_TXE) && (SYSTIME - startTime < UART_TIMEOUT));
 8000f12:	f242 760f 	movw	r6, #9999	; 0x270f
 8000f16:	e003      	b.n	8000f20 <consolePrint+0x18>
 8000f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f1a:	1a9b      	subs	r3, r3, r2
 8000f1c:	42b3      	cmp	r3, r6
 8000f1e:	d802      	bhi.n	8000f26 <consolePrint+0x1e>
 8000f20:	882b      	ldrh	r3, [r5, #0]
 8000f22:	061f      	lsls	r7, r3, #24
 8000f24:	d5f8      	bpl.n	8000f18 <consolePrint+0x10>
  if (SYSTIME - startTime > UART_TIMEOUT)
 8000f26:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8000f2a:	f242 7710 	movw	r7, #10000	; 0x2710
 8000f2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f30:	1a9b      	subs	r3, r3, r2
 8000f32:	42bb      	cmp	r3, r7
 8000f34:	d818      	bhi.n	8000f68 <consolePrint+0x60>
    return -1;

  // start transmission
  for (uint32_t i = 0; i < len; i++)
 8000f36:	b1a9      	cbz	r1, 8000f64 <consolePrint+0x5c>
  {
    while (!(UART8->SR & USART_SR_TXE) && (SYSTIME - startTime < UART_TIMEOUT)); // wait for tx buffer to clear
 8000f38:	4c0d      	ldr	r4, [pc, #52]	; (8000f70 <consolePrint+0x68>)
 8000f3a:	eb00 0e01 	add.w	lr, r0, r1
 8000f3e:	f242 760f 	movw	r6, #9999	; 0x270f
 8000f42:	e003      	b.n	8000f4c <consolePrint+0x44>
 8000f44:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f46:	1a9b      	subs	r3, r3, r2
 8000f48:	42b3      	cmp	r3, r6
 8000f4a:	d802      	bhi.n	8000f52 <consolePrint+0x4a>
 8000f4c:	8823      	ldrh	r3, [r4, #0]
 8000f4e:	061b      	lsls	r3, r3, #24
 8000f50:	d5f8      	bpl.n	8000f44 <consolePrint+0x3c>
    UART8->DR = buffer[i];
 8000f52:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000f56:	80a3      	strh	r3, [r4, #4]
    if (SYSTIME - startTime > UART_TIMEOUT)
 8000f58:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f5a:	1a9b      	subs	r3, r3, r2
 8000f5c:	42bb      	cmp	r3, r7
 8000f5e:	d803      	bhi.n	8000f68 <consolePrint+0x60>
  while (!(UART8->SR & USART_SR_TXE) && (SYSTIME - startTime < UART_TIMEOUT));
  if (SYSTIME - startTime > UART_TIMEOUT)
    return -1;

  // start transmission
  for (uint32_t i = 0; i < len; i++)
 8000f60:	4570      	cmp	r0, lr
 8000f62:	d1f3      	bne.n	8000f4c <consolePrint+0x44>
      return -1;
  }
  // while (!(UART8->SR & USART_SR_TC)); // wait for TX to finish

  // return number of bytes transmitted
  return len;
 8000f64:	4608      	mov	r0, r1
 8000f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  int startTime = SYSTIME;
  
  // make sure transmission buffer is clear
  while (!(UART8->SR & USART_SR_TXE) && (SYSTIME - startTime < UART_TIMEOUT));
  if (SYSTIME - startTime > UART_TIMEOUT)
    return -1;
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40007c00 	.word	0x40007c00

08000f74 <_sbrk>:

caddr_t _sbrk(int incr)
{
  static unsigned char *heap = NULL ;
  unsigned char *prev_heap ;
  if ( heap == NULL )
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <_sbrk+0x14>)
 8000f76:	4905      	ldr	r1, [pc, #20]	; (8000f8c <_sbrk+0x18>)
 8000f78:	6813      	ldr	r3, [r2, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	bf08      	it	eq
 8000f7e:	460b      	moveq	r3, r1
    heap = (unsigned char *)&_end ;
  prev_heap = heap;
  heap += incr ;
 8000f80:	4418      	add	r0, r3
 8000f82:	6010      	str	r0, [r2, #0]
  return (caddr_t) prev_heap ;
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	4770      	bx	lr
 8000f88:	2000095c 	.word	0x2000095c
 8000f8c:	20014650 	.word	0x20014650

08000f90 <_kill>:

int _kill(__attribute__((unused)) int pid, 
          __attribute__((unused)) int sig) { return -1; }
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <_exit>:
void _exit(__attribute__((unused)) int status) { while (1) {} } // spin...
 8000f98:	e7fe      	b.n	8000f98 <_exit>
 8000f9a:	bf00      	nop

08000f9c <_getpid>:
int _getpid() { return 1; }
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	4770      	bx	lr

08000fa0 <_write>:

int _write(__attribute__((unused)) int fd, const void *buf, size_t count)
{
 8000fa0:	b510      	push	{r4, lr}
  consolePrint((uint8_t *)buf, count);
 8000fa2:	4608      	mov	r0, r1
          __attribute__((unused)) int sig) { return -1; }
void _exit(__attribute__((unused)) int status) { while (1) {} } // spin...
int _getpid() { return 1; }

int _write(__attribute__((unused)) int fd, const void *buf, size_t count)
{
 8000fa4:	4614      	mov	r4, r2
  consolePrint((uint8_t *)buf, count);
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	f7ff ffae 	bl	8000f08 <consolePrint>
  return count;
}
 8000fac:	4620      	mov	r0, r4
 8000fae:	bd10      	pop	{r4, pc}

08000fb0 <_close>:
int _close(__attribute__((unused)) int fd) { return -1; }
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <_fstat>:
int _fstat(__attribute__((unused)) int fd, 
           __attribute__((unused)) struct stat *st)
{
  st->st_mode = S_IFCHR;
 8000fb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fbc:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <_isatty>:
int _isatty(__attribute__((unused)) int fd) { return 1; }
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	4770      	bx	lr

08000fc8 <_lseek>:
off_t _lseek(__attribute__((unused)) int fd, 
             __attribute__((unused)) off_t offset, 
             __attribute__((unused)) int whence) { return 0; }
 8000fc8:	2000      	movs	r0, #0
 8000fca:	4770      	bx	lr

08000fcc <_read>:
ssize_t _read(__attribute__((unused)) int fd, 
              __attribute__((unused)) void *buf, 
              __attribute__((unused)) size_t count) { return 0; }
 8000fcc:	2000      	movs	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <fputc>:
FILE __stdout;
FILE __stderr;
int fputc(__attribute__((unused)) int ch, __attribute__((unused)) FILE *f)
{
  return 0;
}
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	4770      	bx	lr

08000fd4 <_ttywrch>:
void _ttywrch(__attribute__((unused)) int ch) { }
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <enet_read_phy_reg>:
static volatile uint16_t g_eth_rxpool_ptrs_wpos = 0;
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8000fd8:	4909      	ldr	r1, [pc, #36]	; (8001000 <enet_read_phy_reg+0x28>)
 8000fda:	690a      	ldr	r2, [r1, #16]
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <enet_read_phy_reg+0x28>)
 8000fde:	07d2      	lsls	r2, r2, #31
 8000fe0:	d4fb      	bmi.n	8000fda <enet_read_phy_reg+0x2>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
                  ((reg_idx & 0x1f) << 6) |
 8000fe2:	f000 021f 	and.w	r2, r0, #31
 8000fe6:	0192      	lsls	r2, r2, #6
                  ETH_MACMIIAR_CR_Div102  | // clock divider
 8000fe8:	f442 6201 	orr.w	r2, r2, #2064	; 0x810
 8000fec:	f042 0201 	orr.w	r2, r2, #1
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 8000ff0:	611a      	str	r2, [r3, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8000ff2:	691a      	ldr	r2, [r3, #16]
 8000ff4:	4902      	ldr	r1, [pc, #8]	; (8001000 <enet_read_phy_reg+0x28>)
 8000ff6:	07d2      	lsls	r2, r2, #31
 8000ff8:	d4fb      	bmi.n	8000ff2 <enet_read_phy_reg+0x1a>
  return ETH->MACMIIDR & 0xffff;
 8000ffa:	6948      	ldr	r0, [r1, #20]
}
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	4770      	bx	lr
 8001000:	40028000 	.word	0x40028000

08001004 <enet_write_phy_reg>:

void enet_write_phy_reg(const uint8_t reg_idx, const uint16_t reg_val)
{
 8001004:	b430      	push	{r4, r5}
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8001006:	4d15      	ldr	r5, [pc, #84]	; (800105c <enet_write_phy_reg+0x58>)
 8001008:	692b      	ldr	r3, [r5, #16]
 800100a:	4c14      	ldr	r4, [pc, #80]	; (800105c <enet_write_phy_reg+0x58>)
 800100c:	07da      	lsls	r2, r3, #31
 800100e:	d4fb      	bmi.n	8001008 <enet_write_phy_reg+0x4>
  ETH->MACMIIDR = reg_val; // set the outgoing data word
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11)   |
                  ((reg_idx & 0x1f) << 6) |
 8001010:	f000 021f 	and.w	r2, r0, #31
 8001014:	0192      	lsls	r2, r2, #6
                  ETH_MACMIIAR_CR_Div102  | // MDC clock divider
                  ETH_MACMIIAR_MW         | // set the write bit
 8001016:	f442 6301 	orr.w	r3, r2, #2064	; 0x810
 800101a:	f043 0303 	orr.w	r3, r3, #3
}

void enet_write_phy_reg(const uint8_t reg_idx, const uint16_t reg_val)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIDR = reg_val; // set the outgoing data word
 800101e:	6161      	str	r1, [r4, #20]
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11)   |
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // MDC clock divider
                  ETH_MACMIIAR_MW         | // set the write bit
                  ETH_MACMIIAR_MB; // start it up
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8001020:	4625      	mov	r5, r4

void enet_write_phy_reg(const uint8_t reg_idx, const uint16_t reg_val)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIDR = reg_val; // set the outgoing data word
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11)   |
 8001022:	6123      	str	r3, [r4, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // MDC clock divider
                  ETH_MACMIIAR_MW         | // set the write bit
                  ETH_MACMIIAR_MB; // start it up
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8001024:	692b      	ldr	r3, [r5, #16]
 8001026:	07db      	lsls	r3, r3, #31
 8001028:	d4fc      	bmi.n	8001024 <enet_write_phy_reg+0x20>
static volatile uint16_t g_eth_rxpool_ptrs_wpos = 0;
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 800102a:	4d0c      	ldr	r5, [pc, #48]	; (800105c <enet_write_phy_reg+0x58>)
 800102c:	692c      	ldr	r4, [r5, #16]
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <enet_write_phy_reg+0x58>)
 8001030:	07e4      	lsls	r4, r4, #31
 8001032:	d4fb      	bmi.n	800102c <enet_write_phy_reg+0x28>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
 8001034:	f442 6401 	orr.w	r4, r2, #2064	; 0x810
 8001038:	f044 0401 	orr.w	r4, r4, #1
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 800103c:	611c      	str	r4, [r3, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 800103e:	691c      	ldr	r4, [r3, #16]
 8001040:	4d06      	ldr	r5, [pc, #24]	; (800105c <enet_write_phy_reg+0x58>)
 8001042:	07e2      	lsls	r2, r4, #31
 8001044:	d4fb      	bmi.n	800103e <enet_write_phy_reg+0x3a>
  return ETH->MACMIIDR & 0xffff;
 8001046:	696b      	ldr	r3, [r5, #20]
                  ETH_MACMIIAR_CR_Div102  | // MDC clock divider
                  ETH_MACMIIAR_MW         | // set the write bit
                  ETH_MACMIIAR_MB; // start it up
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
  uint16_t readback_val = enet_read_phy_reg(reg_idx);
  if (readback_val != reg_val)
 8001048:	b29b      	uxth	r3, r3
 800104a:	4299      	cmp	r1, r3
 800104c:	d004      	beq.n	8001058 <enet_write_phy_reg+0x54>
  {
    printf("woah there. tried to write 0x%04x to reg %02d but it read back %04x\r\n",
 800104e:	4602      	mov	r2, r0
           reg_val, reg_idx, readback_val);
  }
}
 8001050:	bc30      	pop	{r4, r5}
                  ETH_MACMIIAR_MB; // start it up
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
  uint16_t readback_val = enet_read_phy_reg(reg_idx);
  if (readback_val != reg_val)
  {
    printf("woah there. tried to write 0x%04x to reg %02d but it read back %04x\r\n",
 8001052:	4803      	ldr	r0, [pc, #12]	; (8001060 <enet_write_phy_reg+0x5c>)
 8001054:	f002 be00 	b.w	8003c58 <printf>
           reg_val, reg_idx, readback_val);
  }
}
 8001058:	bc30      	pop	{r4, r5}
 800105a:	4770      	bx	lr
 800105c:	40028000 	.word	0x40028000
 8001060:	0800a8d0 	.word	0x0800a8d0

08001064 <enet_init>:

void enet_init()
{
 8001064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  printf("enet_init()\r\n");
 8001068:	48a2      	ldr	r0, [pc, #648]	; (80012f4 <enet_init+0x290>)
  // set up the pins on port a
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN     |  // and all the i/o ports we
                  RCC_AHB1ENR_GPIOBEN     |  // will be using to talk to
                  RCC_AHB1ENR_GPIOCEN;       // the ethernet PHY

  GPIOA->MODER |= (2 << (PORTA_ETH_REFCLK * 2)) |
 800106a:	4ca3      	ldr	r4, [pc, #652]	; (80012f8 <enet_init+0x294>)
           reg_val, reg_idx, readback_val);
  }
}

void enet_init()
{
 800106c:	b08e      	sub	sp, #56	; 0x38
  printf("enet_init()\r\n");
 800106e:	f002 fe47 	bl	8003d00 <puts>
  // set up the pins on port a
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN     |  // and all the i/o ports we
 8001072:	4aa2      	ldr	r2, [pc, #648]	; (80012fc <enet_init+0x298>)
  GPIOA->AFR[0] |= (11 << (PORTA_ETH_REFCLK * 4)) |
                   (11 << (PORTA_ETH_MDIO   * 4)) |
                   (11 << (PORTA_ETH_CRSDV  * 4));

  // set up the ethernet pins on port b
  GPIOB->MODER |= (2 << (PORTB_ETH_TXEN * 2)) |
 8001074:	4ba2      	ldr	r3, [pc, #648]	; (8001300 <enet_init+0x29c>)

void enet_init()
{
  printf("enet_init()\r\n");
  // set up the pins on port a
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN     |  // and all the i/o ports we
 8001076:	6b11      	ldr	r1, [r2, #48]	; 0x30
                    (3 << (PORTB_ETH_TXD0 * 2)) |
                    (3 << (PORTB_ETH_TXD1 * 2)); // make the tx pins go fast
  GPIOB->MODER |= (1 << (PORTB_PHY_RESET * 2)); // reset = gpio output pin

  // set up the ethernet pins on port c
  GPIOC->MODER  |= ( 2 << (PORTC_ETH_MDC  * 2)) |
 8001078:	48a2      	ldr	r0, [pc, #648]	; (8001304 <enet_init+0x2a0>)

void enet_init()
{
  printf("enet_init()\r\n");
  // set up the pins on port a
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN     |  // and all the i/o ports we
 800107a:	f041 0107 	orr.w	r1, r1, #7
 800107e:	6311      	str	r1, [r2, #48]	; 0x30
                  RCC_AHB1ENR_GPIOBEN     |  // will be using to talk to
                  RCC_AHB1ENR_GPIOCEN;       // the ethernet PHY

  GPIOA->MODER |= (2 << (PORTA_ETH_REFCLK * 2)) |
 8001080:	6821      	ldr	r1, [r4, #0]
 8001082:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001086:	f041 0128 	orr.w	r1, r1, #40	; 0x28
 800108a:	6021      	str	r1, [r4, #0]
                  (2 << (PORTA_ETH_MDIO   * 2)) |
                  (2 << (PORTA_ETH_CRSDV  * 2)); // set these guys as AF pins
  GPIOA->AFR[0] |= (11 << (PORTA_ETH_REFCLK * 4)) |
 800108c:	6a21      	ldr	r1, [r4, #32]
 800108e:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 8001092:	f441 613b 	orr.w	r1, r1, #2992	; 0xbb0
 8001096:	6221      	str	r1, [r4, #32]
                   (11 << (PORTA_ETH_MDIO   * 4)) |
                   (11 << (PORTA_ETH_CRSDV  * 4));

  // set up the ethernet pins on port b
  GPIOB->MODER |= (2 << (PORTB_ETH_TXEN * 2)) |
 8001098:	6819      	ldr	r1, [r3, #0]
 800109a:	f041 6128 	orr.w	r1, r1, #176160768	; 0xa800000
 800109e:	6019      	str	r1, [r3, #0]
                  (2 << (PORTB_ETH_TXD0 * 2)) |
                  (2 << (PORTB_ETH_TXD1 * 2));
  GPIOB->AFR[1] |= (11 << ((PORTB_ETH_TXEN - 8) * 4)) |
 80010a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80010a2:	f441 013b 	orr.w	r1, r1, #12255232	; 0xbb0000
 80010a6:	f441 4130 	orr.w	r1, r1, #45056	; 0xb000
 80010aa:	6259      	str	r1, [r3, #36]	; 0x24
                   (11 << ((PORTB_ETH_TXD0 - 8) * 4)) |
                   (11 << ((PORTB_ETH_TXD1 - 8) * 4));
  GPIOB->OSPEEDR |= (3 << (PORTB_ETH_TXEN * 2)) |
 80010ac:	6899      	ldr	r1, [r3, #8]
 80010ae:	f041 617c 	orr.w	r1, r1, #264241152	; 0xfc00000
 80010b2:	6099      	str	r1, [r3, #8]
                    (3 << (PORTB_ETH_TXD0 * 2)) |
                    (3 << (PORTB_ETH_TXD1 * 2)); // make the tx pins go fast
  GPIOB->MODER |= (1 << (PORTB_PHY_RESET * 2)); // reset = gpio output pin
 80010b4:	6819      	ldr	r1, [r3, #0]
 80010b6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80010ba:	6019      	str	r1, [r3, #0]

  // set up the ethernet pins on port c
  GPIOC->MODER  |= ( 2 << (PORTC_ETH_MDC  * 2)) |
 80010bc:	6803      	ldr	r3, [r0, #0]
 80010be:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	6003      	str	r3, [r0, #0]
                   ( 2 << (PORTC_ETH_RXD0 * 2)) |
                   ( 2 << (PORTC_ETH_RXD1 * 2));
  GPIOC->AFR[0] |= (11 << (PORTC_ETH_MDC  * 4)) |
 80010c8:	6a03      	ldr	r3, [r0, #32]
 80010ca:	f443 033b 	orr.w	r3, r3, #12255232	; 0xbb0000
 80010ce:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80010d2:	6203      	str	r3, [r0, #32]
                   (11 << (PORTC_ETH_RXD0 * 4)) |
                   (11 << (PORTC_ETH_RXD1 * 4));

  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable the sysconfig block
 80010d4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80010d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010da:	6453      	str	r3, [r2, #68]	; 0x44
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 80010dc:	6913      	ldr	r3, [r2, #16]
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
 80010de:	2100      	movs	r1, #0
  GPIOC->AFR[0] |= (11 << (PORTC_ETH_MDC  * 4)) |
                   (11 << (PORTC_ETH_RXD0 * 4)) |
                   (11 << (PORTC_ETH_RXD1 * 4));

  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable the sysconfig block
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 80010e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010e4:	6113      	str	r3, [r2, #16]
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
 80010e6:	9101      	str	r1, [sp, #4]
 80010e8:	9b01      	ldr	r3, [sp, #4]
 80010ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010ee:	da06      	bge.n	80010fe <enet_init+0x9a>
 80010f0:	9b01      	ldr	r3, [sp, #4]
 80010f2:	3301      	adds	r3, #1
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	9b01      	ldr	r3, [sp, #4]
 80010f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010fc:	dbf8      	blt.n	80010f0 <enet_init+0x8c>
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
 80010fe:	2300      	movs	r3, #0
 8001100:	9302      	str	r3, [sp, #8]
 8001102:	9b02      	ldr	r3, [sp, #8]
 8001104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001108:	da06      	bge.n	8001118 <enet_init+0xb4>
 800110a:	9b02      	ldr	r3, [sp, #8]
 800110c:	3301      	adds	r3, #1
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	9b02      	ldr	r3, [sp, #8]
 8001112:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001116:	dbf8      	blt.n	800110a <enet_init+0xa6>
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode
 8001118:	497b      	ldr	r1, [pc, #492]	; (8001308 <enet_init+0x2a4>)
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
 800111a:	4a7c      	ldr	r2, [pc, #496]	; (800130c <enet_init+0x2a8>)
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable the sysconfig block
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode
 800111c:	684b      	ldr	r3, [r1, #4]
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
 800111e:	2000      	movs	r0, #0
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable the sysconfig block
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode
 8001120:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001124:	604b      	str	r3, [r1, #4]
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
 8001126:	9003      	str	r0, [sp, #12]
 8001128:	9b03      	ldr	r3, [sp, #12]
 800112a:	4293      	cmp	r3, r2
 800112c:	dc05      	bgt.n	800113a <enet_init+0xd6>
 800112e:	9b03      	ldr	r3, [sp, #12]
 8001130:	3301      	adds	r3, #1
 8001132:	9303      	str	r3, [sp, #12]
 8001134:	9b03      	ldr	r3, [sp, #12]
 8001136:	4293      	cmp	r3, r2
 8001138:	ddf9      	ble.n	800112e <enet_init+0xca>
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
 800113a:	4970      	ldr	r1, [pc, #448]	; (80012fc <enet_init+0x298>)
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
 800113c:	4a73      	ldr	r2, [pc, #460]	; (800130c <enet_init+0x2a8>)
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
 800113e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8001140:	2000      	movs	r0, #0
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
 8001142:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 8001146:	630b      	str	r3, [r1, #48]	; 0x30
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8001148:	9004      	str	r0, [sp, #16]
 800114a:	9b04      	ldr	r3, [sp, #16]
 800114c:	4293      	cmp	r3, r2
 800114e:	dc05      	bgt.n	800115c <enet_init+0xf8>
 8001150:	9b04      	ldr	r3, [sp, #16]
 8001152:	3301      	adds	r3, #1
 8001154:	9304      	str	r3, [sp, #16]
 8001156:	9b04      	ldr	r3, [sp, #16]
 8001158:	4293      	cmp	r3, r2
 800115a:	ddf9      	ble.n	8001150 <enet_init+0xec>
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 800115c:	4967      	ldr	r1, [pc, #412]	; (80012fc <enet_init+0x298>)
  for (volatile int i = 0; i < 100000; i++) { } // wait
 800115e:	4a6b      	ldr	r2, [pc, #428]	; (800130c <enet_init+0x2a8>)
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 8001160:	690b      	ldr	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8001162:	2000      	movs	r0, #0
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 8001164:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001168:	610b      	str	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait
 800116a:	9005      	str	r0, [sp, #20]
 800116c:	9b05      	ldr	r3, [sp, #20]
 800116e:	4293      	cmp	r3, r2
 8001170:	dc05      	bgt.n	800117e <enet_init+0x11a>
 8001172:	9b05      	ldr	r3, [sp, #20]
 8001174:	3301      	adds	r3, #1
 8001176:	9305      	str	r3, [sp, #20]
 8001178:	9b05      	ldr	r3, [sp, #20]
 800117a:	4293      	cmp	r3, r2
 800117c:	ddf9      	ble.n	8001172 <enet_init+0x10e>
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 800117e:	495f      	ldr	r1, [pc, #380]	; (80012fc <enet_init+0x298>)
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8001180:	4a62      	ldr	r2, [pc, #392]	; (800130c <enet_init+0x2a8>)
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 8001182:	690b      	ldr	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8001184:	2000      	movs	r0, #0
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 8001186:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800118a:	610b      	str	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait
 800118c:	9006      	str	r0, [sp, #24]
 800118e:	9b06      	ldr	r3, [sp, #24]
 8001190:	4293      	cmp	r3, r2
 8001192:	dc05      	bgt.n	80011a0 <enet_init+0x13c>
 8001194:	9b06      	ldr	r3, [sp, #24]
 8001196:	3301      	adds	r3, #1
 8001198:	9306      	str	r3, [sp, #24]
 800119a:	9b06      	ldr	r3, [sp, #24]
 800119c:	4293      	cmp	r3, r2
 800119e:	ddf9      	ble.n	8001194 <enet_init+0x130>
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 80011a0:	4956      	ldr	r1, [pc, #344]	; (80012fc <enet_init+0x298>)
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)
 80011a2:	4a5a      	ldr	r2, [pc, #360]	; (800130c <enet_init+0x2a8>)
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 80011a4:	690b      	ldr	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)
 80011a6:	2000      	movs	r0, #0
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 80011a8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80011ac:	610b      	str	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)
 80011ae:	9007      	str	r0, [sp, #28]
 80011b0:	9b07      	ldr	r3, [sp, #28]
 80011b2:	4293      	cmp	r3, r2
 80011b4:	dc05      	bgt.n	80011c2 <enet_init+0x15e>
 80011b6:	9b07      	ldr	r3, [sp, #28]
 80011b8:	3301      	adds	r3, #1
 80011ba:	9307      	str	r3, [sp, #28]
 80011bc:	9b07      	ldr	r3, [sp, #28]
 80011be:	4293      	cmp	r3, r2
 80011c0:	ddf9      	ble.n	80011b6 <enet_init+0x152>

  ETH->DMABMR |= ETH_DMABMR_SR;
 80011c2:	4953      	ldr	r1, [pc, #332]	; (8001310 <enet_init+0x2ac>)
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 80011c4:	4a51      	ldr	r2, [pc, #324]	; (800130c <enet_init+0x2a8>)
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)

  ETH->DMABMR |= ETH_DMABMR_SR;
 80011c6:	680b      	ldr	r3, [r1, #0]
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 80011c8:	2000      	movs	r0, #0
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)

  ETH->DMABMR |= ETH_DMABMR_SR;
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	600b      	str	r3, [r1, #0]
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 80011d0:	9008      	str	r0, [sp, #32]
 80011d2:	9b08      	ldr	r3, [sp, #32]
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d805      	bhi.n	80011e4 <enet_init+0x180>
 80011d8:	9b08      	ldr	r3, [sp, #32]
 80011da:	3301      	adds	r3, #1
 80011dc:	9308      	str	r3, [sp, #32]
 80011de:	9b08      	ldr	r3, [sp, #32]
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d9f9      	bls.n	80011d8 <enet_init+0x174>
  while (ETH->DMABMR & ETH_DMABMR_SR) { } // wait for it to reset
 80011e4:	4a4a      	ldr	r2, [pc, #296]	; (8001310 <enet_init+0x2ac>)
 80011e6:	6813      	ldr	r3, [r2, #0]
 80011e8:	f013 0301 	ands.w	r3, r3, #1
 80011ec:	d1fb      	bne.n	80011e6 <enet_init+0x182>
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 80011ee:	9309      	str	r3, [sp, #36]	; 0x24
 80011f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011f2:	4a46      	ldr	r2, [pc, #280]	; (800130c <enet_init+0x2a8>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d805      	bhi.n	8001204 <enet_init+0x1a0>
 80011f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011fa:	3301      	adds	r3, #1
 80011fc:	9309      	str	r3, [sp, #36]	; 0x24
 80011fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001200:	4293      	cmp	r3, r2
 8001202:	d9f9      	bls.n	80011f8 <enet_init+0x194>
  ETH->DMAOMR |= ETH_DMAOMR_FTF; // flush DMA
 8001204:	4843      	ldr	r0, [pc, #268]	; (8001314 <enet_init+0x2b0>)
  while (ETH->DMAOMR & ETH_DMAOMR_FTF) { } // wait for it to flush
 8001206:	4944      	ldr	r1, [pc, #272]	; (8001318 <enet_init+0x2b4>)

  ETH->DMABMR |= ETH_DMABMR_SR;
  for (volatile uint32_t i = 0; i < 100000; i++) { }
  while (ETH->DMABMR & ETH_DMABMR_SR) { } // wait for it to reset
  for (volatile uint32_t i = 0; i < 100000; i++) { }
  ETH->DMAOMR |= ETH_DMAOMR_FTF; // flush DMA
 8001208:	f241 0218 	movw	r2, #4120	; 0x1018
 800120c:	5883      	ldr	r3, [r0, r2]
 800120e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001212:	5083      	str	r3, [r0, r2]
  while (ETH->DMAOMR & ETH_DMAOMR_FTF) { } // wait for it to flush
 8001214:	680b      	ldr	r3, [r1, #0]
 8001216:	4a3f      	ldr	r2, [pc, #252]	; (8001314 <enet_init+0x2b0>)
 8001218:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
 800121c:	d1fa      	bne.n	8001214 <enet_init+0x1b0>

  // now, configure the ethernet peripheral
  ETH->MACCR |= 0x02000000 | // CSTF = strip FCS. why isn't there a symbol ?
 800121e:	6810      	ldr	r0, [r2, #0]
                ETH_MACCR_DM   | // full duplex
                ETH_MACCR_IPCO | // ipv4 checksum auto-generation for RX
                ETH_MACCR_APCS;  // automatically remove pad+CRC from frames
  ETH->MACFFR |= ETH_MACFFR_RA; // for now, don't try to filter in hardware
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
 8001220:	4c37      	ldr	r4, [pc, #220]	; (8001300 <enet_init+0x29c>)
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 8001222:	493a      	ldr	r1, [pc, #232]	; (800130c <enet_init+0x2a8>)
  for (volatile uint32_t i = 0; i < 100000; i++) { }
  ETH->DMAOMR |= ETH_DMAOMR_FTF; // flush DMA
  while (ETH->DMAOMR & ETH_DMAOMR_FTF) { } // wait for it to flush

  // now, configure the ethernet peripheral
  ETH->MACCR |= 0x02000000 | // CSTF = strip FCS. why isn't there a symbol ?
 8001224:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8001228:	f440 4099 	orr.w	r0, r0, #19584	; 0x4c80
 800122c:	6010      	str	r0, [r2, #0]
                ETH_MACCR_FES  | // enable 100 mbit mode
                ETH_MACCR_DM   | // full duplex
                ETH_MACCR_IPCO | // ipv4 checksum auto-generation for RX
                ETH_MACCR_APCS;  // automatically remove pad+CRC from frames
  ETH->MACFFR |= ETH_MACFFR_RA; // for now, don't try to filter in hardware
 800122e:	6850      	ldr	r0, [r2, #4]
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
 8001230:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  ETH->MACCR |= 0x02000000 | // CSTF = strip FCS. why isn't there a symbol ?
                ETH_MACCR_FES  | // enable 100 mbit mode
                ETH_MACCR_DM   | // full duplex
                ETH_MACCR_IPCO | // ipv4 checksum auto-generation for RX
                ETH_MACCR_APCS;  // automatically remove pad+CRC from frames
  ETH->MACFFR |= ETH_MACFFR_RA; // for now, don't try to filter in hardware
 8001234:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001238:	6050      	str	r0, [r2, #4]
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
 800123a:	8325      	strh	r5, [r4, #24]
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 800123c:	930a      	str	r3, [sp, #40]	; 0x28
 800123e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001240:	428b      	cmp	r3, r1
 8001242:	bf98      	it	ls
 8001244:	460a      	movls	r2, r1
 8001246:	d805      	bhi.n	8001254 <enet_init+0x1f0>
 8001248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800124a:	3301      	adds	r3, #1
 800124c:	930a      	str	r3, [sp, #40]	; 0x28
 800124e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001250:	4293      	cmp	r3, r2
 8001252:	d9f9      	bls.n	8001248 <enet_init+0x1e4>
  GPIOB->BSRRH = 1 << PORTB_PHY_RESET; // assert reset (pull it low)
 8001254:	492a      	ldr	r1, [pc, #168]	; (8001300 <enet_init+0x29c>)
  for (volatile uint32_t i = 0; i < 100000; i++) { } // let some time pass
 8001256:	4a2d      	ldr	r2, [pc, #180]	; (800130c <enet_init+0x2a8>)
 8001258:	2300      	movs	r3, #0
                ETH_MACCR_APCS;  // automatically remove pad+CRC from frames
  ETH->MACFFR |= ETH_MACFFR_RA; // for now, don't try to filter in hardware
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
  for (volatile uint32_t i = 0; i < 100000; i++) { }
  GPIOB->BSRRH = 1 << PORTB_PHY_RESET; // assert reset (pull it low)
 800125a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800125e:	8348      	strh	r0, [r1, #26]
  for (volatile uint32_t i = 0; i < 100000; i++) { } // let some time pass
 8001260:	930b      	str	r3, [sp, #44]	; 0x2c
 8001262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001264:	4293      	cmp	r3, r2
 8001266:	d805      	bhi.n	8001274 <enet_init+0x210>
 8001268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800126a:	3301      	adds	r3, #1
 800126c:	930b      	str	r3, [sp, #44]	; 0x2c
 800126e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001270:	4293      	cmp	r3, r2
 8001272:	d9f9      	bls.n	8001268 <enet_init+0x204>
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET; // de-assert reset (pull it high)
 8001274:	4922      	ldr	r1, [pc, #136]	; (8001300 <enet_init+0x29c>)
  // todo: only need to wait until registers read back something other
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
 8001276:	4a29      	ldr	r2, [pc, #164]	; (800131c <enet_init+0x2b8>)
 8001278:	2300      	movs	r3, #0
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
  for (volatile uint32_t i = 0; i < 100000; i++) { }
  GPIOB->BSRRH = 1 << PORTB_PHY_RESET; // assert reset (pull it low)
  for (volatile uint32_t i = 0; i < 100000; i++) { } // let some time pass
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET; // de-assert reset (pull it high)
 800127a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800127e:	8308      	strh	r0, [r1, #24]
  // todo: only need to wait until registers read back something other
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
 8001280:	930c      	str	r3, [sp, #48]	; 0x30
 8001282:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001284:	4293      	cmp	r3, r2
 8001286:	d805      	bhi.n	8001294 <enet_init+0x230>
 8001288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800128a:	3301      	adds	r3, #1
 800128c:	930c      	str	r3, [sp, #48]	; 0x30
 800128e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001290:	4293      	cmp	r3, r2
 8001292:	d9f9      	bls.n	8001288 <enet_init+0x224>
  printf("waiting for PHY to wake up...\r\n");
 8001294:	4822      	ldr	r0, [pc, #136]	; (8001320 <enet_init+0x2bc>)
 8001296:	f002 fd33 	bl	8003d00 <puts>
static volatile uint16_t g_eth_rxpool_ptrs_wpos = 0;
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 800129a:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <enet_init+0x2b0>)
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 800129c:	f640 0511 	movw	r5, #2065	; 0x811
static volatile uint16_t g_eth_rxpool_ptrs_wpos = 0;
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 80012a0:	4610      	mov	r0, r2
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET; // de-assert reset (pull it high)
  // todo: only need to wait until registers read back something other
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
  printf("waiting for PHY to wake up...\r\n");
  while (enet_read_phy_reg(0) == 0xffff) { }
 80012a2:	f64f 74ff 	movw	r4, #65535	; 0xffff
static volatile uint16_t g_eth_rxpool_ptrs_wpos = 0;
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 80012a6:	6913      	ldr	r3, [r2, #16]
 80012a8:	07d9      	lsls	r1, r3, #31
 80012aa:	d4fc      	bmi.n	80012a6 <enet_init+0x242>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 80012ac:	6105      	str	r5, [r0, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 80012ae:	6913      	ldr	r3, [r2, #16]
 80012b0:	f013 0301 	ands.w	r3, r3, #1
 80012b4:	d1fb      	bne.n	80012ae <enet_init+0x24a>
  return ETH->MACMIIDR & 0xffff;
 80012b6:	6941      	ldr	r1, [r0, #20]
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET; // de-assert reset (pull it high)
  // todo: only need to wait until registers read back something other
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
  printf("waiting for PHY to wake up...\r\n");
  while (enet_read_phy_reg(0) == 0xffff) { }
 80012b8:	b289      	uxth	r1, r1
 80012ba:	42a1      	cmp	r1, r4
 80012bc:	d0f3      	beq.n	80012a6 <enet_init+0x242>
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
 80012be:	930d      	str	r3, [sp, #52]	; 0x34
 80012c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80012c2:	4a16      	ldr	r2, [pc, #88]	; (800131c <enet_init+0x2b8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d805      	bhi.n	80012d4 <enet_init+0x270>
 80012c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80012ca:	3301      	adds	r3, #1
 80012cc:	930d      	str	r3, [sp, #52]	; 0x34
 80012ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d9f9      	bls.n	80012c8 <enet_init+0x264>
  printf("done with PHY reset.\r\n");
 80012d4:	4813      	ldr	r0, [pc, #76]	; (8001324 <enet_init+0x2c0>)
static volatile uint16_t g_eth_rxpool_ptrs_wpos = 0;
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 80012d6:	4d0f      	ldr	r5, [pc, #60]	; (8001314 <enet_init+0x2b0>)
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
  printf("waiting for PHY to wake up...\r\n");
  while (enet_read_phy_reg(0) == 0xffff) { }
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
  printf("done with PHY reset.\r\n");
 80012d8:	f002 fd12 	bl	8003d00 <puts>
  printf("setting software strap registers...\r\n");
 80012dc:	4812      	ldr	r0, [pc, #72]	; (8001328 <enet_init+0x2c4>)
 80012de:	f002 fd0f 	bl	8003d00 <puts>
  enet_write_phy_reg(0x09, 0x7821); // enable auto MDIX,
 80012e2:	2009      	movs	r0, #9
 80012e4:	f647 0121 	movw	r1, #30753	; 0x7821
 80012e8:	f7ff fe8c 	bl	8001004 <enet_write_phy_reg>
                                    // set INT/PWDN to be interrupt output
                                    // enable auto-negotiation
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
 80012ec:	2009      	movs	r0, #9
 80012ee:	f64f 0121 	movw	r1, #63521	; 0xf821
 80012f2:	e01b      	b.n	800132c <enet_init+0x2c8>
 80012f4:	0800a918 	.word	0x0800a918
 80012f8:	40020000 	.word	0x40020000
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020400 	.word	0x40020400
 8001304:	40020800 	.word	0x40020800
 8001308:	40013800 	.word	0x40013800
 800130c:	0001869f 	.word	0x0001869f
 8001310:	40029000 	.word	0x40029000
 8001314:	40028000 	.word	0x40028000
 8001318:	40029018 	.word	0x40029018
 800131c:	000f423f 	.word	0x000f423f
 8001320:	0800a928 	.word	0x0800a928
 8001324:	0800a948 	.word	0x0800a948
 8001328:	0800a960 	.word	0x0800a960
 800132c:	f7ff fe6a 	bl	8001004 <enet_write_phy_reg>
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode
 8001330:	2004      	movs	r0, #4
 8001332:	f240 1101 	movw	r1, #257	; 0x101
 8001336:	f7ff fe65 	bl	8001004 <enet_write_phy_reg>
static volatile uint16_t g_eth_rxpool_ptrs_wpos = 0;
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 800133a:	462f      	mov	r7, r5
                                    // enable auto-negotiation
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode

  // cycle through and read a bunch of PHY registers to make sure it's alive
  for (int i = 0; i < 32; i++)
 800133c:	2600      	movs	r6, #0
static volatile uint16_t g_eth_rxpool_ptrs_wpos = 0;
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 800133e:	692b      	ldr	r3, [r5, #16]
 8001340:	07db      	lsls	r3, r3, #31
 8001342:	d4fc      	bmi.n	800133e <enet_init+0x2da>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
                  ((reg_idx & 0x1f) << 6) |
 8001344:	01b3      	lsls	r3, r6, #6
                  ETH_MACMIIAR_CR_Div102  | // clock divider
 8001346:	f443 6301 	orr.w	r3, r3, #2064	; 0x810
 800134a:	f043 0301 	orr.w	r3, r3, #1
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 800134e:	613b      	str	r3, [r7, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8001350:	692b      	ldr	r3, [r5, #16]
 8001352:	f013 0401 	ands.w	r4, r3, #1
 8001356:	d1fb      	bne.n	8001350 <enet_init+0x2ec>
  return ETH->MACMIIDR & 0xffff;
 8001358:	697a      	ldr	r2, [r7, #20]
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode

  // cycle through and read a bunch of PHY registers to make sure it's alive
  for (int i = 0; i < 32; i++)
    printf("PHY reg %02d = 0x%04x\r\n", i, enet_read_phy_reg(i));
 800135a:	4842      	ldr	r0, [pc, #264]	; (8001464 <enet_init+0x400>)
 800135c:	4631      	mov	r1, r6
 800135e:	b292      	uxth	r2, r2
                                    // enable auto-negotiation
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode

  // cycle through and read a bunch of PHY registers to make sure it's alive
  for (int i = 0; i < 32; i++)
 8001360:	3601      	adds	r6, #1
    printf("PHY reg %02d = 0x%04x\r\n", i, enet_read_phy_reg(i));
 8001362:	f002 fc79 	bl	8003c58 <printf>
                                    // enable auto-negotiation
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode

  // cycle through and read a bunch of PHY registers to make sure it's alive
  for (int i = 0; i < 32; i++)
 8001366:	2e20      	cmp	r6, #32
 8001368:	d1e9      	bne.n	800133e <enet_init+0x2da>

  ////////////////////////////////////////////////////////////////////////
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
 800136a:	4a3f      	ldr	r2, [pc, #252]	; (8001468 <enet_init+0x404>)
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
 800136c:	f8df e124 	ldr.w	lr, [pc, #292]	; 8001494 <enet_init+0x430>

  ////////////////////////////////////////////////////////////////////////
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
 8001370:	f44f 0550 	mov.w	r5, #13631488	; 0xd00000
 8001374:	6015      	str	r5, [r2, #0]
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
 8001376:	4623      	mov	r3, r4
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
 8001378:	6054      	str	r4, [r2, #4]
 800137a:	46a4      	mov	ip, r4
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
 800137c:	f8c2 e008 	str.w	lr, [r2, #8]
    if (i < ETH_DMA_NTXD-1)
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[i+1]; // chain to next
 8001380:	1c58      	adds	r0, r3, #1
 8001382:	0104      	lsls	r4, r0, #4
 8001384:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8001388:	f103 0708 	add.w	r7, r3, #8
 800138c:	1911      	adds	r1, r2, r4
 800138e:	eb0e 26c0 	add.w	r6, lr, r0, lsl #11
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
    if (i < ETH_DMA_NTXD-1)
 8001392:	2803      	cmp	r0, #3
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[i+1]; // chain to next
 8001394:	6079      	str	r1, [r7, #4]
 8001396:	4603      	mov	r3, r0

  ////////////////////////////////////////////////////////////////////////
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
 8001398:	5115      	str	r5, [r2, r4]
 800139a:	4f33      	ldr	r7, [pc, #204]	; (8001468 <enet_init+0x404>)
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
 800139c:	f8c1 c004 	str.w	ip, [r1, #4]
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
 80013a0:	608e      	str	r6, [r1, #8]
    if (i < ETH_DMA_NTXD-1)
 80013a2:	d1ed      	bne.n	8001380 <enet_init+0x31c>
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 80013a4:	4a31      	ldr	r2, [pc, #196]	; (800146c <enet_init+0x408>)
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
 80013a6:	4932      	ldr	r1, [pc, #200]	; (8001470 <enet_init+0x40c>)
    g_eth_dma_tx_desc[i].des1 = 0;
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
    if (i < ETH_DMA_NTXD-1)
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[i+1]; // chain to next
    else
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[0]; // loop to first
 80013a8:	63ff      	str	r7, [r7, #60]	; 0x3c
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 80013aa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
 80013ae:	f44f 4390 	mov.w	r3, #18432	; 0x4800
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 80013b2:	6010      	str	r0, [r2, #0]
 80013b4:	4680      	mov	r8, r0
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
 80013b6:	6053      	str	r3, [r2, #4]
 80013b8:	469c      	mov	ip, r3
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
 80013ba:	6091      	str	r1, [r2, #8]
 80013bc:	f102 0010 	add.w	r0, r2, #16
 80013c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80013c4:	2300      	movs	r3, #0
    if (i < ETH_DMA_NRXD-1)
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
 80013c6:	1c5e      	adds	r6, r3, #1
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 80013c8:	0135      	lsls	r5, r6, #4
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
    if (i < ETH_DMA_NRXD-1)
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
 80013ca:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80013ce:	f103 0e08 	add.w	lr, r3, #8
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 80013d2:	1954      	adds	r4, r2, r5
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
    if (i < ETH_DMA_NRXD-1)
 80013d4:	2e0f      	cmp	r6, #15
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
 80013d6:	f8ce 0004 	str.w	r0, [lr, #4]
 80013da:	4633      	mov	r3, r6
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 80013dc:	f842 8005 	str.w	r8, [r2, r5]
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
    if (i < ETH_DMA_NRXD-1)
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
 80013e0:	f8df e088 	ldr.w	lr, [pc, #136]	; 800146c <enet_init+0x408>
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
 80013e4:	f8c4 c004 	str.w	ip, [r4, #4]
 80013e8:	f100 0010 	add.w	r0, r0, #16
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
 80013ec:	60a1      	str	r1, [r4, #8]
 80013ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
    if (i < ETH_DMA_NRXD-1)
 80013f2:	d1e8      	bne.n	80013c6 <enet_init+0x362>
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
    else
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[0];
 80013f4:	2300      	movs	r3, #0
 80013f6:	491f      	ldr	r1, [pc, #124]	; (8001474 <enet_init+0x410>)
 80013f8:	4e1f      	ldr	r6, [pc, #124]	; (8001478 <enet_init+0x414>)
 80013fa:	4d20      	ldr	r5, [pc, #128]	; (800147c <enet_init+0x418>)
 80013fc:	4c20      	ldr	r4, [pc, #128]	; (8001480 <enet_init+0x41c>)
 80013fe:	4821      	ldr	r0, [pc, #132]	; (8001484 <enet_init+0x420>)
 8001400:	f8ce e0fc 	str.w	lr, [lr, #252]	; 0xfc
  ///////////////////////////////////////////////////////////////////////
  // set up the RAM pool for reception
  for (int i = 0; i < ETH_RAM_RXPOOL_NPTR; i++)
  {
    g_eth_rxpool_start[i] = &g_eth_rxpool[0];
    g_eth_rxpool_len[i] = 0;
 8001404:	461a      	mov	r2, r3
 8001406:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[0];
  }

  ///////////////////////////////////////////////////////////////////////
  // set up the RAM pool for reception
  for (int i = 0; i < ETH_RAM_RXPOOL_NPTR; i++)
 800140a:	3301      	adds	r3, #1
 800140c:	2b80      	cmp	r3, #128	; 0x80
  {
    g_eth_rxpool_start[i] = &g_eth_rxpool[0];
    g_eth_rxpool_len[i] = 0;
    g_eth_rxpool_ptrs_wpos = 0;
 800140e:	8022      	strh	r2, [r4, #0]

  ///////////////////////////////////////////////////////////////////////
  // set up the RAM pool for reception
  for (int i = 0; i < ETH_RAM_RXPOOL_NPTR; i++)
  {
    g_eth_rxpool_start[i] = &g_eth_rxpool[0];
 8001410:	f841 6f04 	str.w	r6, [r1, #4]!
    g_eth_rxpool_len[i] = 0;
    g_eth_rxpool_ptrs_wpos = 0;
    g_eth_rxpool_ptrs_rpos = 0;
 8001414:	8002      	strh	r2, [r0, #0]
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[0];
  }

  ///////////////////////////////////////////////////////////////////////
  // set up the RAM pool for reception
  for (int i = 0; i < ETH_RAM_RXPOOL_NPTR; i++)
 8001416:	d1f6      	bne.n	8001406 <enet_init+0x3a2>
    g_eth_rxpool_ptrs_rpos = 0;
  }

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <enet_init+0x424>)
  /*
  ETH->DMABMR = ETH_DMABMR_AAB | ETH_DMABMR_USP |
                ETH_DMABMR_RDP_1Beat | ETH_DMABMR_RTPR_1_1 |
                ETH_DMABMR_PBL_1Beat | ETH_DMABMR_EDE;
  */
  ETH->DMAIER = ETH_DMAIER_NISE | ETH_DMAIER_RIE;
 800141a:	4c1c      	ldr	r4, [pc, #112]	; (800148c <enet_init+0x428>)
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800141c:	481c      	ldr	r0, [pc, #112]	; (8001490 <enet_init+0x42c>)

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
  ETH->DMARDLAR = (uint32_t)&g_eth_dma_rx_desc[0]; // point RX DMA to first desc
  ETH->DMAOMR = ETH_DMAOMR_TSF; // enable store-and-forward mode
 800141e:	f241 0118 	movw	r1, #4120	; 0x1018
    g_eth_rxpool_ptrs_rpos = 0;
  }

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
 8001422:	f241 0c10 	movw	ip, #4112	; 0x1010
  ETH->DMARDLAR = (uint32_t)&g_eth_dma_rx_desc[0]; // point RX DMA to first desc
 8001426:	f241 060c 	movw	r6, #4108	; 0x100c
  /*
  ETH->DMABMR = ETH_DMABMR_AAB | ETH_DMABMR_USP |
                ETH_DMABMR_RDP_1Beat | ETH_DMABMR_RTPR_1_1 |
                ETH_DMABMR_PBL_1Beat | ETH_DMABMR_EDE;
  */
  ETH->DMAIER = ETH_DMAIER_NISE | ETH_DMAIER_RIE;
 800142a:	f241 021c 	movw	r2, #4124	; 0x101c

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
  ETH->DMARDLAR = (uint32_t)&g_eth_dma_rx_desc[0]; // point RX DMA to first desc
  ETH->DMAOMR = ETH_DMAOMR_TSF; // enable store-and-forward mode
 800142e:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
    g_eth_rxpool_ptrs_rpos = 0;
  }

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
 8001432:	f843 700c 	str.w	r7, [r3, ip]
  ETH->DMARDLAR = (uint32_t)&g_eth_dma_rx_desc[0]; // point RX DMA to first desc
 8001436:	f843 e006 	str.w	lr, [r3, r6]
  ETH->DMAOMR = ETH_DMAOMR_TSF; // enable store-and-forward mode
 800143a:	505d      	str	r5, [r3, r1]
  /*
  ETH->DMABMR = ETH_DMABMR_AAB | ETH_DMABMR_USP |
                ETH_DMABMR_RDP_1Beat | ETH_DMABMR_RTPR_1_1 |
                ETH_DMABMR_PBL_1Beat | ETH_DMABMR_EDE;
  */
  ETH->DMAIER = ETH_DMAIER_NISE | ETH_DMAIER_RIE;
 800143c:	509c      	str	r4, [r3, r2]
  ETH->MACCR |= ETH_MACCR_TE | // enable transmitter
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	2530      	movs	r5, #48	; 0x30
 8001442:	f042 020c 	orr.w	r2, r2, #12
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001446:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 800144a:	601a      	str	r2, [r3, #0]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800144c:	f880 533d 	strb.w	r5, [r0, #829]	; 0x33d
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001450:	6044      	str	r4, [r0, #4]
                ETH_MACCR_RE;  // enable receiver
  NVIC_SetPriority(ETH_IRQn, 3);
  NVIC_EnableIRQ(ETH_IRQn);
  ETH->DMAOMR |= ETH_DMAOMR_ST | ETH_DMAOMR_SR; // enable ethernet DMA tx/rx
 8001452:	585a      	ldr	r2, [r3, r1]
 8001454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001458:	f042 0202 	orr.w	r2, r2, #2
 800145c:	505a      	str	r2, [r3, r1]
}
 800145e:	b00e      	add	sp, #56	; 0x38
 8001460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001464:	0800a988 	.word	0x0800a988
 8001468:	20008f3c 	.word	0x20008f3c
 800146c:	20009284 	.word	0x20009284
 8001470:	20000f3c 	.word	0x20000f3c
 8001474:	20009080 	.word	0x20009080
 8001478:	20009384 	.word	0x20009384
 800147c:	20008f80 	.word	0x20008f80
 8001480:	20008f7c 	.word	0x20008f7c
 8001484:	20008f7e 	.word	0x20008f7e
 8001488:	40028000 	.word	0x40028000
 800148c:	00010040 	.word	0x00010040
 8001490:	e000e100 	.word	0xe000e100
 8001494:	2000d384 	.word	0x2000d384

08001498 <eth_vector>:

void eth_vector()
{
 8001498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  volatile uint32_t dmasr = ETH->DMASR;
 800149c:	f241 0314 	movw	r3, #4116	; 0x1014
 80014a0:	4a2d      	ldr	r2, [pc, #180]	; (8001558 <eth_vector+0xc0>)
  NVIC_EnableIRQ(ETH_IRQn);
  ETH->DMAOMR |= ETH_DMAOMR_ST | ETH_DMAOMR_SR; // enable ethernet DMA tx/rx
}

void eth_vector()
{
 80014a2:	b083      	sub	sp, #12
  volatile uint32_t dmasr = ETH->DMASR;
 80014a4:	58d1      	ldr	r1, [r2, r3]
 80014a6:	9101      	str	r1, [sp, #4]
  ETH->DMASR = dmasr; // clear pending bits in the status register
 80014a8:	9901      	ldr	r1, [sp, #4]
 80014aa:	50d1      	str	r1, [r2, r3]
  //printf("eth_vector()\r\n");
  if (dmasr & ETH_DMASR_RS)
 80014ac:	9b01      	ldr	r3, [sp, #4]
 80014ae:	065b      	lsls	r3, r3, #25
 80014b0:	d549      	bpl.n	8001546 <eth_vector+0xae>
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
 80014b2:	4f2a      	ldr	r7, [pc, #168]	; (800155c <eth_vector+0xc4>)
 80014b4:	683d      	ldr	r5, [r7, #0]
 80014b6:	682b      	ldr	r3, [r5, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db44      	blt.n	8001546 <eth_vector+0xae>
 80014bc:	4e28      	ldr	r6, [pc, #160]	; (8001560 <eth_vector+0xc8>)
 80014be:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8001568 <eth_vector+0xd0>
 80014c2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800156c <eth_vector+0xd4>
 80014c6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001570 <eth_vector+0xd8>
    {
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
 80014ca:	f04f 0800 	mov.w	r8, #0
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
    {
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
 80014ce:	682c      	ldr	r4, [r5, #0]
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
 80014d0:	8833      	ldrh	r3, [r6, #0]
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
      g_eth_rxpool_len[wp] = rxn;
 80014d2:	4924      	ldr	r1, [pc, #144]	; (8001564 <eth_vector+0xcc>)
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
    {
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
 80014d4:	f3c4 440d 	ubfx	r4, r4, #16, #14
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
 80014d8:	fa14 f383 	uxtah	r3, r4, r3
 80014dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        g_eth_rxpool_wpos = 0;
 80014e0:	bfa4      	itt	ge
 80014e2:	4b1f      	ldrge	r3, [pc, #124]	; (8001560 <eth_vector+0xc8>)
 80014e4:	f8a3 8000 	strhge.w	r8, [r3]
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
 80014e8:	f8bb 3000 	ldrh.w	r3, [fp]
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
 80014ec:	8830      	ldrh	r0, [r6, #0]
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
 80014ee:	b29b      	uxth	r3, r3
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
      g_eth_rxpool_len[wp] = rxn;
      memcpy((uint8_t *)&g_eth_rxpool[g_eth_rxpool_wpos],
 80014f0:	4622      	mov	r2, r4
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
    {
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
 80014f2:	b2a4      	uxth	r4, r4
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
      g_eth_rxpool_len[wp] = rxn;
 80014f4:	f821 4013 	strh.w	r4, [r1, r3, lsl #1]
      memcpy((uint8_t *)&g_eth_rxpool[g_eth_rxpool_wpos],
 80014f8:	f8b6 e000 	ldrh.w	lr, [r6]
             (const uint8_t *)g_eth_dma_rx_next_desc->des2,
 80014fc:	68a9      	ldr	r1, [r5, #8]
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
 80014fe:	fa19 f080 	uxtah	r0, r9, r0
 8001502:	f84a 0023 	str.w	r0, [sl, r3, lsl #2]
      g_eth_rxpool_len[wp] = rxn;
      memcpy((uint8_t *)&g_eth_rxpool[g_eth_rxpool_wpos],
 8001506:	fa19 f08e 	uxtah	r0, r9, lr
 800150a:	f002 faad 	bl	8003a68 <memcpy>
             (const uint8_t *)g_eth_dma_rx_next_desc->des2,
             rxn);
      //printf("ethernet rx %d into rxpool ptr %d\r\n", rxn, wp);
      g_eth_rxpool_ptrs_wpos++;
 800150e:	f8bb 3000 	ldrh.w	r3, [fp]
 8001512:	3301      	adds	r3, #1
 8001514:	b29b      	uxth	r3, r3
 8001516:	f8ab 3000 	strh.w	r3, [fp]
      if (g_eth_rxpool_ptrs_wpos >= ETH_RAM_RXPOOL_NPTR)
 800151a:	f8bb 3000 	ldrh.w	r3, [fp]
 800151e:	b29b      	uxth	r3, r3
 8001520:	2b7f      	cmp	r3, #127	; 0x7f
        g_eth_rxpool_ptrs_wpos = 0;
 8001522:	bf84      	itt	hi
 8001524:	4b10      	ldrhi	r3, [pc, #64]	; (8001568 <eth_vector+0xd0>)
 8001526:	f8a3 8000 	strhhi.w	r8, [r3]
      g_eth_rxpool_wpos += rxn;
 800152a:	8833      	ldrh	r3, [r6, #0]
 800152c:	fa14 f483 	uxtah	r4, r4, r3
 8001530:	b2a4      	uxth	r4, r4
 8001532:	8034      	strh	r4, [r6, #0]
      uint8_t *p = (uint8_t *)g_eth_rx_next_desc->des2;
      for (int i = 0; i < rxn; i++)
        printf("%02d: 0x%02x\r\n", i, p[i]);
*/

      g_eth_dma_rx_next_desc->des0 |= 0x80000000; // give it back to the DMA
 8001534:	682b      	ldr	r3, [r5, #0]
 8001536:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800153a:	602b      	str	r3, [r5, #0]
      // advance the rx pointer for next time
      g_eth_dma_rx_next_desc = (eth_dma_desc_t *)g_eth_dma_rx_next_desc->des3;
 800153c:	68ed      	ldr	r5, [r5, #12]
 800153e:	603d      	str	r5, [r7, #0]
  ETH->DMASR = dmasr; // clear pending bits in the status register
  //printf("eth_vector()\r\n");
  if (dmasr & ETH_DMASR_RS)
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
 8001540:	682b      	ldr	r3, [r5, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	dac3      	bge.n	80014ce <eth_vector+0x36>
      g_eth_dma_rx_next_desc->des0 |= 0x80000000; // give it back to the DMA
      // advance the rx pointer for next time
      g_eth_dma_rx_next_desc = (eth_dma_desc_t *)g_eth_dma_rx_next_desc->des3;
    }
  }
  dmasr = ETH->DMASR;
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <eth_vector+0xc0>)
 8001548:	f241 0314 	movw	r3, #4116	; 0x1014
 800154c:	58d3      	ldr	r3, [r2, r3]
 800154e:	9301      	str	r3, [sp, #4]
  //printf("dmasr = 0x%08x\r\n", (int)dmasr);
}
 8001550:	b003      	add	sp, #12
 8001552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001556:	bf00      	nop
 8001558:	40028000 	.word	0x40028000
 800155c:	20000008 	.word	0x20000008
 8001560:	20009080 	.word	0x20009080
 8001564:	20008f80 	.word	0x20008f80
 8001568:	20008f7c 	.word	0x20008f7c
 800156c:	20009084 	.word	0x20009084
 8001570:	20009384 	.word	0x20009384

08001574 <enet_get_link_status>:
static volatile uint16_t g_eth_rxpool_ptrs_wpos = 0;
static volatile uint16_t g_eth_rxpool_ptrs_rpos = 0;

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8001574:	4914      	ldr	r1, [pc, #80]	; (80015c8 <enet_get_link_status+0x54>)
 8001576:	690a      	ldr	r2, [r1, #16]
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <enet_get_link_status+0x54>)
 800157a:	07d2      	lsls	r2, r2, #31
 800157c:	d4fb      	bmi.n	8001576 <enet_get_link_status+0x2>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 800157e:	f640 0251 	movw	r2, #2129	; 0x851
 8001582:	611a      	str	r2, [r3, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8001584:	691a      	ldr	r2, [r3, #16]
 8001586:	4910      	ldr	r1, [pc, #64]	; (80015c8 <enet_get_link_status+0x54>)
 8001588:	07d0      	lsls	r0, r2, #31
 800158a:	d4fb      	bmi.n	8001584 <enet_get_link_status+0x10>
  dmasr = ETH->DMASR;
  //printf("dmasr = 0x%08x\r\n", (int)dmasr);
}

enet_link_status_t enet_get_link_status()
{
 800158c:	b510      	push	{r4, lr}
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
  return ETH->MACMIIDR & 0xffff;
 800158e:	694c      	ldr	r4, [r1, #20]
 8001590:	b2a4      	uxth	r4, r4

enet_link_status_t enet_get_link_status()
{
  uint16_t status = enet_read_phy_reg(0x01);
  //printf("PHY status = 0x%02x\r\n", status);
  if (status & (1 << 4)) {
 8001592:	06e2      	lsls	r2, r4, #27
    err_set(ERR_ETH_REMOTE_FAULT);
 8001594:	f04f 0002 	mov.w	r0, #2

enet_link_status_t enet_get_link_status()
{
  uint16_t status = enet_read_phy_reg(0x01);
  //printf("PHY status = 0x%02x\r\n", status);
  if (status & (1 << 4)) {
 8001598:	d50a      	bpl.n	80015b0 <enet_get_link_status+0x3c>
    err_set(ERR_ETH_REMOTE_FAULT);
 800159a:	f002 fa21 	bl	80039e0 <err_set>
  } else {
    err_unset(ERR_ETH_REMOTE_FAULT);
  }
  if (status & (1 << 5)) {
 800159e:	06a3      	lsls	r3, r4, #26
    err_unset(ERR_ETH_NEGOTIATING);
 80015a0:	f04f 0003 	mov.w	r0, #3
  if (status & (1 << 4)) {
    err_set(ERR_ETH_REMOTE_FAULT);
  } else {
    err_unset(ERR_ETH_REMOTE_FAULT);
  }
  if (status & (1 << 5)) {
 80015a4:	d50a      	bpl.n	80015bc <enet_get_link_status+0x48>
    err_unset(ERR_ETH_NEGOTIATING);
 80015a6:	f002 fa21 	bl	80039ec <err_unset>
    err_set(ERR_ETH_NEGOTIATING);
  }
  if (status & (1 << 2))
    return ENET_LINK_UP;
  return ENET_LINK_DOWN;
}
 80015aa:	f3c4 0080 	ubfx	r0, r4, #2, #1
 80015ae:	bd10      	pop	{r4, pc}
  uint16_t status = enet_read_phy_reg(0x01);
  //printf("PHY status = 0x%02x\r\n", status);
  if (status & (1 << 4)) {
    err_set(ERR_ETH_REMOTE_FAULT);
  } else {
    err_unset(ERR_ETH_REMOTE_FAULT);
 80015b0:	f002 fa1c 	bl	80039ec <err_unset>
  }
  if (status & (1 << 5)) {
 80015b4:	06a3      	lsls	r3, r4, #26
    err_unset(ERR_ETH_NEGOTIATING);
 80015b6:	f04f 0003 	mov.w	r0, #3
  if (status & (1 << 4)) {
    err_set(ERR_ETH_REMOTE_FAULT);
  } else {
    err_unset(ERR_ETH_REMOTE_FAULT);
  }
  if (status & (1 << 5)) {
 80015ba:	d4f4      	bmi.n	80015a6 <enet_get_link_status+0x32>
    err_unset(ERR_ETH_NEGOTIATING);
  } else {
    err_set(ERR_ETH_NEGOTIATING);
 80015bc:	f002 fa10 	bl	80039e0 <err_set>
  }
  if (status & (1 << 2))
    return ENET_LINK_UP;
  return ENET_LINK_DOWN;
}
 80015c0:	f3c4 0080 	ubfx	r0, r4, #2, #1
 80015c4:	bd10      	pop	{r4, pc}
 80015c6:	bf00      	nop
 80015c8:	40028000 	.word	0x40028000

080015cc <eth_send_raw_packet>:

void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
 80015cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
 80015ce:	4e1c      	ldr	r6, [pc, #112]	; (8001640 <eth_send_raw_packet+0x74>)
 80015d0:	6833      	ldr	r3, [r6, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db2d      	blt.n	8001634 <eth_send_raw_packet+0x68>
 80015d8:	460d      	mov	r5, r1
 80015da:	4607      	mov	r7, r0
  {
    err_set(ERR_ETH_BUFFER_FULL);
    return; // if it's set, then we have run out of ringbuffer room. can't tx.
  }
  err_unset(ERR_ETH_BUFFER_FULL);
 80015dc:	2001      	movs	r0, #1
 80015de:	f002 fa05 	bl	80039ec <err_unset>
  /*
  printf("sending using TX descriptor %08x status 0x%08x\r\n",
         (unsigned)g_eth_tx_next_desc,
         (unsigned)g_eth_tx_next_desc->control);
 */
  uint8_t *buf = (uint8_t *)g_eth_dma_tx_next_desc->des2;
 80015e2:	6834      	ldr	r4, [r6, #0]
  if (pkt_len > ETH_NBUF)
    pkt_len = ETH_NBUF; // let's not blow through our packet buffer
  memcpy(buf, pkt, pkt_len);
 80015e4:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80015e8:	bf28      	it	cs
 80015ea:	f44f 6500 	movcs.w	r5, #2048	; 0x800
 80015ee:	4639      	mov	r1, r7
 80015f0:	462a      	mov	r2, r5
  /*
  printf("sending using TX descriptor %08x status 0x%08x\r\n",
         (unsigned)g_eth_tx_next_desc,
         (unsigned)g_eth_tx_next_desc->control);
 */
  uint8_t *buf = (uint8_t *)g_eth_dma_tx_next_desc->des2;
 80015f2:	68a0      	ldr	r0, [r4, #8]
  if (pkt_len > ETH_NBUF)
    pkt_len = ETH_NBUF; // let's not blow through our packet buffer
  memcpy(buf, pkt, pkt_len);
 80015f4:	f002 fa38 	bl	8003a68 <memcpy>
  g_eth_dma_tx_next_desc->des1 = pkt_len;
 80015f8:	6065      	str	r5, [r4, #4]
  g_eth_dma_tx_next_desc->des0 |= 0x30000000; // LS+FS = single-buffer packet
 80015fa:	6823      	ldr	r3, [r4, #0]
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
 80015fc:	4a11      	ldr	r2, [pc, #68]	; (8001644 <eth_send_raw_packet+0x78>)
  uint8_t *buf = (uint8_t *)g_eth_dma_tx_next_desc->des2;
  if (pkt_len > ETH_NBUF)
    pkt_len = ETH_NBUF; // let's not blow through our packet buffer
  memcpy(buf, pkt, pkt_len);
  g_eth_dma_tx_next_desc->des1 = pkt_len;
  g_eth_dma_tx_next_desc->des0 |= 0x30000000; // LS+FS = single-buffer packet
 80015fe:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001602:	6023      	str	r3, [r4, #0]
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
 8001604:	6823      	ldr	r3, [r4, #0]
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
 8001606:	f241 0114 	movw	r1, #4116	; 0x1014
  if (pkt_len > ETH_NBUF)
    pkt_len = ETH_NBUF; // let's not blow through our packet buffer
  memcpy(buf, pkt, pkt_len);
  g_eth_dma_tx_next_desc->des1 = pkt_len;
  g_eth_dma_tx_next_desc->des0 |= 0x30000000; // LS+FS = single-buffer packet
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
 800160a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800160e:	6023      	str	r3, [r4, #0]
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
 8001610:	5853      	ldr	r3, [r2, r1]
 8001612:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8001616:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800161a:	d002      	beq.n	8001622 <eth_send_raw_packet+0x56>
  {
    ETH->DMASR = ETH_DMASR_TBUS; // clear the buffer-unavailable flag
    ETH->DMATPDR = 0; // transmit poll demand = kick it moving again
  }
  g_eth_dma_tx_next_desc = (eth_dma_desc_t *)g_eth_dma_tx_next_desc->des3;
 800161c:	68e3      	ldr	r3, [r4, #12]
 800161e:	6033      	str	r3, [r6, #0]
 8001620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
  {
    ETH->DMASR = ETH_DMASR_TBUS; // clear the buffer-unavailable flag
    ETH->DMATPDR = 0; // transmit poll demand = kick it moving again
 8001622:	f241 0304 	movw	r3, #4100	; 0x1004
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
  {
    ETH->DMASR = ETH_DMASR_TBUS; // clear the buffer-unavailable flag
 8001626:	2504      	movs	r5, #4
    ETH->DMATPDR = 0; // transmit poll demand = kick it moving again
 8001628:	2000      	movs	r0, #0
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
  {
    ETH->DMASR = ETH_DMASR_TBUS; // clear the buffer-unavailable flag
 800162a:	5055      	str	r5, [r2, r1]
    ETH->DMATPDR = 0; // transmit poll demand = kick it moving again
 800162c:	50d0      	str	r0, [r2, r3]
  }
  g_eth_dma_tx_next_desc = (eth_dma_desc_t *)g_eth_dma_tx_next_desc->des3;
 800162e:	68e3      	ldr	r3, [r4, #12]
 8001630:	6033      	str	r3, [r6, #0]
 8001632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
  {
    err_set(ERR_ETH_BUFFER_FULL);
 8001634:	2001      	movs	r0, #1
    ETH->DMATPDR = 0; // transmit poll demand = kick it moving again
  }
  g_eth_dma_tx_next_desc = (eth_dma_desc_t *)g_eth_dma_tx_next_desc->des3;
  //uint16_t r = enet_read_phy_reg(0x17);
  //printf(" rmii status = 0x%04x\r\n", (unsigned)r);
}
 8001636:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
  {
    err_set(ERR_ETH_BUFFER_FULL);
 800163a:	f002 b9d1 	b.w	80039e0 <err_set>
 800163e:	bf00      	nop
 8001640:	20000004 	.word	0x20000004
 8001644:	40028000 	.word	0x40028000

08001648 <eth_htons>:
  //printf(" rmii status = 0x%04x\r\n", (unsigned)r);
}

// todo: find ways for this to be overridden on CPU's with built-ins for this
uint16_t eth_htons(const uint16_t x)
{
 8001648:	ba40      	rev16	r0, r0
  return ((x & 0xff) << 8) | ((x >> 8) & 0xff);
}
 800164a:	b280      	uxth	r0, r0
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop

08001650 <eth_htonl>:
{
  return ((x & 0x000000ff) << 24)  |
         ((x & 0x0000ff00) << 8)   |
         ((x & 0x00ff0000) >> 8)   |
         ((x & 0xff000000) >> 24);
}
 8001650:	ba00      	rev	r0, r0
 8001652:	4770      	bx	lr

08001654 <enet_send_udp_ucast>:

void enet_send_udp_ucast(const uint8_t *dest_mac,
                         const uint32_t dest_ip, const uint16_t dest_port,
                         const uint32_t source_ip, const uint16_t source_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
 8001654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001658:	b083      	sub	sp, #12
 800165a:	4c34      	ldr	r4, [pc, #208]	; (800172c <enet_send_udp_ucast+0xd8>)
 800165c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800165e:	9501      	str	r5, [sp, #4]
 8001660:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
 8001664:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8001668:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8001734 <enet_send_udp_ucast+0xe0>
 800166c:	1e47      	subs	r7, r0, #1
 800166e:	4626      	mov	r6, r4
 8001670:	3005      	adds	r0, #5
  eth_udp_header_t *h = (eth_udp_header_t *)&g_eth_udpbuf[0];
  for (int i = 0; i < 6; i++)
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
 8001672:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 8001676:	f806 cb01 	strb.w	ip, [r6], #1
                         const uint32_t dest_ip, const uint16_t dest_port,
                         const uint32_t source_ip, const uint16_t source_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  eth_udp_header_t *h = (eth_udp_header_t *)&g_eth_udpbuf[0];
  for (int i = 0; i < 6; i++)
 800167a:	4287      	cmp	r7, r0
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
 800167c:	f81e cb01 	ldrb.w	ip, [lr], #1
 8001680:	f886 c005 	strb.w	ip, [r6, #5]
                         const uint32_t dest_ip, const uint16_t dest_port,
                         const uint32_t source_ip, const uint16_t source_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  eth_udp_header_t *h = (eth_udp_header_t *)&g_eth_udpbuf[0];
  for (int i = 0; i < 6; i++)
 8001684:	d1f5      	bne.n	8001672 <enet_send_udp_ucast+0x1e>
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
 8001686:	7ba6      	ldrb	r6, [r4, #14]
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
 8001688:	7be7      	ldrb	r7, [r4, #15]
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
 800168a:	f8b4 c012 	ldrh.w	ip, [r4, #18]
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
 800168e:	f8b4 e018 	ldrh.w	lr, [r4, #24]
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
 8001692:	4827      	ldr	r0, [pc, #156]	; (8001730 <enet_send_udp_ucast+0xdc>)
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
 8001694:	f04f 0805 	mov.w	r8, #5
 8001698:	f368 0603 	bfi	r6, r8, #0, #4
  h->ip.version = ETH_IP_VERSION; // ipv4
 800169c:	f04f 0904 	mov.w	r9, #4
 80016a0:	ba1b      	rev	r3, r3
 80016a2:	fa91 fa81 	rev.w	sl, r1
 80016a6:	f369 1607 	bfi	r6, r9, #4, #4
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
 80016aa:	f8c4 301a 	str.w	r3, [r4, #26]
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
 80016ae:	f105 081c 	add.w	r8, r5, #28
 80016b2:	ba52      	rev16	r2, r2
 80016b4:	fa9b fb9b 	rev16.w	fp, fp
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
 80016b8:	f105 0908 	add.w	r9, r5, #8
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
 80016bc:	2340      	movs	r3, #64	; 0x40
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
 80016be:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
 80016c2:	9901      	ldr	r1, [sp, #4]
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
  h->ip.dest_addr = eth_htonl(dest_ip);
 80016c4:	f8c4 a01e 	str.w	sl, [r4, #30]
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
 80016c8:	f36f 0c0f 	bfc	ip, #0, #16
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
 80016cc:	f36f 0e0f 	bfc	lr, #0, #16
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
 80016d0:	84a2      	strh	r2, [r4, #36]	; 0x24
  h->source_port = eth_htons(source_port); //1234;
 80016d2:	f8a4 b022 	strh.w	fp, [r4, #34]	; 0x22
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
 80016d6:	73a6      	strb	r6, [r4, #14]
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
 80016d8:	82a3      	strh	r3, [r4, #20]
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
 80016da:	f36f 0787 	bfc	r7, #2, #6
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
 80016de:	f04f 0301 	mov.w	r3, #1
 80016e2:	fa98 f898 	rev16.w	r8, r8
 80016e6:	fa99 f999 	rev16.w	r9, r9
  for (int i = 0; i < 6; i++)
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
 80016ea:	f04f 0a08 	mov.w	sl, #8
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
 80016ee:	f04f 0b11 	mov.w	fp, #17
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
 80016f2:	2600      	movs	r6, #0
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
 80016f4:	462a      	mov	r2, r5
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
 80016f6:	73e7      	strb	r7, [r4, #15]
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
 80016f8:	f8a4 c012 	strh.w	ip, [r4, #18]
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
 80016fc:	f8a4 e018 	strh.w	lr, [r4, #24]
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
 8001700:	f8a4 8010 	strh.w	r8, [r4, #16]
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
 8001704:	f8a4 9026 	strh.w	r9, [r4, #38]	; 0x26
  for (int i = 0; i < 6; i++)
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
 8001708:	f8a4 a00c 	strh.w	sl, [r4, #12]
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
 800170c:	75a3      	strb	r3, [r4, #22]
  h->ip.proto = ETH_IP_PROTO_UDP;
 800170e:	f884 b017 	strb.w	fp, [r4, #23]
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
 8001712:	8526      	strh	r6, [r4, #40]	; 0x28
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
 8001714:	f002 f9a8 	bl	8003a68 <memcpy>
  eth_send_raw_packet(g_eth_udpbuf, sizeof(eth_udp_header_t) + payload_len);
 8001718:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 800171c:	4803      	ldr	r0, [pc, #12]	; (800172c <enet_send_udp_ucast+0xd8>)
 800171e:	b289      	uxth	r1, r1
    0x08, 0xca, 0xfe, 0xbe, 0xef, 0x12, 0x34, 0x56,
    0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7b, 0x94, 0x60, 0x0f };
  eth_send_raw_packet(raw_test_pkt, 68); //sizeof(reg_idx) + payload_len);
  */
}
 8001720:	b003      	add	sp, #12
 8001722:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
  eth_send_raw_packet(g_eth_udpbuf, sizeof(eth_udp_header_t) + payload_len);
 8001726:	f7ff bf51 	b.w	80015cc <eth_send_raw_packet>
 800172a:	bf00      	nop
 800172c:	20000960 	.word	0x20000960
 8001730:	2000098a 	.word	0x2000098a
 8001734:	0800a9a0 	.word	0x0800a9a0

08001738 <enet_send_udp_mcast>:
static uint8_t  g_eth_src_mac[6] = { 0xa4, 0xf3, 0xc1, 0x00, 0x01, 0x00 };
static uint32_t g_eth_src_ip = 0x0a636363; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
 8001738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800173a:	b087      	sub	sp, #28
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 800173c:	e88d 000e 	stmia.w	sp, {r1, r2, r3}

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
 8001740:	f3c0 4c07 	ubfx	ip, r0, #16, #8
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
 8001744:	f3c0 2e07 	ubfx	lr, r0, #8, #8
static uint8_t  g_eth_src_mac[6] = { 0xa4, 0xf3, 0xc1, 0x00, 0x01, 0x00 };
static uint32_t g_eth_src_ip = 0x0a636363; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
 8001748:	4604      	mov	r4, r0
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 800174a:	460a      	mov	r2, r1
static uint32_t g_eth_src_ip = 0x0a636363; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
 800174c:	2701      	movs	r7, #1
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 800174e:	4601      	mov	r1, r0
static uint32_t g_eth_src_ip = 0x0a636363; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
 8001750:	2600      	movs	r6, #0
 8001752:	255e      	movs	r5, #94	; 0x5e
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 8001754:	a804      	add	r0, sp, #16
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <enet_send_udp_mcast+0x40>)
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
 8001758:	f88d 4015 	strb.w	r4, [sp, #21]

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
 800175c:	f88d c013 	strb.w	ip, [sp, #19]
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
 8001760:	f88d e014 	strb.w	lr, [sp, #20]
static uint32_t g_eth_src_ip = 0x0a636363; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
 8001764:	f88d 7010 	strb.w	r7, [sp, #16]
 8001768:	f88d 6011 	strb.w	r6, [sp, #17]
 800176c:	f88d 5012 	strb.w	r5, [sp, #18]
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 8001770:	f7ff ff70 	bl	8001654 <enet_send_udp_ucast>
                      g_eth_src_ip, mcast_port,
                      payload, payload_len);
}
 8001774:	b007      	add	sp, #28
 8001776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001778:	0a636363 	.word	0x0a636363

0800177c <eth_dispatch_udp>:

bool eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
  const eth_udp_header_t *udp = (const eth_udp_header_t *)data;
  const uint16_t port = eth_htons(udp->dest_port);
  const uint16_t payload_len = eth_htons(udp->len) - 8;
 800177c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
}

bool eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
  const eth_udp_header_t *udp = (const eth_udp_header_t *)data;
  const uint16_t port = eth_htons(udp->dest_port);
 800177e:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 8001780:	ba5b      	rev16	r3, r3
  const uint16_t payload_len = eth_htons(udp->len) - 8;
 8001782:	3b08      	subs	r3, #8
  const uint8_t *payload = data + sizeof(eth_udp_header_t);
  //printf("  udp len: %d\r\n", udp_payload_len);
  if (payload_len > len - sizeof(eth_udp_header_t))
 8001784:	392a      	subs	r1, #42	; 0x2a

bool eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
  const eth_udp_header_t *udp = (const eth_udp_header_t *)data;
  const uint16_t port = eth_htons(udp->dest_port);
  const uint16_t payload_len = eth_htons(udp->len) - 8;
 8001786:	b29b      	uxth	r3, r3
 8001788:	ba52      	rev16	r2, r2
  const uint8_t *payload = data + sizeof(eth_udp_header_t);
  //printf("  udp len: %d\r\n", udp_payload_len);
  if (payload_len > len - sizeof(eth_udp_header_t))
 800178a:	428b      	cmp	r3, r1
 800178c:	b292      	uxth	r2, r2
 800178e:	d803      	bhi.n	8001798 <eth_dispatch_udp+0x1c>
  for (int i = 0; i < payload_len; i++)
  {
    printf("  %02d: %02x\r\n", i, payload[i]);
  }
  */
  if (port == 11333 && payload_len > 0)
 8001790:	f642 4145 	movw	r1, #11333	; 0x2c45
 8001794:	428a      	cmp	r2, r1
 8001796:	d001      	beq.n	800179c <eth_dispatch_udp+0x20>
  const uint16_t port = eth_htons(udp->dest_port);
  const uint16_t payload_len = eth_htons(udp->len) - 8;
  const uint8_t *payload = data + sizeof(eth_udp_header_t);
  //printf("  udp len: %d\r\n", udp_payload_len);
  if (payload_len > len - sizeof(eth_udp_header_t))
    return false; // ignore fragmented UDP packets.
 8001798:	2000      	movs	r0, #0
 800179a:	4770      	bx	lr
  for (int i = 0; i < payload_len; i++)
  {
    printf("  %02d: %02x\r\n", i, payload[i]);
  }
  */
  if (port == 11333 && payload_len > 0)
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0fb      	beq.n	8001798 <eth_dispatch_udp+0x1c>
    return eth_dispatch_udp(data, len);
  return false; // if we get here, we aren't smart enough to handle this packet
}

bool eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
 80017a0:	b530      	push	{r4, r5, lr}
    printf("  %02d: %02x\r\n", i, payload[i]);
  }
  */
  if (port == 11333 && payload_len > 0)
  {
    const uint8_t cmd = payload[0];
 80017a2:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
    //printf("  enet rx cmd = 0x%02x\r\n", cmd);
    if (cmd == 1 && payload_len >= 5)
 80017a6:	2a01      	cmp	r2, #1
    return eth_dispatch_udp(data, len);
  return false; // if we get here, we aren't smart enough to handle this packet
}

bool eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
 80017a8:	b083      	sub	sp, #12
  const eth_udp_header_t *udp = (const eth_udp_header_t *)data;
  const uint16_t port = eth_htons(udp->dest_port);
  const uint16_t payload_len = eth_htons(udp->len) - 8;
  const uint8_t *payload = data + sizeof(eth_udp_header_t);
 80017aa:	f100 042a 	add.w	r4, r0, #42	; 0x2a
  */
  if (port == 11333 && payload_len > 0)
  {
    const uint8_t cmd = payload[0];
    //printf("  enet rx cmd = 0x%02x\r\n", cmd);
    if (cmd == 1 && payload_len >= 5)
 80017ae:	d019      	beq.n	80017e4 <eth_dispatch_udp+0x68>
      for (int i = 0; i < NUM_DMXL; i++)
        dmxl_set_control_mode(i, (dmxl_control_mode_t)payload[1+i]);
      delay_ms(1); // be sure they control mode messages get through
      return true;
    }
    else if (cmd == 2 && payload_len >= 9)
 80017b0:	2a02      	cmp	r2, #2
 80017b2:	d002      	beq.n	80017ba <eth_dispatch_udp+0x3e>
  const uint16_t port = eth_htons(udp->dest_port);
  const uint16_t payload_len = eth_htons(udp->len) - 8;
  const uint8_t *payload = data + sizeof(eth_udp_header_t);
  //printf("  udp len: %d\r\n", udp_payload_len);
  if (payload_len > len - sizeof(eth_udp_header_t))
    return false; // ignore fragmented UDP packets.
 80017b4:	2000      	movs	r0, #0
      return true;
    }
  }
  // if we get here, we haven't handled this packet
  return false;
}
 80017b6:	b003      	add	sp, #12
 80017b8:	bd30      	pop	{r4, r5, pc}
      for (int i = 0; i < NUM_DMXL; i++)
        dmxl_set_control_mode(i, (dmxl_control_mode_t)payload[1+i]);
      delay_ms(1); // be sure they control mode messages get through
      return true;
    }
    else if (cmd == 2 && payload_len >= 9)
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d9fa      	bls.n	80017b4 <eth_dispatch_udp+0x38>
 80017be:	f100 0408 	add.w	r4, r0, #8
 80017c2:	466a      	mov	r2, sp
    {
      uint16_t targets[NUM_DMXL];
      for (int i = 0; i < NUM_DMXL; i++)
        targets[i] = (payload[1+2*i] << 8) | payload[2+2*i];
 80017c4:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 80017c8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80017cc:	3002      	adds	r0, #2
 80017ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      return true;
    }
    else if (cmd == 2 && payload_len >= 9)
    {
      uint16_t targets[NUM_DMXL];
      for (int i = 0; i < NUM_DMXL; i++)
 80017d2:	42a0      	cmp	r0, r4
        targets[i] = (payload[1+2*i] << 8) | payload[2+2*i];
 80017d4:	f822 3b02 	strh.w	r3, [r2], #2
      return true;
    }
    else if (cmd == 2 && payload_len >= 9)
    {
      uint16_t targets[NUM_DMXL];
      for (int i = 0; i < NUM_DMXL; i++)
 80017d8:	d1f4      	bne.n	80017c4 <eth_dispatch_udp+0x48>
      */
      /*
      for (int i = 0; i < NUM_DMXL; i++)
        dmxl_set_control_target(i, targets[i]);
      */
      dmxl_set_all_control_targets(targets);
 80017da:	4668      	mov	r0, sp
 80017dc:	f000 fda8 	bl	8002330 <dmxl_set_all_control_targets>
      //dmxl_set_control_target(0, targets[0]); // debugging... just do #0
      return true;
 80017e0:	2001      	movs	r0, #1
 80017e2:	e7e8      	b.n	80017b6 <eth_dispatch_udp+0x3a>
  */
  if (port == 11333 && payload_len > 0)
  {
    const uint8_t cmd = payload[0];
    //printf("  enet rx cmd = 0x%02x\r\n", cmd);
    if (cmd == 1 && payload_len >= 5)
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d9e5      	bls.n	80017b4 <eth_dispatch_udp+0x38>
 80017e8:	2500      	movs	r5, #0
      /*
      printf("    modes: %d %d %d %d\r\n",
             payload[1], payload[2], payload[3], payload[4]);
      */
      for (int i = 0; i < NUM_DMXL; i++)
        dmxl_set_control_mode(i, (dmxl_control_mode_t)payload[1+i]);
 80017ea:	b2e8      	uxtb	r0, r5
 80017ec:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80017f0:	3501      	adds	r5, #1
 80017f2:	f000 fd0d 	bl	8002210 <dmxl_set_control_mode>
    {
      /*
      printf("    modes: %d %d %d %d\r\n",
             payload[1], payload[2], payload[3], payload[4]);
      */
      for (int i = 0; i < NUM_DMXL; i++)
 80017f6:	2d04      	cmp	r5, #4
 80017f8:	d1f7      	bne.n	80017ea <eth_dispatch_udp+0x6e>
        dmxl_set_control_mode(i, (dmxl_control_mode_t)payload[1+i]);
      delay_ms(1); // be sure they control mode messages get through
 80017fa:	2001      	movs	r0, #1
 80017fc:	f002 f860 	bl	80038c0 <delay_ms>
      return true;
 8001800:	2001      	movs	r0, #1
 8001802:	e7d8      	b.n	80017b6 <eth_dispatch_udp+0x3a>

08001804 <eth_dispatch_ip>:
}

bool eth_dispatch_ip(const uint8_t *data, const uint16_t len)
{
  const eth_ip_header_t *ip = (const eth_ip_header_t *)data;
  if (ip->version != 4) // we only handle ipv4 (for now...)
 8001804:	7b83      	ldrb	r3, [r0, #14]
 8001806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800180a:	2b40      	cmp	r3, #64	; 0x40
 800180c:	d001      	beq.n	8001812 <eth_dispatch_ip+0xe>
    if (ip->source_addr != eth_htonl(g_eth_src_ip))
      return false;
  if (ip->proto == ETH_IP_PROTO_UDP)
    return eth_dispatch_udp(data, len);
  return false; // if we get here, we aren't smart enough to handle this packet
}
 800180e:	2000      	movs	r0, #0
 8001810:	4770      	bx	lr
{
  const eth_ip_header_t *ip = (const eth_ip_header_t *)data;
  if (ip->version != 4) // we only handle ipv4 (for now...)
    return false;
  // if it's unicast, verify our IP address, otherwise ignore the packet
  if (ip->eth.dest_addr[0] == g_eth_src_mac[0])
 8001812:	7803      	ldrb	r3, [r0, #0]
 8001814:	2ba4      	cmp	r3, #164	; 0xa4
 8001816:	d004      	beq.n	8001822 <eth_dispatch_ip+0x1e>
    if (ip->source_addr != eth_htonl(g_eth_src_ip))
      return false;
  if (ip->proto == ETH_IP_PROTO_UDP)
 8001818:	7dc3      	ldrb	r3, [r0, #23]
 800181a:	2b11      	cmp	r3, #17
 800181c:	d1f7      	bne.n	800180e <eth_dispatch_ip+0xa>
    return eth_dispatch_udp(data, len);
 800181e:	f7ff bfad 	b.w	800177c <eth_dispatch_udp>
  const eth_ip_header_t *ip = (const eth_ip_header_t *)data;
  if (ip->version != 4) // we only handle ipv4 (for now...)
    return false;
  // if it's unicast, verify our IP address, otherwise ignore the packet
  if (ip->eth.dest_addr[0] == g_eth_src_mac[0])
    if (ip->source_addr != eth_htonl(g_eth_src_ip))
 8001822:	f8d0 201a 	ldr.w	r2, [r0, #26]
 8001826:	4b02      	ldr	r3, [pc, #8]	; (8001830 <eth_dispatch_ip+0x2c>)
 8001828:	429a      	cmp	r2, r3
 800182a:	d1f0      	bne.n	800180e <eth_dispatch_ip+0xa>
 800182c:	e7f4      	b.n	8001818 <eth_dispatch_ip+0x14>
 800182e:	bf00      	nop
 8001830:	6363630a 	.word	0x6363630a

08001834 <eth_dispatch_eth>:

bool eth_dispatch_eth(const uint8_t *data, const uint16_t len)
{
  // dispatch according to protocol
  const eth_eth_header_t *e = (const eth_eth_header_t *)data;
  switch (eth_htons(e->ethertype))
 8001834:	8983      	ldrh	r3, [r0, #12]
 8001836:	ba5b      	rev16	r3, r3
 8001838:	b29b      	uxth	r3, r3
 800183a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800183e:	d001      	beq.n	8001844 <eth_dispatch_eth+0x10>
    case ETH_ETHERTYPE_IP:
      return eth_dispatch_ip(data, len);
    default:
      return false;
  }
}
 8001840:	2000      	movs	r0, #0
 8001842:	4770      	bx	lr
  // dispatch according to protocol
  const eth_eth_header_t *e = (const eth_eth_header_t *)data;
  switch (eth_htons(e->ethertype))
  {
    case ETH_ETHERTYPE_IP:
      return eth_dispatch_ip(data, len);
 8001844:	f7ff bfde 	b.w	8001804 <eth_dispatch_ip>

08001848 <enetRX>:
  eth_send_raw_packet(raw_test_pkt, 68); //sizeof(reg_idx) + payload_len);
  */
}

uint_fast8_t enetRX()
{
 8001848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800184c:	f8df a094 	ldr.w	sl, [pc, #148]	; 80018e4 <enetRX+0x9c>
 8001850:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80018e8 <enetRX+0xa0>
  uint_fast8_t num_pkts_rx = 0;
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
  {
    const uint16_t rp = g_eth_rxpool_ptrs_rpos;
    const uint8_t *start = (const uint8_t *)g_eth_rxpool_start[rp];
 8001854:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80018ec <enetRX+0xa4>
}

uint_fast8_t enetRX()
{
  uint_fast8_t num_pkts_rx = 0;
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
 8001858:	4657      	mov	r7, sl
  */
}

uint_fast8_t enetRX()
{
  uint_fast8_t num_pkts_rx = 0;
 800185a:	f04f 0b00 	mov.w	fp, #0
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
 800185e:	f8b8 2000 	ldrh.w	r2, [r8]
 8001862:	f8ba 3000 	ldrh.w	r3, [sl]
 8001866:	b292      	uxth	r2, r2
 8001868:	b29b      	uxth	r3, r3
 800186a:	429a      	cmp	r2, r3
 800186c:	d033      	beq.n	80018d6 <enetRX+0x8e>
  {
    const uint16_t rp = g_eth_rxpool_ptrs_rpos;
 800186e:	883b      	ldrh	r3, [r7, #0]
    const uint8_t *start = (const uint8_t *)g_eth_rxpool_start[rp];
    const uint16_t len = g_eth_rxpool_len[rp];
 8001870:	4a1a      	ldr	r2, [pc, #104]	; (80018dc <enetRX+0x94>)
 8001872:	4e1b      	ldr	r6, [pc, #108]	; (80018e0 <enetRX+0x98>)
uint_fast8_t enetRX()
{
  uint_fast8_t num_pkts_rx = 0;
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
  {
    const uint16_t rp = g_eth_rxpool_ptrs_rpos;
 8001874:	b29b      	uxth	r3, r3
    const uint8_t *start = (const uint8_t *)g_eth_rxpool_start[rp];
    const uint16_t len = g_eth_rxpool_len[rp];
    const eth_eth_header_t *e = (const eth_eth_header_t *)start;
    uint8_t unicast_match = 1;
    uint8_t multicast_match = 1;
    uint8_t broadcast_match = 1;
 8001876:	2401      	movs	r4, #1
{
  uint_fast8_t num_pkts_rx = 0;
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
  {
    const uint16_t rp = g_eth_rxpool_ptrs_rpos;
    const uint8_t *start = (const uint8_t *)g_eth_rxpool_start[rp];
 8001878:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
    const uint16_t len = g_eth_rxpool_len[rp];
 800187c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001880:	f100 0c05 	add.w	ip, r0, #5
 8001884:	1e43      	subs	r3, r0, #1
 8001886:	b289      	uxth	r1, r1
    const eth_eth_header_t *e = (const eth_eth_header_t *)start;
    uint8_t unicast_match = 1;
 8001888:	4625      	mov	r5, r4
           e->dest_addr[0], e->dest_addr[1], e->dest_addr[2],
           e->dest_addr[3], e->dest_addr[4], e->dest_addr[5]);
    */
    for (int i = 0; i < 6; i++)
    {
      if (e->dest_addr[i] != g_eth_src_mac[i])
 800188a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800188e:	f816 eb01 	ldrb.w	lr, [r6], #1
        unicast_match = 0;
 8001892:	4572      	cmp	r2, lr
 8001894:	bf18      	it	ne
 8001896:	2500      	movne	r5, #0
      if (e->dest_addr[i] != 0xff)
        broadcast_match = 0;
 8001898:	2aff      	cmp	r2, #255	; 0xff
 800189a:	bf18      	it	ne
 800189c:	2400      	movne	r4, #0
    /*
    printf("rx mac: %02x:%02x:%02x:%02x:%02x:%02x\r\n",
           e->dest_addr[0], e->dest_addr[1], e->dest_addr[2],
           e->dest_addr[3], e->dest_addr[4], e->dest_addr[5]);
    */
    for (int i = 0; i < 6; i++)
 800189e:	4563      	cmp	r3, ip
 80018a0:	d1f3      	bne.n	800188a <enetRX+0x42>
      if (e->dest_addr[i] != g_eth_src_mac[i])
        unicast_match = 0;
      if (e->dest_addr[i] != 0xff)
        broadcast_match = 0;
    }
    if (e->dest_addr[0] != 0x01 || e->dest_addr[1] != 0x00 || e->dest_addr[2] != 0x5e)
 80018a2:	7803      	ldrb	r3, [r0, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d00f      	beq.n	80018c8 <enetRX+0x80>
      multicast_match = 0;
    //printf("  ucast_match = %d, bcast_match = %d, mcast_match = %d\r\n",
    //       unicast_match, broadcast_match, multicast_match);
    //printf("dispatch @ %8u\r\n", (unsigned)SYSTIME);
    if (unicast_match || multicast_match || broadcast_match)
 80018a8:	b905      	cbnz	r5, 80018ac <enetRX+0x64>
 80018aa:	b114      	cbz	r4, 80018b2 <enetRX+0x6a>
      num_pkts_rx += eth_dispatch_eth(start, len) ? 1 : 0;
 80018ac:	f7ff ffc2 	bl	8001834 <eth_dispatch_eth>
 80018b0:	4483      	add	fp, r0
    if (++g_eth_rxpool_ptrs_rpos >= ETH_RAM_RXPOOL_NPTR)
 80018b2:	f8ba 3000 	ldrh.w	r3, [sl]
 80018b6:	3301      	adds	r3, #1
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	2b7f      	cmp	r3, #127	; 0x7f
 80018bc:	f8aa 3000 	strh.w	r3, [sl]
      g_eth_rxpool_ptrs_rpos = 0;
 80018c0:	bf84      	itt	hi
 80018c2:	2300      	movhi	r3, #0
 80018c4:	803b      	strhhi	r3, [r7, #0]
 80018c6:	e7ca      	b.n	800185e <enetRX+0x16>
      if (e->dest_addr[i] != g_eth_src_mac[i])
        unicast_match = 0;
      if (e->dest_addr[i] != 0xff)
        broadcast_match = 0;
    }
    if (e->dest_addr[0] != 0x01 || e->dest_addr[1] != 0x00 || e->dest_addr[2] != 0x5e)
 80018c8:	7843      	ldrb	r3, [r0, #1]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1ec      	bne.n	80018a8 <enetRX+0x60>
 80018ce:	7883      	ldrb	r3, [r0, #2]
 80018d0:	2b5e      	cmp	r3, #94	; 0x5e
 80018d2:	d1e9      	bne.n	80018a8 <enetRX+0x60>
 80018d4:	e7ea      	b.n	80018ac <enetRX+0x64>
      num_pkts_rx += eth_dispatch_eth(start, len) ? 1 : 0;
    if (++g_eth_rxpool_ptrs_rpos >= ETH_RAM_RXPOOL_NPTR)
      g_eth_rxpool_ptrs_rpos = 0;
  }
  return num_pkts_rx;
}
 80018d6:	4658      	mov	r0, fp
 80018d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018dc:	20008f80 	.word	0x20008f80
 80018e0:	0800a9a0 	.word	0x0800a9a0
 80018e4:	20008f7e 	.word	0x20008f7e
 80018e8:	20008f7c 	.word	0x20008f7c
 80018ec:	20009084 	.word	0x20009084

080018f0 <enetTX>:

// todo: be smarter about multicast group choice
#define MCAST_IP 0xe000007c

void enetTX()
{
 80018f0:	b510      	push	{r4, lr}
  volatile state_t tx_state = g_state; // make a local copy to ensure coherence
 80018f2:	24ca      	movs	r4, #202	; 0xca

// todo: be smarter about multicast group choice
#define MCAST_IP 0xe000007c

void enetTX()
{
 80018f4:	b0b4      	sub	sp, #208	; 0xd0
  volatile state_t tx_state = g_state; // make a local copy to ensure coherence
 80018f6:	4622      	mov	r2, r4
 80018f8:	a801      	add	r0, sp, #4
 80018fa:	4906      	ldr	r1, [pc, #24]	; (8001914 <enetTX+0x24>)
 80018fc:	f002 f8b4 	bl	8003a68 <memcpy>
  enet_send_udp_mcast(MCAST_IP, 11333, (uint8_t *)&tx_state, sizeof(tx_state));
 8001900:	aa01      	add	r2, sp, #4
 8001902:	4623      	mov	r3, r4
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <enetTX+0x28>)
 8001906:	f642 4145 	movw	r1, #11333	; 0x2c45
 800190a:	f7ff ff15 	bl	8001738 <enet_send_udp_mcast>
}
 800190e:	b034      	add	sp, #208	; 0xd0
 8001910:	bd10      	pop	{r4, pc}
 8001912:	bf00      	nop
 8001914:	20010580 	.word	0x20010580
 8001918:	e000007c 	.word	0xe000007c

0800191c <ethernetService>:

void ethernetService(void)
{
 800191c:	b508      	push	{r3, lr}
  if (enet_get_link_status() == ENET_LINK_UP)
 800191e:	f7ff fe29 	bl	8001574 <enet_get_link_status>
 8001922:	2801      	cmp	r0, #1
  {
    err_unset(ERR_NO_ETHERNET);
 8001924:	f04f 0000 	mov.w	r0, #0
  enet_send_udp_mcast(MCAST_IP, 11333, (uint8_t *)&tx_state, sizeof(tx_state));
}

void ethernetService(void)
{
  if (enet_get_link_status() == ENET_LINK_UP)
 8001928:	d005      	beq.n	8001936 <ethernetService+0x1a>
    err_unset(ERR_NO_ETHERNET);
    enetTX();
  }
  else
  {
    err_set(ERR_NO_ETHERNET);
 800192a:	f002 f859 	bl	80039e0 <err_set>
  }
  enetRX();
 800192e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }
  else
  {
    err_set(ERR_NO_ETHERNET);
  }
  enetRX();
 8001932:	f7ff bf89 	b.w	8001848 <enetRX>

void ethernetService(void)
{
  if (enet_get_link_status() == ENET_LINK_UP)
  {
    err_unset(ERR_NO_ETHERNET);
 8001936:	f002 f859 	bl	80039ec <err_unset>
    enetTX();
 800193a:	f7ff ffd9 	bl	80018f0 <enetTX>
  else
  {
    err_set(ERR_NO_ETHERNET);
  }
  enetRX();
 800193e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }
  else
  {
    err_set(ERR_NO_ETHERNET);
  }
  enetRX();
 8001942:	f7ff bf81 	b.w	8001848 <enetRX>
 8001946:	bf00      	nop

08001948 <systime_init>:
#include "./stm32/stm32f4xx.h"

void systime_init()
{
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001948:	4a0f      	ldr	r2, [pc, #60]	; (8001988 <systime_init+0x40>)
 800194a:	6c13      	ldr	r3, [r2, #64]	; 0x40
#include "systime.h"
#include "./stm32/stm32f4xx.h"

void systime_init()
{
 800194c:	b082      	sub	sp, #8
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800194e:	f043 0301 	orr.w	r3, r3, #1
  for (volatile int i = 0; i < 1000; i++) { } // let tim2 spin up
 8001952:	2100      	movs	r1, #0
#include "./stm32/stm32f4xx.h"

void systime_init()
{
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
  for (volatile int i = 0; i < 1000; i++) { } // let tim2 spin up
 8001956:	9101      	str	r1, [sp, #4]
 8001958:	9b01      	ldr	r3, [sp, #4]
 800195a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800195e:	da06      	bge.n	800196e <systime_init+0x26>
 8001960:	9b01      	ldr	r3, [sp, #4]
 8001962:	3301      	adds	r3, #1
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	9b01      	ldr	r3, [sp, #4]
 8001968:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800196c:	dbf8      	blt.n	8001960 <systime_init+0x18>
  TIM2->PSC = 168000000 / 2 / 1000000 - 1; // 83
 800196e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  TIM2->ARR = 0xffffffff; // count as long as possible
  TIM2->EGR = TIM_EGR_UG; // load the PSC register immediately
 8001972:	2201      	movs	r2, #1
void systime_init()
{
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
  for (volatile int i = 0; i < 1000; i++) { } // let tim2 spin up
  TIM2->PSC = 168000000 / 2 / 1000000 - 1; // 83
 8001974:	2053      	movs	r0, #83	; 0x53
  TIM2->ARR = 0xffffffff; // count as long as possible
 8001976:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
void systime_init()
{
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
  for (volatile int i = 0; i < 1000; i++) { } // let tim2 spin up
  TIM2->PSC = 168000000 / 2 / 1000000 - 1; // 83
 800197a:	8518      	strh	r0, [r3, #40]	; 0x28
  TIM2->ARR = 0xffffffff; // count as long as possible
 800197c:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIM2->EGR = TIM_EGR_UG; // load the PSC register immediately
 800197e:	829a      	strh	r2, [r3, #20]
  TIM2->CR1 = TIM_CR1_CEN; // start counter
 8001980:	801a      	strh	r2, [r3, #0]
}
 8001982:	b002      	add	sp, #8
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800

0800198c <dmxl_tx.part.1>:
      dmxl_set_usart_baud(i, 250000);
    }
  }
}

static void dmxl_tx(const uint8_t port_idx,
 800198c:	b5f0      	push	{r4, r5, r6, r7, lr}
                    const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
    return; // bogus port index
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
  USART_TypeDef *u = dp->uart;
 800198e:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <dmxl_tx.part.1+0x88>)
 8001990:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001994:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
 8001998:	2700      	movs	r7, #0
                    const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
    return; // bogus port index
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
  USART_TypeDef *u = dp->uart;
 800199a:	68d8      	ldr	r0, [r3, #12]
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
 800199c:	8983      	ldrh	r3, [r0, #12]
 800199e:	f023 0304 	bic.w	r3, r3, #4
 80019a2:	041b      	lsls	r3, r3, #16
 80019a4:	0c1b      	lsrs	r3, r3, #16
 80019a6:	8183      	strh	r3, [r0, #12]
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
 80019a8:	8983      	ldrh	r3, [r0, #12]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	f043 0308 	orr.w	r3, r3, #8
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
 80019b0:	3202      	adds	r2, #2
  if (port_idx >= NUM_DMXL)
    return; // bogus port index
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
  USART_TypeDef *u = dp->uart;
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
 80019b2:	8183      	strh	r3, [r0, #12]
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
 80019b4:	463e      	mov	r6, r7
 80019b6:	463c      	mov	r4, r7
  {
    while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
    if (i <= 1)
      u->DR = 0xff; // preamble
 80019b8:	f04f 0eff 	mov.w	lr, #255	; 0xff
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
  {
    while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
 80019bc:	8803      	ldrh	r3, [r0, #0]
 80019be:	061d      	lsls	r5, r3, #24
 80019c0:	d5fc      	bpl.n	80019bc <dmxl_tx.part.1+0x30>
    if (i <= 1)
 80019c2:	2c01      	cmp	r4, #1
      // send checksum
      u->DR = ~csum;
    }
    else
    {
      u->DR = payload[i-2]; // send payload byte
 80019c4:	f1a4 0502 	sub.w	r5, r4, #2
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
  {
    while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
    if (i <= 1)
 80019c8:	d91a      	bls.n	8001a00 <dmxl_tx.part.1+0x74>
      u->DR = 0xff; // preamble
    else if (i == payload_len + 2)
 80019ca:	42b2      	cmp	r2, r6
 80019cc:	d01b      	beq.n	8001a06 <dmxl_tx.part.1+0x7a>
      // send checksum
      u->DR = ~csum;
    }
    else
    {
      u->DR = payload[i-2]; // send payload byte
 80019ce:	5d4b      	ldrb	r3, [r1, r5]
 80019d0:	8083      	strh	r3, [r0, #4]
      csum += payload[i-2];
 80019d2:	5d4d      	ldrb	r5, [r1, r5]
 80019d4:	197b      	adds	r3, r7, r5
 80019d6:	b2df      	uxtb	r7, r3
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
  USART_TypeDef *u = dp->uart;
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
 80019d8:	3401      	adds	r4, #1
 80019da:	b2e4      	uxtb	r4, r4
 80019dc:	4294      	cmp	r4, r2
 80019de:	4626      	mov	r6, r4
 80019e0:	ddec      	ble.n	80019bc <dmxl_tx.part.1+0x30>
    {
      u->DR = payload[i-2]; // send payload byte
      csum += payload[i-2];
    }
  }
  while (!(u->SR & USART_SR_TC)) { } // wait for TX to finish
 80019e2:	8803      	ldrh	r3, [r0, #0]
 80019e4:	065b      	lsls	r3, r3, #25
 80019e6:	d5fc      	bpl.n	80019e2 <dmxl_tx.part.1+0x56>
  u->CR1 &= ~USART_CR1_TE; // disable the transmitter
 80019e8:	8983      	ldrh	r3, [r0, #12]
 80019ea:	f023 0308 	bic.w	r3, r3, #8
 80019ee:	041b      	lsls	r3, r3, #16
 80019f0:	0c1b      	lsrs	r3, r3, #16
 80019f2:	8183      	strh	r3, [r0, #12]
  u->CR1 |=  USART_CR1_RE; // re-enable the receiver
 80019f4:	8983      	ldrh	r3, [r0, #12]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	8183      	strh	r3, [r0, #12]
 80019fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
  {
    while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
    if (i <= 1)
      u->DR = 0xff; // preamble
 8001a00:	f8a0 e004 	strh.w	lr, [r0, #4]
 8001a04:	e7e8      	b.n	80019d8 <dmxl_tx.part.1+0x4c>
    else if (i == payload_len + 2)
    {
      // send checksum
      u->DR = ~csum;
 8001a06:	f487 437f 	eor.w	r3, r7, #65280	; 0xff00
 8001a0a:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8001a0e:	8083      	strh	r3, [r0, #4]
 8001a10:	e7e2      	b.n	80019d8 <dmxl_tx.part.1+0x4c>
 8001a12:	bf00      	nop
 8001a14:	2000000c 	.word	0x2000000c

08001a18 <dmxl_write_data>:
}

static void dmxl_write_data(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t data_len, const uint8_t start_addr,
                            const uint8_t *data)
{
 8001a18:	b530      	push	{r4, r5, lr}
 8001a1a:	b0c1      	sub	sp, #260	; 0x104
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = data_len + 3;
 8001a1c:	1cd5      	adds	r5, r2, #3
  pkt[2] = 3; // instruction: "write data"
 8001a1e:	2403      	movs	r4, #3
                            const uint8_t data_len, const uint8_t start_addr,
                            const uint8_t *data)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = data_len + 3;
 8001a20:	f88d 5001 	strb.w	r5, [sp, #1]
static void dmxl_write_data(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t data_len, const uint8_t start_addr,
                            const uint8_t *data)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
 8001a24:	f88d 1000 	strb.w	r1, [sp]
  pkt[1] = data_len + 3;
  pkt[2] = 3; // instruction: "write data"
  pkt[3] = start_addr;
 8001a28:	f88d 3003 	strb.w	r3, [sp, #3]
                            const uint8_t *data)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = data_len + 3;
  pkt[2] = 3; // instruction: "write data"
 8001a2c:	f88d 4002 	strb.w	r4, [sp, #2]
  pkt[3] = start_addr;
  for (int i = 0; i < data_len; i++)
 8001a30:	b152      	cbz	r2, 8001a48 <dmxl_write_data+0x30>
 8001a32:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8001a34:	446d      	add	r5, sp
 8001a36:	1e59      	subs	r1, r3, #1
 8001a38:	f10d 0303 	add.w	r3, sp, #3
    pkt[4+i] = data[i];
 8001a3c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8001a40:	f803 4f01 	strb.w	r4, [r3, #1]!
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = data_len + 3;
  pkt[2] = 3; // instruction: "write data"
  pkt[3] = start_addr;
  for (int i = 0; i < data_len; i++)
 8001a44:	42ab      	cmp	r3, r5
 8001a46:	d1f9      	bne.n	8001a3c <dmxl_write_data+0x24>
}

static void dmxl_tx(const uint8_t port_idx,
                    const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
 8001a48:	2803      	cmp	r0, #3
 8001a4a:	d804      	bhi.n	8001a56 <dmxl_write_data+0x3e>
  pkt[1] = data_len + 3;
  pkt[2] = 3; // instruction: "write data"
  pkt[3] = start_addr;
  for (int i = 0; i < data_len; i++)
    pkt[4+i] = data[i];
  dmxl_tx(port_idx, pkt, data_len + 4);
 8001a4c:	3204      	adds	r2, #4
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	4669      	mov	r1, sp
 8001a52:	f7ff ff9b 	bl	800198c <dmxl_tx.part.1>
}
 8001a56:	b041      	add	sp, #260	; 0x104
 8001a58:	bd30      	pop	{r4, r5, pc}
 8001a5a:	bf00      	nop

08001a5c <dmxl_read_data.constprop.3>:

static void dmxl_read_data(const uint8_t port_idx, const uint8_t dmxl_id,
 8001a5c:	b530      	push	{r4, r5, lr}
 8001a5e:	b0c1      	sub	sp, #260	; 0x104
                           const uint8_t data_len, const uint8_t start_addr)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
 8001a60:	2501      	movs	r5, #1
  pkt[1] = 4; // this packet's "length" is 4
 8001a62:	2404      	movs	r4, #4
  pkt[2] = 2; // instruction: "read data"
 8001a64:	2302      	movs	r3, #2
}

static void dmxl_tx(const uint8_t port_idx,
                    const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
 8001a66:	2803      	cmp	r0, #3
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = 4; // this packet's "length" is 4
  pkt[2] = 2; // instruction: "read data"
  pkt[3] = start_addr;
 8001a68:	f88d 2003 	strb.w	r2, [sp, #3]
  pkt[4] = data_len;
 8001a6c:	f88d 1004 	strb.w	r1, [sp, #4]

static void dmxl_read_data(const uint8_t port_idx, const uint8_t dmxl_id,
                           const uint8_t data_len, const uint8_t start_addr)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
 8001a70:	f88d 5000 	strb.w	r5, [sp]
  pkt[1] = 4; // this packet's "length" is 4
 8001a74:	f88d 4001 	strb.w	r4, [sp, #1]
  pkt[2] = 2; // instruction: "read data"
 8001a78:	f88d 3002 	strb.w	r3, [sp, #2]
}

static void dmxl_tx(const uint8_t port_idx,
                    const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
 8001a7c:	d803      	bhi.n	8001a86 <dmxl_read_data.constprop.3+0x2a>
 8001a7e:	4669      	mov	r1, sp
 8001a80:	2205      	movs	r2, #5
 8001a82:	f7ff ff83 	bl	800198c <dmxl_tx.part.1>
  pkt[1] = 4; // this packet's "length" is 4
  pkt[2] = 2; // instruction: "read data"
  pkt[3] = start_addr;
  pkt[4] = data_len;
  dmxl_tx(port_idx, pkt, 5);
}
 8001a86:	b041      	add	sp, #260	; 0x104
 8001a88:	bd30      	pop	{r4, r5, pc}
 8001a8a:	bf00      	nop

08001a8c <usart3_vector>:
    g_dmxl_ring_wpos[dmxl_port] = 0;
}

void usart3_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
 8001a8c:	490b      	ldr	r1, [pc, #44]	; (8001abc <usart3_vector+0x30>)
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001a8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <usart3_vector+0x34>)
    g_dmxl_ring_wpos[dmxl_port] = 0;
}

void usart3_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
 8001a90:	880b      	ldrh	r3, [r1, #0]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001a92:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <usart3_vector+0x38>)
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
    g_dmxl_ring_wpos[dmxl_port] = 0;
}

void usart3_vector()
{
 8001a94:	b082      	sub	sp, #8
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	f88d 3007 	strb.w	r3, [sp, #7]
  dmxl_push_byte(0, USART3->DR);
 8001a9c:	8889      	ldrh	r1, [r1, #4]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001a9e:	8813      	ldrh	r3, [r2, #0]
 8001aa0:	b29b      	uxth	r3, r3
}

void usart3_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
  dmxl_push_byte(0, USART3->DR);
 8001aa2:	b2c9      	uxtb	r1, r1
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001aa4:	54c1      	strb	r1, [r0, r3]
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
 8001aa6:	8813      	ldrh	r3, [r2, #0]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	2bff      	cmp	r3, #255	; 0xff
 8001aae:	8013      	strh	r3, [r2, #0]
    g_dmxl_ring_wpos[dmxl_port] = 0;
 8001ab0:	bf84      	itt	hi
 8001ab2:	2300      	movhi	r3, #0
 8001ab4:	8013      	strhhi	r3, [r2, #0]

void usart3_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
  dmxl_push_byte(0, USART3->DR);
}
 8001ab6:	b002      	add	sp, #8
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40004800 	.word	0x40004800
 8001ac0:	2000f384 	.word	0x2000f384
 8001ac4:	2000fbdc 	.word	0x2000fbdc

08001ac8 <uart4_vector>:

void uart4_vector()
{
 8001ac8:	b410      	push	{r4}
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
 8001aca:	480d      	ldr	r0, [pc, #52]	; (8001b00 <uart4_vector+0x38>)
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001acc:	4a0d      	ldr	r2, [pc, #52]	; (8001b04 <uart4_vector+0x3c>)
  dmxl_push_byte(0, USART3->DR);
}

void uart4_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
 8001ace:	8801      	ldrh	r1, [r0, #0]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001ad0:	4c0d      	ldr	r4, [pc, #52]	; (8001b08 <uart4_vector+0x40>)
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
  dmxl_push_byte(0, USART3->DR);
}

void uart4_vector()
{
 8001ad2:	b083      	sub	sp, #12
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
 8001ad4:	b2c9      	uxtb	r1, r1
 8001ad6:	f88d 1007 	strb.w	r1, [sp, #7]
  dmxl_push_byte(1, UART4->DR);
 8001ada:	8881      	ldrh	r1, [r0, #4]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001adc:	8853      	ldrh	r3, [r2, #2]
 8001ade:	fa14 f383 	uxtah	r3, r4, r3
}

void uart4_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
  dmxl_push_byte(1, UART4->DR);
 8001ae2:	b2c9      	uxtb	r1, r1
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001ae4:	f883 1100 	strb.w	r1, [r3, #256]	; 0x100
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
 8001ae8:	8853      	ldrh	r3, [r2, #2]
 8001aea:	3301      	adds	r3, #1
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	2bff      	cmp	r3, #255	; 0xff
 8001af0:	8053      	strh	r3, [r2, #2]
    g_dmxl_ring_wpos[dmxl_port] = 0;
 8001af2:	bf84      	itt	hi
 8001af4:	2300      	movhi	r3, #0
 8001af6:	8053      	strhhi	r3, [r2, #2]

void uart4_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
  dmxl_push_byte(1, UART4->DR);
}
 8001af8:	b003      	add	sp, #12
 8001afa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40004c00 	.word	0x40004c00
 8001b04:	2000f384 	.word	0x2000f384
 8001b08:	2000fbdc 	.word	0x2000fbdc

08001b0c <uart5_vector>:

void uart5_vector()
{
 8001b0c:	b410      	push	{r4}
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
 8001b0e:	480d      	ldr	r0, [pc, #52]	; (8001b44 <uart5_vector+0x38>)
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001b10:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <uart5_vector+0x3c>)
  dmxl_push_byte(1, UART4->DR);
}

void uart5_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
 8001b12:	8801      	ldrh	r1, [r0, #0]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001b14:	4c0d      	ldr	r4, [pc, #52]	; (8001b4c <uart5_vector+0x40>)
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
  dmxl_push_byte(1, UART4->DR);
}

void uart5_vector()
{
 8001b16:	b083      	sub	sp, #12
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
 8001b18:	b2c9      	uxtb	r1, r1
 8001b1a:	f88d 1007 	strb.w	r1, [sp, #7]
  dmxl_push_byte(3, UART5->DR);
 8001b1e:	8881      	ldrh	r1, [r0, #4]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001b20:	88d3      	ldrh	r3, [r2, #6]
 8001b22:	fa14 f383 	uxtah	r3, r4, r3
}

void uart5_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
  dmxl_push_byte(3, UART5->DR);
 8001b26:	b2c9      	uxtb	r1, r1
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001b28:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
 8001b2c:	88d3      	ldrh	r3, [r2, #6]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2bff      	cmp	r3, #255	; 0xff
 8001b34:	80d3      	strh	r3, [r2, #6]
    g_dmxl_ring_wpos[dmxl_port] = 0;
 8001b36:	bf84      	itt	hi
 8001b38:	2300      	movhi	r3, #0
 8001b3a:	80d3      	strhhi	r3, [r2, #6]

void uart5_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
  dmxl_push_byte(3, UART5->DR);
}
 8001b3c:	b003      	add	sp, #12
 8001b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	40005000 	.word	0x40005000
 8001b48:	2000f384 	.word	0x2000f384
 8001b4c:	2000fbdc 	.word	0x2000fbdc

08001b50 <usart6_vector>:

void usart6_vector()
{
 8001b50:	b410      	push	{r4}
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
 8001b52:	480d      	ldr	r0, [pc, #52]	; (8001b88 <usart6_vector+0x38>)
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <usart6_vector+0x3c>)
  dmxl_push_byte(3, UART5->DR);
}

void usart6_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
 8001b56:	8801      	ldrh	r1, [r0, #0]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001b58:	4c0d      	ldr	r4, [pc, #52]	; (8001b90 <usart6_vector+0x40>)
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
  dmxl_push_byte(3, UART5->DR);
}

void usart6_vector()
{
 8001b5a:	b083      	sub	sp, #12
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
 8001b5c:	b2c9      	uxtb	r1, r1
 8001b5e:	f88d 1007 	strb.w	r1, [sp, #7]
  dmxl_push_byte(2, USART6->DR);
 8001b62:	8881      	ldrh	r1, [r0, #4]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001b64:	8893      	ldrh	r3, [r2, #4]
 8001b66:	fa14 f383 	uxtah	r3, r4, r3
}

void usart6_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
  dmxl_push_byte(2, USART6->DR);
 8001b6a:	b2c9      	uxtb	r1, r1
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001b6c:	f883 1200 	strb.w	r1, [r3, #512]	; 0x200
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
 8001b70:	8893      	ldrh	r3, [r2, #4]
 8001b72:	3301      	adds	r3, #1
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2bff      	cmp	r3, #255	; 0xff
 8001b78:	8093      	strh	r3, [r2, #4]
    g_dmxl_ring_wpos[dmxl_port] = 0;
 8001b7a:	bf84      	itt	hi
 8001b7c:	2300      	movhi	r3, #0
 8001b7e:	8093      	strhhi	r3, [r2, #4]

void usart6_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
  dmxl_push_byte(2, USART6->DR);
}
 8001b80:	b003      	add	sp, #12
 8001b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	40011400 	.word	0x40011400
 8001b8c:	2000f384 	.word	0x2000f384
 8001b90:	2000fbdc 	.word	0x2000fbdc

08001b94 <dmxl_set_usart_baud>:

void dmxl_set_usart_baud(const uint_fast8_t dmxl_idx, int baud)
{
  USART_TypeDef *u = g_dmxl_ports[dmxl_idx].uart;
 8001b94:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <dmxl_set_usart_baud+0x54>)
 8001b96:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001b9a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  if (baud == 57600)
 8001b9e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
  dmxl_push_byte(2, USART6->DR);
}

void dmxl_set_usart_baud(const uint_fast8_t dmxl_idx, int baud)
{
  USART_TypeDef *u = g_dmxl_ports[dmxl_idx].uart;
 8001ba2:	68db      	ldr	r3, [r3, #12]
  if (baud == 57600)
 8001ba4:	d00f      	beq.n	8001bc6 <dmxl_set_usart_baud+0x32>
    if (u == USART6)
      u->BRR = (((uint16_t)91) << 4) | 2;
    else
      u->BRR = (((uint16_t)45) << 4) | 9;
  }
  else if (baud == 250000)
 8001ba6:	4811      	ldr	r0, [pc, #68]	; (8001bec <dmxl_set_usart_baud+0x58>)
 8001ba8:	4281      	cmp	r1, r0
 8001baa:	d015      	beq.n	8001bd8 <dmxl_set_usart_baud+0x44>
    if (u == USART6)
      u->BRR = (((uint16_t)21) << 4);
    else
      u->BRR = (((uint16_t)10) << 4) | 8;
  }
  else if (baud == 1000000)
 8001bac:	4810      	ldr	r0, [pc, #64]	; (8001bf0 <dmxl_set_usart_baud+0x5c>)
 8001bae:	4281      	cmp	r1, r0
 8001bb0:	d002      	beq.n	8001bb8 <dmxl_set_usart_baud+0x24>
      u->BRR = (((uint16_t)5) << 4) |  4;
    else
      u->BRR = (((uint16_t)2) << 4) | 10;
  }
  else
    printf("ahhh unhandled baud rate: %d\r\n", baud);
 8001bb2:	4810      	ldr	r0, [pc, #64]	; (8001bf4 <dmxl_set_usart_baud+0x60>)
 8001bb4:	f002 b850 	b.w	8003c58 <printf>
    else
      u->BRR = (((uint16_t)10) << 4) | 8;
  }
  else if (baud == 1000000)
  {
    if (u == USART6)
 8001bb8:	4a0f      	ldr	r2, [pc, #60]	; (8001bf8 <dmxl_set_usart_baud+0x64>)
 8001bba:	4293      	cmp	r3, r2
      u->BRR = (((uint16_t)5) << 4) |  4;
 8001bbc:	bf0c      	ite	eq
 8001bbe:	2254      	moveq	r2, #84	; 0x54
    else
      u->BRR = (((uint16_t)2) << 4) | 10;
 8001bc0:	222a      	movne	r2, #42	; 0x2a
 8001bc2:	811a      	strh	r2, [r3, #8]
 8001bc4:	4770      	bx	lr
void dmxl_set_usart_baud(const uint_fast8_t dmxl_idx, int baud)
{
  USART_TypeDef *u = g_dmxl_ports[dmxl_idx].uart;
  if (baud == 57600)
  {
    if (u == USART6)
 8001bc6:	4a0c      	ldr	r2, [pc, #48]	; (8001bf8 <dmxl_set_usart_baud+0x64>)
 8001bc8:	4293      	cmp	r3, r2
      u->BRR = (((uint16_t)91) << 4) | 2;
 8001bca:	bf0c      	ite	eq
 8001bcc:	f240 52b2 	movweq	r2, #1458	; 0x5b2
    else
      u->BRR = (((uint16_t)45) << 4) | 9;
 8001bd0:	f240 22d9 	movwne	r2, #729	; 0x2d9
 8001bd4:	811a      	strh	r2, [r3, #8]
 8001bd6:	4770      	bx	lr
  }
  else if (baud == 250000)
  {
    if (u == USART6)
 8001bd8:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <dmxl_set_usart_baud+0x64>)
 8001bda:	4293      	cmp	r3, r2
      u->BRR = (((uint16_t)21) << 4);
 8001bdc:	bf0c      	ite	eq
 8001bde:	f44f 72a8 	moveq.w	r2, #336	; 0x150
    else
      u->BRR = (((uint16_t)10) << 4) | 8;
 8001be2:	22a8      	movne	r2, #168	; 0xa8
 8001be4:	811a      	strh	r2, [r3, #8]
 8001be6:	4770      	bx	lr
 8001be8:	2000000c 	.word	0x2000000c
 8001bec:	0003d090 	.word	0x0003d090
 8001bf0:	000f4240 	.word	0x000f4240
 8001bf4:	0800a9a8 	.word	0x0800a9a8
 8001bf8:	40011400 	.word	0x40011400

08001bfc <dmxl_init>:
  else
    printf("ahhh unhandled baud rate: %d\r\n", baud);
}

void dmxl_init()
{
 8001bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  printf("dmxl_init()\r\n");
 8001c00:	4861      	ldr	r0, [pc, #388]	; (8001d88 <dmxl_init+0x18c>)
 8001c02:	4c62      	ldr	r4, [pc, #392]	; (8001d8c <dmxl_init+0x190>)
  else
    printf("ahhh unhandled baud rate: %d\r\n", baud);
}

void dmxl_init()
{
 8001c04:	b085      	sub	sp, #20
  printf("dmxl_init()\r\n");
 8001c06:	f002 f87b 	bl	8003d00 <puts>
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 8001c0a:	4b61      	ldr	r3, [pc, #388]	; (8001d90 <dmxl_init+0x194>)
 8001c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c0e:	f042 020d 	orr.w	r2, r2, #13
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30
                  RCC_AHB1ENR_GPIOCEN |
                  RCC_AHB1ENR_GPIODEN;
  RCC->APB1ENR |= RCC_APB1ENR_USART3EN |
 8001c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c16:	f442 12e0 	orr.w	r2, r2, #1835008	; 0x1c0000
 8001c1a:	641a      	str	r2, [r3, #64]	; 0x40
                  RCC_APB1ENR_UART4EN  |
                  RCC_APB1ENR_UART5EN;
  RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8001c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c1e:	f042 0220 	orr.w	r2, r2, #32
 8001c22:	645a      	str	r2, [r3, #68]	; 0x44

  for (int i = 0; i < NUM_DMXL; i++)
 8001c24:	2500      	movs	r5, #0
 8001c26:	f10d 070b 	add.w	r7, sp, #11
 8001c2a:	ae03      	add	r6, sp, #12
  {
    dmxl_port_t *dp = &g_dmxl_ports[i];
    dp->tx_gpio->MODER |= (uint32_t)2 << (dp->tx_pin * 2); // set as AF
 8001c2c:	f04f 0802 	mov.w	r8, #2
 8001c30:	7922      	ldrb	r2, [r4, #4]
 8001c32:	f854 cc04 	ldr.w	ip, [r4, #-4]
 8001c36:	0052      	lsls	r2, r2, #1
 8001c38:	f8dc 3000 	ldr.w	r3, [ip]
 8001c3c:	fa08 f202 	lsl.w	r2, r8, r2
 8001c40:	4313      	orrs	r3, r2
 8001c42:	f8cc 3000 	str.w	r3, [ip]
    dp->rx_gpio->MODER |= (uint32_t)2 << (dp->rx_pin * 2); // set as AF
 8001c46:	f894 e005 	ldrb.w	lr, [r4, #5]
 8001c4a:	6822      	ldr	r2, [r4, #0]
 8001c4c:	fa0f f08e 	sxth.w	r0, lr
 8001c50:	6813      	ldr	r3, [r2, #0]
 8001c52:	0041      	lsls	r1, r0, #1
 8001c54:	fa08 f101 	lsl.w	r1, r8, r1
 8001c58:	430b      	orrs	r3, r1
 8001c5a:	6013      	str	r3, [r2, #0]

    if (dp->tx_pin >= 8)
 8001c5c:	7923      	ldrb	r3, [r4, #4]
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
 8001c5e:	f1a3 0108 	sub.w	r1, r3, #8
  {
    dmxl_port_t *dp = &g_dmxl_ports[i];
    dp->tx_gpio->MODER |= (uint32_t)2 << (dp->tx_pin * 2); // set as AF
    dp->rx_gpio->MODER |= (uint32_t)2 << (dp->rx_pin * 2); // set as AF

    if (dp->tx_pin >= 8)
 8001c62:	2b07      	cmp	r3, #7
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
 8001c64:	ea4f 0981 	mov.w	r9, r1, lsl #2
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);
 8001c68:	ea4f 0383 	mov.w	r3, r3, lsl #2
  {
    dmxl_port_t *dp = &g_dmxl_ports[i];
    dp->tx_gpio->MODER |= (uint32_t)2 << (dp->tx_pin * 2); // set as AF
    dp->rx_gpio->MODER |= (uint32_t)2 << (dp->rx_pin * 2); // set as AF

    if (dp->tx_pin >= 8)
 8001c6c:	d97f      	bls.n	8001d6e <dmxl_init+0x172>
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
 8001c6e:	79a1      	ldrb	r1, [r4, #6]
 8001c70:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8001c74:	fa01 f909 	lsl.w	r9, r1, r9
 8001c78:	ea49 0303 	orr.w	r3, r9, r3
 8001c7c:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);

    if (dp->rx_pin >= 8)
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
 8001c80:	f1ae 0308 	sub.w	r3, lr, #8
 8001c84:	009b      	lsls	r3, r3, #2
    if (dp->tx_pin >= 8)
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);

    if (dp->rx_pin >= 8)
 8001c86:	f1be 0f07 	cmp.w	lr, #7
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
 8001c8a:	fa01 fc03 	lsl.w	ip, r1, r3
    else
      dp->rx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->rx_pin * 4);
 8001c8e:	ea4f 0080 	mov.w	r0, r0, lsl #2
    if (dp->tx_pin >= 8)
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);

    if (dp->rx_pin >= 8)
 8001c92:	d967      	bls.n	8001d64 <dmxl_init+0x168>
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
 8001c94:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001c96:	ea4c 0303 	orr.w	r3, ip, r3
 8001c9a:	6253      	str	r3, [r2, #36]	; 0x24
    else
      dp->rx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->rx_pin * 4);

    USART_TypeDef *u = dp->uart;
 8001c9c:	f8d4 9008 	ldr.w	r9, [r4, #8]
    u->CR1 &= ~USART_CR1_UE; // make sure it's off while we configure it
    u->CR1 |=  USART_CR1_RE; // don't enable the transmitter yet

    dmxl_set_usart_baud(i, 250000);
 8001ca0:	493c      	ldr	r1, [pc, #240]	; (8001d94 <dmxl_init+0x198>)
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
    else
      dp->rx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->rx_pin * 4);

    USART_TypeDef *u = dp->uart;
    u->CR1 &= ~USART_CR1_UE; // make sure it's off while we configure it
 8001ca2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8001ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001caa:	041b      	lsls	r3, r3, #16
 8001cac:	0c1b      	lsrs	r3, r3, #16
 8001cae:	f8a9 300c 	strh.w	r3, [r9, #12]
    u->CR1 |=  USART_CR1_RE; // don't enable the transmitter yet
 8001cb2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	f043 0304 	orr.w	r3, r3, #4
 8001cbc:	f8a9 300c 	strh.w	r3, [r9, #12]

    dmxl_set_usart_baud(i, 250000);
 8001cc0:	4628      	mov	r0, r5
 8001cc2:	f7ff ff67 	bl	8001b94 <dmxl_set_usart_baud>
    if (u == USART6) // running on APB2 = 84 MHz
      u->BRR = (((uint16_t)5) << 4) | 4; // 5.25 mantissa = 5, fraction =  4
    else // running on APB1 = 42 MHz
      u->BRR = (((uint16_t)2) << 4) | 10;// 2.625 mantissa = 2, fraction = 10
    */
    u->CR1 |=  USART_CR1_UE | USART_CR1_RXNEIE;
 8001cc6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cd0:	f043 0320 	orr.w	r3, r3, #32
 8001cd4:	f8a9 300c 	strh.w	r3, [r9, #12]

    delay_us(10);
 8001cd8:	200a      	movs	r0, #10
 8001cda:	f001 fddf 	bl	800389c <delay_us>
    dmxl_set_res_divider(i, DMXL_DEFAULT_ID, 4);
 8001cde:	fa5f f985 	uxtb.w	r9, r5
}

void dmxl_set_res_divider(const uint8_t port_idx, const uint8_t dmxl_id,
                          const uint8_t res_divider)
{
  dmxl_write_data(port_idx, dmxl_id, 1, 22, &res_divider);
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	460a      	mov	r2, r1
 8001ce6:	f04f 0e04 	mov.w	lr, #4
 8001cea:	2316      	movs	r3, #22
 8001cec:	4648      	mov	r0, r9
 8001cee:	9700      	str	r7, [sp, #0]
 8001cf0:	f88d e00b 	strb.w	lr, [sp, #11]
 8001cf4:	f7ff fe90 	bl	8001a18 <dmxl_write_data>
    */
    u->CR1 |=  USART_CR1_UE | USART_CR1_RXNEIE;

    delay_us(10);
    dmxl_set_res_divider(i, DMXL_DEFAULT_ID, 4);
    delay_us(10);
 8001cf8:	200a      	movs	r0, #10
 8001cfa:	f001 fdcf 	bl	800389c <delay_us>
  RCC->APB1ENR |= RCC_APB1ENR_USART3EN |
                  RCC_APB1ENR_UART4EN  |
                  RCC_APB1ENR_UART5EN;
  RCC->APB2ENR |= RCC_APB2ENR_USART6EN;

  for (int i = 0; i < NUM_DMXL; i++)
 8001cfe:	3501      	adds	r5, #1

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
 8001d00:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
  d[1] = (offset >> 8) & 0xff;
 8001d04:	f04f 0e32 	mov.w	lr, #50	; 0x32
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 8001d08:	4648      	mov	r0, r9
 8001d0a:	9600      	str	r6, [sp, #0]
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	2202      	movs	r2, #2
 8001d10:	2314      	movs	r3, #20

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
 8001d12:	f88d c00c 	strb.w	ip, [sp, #12]
  d[1] = (offset >> 8) & 0xff;
 8001d16:	f88d e00d 	strb.w	lr, [sp, #13]
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 8001d1a:	f7ff fe7d 	bl	8001a18 <dmxl_write_data>
  RCC->APB1ENR |= RCC_APB1ENR_USART3EN |
                  RCC_APB1ENR_UART4EN  |
                  RCC_APB1ENR_UART5EN;
  RCC->APB2ENR |= RCC_APB2ENR_USART6EN;

  for (int i = 0; i < NUM_DMXL; i++)
 8001d1e:	2d04      	cmp	r5, #4
 8001d20:	f104 0418 	add.w	r4, r4, #24
 8001d24:	d184      	bne.n	8001c30 <dmxl_init+0x34>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001d26:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <dmxl_init+0x19c>)
  NVIC_EnableIRQ(UART5_IRQn);
  NVIC_EnableIRQ(USART6_IRQn);

  //GPIOD->MODER |= (1 << (8*2)); // | (1 << 9);
  // turn on the 3.3v <-> 5v translator chip now
  GPIOA->MODER |= 1 << (PORTA_DMXL_BUF_EN * 2);
 8001d28:	4a1c      	ldr	r2, [pc, #112]	; (8001d9c <dmxl_init+0x1a0>)
 8001d2a:	2120      	movs	r1, #32
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001d2c:	2080      	movs	r0, #128	; 0x80
 8001d2e:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
 8001d32:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001d36:	f883 1327 	strb.w	r1, [r3, #807]	; 0x327
 8001d3a:	f883 1334 	strb.w	r1, [r3, #820]	; 0x334
 8001d3e:	f883 1335 	strb.w	r1, [r3, #821]	; 0x335
 8001d42:	f883 1347 	strb.w	r1, [r3, #839]	; 0x347
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001d46:	6058      	str	r0, [r3, #4]
 8001d48:	605d      	str	r5, [r3, #4]
 8001d4a:	605c      	str	r4, [r3, #4]
 8001d4c:	6098      	str	r0, [r3, #8]
 8001d4e:	6813      	ldr	r3, [r2, #0]
 8001d50:	432b      	orrs	r3, r5
 8001d52:	6013      	str	r3, [r2, #0]
  GPIOA->BSRRL |= 1 << PORTA_DMXL_BUF_EN;
 8001d54:	8b13      	ldrh	r3, [r2, #24]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d5c:	8313      	strh	r3, [r2, #24]
}
 8001d5e:	b005      	add	sp, #20
 8001d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);

    if (dp->rx_pin >= 8)
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
    else
      dp->rx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->rx_pin * 4);
 8001d64:	6a13      	ldr	r3, [r2, #32]
 8001d66:	4081      	lsls	r1, r0
 8001d68:	4319      	orrs	r1, r3
 8001d6a:	6211      	str	r1, [r2, #32]
 8001d6c:	e796      	b.n	8001c9c <dmxl_init+0xa0>
    dp->rx_gpio->MODER |= (uint32_t)2 << (dp->rx_pin * 2); // set as AF

    if (dp->tx_pin >= 8)
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);
 8001d6e:	f854 9c04 	ldr.w	r9, [r4, #-4]
 8001d72:	79a1      	ldrb	r1, [r4, #6]
 8001d74:	f8d9 c020 	ldr.w	ip, [r9, #32]
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	ea43 030c 	orr.w	r3, r3, ip
 8001d80:	f8c9 3020 	str.w	r3, [r9, #32]
 8001d84:	e77c      	b.n	8001c80 <dmxl_init+0x84>
 8001d86:	bf00      	nop
 8001d88:	0800a9c8 	.word	0x0800a9c8
 8001d8c:	20000010 	.word	0x20000010
 8001d90:	40023800 	.word	0x40023800
 8001d94:	0003d090 	.word	0x0003d090
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	40020000 	.word	0x40020000

08001da0 <dmxl_process_ring>:
  pkt[4] = data_len;
  dmxl_tx(port_idx, pkt, 5);
}

void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
 8001da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
           */
          switch (port->comms_state)
          {
            case DMXL_CS_POLL_STATE:
              g_state.dynamixel_angles[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
 8001da4:	4b73      	ldr	r3, [pc, #460]	; (8001f74 <dmxl_process_ring+0x1d4>)
 8001da6:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8001f8c <dmxl_process_ring+0x1ec>
 8001daa:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8001f90 <dmxl_process_ring+0x1f0>
void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
  const uint_fast8_t i = dmxl_id; // save typing...
  while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
  {
    const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 8001dae:	ea4f 2800 	mov.w	r8, r0, lsl #8
           */
          switch (port->comms_state)
          {
            case DMXL_CS_POLL_STATE:
              g_state.dynamixel_angles[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
 8001db2:	eb03 0908 	add.w	r9, r3, r8
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
              g_state.dynamixel_loads[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
              g_state.dynamixel_voltages[i]     = g_dmxl_rx_pkt[i][6];
 8001db6:	4b70      	ldr	r3, [pc, #448]	; (8001f78 <dmxl_process_ring+0x1d8>)
  pkt[4] = data_len;
  dmxl_tx(port_idx, pkt, 5);
}

void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
 8001db8:	b083      	sub	sp, #12
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
              g_state.dynamixel_loads[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
              g_state.dynamixel_voltages[i]     = g_dmxl_rx_pkt[i][6];
 8001dba:	4403      	add	r3, r0
  pkt[4] = data_len;
  dmxl_tx(port_idx, pkt, 5);
}

void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
 8001dbc:	4606      	mov	r6, r0
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
              g_state.dynamixel_loads[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
              g_state.dynamixel_voltages[i]     = g_dmxl_rx_pkt[i][6];
 8001dbe:	9301      	str	r3, [sp, #4]
}

void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
  const uint_fast8_t i = dmxl_id; // save typing...
  while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
 8001dc0:	465f      	mov	r7, fp
 8001dc2:	f83b 2016 	ldrh.w	r2, [fp, r6, lsl #1]
 8001dc6:	f83a 3016 	ldrh.w	r3, [sl, r6, lsl #1]
 8001dca:	b292      	uxth	r2, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	f000 80bd 	beq.w	8001f4e <dmxl_process_ring+0x1ae>
  {
    const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 8001dd4:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
 8001dd8:	4a68      	ldr	r2, [pc, #416]	; (8001f7c <dmxl_process_ring+0x1dc>)
    //printf("dmxl %d received 0x%02x\r\n", i, b);
    if (++g_dmxl_ring_rpos[i] >= DMXL_RING_LEN)
      g_dmxl_ring_rpos[i] = 0; // wrap around
    dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
    switch (port->parser_state)
 8001dda:	4d69      	ldr	r5, [pc, #420]	; (8001f80 <dmxl_process_ring+0x1e0>)
void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
  const uint_fast8_t i = dmxl_id; // save typing...
  while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
  {
    const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 8001ddc:	fa18 f383 	uxtah	r3, r8, r3
    //printf("dmxl %d received 0x%02x\r\n", i, b);
    if (++g_dmxl_ring_rpos[i] >= DMXL_RING_LEN)
      g_dmxl_ring_rpos[i] = 0; // wrap around
    dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
    switch (port->parser_state)
 8001de0:	0074      	lsls	r4, r6, #1
void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
  const uint_fast8_t i = dmxl_id; // save typing...
  while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
  {
    const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 8001de2:	5cd2      	ldrb	r2, [r2, r3]
    //printf("dmxl %d received 0x%02x\r\n", i, b);
    if (++g_dmxl_ring_rpos[i] >= DMXL_RING_LEN)
 8001de4:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
 8001de8:	3301      	adds	r3, #1
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	2bff      	cmp	r3, #255	; 0xff
 8001dee:	f827 3016 	strh.w	r3, [r7, r6, lsl #1]
      g_dmxl_ring_rpos[i] = 0; // wrap around
 8001df2:	bf84      	itt	hi
 8001df4:	2300      	movhi	r3, #0
 8001df6:	f827 3016 	strhhi.w	r3, [r7, r6, lsl #1]
    dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
    switch (port->parser_state)
 8001dfa:	19a3      	adds	r3, r4, r6
 8001dfc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
  const uint_fast8_t i = dmxl_id; // save typing...
  while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
  {
    const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 8001e00:	b2d2      	uxtb	r2, r2
    //printf("dmxl %d received 0x%02x\r\n", i, b);
    if (++g_dmxl_ring_rpos[i] >= DMXL_RING_LEN)
      g_dmxl_ring_rpos[i] = 0; // wrap around
    dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
    switch (port->parser_state)
 8001e02:	7c5b      	ldrb	r3, [r3, #17]
 8001e04:	2b06      	cmp	r3, #6
 8001e06:	f200 809b 	bhi.w	8001f40 <dmxl_process_ring+0x1a0>
 8001e0a:	e8df f003 	tbb	[pc, r3]
 8001e0e:	7690      	.short	0x7690
 8001e10:	47657e89 	.word	0x47657e89
 8001e14:	04          	.byte	0x04
 8001e15:	00          	.byte	0x00
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
          port->parser_state = DMXL_PS_CHECKSUM;
        port->rx_pkt_writepos++;
        break;
      case DMXL_PS_CHECKSUM:
        if (((uint8_t)(~port->rx_checksum)) == b)
 8001e16:	19a3      	adds	r3, r4, r6
 8001e18:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001e1c:	7d19      	ldrb	r1, [r3, #20]
 8001e1e:	43c9      	mvns	r1, r1
 8001e20:	b2c9      	uxtb	r1, r1
 8001e22:	4291      	cmp	r1, r2
 8001e24:	f040 8096 	bne.w	8001f54 <dmxl_process_ring+0x1b4>
          /*
             printf("checksum passed. received %d bytes\r\n", port->rx_pkt_len);
             for (int j = 0; j < port->rx_pkt_len; j++)
             printf("  0x%02x\r\n", g_dmxl_rx_pkt[i][j]);
           */
          switch (port->comms_state)
 8001e28:	7c1b      	ldrb	r3, [r3, #16]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d12f      	bne.n	8001e8e <dmxl_process_ring+0xee>
          {
            case DMXL_CS_POLL_STATE:
              g_state.dynamixel_angles[i] =
 8001e2e:	4852      	ldr	r0, [pc, #328]	; (8001f78 <dmxl_process_ring+0x1d8>)
                (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
 8001e30:	f899 1001 	ldrb.w	r1, [r9, #1]
                (((uint16_t)g_dmxl_rx_pkt[i][0])     ) ;
 8001e34:	f899 2000 	ldrb.w	r2, [r9]
             printf("  0x%02x\r\n", g_dmxl_rx_pkt[i][j]);
           */
          switch (port->comms_state)
          {
            case DMXL_CS_POLL_STATE:
              g_state.dynamixel_angles[i] =
 8001e38:	f106 0354 	add.w	r3, r6, #84	; 0x54
 8001e3c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001e40:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e44:	8859      	ldrh	r1, [r3, #2]
 8001e46:	805a      	strh	r2, [r3, #2]
                (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][0])     ) ;
              //printf("dmxl %d angle = %d\r\n", (int)i, (int)g_state.dynamixel_angles[i]);
              g_state.dynamixel_speeds[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
 8001e48:	f899 1003 	ldrb.w	r1, [r9, #3]
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
 8001e4c:	f899 2002 	ldrb.w	r2, [r9, #2]
            case DMXL_CS_POLL_STATE:
              g_state.dynamixel_angles[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][0])     ) ;
              //printf("dmxl %d angle = %d\r\n", (int)i, (int)g_state.dynamixel_angles[i]);
              g_state.dynamixel_speeds[i] =
 8001e50:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8001e54:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001e58:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e5c:	8859      	ldrh	r1, [r3, #2]
 8001e5e:	805a      	strh	r2, [r3, #2]
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
              g_state.dynamixel_loads[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
 8001e60:	f899 1005 	ldrb.w	r1, [r9, #5]
                (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
 8001e64:	f899 2004 	ldrb.w	r2, [r9, #4]
                (((uint16_t)g_dmxl_rx_pkt[i][0])     ) ;
              //printf("dmxl %d angle = %d\r\n", (int)i, (int)g_state.dynamixel_angles[i]);
              g_state.dynamixel_speeds[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
              g_state.dynamixel_loads[i] =
 8001e68:	f106 035c 	add.w	r3, r6, #92	; 0x5c
 8001e6c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001e70:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e74:	8859      	ldrh	r1, [r3, #2]
 8001e76:	805a      	strh	r2, [r3, #2]
                (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
              g_state.dynamixel_voltages[i]     = g_dmxl_rx_pkt[i][6];
 8001e78:	f899 3006 	ldrb.w	r3, [r9, #6]
 8001e7c:	9901      	ldr	r1, [sp, #4]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f881 30c2 	strb.w	r3, [r1, #194]	; 0xc2
              g_state.dynamixel_temperatures[i] = g_dmxl_rx_pkt[i][7];
 8001e84:	f899 3007 	ldrb.w	r3, [r9, #7]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f881 30c6 	strb.w	r3, [r1, #198]	; 0xc6
          }
        }
        else
          printf("checksum failed: local 0x%02x != received 0x%02x\r\n",
              (uint8_t)~port->rx_checksum, b);
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8001e8e:	4434      	add	r4, r6
 8001e90:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8001e94:	2300      	movs	r3, #0
 8001e96:	746b      	strb	r3, [r5, #17]
        port->comms_state = DMXL_CS_IDLE;
 8001e98:	742b      	strb	r3, [r5, #16]
        break;
 8001e9a:	e792      	b.n	8001dc2 <dmxl_process_ring+0x22>
          port->parser_state = DMXL_PS_PARAMETER;
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
 8001e9c:	19a3      	adds	r3, r4, r6
 8001e9e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
          port->parser_state = DMXL_PS_CHECKSUM;
        port->rx_pkt_writepos++;
 8001ea2:	4434      	add	r4, r6
          port->parser_state = DMXL_PS_PARAMETER;
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
 8001ea4:	f893 e014 	ldrb.w	lr, [r3, #20]
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
 8001ea8:	7cd9      	ldrb	r1, [r3, #19]
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
 8001eaa:	7c98      	ldrb	r0, [r3, #18]
          port->parser_state = DMXL_PS_PARAMETER;
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
 8001eac:	4496      	add	lr, r2
 8001eae:	f883 e014 	strb.w	lr, [r3, #20]
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
 8001eb2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
 8001eb6:	eb08 0e01 	add.w	lr, r8, r1
 8001eba:	482e      	ldr	r0, [pc, #184]	; (8001f74 <dmxl_process_ring+0x1d4>)
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
 8001ebc:	4561      	cmp	r1, ip
          port->parser_state = DMXL_PS_PARAMETER;
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
 8001ebe:	f103 0310 	add.w	r3, r3, #16
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
          port->parser_state = DMXL_PS_CHECKSUM;
        port->rx_pkt_writepos++;
 8001ec2:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
 8001ec6:	f800 200e 	strb.w	r2, [r0, lr]
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
          port->parser_state = DMXL_PS_CHECKSUM;
        port->rx_pkt_writepos++;
 8001eca:	f101 0101 	add.w	r1, r1, #1
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
          port->parser_state = DMXL_PS_CHECKSUM;
 8001ece:	bf04      	itt	eq
 8001ed0:	2206      	moveq	r2, #6
 8001ed2:	705a      	strbeq	r2, [r3, #1]
        port->rx_pkt_writepos++;
 8001ed4:	74e9      	strb	r1, [r5, #19]
        break;
 8001ed6:	e774      	b.n	8001dc2 <dmxl_process_ring+0x22>
        port->rx_checksum += b;
        port->parser_state = DMXL_PS_ERROR;
        break;
      case DMXL_PS_ERROR:
        g_state.dynamixel_error_status[i] = b; // save for global state
        port->rx_checksum += b;
 8001ed8:	4434      	add	r4, r6
 8001eda:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8001ede:	3510      	adds	r5, #16
        port->rx_pkt_len = b - 2;
        port->rx_checksum += b;
        port->parser_state = DMXL_PS_ERROR;
        break;
      case DMXL_PS_ERROR:
        g_state.dynamixel_error_status[i] = b; // save for global state
 8001ee0:	9c01      	ldr	r4, [sp, #4]
        port->rx_checksum += b;
 8001ee2:	792b      	ldrb	r3, [r5, #4]
        port->rx_pkt_writepos = 0;
        if (port->rx_pkt_len)
 8001ee4:	78a9      	ldrb	r1, [r5, #2]
        port->rx_pkt_len = b - 2;
        port->rx_checksum += b;
        port->parser_state = DMXL_PS_ERROR;
        break;
      case DMXL_PS_ERROR:
        g_state.dynamixel_error_status[i] = b; // save for global state
 8001ee6:	f884 20a6 	strb.w	r2, [r4, #166]	; 0xa6
        port->rx_checksum += b;
        port->rx_pkt_writepos = 0;
 8001eea:	2000      	movs	r0, #0
        port->rx_checksum += b;
        port->parser_state = DMXL_PS_ERROR;
        break;
      case DMXL_PS_ERROR:
        g_state.dynamixel_error_status[i] = b; // save for global state
        port->rx_checksum += b;
 8001eec:	441a      	add	r2, r3
 8001eee:	712a      	strb	r2, [r5, #4]
        port->rx_pkt_writepos = 0;
 8001ef0:	70e8      	strb	r0, [r5, #3]
        if (port->rx_pkt_len)
 8001ef2:	b3c9      	cbz	r1, 8001f68 <dmxl_process_ring+0x1c8>
          port->parser_state = DMXL_PS_PARAMETER;
 8001ef4:	2305      	movs	r3, #5
 8001ef6:	706b      	strb	r3, [r5, #1]
 8001ef8:	e763      	b.n	8001dc2 <dmxl_process_ring+0x22>
        if (b == 0xff)
          port->parser_state = DMXL_PS_PREAMBLE_1;
        break;
      case DMXL_PS_PREAMBLE_1:
        if (b == 0xff)
          port->parser_state = DMXL_PS_ID;
 8001efa:	4434      	add	r4, r6
      case DMXL_PS_PREAMBLE_0:
        if (b == 0xff)
          port->parser_state = DMXL_PS_PREAMBLE_1;
        break;
      case DMXL_PS_PREAMBLE_1:
        if (b == 0xff)
 8001efc:	2aff      	cmp	r2, #255	; 0xff
          port->parser_state = DMXL_PS_ID;
 8001efe:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
      case DMXL_PS_PREAMBLE_0:
        if (b == 0xff)
          port->parser_state = DMXL_PS_PREAMBLE_1;
        break;
      case DMXL_PS_PREAMBLE_1:
        if (b == 0xff)
 8001f02:	d034      	beq.n	8001f6e <dmxl_process_ring+0x1ce>
        port->parser_state = DMXL_PS_PREAMBLE_0;
        port->comms_state = DMXL_CS_IDLE;
        break;
      default:
        printf("woah there partner. unexpected dmxl rx state!\r\n");
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	746b      	strb	r3, [r5, #17]
        break;
 8001f08:	e75b      	b.n	8001dc2 <dmxl_process_ring+0x22>
      case DMXL_PS_ID:
        port->rx_checksum = b;
        port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
        break;
      case DMXL_PS_LENGTH:
        port->rx_pkt_len = b - 2;
 8001f0a:	4434      	add	r4, r6
 8001f0c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8001f10:	1e91      	subs	r1, r2, #2
        port->rx_checksum += b;
 8001f12:	7d2b      	ldrb	r3, [r5, #20]
      case DMXL_PS_ID:
        port->rx_checksum = b;
        port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
        break;
      case DMXL_PS_LENGTH:
        port->rx_pkt_len = b - 2;
 8001f14:	74a9      	strb	r1, [r5, #18]
        port->rx_checksum += b;
 8001f16:	441a      	add	r2, r3
        port->parser_state = DMXL_PS_ERROR;
 8001f18:	2304      	movs	r3, #4
        port->rx_checksum = b;
        port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
        break;
      case DMXL_PS_LENGTH:
        port->rx_pkt_len = b - 2;
        port->rx_checksum += b;
 8001f1a:	752a      	strb	r2, [r5, #20]
        port->parser_state = DMXL_PS_ERROR;
 8001f1c:	746b      	strb	r3, [r5, #17]
        break;
 8001f1e:	e750      	b.n	8001dc2 <dmxl_process_ring+0x22>
          port->parser_state = DMXL_PS_ID;
        else
          port->parser_state = DMXL_PS_PREAMBLE_0;
        break;
      case DMXL_PS_ID:
        port->rx_checksum = b;
 8001f20:	4434      	add	r4, r6
 8001f22:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
        port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
 8001f26:	2303      	movs	r3, #3
          port->parser_state = DMXL_PS_ID;
        else
          port->parser_state = DMXL_PS_PREAMBLE_0;
        break;
      case DMXL_PS_ID:
        port->rx_checksum = b;
 8001f28:	752a      	strb	r2, [r5, #20]
        port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
 8001f2a:	746b      	strb	r3, [r5, #17]
        break;
 8001f2c:	e749      	b.n	8001dc2 <dmxl_process_ring+0x22>
      g_dmxl_ring_rpos[i] = 0; // wrap around
    dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
    switch (port->parser_state)
    {
      case DMXL_PS_PREAMBLE_0:
        if (b == 0xff)
 8001f2e:	2aff      	cmp	r2, #255	; 0xff
 8001f30:	f47f af47 	bne.w	8001dc2 <dmxl_process_ring+0x22>
          port->parser_state = DMXL_PS_PREAMBLE_1;
 8001f34:	4434      	add	r4, r6
 8001f36:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	746b      	strb	r3, [r5, #17]
 8001f3e:	e740      	b.n	8001dc2 <dmxl_process_ring+0x22>
              (uint8_t)~port->rx_checksum, b);
        port->parser_state = DMXL_PS_PREAMBLE_0;
        port->comms_state = DMXL_CS_IDLE;
        break;
      default:
        printf("woah there partner. unexpected dmxl rx state!\r\n");
 8001f40:	4810      	ldr	r0, [pc, #64]	; (8001f84 <dmxl_process_ring+0x1e4>)
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8001f42:	4434      	add	r4, r6
              (uint8_t)~port->rx_checksum, b);
        port->parser_state = DMXL_PS_PREAMBLE_0;
        port->comms_state = DMXL_CS_IDLE;
        break;
      default:
        printf("woah there partner. unexpected dmxl rx state!\r\n");
 8001f44:	f001 fedc 	bl	8003d00 <puts>
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8001f48:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8001f4c:	e7da      	b.n	8001f04 <dmxl_process_ring+0x164>
        break;
    }
  }
}
 8001f4e:	b003      	add	sp, #12
 8001f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          }
        }
        else
          printf("checksum failed: local 0x%02x != received 0x%02x\r\n",
              (uint8_t)~port->rx_checksum, b);
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8001f54:	4434      	add	r4, r6
 8001f56:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
            default:
              break;
          }
        }
        else
          printf("checksum failed: local 0x%02x != received 0x%02x\r\n",
 8001f5a:	480b      	ldr	r0, [pc, #44]	; (8001f88 <dmxl_process_ring+0x1e8>)
 8001f5c:	f001 fe7c 	bl	8003c58 <printf>
              (uint8_t)~port->rx_checksum, b);
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	746b      	strb	r3, [r5, #17]
        port->comms_state = DMXL_CS_IDLE;
 8001f64:	742b      	strb	r3, [r5, #16]
 8001f66:	e72c      	b.n	8001dc2 <dmxl_process_ring+0x22>
        port->rx_checksum += b;
        port->rx_pkt_writepos = 0;
        if (port->rx_pkt_len)
          port->parser_state = DMXL_PS_PARAMETER;
        else
          port->parser_state = DMXL_PS_CHECKSUM;
 8001f68:	2306      	movs	r3, #6
 8001f6a:	706b      	strb	r3, [r5, #1]
 8001f6c:	e729      	b.n	8001dc2 <dmxl_process_ring+0x22>
        if (b == 0xff)
          port->parser_state = DMXL_PS_PREAMBLE_1;
        break;
      case DMXL_PS_PREAMBLE_1:
        if (b == 0xff)
          port->parser_state = DMXL_PS_ID;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	746b      	strb	r3, [r5, #17]
 8001f72:	e726      	b.n	8001dc2 <dmxl_process_ring+0x22>
 8001f74:	2000f7c4 	.word	0x2000f7c4
 8001f78:	20010580 	.word	0x20010580
 8001f7c:	2000fbdc 	.word	0x2000fbdc
 8001f80:	2000000c 	.word	0x2000000c
 8001f84:	0800aa0c 	.word	0x0800aa0c
 8001f88:	0800a9d8 	.word	0x0800a9d8
 8001f8c:	2000fbc4 	.word	0x2000fbc4
 8001f90:	2000f384 	.word	0x2000f384

08001f94 <dmxl_set_status_return_levels>:
  GPIOA->MODER |= 1 << (PORTA_DMXL_BUF_EN * 2);
  GPIOA->BSRRL |= 1 << PORTA_DMXL_BUF_EN;
}

void dmxl_set_status_return_levels()
{
 8001f94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f98:	4c26      	ldr	r4, [pc, #152]	; (8002034 <dmxl_set_status_return_levels+0xa0>)
    while (SYSTIME - t_start < 10000)
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_POLL_DEBRIS)
      {
        status_return_level = g_dmxl_rx_pkt[i][0];
 8001f9a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8002040 <dmxl_set_status_return_levels+0xac>
  GPIOA->MODER |= 1 << (PORTA_DMXL_BUF_EN * 2);
  GPIOA->BSRRL |= 1 << PORTA_DMXL_BUF_EN;
}

void dmxl_set_status_return_levels()
{
 8001f9e:	b085      	sub	sp, #20
  // see what the Status Return Level is. If it's not 1, set it to one
  for (int i = 0; i < NUM_DMXL; i++)
 8001fa0:	2700      	movs	r7, #0
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
    volatile uint32_t t_start = SYSTIME;
 8001fa2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
{
  // see what the Status Return Level is. If it's not 1, set it to one
  for (int i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
 8001fa6:	fa5f f887 	uxtb.w	r8, r7
void dmxl_set_status_return_levels()
{
  // see what the Status Return Level is. If it's not 1, set it to one
  for (int i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
 8001faa:	2303      	movs	r3, #3
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
 8001fac:	4640      	mov	r0, r8
 8001fae:	2101      	movs	r1, #1
 8001fb0:	2210      	movs	r2, #16
void dmxl_set_status_return_levels()
{
  // see what the Status Return Level is. If it's not 1, set it to one
  for (int i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
 8001fb2:	7423      	strb	r3, [r4, #16]
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
 8001fb4:	f7ff fd52 	bl	8001a5c <dmxl_read_data.constprop.3>
    volatile uint32_t t_start = SYSTIME;
 8001fb8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001fba:	9303      	str	r3, [sp, #12]
    uint8_t status_return_level = 0xff;
    while (SYSTIME - t_start < 10000)
 8001fbc:	f242 760f 	movw	r6, #9999	; 0x270f
 8001fc0:	e00d      	b.n	8001fde <dmxl_set_status_return_levels+0x4a>
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 8001fc2:	f7ff feed 	bl	8001da0 <dmxl_process_ring>
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f7ff feea 	bl	8001da0 <dmxl_process_ring>
 8001fcc:	2002      	movs	r0, #2
 8001fce:	f7ff fee7 	bl	8001da0 <dmxl_process_ring>
 8001fd2:	2003      	movs	r0, #3
 8001fd4:	f7ff fee4 	bl	8001da0 <dmxl_process_ring>
    volatile uint32_t t_start = SYSTIME;
    uint8_t status_return_level = 0xff;
    while (SYSTIME - t_start < 10000)
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_POLL_DEBRIS)
 8001fd8:	7c23      	ldrb	r3, [r4, #16]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d112      	bne.n	8002004 <dmxl_set_status_return_levels+0x70>
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
    volatile uint32_t t_start = SYSTIME;
    uint8_t status_return_level = 0xff;
    while (SYSTIME - t_start < 10000)
 8001fde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001fe0:	9a03      	ldr	r2, [sp, #12]
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	42b3      	cmp	r3, r6
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 8001fe6:	f04f 0000 	mov.w	r0, #0
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
    volatile uint32_t t_start = SYSTIME;
    uint8_t status_return_level = 0xff;
    while (SYSTIME - t_start < 10000)
 8001fea:	d9ea      	bls.n	8001fc2 <dmxl_set_status_return_levels+0x2e>
        printf("dmxl %d status return level = %d\n", i, status_return_level);
        break;
      }
    }
    if (status_return_level == 0xff)
      printf("couldn't poll status return level for dmxl %d\r\n", i);
 8001fec:	4812      	ldr	r0, [pc, #72]	; (8002038 <dmxl_set_status_return_levels+0xa4>)
 8001fee:	4639      	mov	r1, r7
 8001ff0:	f001 fe32 	bl	8003c58 <printf>
}

void dmxl_set_status_return_levels()
{
  // see what the Status Return Level is. If it's not 1, set it to one
  for (int i = 0; i < NUM_DMXL; i++)
 8001ff4:	3701      	adds	r7, #1
 8001ff6:	2f04      	cmp	r7, #4
 8001ff8:	f104 0418 	add.w	r4, r4, #24
 8001ffc:	d1d3      	bne.n	8001fa6 <dmxl_set_status_return_levels+0x12>
      // set it to 2
      uint8_t level = 1; // only respond to READ
      dmxl_write_data(i, DMXL_DEFAULT_ID, 1, 0x10, &level);
    }
  }
}
 8001ffe:	b005      	add	sp, #20
 8002000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (SYSTIME - t_start < 10000)
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_POLL_DEBRIS)
      {
        status_return_level = g_dmxl_rx_pkt[i][0];
 8002004:	023b      	lsls	r3, r7, #8
        printf("dmxl %d status return level = %d\n", i, status_return_level);
 8002006:	480d      	ldr	r0, [pc, #52]	; (800203c <dmxl_set_status_return_levels+0xa8>)
    while (SYSTIME - t_start < 10000)
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_POLL_DEBRIS)
      {
        status_return_level = g_dmxl_rx_pkt[i][0];
 8002008:	f819 6003 	ldrb.w	r6, [r9, r3]
 800200c:	b2f6      	uxtb	r6, r6
        printf("dmxl %d status return level = %d\n", i, status_return_level);
 800200e:	4632      	mov	r2, r6
 8002010:	4639      	mov	r1, r7
 8002012:	f001 fe21 	bl	8003c58 <printf>
        break;
      }
    }
    if (status_return_level == 0xff)
 8002016:	2eff      	cmp	r6, #255	; 0xff
 8002018:	d0e8      	beq.n	8001fec <dmxl_set_status_return_levels+0x58>
      printf("couldn't poll status return level for dmxl %d\r\n", i);
    else if (status_return_level != 1)
 800201a:	2e01      	cmp	r6, #1
 800201c:	d0ea      	beq.n	8001ff4 <dmxl_set_status_return_levels+0x60>
    {
      // set it to 2
      uint8_t level = 1; // only respond to READ
 800201e:	ab04      	add	r3, sp, #16
 8002020:	2101      	movs	r1, #1
 8002022:	f803 1d05 	strb.w	r1, [r3, #-5]!
      dmxl_write_data(i, DMXL_DEFAULT_ID, 1, 0x10, &level);
 8002026:	4640      	mov	r0, r8
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	460a      	mov	r2, r1
 800202c:	2310      	movs	r3, #16
 800202e:	f7ff fcf3 	bl	8001a18 <dmxl_write_data>
 8002032:	e7df      	b.n	8001ff4 <dmxl_set_status_return_levels+0x60>
 8002034:	2000000c 	.word	0x2000000c
 8002038:	0800aa60 	.word	0x0800aa60
 800203c:	0800aa3c 	.word	0x0800aa3c
 8002040:	2000f7c4 	.word	0x2000f7c4

08002044 <dmxl_set_baud_rates>:
    }
  }
}

void dmxl_set_baud_rates()
{
 8002044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002048:	4c31      	ldr	r4, [pc, #196]	; (8002110 <dmxl_set_baud_rates+0xcc>)
 800204a:	b084      	sub	sp, #16
  for (int i = 0; i < NUM_DMXL; i++)
 800204c:	2700      	movs	r7, #0
  {
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
    volatile uint32_t t_start = SYSTIME;
 800204e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000

void dmxl_set_baud_rates()
{
  for (int i = 0; i < NUM_DMXL; i++)
  {
    dmxl_set_usart_baud(i, 250000);
 8002052:	4638      	mov	r0, r7
 8002054:	492f      	ldr	r1, [pc, #188]	; (8002114 <dmxl_set_baud_rates+0xd0>)
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
 8002056:	fa5f f887 	uxtb.w	r8, r7

void dmxl_set_baud_rates()
{
  for (int i = 0; i < NUM_DMXL; i++)
  {
    dmxl_set_usart_baud(i, 250000);
 800205a:	f7ff fd9b 	bl	8001b94 <dmxl_set_usart_baud>

uint8_t dmxl_send_ping(const uint8_t port_idx, const uint8_t dmxl_id)
{
  uint8_t pkt[3];
  pkt[0] = dmxl_id;
  pkt[1] = 2; // packet length
 800205e:	2602      	movs	r6, #2
}

uint8_t dmxl_send_ping(const uint8_t port_idx, const uint8_t dmxl_id)
{
  uint8_t pkt[3];
  pkt[0] = dmxl_id;
 8002060:	2301      	movs	r3, #1
void dmxl_set_baud_rates()
{
  for (int i = 0; i < NUM_DMXL; i++)
  {
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
 8002062:	f04f 0e04 	mov.w	lr, #4
 8002066:	4640      	mov	r0, r8
 8002068:	a902      	add	r1, sp, #8
 800206a:	2203      	movs	r2, #3
}

uint8_t dmxl_send_ping(const uint8_t port_idx, const uint8_t dmxl_id)
{
  uint8_t pkt[3];
  pkt[0] = dmxl_id;
 800206c:	f88d 3008 	strb.w	r3, [sp, #8]
  pkt[1] = 2; // packet length
  pkt[2] = 1; // instruction: ping
 8002070:	f88d 300a 	strb.w	r3, [sp, #10]

uint8_t dmxl_send_ping(const uint8_t port_idx, const uint8_t dmxl_id)
{
  uint8_t pkt[3];
  pkt[0] = dmxl_id;
  pkt[1] = 2; // packet length
 8002074:	f88d 6009 	strb.w	r6, [sp, #9]
void dmxl_set_baud_rates()
{
  for (int i = 0; i < NUM_DMXL; i++)
  {
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
 8002078:	f884 e010 	strb.w	lr, [r4, #16]
 800207c:	f7ff fc86 	bl	800198c <dmxl_tx.part.1>
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
    volatile uint32_t t_start = SYSTIME;
 8002080:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002082:	9303      	str	r3, [sp, #12]
    bool pong_received = false;
    while (SYSTIME - t_start < 10000 && !pong_received)
 8002084:	f242 760f 	movw	r6, #9999	; 0x270f
  {
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
    volatile uint32_t t_start = SYSTIME;
    bool pong_received = false;
 8002088:	2300      	movs	r3, #0
    while (SYSTIME - t_start < 10000 && !pong_received)
 800208a:	e010      	b.n	80020ae <dmxl_set_baud_rates+0x6a>
 800208c:	2b00      	cmp	r3, #0
 800208e:	d139      	bne.n	8002104 <dmxl_set_baud_rates+0xc0>
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 8002090:	f7ff fe86 	bl	8001da0 <dmxl_process_ring>
 8002094:	2001      	movs	r0, #1
 8002096:	f7ff fe83 	bl	8001da0 <dmxl_process_ring>
 800209a:	2002      	movs	r0, #2
 800209c:	f7ff fe80 	bl	8001da0 <dmxl_process_ring>
 80020a0:	2003      	movs	r0, #3
 80020a2:	f7ff fe7d 	bl	8001da0 <dmxl_process_ring>
    volatile uint32_t t_start = SYSTIME;
    bool pong_received = false;
    while (SYSTIME - t_start < 10000 && !pong_received)
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_PING)
 80020a6:	7c23      	ldrb	r3, [r4, #16]
 80020a8:	3b04      	subs	r3, #4
 80020aa:	bf18      	it	ne
 80020ac:	2301      	movne	r3, #1
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
    volatile uint32_t t_start = SYSTIME;
    bool pong_received = false;
    while (SYSTIME - t_start < 10000 && !pong_received)
 80020ae:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80020b0:	9903      	ldr	r1, [sp, #12]
 80020b2:	1a52      	subs	r2, r2, r1
 80020b4:	42b2      	cmp	r2, r6
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 80020b6:	4618      	mov	r0, r3
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
    volatile uint32_t t_start = SYSTIME;
    bool pong_received = false;
    while (SYSTIME - t_start < 10000 && !pong_received)
 80020b8:	d9e8      	bls.n	800208c <dmxl_set_baud_rates+0x48>
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_PING)
        pong_received = true;
    }
    if (pong_received)
 80020ba:	bb1b      	cbnz	r3, 8002104 <dmxl_set_baud_rates+0xc0>
      printf("received rx @ 250 kbit from dmxl %d\r\n", i);
      continue; // hooray. it's already at the target baud rate
    }
    else
    {
      printf("no rx received from dmxl %d... trying 57600 baud...\r\n", i);
 80020bc:	4639      	mov	r1, r7
 80020be:	4816      	ldr	r0, [pc, #88]	; (8002118 <dmxl_set_baud_rates+0xd4>)
 80020c0:	f001 fdca 	bl	8003c58 <printf>
      // this is the default out-of-the-box setup
      dmxl_set_usart_baud(i, 57600);
 80020c4:	4638      	mov	r0, r7
 80020c6:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80020ca:	f7ff fd63 	bl	8001b94 <dmxl_set_usart_baud>
      uint8_t baud_code = 7; // the dynamixel code for 250000 baud
      dmxl_write_data(i, DMXL_DEFAULT_ID, 1, 0x04, &baud_code);
 80020ce:	2101      	movs	r1, #1
 80020d0:	ab02      	add	r3, sp, #8
 80020d2:	460a      	mov	r2, r1
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	4640      	mov	r0, r8
 80020d8:	2304      	movs	r3, #4
    else
    {
      printf("no rx received from dmxl %d... trying 57600 baud...\r\n", i);
      // this is the default out-of-the-box setup
      dmxl_set_usart_baud(i, 57600);
      uint8_t baud_code = 7; // the dynamixel code for 250000 baud
 80020da:	2607      	movs	r6, #7
 80020dc:	f88d 6008 	strb.w	r6, [sp, #8]
      dmxl_write_data(i, DMXL_DEFAULT_ID, 1, 0x04, &baud_code);
 80020e0:	f7ff fc9a 	bl	8001a18 <dmxl_write_data>
      delay_ms(500);
 80020e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020e8:	f001 fbea 	bl	80038c0 <delay_ms>
      dmxl_set_usart_baud(i, 250000);
 80020ec:	4638      	mov	r0, r7
 80020ee:	4909      	ldr	r1, [pc, #36]	; (8002114 <dmxl_set_baud_rates+0xd0>)
 80020f0:	f7ff fd50 	bl	8001b94 <dmxl_set_usart_baud>
  }
}

void dmxl_set_baud_rates()
{
  for (int i = 0; i < NUM_DMXL; i++)
 80020f4:	3701      	adds	r7, #1
 80020f6:	2f04      	cmp	r7, #4
 80020f8:	f104 0418 	add.w	r4, r4, #24
 80020fc:	d1a9      	bne.n	8002052 <dmxl_set_baud_rates+0xe>
      dmxl_write_data(i, DMXL_DEFAULT_ID, 1, 0x04, &baud_code);
      delay_ms(500);
      dmxl_set_usart_baud(i, 250000);
    }
  }
}
 80020fe:	b004      	add	sp, #16
 8002100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (g_dmxl_ports[i].comms_state != DMXL_CS_PING)
        pong_received = true;
    }
    if (pong_received)
    {
      printf("received rx @ 250 kbit from dmxl %d\r\n", i);
 8002104:	4639      	mov	r1, r7
 8002106:	4805      	ldr	r0, [pc, #20]	; (800211c <dmxl_set_baud_rates+0xd8>)
 8002108:	f001 fda6 	bl	8003c58 <printf>
      continue; // hooray. it's already at the target baud rate
 800210c:	e7f2      	b.n	80020f4 <dmxl_set_baud_rates+0xb0>
 800210e:	bf00      	nop
 8002110:	2000000c 	.word	0x2000000c
 8002114:	0003d090 	.word	0x0003d090
 8002118:	0800aab8 	.word	0x0800aab8
 800211c:	0800aa90 	.word	0x0800aa90

08002120 <dmxl_process_rings>:
    }
  }
}

void dmxl_process_rings()
{
 8002120:	b508      	push	{r3, lr}
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 8002122:	2000      	movs	r0, #0
 8002124:	f7ff fe3c 	bl	8001da0 <dmxl_process_ring>
 8002128:	2001      	movs	r0, #1
 800212a:	f7ff fe39 	bl	8001da0 <dmxl_process_ring>
 800212e:	2002      	movs	r0, #2
 8002130:	f7ff fe36 	bl	8001da0 <dmxl_process_ring>
 8002134:	2003      	movs	r0, #3
}
 8002136:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 800213a:	f7ff be31 	b.w	8001da0 <dmxl_process_ring>
 800213e:	bf00      	nop

08002140 <dmxl_set_led>:
}

// See Dynamixel addresses here: http://support.robotis.com/en/product/dynamixel/mx_series/mx-28.htm
void dmxl_set_led(const uint8_t port_idx, const uint8_t dmxl_id,
                  const uint8_t enable)
{
 8002140:	b500      	push	{lr}
 8002142:	b085      	sub	sp, #20
  uint8_t d = enable ? 1 : 0;
 8002144:	3200      	adds	r2, #0
 8002146:	ab04      	add	r3, sp, #16
 8002148:	bf18      	it	ne
 800214a:	2201      	movne	r2, #1
 800214c:	f803 2d01 	strb.w	r2, [r3, #-1]!
  dmxl_write_data(port_idx, dmxl_id, 1, 25, &d); // 25 = LED address
 8002150:	2201      	movs	r2, #1
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	2319      	movs	r3, #25
 8002156:	f7ff fc5f 	bl	8001a18 <dmxl_write_data>
}
 800215a:	b005      	add	sp, #20
 800215c:	f85d fb04 	ldr.w	pc, [sp], #4

08002160 <dmxl_set_torque_enable>:


void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
 8002160:	b500      	push	{lr}
 8002162:	b085      	sub	sp, #20
  uint8_t d = enable ? 1 : 0;
 8002164:	3200      	adds	r2, #0
 8002166:	ab04      	add	r3, sp, #16
 8002168:	bf18      	it	ne
 800216a:	2201      	movne	r2, #1
 800216c:	f803 2d01 	strb.w	r2, [r3, #-1]!
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 8002170:	2201      	movs	r2, #1
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	2318      	movs	r3, #24
 8002176:	f7ff fc4f 	bl	8001a18 <dmxl_write_data>
}
 800217a:	b005      	add	sp, #20
 800217c:	f85d fb04 	ldr.w	pc, [sp], #4

08002180 <dmxl_set_angle_limits>:

void dmxl_set_angle_limits(const uint8_t port_idx, const uint8_t dmxl_id,
                           const uint16_t cw_limit, const uint16_t ccw_limit)
{
 8002180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002182:	b085      	sub	sp, #20
 8002184:	461c      	mov	r4, r3
  uint8_t d[4];
  d[0] = cw_limit & 0xff;
  d[1] = (cw_limit >> 8) & 0xff;
  d[2] = ccw_limit & 0xff;
  d[3] = (ccw_limit >> 8) & 0xff;
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
 8002186:	ab03      	add	r3, sp, #12
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
}

void dmxl_set_angle_limits(const uint8_t port_idx, const uint8_t dmxl_id,
                           const uint16_t cw_limit, const uint16_t ccw_limit)
{
 8002188:	4615      	mov	r5, r2
  uint8_t d[4];
  d[0] = cw_limit & 0xff;
  d[1] = (cw_limit >> 8) & 0xff;
 800218a:	0a17      	lsrs	r7, r2, #8
  d[2] = ccw_limit & 0xff;
  d[3] = (ccw_limit >> 8) & 0xff;
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
 800218c:	9300      	str	r3, [sp, #0]
{
  uint8_t d[4];
  d[0] = cw_limit & 0xff;
  d[1] = (cw_limit >> 8) & 0xff;
  d[2] = ccw_limit & 0xff;
  d[3] = (ccw_limit >> 8) & 0xff;
 800218e:	0a26      	lsrs	r6, r4, #8
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
 8002190:	2204      	movs	r2, #4
 8002192:	2306      	movs	r3, #6

void dmxl_set_angle_limits(const uint8_t port_idx, const uint8_t dmxl_id,
                           const uint16_t cw_limit, const uint16_t ccw_limit)
{
  uint8_t d[4];
  d[0] = cw_limit & 0xff;
 8002194:	f88d 500c 	strb.w	r5, [sp, #12]
  d[1] = (cw_limit >> 8) & 0xff;
 8002198:	f88d 700d 	strb.w	r7, [sp, #13]
  d[2] = ccw_limit & 0xff;
 800219c:	f88d 400e 	strb.w	r4, [sp, #14]
  d[3] = (ccw_limit >> 8) & 0xff;
 80021a0:	f88d 600f 	strb.w	r6, [sp, #15]
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
 80021a4:	f7ff fc38 	bl	8001a18 <dmxl_write_data>
}
 80021a8:	b005      	add	sp, #20
 80021aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021ac <dmxl_set_res_divider>:

void dmxl_set_res_divider(const uint8_t port_idx, const uint8_t dmxl_id,
                          const uint8_t res_divider)
{
 80021ac:	b510      	push	{r4, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	ac04      	add	r4, sp, #16
  dmxl_write_data(port_idx, dmxl_id, 1, 22, &res_divider);
 80021b2:	2316      	movs	r3, #22
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
}

void dmxl_set_res_divider(const uint8_t port_idx, const uint8_t dmxl_id,
                          const uint8_t res_divider)
{
 80021b4:	f804 2d01 	strb.w	r2, [r4, #-1]!
  dmxl_write_data(port_idx, dmxl_id, 1, 22, &res_divider);
 80021b8:	2201      	movs	r2, #1
 80021ba:	9400      	str	r4, [sp, #0]
 80021bc:	f7ff fc2c 	bl	8001a18 <dmxl_write_data>
}
 80021c0:	b004      	add	sp, #16
 80021c2:	bd10      	pop	{r4, pc}

080021c4 <dmxl_set_multiturn_offset>:

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
 80021c4:	b530      	push	{r4, r5, lr}
 80021c6:	b085      	sub	sp, #20
  uint8_t d[2];
  d[0] = offset & 0xff;
  d[1] = (offset >> 8) & 0xff;
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 80021c8:	ab03      	add	r3, sp, #12
  dmxl_write_data(port_idx, dmxl_id, 1, 22, &res_divider);
}

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
 80021ca:	4614      	mov	r4, r2
  uint8_t d[2];
  d[0] = offset & 0xff;
  d[1] = (offset >> 8) & 0xff;
 80021cc:	0a15      	lsrs	r5, r2, #8
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2202      	movs	r2, #2
 80021d2:	2314      	movs	r3, #20

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
 80021d4:	f88d 400c 	strb.w	r4, [sp, #12]
  d[1] = (offset >> 8) & 0xff;
 80021d8:	f88d 500d 	strb.w	r5, [sp, #13]
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 80021dc:	f7ff fc1c 	bl	8001a18 <dmxl_write_data>
}
 80021e0:	b005      	add	sp, #20
 80021e2:	bd30      	pop	{r4, r5, pc}

080021e4 <dmxl_set_speed_dir>:

void dmxl_set_speed_dir(const uint8_t port_idx, const uint8_t dmxl_id,
                        const uint16_t speed, const uint8_t dir)
{
 80021e4:	b530      	push	{r4, r5, lr}
  uint8_t d[2];
  d[0] = speed & 0xff;
  d[1] = ((speed >> 8) & 0x03) | (dir ? 0x04 : 0);
 80021e6:	2b00      	cmp	r3, #0
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
}

void dmxl_set_speed_dir(const uint8_t port_idx, const uint8_t dmxl_id,
                        const uint16_t speed, const uint8_t dir)
{
 80021e8:	b085      	sub	sp, #20
 80021ea:	4615      	mov	r5, r2
  uint8_t d[2];
  d[0] = speed & 0xff;
  d[1] = ((speed >> 8) & 0x03) | (dir ? 0x04 : 0);
 80021ec:	f3c2 2301 	ubfx	r3, r2, #8, #2
 80021f0:	bf14      	ite	ne
 80021f2:	2404      	movne	r4, #4
 80021f4:	2400      	moveq	r4, #0
  dmxl_write_data(port_idx, dmxl_id, 2, 32, d);
 80021f6:	aa03      	add	r2, sp, #12
void dmxl_set_speed_dir(const uint8_t port_idx, const uint8_t dmxl_id,
                        const uint16_t speed, const uint8_t dir)
{
  uint8_t d[2];
  d[0] = speed & 0xff;
  d[1] = ((speed >> 8) & 0x03) | (dir ? 0x04 : 0);
 80021f8:	431c      	orrs	r4, r3
  dmxl_write_data(port_idx, dmxl_id, 2, 32, d);
 80021fa:	9200      	str	r2, [sp, #0]
 80021fc:	2320      	movs	r3, #32
 80021fe:	2202      	movs	r2, #2

void dmxl_set_speed_dir(const uint8_t port_idx, const uint8_t dmxl_id,
                        const uint16_t speed, const uint8_t dir)
{
  uint8_t d[2];
  d[0] = speed & 0xff;
 8002200:	f88d 500c 	strb.w	r5, [sp, #12]
  d[1] = ((speed >> 8) & 0x03) | (dir ? 0x04 : 0);
 8002204:	f88d 400d 	strb.w	r4, [sp, #13]
  dmxl_write_data(port_idx, dmxl_id, 2, 32, d);
 8002208:	f7ff fc06 	bl	8001a18 <dmxl_write_data>
}
 800220c:	b005      	add	sp, #20
 800220e:	bd30      	pop	{r4, r5, pc}

08002210 <dmxl_set_control_mode>:

void dmxl_set_control_mode(const uint8_t port_idx,
                           const dmxl_control_mode_t control_mode)
{
 8002210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  //printf("dmxl_set_control_mode %d %d\r\n", port_idx, (int)control_mode);
  if (port_idx >= NUM_DMXL)
 8002214:	2803      	cmp	r0, #3
  dmxl_write_data(port_idx, dmxl_id, 2, 32, d);
}

void dmxl_set_control_mode(const uint8_t port_idx,
                           const dmxl_control_mode_t control_mode)
{
 8002216:	b084      	sub	sp, #16
 8002218:	4605      	mov	r5, r0
  //printf("dmxl_set_control_mode %d %d\r\n", port_idx, (int)control_mode);
  if (port_idx >= NUM_DMXL)
 800221a:	d806      	bhi.n	800222a <dmxl_set_control_mode+0x1a>
    return;
  if (control_mode == DMXL_CM_IDLE || control_mode == DMXL_CM_VELOCITY)
 800221c:	2901      	cmp	r1, #1
 800221e:	460c      	mov	r4, r1
 8002220:	d94e      	bls.n	80022c0 <dmxl_set_control_mode+0xb0>
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 0);
    delay_us(1);
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 0);
  }
  else if (control_mode == DMXL_CM_POSITION)
 8002222:	2902      	cmp	r1, #2
 8002224:	d004      	beq.n	8002230 <dmxl_set_control_mode+0x20>
      delay_us(1);
      dmxl_set_multiturn_offset(port_idx, DMXL_DEFAULT_ID, 13000);  // Places motor close enough to middle of 0-28672 range
      divider_is_sent[port_idx] = 1;
    }
  }
  dmxl_control_mode = control_mode;
 8002226:	4b32      	ldr	r3, [pc, #200]	; (80022f0 <dmxl_set_control_mode+0xe0>)
 8002228:	701c      	strb	r4, [r3, #0]
}
 800222a:	b004      	add	sp, #16
 800222c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

// See Dynamixel addresses here: http://support.robotis.com/en/product/dynamixel/mx_series/mx-28.htm
void dmxl_set_led(const uint8_t port_idx, const uint8_t dmxl_id,
                  const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 8002230:	af04      	add	r7, sp, #16
 8002232:	2601      	movs	r6, #1
 8002234:	f807 6d04 	strb.w	r6, [r7, #-4]!
  dmxl_write_data(port_idx, dmxl_id, 1, 25, &d); // 25 = LED address
 8002238:	4631      	mov	r1, r6
 800223a:	4632      	mov	r2, r6
 800223c:	2319      	movs	r3, #25
 800223e:	9700      	str	r7, [sp, #0]
 8002240:	f7ff fbea 	bl	8001a18 <dmxl_write_data>
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 0);
  }
  else if (control_mode == DMXL_CM_POSITION)
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 1);
    delay_us(1);
 8002244:	4630      	mov	r0, r6
 8002246:	f001 fb29 	bl	800389c <delay_us>

void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 800224a:	4631      	mov	r1, r6
 800224c:	4632      	mov	r2, r6
 800224e:	2318      	movs	r3, #24
 8002250:	4628      	mov	r0, r5
 8002252:	9700      	str	r7, [sp, #0]


void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 8002254:	f88d 600c 	strb.w	r6, [sp, #12]
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 8002258:	f7ff fbde 	bl	8001a18 <dmxl_write_data>
  else if (control_mode == DMXL_CM_POSITION)
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 1);
    delay_us(1);
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 1);
    delay_us(1);
 800225c:	4630      	mov	r0, r6
 800225e:	f001 fb1d 	bl	800389c <delay_us>
    dmxl_set_angle_limits(port_idx, DMXL_DEFAULT_ID, 4095, 4095);  // Enables multi-turn mode w/ position control
    // http://support.robotis.com/en/product/dynamixel/mx_series/mx-64.htm#Actuator_Address_0B1
    if (divider_is_sent[port_idx] == 0) {
 8002262:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80022f4 <dmxl_set_control_mode+0xe4>
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 1);
    delay_us(1);
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 1);
    delay_us(1);
    dmxl_set_angle_limits(port_idx, DMXL_DEFAULT_ID, 4095, 4095);  // Enables multi-turn mode w/ position control
 8002266:	f640 72ff 	movw	r2, #4095	; 0xfff
 800226a:	4613      	mov	r3, r2
 800226c:	4628      	mov	r0, r5
 800226e:	4631      	mov	r1, r6
 8002270:	f7ff ff86 	bl	8002180 <dmxl_set_angle_limits>
    // http://support.robotis.com/en/product/dynamixel/mx_series/mx-64.htm#Actuator_Address_0B1
    if (divider_is_sent[port_idx] == 0) {
 8002274:	f818 3005 	ldrb.w	r3, [r8, r5]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1d4      	bne.n	8002226 <dmxl_set_control_mode+0x16>
      delay_us(1);
 800227c:	4630      	mov	r0, r6
 800227e:	f001 fb0d 	bl	800389c <delay_us>
 8002282:	ab04      	add	r3, sp, #16
 8002284:	2204      	movs	r2, #4
 8002286:	f803 2d05 	strb.w	r2, [r3, #-5]!
}

void dmxl_set_res_divider(const uint8_t port_idx, const uint8_t dmxl_id,
                          const uint8_t res_divider)
{
  dmxl_write_data(port_idx, dmxl_id, 1, 22, &res_divider);
 800228a:	4631      	mov	r1, r6
 800228c:	4632      	mov	r2, r6
 800228e:	4628      	mov	r0, r5
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2316      	movs	r3, #22
 8002294:	f7ff fbc0 	bl	8001a18 <dmxl_write_data>
    dmxl_set_angle_limits(port_idx, DMXL_DEFAULT_ID, 4095, 4095);  // Enables multi-turn mode w/ position control
    // http://support.robotis.com/en/product/dynamixel/mx_series/mx-64.htm#Actuator_Address_0B1
    if (divider_is_sent[port_idx] == 0) {
      delay_us(1);
      dmxl_set_res_divider(port_idx, DMXL_DEFAULT_ID, 4);
      delay_us(1);
 8002298:	4630      	mov	r0, r6
 800229a:	f001 faff 	bl	800389c <delay_us>
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
  d[1] = (offset >> 8) & 0xff;
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 800229e:	9700      	str	r7, [sp, #0]

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
 80022a0:	f04f 0ec8 	mov.w	lr, #200	; 0xc8
  d[1] = (offset >> 8) & 0xff;
 80022a4:	2732      	movs	r7, #50	; 0x32
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 80022a6:	4628      	mov	r0, r5
 80022a8:	4631      	mov	r1, r6
 80022aa:	4622      	mov	r2, r4
 80022ac:	2314      	movs	r3, #20

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
 80022ae:	f88d e00c 	strb.w	lr, [sp, #12]
  d[1] = (offset >> 8) & 0xff;
 80022b2:	f88d 700d 	strb.w	r7, [sp, #13]
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 80022b6:	f7ff fbaf 	bl	8001a18 <dmxl_write_data>
    if (divider_is_sent[port_idx] == 0) {
      delay_us(1);
      dmxl_set_res_divider(port_idx, DMXL_DEFAULT_ID, 4);
      delay_us(1);
      dmxl_set_multiturn_offset(port_idx, DMXL_DEFAULT_ID, 13000);  // Places motor close enough to middle of 0-28672 range
      divider_is_sent[port_idx] = 1;
 80022ba:	f808 6005 	strb.w	r6, [r8, r5]
 80022be:	e7b2      	b.n	8002226 <dmxl_set_control_mode+0x16>

// See Dynamixel addresses here: http://support.robotis.com/en/product/dynamixel/mx_series/mx-28.htm
void dmxl_set_led(const uint8_t port_idx, const uint8_t dmxl_id,
                  const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 80022c0:	ae04      	add	r6, sp, #16
 80022c2:	2700      	movs	r7, #0
 80022c4:	f806 7d04 	strb.w	r7, [r6, #-4]!
  dmxl_write_data(port_idx, dmxl_id, 1, 25, &d); // 25 = LED address
 80022c8:	2101      	movs	r1, #1
 80022ca:	460a      	mov	r2, r1
 80022cc:	2319      	movs	r3, #25
 80022ce:	9600      	str	r6, [sp, #0]
 80022d0:	f7ff fba2 	bl	8001a18 <dmxl_write_data>
  if (port_idx >= NUM_DMXL)
    return;
  if (control_mode == DMXL_CM_IDLE || control_mode == DMXL_CM_VELOCITY)
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 0);
    delay_us(1);
 80022d4:	2001      	movs	r0, #1
 80022d6:	f001 fae1 	bl	800389c <delay_us>

void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 80022da:	2101      	movs	r1, #1
 80022dc:	9600      	str	r6, [sp, #0]
 80022de:	4628      	mov	r0, r5
 80022e0:	460a      	mov	r2, r1
 80022e2:	2318      	movs	r3, #24


void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 80022e4:	f88d 700c 	strb.w	r7, [sp, #12]
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 80022e8:	f7ff fb96 	bl	8001a18 <dmxl_write_data>
 80022ec:	e79b      	b.n	8002226 <dmxl_set_control_mode+0x16>
 80022ee:	bf00      	nop
 80022f0:	2000ffdc 	.word	0x2000ffdc
 80022f4:	2000f38c 	.word	0x2000f38c

080022f8 <dmxl_set_control_target>:

void dmxl_set_control_target(const uint8_t port_idx,
                             const uint16_t target)
{
  //printf("dmxl_set_control_target %d %d\r\n", port_idx, (int)target);
  if (port_idx >= NUM_DMXL)
 80022f8:	2803      	cmp	r0, #3
 80022fa:	d815      	bhi.n	8002328 <dmxl_set_control_target+0x30>
  dmxl_control_mode = control_mode;
}

void dmxl_set_control_target(const uint8_t port_idx,
                             const uint16_t target)
{
 80022fc:	b510      	push	{r4, lr}
    return;
  uint8_t d[2];
  d[0] = target & 0xff;
  d[1] = (target >> 8) & 0xff;
  uint8_t start_addr = 30;  // position control
  if (dmxl_control_mode == DMXL_CM_VELOCITY) {
 80022fe:	4b0b      	ldr	r3, [pc, #44]	; (800232c <dmxl_set_control_target+0x34>)
 8002300:	781b      	ldrb	r3, [r3, #0]
  dmxl_control_mode = control_mode;
}

void dmxl_set_control_target(const uint8_t port_idx,
                             const uint16_t target)
{
 8002302:	b084      	sub	sp, #16
    return;
  uint8_t d[2];
  d[0] = target & 0xff;
  d[1] = (target >> 8) & 0xff;
  uint8_t start_addr = 30;  // position control
  if (dmxl_control_mode == DMXL_CM_VELOCITY) {
 8002304:	2b01      	cmp	r3, #1
    start_addr = 32; // velocity control
  }
  dmxl_write_data(port_idx, DMXL_DEFAULT_ID, 2, start_addr, d);
 8002306:	aa03      	add	r2, sp, #12
{
  //printf("dmxl_set_control_target %d %d\r\n", port_idx, (int)target);
  if (port_idx >= NUM_DMXL)
    return;
  uint8_t d[2];
  d[0] = target & 0xff;
 8002308:	f88d 100c 	strb.w	r1, [sp, #12]
  d[1] = (target >> 8) & 0xff;
 800230c:	ea4f 2411 	mov.w	r4, r1, lsr #8
  uint8_t start_addr = 30;  // position control
  if (dmxl_control_mode == DMXL_CM_VELOCITY) {
    start_addr = 32; // velocity control
  }
  dmxl_write_data(port_idx, DMXL_DEFAULT_ID, 2, start_addr, d);
 8002310:	9200      	str	r2, [sp, #0]
 8002312:	bf14      	ite	ne
 8002314:	231e      	movne	r3, #30
 8002316:	2320      	moveq	r3, #32
 8002318:	2101      	movs	r1, #1
 800231a:	2202      	movs	r2, #2
  //printf("dmxl_set_control_target %d %d\r\n", port_idx, (int)target);
  if (port_idx >= NUM_DMXL)
    return;
  uint8_t d[2];
  d[0] = target & 0xff;
  d[1] = (target >> 8) & 0xff;
 800231c:	f88d 400d 	strb.w	r4, [sp, #13]
  uint8_t start_addr = 30;  // position control
  if (dmxl_control_mode == DMXL_CM_VELOCITY) {
    start_addr = 32; // velocity control
  }
  dmxl_write_data(port_idx, DMXL_DEFAULT_ID, 2, start_addr, d);
 8002320:	f7ff fb7a 	bl	8001a18 <dmxl_write_data>
}
 8002324:	b004      	add	sp, #16
 8002326:	bd10      	pop	{r4, pc}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	2000ffdc 	.word	0x2000ffdc

08002330 <dmxl_set_all_control_targets>:

void dmxl_set_all_control_targets(const uint16_t *targets)
{
 8002330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002334:	4d36      	ldr	r5, [pc, #216]	; (8002410 <dmxl_set_all_control_targets+0xe0>)
 8002336:	4937      	ldr	r1, [pc, #220]	; (8002414 <dmxl_set_all_control_targets+0xe4>)
 8002338:	1e87      	subs	r7, r0, #2
 800233a:	f100 0c06 	add.w	ip, r0, #6
 800233e:	462e      	mov	r6, r5
  for (int i = 0; i < NUM_DMXL; i++)
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
    u->CR1 |=  USART_CR1_TE; // enable the transmitter
    pkts[i][0] = 0xff;
 8002340:	f04f 0eff 	mov.w	lr, #255	; 0xff
    pkts[i][1] = 0xff;
    pkts[i][2] = DMXL_DEFAULT_ID;
 8002344:	f04f 0b01 	mov.w	fp, #1
    pkts[i][3] = 5; // write 2 bytes + 3 byte overhead
 8002348:	f04f 0905 	mov.w	r9, #5
    pkts[i][4] = 3; // instruction: "write data"
 800234c:	f04f 0803 	mov.w	r8, #3
    } else {
      pkts[i][5] = 30; // start address: control target (position)
    }
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
    pkts[i][8] = 0; // checksum
 8002350:	f04f 0a00 	mov.w	sl, #0
{
  // set all control targets simultaneously
  static uint8_t pkts[NUM_DMXL][12];
  for (int i = 0; i < NUM_DMXL; i++)
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
 8002354:	68f2      	ldr	r2, [r6, #12]
    u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
 8002356:	8993      	ldrh	r3, [r2, #12]
 8002358:	f023 0304 	bic.w	r3, r3, #4
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	0c1b      	lsrs	r3, r3, #16
 8002360:	8193      	strh	r3, [r2, #12]
    u->CR1 |=  USART_CR1_TE; // enable the transmitter
 8002362:	8993      	ldrh	r3, [r2, #12]
 8002364:	b29b      	uxth	r3, r3
 8002366:	f043 0308 	orr.w	r3, r3, #8
 800236a:	8193      	strh	r3, [r2, #12]
    pkts[i][0] = 0xff;
    pkts[i][1] = 0xff;
    pkts[i][2] = DMXL_DEFAULT_ID;
    pkts[i][3] = 5; // write 2 bytes + 3 byte overhead
    pkts[i][4] = 3; // instruction: "write data"
    if (dmxl_control_mode == DMXL_CM_VELOCITY) {
 800236c:	4b2a      	ldr	r3, [pc, #168]	; (8002418 <dmxl_set_all_control_targets+0xe8>)
  for (int i = 0; i < NUM_DMXL; i++)
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
    u->CR1 |=  USART_CR1_TE; // enable the transmitter
    pkts[i][0] = 0xff;
 800236e:	f801 ec01 	strb.w	lr, [r1, #-1]
    pkts[i][1] = 0xff;
    pkts[i][2] = DMXL_DEFAULT_ID;
    pkts[i][3] = 5; // write 2 bytes + 3 byte overhead
    pkts[i][4] = 3; // instruction: "write data"
    if (dmxl_control_mode == DMXL_CM_VELOCITY) {
 8002372:	781b      	ldrb	r3, [r3, #0]
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
    u->CR1 |=  USART_CR1_TE; // enable the transmitter
    pkts[i][0] = 0xff;
    pkts[i][1] = 0xff;
 8002374:	f881 e000 	strb.w	lr, [r1]
    pkts[i][2] = DMXL_DEFAULT_ID;
    pkts[i][3] = 5; // write 2 bytes + 3 byte overhead
    pkts[i][4] = 3; // instruction: "write data"
    if (dmxl_control_mode == DMXL_CM_VELOCITY) {
      pkts[i][5] = 32; // start address: control target (velocity)
 8002378:	2b01      	cmp	r3, #1
 800237a:	bf14      	ite	ne
 800237c:	231e      	movne	r3, #30
 800237e:	2320      	moveq	r3, #32
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
    u->CR1 |=  USART_CR1_TE; // enable the transmitter
    pkts[i][0] = 0xff;
    pkts[i][1] = 0xff;
    pkts[i][2] = DMXL_DEFAULT_ID;
 8002380:	f881 b001 	strb.w	fp, [r1, #1]
    pkts[i][3] = 5; // write 2 bytes + 3 byte overhead
 8002384:	f881 9002 	strb.w	r9, [r1, #2]
    pkts[i][4] = 3; // instruction: "write data"
 8002388:	f881 8003 	strb.w	r8, [r1, #3]
    if (dmxl_control_mode == DMXL_CM_VELOCITY) {
      pkts[i][5] = 32; // start address: control target (velocity)
 800238c:	710b      	strb	r3, [r1, #4]
    } else {
      pkts[i][5] = 30; // start address: control target (position)
    }
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
 800238e:	f837 3f02 	ldrh.w	r3, [r7, #2]!
 8002392:	714b      	strb	r3, [r1, #5]
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	718b      	strb	r3, [r1, #6]
    pkts[i][8] = 0; // checksum
 8002398:	f881 a007 	strb.w	sl, [r1, #7]
 800239c:	1d88      	adds	r0, r1, #6
 800239e:	460a      	mov	r2, r1
 80023a0:	2300      	movs	r3, #0
    for (int j = 2; j < 8; j++)
      pkts[i][8] += pkts[i][j];
 80023a2:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 80023a6:	4423      	add	r3, r4
 80023a8:	b2db      	uxtb	r3, r3
      pkts[i][5] = 30; // start address: control target (position)
    }
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
    pkts[i][8] = 0; // checksum
    for (int j = 2; j < 8; j++)
 80023aa:	4282      	cmp	r2, r0
      pkts[i][8] += pkts[i][j];
 80023ac:	71cb      	strb	r3, [r1, #7]
      pkts[i][5] = 30; // start address: control target (position)
    }
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
    pkts[i][8] = 0; // checksum
    for (int j = 2; j < 8; j++)
 80023ae:	d1f8      	bne.n	80023a2 <dmxl_set_all_control_targets+0x72>
      pkts[i][8] += pkts[i][j];
    pkts[i][8] = ~pkts[i][8]; // invert checksum
 80023b0:	43db      	mvns	r3, r3

void dmxl_set_all_control_targets(const uint16_t *targets)
{
  // set all control targets simultaneously
  static uint8_t pkts[NUM_DMXL][12];
  for (int i = 0; i < NUM_DMXL; i++)
 80023b2:	4567      	cmp	r7, ip
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
    pkts[i][8] = 0; // checksum
    for (int j = 2; j < 8; j++)
      pkts[i][8] += pkts[i][j];
    pkts[i][8] = ~pkts[i][8]; // invert checksum
 80023b4:	71cb      	strb	r3, [r1, #7]
 80023b6:	f106 0618 	add.w	r6, r6, #24
 80023ba:	f101 010c 	add.w	r1, r1, #12

void dmxl_set_all_control_targets(const uint16_t *targets)
{
  // set all control targets simultaneously
  static uint8_t pkts[NUM_DMXL][12];
  for (int i = 0; i < NUM_DMXL; i++)
 80023be:	d1c9      	bne.n	8002354 <dmxl_set_all_control_targets+0x24>
 80023c0:	4c16      	ldr	r4, [pc, #88]	; (800241c <dmxl_set_all_control_targets+0xec>)
 80023c2:	f104 0609 	add.w	r6, r4, #9
    } else {
      pkts[i][5] = 30; // start address: control target (position)
    }
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
    pkts[i][8] = 0; // checksum
 80023c6:	4812      	ldr	r0, [pc, #72]	; (8002410 <dmxl_set_all_control_targets+0xe0>)
 80023c8:	2100      	movs	r1, #0
  }
  for (int j = 0; j < 9; j++)
  {
    for (int i = 0; i < NUM_DMXL; i++)
    {
      USART_TypeDef *u = g_dmxl_ports[i].uart;
 80023ca:	68c2      	ldr	r2, [r0, #12]
      while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
 80023cc:	8813      	ldrh	r3, [r2, #0]
 80023ce:	061f      	lsls	r7, r3, #24
 80023d0:	d5fc      	bpl.n	80023cc <dmxl_set_all_control_targets+0x9c>
      u->DR = pkts[i][j];
 80023d2:	5c63      	ldrb	r3, [r4, r1]
 80023d4:	8093      	strh	r3, [r2, #4]
 80023d6:	310c      	adds	r1, #12
      pkts[i][8] += pkts[i][j];
    pkts[i][8] = ~pkts[i][8]; // invert checksum
  }
  for (int j = 0; j < 9; j++)
  {
    for (int i = 0; i < NUM_DMXL; i++)
 80023d8:	2930      	cmp	r1, #48	; 0x30
 80023da:	f100 0018 	add.w	r0, r0, #24
 80023de:	d1f4      	bne.n	80023ca <dmxl_set_all_control_targets+0x9a>
 80023e0:	3401      	adds	r4, #1
    pkts[i][8] = 0; // checksum
    for (int j = 2; j < 8; j++)
      pkts[i][8] += pkts[i][j];
    pkts[i][8] = ~pkts[i][8]; // invert checksum
  }
  for (int j = 0; j < 9; j++)
 80023e2:	42b4      	cmp	r4, r6
 80023e4:	d1ef      	bne.n	80023c6 <dmxl_set_all_control_targets+0x96>
 80023e6:	490e      	ldr	r1, [pc, #56]	; (8002420 <dmxl_set_all_control_targets+0xf0>)
      u->DR = pkts[i][j];
    }
  }
  for (int i = 0; i < NUM_DMXL; i++)
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
 80023e8:	68ea      	ldr	r2, [r5, #12]
    while (!(u->SR & USART_SR_TC)) { } // wait for last TX to finish
 80023ea:	8813      	ldrh	r3, [r2, #0]
 80023ec:	065b      	lsls	r3, r3, #25
 80023ee:	d5fc      	bpl.n	80023ea <dmxl_set_all_control_targets+0xba>
    u->CR1 &= ~USART_CR1_TE; // disable the transmitter
 80023f0:	8993      	ldrh	r3, [r2, #12]
 80023f2:	f023 0308 	bic.w	r3, r3, #8
 80023f6:	041b      	lsls	r3, r3, #16
 80023f8:	0c1b      	lsrs	r3, r3, #16
 80023fa:	8193      	strh	r3, [r2, #12]
    u->CR1 |=  USART_CR1_RE; // re-enable the receiver
 80023fc:	8993      	ldrh	r3, [r2, #12]
 80023fe:	3518      	adds	r5, #24
 8002400:	b29b      	uxth	r3, r3
 8002402:	f043 0304 	orr.w	r3, r3, #4
      USART_TypeDef *u = g_dmxl_ports[i].uart;
      while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
      u->DR = pkts[i][j];
    }
  }
  for (int i = 0; i < NUM_DMXL; i++)
 8002406:	428d      	cmp	r5, r1
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    while (!(u->SR & USART_SR_TC)) { } // wait for last TX to finish
    u->CR1 &= ~USART_CR1_TE; // disable the transmitter
    u->CR1 |=  USART_CR1_RE; // re-enable the receiver
 8002408:	8193      	strh	r3, [r2, #12]
      USART_TypeDef *u = g_dmxl_ports[i].uart;
      while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
      u->DR = pkts[i][j];
    }
  }
  for (int i = 0; i < NUM_DMXL; i++)
 800240a:	d1ed      	bne.n	80023e8 <dmxl_set_all_control_targets+0xb8>
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    while (!(u->SR & USART_SR_TC)) { } // wait for last TX to finish
    u->CR1 &= ~USART_CR1_TE; // disable the transmitter
    u->CR1 |=  USART_CR1_RE; // re-enable the receiver
  }
}
 800240c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002410:	2000000c 	.word	0x2000000c
 8002414:	2000f395 	.word	0x2000f395
 8002418:	2000ffdc 	.word	0x2000ffdc
 800241c:	2000f394 	.word	0x2000f394
 8002420:	2000006c 	.word	0x2000006c

08002424 <dmxl_poll>:

void dmxl_poll()
{
 8002424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002426:	4e1f      	ldr	r6, [pc, #124]	; (80024a4 <dmxl_poll+0x80>)
 8002428:	b083      	sub	sp, #12
  // spin through and poll all their angles, velocities, currents,
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
 800242a:	2400      	movs	r4, #0
    u->CR1 |=  USART_CR1_RE; // re-enable the receiver
  }
}

void dmxl_poll()
{
 800242c:	4635      	mov	r5, r6
  // spin through and poll all their angles, velocities, currents,
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
 800242e:	2702      	movs	r7, #2
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
 8002430:	b2e0      	uxtb	r0, r4
{
  // spin through and poll all their angles, velocities, currents,
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
 8002432:	742f      	strb	r7, [r5, #16]
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
 8002434:	2108      	movs	r1, #8

void dmxl_poll()
{
  // spin through and poll all their angles, velocities, currents,
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
 8002436:	3401      	adds	r4, #1
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
 8002438:	2224      	movs	r2, #36	; 0x24
 800243a:	f7ff fb0f 	bl	8001a5c <dmxl_read_data.constprop.3>

void dmxl_poll()
{
  // spin through and poll all their angles, velocities, currents,
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
 800243e:	2c04      	cmp	r4, #4
 8002440:	f105 0518 	add.w	r5, r5, #24
 8002444:	d1f4      	bne.n	8002430 <dmxl_poll+0xc>
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
  }
  volatile uint32_t t_start = SYSTIME;
 8002446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  while (SYSTIME - t_start < 10000)
 800244a:	461d      	mov	r5, r3
 800244c:	4f16      	ldr	r7, [pc, #88]	; (80024a8 <dmxl_poll+0x84>)
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
  }
  volatile uint32_t t_start = SYSTIME;
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	9301      	str	r3, [sp, #4]
  while (SYSTIME - t_start < 10000)
 8002452:	f242 740f 	movw	r4, #9999	; 0x270f
 8002456:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002458:	9a01      	ldr	r2, [sp, #4]
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	42a3      	cmp	r3, r4
 800245e:	d816      	bhi.n	800248e <dmxl_poll+0x6a>
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 8002460:	2000      	movs	r0, #0
 8002462:	f7ff fc9d 	bl	8001da0 <dmxl_process_ring>
 8002466:	2001      	movs	r0, #1
 8002468:	f7ff fc9a 	bl	8001da0 <dmxl_process_ring>
 800246c:	2002      	movs	r0, #2
 800246e:	f7ff fc97 	bl	8001da0 <dmxl_process_ring>
 8002472:	2003      	movs	r0, #3
 8002474:	f7ff fc94 	bl	8001da0 <dmxl_process_ring>
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <dmxl_poll+0x88>)
 800247a:	2201      	movs	r2, #1
  {
    dmxl_process_rings();
    // also spin around the ethernet rings here? probably not.
    int all_done = 1;
    for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
      if (g_dmxl_ports[i].comms_state == DMXL_CS_POLL_STATE)
 800247c:	7c19      	ldrb	r1, [r3, #16]
 800247e:	3318      	adds	r3, #24
        all_done = 0;
 8002480:	2902      	cmp	r1, #2
 8002482:	bf08      	it	eq
 8002484:	2200      	moveq	r2, #0
  while (SYSTIME - t_start < 10000)
  {
    dmxl_process_rings();
    // also spin around the ethernet rings here? probably not.
    int all_done = 1;
    for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
 8002486:	42bb      	cmp	r3, r7
 8002488:	d1f8      	bne.n	800247c <dmxl_poll+0x58>
      if (g_dmxl_ports[i].comms_state == DMXL_CS_POLL_STATE)
        all_done = 0;
    if (all_done)
 800248a:	2a00      	cmp	r2, #0
 800248c:	d0e3      	beq.n	8002456 <dmxl_poll+0x32>
      break;
  }
  // set the comms state to "idle" even if we didn't hear back from it by now
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    g_dmxl_ports[i].comms_state = DMXL_CS_IDLE;
 800248e:	2300      	movs	r3, #0
 8002490:	7433      	strb	r3, [r6, #16]
 8002492:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 8002496:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
 800249a:	f886 3058 	strb.w	r3, [r6, #88]	; 0x58
}
 800249e:	b003      	add	sp, #12
 80024a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024a2:	bf00      	nop
 80024a4:	2000000c 	.word	0x2000000c
 80024a8:	2000006c 	.word	0x2000006c
 80024ac:	2000000c 	.word	0x2000000c

080024b0 <dmxl_poll_nonblocking_tick>:

void dmxl_poll_nonblocking_tick(const uint8_t dmxl_port)
{
  if (dmxl_port >= NUM_DMXL)
 80024b0:	2803      	cmp	r0, #3
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    g_dmxl_ports[i].comms_state = DMXL_CS_IDLE;
}

void dmxl_poll_nonblocking_tick(const uint8_t dmxl_port)
{
 80024b2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024b6:	4603      	mov	r3, r0
  if (dmxl_port >= NUM_DMXL)
 80024b8:	d81e      	bhi.n	80024f8 <dmxl_poll_nonblocking_tick+0x48>
    return; // let's not corrupt memory.
  dmxl_async_poll_state_t *ps = &dmxl_poll_states[dmxl_port]; // save typing
  dmxl_port_t *dp = &g_dmxl_ports[dmxl_port];
  USART_TypeDef *u = dp->uart;
 80024ba:	4a5b      	ldr	r2, [pc, #364]	; (8002628 <dmxl_poll_nonblocking_tick+0x178>)
  static uint8_t dmxl_txbuf[NUM_DMXL][256];
  static uint8_t dmxl_txbuf_readpos[NUM_DMXL] = {0};
  static uint32_t dmxl_rx_start_time[NUM_DMXL] = {0};
  switch (*ps)
 80024bc:	4d5b      	ldr	r5, [pc, #364]	; (800262c <dmxl_poll_nonblocking_tick+0x17c>)
{
  if (dmxl_port >= NUM_DMXL)
    return; // let's not corrupt memory.
  dmxl_async_poll_state_t *ps = &dmxl_poll_states[dmxl_port]; // save typing
  dmxl_port_t *dp = &g_dmxl_ports[dmxl_port];
  USART_TypeDef *u = dp->uart;
 80024be:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 80024c2:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
  static uint8_t dmxl_txbuf[NUM_DMXL][256];
  static uint8_t dmxl_txbuf_readpos[NUM_DMXL] = {0};
  static uint32_t dmxl_rx_start_time[NUM_DMXL] = {0};
  switch (*ps)
 80024c6:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
{
  if (dmxl_port >= NUM_DMXL)
    return; // let's not corrupt memory.
  dmxl_async_poll_state_t *ps = &dmxl_poll_states[dmxl_port]; // save typing
  dmxl_port_t *dp = &g_dmxl_ports[dmxl_port];
  USART_TypeDef *u = dp->uart;
 80024ca:	68e1      	ldr	r1, [r4, #12]
  static uint8_t dmxl_txbuf[NUM_DMXL][256];
  static uint8_t dmxl_txbuf_readpos[NUM_DMXL] = {0};
  static uint32_t dmxl_rx_start_time[NUM_DMXL] = {0};
  switch (*ps)
 80024cc:	2a01      	cmp	r2, #1
 80024ce:	d015      	beq.n	80024fc <dmxl_poll_nonblocking_tick+0x4c>
 80024d0:	d351      	bcc.n	8002576 <dmxl_poll_nonblocking_tick+0xc6>
 80024d2:	2a02      	cmp	r2, #2
 80024d4:	d034      	beq.n	8002540 <dmxl_poll_nonblocking_tick+0x90>
 80024d6:	3201      	adds	r2, #1
 80024d8:	d10a      	bne.n	80024f0 <dmxl_poll_nonblocking_tick+0x40>
  {
    case DPS_DONE: // poll start
      dmxl_rx_start_time[dmxl_port] = SYSTIME;
 80024da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80024de:	4a54      	ldr	r2, [pc, #336]	; (8002630 <dmxl_poll_nonblocking_tick+0x180>)
 80024e0:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80024e2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
      *ps = DPS_WAIT; // give any outbound command some time to be processed
 80024e6:	2200      	movs	r2, #0
 80024e8:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
      break;
 80024ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *ps = DPS_DONE; // hooray, we received a full state message
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 10000) // wait at most 10ms
        *ps = DPS_DONE; // time to give up. gotta know when to fold em
      break;
    default:
      *ps = DPS_DONE; // shouldn't get here
 80024f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024f4:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
 80024f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dmxl_txbuf_readpos[dmxl_port] = 0;
        *ps = DPS_POLL_TX;
      }
      break;
    case DPS_POLL_TX:
      if (u->SR & USART_SR_TXE) // is there room in the TX buffer ?
 80024fc:	880a      	ldrh	r2, [r1, #0]
 80024fe:	0610      	lsls	r0, r2, #24
 8002500:	d5fa      	bpl.n	80024f8 <dmxl_poll_nonblocking_tick+0x48>
      {
        if (dmxl_txbuf_readpos[dmxl_port] < 7)
 8002502:	484c      	ldr	r0, [pc, #304]	; (8002634 <dmxl_poll_nonblocking_tick+0x184>)
 8002504:	5cc2      	ldrb	r2, [r0, r3]
 8002506:	2a06      	cmp	r2, #6
 8002508:	f240 8084 	bls.w	8002614 <dmxl_poll_nonblocking_tick+0x164>
        {
          dmxl_txbuf_readpos[dmxl_port]++;
          u->DR = dmxl_txbuf[dmxl_port][dmxl_txbuf_readpos[dmxl_port]];
        }
        else if (u->SR & USART_SR_TC) // last byte must fully complete
 800250c:	880a      	ldrh	r2, [r1, #0]
 800250e:	0652      	lsls	r2, r2, #25
 8002510:	d5f2      	bpl.n	80024f8 <dmxl_poll_nonblocking_tick+0x48>
        {
          u->CR1 &= ~USART_CR1_TE; // disable the transmitter
 8002512:	898a      	ldrh	r2, [r1, #12]
          u->CR1 |=  USART_CR1_RE; // re-enable the transmitter
          dmxl_rx_start_time[dmxl_port] = SYSTIME;
 8002514:	4846      	ldr	r0, [pc, #280]	; (8002630 <dmxl_poll_nonblocking_tick+0x180>)
          dmxl_txbuf_readpos[dmxl_port]++;
          u->DR = dmxl_txbuf[dmxl_port][dmxl_txbuf_readpos[dmxl_port]];
        }
        else if (u->SR & USART_SR_TC) // last byte must fully complete
        {
          u->CR1 &= ~USART_CR1_TE; // disable the transmitter
 8002516:	f022 0208 	bic.w	r2, r2, #8
 800251a:	0412      	lsls	r2, r2, #16
 800251c:	0c12      	lsrs	r2, r2, #16
 800251e:	818a      	strh	r2, [r1, #12]
          u->CR1 |=  USART_CR1_RE; // re-enable the transmitter
 8002520:	898a      	ldrh	r2, [r1, #12]
 8002522:	b292      	uxth	r2, r2
 8002524:	f042 0204 	orr.w	r2, r2, #4
          dmxl_rx_start_time[dmxl_port] = SYSTIME;
 8002528:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
          u->DR = dmxl_txbuf[dmxl_port][dmxl_txbuf_readpos[dmxl_port]];
        }
        else if (u->SR & USART_SR_TC) // last byte must fully complete
        {
          u->CR1 &= ~USART_CR1_TE; // disable the transmitter
          u->CR1 |=  USART_CR1_RE; // re-enable the transmitter
 800252c:	818a      	strh	r2, [r1, #12]
          dmxl_rx_start_time[dmxl_port] = SYSTIME;
 800252e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002530:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          g_dmxl_ports[dmxl_port].comms_state = DMXL_CS_POLL_STATE;
 8002534:	2202      	movs	r2, #2
 8002536:	7422      	strb	r2, [r4, #16]
          *ps = DPS_POLL_RX;
 8002538:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
 800253c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002540:	4606      	mov	r6, r0
        }
      }
      break;
    case DPS_POLL_RX:
      dmxl_process_ring(dmxl_port);
 8002542:	f7ff fc2d 	bl	8001da0 <dmxl_process_ring>
      if (g_dmxl_ports[dmxl_port].comms_state != DMXL_CS_POLL_STATE)
 8002546:	7c23      	ldrb	r3, [r4, #16]
 8002548:	2b02      	cmp	r3, #2
        *ps = DPS_DONE; // hooray, we received a full state message
 800254a:	bf1c      	itt	ne
 800254c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8002550:	f845 3026 	strne.w	r3, [r5, r6, lsl #2]
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 10000) // wait at most 10ms
 8002554:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002558:	4b35      	ldr	r3, [pc, #212]	; (8002630 <dmxl_poll_nonblocking_tick+0x180>)
 800255a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800255c:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8002560:	f242 7310 	movw	r3, #10000	; 0x2710
 8002564:	1a52      	subs	r2, r2, r1
 8002566:	429a      	cmp	r2, r3
 8002568:	d9c6      	bls.n	80024f8 <dmxl_poll_nonblocking_tick+0x48>
        *ps = DPS_DONE; // time to give up. gotta know when to fold em
 800256a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800256e:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
 8002572:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    case DPS_DONE: // poll start
      dmxl_rx_start_time[dmxl_port] = SYSTIME;
      *ps = DPS_WAIT; // give any outbound command some time to be processed
      break;
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
 8002576:	482e      	ldr	r0, [pc, #184]	; (8002630 <dmxl_poll_nonblocking_tick+0x180>)
 8002578:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800257c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8002580:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002582:	f241 3088 	movw	r0, #5000	; 0x1388
 8002586:	1b12      	subs	r2, r2, r4
 8002588:	4282      	cmp	r2, r0
 800258a:	d9b5      	bls.n	80024f8 <dmxl_poll_nonblocking_tick+0x48>
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
 800258c:	898a      	ldrh	r2, [r1, #12]
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
 800258e:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 8002638 <dmxl_poll_nonblocking_tick+0x188>
      *ps = DPS_WAIT; // give any outbound command some time to be processed
      break;
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
 8002592:	f022 0204 	bic.w	r2, r2, #4
 8002596:	0412      	lsls	r2, r2, #16
 8002598:	0c12      	lsrs	r2, r2, #16
 800259a:	818a      	strh	r2, [r1, #12]
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
 800259c:	898e      	ldrh	r6, [r1, #12]
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
 800259e:	021f      	lsls	r7, r3, #8
      break;
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
 80025a0:	b2b6      	uxth	r6, r6
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
 80025a2:	eb0e 0207 	add.w	r2, lr, r7
      break;
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
 80025a6:	f046 0608 	orr.w	r6, r6, #8
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
        dmxl_txbuf[dmxl_port][1] = 0xff; // more header
        dmxl_txbuf[dmxl_port][2] = DMXL_DEFAULT_ID;
 80025aa:	f04f 0b01 	mov.w	fp, #1
      break;
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
 80025ae:	818e      	strh	r6, [r1, #12]
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
 80025b0:	24ff      	movs	r4, #255	; 0xff
        dmxl_txbuf[dmxl_port][1] = 0xff; // more header
        dmxl_txbuf[dmxl_port][2] = DMXL_DEFAULT_ID;
        dmxl_txbuf[dmxl_port][3] = 4;  // packet length = 4
 80025b2:	f04f 0a04 	mov.w	sl, #4
        dmxl_txbuf[dmxl_port][4] = 2;  // instruction: "read data"
 80025b6:	f04f 0902 	mov.w	r9, #2
        dmxl_txbuf[dmxl_port][5] = 36; // start address
 80025ba:	f04f 0824 	mov.w	r8, #36	; 0x24
        dmxl_txbuf[dmxl_port][6] = 8;  // number of bytes to read
 80025be:	f04f 0c08 	mov.w	ip, #8
 80025c2:	eb07 000b 	add.w	r0, r7, fp
 80025c6:	1dbe      	adds	r6, r7, #6
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
 80025c8:	f80e 4007 	strb.w	r4, [lr, r7]
 80025cc:	4470      	add	r0, lr
        dmxl_txbuf[dmxl_port][1] = 0xff; // more header
 80025ce:	7054      	strb	r4, [r2, #1]
        dmxl_txbuf[dmxl_port][2] = DMXL_DEFAULT_ID;
 80025d0:	f882 b002 	strb.w	fp, [r2, #2]
        dmxl_txbuf[dmxl_port][3] = 4;  // packet length = 4
 80025d4:	f882 a003 	strb.w	sl, [r2, #3]
        dmxl_txbuf[dmxl_port][4] = 2;  // instruction: "read data"
 80025d8:	f882 9004 	strb.w	r9, [r2, #4]
        dmxl_txbuf[dmxl_port][5] = 36; // start address
 80025dc:	f882 8005 	strb.w	r8, [r2, #5]
        dmxl_txbuf[dmxl_port][6] = 8;  // number of bytes to read
 80025e0:	f882 c006 	strb.w	ip, [r2, #6]
 80025e4:	4476      	add	r6, lr
        uint8_t csum = 0;
 80025e6:	2200      	movs	r2, #0
        for (int i = 2; i < 7; i++)
          csum += dmxl_txbuf[dmxl_port][i];
 80025e8:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80025ec:	4422      	add	r2, r4
        dmxl_txbuf[dmxl_port][3] = 4;  // packet length = 4
        dmxl_txbuf[dmxl_port][4] = 2;  // instruction: "read data"
        dmxl_txbuf[dmxl_port][5] = 36; // start address
        dmxl_txbuf[dmxl_port][6] = 8;  // number of bytes to read
        uint8_t csum = 0;
        for (int i = 2; i < 7; i++)
 80025ee:	42b0      	cmp	r0, r6
          csum += dmxl_txbuf[dmxl_port][i];
 80025f0:	b2d2      	uxtb	r2, r2
        dmxl_txbuf[dmxl_port][3] = 4;  // packet length = 4
        dmxl_txbuf[dmxl_port][4] = 2;  // instruction: "read data"
        dmxl_txbuf[dmxl_port][5] = 36; // start address
        dmxl_txbuf[dmxl_port][6] = 8;  // number of bytes to read
        uint8_t csum = 0;
        for (int i = 2; i < 7; i++)
 80025f2:	d1f9      	bne.n	80025e8 <dmxl_poll_nonblocking_tick+0x138>
          csum += dmxl_txbuf[dmxl_port][i];
        dmxl_txbuf[dmxl_port][7] = ~csum;
 80025f4:	eb0e 0007 	add.w	r0, lr, r7
 80025f8:	43d2      	mvns	r2, r2
 80025fa:	71c2      	strb	r2, [r0, #7]
        u->DR; // read any garbage on the RX register
        u->DR = dmxl_txbuf[dmxl_port][0]; // kick it off
 80025fc:	f81e 2007 	ldrb.w	r2, [lr, r7]
        dmxl_txbuf_readpos[dmxl_port] = 0;
 8002600:	480c      	ldr	r0, [pc, #48]	; (8002634 <dmxl_poll_nonblocking_tick+0x184>)
        dmxl_txbuf[dmxl_port][6] = 8;  // number of bytes to read
        uint8_t csum = 0;
        for (int i = 2; i < 7; i++)
          csum += dmxl_txbuf[dmxl_port][i];
        dmxl_txbuf[dmxl_port][7] = ~csum;
        u->DR; // read any garbage on the RX register
 8002602:	888c      	ldrh	r4, [r1, #4]
        u->DR = dmxl_txbuf[dmxl_port][0]; // kick it off
 8002604:	808a      	strh	r2, [r1, #4]
        dmxl_txbuf_readpos[dmxl_port] = 0;
 8002606:	2100      	movs	r1, #0
 8002608:	54c1      	strb	r1, [r0, r3]
        *ps = DPS_POLL_TX;
 800260a:	2201      	movs	r2, #1
 800260c:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
 8002610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    case DPS_POLL_TX:
      if (u->SR & USART_SR_TXE) // is there room in the TX buffer ?
      {
        if (dmxl_txbuf_readpos[dmxl_port] < 7)
        {
          dmxl_txbuf_readpos[dmxl_port]++;
 8002614:	3201      	adds	r2, #1
 8002616:	b2d2      	uxtb	r2, r2
          u->DR = dmxl_txbuf[dmxl_port][dmxl_txbuf_readpos[dmxl_port]];
 8002618:	eb02 2403 	add.w	r4, r2, r3, lsl #8
 800261c:	4d06      	ldr	r5, [pc, #24]	; (8002638 <dmxl_poll_nonblocking_tick+0x188>)
    case DPS_POLL_TX:
      if (u->SR & USART_SR_TXE) // is there room in the TX buffer ?
      {
        if (dmxl_txbuf_readpos[dmxl_port] < 7)
        {
          dmxl_txbuf_readpos[dmxl_port]++;
 800261e:	54c2      	strb	r2, [r0, r3]
          u->DR = dmxl_txbuf[dmxl_port][dmxl_txbuf_readpos[dmxl_port]];
 8002620:	5d2b      	ldrb	r3, [r5, r4]
 8002622:	808b      	strh	r3, [r1, #4]
 8002624:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002628:	2000000c 	.word	0x2000000c
 800262c:	2000006c 	.word	0x2000006c
 8002630:	2000fbcc 	.word	0x2000fbcc
 8002634:	2000f390 	.word	0x2000f390
 8002638:	2000f3c4 	.word	0x2000f3c4

0800263c <dmxl_all_available>:
      break;
  }
}

bool dmxl_all_available()
{
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <dmxl_all_available+0x1c>)
 800263e:	f103 0110 	add.w	r1, r3, #16
  for (int i = 0; i < NUM_DMXL; i++)
    if (dmxl_poll_states[i] != DPS_DONE)
 8002642:	f853 2b04 	ldr.w	r2, [r3], #4
 8002646:	3201      	adds	r2, #1
 8002648:	d103      	bne.n	8002652 <dmxl_all_available+0x16>
  }
}

bool dmxl_all_available()
{
  for (int i = 0; i < NUM_DMXL; i++)
 800264a:	428b      	cmp	r3, r1
 800264c:	d1f9      	bne.n	8002642 <dmxl_all_available+0x6>
    if (dmxl_poll_states[i] != DPS_DONE)
      return false;
  return true;
 800264e:	2001      	movs	r0, #1
 8002650:	4770      	bx	lr

bool dmxl_all_available()
{
  for (int i = 0; i < NUM_DMXL; i++)
    if (dmxl_poll_states[i] != DPS_DONE)
      return false;
 8002652:	2000      	movs	r0, #0
  return true;
}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	2000006c 	.word	0x2000006c

0800265c <fan_init>:

#define PORTD_FAN_EN 15

void fan_init()
{
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800265c:	4905      	ldr	r1, [pc, #20]	; (8002674 <fan_init+0x18>)
  GPIOD->MODER |= 1 << (PORTD_FAN_EN * 2); // set as output pin
 800265e:	4a06      	ldr	r2, [pc, #24]	; (8002678 <fan_init+0x1c>)

#define PORTD_FAN_EN 15

void fan_init()
{
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8002660:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002662:	f043 0308 	orr.w	r3, r3, #8
 8002666:	630b      	str	r3, [r1, #48]	; 0x30
  GPIOD->MODER |= 1 << (PORTD_FAN_EN * 2); // set as output pin
 8002668:	6813      	ldr	r3, [r2, #0]
 800266a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800
 8002678:	40020c00 	.word	0x40020c00

0800267c <fan_on>:
}

void fan_on()
{
  GPIOD->BSRRL |= 1 << PORTD_FAN_EN;
 800267c:	4a04      	ldr	r2, [pc, #16]	; (8002690 <fan_on+0x14>)
 800267e:	8b13      	ldrh	r3, [r2, #24]
 8002680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002688:	b29b      	uxth	r3, r3
 800268a:	8313      	strh	r3, [r2, #24]
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	40020c00 	.word	0x40020c00

08002694 <fan_off>:
}

void fan_off()
{
  GPIOD->BSRRH |= 1 << PORTD_FAN_EN;
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <fan_off+0x14>)
 8002696:	8b53      	ldrh	r3, [r2, #26]
 8002698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800269c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	8353      	strh	r3, [r2, #26]
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40020c00 	.word	0x40020c00

080026ac <takktile_bridge_spi_txrx.part.0>:
  const uint8_t reg_val = rxd[2];
  //printf("spi reg 0x%02x = 0x%02x\r\n", reg_idx, reg_val);
  return reg_val;
}

static void takktile_bridge_spi_txrx(const uint8_t bridge_idx,
 80026ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (bridge_idx > 1)
    return;
  SPI_TypeDef *spi;
  GPIO_TypeDef *cs_gpio;
  uint32_t cs_pin_mask;
  if (bridge_idx == 0)
 80026ae:	4d2e      	ldr	r5, [pc, #184]	; (8002768 <takktile_bridge_spi_txrx.part.0+0xbc>)
 80026b0:	4c2e      	ldr	r4, [pc, #184]	; (800276c <takktile_bridge_spi_txrx.part.0+0xc0>)
 80026b2:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 8002774 <takktile_bridge_spi_txrx.part.0+0xc8>
 80026b6:	4f2e      	ldr	r7, [pc, #184]	; (8002770 <takktile_bridge_spi_txrx.part.0+0xc4>)
 80026b8:	2800      	cmp	r0, #0
 80026ba:	bf08      	it	eq
 80026bc:	462c      	moveq	r4, r5
  const uint8_t reg_val = rxd[2];
  //printf("spi reg 0x%02x = 0x%02x\r\n", reg_idx, reg_val);
  return reg_val;
}

static void takktile_bridge_spi_txrx(const uint8_t bridge_idx,
 80026be:	b085      	sub	sp, #20
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
  }
  // assert CS
  cs_gpio->BSRRH = cs_pin_mask;
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
 80026c0:	f04f 0000 	mov.w	r0, #0
  if (bridge_idx > 1)
    return;
  SPI_TypeDef *spi;
  GPIO_TypeDef *cs_gpio;
  uint32_t cs_pin_mask;
  if (bridge_idx == 0)
 80026c4:	bf0c      	ite	eq
 80026c6:	2510      	moveq	r5, #16
 80026c8:	f44f 7500 	movne.w	r5, #512	; 0x200
    spi = SPI2;
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
  }
  // assert CS
  cs_gpio->BSRRH = cs_pin_mask;
 80026cc:	8365      	strh	r5, [r4, #26]
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
 80026ce:	9000      	str	r0, [sp, #0]
 80026d0:	9e00      	ldr	r6, [sp, #0]
  if (bridge_idx > 1)
    return;
  SPI_TypeDef *spi;
  GPIO_TypeDef *cs_gpio;
  uint32_t cs_pin_mask;
  if (bridge_idx == 0)
 80026d2:	bf0c      	ite	eq
 80026d4:	4670      	moveq	r0, lr
 80026d6:	4638      	movne	r0, r7
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
  }
  // assert CS
  cs_gpio->BSRRH = cs_pin_mask;
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
 80026d8:	2e09      	cmp	r6, #9
 80026da:	dc05      	bgt.n	80026e8 <takktile_bridge_spi_txrx.part.0+0x3c>
 80026dc:	9e00      	ldr	r6, [sp, #0]
 80026de:	3601      	adds	r6, #1
 80026e0:	9600      	str	r6, [sp, #0]
 80026e2:	9e00      	ldr	r6, [sp, #0]
 80026e4:	2e09      	cmp	r6, #9
 80026e6:	ddf9      	ble.n	80026dc <takktile_bridge_spi_txrx.part.0+0x30>
  spi->DR; // clear rx buffer
 80026e8:	8986      	ldrh	r6, [r0, #12]
  for (uint8_t i = 0; i < txrx_len; i++)
 80026ea:	b321      	cbz	r1, 8002736 <takktile_bridge_spi_txrx.part.0+0x8a>
 80026ec:	1e4f      	subs	r7, r1, #1
 80026ee:	fa52 f787 	uxtab	r7, r2, r7
 80026f2:	1e51      	subs	r1, r2, #1
 80026f4:	461e      	mov	r6, r3
    while (spi->SR & SPI_SR_BSY) { }
    if (rxd)
      rxd[i] = spi->DR;
    else
      spi->DR;
    for (volatile int i = 0; i < 150; i++) { } // wait between SPI bytes
 80026f6:	f04f 0e00 	mov.w	lr, #0
  cs_gpio->BSRRH = cs_pin_mask;
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
  spi->DR; // clear rx buffer
  for (uint8_t i = 0; i < txrx_len; i++)
  {
    spi->DR = txd[i]; // read internal register command
 80026fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80026fe:	8182      	strh	r2, [r0, #12]
    while (!(spi->SR & SPI_SR_TXE)) { } // wait for buffer room
 8002700:	8902      	ldrh	r2, [r0, #8]
 8002702:	0792      	lsls	r2, r2, #30
 8002704:	d5fc      	bpl.n	8002700 <takktile_bridge_spi_txrx.part.0+0x54>
    while (!(spi->SR & SPI_SR_RXNE)) { }
 8002706:	8902      	ldrh	r2, [r0, #8]
 8002708:	07d2      	lsls	r2, r2, #31
 800270a:	d5fc      	bpl.n	8002706 <takktile_bridge_spi_txrx.part.0+0x5a>
    while (spi->SR & SPI_SR_BSY) { }
 800270c:	8902      	ldrh	r2, [r0, #8]
 800270e:	0612      	lsls	r2, r2, #24
 8002710:	d4fc      	bmi.n	800270c <takktile_bridge_spi_txrx.part.0+0x60>
    if (rxd)
      rxd[i] = spi->DR;
 8002712:	8982      	ldrh	r2, [r0, #12]
  {
    spi->DR = txd[i]; // read internal register command
    while (!(spi->SR & SPI_SR_TXE)) { } // wait for buffer room
    while (!(spi->SR & SPI_SR_RXNE)) { }
    while (spi->SR & SPI_SR_BSY) { }
    if (rxd)
 8002714:	b103      	cbz	r3, 8002718 <takktile_bridge_spi_txrx.part.0+0x6c>
      rxd[i] = spi->DR;
 8002716:	7032      	strb	r2, [r6, #0]
    else
      spi->DR;
    for (volatile int i = 0; i < 150; i++) { } // wait between SPI bytes
 8002718:	f8cd e004 	str.w	lr, [sp, #4]
 800271c:	9a01      	ldr	r2, [sp, #4]
 800271e:	2a95      	cmp	r2, #149	; 0x95
 8002720:	dc05      	bgt.n	800272e <takktile_bridge_spi_txrx.part.0+0x82>
 8002722:	9a01      	ldr	r2, [sp, #4]
 8002724:	3201      	adds	r2, #1
 8002726:	9201      	str	r2, [sp, #4]
 8002728:	9a01      	ldr	r2, [sp, #4]
 800272a:	2a95      	cmp	r2, #149	; 0x95
 800272c:	ddf9      	ble.n	8002722 <takktile_bridge_spi_txrx.part.0+0x76>
  }
  // assert CS
  cs_gpio->BSRRH = cs_pin_mask;
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
  spi->DR; // clear rx buffer
  for (uint8_t i = 0; i < txrx_len; i++)
 800272e:	42b9      	cmp	r1, r7
 8002730:	f106 0601 	add.w	r6, r6, #1
 8002734:	d1e1      	bne.n	80026fa <takktile_bridge_spi_txrx.part.0+0x4e>
      rxd[i] = spi->DR;
    else
      spi->DR;
    for (volatile int i = 0; i < 150; i++) { } // wait between SPI bytes
  }
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
 8002736:	2300      	movs	r3, #0
 8002738:	9302      	str	r3, [sp, #8]
 800273a:	9b02      	ldr	r3, [sp, #8]
 800273c:	2b09      	cmp	r3, #9
 800273e:	dc05      	bgt.n	800274c <takktile_bridge_spi_txrx.part.0+0xa0>
 8002740:	9b02      	ldr	r3, [sp, #8]
 8002742:	3301      	adds	r3, #1
 8002744:	9302      	str	r3, [sp, #8]
 8002746:	9b02      	ldr	r3, [sp, #8]
 8002748:	2b09      	cmp	r3, #9
 800274a:	ddf9      	ble.n	8002740 <takktile_bridge_spi_txrx.part.0+0x94>
  cs_gpio->BSRRL = cs_pin_mask;
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
 800274c:	2300      	movs	r3, #0
    else
      spi->DR;
    for (volatile int i = 0; i < 150; i++) { } // wait between SPI bytes
  }
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
  cs_gpio->BSRRL = cs_pin_mask;
 800274e:	8325      	strh	r5, [r4, #24]
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
 8002750:	9303      	str	r3, [sp, #12]
 8002752:	9b03      	ldr	r3, [sp, #12]
 8002754:	2b09      	cmp	r3, #9
 8002756:	dc05      	bgt.n	8002764 <takktile_bridge_spi_txrx.part.0+0xb8>
 8002758:	9b03      	ldr	r3, [sp, #12]
 800275a:	3301      	adds	r3, #1
 800275c:	9303      	str	r3, [sp, #12]
 800275e:	9b03      	ldr	r3, [sp, #12]
 8002760:	2b09      	cmp	r3, #9
 8002762:	ddf9      	ble.n	8002758 <takktile_bridge_spi_txrx.part.0+0xac>
}
 8002764:	b005      	add	sp, #20
 8002766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002768:	40020000 	.word	0x40020000
 800276c:	40020400 	.word	0x40020400
 8002770:	40003800 	.word	0x40003800
 8002774:	40013000 	.word	0x40013000

08002778 <takktile_bridge_read_reg>:
  takktile_bridge_spi_txrx(bridge_idx, 3, txd, NULL);
}

static uint8_t takktile_bridge_read_reg(const uint8_t bridge_idx,
                                       const uint8_t reg_idx)
{
 8002778:	b500      	push	{lr}
 800277a:	b083      	sub	sp, #12
  uint8_t rxd[3] = {0};
 800277c:	2300      	movs	r3, #0
  uint8_t txd[3] = {0x21, reg_idx, 0};
 800277e:	2221      	movs	r2, #33	; 0x21
static void takktile_bridge_spi_txrx(const uint8_t bridge_idx,
                                    const uint8_t txrx_len,
                                    const uint8_t *txd,
                                    uint8_t *rxd)
{
  if (bridge_idx > 1)
 8002780:	2801      	cmp	r0, #1

static uint8_t takktile_bridge_read_reg(const uint8_t bridge_idx,
                                       const uint8_t reg_idx)
{
  uint8_t rxd[3] = {0};
  uint8_t txd[3] = {0x21, reg_idx, 0};
 8002782:	f88d 1005 	strb.w	r1, [sp, #5]
}

static uint8_t takktile_bridge_read_reg(const uint8_t bridge_idx,
                                       const uint8_t reg_idx)
{
  uint8_t rxd[3] = {0};
 8002786:	f8ad 3000 	strh.w	r3, [sp]
 800278a:	f88d 3002 	strb.w	r3, [sp, #2]
  uint8_t txd[3] = {0x21, reg_idx, 0};
 800278e:	f88d 3006 	strb.w	r3, [sp, #6]
 8002792:	f88d 2004 	strb.w	r2, [sp, #4]
static void takktile_bridge_spi_txrx(const uint8_t bridge_idx,
                                    const uint8_t txrx_len,
                                    const uint8_t *txd,
                                    uint8_t *rxd)
{
  if (bridge_idx > 1)
 8002796:	d903      	bls.n	80027a0 <takktile_bridge_read_reg+0x28>
 8002798:	4618      	mov	r0, r3
  uint8_t txd[3] = {0x21, reg_idx, 0};
  takktile_bridge_spi_txrx(bridge_idx, 3, txd, rxd);
  const uint8_t reg_val = rxd[2];
  //printf("spi reg 0x%02x = 0x%02x\r\n", reg_idx, reg_val);
  return reg_val;
}
 800279a:	b003      	add	sp, #12
 800279c:	f85d fb04 	ldr.w	pc, [sp], #4
 80027a0:	2103      	movs	r1, #3
 80027a2:	aa01      	add	r2, sp, #4
 80027a4:	466b      	mov	r3, sp
 80027a6:	f7ff ff81 	bl	80026ac <takktile_bridge_spi_txrx.part.0>
 80027aa:	f89d 0002 	ldrb.w	r0, [sp, #2]
 80027ae:	b003      	add	sp, #12
 80027b0:	f85d fb04 	ldr.w	pc, [sp], #4

080027b4 <takktile_i2c_async_start.part.1>:

takktile_bridged_i2c_status_t
g_takktile_bridged_i2c_status[NUM_BRIDGED_I2C] =
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void takktile_i2c_async_start(const uint8_t port, const uint8_t address,
 80027b4:	b538      	push	{r3, r4, r5, lr}
 80027b6:	4604      	mov	r4, r0
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
    return; // bogus

  g_takktile_i2c_async_address[port]  = address;
 80027b8:	4d21      	ldr	r5, [pc, #132]	; (8002840 <takktile_i2c_async_start.part.1+0x8c>)
  g_takktile_i2c_async_data_len[port] = data_len;
 80027ba:	4822      	ldr	r0, [pc, #136]	; (8002844 <takktile_i2c_async_start.part.1+0x90>)
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
    return; // bogus

  g_takktile_i2c_async_address[port]  = address;
 80027bc:	5529      	strb	r1, [r5, r4]
  g_takktile_i2c_async_data_len[port] = data_len;
 80027be:	5503      	strb	r3, [r0, r4]
  if (data)
    memcpy(g_takktile_i2c_async_data[port], data, data_len);
 80027c0:	4611      	mov	r1, r2
 80027c2:	4821      	ldr	r0, [pc, #132]	; (8002848 <takktile_i2c_async_start.part.1+0x94>)
  if (port >= NUM_TACTILE_PORTS - 1)
    return; // bogus

  g_takktile_i2c_async_address[port]  = address;
  g_takktile_i2c_async_data_len[port] = data_len;
  if (data)
 80027c4:	2a00      	cmp	r2, #0
 80027c6:	d035      	beq.n	8002834 <takktile_i2c_async_start.part.1+0x80>
    memcpy(g_takktile_i2c_async_data[port], data, data_len);
 80027c8:	461a      	mov	r2, r3
 80027ca:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 80027ce:	f001 f94b 	bl	8003a68 <memcpy>
  else
    memset(g_takktile_i2c_async_data[port], 0, data_len);
  g_takktile_i2c_async_data_txrx_idx[port] = 0;
 80027d2:	4a1e      	ldr	r2, [pc, #120]	; (800284c <takktile_i2c_async_start.part.1+0x98>)
 80027d4:	2300      	movs	r3, #0
/*
  if (port == 2)
    printf("i2c port %d addr 0x%02x len %d\r\n", port, address, data_len);
*/

  if (port == 0 || port == 1)
 80027d6:	2c01      	cmp	r4, #1
  g_takktile_i2c_async_data_len[port] = data_len;
  if (data)
    memcpy(g_takktile_i2c_async_data[port], data, data_len);
  else
    memset(g_takktile_i2c_async_data[port], 0, data_len);
  g_takktile_i2c_async_data_txrx_idx[port] = 0;
 80027d8:	5513      	strb	r3, [r2, r4]
/*
  if (port == 2)
    printf("i2c port %d addr 0x%02x len %d\r\n", port, address, data_len);
*/

  if (port == 0 || port == 1)
 80027da:	d90a      	bls.n	80027f2 <takktile_i2c_async_start.part.1+0x3e>
      i2c->SR1 &= ~I2C_SR1_AF;
    // }

    g_takktile_internal_i2c_status[port] = TATS_START;
  }
  else if (port == 2 || port == 3) // use a bridge
 80027dc:	1ea2      	subs	r2, r4, #2
 80027de:	b2d1      	uxtb	r1, r2
 80027e0:	2901      	cmp	r1, #1
 80027e2:	d91a      	bls.n	800281a <takktile_i2c_async_start.part.1+0x66>
    }
    // assert CS
    cs_gpio->BSRRH = cs_pin_mask;
    g_takktile_bridged_i2c_status[bridge] = TBPS_REQUEST_CS_LOW;
  }
  g_takktile_i2c_async_start_us[port] = SYSTIME;
 80027e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027e8:	4b19      	ldr	r3, [pc, #100]	; (8002850 <takktile_i2c_async_start.part.1+0x9c>)
 80027ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027ec:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80027f0:	bd38      	pop	{r3, r4, r5, pc}
  {
    I2C_TypeDef *i2c;
    if (port == 0)
      i2c = I2C1;
    else
      i2c = I2C3;
 80027f2:	4a18      	ldr	r2, [pc, #96]	; (8002854 <takktile_i2c_async_start.part.1+0xa0>)
 80027f4:	4918      	ldr	r1, [pc, #96]	; (8002858 <takktile_i2c_async_start.part.1+0xa4>)
    // {
      i2c->CR1 |=  I2C_CR1_START;
      i2c->SR1 &= ~I2C_SR1_AF;
    // }

    g_takktile_internal_i2c_status[port] = TATS_START;
 80027f6:	4819      	ldr	r0, [pc, #100]	; (800285c <takktile_i2c_async_start.part.1+0xa8>)
  {
    I2C_TypeDef *i2c;
    if (port == 0)
      i2c = I2C1;
    else
      i2c = I2C3;
 80027f8:	429c      	cmp	r4, r3
 80027fa:	bf08      	it	eq
 80027fc:	4611      	moveq	r1, r2
    // if (port != 0)
    // {
      i2c->CR1 |=  I2C_CR1_START;
 80027fe:	880a      	ldrh	r2, [r1, #0]
 8002800:	b292      	uxth	r2, r2
 8002802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002806:	800a      	strh	r2, [r1, #0]
      i2c->SR1 &= ~I2C_SR1_AF;
 8002808:	8a8a      	ldrh	r2, [r1, #20]
    // }

    g_takktile_internal_i2c_status[port] = TATS_START;
 800280a:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
    else
      i2c = I2C3;
    // if (port != 0)
    // {
      i2c->CR1 |=  I2C_CR1_START;
      i2c->SR1 &= ~I2C_SR1_AF;
 800280e:	f422 6380 	bic.w	r3, r2, #1024	; 0x400
 8002812:	041b      	lsls	r3, r3, #16
 8002814:	0c1b      	lsrs	r3, r3, #16
 8002816:	828b      	strh	r3, [r1, #20]
 8002818:	e7e4      	b.n	80027e4 <takktile_i2c_async_start.part.1+0x30>
  else if (port == 2 || port == 3) // use a bridge
  {
    const uint_fast8_t bridge = port - 2;
    GPIO_TypeDef *cs_gpio = NULL;
    uint32_t cs_pin_mask = 0;
    if (bridge == 0)
 800281a:	4811      	ldr	r0, [pc, #68]	; (8002860 <takktile_i2c_async_start.part.1+0xac>)
 800281c:	4911      	ldr	r1, [pc, #68]	; (8002864 <takktile_i2c_async_start.part.1+0xb0>)
      cs_gpio = GPIOB;
      cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
    }
    // assert CS
    cs_gpio->BSRRH = cs_pin_mask;
    g_takktile_bridged_i2c_status[bridge] = TBPS_REQUEST_CS_LOW;
 800281e:	4d12      	ldr	r5, [pc, #72]	; (8002868 <takktile_i2c_async_start.part.1+0xb4>)
  else if (port == 2 || port == 3) // use a bridge
  {
    const uint_fast8_t bridge = port - 2;
    GPIO_TypeDef *cs_gpio = NULL;
    uint32_t cs_pin_mask = 0;
    if (bridge == 0)
 8002820:	2a00      	cmp	r2, #0
 8002822:	bf16      	itet	ne
 8002824:	4601      	movne	r1, r0
 8002826:	2010      	moveq	r0, #16
 8002828:	f44f 7000 	movne.w	r0, #512	; 0x200
      cs_gpio = GPIOB;
      cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
    }
    // assert CS
    cs_gpio->BSRRH = cs_pin_mask;
    g_takktile_bridged_i2c_status[bridge] = TBPS_REQUEST_CS_LOW;
 800282c:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    {
      cs_gpio = GPIOB;
      cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
    }
    // assert CS
    cs_gpio->BSRRH = cs_pin_mask;
 8002830:	8348      	strh	r0, [r1, #26]
 8002832:	e7d7      	b.n	80027e4 <takktile_i2c_async_start.part.1+0x30>
  g_takktile_i2c_async_address[port]  = address;
  g_takktile_i2c_async_data_len[port] = data_len;
  if (data)
    memcpy(g_takktile_i2c_async_data[port], data, data_len);
  else
    memset(g_takktile_i2c_async_data[port], 0, data_len);
 8002834:	461a      	mov	r2, r3
 8002836:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 800283a:	f001 f9af 	bl	8003b9c <memset>
 800283e:	e7c8      	b.n	80027d2 <takktile_i2c_async_start.part.1+0x1e>
 8002840:	2001044c 	.word	0x2001044c
 8002844:	20010444 	.word	0x20010444
 8002848:	2001002c 	.word	0x2001002c
 800284c:	20010018 	.word	0x20010018
 8002850:	2000fff0 	.word	0x2000fff0
 8002854:	40005400 	.word	0x40005400
 8002858:	40005c00 	.word	0x40005c00
 800285c:	20010000 	.word	0x20010000
 8002860:	40020400 	.word	0x40020400
 8002864:	40020000 	.word	0x40020000
 8002868:	2001043c 	.word	0x2001043c

0800286c <takktile_internal_i2c_async_tick.part.2>:
    g_takktile_bridged_i2c_status[bridge] = TBPS_REQUEST_CS_LOW;
  }
  g_takktile_i2c_async_start_us[port] = SYSTIME;
}

void takktile_internal_i2c_async_tick(const uint_fast8_t port)
 800286c:	b5f0      	push	{r4, r5, r6, r7, lr}
     if (port == 0 && ++tat_cnt % 50000 == 0)
     printf("i2c async tick port %d tats %d sr = 0x%08x\r\n",
     port, (int)*tats, (unsigned)i2c->SR1);
   */

  switch (*status)
 800286e:	4c61      	ldr	r4, [pc, #388]	; (80029f4 <takktile_internal_i2c_async_tick.part.2+0x188>)
  //static int tat_cnt = 0;
  I2C_TypeDef *i2c;
  if (port == 0)
    i2c = I2C1;
  else
    i2c = I2C3;
 8002870:	4961      	ldr	r1, [pc, #388]	; (80029f8 <takktile_internal_i2c_async_tick.part.2+0x18c>)
 8002872:	4b62      	ldr	r3, [pc, #392]	; (80029fc <takktile_internal_i2c_async_tick.part.2+0x190>)
     if (port == 0 && ++tat_cnt % 50000 == 0)
     printf("i2c async tick port %d tats %d sr = 0x%08x\r\n",
     port, (int)*tats, (unsigned)i2c->SR1);
   */

  switch (*status)
 8002874:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
  //static int tat_cnt = 0;
  I2C_TypeDef *i2c;
  if (port == 0)
    i2c = I2C1;
  else
    i2c = I2C3;
 8002878:	2800      	cmp	r0, #0
 800287a:	bf08      	it	eq
 800287c:	460b      	moveq	r3, r1
     if (port == 0 && ++tat_cnt % 50000 == 0)
     printf("i2c async tick port %d tats %d sr = 0x%08x\r\n",
     port, (int)*tats, (unsigned)i2c->SR1);
   */

  switch (*status)
 800287e:	2a05      	cmp	r2, #5
 8002880:	f200 808f 	bhi.w	80029a2 <takktile_internal_i2c_async_tick.part.2+0x136>
 8002884:	e8df f002 	tbb	[pc, r2]
 8002888:	64462016 	.word	0x64462016
 800288c:	0380      	.short	0x0380
        *status = TATS_STOP_WAIT; // wait a bit for the line to clear
        g_takktile_i2c_async_start_us[port] = SYSTIME;
      }
      break;
    case TATS_STOP_WAIT:
      if (SYSTIME - g_takktile_i2c_async_start_us[port] > 10) // rmelo19
 800288e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002892:	4a5b      	ldr	r2, [pc, #364]	; (8002a00 <takktile_internal_i2c_async_tick.part.2+0x194>)
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800289a:	1a9b      	subs	r3, r3, r2
 800289c:	2b0a      	cmp	r3, #10
 800289e:	f240 8085 	bls.w	80029ac <takktile_internal_i2c_async_tick.part.2+0x140>
      {
        if (g_takktile_i2c_async_address_fail[port])
 80028a2:	4b58      	ldr	r3, [pc, #352]	; (8002a04 <takktile_internal_i2c_async_tick.part.2+0x198>)
 80028a4:	5c1b      	ldrb	r3, [r3, r0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d07b      	beq.n	80029a2 <takktile_internal_i2c_async_tick.part.2+0x136>
          *status = TATS_DONE_FAIL;
 80028aa:	f06f 0301 	mvn.w	r3, #1
 80028ae:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 80028b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   */

  switch (*status)
  {
    case TATS_START:
      if (i2c->SR1 & I2C_SR1_SB)
 80028b4:	8a9a      	ldrh	r2, [r3, #20]
 80028b6:	07d5      	lsls	r5, r2, #31
 80028b8:	d578      	bpl.n	80029ac <takktile_internal_i2c_async_tick.part.2+0x140>
      {
        i2c->DR = g_takktile_i2c_async_address[port];
 80028ba:	4953      	ldr	r1, [pc, #332]	; (8002a08 <takktile_internal_i2c_async_tick.part.2+0x19c>)
        *status = TATS_ADDR;
 80028bc:	2201      	movs	r2, #1
  switch (*status)
  {
    case TATS_START:
      if (i2c->SR1 & I2C_SR1_SB)
      {
        i2c->DR = g_takktile_i2c_async_address[port];
 80028be:	5c09      	ldrb	r1, [r1, r0]
 80028c0:	8219      	strh	r1, [r3, #16]
        *status = TATS_ADDR;
 80028c2:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
 80028c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      }
      break;
    case TATS_ADDR:
      if (i2c->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF))
 80028c8:	8a9a      	ldrh	r2, [r3, #20]
 80028ca:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	0552      	lsls	r2, r2, #21
 80028d4:	0d52      	lsrs	r2, r2, #21
 80028d6:	2a00      	cmp	r2, #0
 80028d8:	d068      	beq.n	80029ac <takktile_internal_i2c_async_tick.part.2+0x140>
      {
        bool address_fail = (i2c->SR1 & I2C_SR1_AF) ? true : false;
        g_takktile_i2c_async_address_fail[port] = address_fail;
        int no_payload = (0 == g_takktile_i2c_async_data_len[port]);
 80028da:	494c      	ldr	r1, [pc, #304]	; (8002a0c <takktile_internal_i2c_async_tick.part.2+0x1a0>)
      }
      break;
    case TATS_ADDR:
      if (i2c->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF))
      {
        bool address_fail = (i2c->SR1 & I2C_SR1_AF) ? true : false;
 80028dc:	8a9a      	ldrh	r2, [r3, #20]
        g_takktile_i2c_async_address_fail[port] = address_fail;
 80028de:	4d49      	ldr	r5, [pc, #292]	; (8002a04 <takktile_internal_i2c_async_tick.part.2+0x198>)
        int no_payload = (0 == g_takktile_i2c_async_data_len[port]);
 80028e0:	5c09      	ldrb	r1, [r1, r0]
      }
      break;
    case TATS_ADDR:
      if (i2c->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF))
      {
        bool address_fail = (i2c->SR1 & I2C_SR1_AF) ? true : false;
 80028e2:	f3c2 2280 	ubfx	r2, r2, #10, #1
        g_takktile_i2c_async_address_fail[port] = address_fail;
 80028e6:	542a      	strb	r2, [r5, r0]
        int no_payload = (0 == g_takktile_i2c_async_data_len[port]);
        if (no_payload)
 80028e8:	2900      	cmp	r1, #0
 80028ea:	d060      	beq.n	80029ae <takktile_internal_i2c_async_tick.part.2+0x142>
          i2c->CR1 |= I2C_CR1_STOP; // this seemed needed... not sure why now.
        i2c->SR2; // un-stretch clock by reading here (?)
 80028ec:	8b1d      	ldrh	r5, [r3, #24]
        if (!address_fail && !no_payload)
 80028ee:	bb32      	cbnz	r2, 800293e <takktile_internal_i2c_async_tick.part.2+0xd2>
        {
          if (!(g_takktile_i2c_async_address[port] & 0x1))
 80028f0:	4d45      	ldr	r5, [pc, #276]	; (8002a08 <takktile_internal_i2c_async_tick.part.2+0x19c>)
 80028f2:	5c2d      	ldrb	r5, [r5, r0]
 80028f4:	f015 0501 	ands.w	r5, r5, #1
 80028f8:	d06c      	beq.n	80029d4 <takktile_internal_i2c_async_tick.part.2+0x168>
            *status = TATS_WRITE;
          }
          else
          {
            // it's a read transaction
            g_takktile_i2c_async_data_txrx_idx[port] = 0;
 80028fa:	4d45      	ldr	r5, [pc, #276]	; (8002a10 <takktile_internal_i2c_async_tick.part.2+0x1a4>)
 80028fc:	542a      	strb	r2, [r5, r0]
            if (g_takktile_i2c_async_data_len[port] == 1)
 80028fe:	2901      	cmp	r1, #1
              i2c->CR1 &= ~I2C_CR1_ACK; // single-byte read
 8002900:	881a      	ldrh	r2, [r3, #0]
          }
          else
          {
            // it's a read transaction
            g_takktile_i2c_async_data_txrx_idx[port] = 0;
            if (g_takktile_i2c_async_data_len[port] == 1)
 8002902:	d071      	beq.n	80029e8 <takktile_internal_i2c_async_tick.part.2+0x17c>
              i2c->CR1 &= ~I2C_CR1_ACK; // single-byte read
            else
              i2c->CR1 |=  I2C_CR1_ACK; // multi-byte read. ack this one.
 8002904:	b292      	uxth	r2, r2
 8002906:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800290a:	801a      	strh	r2, [r3, #0]
            *status = TATS_READ;
 800290c:	2303      	movs	r3, #3
 800290e:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 8002912:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *status = TATS_STOP;
        }
      }
      break;
    case TATS_WRITE:
      if (i2c->SR1 & (I2C_SR1_BTF | I2C_SR1_AF))
 8002914:	8a9a      	ldrh	r2, [r3, #20]
 8002916:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
 800291a:	f022 0203 	bic.w	r2, r2, #3
 800291e:	0552      	lsls	r2, r2, #21
 8002920:	0d52      	lsrs	r2, r2, #21
 8002922:	2a00      	cmp	r2, #0
 8002924:	d042      	beq.n	80029ac <takktile_internal_i2c_async_tick.part.2+0x140>
      {
        if (i2c->SR1 & I2C_SR1_AF)
 8002926:	8a9a      	ldrh	r2, [r3, #20]
 8002928:	0551      	lsls	r1, r2, #21
 800292a:	d408      	bmi.n	800293e <takktile_internal_i2c_async_tick.part.2+0xd2>
          i2c->CR1 |= I2C_CR1_STOP;
          *status = TATS_STOP;
        }
        else
        {
          g_takktile_i2c_async_data_txrx_idx[port]++;
 800292c:	4938      	ldr	r1, [pc, #224]	; (8002a10 <takktile_internal_i2c_async_tick.part.2+0x1a4>)
          if (g_takktile_i2c_async_data_txrx_idx[port] >=
              g_takktile_i2c_async_data_len[port])
 800292e:	4d37      	ldr	r5, [pc, #220]	; (8002a0c <takktile_internal_i2c_async_tick.part.2+0x1a0>)
          i2c->CR1 |= I2C_CR1_STOP;
          *status = TATS_STOP;
        }
        else
        {
          g_takktile_i2c_async_data_txrx_idx[port]++;
 8002930:	5c0a      	ldrb	r2, [r1, r0]
          if (g_takktile_i2c_async_data_txrx_idx[port] >=
 8002932:	5c2d      	ldrb	r5, [r5, r0]
          i2c->CR1 |= I2C_CR1_STOP;
          *status = TATS_STOP;
        }
        else
        {
          g_takktile_i2c_async_data_txrx_idx[port]++;
 8002934:	3201      	adds	r2, #1
 8002936:	b2d2      	uxtb	r2, r2
          if (g_takktile_i2c_async_data_txrx_idx[port] >=
 8002938:	4295      	cmp	r5, r2
          i2c->CR1 |= I2C_CR1_STOP;
          *status = TATS_STOP;
        }
        else
        {
          g_takktile_i2c_async_data_txrx_idx[port]++;
 800293a:	540a      	strb	r2, [r1, r0]
          if (g_takktile_i2c_async_data_txrx_idx[port] >=
 800293c:	d83e      	bhi.n	80029bc <takktile_internal_i2c_async_tick.part.2+0x150>
        g_takktile_i2c_async_data[port][txrx_idx] = i2c->DR;
        g_takktile_i2c_async_data_txrx_idx[port]++;
        if (g_takktile_i2c_async_data_txrx_idx[port] >=
            g_takktile_i2c_async_data_len[port])
        {
          i2c->CR1 |= I2C_CR1_STOP;
 800293e:	881a      	ldrh	r2, [r3, #0]
 8002940:	b292      	uxth	r2, r2
 8002942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
          *status = TATS_STOP;
 8002946:	2104      	movs	r1, #4
        g_takktile_i2c_async_data[port][txrx_idx] = i2c->DR;
        g_takktile_i2c_async_data_txrx_idx[port]++;
        if (g_takktile_i2c_async_data_txrx_idx[port] >=
            g_takktile_i2c_async_data_len[port])
        {
          i2c->CR1 |= I2C_CR1_STOP;
 8002948:	801a      	strh	r2, [r3, #0]
          *status = TATS_STOP;
 800294a:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
 800294e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          }
        }
      }
      break;
    case TATS_READ:
      if (i2c->SR1 & I2C_SR1_RXNE)
 8002950:	8a9a      	ldrh	r2, [r3, #20]
 8002952:	0652      	lsls	r2, r2, #25
 8002954:	d52a      	bpl.n	80029ac <takktile_internal_i2c_async_tick.part.2+0x140>
      {
        const uint8_t txrx_idx = g_takktile_i2c_async_data_txrx_idx[port];
 8002956:	4e2e      	ldr	r6, [pc, #184]	; (8002a10 <takktile_internal_i2c_async_tick.part.2+0x1a4>)
        g_takktile_i2c_async_data[port][txrx_idx] = i2c->DR;
        g_takktile_i2c_async_data_txrx_idx[port]++;
        if (g_takktile_i2c_async_data_txrx_idx[port] >=
            g_takktile_i2c_async_data_len[port])
 8002958:	4a2c      	ldr	r2, [pc, #176]	; (8002a0c <takktile_internal_i2c_async_tick.part.2+0x1a0>)
      }
      break;
    case TATS_READ:
      if (i2c->SR1 & I2C_SR1_RXNE)
      {
        const uint8_t txrx_idx = g_takktile_i2c_async_data_txrx_idx[port];
 800295a:	5c31      	ldrb	r1, [r6, r0]
        g_takktile_i2c_async_data[port][txrx_idx] = i2c->DR;
        g_takktile_i2c_async_data_txrx_idx[port]++;
        if (g_takktile_i2c_async_data_txrx_idx[port] >=
            g_takktile_i2c_async_data_len[port])
 800295c:	5c15      	ldrb	r5, [r2, r0]
      break;
    case TATS_READ:
      if (i2c->SR1 & I2C_SR1_RXNE)
      {
        const uint8_t txrx_idx = g_takktile_i2c_async_data_txrx_idx[port];
        g_takktile_i2c_async_data[port][txrx_idx] = i2c->DR;
 800295e:	4f2d      	ldr	r7, [pc, #180]	; (8002a14 <takktile_internal_i2c_async_tick.part.2+0x1a8>)
 8002960:	f8b3 e010 	ldrh.w	lr, [r3, #16]
        g_takktile_i2c_async_data_txrx_idx[port]++;
 8002964:	1c4a      	adds	r2, r1, #1
 8002966:	b2d2      	uxtb	r2, r2
      break;
    case TATS_READ:
      if (i2c->SR1 & I2C_SR1_RXNE)
      {
        const uint8_t txrx_idx = g_takktile_i2c_async_data_txrx_idx[port];
        g_takktile_i2c_async_data[port][txrx_idx] = i2c->DR;
 8002968:	eb01 2100 	add.w	r1, r1, r0, lsl #8
        g_takktile_i2c_async_data_txrx_idx[port]++;
        if (g_takktile_i2c_async_data_txrx_idx[port] >=
 800296c:	42aa      	cmp	r2, r5
    case TATS_READ:
      if (i2c->SR1 & I2C_SR1_RXNE)
      {
        const uint8_t txrx_idx = g_takktile_i2c_async_data_txrx_idx[port];
        g_takktile_i2c_async_data[port][txrx_idx] = i2c->DR;
        g_takktile_i2c_async_data_txrx_idx[port]++;
 800296e:	5432      	strb	r2, [r6, r0]
      break;
    case TATS_READ:
      if (i2c->SR1 & I2C_SR1_RXNE)
      {
        const uint8_t txrx_idx = g_takktile_i2c_async_data_txrx_idx[port];
        g_takktile_i2c_async_data[port][txrx_idx] = i2c->DR;
 8002970:	f807 e001 	strb.w	lr, [r7, r1]
        g_takktile_i2c_async_data_txrx_idx[port]++;
        if (g_takktile_i2c_async_data_txrx_idx[port] >=
 8002974:	d2e3      	bcs.n	800293e <takktile_internal_i2c_async_tick.part.2+0xd2>
          i2c->CR1 |= I2C_CR1_STOP;
          *status = TATS_STOP;
        }
        else
        {
          if (g_takktile_i2c_async_data_len[port] - 1 ==
 8002976:	3d01      	subs	r5, #1
 8002978:	4295      	cmp	r5, r2
              g_takktile_i2c_async_data_txrx_idx[port])
            i2c->CR1 &= ~I2C_CR1_ACK; // last read
 800297a:	881a      	ldrh	r2, [r3, #0]
          i2c->CR1 |= I2C_CR1_STOP;
          *status = TATS_STOP;
        }
        else
        {
          if (g_takktile_i2c_async_data_len[port] - 1 ==
 800297c:	d024      	beq.n	80029c8 <takktile_internal_i2c_async_tick.part.2+0x15c>
              g_takktile_i2c_async_data_txrx_idx[port])
            i2c->CR1 &= ~I2C_CR1_ACK; // last read
          else
            i2c->CR1 |=  I2C_CR1_ACK; // more reads to come. ack it.
 800297e:	b292      	uxth	r2, r2
 8002980:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002984:	801a      	strh	r2, [r3, #0]
 8002986:	bdf0      	pop	{r4, r5, r6, r7, pc}
        }
      }
      break;
    case TATS_STOP:
      if (!(i2c->SR2 & I2C_SR2_BUSY))
 8002988:	8b1b      	ldrh	r3, [r3, #24]
 800298a:	079b      	lsls	r3, r3, #30
 800298c:	d40e      	bmi.n	80029ac <takktile_internal_i2c_async_tick.part.2+0x140>
      {
        *status = TATS_STOP_WAIT; // wait a bit for the line to clear
        g_takktile_i2c_async_start_us[port] = SYSTIME;
 800298e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002992:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <takktile_internal_i2c_async_tick.part.2+0x194>)
 8002994:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002996:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
      }
      break;
    case TATS_STOP:
      if (!(i2c->SR2 & I2C_SR2_BUSY))
      {
        *status = TATS_STOP_WAIT; // wait a bit for the line to clear
 800299a:	2305      	movs	r3, #5
 800299c:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 80029a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else
          *status = TATS_DONE_SUCCESS;
      }
      break;
    default:
      *status = TATS_DONE_SUCCESS;
 80029a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029a6:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 80029aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      {
        bool address_fail = (i2c->SR1 & I2C_SR1_AF) ? true : false;
        g_takktile_i2c_async_address_fail[port] = address_fail;
        int no_payload = (0 == g_takktile_i2c_async_data_len[port]);
        if (no_payload)
          i2c->CR1 |= I2C_CR1_STOP; // this seemed needed... not sure why now.
 80029ae:	881a      	ldrh	r2, [r3, #0]
 80029b0:	b292      	uxth	r2, r2
 80029b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b6:	801a      	strh	r2, [r3, #0]
        i2c->SR2; // un-stretch clock by reading here (?)
 80029b8:	8b1a      	ldrh	r2, [r3, #24]
 80029ba:	e7c0      	b.n	800293e <takktile_internal_i2c_async_tick.part.2+0xd2>
            *status = TATS_STOP;
          }
          else
          {
            const uint8_t txrx_idx = g_takktile_i2c_async_data_txrx_idx[port];
            i2c->DR = g_takktile_i2c_async_data[port][txrx_idx];
 80029bc:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 80029c0:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <takktile_internal_i2c_async_tick.part.2+0x1a8>)
 80029c2:	5c12      	ldrb	r2, [r2, r0]
 80029c4:	821a      	strh	r2, [r3, #16]
 80029c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        }
        else
        {
          if (g_takktile_i2c_async_data_len[port] - 1 ==
              g_takktile_i2c_async_data_txrx_idx[port])
            i2c->CR1 &= ~I2C_CR1_ACK; // last read
 80029c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029cc:	0412      	lsls	r2, r2, #16
 80029ce:	0c12      	lsrs	r2, r2, #16
 80029d0:	801a      	strh	r2, [r3, #0]
 80029d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!address_fail && !no_payload)
        {
          if (!(g_takktile_i2c_async_address[port] & 0x1))
          {
            // it's a write transaction
            g_takktile_i2c_async_data_txrx_idx[port] = 0;
 80029d4:	490e      	ldr	r1, [pc, #56]	; (8002a10 <takktile_internal_i2c_async_tick.part.2+0x1a4>)
            i2c->DR = g_takktile_i2c_async_data[port][0];
 80029d6:	4f0f      	ldr	r7, [pc, #60]	; (8002a14 <takktile_internal_i2c_async_tick.part.2+0x1a8>)
        if (!address_fail && !no_payload)
        {
          if (!(g_takktile_i2c_async_address[port] & 0x1))
          {
            // it's a write transaction
            g_takktile_i2c_async_data_txrx_idx[port] = 0;
 80029d8:	540d      	strb	r5, [r1, r0]
            i2c->DR = g_takktile_i2c_async_data[port][0];
 80029da:	0206      	lsls	r6, r0, #8
            *status = TATS_WRITE;
 80029dc:	2202      	movs	r2, #2
        {
          if (!(g_takktile_i2c_async_address[port] & 0x1))
          {
            // it's a write transaction
            g_takktile_i2c_async_data_txrx_idx[port] = 0;
            i2c->DR = g_takktile_i2c_async_data[port][0];
 80029de:	5dbe      	ldrb	r6, [r7, r6]
 80029e0:	821e      	strh	r6, [r3, #16]
            *status = TATS_WRITE;
 80029e2:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
 80029e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else
          {
            // it's a read transaction
            g_takktile_i2c_async_data_txrx_idx[port] = 0;
            if (g_takktile_i2c_async_data_len[port] == 1)
              i2c->CR1 &= ~I2C_CR1_ACK; // single-byte read
 80029e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ec:	0412      	lsls	r2, r2, #16
 80029ee:	0c12      	lsrs	r2, r2, #16
 80029f0:	801a      	strh	r2, [r3, #0]
 80029f2:	e78b      	b.n	800290c <takktile_internal_i2c_async_tick.part.2+0xa0>
 80029f4:	20010000 	.word	0x20010000
 80029f8:	40005400 	.word	0x40005400
 80029fc:	40005c00 	.word	0x40005c00
 8002a00:	2000fff0 	.word	0x2000fff0
 8002a04:	20010448 	.word	0x20010448
 8002a08:	2001044c 	.word	0x2001044c
 8002a0c:	20010444 	.word	0x20010444
 8002a10:	20010018 	.word	0x20010018
 8002a14:	2001002c 	.word	0x2001002c

08002a18 <takktile_i2c_async_start>:
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void takktile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 8002a18:	2802      	cmp	r0, #2
 8002a1a:	d801      	bhi.n	8002a20 <takktile_i2c_async_start+0x8>
 8002a1c:	f7ff beca 	b.w	80027b4 <takktile_i2c_async_start.part.1>
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop

08002a24 <takktile_internal_i2c_async_tick>:
  g_takktile_i2c_async_start_us[port] = SYSTIME;
}

void takktile_internal_i2c_async_tick(const uint_fast8_t port)
{
  if (port >= NUM_INTERNAL_I2C)
 8002a24:	2801      	cmp	r0, #1
 8002a26:	d900      	bls.n	8002a2a <takktile_internal_i2c_async_tick+0x6>
 8002a28:	4770      	bx	lr
 8002a2a:	f7ff bf1f 	b.w	800286c <takktile_internal_i2c_async_tick.part.2>
 8002a2e:	bf00      	nop

08002a30 <takktile_bridged_i2c_async_tick>:
  }
}

void takktile_bridged_i2c_async_tick(const uint_fast8_t takktile_port)
{
  if (takktile_port != 2 && takktile_port != 3)
 8002a30:	1e83      	subs	r3, r0, #2
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d900      	bls.n	8002a38 <takktile_bridged_i2c_async_tick+0x8>
 8002a36:	4770      	bx	lr
      break;
  }
}

void takktile_bridged_i2c_async_tick(const uint_fast8_t takktile_port)
{
 8002a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    spi = SPI2;
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
  }

  switch (*status)
 8002a3c:	4f92      	ldr	r7, [pc, #584]	; (8002c88 <takktile_bridged_i2c_async_tick+0x258>)
  }
  else // bridge == 1
  {
    spi = SPI2;
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
 8002a3e:	4993      	ldr	r1, [pc, #588]	; (8002c8c <takktile_bridged_i2c_async_tick+0x25c>)
 8002a40:	4d93      	ldr	r5, [pc, #588]	; (8002c90 <takktile_bridged_i2c_async_tick+0x260>)
  }

  switch (*status)
 8002a42:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
  }
  else // bridge == 1
  {
    spi = SPI2;
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
 8002a46:	4c93      	ldr	r4, [pc, #588]	; (8002c94 <takktile_bridged_i2c_async_tick+0x264>)
 8002a48:	4a93      	ldr	r2, [pc, #588]	; (8002c98 <takktile_bridged_i2c_async_tick+0x268>)
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	bf08      	it	eq
 8002a4e:	460a      	moveq	r2, r1
      break;
  }
}

void takktile_bridged_i2c_async_tick(const uint_fast8_t takktile_port)
{
 8002a50:	b083      	sub	sp, #12
  }
  else // bridge == 1
  {
    spi = SPI2;
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
 8002a52:	bf06      	itte	eq
 8002a54:	462c      	moveq	r4, r5
 8002a56:	2110      	moveq	r1, #16
 8002a58:	f44f 7100 	movne.w	r1, #512	; 0x200
  }

  switch (*status)
 8002a5c:	2e08      	cmp	r6, #8
 8002a5e:	d813      	bhi.n	8002a88 <takktile_bridged_i2c_async_tick+0x58>
 8002a60:	e8df f016 	tbh	[pc, r6, lsl #1]
 8002a64:	002e0019 	.word	0x002e0019
 8002a68:	00540041 	.word	0x00540041
 8002a6c:	00e2007f 	.word	0x00e2007f
 8002a70:	00b4009d 	.word	0x00b4009d
 8002a74:	0009      	.short	0x0009
          spi->DR = 0x0;
        g_takktile_i2c_async_start_us[takktile_port] = SYSTIME;
      }
      break;
    case TBPS_READ_TXRX_WAIT:
      if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > 30)
 8002a76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a7a:	4988      	ldr	r1, [pc, #544]	; (8002c9c <takktile_bridged_i2c_async_tick+0x26c>)
 8002a7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a7e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002a82:	1a52      	subs	r2, r2, r1
 8002a84:	2a1e      	cmp	r2, #30
 8002a86:	d903      	bls.n	8002a90 <takktile_bridged_i2c_async_tick+0x60>
        *status = TBPS_DONE_SUCCESS;
      break;
    default:
      *status = TBPS_DONE_SUCCESS; // spin here after it's done
 8002a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a8c:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
      break;
  }
}
 8002a90:	b003      	add	sp, #12
 8002a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  }

  switch (*status)
  {
    case TBPS_REQUEST_CS_LOW:
      if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > 4)
 8002a96:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8002a9a:	4c80      	ldr	r4, [pc, #512]	; (8002c9c <takktile_bridged_i2c_async_tick+0x26c>)
 8002a9c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002a9e:	f854 6020 	ldr.w	r6, [r4, r0, lsl #2]
 8002aa2:	1b89      	subs	r1, r1, r6
 8002aa4:	2904      	cmp	r1, #4
 8002aa6:	d9f3      	bls.n	8002a90 <takktile_bridged_i2c_async_tick+0x60>
      {
        spi->DR = g_takktile_i2c_async_address[takktile_port] & 0x1; // send CMD, read or write
 8002aa8:	497d      	ldr	r1, [pc, #500]	; (8002ca0 <takktile_bridged_i2c_async_tick+0x270>)
 8002aaa:	5c09      	ldrb	r1, [r1, r0]
 8002aac:	f001 0101 	and.w	r1, r1, #1
 8002ab0:	8191      	strh	r1, [r2, #12]
        *status = TBPS_REQUEST_TX_CMD;
        g_takktile_i2c_async_start_us[takktile_port] = SYSTIME;
 8002ab2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002ab4:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
  {
    case TBPS_REQUEST_CS_LOW:
      if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > 4)
      {
        spi->DR = g_takktile_i2c_async_address[takktile_port] & 0x1; // send CMD, read or write
        *status = TBPS_REQUEST_TX_CMD;
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8002abe:	e7e7      	b.n	8002a90 <takktile_bridged_i2c_async_tick+0x60>
        g_takktile_i2c_async_start_us[takktile_port] = SYSTIME;
      }
      break;
    case TBPS_REQUEST_TX_CMD:
      if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > 15)
 8002ac0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8002ac4:	4c75      	ldr	r4, [pc, #468]	; (8002c9c <takktile_bridged_i2c_async_tick+0x26c>)
 8002ac6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002ac8:	f854 6020 	ldr.w	r6, [r4, r0, lsl #2]
 8002acc:	1b89      	subs	r1, r1, r6
 8002ace:	290f      	cmp	r1, #15
 8002ad0:	d9de      	bls.n	8002a90 <takktile_bridged_i2c_async_tick+0x60>
      {
        spi->DR = g_takktile_i2c_async_data_len[takktile_port]; // send data len
 8002ad2:	4974      	ldr	r1, [pc, #464]	; (8002ca4 <takktile_bridged_i2c_async_tick+0x274>)
 8002ad4:	5c09      	ldrb	r1, [r1, r0]
 8002ad6:	8191      	strh	r1, [r2, #12]
        *status = TBPS_REQUEST_TX_LEN;
        g_takktile_i2c_async_start_us[takktile_port] = SYSTIME;
 8002ad8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002ada:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
      break;
    case TBPS_REQUEST_TX_CMD:
      if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > 15)
      {
        spi->DR = g_takktile_i2c_async_data_len[takktile_port]; // send data len
        *status = TBPS_REQUEST_TX_LEN;
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8002ae4:	e7d4      	b.n	8002a90 <takktile_bridged_i2c_async_tick+0x60>
        g_takktile_i2c_async_start_us[takktile_port] = SYSTIME;
      }
      break;
    case TBPS_REQUEST_TX_LEN:
      if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > 15)
 8002ae6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8002aea:	4c6c      	ldr	r4, [pc, #432]	; (8002c9c <takktile_bridged_i2c_async_tick+0x26c>)
 8002aec:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002aee:	f854 6020 	ldr.w	r6, [r4, r0, lsl #2]
 8002af2:	1b89      	subs	r1, r1, r6
 8002af4:	290f      	cmp	r1, #15
 8002af6:	d9cb      	bls.n	8002a90 <takktile_bridged_i2c_async_tick+0x60>
      {
        spi->DR = g_takktile_i2c_async_address[takktile_port]; // send addr
 8002af8:	4969      	ldr	r1, [pc, #420]	; (8002ca0 <takktile_bridged_i2c_async_tick+0x270>)
 8002afa:	5c09      	ldrb	r1, [r1, r0]
 8002afc:	8191      	strh	r1, [r2, #12]
        *status = TBPS_REQUEST_TX_ADDR;
        g_takktile_i2c_async_start_us[takktile_port] = SYSTIME;
 8002afe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002b00:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
      break;
    case TBPS_REQUEST_TX_LEN:
      if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > 15)
      {
        spi->DR = g_takktile_i2c_async_address[takktile_port]; // send addr
        *status = TBPS_REQUEST_TX_ADDR;
 8002b04:	2203      	movs	r2, #3
 8002b06:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8002b0a:	e7c1      	b.n	8002a90 <takktile_bridged_i2c_async_tick+0x60>
        g_takktile_i2c_async_start_us[takktile_port] = SYSTIME;
      }
      break;
    case TBPS_REQUEST_TX_ADDR:
      if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > 15)
 8002b0c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8002b10:	4d62      	ldr	r5, [pc, #392]	; (8002c9c <takktile_bridged_i2c_async_tick+0x26c>)
 8002b12:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8002b14:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
 8002b18:	ebce 0606 	rsb	r6, lr, r6
 8002b1c:	2e0f      	cmp	r6, #15
 8002b1e:	d9b7      	bls.n	8002a90 <takktile_bridged_i2c_async_tick+0x60>
      {
        if ((g_takktile_i2c_async_address[takktile_port] & 0x1) || // it's a read
 8002b20:	4e5f      	ldr	r6, [pc, #380]	; (8002ca0 <takktile_bridged_i2c_async_tick+0x270>)
 8002b22:	5c36      	ldrb	r6, [r6, r0]
 8002b24:	f016 0601 	ands.w	r6, r6, #1
 8002b28:	f040 80a1 	bne.w	8002c6e <takktile_bridged_i2c_async_tick+0x23e>
            g_takktile_i2c_async_data_len[takktile_port] == 0)     // or, no data
 8002b2c:	f8df e174 	ldr.w	lr, [pc, #372]	; 8002ca4 <takktile_bridged_i2c_async_tick+0x274>
      }
      break;
    case TBPS_REQUEST_TX_ADDR:
      if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > 15)
      {
        if ((g_takktile_i2c_async_address[takktile_port] & 0x1) || // it's a read
 8002b30:	f81e e000 	ldrb.w	lr, [lr, r0]
 8002b34:	f1be 0f00 	cmp.w	lr, #0
 8002b38:	f000 8099 	beq.w	8002c6e <takktile_bridged_i2c_async_tick+0x23e>
        }
        else
        {
          *status = TBPS_TX_DATA;
          g_takktile_i2c_async_data_txrx_idx[takktile_port] = 0;
          spi->DR = g_takktile_i2c_async_data[takktile_port][0];
 8002b3c:	f8df c168 	ldr.w	ip, [pc, #360]	; 8002ca8 <takktile_bridged_i2c_async_tick+0x278>
          *status = TBPS_WAIT_FOR_COMPLETION;
        }
        else
        {
          *status = TBPS_TX_DATA;
          g_takktile_i2c_async_data_txrx_idx[takktile_port] = 0;
 8002b40:	f8df e168 	ldr.w	lr, [pc, #360]	; 8002cac <takktile_bridged_i2c_async_tick+0x27c>
          spi->DR = g_takktile_i2c_async_data[takktile_port][0];
 8002b44:	0201      	lsls	r1, r0, #8
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
          *status = TBPS_WAIT_FOR_COMPLETION;
        }
        else
        {
          *status = TBPS_TX_DATA;
 8002b46:	2404      	movs	r4, #4
          g_takktile_i2c_async_data_txrx_idx[takktile_port] = 0;
          spi->DR = g_takktile_i2c_async_data[takktile_port][0];
 8002b48:	f81c 1001 	ldrb.w	r1, [ip, r1]
          *status = TBPS_WAIT_FOR_COMPLETION;
        }
        else
        {
          *status = TBPS_TX_DATA;
          g_takktile_i2c_async_data_txrx_idx[takktile_port] = 0;
 8002b4c:	f80e 6000 	strb.w	r6, [lr, r0]
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
          *status = TBPS_WAIT_FOR_COMPLETION;
        }
        else
        {
          *status = TBPS_TX_DATA;
 8002b50:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
          g_takktile_i2c_async_data_txrx_idx[takktile_port] = 0;
          spi->DR = g_takktile_i2c_async_data[takktile_port][0];
 8002b54:	8191      	strh	r1, [r2, #12]
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
          *status = TBPS_READ_TXRX_WAIT;
        }
        else
          spi->DR = 0x0;
        g_takktile_i2c_async_start_us[takktile_port] = SYSTIME;
 8002b56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
 8002b60:	e796      	b.n	8002a90 <takktile_bridged_i2c_async_tick+0x60>
        }
        g_takktile_i2c_async_start_us[takktile_port] = SYSTIME;
      }
      break;
    case TBPS_TX_DATA:
      if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > 15)
 8002b62:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8002b66:	4d4d      	ldr	r5, [pc, #308]	; (8002c9c <takktile_bridged_i2c_async_tick+0x26c>)
 8002b68:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8002b6a:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
 8002b6e:	ebce 0606 	rsb	r6, lr, r6
 8002b72:	2e0f      	cmp	r6, #15
 8002b74:	d98c      	bls.n	8002a90 <takktile_bridged_i2c_async_tick+0x60>
      {
        if (g_takktile_i2c_async_data_txrx_idx[takktile_port] + 1 ==
 8002b76:	f8df e134 	ldr.w	lr, [pc, #308]	; 8002cac <takktile_bridged_i2c_async_tick+0x27c>
            g_takktile_i2c_async_data_len[takktile_port])
 8002b7a:	f8df c128 	ldr.w	ip, [pc, #296]	; 8002ca4 <takktile_bridged_i2c_async_tick+0x274>
      }
      break;
    case TBPS_TX_DATA:
      if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > 15)
      {
        if (g_takktile_i2c_async_data_txrx_idx[takktile_port] + 1 ==
 8002b7e:	f81e 6000 	ldrb.w	r6, [lr, r0]
 8002b82:	f81c c000 	ldrb.w	ip, [ip, r0]
 8002b86:	3601      	adds	r6, #1
 8002b88:	4566      	cmp	r6, ip
 8002b8a:	d070      	beq.n	8002c6e <takktile_bridged_i2c_async_tick+0x23e>
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
          *status = TBPS_WAIT_FOR_COMPLETION;
        }
        else
        {
          g_takktile_i2c_async_data_txrx_idx[takktile_port]++;
 8002b8c:	b2f6      	uxtb	r6, r6
          spi->DR = g_takktile_i2c_async_data[takktile_port][
 8002b8e:	eb06 2300 	add.w	r3, r6, r0, lsl #8
 8002b92:	4945      	ldr	r1, [pc, #276]	; (8002ca8 <takktile_bridged_i2c_async_tick+0x278>)
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
          *status = TBPS_WAIT_FOR_COMPLETION;
        }
        else
        {
          g_takktile_i2c_async_data_txrx_idx[takktile_port]++;
 8002b94:	f80e 6000 	strb.w	r6, [lr, r0]
          spi->DR = g_takktile_i2c_async_data[takktile_port][
 8002b98:	5ccb      	ldrb	r3, [r1, r3]
 8002b9a:	8193      	strh	r3, [r2, #12]
 8002b9c:	e7db      	b.n	8002b56 <takktile_bridged_i2c_async_tick+0x126>
            *status = TBPS_DONE_SUCCESS; // faster if we don't check...
        }
      }
      break;
    case TBPS_READ_CS_LOW:
      if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > 4)
 8002b9e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8002ba2:	4c3e      	ldr	r4, [pc, #248]	; (8002c9c <takktile_bridged_i2c_async_tick+0x26c>)
 8002ba4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002ba6:	f854 6020 	ldr.w	r6, [r4, r0, lsl #2]
 8002baa:	1b89      	subs	r1, r1, r6
 8002bac:	2904      	cmp	r1, #4
 8002bae:	f67f af6f 	bls.w	8002a90 <takktile_bridged_i2c_async_tick+0x60>
      {
        spi->DR = 0x06; // read buffer command
 8002bb2:	2106      	movs	r1, #6
 8002bb4:	8191      	strh	r1, [r2, #12]
        spi->DR;
 8002bb6:	8992      	ldrh	r2, [r2, #12]
        g_takktile_i2c_async_start_us[takktile_port] = SYSTIME;
        *status = TBPS_READ_TXRX;
        g_takktile_i2c_async_data_txrx_idx[takktile_port] = 0;
 8002bb8:	493c      	ldr	r1, [pc, #240]	; (8002cac <takktile_bridged_i2c_async_tick+0x27c>)
    case TBPS_READ_CS_LOW:
      if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > 4)
      {
        spi->DR = 0x06; // read buffer command
        spi->DR;
        g_takktile_i2c_async_start_us[takktile_port] = SYSTIME;
 8002bba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002bbc:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
        *status = TBPS_READ_TXRX;
        g_takktile_i2c_async_data_txrx_idx[takktile_port] = 0;
 8002bc0:	2400      	movs	r4, #0
      if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > 4)
      {
        spi->DR = 0x06; // read buffer command
        spi->DR;
        g_takktile_i2c_async_start_us[takktile_port] = SYSTIME;
        *status = TBPS_READ_TXRX;
 8002bc2:	2207      	movs	r2, #7
        g_takktile_i2c_async_data_txrx_idx[takktile_port] = 0;
 8002bc4:	540c      	strb	r4, [r1, r0]
      if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > 4)
      {
        spi->DR = 0x06; // read buffer command
        spi->DR;
        g_takktile_i2c_async_start_us[takktile_port] = SYSTIME;
        *status = TBPS_READ_TXRX;
 8002bc6:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8002bca:	e761      	b.n	8002a90 <takktile_bridged_i2c_async_tick+0x60>
        g_takktile_i2c_async_data_txrx_idx[takktile_port] = 0;
      }
      break;
    case TBPS_READ_TXRX:
      if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > 15)
 8002bcc:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8002bd0:	4d32      	ldr	r5, [pc, #200]	; (8002c9c <takktile_bridged_i2c_async_tick+0x26c>)
 8002bd2:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8002bd4:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
 8002bd8:	ebce 0606 	rsb	r6, lr, r6
 8002bdc:	2e0f      	cmp	r6, #15
 8002bde:	f67f af57 	bls.w	8002a90 <takktile_bridged_i2c_async_tick+0x60>
      {
        volatile uint8_t dr = (uint8_t)spi->DR;
        if (g_takktile_i2c_async_data_txrx_idx[takktile_port] > 0)
 8002be2:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 8002cac <takktile_bridged_i2c_async_tick+0x27c>
      }
      break;
    case TBPS_READ_TXRX:
      if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > 15)
      {
        volatile uint8_t dr = (uint8_t)spi->DR;
 8002be6:	f8b2 e00c 	ldrh.w	lr, [r2, #12]
        if (g_takktile_i2c_async_data_txrx_idx[takktile_port] > 0)
 8002bea:	f81c 6000 	ldrb.w	r6, [ip, r0]
      }
      break;
    case TBPS_READ_TXRX:
      if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > 15)
      {
        volatile uint8_t dr = (uint8_t)spi->DR;
 8002bee:	fa5f fe8e 	uxtb.w	lr, lr
 8002bf2:	f88d e007 	strb.w	lr, [sp, #7]
        if (g_takktile_i2c_async_data_txrx_idx[takktile_port] > 0)
 8002bf6:	b146      	cbz	r6, 8002c0a <takktile_bridged_i2c_async_tick+0x1da>
        {
          g_takktile_i2c_async_data[takktile_port][
            g_takktile_i2c_async_data_txrx_idx[takktile_port]-1] = dr;
 8002bf8:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 8002ca8 <takktile_bridged_i2c_async_tick+0x278>
 8002bfc:	f89d 8007 	ldrb.w	r8, [sp, #7]
 8002c00:	eb0e 2e00 	add.w	lr, lr, r0, lsl #8
 8002c04:	44b6      	add	lr, r6
 8002c06:	f80e 8c01 	strb.w	r8, [lr, #-1]
        } 
        g_takktile_i2c_async_data_txrx_idx[takktile_port]++;
        if (g_takktile_i2c_async_data_txrx_idx[takktile_port] ==
            g_takktile_i2c_async_data_len[takktile_port] + 1)
 8002c0a:	f8df e098 	ldr.w	lr, [pc, #152]	; 8002ca4 <takktile_bridged_i2c_async_tick+0x274>
 8002c0e:	f81e e000 	ldrb.w	lr, [lr, r0]
        if (g_takktile_i2c_async_data_txrx_idx[takktile_port] > 0)
        {
          g_takktile_i2c_async_data[takktile_port][
            g_takktile_i2c_async_data_txrx_idx[takktile_port]-1] = dr;
        } 
        g_takktile_i2c_async_data_txrx_idx[takktile_port]++;
 8002c12:	3601      	adds	r6, #1
 8002c14:	b2f6      	uxtb	r6, r6
        if (g_takktile_i2c_async_data_txrx_idx[takktile_port] ==
            g_takktile_i2c_async_data_len[takktile_port] + 1)
 8002c16:	f10e 0e01 	add.w	lr, lr, #1
        {
          g_takktile_i2c_async_data[takktile_port][
            g_takktile_i2c_async_data_txrx_idx[takktile_port]-1] = dr;
        } 
        g_takktile_i2c_async_data_txrx_idx[takktile_port]++;
        if (g_takktile_i2c_async_data_txrx_idx[takktile_port] ==
 8002c1a:	4576      	cmp	r6, lr
        if (g_takktile_i2c_async_data_txrx_idx[takktile_port] > 0)
        {
          g_takktile_i2c_async_data[takktile_port][
            g_takktile_i2c_async_data_txrx_idx[takktile_port]-1] = dr;
        } 
        g_takktile_i2c_async_data_txrx_idx[takktile_port]++;
 8002c1c:	f80c 6000 	strb.w	r6, [ip, r0]
        if (g_takktile_i2c_async_data_txrx_idx[takktile_port] ==
 8002c20:	d02b      	beq.n	8002c7a <takktile_bridged_i2c_async_tick+0x24a>
        {
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
          *status = TBPS_READ_TXRX_WAIT;
        }
        else
          spi->DR = 0x0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	8193      	strh	r3, [r2, #12]
 8002c26:	e796      	b.n	8002b56 <takktile_bridged_i2c_async_tick+0x126>
      }
      break;
    case TBPS_WAIT_FOR_COMPLETION:
      {
        const uint32_t us_to_wait = 180 + 110 *
                                    g_takktile_i2c_async_data_len[takktile_port];
 8002c28:	4d1e      	ldr	r5, [pc, #120]	; (8002ca4 <takktile_bridged_i2c_async_tick+0x274>)
        if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > us_to_wait)
 8002c2a:	f8df e070 	ldr.w	lr, [pc, #112]	; 8002c9c <takktile_bridged_i2c_async_tick+0x26c>
      }
      break;
    case TBPS_WAIT_FOR_COMPLETION:
      {
        const uint32_t us_to_wait = 180 + 110 *
                                    g_takktile_i2c_async_data_len[takktile_port];
 8002c2e:	f815 8000 	ldrb.w	r8, [r5, r0]
        if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > us_to_wait)
 8002c32:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
        g_takktile_i2c_async_start_us[takktile_port] = SYSTIME;
      }
      break;
    case TBPS_WAIT_FOR_COMPLETION:
      {
        const uint32_t us_to_wait = 180 + 110 *
 8002c36:	266e      	movs	r6, #110	; 0x6e
                                    g_takktile_i2c_async_data_len[takktile_port];
        if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > us_to_wait)
 8002c38:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
 8002c3c:	f85e 9020 	ldr.w	r9, [lr, r0, lsl #2]
        g_takktile_i2c_async_start_us[takktile_port] = SYSTIME;
      }
      break;
    case TBPS_WAIT_FOR_COMPLETION:
      {
        const uint32_t us_to_wait = 180 + 110 *
 8002c40:	25b4      	movs	r5, #180	; 0xb4
                                    g_takktile_i2c_async_data_len[takktile_port];
        if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > us_to_wait)
 8002c42:	ebc9 0202 	rsb	r2, r9, r2
        g_takktile_i2c_async_start_us[takktile_port] = SYSTIME;
      }
      break;
    case TBPS_WAIT_FOR_COMPLETION:
      {
        const uint32_t us_to_wait = 180 + 110 *
 8002c46:	fb16 5508 	smlabb	r5, r6, r8, r5
                                    g_takktile_i2c_async_data_len[takktile_port];
        if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > us_to_wait)
 8002c4a:	4295      	cmp	r5, r2
 8002c4c:	f4bf af20 	bcs.w	8002a90 <takktile_bridged_i2c_async_tick+0x60>
        {
          if (g_takktile_i2c_async_address[takktile_port] & 0x1)
 8002c50:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <takktile_bridged_i2c_async_tick+0x270>)
 8002c52:	5c12      	ldrb	r2, [r2, r0]
 8002c54:	07d2      	lsls	r2, r2, #31
 8002c56:	f57f af17 	bpl.w	8002a88 <takktile_bridged_i2c_async_tick+0x58>
          {
            // it's a read. we need to harvest the data now.
            *status = TBPS_READ_CS_LOW;
            cs_gpio->BSRRH = cs_pin_mask;
 8002c5a:	b289      	uxth	r1, r1
 8002c5c:	8361      	strh	r1, [r4, #26]
            g_takktile_i2c_async_start_us[takktile_port] = SYSTIME;
 8002c5e:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
 8002c62:	f84e 2020 	str.w	r2, [lr, r0, lsl #2]
        if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > us_to_wait)
        {
          if (g_takktile_i2c_async_address[takktile_port] & 0x1)
          {
            // it's a read. we need to harvest the data now.
            *status = TBPS_READ_CS_LOW;
 8002c66:	2206      	movs	r2, #6
 8002c68:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8002c6c:	e710      	b.n	8002a90 <takktile_bridged_i2c_async_tick+0x60>
      if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > 15)
      {
        if (g_takktile_i2c_async_data_txrx_idx[takktile_port] + 1 ==
            g_takktile_i2c_async_data_len[takktile_port])
        {
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
 8002c6e:	b289      	uxth	r1, r1
          *status = TBPS_WAIT_FOR_COMPLETION;
 8002c70:	2205      	movs	r2, #5
      if (SYSTIME - g_takktile_i2c_async_start_us[takktile_port] > 15)
      {
        if (g_takktile_i2c_async_data_txrx_idx[takktile_port] + 1 ==
            g_takktile_i2c_async_data_len[takktile_port])
        {
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
 8002c72:	8321      	strh	r1, [r4, #24]
          *status = TBPS_WAIT_FOR_COMPLETION;
 8002c74:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8002c78:	e76d      	b.n	8002b56 <takktile_bridged_i2c_async_tick+0x126>
        } 
        g_takktile_i2c_async_data_txrx_idx[takktile_port]++;
        if (g_takktile_i2c_async_data_txrx_idx[takktile_port] ==
            g_takktile_i2c_async_data_len[takktile_port] + 1)
        {
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
 8002c7a:	b289      	uxth	r1, r1
          *status = TBPS_READ_TXRX_WAIT;
 8002c7c:	2208      	movs	r2, #8
        } 
        g_takktile_i2c_async_data_txrx_idx[takktile_port]++;
        if (g_takktile_i2c_async_data_txrx_idx[takktile_port] ==
            g_takktile_i2c_async_data_len[takktile_port] + 1)
        {
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
 8002c7e:	8321      	strh	r1, [r4, #24]
          *status = TBPS_READ_TXRX_WAIT;
 8002c80:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8002c84:	e767      	b.n	8002b56 <takktile_bridged_i2c_async_tick+0x126>
 8002c86:	bf00      	nop
 8002c88:	2001043c 	.word	0x2001043c
 8002c8c:	40013000 	.word	0x40013000
 8002c90:	40020000 	.word	0x40020000
 8002c94:	40020400 	.word	0x40020400
 8002c98:	40003800 	.word	0x40003800
 8002c9c:	2000fff0 	.word	0x2000fff0
 8002ca0:	2001044c 	.word	0x2001044c
 8002ca4:	20010444 	.word	0x20010444
 8002ca8:	2001002c 	.word	0x2001002c
 8002cac:	20010018 	.word	0x20010018

08002cb0 <takktile_i2c_async_tick>:
  }
}

void takktile_i2c_async_tick(const uint_fast8_t port)
{
  if (port >= NUM_TACTILE_PORTS)
 8002cb0:	2803      	cmp	r0, #3
 8002cb2:	d803      	bhi.n	8002cbc <takktile_i2c_async_tick+0xc>
    return; // let's not corrupt memory.
  if (port == 0 || port == 1) // on-chip i2c transceiver
 8002cb4:	2801      	cmp	r0, #1
 8002cb6:	d902      	bls.n	8002cbe <takktile_i2c_async_tick+0xe>
    takktile_internal_i2c_async_tick(port);
  else
    takktile_bridged_i2c_async_tick(port);
 8002cb8:	f7ff beba 	b.w	8002a30 <takktile_bridged_i2c_async_tick>
 8002cbc:	4770      	bx	lr
 8002cbe:	f7ff bdd5 	b.w	800286c <takktile_internal_i2c_async_tick.part.2>
 8002cc2:	bf00      	nop

08002cc4 <takktile_bridge_reset>:
  */
  printf("done with takktile_init()\r\n");
}

void takktile_bridge_reset()
{
 8002cc4:	b500      	push	{lr}
  // the two SPI-I2C bridges have their RESETs tied to a common MCU pin,
  // so this function will reset both of them
  printf("takktile_bridge_reset()\r\n");
 8002cc6:	4814      	ldr	r0, [pc, #80]	; (8002d18 <takktile_bridge_reset+0x54>)
  */
  printf("done with takktile_init()\r\n");
}

void takktile_bridge_reset()
{
 8002cc8:	b083      	sub	sp, #12
  // the two SPI-I2C bridges have their RESETs tied to a common MCU pin,
  // so this function will reset both of them
  printf("takktile_bridge_reset()\r\n");
 8002cca:	f001 f819 	bl	8003d00 <puts>
  GPIOC->BSRRH = 1 << PORTC_I2C_BRIDGE_RESET;
 8002cce:	4a13      	ldr	r2, [pc, #76]	; (8002d1c <takktile_bridge_reset+0x58>)
  for (volatile int i = 0; i < 10000; i++) { } // assert RESET
 8002cd0:	2300      	movs	r3, #0
void takktile_bridge_reset()
{
  // the two SPI-I2C bridges have their RESETs tied to a common MCU pin,
  // so this function will reset both of them
  printf("takktile_bridge_reset()\r\n");
  GPIOC->BSRRH = 1 << PORTC_I2C_BRIDGE_RESET;
 8002cd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cd6:	8351      	strh	r1, [r2, #26]
  for (volatile int i = 0; i < 10000; i++) { } // assert RESET
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	9b00      	ldr	r3, [sp, #0]
 8002cdc:	f242 720f 	movw	r2, #9999	; 0x270f
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	dc05      	bgt.n	8002cf0 <takktile_bridge_reset+0x2c>
 8002ce4:	9b00      	ldr	r3, [sp, #0]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	9b00      	ldr	r3, [sp, #0]
 8002cec:	4293      	cmp	r3, r2
 8002cee:	ddf9      	ble.n	8002ce4 <takktile_bridge_reset+0x20>
  GPIOC->BSRRL = 1 << PORTC_I2C_BRIDGE_RESET;
 8002cf0:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <takktile_bridge_reset+0x58>)
  for (volatile int i = 0; i < 10000; i++) { } // then let them boot up
 8002cf2:	2300      	movs	r3, #0
  // the two SPI-I2C bridges have their RESETs tied to a common MCU pin,
  // so this function will reset both of them
  printf("takktile_bridge_reset()\r\n");
  GPIOC->BSRRH = 1 << PORTC_I2C_BRIDGE_RESET;
  for (volatile int i = 0; i < 10000; i++) { } // assert RESET
  GPIOC->BSRRL = 1 << PORTC_I2C_BRIDGE_RESET;
 8002cf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cf8:	8311      	strh	r1, [r2, #24]
  for (volatile int i = 0; i < 10000; i++) { } // then let them boot up
 8002cfa:	9301      	str	r3, [sp, #4]
 8002cfc:	9b01      	ldr	r3, [sp, #4]
 8002cfe:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d02:	4293      	cmp	r3, r2
 8002d04:	dc05      	bgt.n	8002d12 <takktile_bridge_reset+0x4e>
 8002d06:	9b01      	ldr	r3, [sp, #4]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	9301      	str	r3, [sp, #4]
 8002d0c:	9b01      	ldr	r3, [sp, #4]
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	ddf9      	ble.n	8002d06 <takktile_bridge_reset+0x42>
}
 8002d12:	b003      	add	sp, #12
 8002d14:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d18:	0800ab18 	.word	0x0800ab18
 8002d1c:	40020800 	.word	0x40020800

08002d20 <takktileInit>:
}

//////////////////////////////////////////////////////////////////////////////

void takktileInit()
{
 8002d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d22:	b083      	sub	sp, #12
  takktile_bridge_reset();
 8002d24:	f7ff ffce 	bl	8002cc4 <takktile_bridge_reset>
  for (int i = 0; i < 2; i++)
 8002d28:	2500      	movs	r5, #0
 8002d2a:	b2ee      	uxtb	r6, r5
}

//////////////////////////////////////////////////////////////////////////////

void takktileInit()
{
 8002d2c:	2400      	movs	r4, #0
  takktile_bridge_reset();
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 6; j++)
      printf("takktile bridge %d reg %d: 0x%02x\r\n", i, j, takktile_bridge_read_reg(i, j));
 8002d2e:	b2e1      	uxtb	r1, r4
 8002d30:	4630      	mov	r0, r6
 8002d32:	f7ff fd21 	bl	8002778 <takktile_bridge_read_reg>
 8002d36:	4622      	mov	r2, r4
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	4814      	ldr	r0, [pc, #80]	; (8002d90 <takktileInit+0x70>)

void takktileInit()
{
  takktile_bridge_reset();
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 6; j++)
 8002d3e:	3401      	adds	r4, #1
      printf("takktile bridge %d reg %d: 0x%02x\r\n", i, j, takktile_bridge_read_reg(i, j));
 8002d40:	f000 ff8a 	bl	8003c58 <printf>

void takktileInit()
{
  takktile_bridge_reset();
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 6; j++)
 8002d44:	2c06      	cmp	r4, #6
 8002d46:	d1f2      	bne.n	8002d2e <takktileInit+0xe>
//////////////////////////////////////////////////////////////////////////////

void takktileInit()
{
  takktile_bridge_reset();
  for (int i = 0; i < 2; i++)
 8002d48:	b90d      	cbnz	r5, 8002d4e <takktileInit+0x2e>
 8002d4a:	2501      	movs	r5, #1
 8002d4c:	e7ed      	b.n	8002d2a <takktileInit+0xa>
 8002d4e:	2000      	movs	r0, #0
 8002d50:	aa01      	add	r2, sp, #4
 8002d52:	4603      	mov	r3, r0

static void takktile_bridge_write_reg(const uint8_t bridge_idx,
                                     const uint8_t reg_idx,
                                     const uint8_t reg_val)
{
  uint8_t txd[3] = {0x20, reg_idx, reg_val};
 8002d54:	2720      	movs	r7, #32
 8002d56:	2602      	movs	r6, #2
 8002d58:	2405      	movs	r4, #5
 8002d5a:	2103      	movs	r1, #3
 8002d5c:	f88d 7004 	strb.w	r7, [sp, #4]
 8002d60:	f88d 6005 	strb.w	r6, [sp, #5]
 8002d64:	f88d 4006 	strb.w	r4, [sp, #6]
 8002d68:	f7ff fca0 	bl	80026ac <takktile_bridge_spi_txrx.part.0>
 8002d6c:	aa01      	add	r2, sp, #4
 8002d6e:	4628      	mov	r0, r5
 8002d70:	2103      	movs	r1, #3
 8002d72:	2300      	movs	r3, #0
 8002d74:	f88d 7004 	strb.w	r7, [sp, #4]
 8002d78:	f88d 6005 	strb.w	r6, [sp, #5]
 8002d7c:	f88d 4006 	strb.w	r4, [sp, #6]
 8002d80:	f7ff fc94 	bl	80026ac <takktile_bridge_spi_txrx.part.0>
             result == I2C_SUCCESS ? "SUCCESS" : "FAIL",
             port, sensor, mcu_addr);
    }
  }
  */
  printf("done with takktile_init()\r\n");
 8002d84:	4803      	ldr	r0, [pc, #12]	; (8002d94 <takktileInit+0x74>)
 8002d86:	f000 ffbb 	bl	8003d00 <puts>
}
 8002d8a:	b003      	add	sp, #12
 8002d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	0800ab34 	.word	0x0800ab34
 8002d94:	0800ab58 	.word	0x0800ab58

08002d98 <takktile_bridge_wait_for_completion>:

takktile_i2c_result_t
takktile_bridge_wait_for_completion
  (const uint_fast8_t bridge_idx,
   const uint32_t wait_time)
{
 8002d98:	b570      	push	{r4, r5, r6, lr}
 8002d9a:	b082      	sub	sp, #8
  for (volatile int i = 0; i < wait_time; i++) { } // la di dah...
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	9b00      	ldr	r3, [sp, #0]
 8002da2:	4299      	cmp	r1, r3
 8002da4:	d905      	bls.n	8002db2 <takktile_bridge_wait_for_completion+0x1a>
 8002da6:	9b00      	ldr	r3, [sp, #0]
 8002da8:	3301      	adds	r3, #1
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	9b00      	ldr	r3, [sp, #0]
 8002dae:	428b      	cmp	r3, r1
 8002db0:	d3f9      	bcc.n	8002da6 <takktile_bridge_wait_for_completion+0xe>
 8002db2:	b2c5      	uxtb	r5, r0

takktile_i2c_result_t
takktile_bridge_wait_for_completion
  (const uint_fast8_t bridge_idx,
   const uint32_t wait_time)
{
 8002db4:	f240 34e9 	movw	r4, #1001	; 0x3e9
  for (volatile int i = 0; i < wait_time; i++) { } // la di dah...
  uint8_t bridge_state = 0xf3;
  int wait_count = 0;
  while (bridge_state == 0xf3)
  {
    for (volatile int i = 0; i < 1000; i++) { } // la di dah...
 8002db8:	2600      	movs	r6, #0
 8002dba:	9601      	str	r6, [sp, #4]
 8002dbc:	9b01      	ldr	r3, [sp, #4]
 8002dbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dc2:	da06      	bge.n	8002dd2 <takktile_bridge_wait_for_completion+0x3a>
 8002dc4:	9b01      	ldr	r3, [sp, #4]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	9b01      	ldr	r3, [sp, #4]
 8002dcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dd0:	dbf8      	blt.n	8002dc4 <takktile_bridge_wait_for_completion+0x2c>
    bridge_state = takktile_bridge_read_reg(bridge_idx, 0x4);
 8002dd2:	4628      	mov	r0, r5
 8002dd4:	2104      	movs	r1, #4
 8002dd6:	f7ff fccf 	bl	8002778 <takktile_bridge_read_reg>
    if (++wait_count > 1000)
 8002dda:	3c01      	subs	r4, #1
 8002ddc:	d008      	beq.n	8002df0 <takktile_bridge_wait_for_completion+0x58>
   const uint32_t wait_time)
{
  for (volatile int i = 0; i < wait_time; i++) { } // la di dah...
  uint8_t bridge_state = 0xf3;
  int wait_count = 0;
  while (bridge_state == 0xf3)
 8002dde:	28f3      	cmp	r0, #243	; 0xf3
 8002de0:	d0eb      	beq.n	8002dba <takktile_bridge_wait_for_completion+0x22>
    bridge_state = takktile_bridge_read_reg(bridge_idx, 0x4);
    if (++wait_count > 1000)
    {
      // a SPI-I2C bridge locked up. try to reset them.
      takktile_bridge_reset();
      return I2C_FAIL;
 8002de2:	f1a0 00f0 	sub.w	r0, r0, #240	; 0xf0
 8002de6:	fab0 f080 	clz	r0, r0
 8002dea:	0940      	lsrs	r0, r0, #5
  }
  if (bridge_state == 0xf0)
    return I2C_SUCCESS;
  else
    return I2C_FAIL;
}
 8002dec:	b002      	add	sp, #8
 8002dee:	bd70      	pop	{r4, r5, r6, pc}
    for (volatile int i = 0; i < 1000; i++) { } // la di dah...
    bridge_state = takktile_bridge_read_reg(bridge_idx, 0x4);
    if (++wait_count > 1000)
    {
      // a SPI-I2C bridge locked up. try to reset them.
      takktile_bridge_reset();
 8002df0:	f7ff ff68 	bl	8002cc4 <takktile_bridge_reset>
      return I2C_FAIL;
 8002df4:	4620      	mov	r0, r4
  }
  if (bridge_state == 0xf0)
    return I2C_SUCCESS;
  else
    return I2C_FAIL;
}
 8002df6:	b002      	add	sp, #8
 8002df8:	bd70      	pop	{r4, r5, r6, pc}
 8002dfa:	bf00      	nop

08002dfc <takktile_bridge_i2c_write>:
takktile_bridge_i2c_write
  (const uint8_t bridge_idx,
   const uint8_t i2c_addr,
   const uint8_t tx_len,
   const uint8_t *txd)
{
 8002dfc:	b570      	push	{r4, r5, r6, lr}
 8002dfe:	2afa      	cmp	r2, #250	; 0xfa
 8002e00:	b0c0      	sub	sp, #256	; 0x100
 8002e02:	4616      	mov	r6, r2
 8002e04:	4615      	mov	r5, r2
 8002e06:	bf28      	it	cs
 8002e08:	26fa      	movcs	r6, #250	; 0xfa
  uint8_t trimmed_tx_len = tx_len;
  if (trimmed_tx_len > 250)
    trimmed_tx_len = 250;
  uint8_t msg[256];
  msg[0] = 0x00; // write i2c command
 8002e0a:	2200      	movs	r2, #0
takktile_bridge_i2c_write
  (const uint8_t bridge_idx,
   const uint8_t i2c_addr,
   const uint8_t tx_len,
   const uint8_t *txd)
{
 8002e0c:	4604      	mov	r4, r0
  uint8_t trimmed_tx_len = tx_len;
  if (trimmed_tx_len > 250)
    trimmed_tx_len = 250;
  uint8_t msg[256];
  msg[0] = 0x00; // write i2c command
  msg[1] = trimmed_tx_len;
 8002e0e:	f88d 6001 	strb.w	r6, [sp, #1]
  msg[2] = i2c_addr; // will always perform a write... ignores the LSB
 8002e12:	f88d 1002 	strb.w	r1, [sp, #2]
{
  uint8_t trimmed_tx_len = tx_len;
  if (trimmed_tx_len > 250)
    trimmed_tx_len = 250;
  uint8_t msg[256];
  msg[0] = 0x00; // write i2c command
 8002e16:	f88d 2000 	strb.w	r2, [sp]
  msg[1] = trimmed_tx_len;
  msg[2] = i2c_addr; // will always perform a write... ignores the LSB

  for (int i = 0; i < trimmed_tx_len; i++)
 8002e1a:	b156      	cbz	r6, 8002e32 <takktile_bridge_i2c_write+0x36>
 8002e1c:	1cb0      	adds	r0, r6, #2
 8002e1e:	1e5a      	subs	r2, r3, #1
 8002e20:	4468      	add	r0, sp
 8002e22:	f10d 0302 	add.w	r3, sp, #2
    msg[i+3] = txd[i];
 8002e26:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8002e2a:	f803 1f01 	strb.w	r1, [r3, #1]!
  uint8_t msg[256];
  msg[0] = 0x00; // write i2c command
  msg[1] = trimmed_tx_len;
  msg[2] = i2c_addr; // will always perform a write... ignores the LSB

  for (int i = 0; i < trimmed_tx_len; i++)
 8002e2e:	4283      	cmp	r3, r0
 8002e30:	d1f9      	bne.n	8002e26 <takktile_bridge_i2c_write+0x2a>
static void takktile_bridge_spi_txrx(const uint8_t bridge_idx,
                                    const uint8_t txrx_len,
                                    const uint8_t *txd,
                                    uint8_t *rxd)
{
  if (bridge_idx > 1)
 8002e32:	2c01      	cmp	r4, #1
 8002e34:	d908      	bls.n	8002e48 <takktile_bridge_i2c_write+0x4c>
  msg[2] = i2c_addr; // will always perform a write... ignores the LSB

  for (int i = 0; i < trimmed_tx_len; i++)
    msg[i+3] = txd[i];
  takktile_bridge_spi_txrx(bridge_idx, trimmed_tx_len + 3, msg, NULL);
  return takktile_bridge_wait_for_completion(bridge_idx, tx_len*3000);
 8002e36:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	fb01 f105 	mul.w	r1, r1, r5
 8002e40:	f7ff ffaa 	bl	8002d98 <takktile_bridge_wait_for_completion>
}
 8002e44:	b040      	add	sp, #256	; 0x100
 8002e46:	bd70      	pop	{r4, r5, r6, pc}
  msg[1] = trimmed_tx_len;
  msg[2] = i2c_addr; // will always perform a write... ignores the LSB

  for (int i = 0; i < trimmed_tx_len; i++)
    msg[i+3] = txd[i];
  takktile_bridge_spi_txrx(bridge_idx, trimmed_tx_len + 3, msg, NULL);
 8002e48:	1cf1      	adds	r1, r6, #3
 8002e4a:	b2c9      	uxtb	r1, r1
 8002e4c:	466a      	mov	r2, sp
 8002e4e:	4620      	mov	r0, r4
 8002e50:	2300      	movs	r3, #0
 8002e52:	f7ff fc2b 	bl	80026ac <takktile_bridge_spi_txrx.part.0>
 8002e56:	e7ee      	b.n	8002e36 <takktile_bridge_i2c_write+0x3a>

08002e58 <takktile_i2c>:

takktile_i2c_result_t takktile_i2c(uint8_t port,
                                 uint8_t address,
                                 uint8_t *data,
                                 uint8_t data_len)
{
 8002e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (port == 0 || port == 1) // these ports are MCU on-chip I2C interfaces
 8002e5c:	2801      	cmp	r0, #1

takktile_i2c_result_t takktile_i2c(uint8_t port,
                                 uint8_t address,
                                 uint8_t *data,
                                 uint8_t data_len)
{
 8002e5e:	b083      	sub	sp, #12
 8002e60:	4615      	mov	r5, r2
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	461e      	mov	r6, r3
 8002e66:	468e      	mov	lr, r1
  if (port == 0 || port == 1) // these ports are MCU on-chip I2C interfaces
 8002e68:	d914      	bls.n	8002e94 <takktile_i2c+0x3c>
    i2c->CR1 |= I2C_CR1_STOP;
    while (i2c->SR2 & I2C_SR2_BUSY) { }
    for (volatile int i = 0; i < 3000; i++) { } // wait a bit
    return address_fail ? I2C_FAIL : I2C_SUCCESS;
  }
  else if (port == 2 || port == 3) // these ports are via SPI-I2C bridge chips
 8002e6a:	1e84      	subs	r4, r0, #2
 8002e6c:	b2e4      	uxtb	r4, r4
 8002e6e:	2c01      	cmp	r4, #1
 8002e70:	d904      	bls.n	8002e7c <takktile_i2c+0x24>
      return takktile_bridge_i2c_read(bridge_idx, address, data_len, data);
    else
      return takktile_bridge_i2c_write(bridge_idx, address, data_len, data);
  }
  else
    return I2C_FAIL;
 8002e72:	2000      	movs	r0, #0
}
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return address_fail ? I2C_FAIL : I2C_SUCCESS;
  }
  else if (port == 2 || port == 3) // these ports are via SPI-I2C bridge chips
  {
    const uint8_t bridge_idx = port - 2;
    if (address & 0x1) // is it a read transaction?
 8002e7c:	f011 0f01 	tst.w	r1, #1
 8002e80:	d168      	bne.n	8002f54 <takktile_i2c+0xfc>
      return takktile_bridge_i2c_read(bridge_idx, address, data_len, data);
    else
      return takktile_bridge_i2c_write(bridge_idx, address, data_len, data);
 8002e82:	461a      	mov	r2, r3
 8002e84:	4620      	mov	r0, r4
 8002e86:	462b      	mov	r3, r5
 8002e88:	f7ff ffb8 	bl	8002dfc <takktile_bridge_i2c_write>
  }
  else
    return I2C_FAIL;
}
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    */
    I2C_TypeDef *i2c;
    if (port == 0)
      i2c = I2C1;
    else
      i2c = I2C3;
 8002e94:	4b6b      	ldr	r3, [pc, #428]	; (8003044 <takktile_i2c+0x1ec>)
 8002e96:	4c6c      	ldr	r4, [pc, #432]	; (8003048 <takktile_i2c+0x1f0>)
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	bf18      	it	ne
 8002e9c:	461c      	movne	r4, r3
    i2c->CR1 |=  I2C_CR1_START;
 8002e9e:	8823      	ldrh	r3, [r4, #0]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea6:	8023      	strh	r3, [r4, #0]
    i2c->SR1 &= ~I2C_SR1_AF;
 8002ea8:	8aa3      	ldrh	r3, [r4, #20]
 8002eaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eae:	041b      	lsls	r3, r3, #16
 8002eb0:	0c1b      	lsrs	r3, r3, #16
 8002eb2:	82a3      	strh	r3, [r4, #20]
    while (!(i2c->SR1 & I2C_SR1_SB)) { }
 8002eb4:	8aa3      	ldrh	r3, [r4, #20]
 8002eb6:	07d9      	lsls	r1, r3, #31
 8002eb8:	d5fc      	bpl.n	8002eb4 <takktile_i2c+0x5c>
    i2c->DR = address;
 8002eba:	fa1f f38e 	uxth.w	r3, lr
 8002ebe:	8223      	strh	r3, [r4, #16]
    while (!(i2c->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF))) { }
 8002ec0:	8aa3      	ldrh	r3, [r4, #20]
 8002ec2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ec6:	f023 0301 	bic.w	r3, r3, #1
 8002eca:	055b      	lsls	r3, r3, #21
 8002ecc:	0d5b      	lsrs	r3, r3, #21
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f6      	beq.n	8002ec0 <takktile_i2c+0x68>
    int address_fail = (i2c->SR1 & I2C_SR1_AF) ? 1 : 0;
 8002ed2:	8aa0      	ldrh	r0, [r4, #20]
 8002ed4:	f3c0 2080 	ubfx	r0, r0, #10, #1
    if (!data_len)
 8002ed8:	bb16      	cbnz	r6, 8002f20 <takktile_i2c+0xc8>
      i2c->CR1 |= I2C_CR1_STOP;
 8002eda:	8823      	ldrh	r3, [r4, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ee2:	8023      	strh	r3, [r4, #0]
    i2c->SR2; // un-stretch clock by reading here (?)
 8002ee4:	8b23      	ldrh	r3, [r4, #24]
          while (!(i2c->SR1 & I2C_SR1_RXNE)) { } // wait for it...
          data[i] = i2c->DR;
        }
      }
    }
    i2c->CR1 |= I2C_CR1_STOP;
 8002ee6:	8823      	ldrh	r3, [r4, #0]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eee:	8023      	strh	r3, [r4, #0]
    while (i2c->SR2 & I2C_SR2_BUSY) { }
 8002ef0:	8b23      	ldrh	r3, [r4, #24]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1f9      	bne.n	8002ef0 <takktile_i2c+0x98>
    for (volatile int i = 0; i < 3000; i++) { } // wait a bit
 8002efc:	603b      	str	r3, [r7, #0]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002f04:	4293      	cmp	r3, r2
 8002f06:	dc05      	bgt.n	8002f14 <takktile_i2c+0xbc>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	603b      	str	r3, [r7, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	4293      	cmp	r3, r2
 8002f12:	ddf9      	ble.n	8002f08 <takktile_i2c+0xb0>
    return address_fail ? I2C_FAIL : I2C_SUCCESS;
 8002f14:	f080 0001 	eor.w	r0, r0, #1
    else
      return takktile_bridge_i2c_write(bridge_idx, address, data_len, data);
  }
  else
    return I2C_FAIL;
}
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    i2c->DR = address;
    while (!(i2c->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF))) { }
    int address_fail = (i2c->SR1 & I2C_SR1_AF) ? 1 : 0;
    if (!data_len)
      i2c->CR1 |= I2C_CR1_STOP;
    i2c->SR2; // un-stretch clock by reading here (?)
 8002f20:	8b23      	ldrh	r3, [r4, #24]
    if (!address_fail && data_len)
 8002f22:	2800      	cmp	r0, #0
 8002f24:	d1df      	bne.n	8002ee6 <takktile_i2c+0x8e>
    {
      if (!(address & 0x1))
 8002f26:	f01e 0f01 	tst.w	lr, #1
 8002f2a:	d06a      	beq.n	8003002 <takktile_i2c+0x1aa>
 8002f2c:	3d01      	subs	r5, #1
 8002f2e:	1e71      	subs	r1, r6, #1
      else
      {
        // it's a read transaction
        //if (!data_len)
        //  i2c->CR1 &= ~I2C_CR1_ACK;
        for (int i = 0; i < data_len; i++)
 8002f30:	4602      	mov	r2, r0
        {
          if (i != data_len - 1)
 8002f32:	4291      	cmp	r1, r2
            i2c->CR1 |= I2C_CR1_ACK;
 8002f34:	8823      	ldrh	r3, [r4, #0]
        // it's a read transaction
        //if (!data_len)
        //  i2c->CR1 &= ~I2C_CR1_ACK;
        for (int i = 0; i < data_len; i++)
        {
          if (i != data_len - 1)
 8002f36:	d078      	beq.n	800302a <takktile_i2c+0x1d2>
            i2c->CR1 |= I2C_CR1_ACK;
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f3e:	8023      	strh	r3, [r4, #0]
          else
            i2c->CR1 &= ~I2C_CR1_ACK;
          while (!(i2c->SR1 & I2C_SR1_RXNE)) { } // wait for it...
 8002f40:	8aa3      	ldrh	r3, [r4, #20]
 8002f42:	065b      	lsls	r3, r3, #25
 8002f44:	d5fc      	bpl.n	8002f40 <takktile_i2c+0xe8>
      else
      {
        // it's a read transaction
        //if (!data_len)
        //  i2c->CR1 &= ~I2C_CR1_ACK;
        for (int i = 0; i < data_len; i++)
 8002f46:	3201      	adds	r2, #1
          if (i != data_len - 1)
            i2c->CR1 |= I2C_CR1_ACK;
          else
            i2c->CR1 &= ~I2C_CR1_ACK;
          while (!(i2c->SR1 & I2C_SR1_RXNE)) { } // wait for it...
          data[i] = i2c->DR;
 8002f48:	8a23      	ldrh	r3, [r4, #16]
 8002f4a:	f805 3f01 	strb.w	r3, [r5, #1]!
      else
      {
        // it's a read transaction
        //if (!data_len)
        //  i2c->CR1 &= ~I2C_CR1_ACK;
        for (int i = 0; i < data_len; i++)
 8002f4e:	42b2      	cmp	r2, r6
 8002f50:	d1ef      	bne.n	8002f32 <takktile_i2c+0xda>
 8002f52:	e7c8      	b.n	8002ee6 <takktile_i2c+0x8e>
   const uint8_t i2c_addr,
   const uint8_t rx_len,
   uint8_t *rxd)
{
  uint8_t msg[3];
  msg[0] = 0x01; // read i2c command
 8002f54:	f04f 0c01 	mov.w	ip, #1
 8002f58:	4620      	mov	r0, r4
 8002f5a:	2103      	movs	r1, #3
 8002f5c:	463a      	mov	r2, r7
 8002f5e:	2300      	movs	r3, #0
  msg[1] = rx_len;
  msg[2] = i2c_addr; // will always performa a read... ignores the LSB
 8002f60:	f887 e002 	strb.w	lr, [r7, #2]
   const uint8_t i2c_addr,
   const uint8_t rx_len,
   uint8_t *rxd)
{
  uint8_t msg[3];
  msg[0] = 0x01; // read i2c command
 8002f64:	f887 c000 	strb.w	ip, [r7]
  msg[1] = rx_len;
 8002f68:	707e      	strb	r6, [r7, #1]
 8002f6a:	f7ff fb9f 	bl	80026ac <takktile_bridge_spi_txrx.part.0>
  msg[2] = i2c_addr; // will always performa a read... ignores the LSB
  takktile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (takktile_bridge_wait_for_completion(bridge_idx, rx_len*2300) == I2C_FAIL)
 8002f6e:	f640 01fc 	movw	r1, #2300	; 0x8fc
 8002f72:	fb01 f106 	mul.w	r1, r1, r6
 8002f76:	4620      	mov	r0, r4
 8002f78:	f7ff ff0e 	bl	8002d98 <takktile_bridge_wait_for_completion>
 8002f7c:	46e8      	mov	r8, sp
 8002f7e:	b920      	cbnz	r0, 8002f8a <takktile_i2c+0x132>
 8002f80:	46c5      	mov	sp, r8
    else
      return takktile_bridge_i2c_write(bridge_idx, address, data_len, data);
  }
  else
    return I2C_FAIL;
}
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  msg[1] = rx_len;
  msg[2] = i2c_addr; // will always performa a read... ignores the LSB
  takktile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (takktile_bridge_wait_for_completion(bridge_idx, rx_len*2300) == I2C_FAIL)
    return I2C_FAIL;
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
 8002f8a:	f106 0308 	add.w	r3, r6, #8
 8002f8e:	f023 0307 	bic.w	r3, r3, #7
 8002f92:	ebad 0d03 	sub.w	sp, sp, r3
 8002f96:	466a      	mov	r2, sp
  read_msg[0] = 0x06; // read buffer command
 8002f98:	2106      	movs	r1, #6
  msg[1] = rx_len;
  msg[2] = i2c_addr; // will always performa a read... ignores the LSB
  takktile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (takktile_bridge_wait_for_completion(bridge_idx, rx_len*2300) == I2C_FAIL)
    return I2C_FAIL;
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
 8002f9a:	ebad 0d03 	sub.w	sp, sp, r3
  read_msg[0] = 0x06; // read buffer command
 8002f9e:	7011      	strb	r1, [r2, #0]
  msg[1] = rx_len;
  msg[2] = i2c_addr; // will always performa a read... ignores the LSB
  takktile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (takktile_bridge_wait_for_completion(bridge_idx, rx_len*2300) == I2C_FAIL)
    return I2C_FAIL;
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
 8002fa0:	46e9      	mov	r9, sp
 8002fa2:	1c71      	adds	r1, r6, #1
  read_msg[0] = 0x06; // read buffer command
  for (int i = 1; i < rx_len+1; i++)
 8002fa4:	2e00      	cmp	r6, #0
 8002fa6:	d046      	beq.n	8003036 <takktile_i2c+0x1de>
 8002fa8:	4613      	mov	r3, r2
 8002faa:	eb02 0e06 	add.w	lr, r2, r6
    read_msg[i] = 0;
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f803 0f01 	strb.w	r0, [r3, #1]!
  takktile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (takktile_bridge_wait_for_completion(bridge_idx, rx_len*2300) == I2C_FAIL)
    return I2C_FAIL;
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
  read_msg[0] = 0x06; // read buffer command
  for (int i = 1; i < rx_len+1; i++)
 8002fb4:	4573      	cmp	r3, lr
 8002fb6:	d1fb      	bne.n	8002fb0 <takktile_i2c+0x158>
 8002fb8:	464b      	mov	r3, r9
 8002fba:	b2c9      	uxtb	r1, r1
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f7ff fb75 	bl	80026ac <takktile_bridge_spi_txrx.part.0>
 8002fc2:	442e      	add	r6, r5
 8002fc4:	464b      	mov	r3, r9
    read_msg[i] = 0;
  takktile_bridge_spi_txrx(bridge_idx, rx_len+1, read_msg, rx_msg);
  for (int i = 1; i < rx_len+1; i++)
    rxd[i-1] = rx_msg[i];
 8002fc6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002fca:	f805 2b01 	strb.w	r2, [r5], #1
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
  read_msg[0] = 0x06; // read buffer command
  for (int i = 1; i < rx_len+1; i++)
    read_msg[i] = 0;
  takktile_bridge_spi_txrx(bridge_idx, rx_len+1, read_msg, rx_msg);
  for (int i = 1; i < rx_len+1; i++)
 8002fce:	42b5      	cmp	r5, r6
 8002fd0:	d1f9      	bne.n	8002fc6 <takktile_i2c+0x16e>
    rxd[i-1] = rx_msg[i];
  for (volatile int i = 0; i < 1000; i++) { } // la di dah...
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fdc:	da06      	bge.n	8002fec <takktile_i2c+0x194>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	607b      	str	r3, [r7, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fea:	dbf8      	blt.n	8002fde <takktile_i2c+0x186>
  uint8_t bridge_state = takktile_bridge_read_reg(bridge_idx, 0x4);
 8002fec:	4620      	mov	r0, r4
 8002fee:	2104      	movs	r1, #4
 8002ff0:	f7ff fbc2 	bl	8002778 <takktile_bridge_read_reg>
  return (bridge_state == 0xf0 ? I2C_SUCCESS : I2C_FAIL);
 8002ff4:	f1a0 00f0 	sub.w	r0, r0, #240	; 0xf0
 8002ff8:	46c5      	mov	sp, r8
 8002ffa:	fab0 f080 	clz	r0, r0
 8002ffe:	0940      	lsrs	r0, r0, #5
 8003000:	e7bf      	b.n	8002f82 <takktile_i2c+0x12a>
 8003002:	442e      	add	r6, r5
      if (!(address & 0x1))
      {
        // it's a write transaction
        for (int i = 0; i < data_len; i++)
        {
          i2c->DR = data[i];
 8003004:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003008:	8223      	strh	r3, [r4, #16]
          while (!(i2c->SR1 & (I2C_SR1_BTF | I2C_SR1_AF))) { }
 800300a:	8aa1      	ldrh	r1, [r4, #20]
 800300c:	f421 717e 	bic.w	r1, r1, #1016	; 0x3f8
 8003010:	f021 0103 	bic.w	r1, r1, #3
 8003014:	0549      	lsls	r1, r1, #21
 8003016:	0d49      	lsrs	r1, r1, #21
 8003018:	2900      	cmp	r1, #0
 800301a:	d0f6      	beq.n	800300a <takktile_i2c+0x1b2>
          if (i2c->SR1 & I2C_SR1_AF)
 800301c:	8aa3      	ldrh	r3, [r4, #20]
 800301e:	055a      	lsls	r2, r3, #21
 8003020:	f53f af61 	bmi.w	8002ee6 <takktile_i2c+0x8e>
    if (!address_fail && data_len)
    {
      if (!(address & 0x1))
      {
        // it's a write transaction
        for (int i = 0; i < data_len; i++)
 8003024:	42b5      	cmp	r5, r6
 8003026:	d1ed      	bne.n	8003004 <takktile_i2c+0x1ac>
 8003028:	e75d      	b.n	8002ee6 <takktile_i2c+0x8e>
        for (int i = 0; i < data_len; i++)
        {
          if (i != data_len - 1)
            i2c->CR1 |= I2C_CR1_ACK;
          else
            i2c->CR1 &= ~I2C_CR1_ACK;
 800302a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800302e:	041b      	lsls	r3, r3, #16
 8003030:	0c1b      	lsrs	r3, r3, #16
 8003032:	8023      	strh	r3, [r4, #0]
 8003034:	e784      	b.n	8002f40 <takktile_i2c+0xe8>
 8003036:	b2c9      	uxtb	r1, r1
 8003038:	4620      	mov	r0, r4
 800303a:	466b      	mov	r3, sp
 800303c:	f7ff fb36 	bl	80026ac <takktile_bridge_spi_txrx.part.0>
 8003040:	e7c7      	b.n	8002fd2 <takktile_i2c+0x17a>
 8003042:	bf00      	nop
 8003044:	40005c00 	.word	0x40005c00
 8003048:	40005400 	.word	0x40005400

0800304c <takktile_poll_nonblocking_tick>:
  uint8_t bridge_state = takktile_bridge_read_reg(bridge_idx, 0x4);
  return (bridge_state == 0xf0 ? I2C_SUCCESS : I2C_FAIL);
}

void takktile_poll_nonblocking_tick(const uint8_t takktile_port)
{
 800304c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  static uint_fast8_t errCount[NUM_TACTILE_PORTS] = {0};
  const uint_fast8_t tp = takktile_port; // save typing
  if (tp >= NUM_TACTILE_PORTS)
 8003050:	2803      	cmp	r0, #3
  uint8_t bridge_state = takktile_bridge_read_reg(bridge_idx, 0x4);
  return (bridge_state == 0xf0 ? I2C_SUCCESS : I2C_FAIL);
}

void takktile_poll_nonblocking_tick(const uint8_t takktile_port)
{
 8003052:	b08a      	sub	sp, #40	; 0x28
 8003054:	4604      	mov	r4, r0
  static uint_fast8_t errCount[NUM_TACTILE_PORTS] = {0};
  const uint_fast8_t tp = takktile_port; // save typing
  if (tp >= NUM_TACTILE_PORTS)
 8003056:	d805      	bhi.n	8003064 <takktile_poll_nonblocking_tick+0x18>
    return; // let's not corrupt memory.
  takktile_async_poll_state_t *tps = &takktile_poll_states[tp]; // save typing  

  static uint_fast8_t active_sensor_idx[NUM_TACTILE_PORTS] = {0};
  int *i2c_status = NULL;
  if (takktile_port == 0 || takktile_port == 1)
 8003058:	2801      	cmp	r0, #1
 800305a:	d906      	bls.n	800306a <takktile_poll_nonblocking_tick+0x1e>
    i2c_status = (int *)&g_takktile_internal_i2c_status[takktile_port];
  else if (takktile_port == 2 || takktile_port == 3)
 800305c:	1e83      	subs	r3, r0, #2
 800305e:	b2da      	uxtb	r2, r3
 8003060:	2a01      	cmp	r2, #1
 8003062:	d940      	bls.n	80030e6 <takktile_poll_nonblocking_tick+0x9a>
      break;
    default:
      *tps = TPS_DONE;
      break;
  }
}
 8003064:	b00a      	add	sp, #40	; 0x28
 8003066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  takktile_async_poll_state_t *tps = &takktile_poll_states[tp]; // save typing  

  static uint_fast8_t active_sensor_idx[NUM_TACTILE_PORTS] = {0};
  int *i2c_status = NULL;
  if (takktile_port == 0 || takktile_port == 1)
    i2c_status = (int *)&g_takktile_internal_i2c_status[takktile_port];
 800306a:	4bb0      	ldr	r3, [pc, #704]	; (800332c <takktile_poll_nonblocking_tick+0x2e0>)
 800306c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8003070:	eb03 0580 	add.w	r5, r3, r0, lsl #2
  else if (takktile_port == 2 || takktile_port == 3)
    i2c_status = (int *)&g_takktile_bridged_i2c_status[takktile_port-2];
  else
    return; // shouldn't get here... but if somehow we do, it's time to bail

  if (*i2c_status == TACTILE_I2C_SUCCESS) {
 8003074:	1c51      	adds	r1, r2, #1
 8003076:	f000 80a8 	beq.w	80031ca <takktile_poll_nonblocking_tick+0x17e>
    errCount[takktile_port] = 0;
    err_unset(ERR_TAC_0_PROBLEM + takktile_port);
  } else if (*i2c_status == TACTILE_I2C_FAIL) {
 800307a:	3202      	adds	r2, #2
 800307c:	d06b      	beq.n	8003156 <takktile_poll_nonblocking_tick+0x10a>

  //const takktile_async_txrx_status *tats = &g_takktile_async_txrx_status[tp];
  const uint8_t sensor_count = (tp < NUM_FINGERS ? SENSORS_PER_FINGER : NUM_PALM_SENSORS);

  static uint32_t state_start_time_us[NUM_TACTILE_PORTS] = {0};
  switch (*tps)
 800307e:	4eac      	ldr	r6, [pc, #688]	; (8003330 <takktile_poll_nonblocking_tick+0x2e4>)
 8003080:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
      errCount[takktile_port]++;
    }
  }

  //const takktile_async_txrx_status *tats = &g_takktile_async_txrx_status[tp];
  const uint8_t sensor_count = (tp < NUM_FINGERS ? SENSORS_PER_FINGER : NUM_PALM_SENSORS);
 8003084:	2c03      	cmp	r4, #3
 8003086:	bf14      	ite	ne
 8003088:	2709      	movne	r7, #9
 800308a:	270b      	moveq	r7, #11

  static uint32_t state_start_time_us[NUM_TACTILE_PORTS] = {0};
  switch (*tps)
 800308c:	2b05      	cmp	r3, #5
 800308e:	f000 80ee 	beq.w	800326e <takktile_poll_nonblocking_tick+0x222>
 8003092:	d82e      	bhi.n	80030f2 <takktile_poll_nonblocking_tick+0xa6>
 8003094:	2b02      	cmp	r3, #2
 8003096:	f000 80d7 	beq.w	8003248 <takktile_poll_nonblocking_tick+0x1fc>
 800309a:	f240 80a0 	bls.w	80031de <takktile_poll_nonblocking_tick+0x192>
 800309e:	2b03      	cmp	r3, #3
 80030a0:	f000 8084 	beq.w	80031ac <takktile_poll_nonblocking_tick+0x160>
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	f040 808b 	bne.w	80031c0 <takktile_poll_nonblocking_tick+0x174>
        *tps = TPS_DONE;
      }
      break;
    case TPS_SENSOR_SAMPLING:
      // wait 3 ms
      if (SYSTIME - state_start_time_us[tp] > 3000) { // CORRECT
 80030aa:	4aa2      	ldr	r2, [pc, #648]	; (8003334 <takktile_poll_nonblocking_tick+0x2e8>)
 80030ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030b0:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80030ba:	1a5b      	subs	r3, r3, r1
 80030bc:	4293      	cmp	r3, r2
 80030be:	d9d1      	bls.n	8003064 <takktile_poll_nonblocking_tick+0x18>
        active_sensor_idx[tp] = 0;
 80030c0:	4b9d      	ldr	r3, [pc, #628]	; (8003338 <takktile_poll_nonblocking_tick+0x2ec>)
 80030c2:	2100      	movs	r1, #0
static uint_fast8_t takktile_sensor_addr(const uint_fast8_t takktile_port,
                                        const uint_fast8_t sensor_idx)
{
  if (takktile_port >= NUM_TACTILE_PORTS)
    return 0; // bogus
  if (takktile_port < NUM_FINGERS)
 80030c4:	2c03      	cmp	r4, #3
      }
      break;
    case TPS_SENSOR_SAMPLING:
      // wait 3 ms
      if (SYSTIME - state_start_time_us[tp] > 3000) { // CORRECT
        active_sensor_idx[tp] = 0;
 80030c6:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
        const uint8_t sensor_addr = takktile_sensor_addr(tp, 0);
        *tps = TPS_SELECT_SENSOR;
 80030ca:	f04f 0305 	mov.w	r3, #5
static uint_fast8_t takktile_sensor_addr(const uint_fast8_t takktile_port,
                                        const uint_fast8_t sensor_idx)
{
  if (takktile_port >= NUM_TACTILE_PORTS)
    return 0; // bogus
  if (takktile_port < NUM_FINGERS)
 80030ce:	f000 80ea 	beq.w	80032a6 <takktile_poll_nonblocking_tick+0x25a>
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void takktile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 80030d2:	2c02      	cmp	r4, #2
    case TPS_SENSOR_SAMPLING:
      // wait 3 ms
      if (SYSTIME - state_start_time_us[tp] > 3000) { // CORRECT
        active_sensor_idx[tp] = 0;
        const uint8_t sensor_addr = takktile_sensor_addr(tp, 0);
        *tps = TPS_SELECT_SENSOR;
 80030d4:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void takktile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 80030d8:	d8c4      	bhi.n	8003064 <takktile_poll_nonblocking_tick+0x18>
 80030da:	4620      	mov	r0, r4
 80030dc:	460a      	mov	r2, r1
 80030de:	460b      	mov	r3, r1
 80030e0:	f7ff fb68 	bl	80027b4 <takktile_i2c_async_start.part.1>
 80030e4:	e7be      	b.n	8003064 <takktile_poll_nonblocking_tick+0x18>
  static uint_fast8_t active_sensor_idx[NUM_TACTILE_PORTS] = {0};
  int *i2c_status = NULL;
  if (takktile_port == 0 || takktile_port == 1)
    i2c_status = (int *)&g_takktile_internal_i2c_status[takktile_port];
  else if (takktile_port == 2 || takktile_port == 3)
    i2c_status = (int *)&g_takktile_bridged_i2c_status[takktile_port-2];
 80030e6:	4d95      	ldr	r5, [pc, #596]	; (800333c <takktile_poll_nonblocking_tick+0x2f0>)
 80030e8:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80030ec:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80030f0:	e7c0      	b.n	8003074 <takktile_poll_nonblocking_tick+0x28>

  //const takktile_async_txrx_status *tats = &g_takktile_async_txrx_status[tp];
  const uint8_t sensor_count = (tp < NUM_FINGERS ? SENSORS_PER_FINGER : NUM_PALM_SENSORS);

  static uint32_t state_start_time_us[NUM_TACTILE_PORTS] = {0};
  switch (*tps)
 80030f2:	2b07      	cmp	r3, #7
 80030f4:	f000 809e 	beq.w	8003234 <takktile_poll_nonblocking_tick+0x1e8>
 80030f8:	f0c0 8089 	bcc.w	800320e <takktile_poll_nonblocking_tick+0x1c2>
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d034      	beq.n	800316a <takktile_poll_nonblocking_tick+0x11e>
 8003100:	3301      	adds	r3, #1
 8003102:	d15d      	bne.n	80031c0 <takktile_poll_nonblocking_tick+0x174>
  {
    case TPS_DONE: // initial state. kick things off.
      if (takktile_port == 2)
 8003104:	2c02      	cmp	r4, #2
 8003106:	f000 812b 	beq.w	8003360 <takktile_poll_nonblocking_tick+0x314>
          //   // writeBytesSPI(SPI1, takktile_sensor_addr(tp, i) + 1, NULL, 0, 1); // disable sensor i
          //   readBytesSPI(SPI1, takktile_sensor_addr(tp, i)>>1, 0, NULL);
          //   // udelay(SLEEP_TIME); // test
          // }
      }
      else if (takktile_port == 3)
 800310a:	2c03      	cmp	r4, #3
 800310c:	d0aa      	beq.n	8003064 <takktile_poll_nonblocking_tick+0x18>
      {

      }
      else
      {
         printf("Pressures %d: ", takktile_port);
 800310e:	488c      	ldr	r0, [pc, #560]	; (8003340 <takktile_poll_nonblocking_tick+0x2f4>)
 8003110:	4f8c      	ldr	r7, [pc, #560]	; (8003344 <takktile_poll_nonblocking_tick+0x2f8>)
 8003112:	4621      	mov	r1, r4
 8003114:	f000 fda0 	bl	8003c58 <printf>
 8003118:	f04f 0809 	mov.w	r8, #9
 800311c:	fb14 f508 	smulbb	r5, r4, r8
 8003120:	fb18 8804 	smlabb	r8, r8, r4, r8

        for (int i = 0; i < 9; i++)
        {
          const uint_fast8_t state_sensor_idx = ((uint8_t) tp) * SENSORS_PER_FINGER + i;
          printf("%3d ", g_state.takktile_pressures[state_sensor_idx]);
 8003124:	1d2b      	adds	r3, r5, #4
 8003126:	4888      	ldr	r0, [pc, #544]	; (8003348 <takktile_poll_nonblocking_tick+0x2fc>)
 8003128:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 800312c:	3501      	adds	r5, #1
 800312e:	b289      	uxth	r1, r1
 8003130:	f000 fd92 	bl	8003c58 <printf>
      }
      else
      {
         printf("Pressures %d: ", takktile_port);

        for (int i = 0; i < 9; i++)
 8003134:	4545      	cmp	r5, r8
 8003136:	d1f5      	bne.n	8003124 <takktile_poll_nonblocking_tick+0xd8>
        {
          const uint_fast8_t state_sensor_idx = ((uint8_t) tp) * SENSORS_PER_FINGER + i;
          printf("%3d ", g_state.takktile_pressures[state_sensor_idx]);
        }

        printf("\n");
 8003138:	200a      	movs	r0, #10
 800313a:	f000 fda5 	bl	8003c88 <putchar>

        *tps = TPS_BCAST_ENABLE;
 800313e:	2301      	movs	r3, #1
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void takktile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 8003140:	2c02      	cmp	r4, #2
          printf("%3d ", g_state.takktile_pressures[state_sensor_idx]);
        }

        printf("\n");

        *tps = TPS_BCAST_ENABLE;
 8003142:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void takktile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 8003146:	d88d      	bhi.n	8003064 <takktile_poll_nonblocking_tick+0x18>
 8003148:	2200      	movs	r2, #0
 800314a:	4620      	mov	r0, r4
 800314c:	4613      	mov	r3, r2
 800314e:	210c      	movs	r1, #12
 8003150:	f7ff fb30 	bl	80027b4 <takktile_i2c_async_start.part.1>
 8003154:	e786      	b.n	8003064 <takktile_poll_nonblocking_tick+0x18>

  if (*i2c_status == TACTILE_I2C_SUCCESS) {
    errCount[takktile_port] = 0;
    err_unset(ERR_TAC_0_PROBLEM + takktile_port);
  } else if (*i2c_status == TACTILE_I2C_FAIL) {
    if (errCount[takktile_port] > 100) {
 8003156:	4a7d      	ldr	r2, [pc, #500]	; (800334c <takktile_poll_nonblocking_tick+0x300>)
 8003158:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800315c:	2b64      	cmp	r3, #100	; 0x64
 800315e:	f200 809c 	bhi.w	800329a <takktile_poll_nonblocking_tick+0x24e>
      err_set(ERR_TAC_0_PROBLEM + takktile_port);
    } else {
      errCount[takktile_port]++;
 8003162:	3301      	adds	r3, #1
 8003164:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8003168:	e789      	b.n	800307e <takktile_poll_nonblocking_tick+0x32>
          takktile_i2c_async_start(tp, sensor_addr, NULL, 0);
        }
      }
      break;
    case TPS_DESELECT_SENSOR:
      takktile_i2c_async_tick(tp);
 800316a:	4620      	mov	r0, r4
 800316c:	f7ff fda0 	bl	8002cb0 <takktile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS ||
 8003170:	682b      	ldr	r3, [r5, #0]
 8003172:	3302      	adds	r3, #2
 8003174:	2b01      	cmp	r3, #1
 8003176:	f63f af75 	bhi.w	8003064 <takktile_poll_nonblocking_tick+0x18>
          *i2c_status == TACTILE_I2C_FAIL) {
        active_sensor_idx[tp]++;
 800317a:	4a6f      	ldr	r2, [pc, #444]	; (8003338 <takktile_poll_nonblocking_tick+0x2ec>)
 800317c:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8003180:	3301      	adds	r3, #1
        if (active_sensor_idx[tp] >= sensor_count) {
 8003182:	42bb      	cmp	r3, r7
      break;
    case TPS_DESELECT_SENSOR:
      takktile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS ||
          *i2c_status == TACTILE_I2C_FAIL) {
        active_sensor_idx[tp]++;
 8003184:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        if (active_sensor_idx[tp] >= sensor_count) {
 8003188:	d21a      	bcs.n	80031c0 <takktile_poll_nonblocking_tick+0x174>
          *tps = TPS_DONE;
        } else {
          *tps = TPS_SELECT_SENSOR;
 800318a:	2205      	movs	r2, #5
static uint_fast8_t takktile_sensor_addr(const uint_fast8_t takktile_port,
                                        const uint_fast8_t sensor_idx)
{
  if (takktile_port >= NUM_TACTILE_PORTS)
    return 0; // bogus
  if (takktile_port < NUM_FINGERS)
 800318c:	2c03      	cmp	r4, #3
          *i2c_status == TACTILE_I2C_FAIL) {
        active_sensor_idx[tp]++;
        if (active_sensor_idx[tp] >= sensor_count) {
          *tps = TPS_DONE;
        } else {
          *tps = TPS_SELECT_SENSOR;
 800318e:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
static uint_fast8_t takktile_sensor_addr(const uint_fast8_t takktile_port,
                                        const uint_fast8_t sensor_idx)
{
  if (takktile_port >= NUM_TACTILE_PORTS)
    return 0; // bogus
  if (takktile_port < NUM_FINGERS)
 8003192:	f43f af67 	beq.w	8003064 <takktile_poll_nonblocking_tick+0x18>
    return g_takktile_finger_addrs[sensor_idx];
 8003196:	4a6e      	ldr	r2, [pc, #440]	; (8003350 <takktile_poll_nonblocking_tick+0x304>)
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void takktile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 8003198:	2c02      	cmp	r4, #2
                                        const uint_fast8_t sensor_idx)
{
  if (takktile_port >= NUM_TACTILE_PORTS)
    return 0; // bogus
  if (takktile_port < NUM_FINGERS)
    return g_takktile_finger_addrs[sensor_idx];
 800319a:	5cd1      	ldrb	r1, [r2, r3]
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void takktile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 800319c:	f63f af62 	bhi.w	8003064 <takktile_poll_nonblocking_tick+0x18>
 80031a0:	2200      	movs	r2, #0
 80031a2:	4620      	mov	r0, r4
 80031a4:	4613      	mov	r3, r2
 80031a6:	f7ff fb05 	bl	80027b4 <takktile_i2c_async_start.part.1>
 80031aa:	e75b      	b.n	8003064 <takktile_poll_nonblocking_tick+0x18>
      } else if (*i2c_status == TACTILE_I2C_FAIL) {
        *tps = TPS_DONE;
      }
      break;
    case TPS_BCAST_DISABLE:
      takktile_i2c_async_tick(tp);
 80031ac:	4620      	mov	r0, r4
 80031ae:	f7ff fd7f 	bl	8002cb0 <takktile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
 80031b2:	682b      	ldr	r3, [r5, #0]
 80031b4:	1c5d      	adds	r5, r3, #1
 80031b6:	f000 80af 	beq.w	8003318 <takktile_poll_nonblocking_tick+0x2cc>
    case TPS_TX_READ_DATA_CMD:
      takktile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        *tps = TPS_READ_DATA;
        takktile_i2c_async_start(tp, BAROM_ADDR | I2C_READ, NULL, 4);
      } else if (*i2c_status == TACTILE_I2C_FAIL) {
 80031ba:	3302      	adds	r3, #2
 80031bc:	f47f af52 	bne.w	8003064 <takktile_poll_nonblocking_tick+0x18>
          takktile_i2c_async_start(tp, sensor_addr, NULL, 0);
        }
      }
      break;
    default:
      *tps = TPS_DONE;
 80031c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031c4:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
      break;
 80031c8:	e74c      	b.n	8003064 <takktile_poll_nonblocking_tick+0x18>
    i2c_status = (int *)&g_takktile_bridged_i2c_status[takktile_port-2];
  else
    return; // shouldn't get here... but if somehow we do, it's time to bail

  if (*i2c_status == TACTILE_I2C_SUCCESS) {
    errCount[takktile_port] = 0;
 80031ca:	4b60      	ldr	r3, [pc, #384]	; (800334c <takktile_poll_nonblocking_tick+0x300>)
    err_unset(ERR_TAC_0_PROBLEM + takktile_port);
 80031cc:	f104 0008 	add.w	r0, r4, #8
    i2c_status = (int *)&g_takktile_bridged_i2c_status[takktile_port-2];
  else
    return; // shouldn't get here... but if somehow we do, it's time to bail

  if (*i2c_status == TACTILE_I2C_SUCCESS) {
    errCount[takktile_port] = 0;
 80031d0:	2200      	movs	r2, #0
    err_unset(ERR_TAC_0_PROBLEM + takktile_port);
 80031d2:	b2c0      	uxtb	r0, r0
    i2c_status = (int *)&g_takktile_bridged_i2c_status[takktile_port-2];
  else
    return; // shouldn't get here... but if somehow we do, it's time to bail

  if (*i2c_status == TACTILE_I2C_SUCCESS) {
    errCount[takktile_port] = 0;
 80031d4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    err_unset(ERR_TAC_0_PROBLEM + takktile_port);
 80031d8:	f000 fc08 	bl	80039ec <err_unset>
 80031dc:	e74f      	b.n	800307e <takktile_poll_nonblocking_tick+0x32>

  //const takktile_async_txrx_status *tats = &g_takktile_async_txrx_status[tp];
  const uint8_t sensor_count = (tp < NUM_FINGERS ? SENSORS_PER_FINGER : NUM_PALM_SENSORS);

  static uint32_t state_start_time_us[NUM_TACTILE_PORTS] = {0};
  switch (*tps)
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d1ee      	bne.n	80031c0 <takktile_poll_nonblocking_tick+0x174>
        *tps = TPS_BCAST_ENABLE;
        takktile_i2c_async_start(tp, BCAST_ENABLE_ADDR, NULL, 0);  
      }
      break;
    case TPS_BCAST_ENABLE:
      takktile_i2c_async_tick(tp);
 80031e2:	4620      	mov	r0, r4
 80031e4:	f7ff fd64 	bl	8002cb0 <takktile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
 80031e8:	682b      	ldr	r3, [r5, #0]
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	d1e5      	bne.n	80031ba <takktile_poll_nonblocking_tick+0x16e>
        //*tps = TPS_DONE;
        uint8_t msg[2] = { 0x12, 0x01 };
 80031ee:	4a59      	ldr	r2, [pc, #356]	; (8003354 <takktile_poll_nonblocking_tick+0x308>)
        *tps = TPS_BCAST_START_SAMPLING;
 80031f0:	2302      	movs	r3, #2
      break;
    case TPS_BCAST_ENABLE:
      takktile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        //*tps = TPS_DONE;
        uint8_t msg[2] = { 0x12, 0x01 };
 80031f2:	8812      	ldrh	r2, [r2, #0]
 80031f4:	f8ad 201c 	strh.w	r2, [sp, #28]
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void takktile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 80031f8:	429c      	cmp	r4, r3
    case TPS_BCAST_ENABLE:
      takktile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        //*tps = TPS_DONE;
        uint8_t msg[2] = { 0x12, 0x01 };
        *tps = TPS_BCAST_START_SAMPLING;
 80031fa:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void takktile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 80031fe:	f63f af31 	bhi.w	8003064 <takktile_poll_nonblocking_tick+0x18>
 8003202:	4620      	mov	r0, r4
 8003204:	aa07      	add	r2, sp, #28
 8003206:	21c0      	movs	r1, #192	; 0xc0
 8003208:	f7ff fad4 	bl	80027b4 <takktile_i2c_async_start.part.1>
 800320c:	e72a      	b.n	8003064 <takktile_poll_nonblocking_tick+0x18>
      } else if (*i2c_status == TACTILE_I2C_FAIL) {
        *tps = TPS_DONE;
      }
      break;
    case TPS_TX_READ_DATA_CMD:
      takktile_i2c_async_tick(tp);
 800320e:	4620      	mov	r0, r4
 8003210:	f7ff fd4e 	bl	8002cb0 <takktile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
 8003214:	682b      	ldr	r3, [r5, #0]
 8003216:	1c59      	adds	r1, r3, #1
 8003218:	d1cf      	bne.n	80031ba <takktile_poll_nonblocking_tick+0x16e>
        *tps = TPS_READ_DATA;
 800321a:	2307      	movs	r3, #7
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void takktile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 800321c:	2c02      	cmp	r4, #2
      }
      break;
    case TPS_TX_READ_DATA_CMD:
      takktile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        *tps = TPS_READ_DATA;
 800321e:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void takktile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 8003222:	f63f af1f 	bhi.w	8003064 <takktile_poll_nonblocking_tick+0x18>
 8003226:	4620      	mov	r0, r4
 8003228:	21c1      	movs	r1, #193	; 0xc1
 800322a:	2200      	movs	r2, #0
 800322c:	2304      	movs	r3, #4
 800322e:	f7ff fac1 	bl	80027b4 <takktile_i2c_async_start.part.1>
 8003232:	e717      	b.n	8003064 <takktile_poll_nonblocking_tick+0x18>
      } else if (*i2c_status == TACTILE_I2C_FAIL) {
        *tps = TPS_DONE;
      }
      break;
    case TPS_READ_DATA:
      takktile_i2c_async_tick(tp);
 8003234:	4620      	mov	r0, r4
 8003236:	f7ff fd3b 	bl	8002cb0 <takktile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
 800323a:	682b      	ldr	r3, [r5, #0]
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	d034      	beq.n	80032aa <takktile_poll_nonblocking_tick+0x25e>

        //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
        //       tp, sensor_addr, pressure, temperature);
        *tps = TPS_DESELECT_SENSOR;
        takktile_i2c_async_start(tp, sensor_addr | I2C_READ, NULL, 1);
      } else if (*i2c_status == TACTILE_I2C_FAIL) {
 8003240:	3302      	adds	r3, #2
 8003242:	f47f af0f 	bne.w	8003064 <takktile_poll_nonblocking_tick+0x18>
 8003246:	e798      	b.n	800317a <takktile_poll_nonblocking_tick+0x12e>
      } else if (*i2c_status == TACTILE_I2C_FAIL) {
        *tps = TPS_DONE;
      }
      break;
    case TPS_BCAST_START_SAMPLING:
      takktile_i2c_async_tick(tp);
 8003248:	4620      	mov	r0, r4
 800324a:	f7ff fd31 	bl	8002cb0 <takktile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
 800324e:	682b      	ldr	r3, [r5, #0]
 8003250:	1c5f      	adds	r7, r3, #1
 8003252:	d1b2      	bne.n	80031ba <takktile_poll_nonblocking_tick+0x16e>
        *tps = TPS_BCAST_DISABLE;
 8003254:	2303      	movs	r3, #3
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void takktile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 8003256:	2c02      	cmp	r4, #2
      }
      break;
    case TPS_BCAST_START_SAMPLING:
      takktile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        *tps = TPS_BCAST_DISABLE;
 8003258:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void takktile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 800325c:	f63f af02 	bhi.w	8003064 <takktile_poll_nonblocking_tick+0x18>
 8003260:	4620      	mov	r0, r4
 8003262:	210d      	movs	r1, #13
 8003264:	2200      	movs	r2, #0
 8003266:	2301      	movs	r3, #1
 8003268:	f7ff faa4 	bl	80027b4 <takktile_i2c_async_start.part.1>
 800326c:	e6fa      	b.n	8003064 <takktile_poll_nonblocking_tick+0x18>
        *tps = TPS_SELECT_SENSOR;
        takktile_i2c_async_start(tp, sensor_addr, NULL, 0);
      }
      break;
    case TPS_SELECT_SENSOR:
      takktile_i2c_async_tick(tp);
 800326e:	4620      	mov	r0, r4
 8003270:	f7ff fd1e 	bl	8002cb0 <takktile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
 8003274:	682b      	ldr	r3, [r5, #0]
 8003276:	1c58      	adds	r0, r3, #1
 8003278:	d19f      	bne.n	80031ba <takktile_poll_nonblocking_tick+0x16e>
        uint8_t msg = 0;
 800327a:	2200      	movs	r2, #0
        *tps = TPS_TX_READ_DATA_CMD;
 800327c:	2306      	movs	r3, #6
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void takktile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 800327e:	2c02      	cmp	r4, #2
      }
      break;
    case TPS_SELECT_SENSOR:
      takktile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        uint8_t msg = 0;
 8003280:	f88d 201c 	strb.w	r2, [sp, #28]
        *tps = TPS_TX_READ_DATA_CMD;
 8003284:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void takktile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 8003288:	f63f aeec 	bhi.w	8003064 <takktile_poll_nonblocking_tick+0x18>
 800328c:	4620      	mov	r0, r4
 800328e:	21c0      	movs	r1, #192	; 0xc0
 8003290:	aa07      	add	r2, sp, #28
 8003292:	2301      	movs	r3, #1
 8003294:	f7ff fa8e 	bl	80027b4 <takktile_i2c_async_start.part.1>
 8003298:	e6e4      	b.n	8003064 <takktile_poll_nonblocking_tick+0x18>
  if (*i2c_status == TACTILE_I2C_SUCCESS) {
    errCount[takktile_port] = 0;
    err_unset(ERR_TAC_0_PROBLEM + takktile_port);
  } else if (*i2c_status == TACTILE_I2C_FAIL) {
    if (errCount[takktile_port] > 100) {
      err_set(ERR_TAC_0_PROBLEM + takktile_port);
 800329a:	f104 0008 	add.w	r0, r4, #8
 800329e:	b2c0      	uxtb	r0, r0
 80032a0:	f000 fb9e 	bl	80039e0 <err_set>
 80032a4:	e6eb      	b.n	800307e <takktile_poll_nonblocking_tick+0x32>
    case TPS_SENSOR_SAMPLING:
      // wait 3 ms
      if (SYSTIME - state_start_time_us[tp] > 3000) { // CORRECT
        active_sensor_idx[tp] = 0;
        const uint8_t sensor_addr = takktile_sensor_addr(tp, 0);
        *tps = TPS_SELECT_SENSOR;
 80032a6:	60f3      	str	r3, [r6, #12]
 80032a8:	e6dc      	b.n	8003064 <takktile_poll_nonblocking_tick+0x18>
      }
      break;
    case TPS_READ_DATA:
      takktile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        uint8_t sensor_addr = takktile_sensor_addr(tp, active_sensor_idx[tp]);
 80032aa:	4b23      	ldr	r3, [pc, #140]	; (8003338 <takktile_poll_nonblocking_tick+0x2ec>)
        const uint8_t *p = g_takktile_i2c_async_data[tp];
 80032ac:	482a      	ldr	r0, [pc, #168]	; (8003358 <takktile_poll_nonblocking_tick+0x30c>)
      }
      break;
    case TPS_READ_DATA:
      takktile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        uint8_t sensor_addr = takktile_sensor_addr(tp, active_sensor_idx[tp]);
 80032ae:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
static uint_fast8_t takktile_sensor_addr(const uint_fast8_t takktile_port,
                                        const uint_fast8_t sensor_idx)
{
  if (takktile_port >= NUM_TACTILE_PORTS)
    return 0; // bogus
  if (takktile_port < NUM_FINGERS)
 80032b2:	2c03      	cmp	r4, #3
    return g_takktile_finger_addrs[sensor_idx];
 80032b4:	bf14      	ite	ne
 80032b6:	4b26      	ldrne	r3, [pc, #152]	; (8003350 <takktile_poll_nonblocking_tick+0x304>)
  else
    return g_takktile_palm_addrs[sensor_idx];
 80032b8:	4b28      	ldreq	r3, [pc, #160]	; (800335c <takktile_poll_nonblocking_tick+0x310>)
 80032ba:	5c99      	ldrb	r1, [r3, r2]
      break;
    case TPS_READ_DATA:
      takktile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        uint8_t sensor_addr = takktile_sensor_addr(tp, active_sensor_idx[tp]);
        const uint8_t *p = g_takktile_i2c_async_data[tp];
 80032bc:	0223      	lsls	r3, r4, #8
 80032be:	eb00 0e03 	add.w	lr, r0, r3
        // Addition deals with small wraps
        const uint16_t pressure = 510 - (p[0]<200 ? ((uint16_t)p[0] + 255) : ((uint16_t)p[0]));
 80032c2:	5cc3      	ldrb	r3, [r0, r3]
        const uint16_t temperature = ((uint16_t)p[2] << 2) | (p[3] >> 6);
 80032c4:	f89e 5003 	ldrb.w	r5, [lr, #3]
 80032c8:	f89e e002 	ldrb.w	lr, [lr, #2]
      takktile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        uint8_t sensor_addr = takktile_sensor_addr(tp, active_sensor_idx[tp]);
        const uint8_t *p = g_takktile_i2c_async_data[tp];
        // Addition deals with small wraps
        const uint16_t pressure = 510 - (p[0]<200 ? ((uint16_t)p[0] + 255) : ((uint16_t)p[0]));
 80032cc:	2bc7      	cmp	r3, #199	; 0xc7
 80032ce:	bf94      	ite	ls
 80032d0:	f1c3 03ff 	rsbls	r3, r3, #255	; 0xff
 80032d4:	f5c3 73ff 	rsbhi	r3, r3, #510	; 0x1fe
 80032d8:	b298      	uxth	r0, r3
        const uint16_t temperature = ((uint16_t)p[2] << 2) | (p[3] >> 6);
        const uint_fast8_t state_sensor_idx = tp * SENSORS_PER_FINGER + active_sensor_idx[tp];
 80032da:	2309      	movs	r3, #9
 80032dc:	fb13 2204 	smlabb	r2, r3, r4, r2
        g_state.takktile_pressures   [state_sensor_idx] = pressure;
 80032e0:	1d17      	adds	r7, r2, #4
 80032e2:	4b18      	ldr	r3, [pc, #96]	; (8003344 <takktile_poll_nonblocking_tick+0x2f8>)
        g_state.takktile_temperatures[state_sensor_idx] = temperature;
 80032e4:	3228      	adds	r2, #40	; 0x28
        const uint8_t *p = g_takktile_i2c_async_data[tp];
        // Addition deals with small wraps
        const uint16_t pressure = 510 - (p[0]<200 ? ((uint16_t)p[0] + 255) : ((uint16_t)p[0]));
        const uint16_t temperature = ((uint16_t)p[2] << 2) | (p[3] >> 6);
        const uint_fast8_t state_sensor_idx = tp * SENSORS_PER_FINGER + active_sensor_idx[tp];
        g_state.takktile_pressures   [state_sensor_idx] = pressure;
 80032e6:	f833 c017 	ldrh.w	ip, [r3, r7, lsl #1]
 80032ea:	f823 0017 	strh.w	r0, [r3, r7, lsl #1]
        g_state.takktile_temperatures[state_sensor_idx] = temperature;
 80032ee:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        uint8_t sensor_addr = takktile_sensor_addr(tp, active_sensor_idx[tp]);
        const uint8_t *p = g_takktile_i2c_async_data[tp];
        // Addition deals with small wraps
        const uint16_t pressure = 510 - (p[0]<200 ? ((uint16_t)p[0] + 255) : ((uint16_t)p[0]));
        const uint16_t temperature = ((uint16_t)p[2] << 2) | (p[3] >> 6);
 80032f2:	09aa      	lsrs	r2, r5, #6
 80032f4:	ea42 028e 	orr.w	r2, r2, lr, lsl #2
        g_state.takktile_pressures   [state_sensor_idx] = pressure;
        g_state.takktile_temperatures[state_sensor_idx] = temperature;

        //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
        //       tp, sensor_addr, pressure, temperature);
        *tps = TPS_DESELECT_SENSOR;
 80032f8:	2008      	movs	r0, #8
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void takktile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 80032fa:	2c02      	cmp	r4, #2
        // Addition deals with small wraps
        const uint16_t pressure = 510 - (p[0]<200 ? ((uint16_t)p[0] + 255) : ((uint16_t)p[0]));
        const uint16_t temperature = ((uint16_t)p[2] << 2) | (p[3] >> 6);
        const uint_fast8_t state_sensor_idx = tp * SENSORS_PER_FINGER + active_sensor_idx[tp];
        g_state.takktile_pressures   [state_sensor_idx] = pressure;
        g_state.takktile_temperatures[state_sensor_idx] = temperature;
 80032fc:	889d      	ldrh	r5, [r3, #4]

        //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
        //       tp, sensor_addr, pressure, temperature);
        *tps = TPS_DESELECT_SENSOR;
 80032fe:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
        // Addition deals with small wraps
        const uint16_t pressure = 510 - (p[0]<200 ? ((uint16_t)p[0] + 255) : ((uint16_t)p[0]));
        const uint16_t temperature = ((uint16_t)p[2] << 2) | (p[3] >> 6);
        const uint_fast8_t state_sensor_idx = tp * SENSORS_PER_FINGER + active_sensor_idx[tp];
        g_state.takktile_pressures   [state_sensor_idx] = pressure;
        g_state.takktile_temperatures[state_sensor_idx] = temperature;
 8003302:	809a      	strh	r2, [r3, #4]
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void takktile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 8003304:	f63f aeae 	bhi.w	8003064 <takktile_poll_nonblocking_tick+0x18>
 8003308:	4620      	mov	r0, r4
 800330a:	f041 0101 	orr.w	r1, r1, #1
 800330e:	2200      	movs	r2, #0
 8003310:	2301      	movs	r3, #1
 8003312:	f7ff fa4f 	bl	80027b4 <takktile_i2c_async_start.part.1>
 8003316:	e6a5      	b.n	8003064 <takktile_poll_nonblocking_tick+0x18>
      break;
    case TPS_BCAST_DISABLE:
      takktile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        *tps = TPS_SENSOR_SAMPLING;
        state_start_time_us[tp] = SYSTIME;
 8003318:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <takktile_poll_nonblocking_tick+0x2e8>)
 800331e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003320:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
      }
      break;
    case TPS_BCAST_DISABLE:
      takktile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        *tps = TPS_SENSOR_SAMPLING;
 8003324:	2304      	movs	r3, #4
 8003326:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 800332a:	e69b      	b.n	8003064 <takktile_poll_nonblocking_tick+0x18>
 800332c:	20010000 	.word	0x20010000
 8003330:	2001042c 	.word	0x2001042c
 8003334:	20010008 	.word	0x20010008
 8003338:	2000ffe0 	.word	0x2000ffe0
 800333c:	2001043c 	.word	0x2001043c
 8003340:	0800ab8c 	.word	0x0800ab8c
 8003344:	20010580 	.word	0x20010580
 8003348:	0800ab84 	.word	0x0800ab84
 800334c:	2001001c 	.word	0x2001001c
 8003350:	0800ab0c 	.word	0x0800ab0c
 8003354:	0800aaf0 	.word	0x0800aaf0
 8003358:	2001002c 	.word	0x2001002c
 800335c:	0800ab00 	.word	0x0800ab00
    case TPS_DONE: // initial state. kick things off.
      if (takktile_port == 2)
      {
        uint_fast8_t index;
        uint8_t sleepTime = 100;
        uint8_t data[2] = {0x12, 0x01};
 8003360:	4d4f      	ldr	r5, [pc, #316]	; (80034a0 <takktile_poll_nonblocking_tick+0x454>)
        uint8_t msg[1] = {0x00};
        uint8_t aux[1] = {0x00};
        writeBytesSPI(SPI1, BCAST_ENABLE_ADDR, NULL, 0, 1);  // enable all sensors    
 8003362:	4850      	ldr	r0, [pc, #320]	; (80034a4 <takktile_poll_nonblocking_tick+0x458>)
    case TPS_DONE: // initial state. kick things off.
      if (takktile_port == 2)
      {
        uint_fast8_t index;
        uint8_t sleepTime = 100;
        uint8_t data[2] = {0x12, 0x01};
 8003364:	882b      	ldrh	r3, [r5, #0]
 8003366:	f8ad 3014 	strh.w	r3, [sp, #20]
        uint8_t msg[1] = {0x00};
        uint8_t aux[1] = {0x00};
 800336a:	ae0a      	add	r6, sp, #40	; 0x28
      if (takktile_port == 2)
      {
        uint_fast8_t index;
        uint8_t sleepTime = 100;
        uint8_t data[2] = {0x12, 0x01};
        uint8_t msg[1] = {0x00};
 800336c:	f04f 0900 	mov.w	r9, #0
        uint8_t aux[1] = {0x00};
        writeBytesSPI(SPI1, BCAST_ENABLE_ADDR, NULL, 0, 1);  // enable all sensors    
 8003370:	f04f 0a01 	mov.w	sl, #1
 8003374:	464a      	mov	r2, r9
 8003376:	464b      	mov	r3, r9
 8003378:	f8cd a000 	str.w	sl, [sp]
 800337c:	210c      	movs	r1, #12
      {
        uint_fast8_t index;
        uint8_t sleepTime = 100;
        uint8_t data[2] = {0x12, 0x01};
        uint8_t msg[1] = {0x00};
        uint8_t aux[1] = {0x00};
 800337e:	f806 9d18 	strb.w	r9, [r6, #-24]!
      if (takktile_port == 2)
      {
        uint_fast8_t index;
        uint8_t sleepTime = 100;
        uint8_t data[2] = {0x12, 0x01};
        uint8_t msg[1] = {0x00};
 8003382:	f88d 900c 	strb.w	r9, [sp, #12]
        uint8_t aux[1] = {0x00};
        writeBytesSPI(SPI1, BCAST_ENABLE_ADDR, NULL, 0, 1);  // enable all sensors    
 8003386:	f7fd facd 	bl	8000924 <writeBytesSPI>
        udelay(sleepTime);
 800338a:	2064      	movs	r0, #100	; 0x64
 800338c:	f7fd fac2 	bl	8000914 <udelay>
        writeBytesSPI(SPI1, BAROM_ADDR, data, 2, 1);         // send Start Conversion Sequence
 8003390:	4623      	mov	r3, r4
 8003392:	aa05      	add	r2, sp, #20
 8003394:	21c0      	movs	r1, #192	; 0xc0
 8003396:	f8cd a000 	str.w	sl, [sp]
 800339a:	4842      	ldr	r0, [pc, #264]	; (80034a4 <takktile_poll_nonblocking_tick+0x458>)
 800339c:	4f42      	ldr	r7, [pc, #264]	; (80034a8 <takktile_poll_nonblocking_tick+0x45c>)
 800339e:	f7fd fac1 	bl	8000924 <writeBytesSPI>
        udelay(sleepTime);
 80033a2:	2064      	movs	r0, #100	; 0x64
 80033a4:	f7fd fab6 	bl	8000914 <udelay>
        readBytesSPI(SPI1, BCAST_DISABLE_ADDR >> 1, 1, aux); // disable all sensors
 80033a8:	4652      	mov	r2, sl
 80033aa:	4633      	mov	r3, r6
 80033ac:	2106      	movs	r1, #6
 80033ae:	483d      	ldr	r0, [pc, #244]	; (80034a4 <takktile_poll_nonblocking_tick+0x458>)
 80033b0:	f7fd fc0c 	bl	8000bcc <readBytesSPI>
        udelay(3000);                                     // wait 3ms
 80033b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80033b8:	f7fd faac 	bl	8000914 <udelay>

        uint8_t values[4] = {0, 0, 0, 0};
        uint8_t addresses[9] = {0x00, 0x02, 0x04, 0x06, 0x08, 0x10, 0x12, 0x14, 0x16};
 80033bc:	462b      	mov	r3, r5
 80033be:	f10d 081c 	add.w	r8, sp, #28
 80033c2:	f853 0f04 	ldr.w	r0, [r3, #4]!
        writeBytesSPI(SPI1, BAROM_ADDR, data, 2, 1);         // send Start Conversion Sequence
        udelay(sleepTime);
        readBytesSPI(SPI1, BCAST_DISABLE_ADDR >> 1, 1, aux); // disable all sensors
        udelay(3000);                                     // wait 3ms

        uint8_t values[4] = {0, 0, 0, 0};
 80033c6:	f88d 9018 	strb.w	r9, [sp, #24]
        uint8_t addresses[9] = {0x00, 0x02, 0x04, 0x06, 0x08, 0x10, 0x12, 0x14, 0x16};
 80033ca:	6859      	ldr	r1, [r3, #4]
 80033cc:	7a1a      	ldrb	r2, [r3, #8]
        writeBytesSPI(SPI1, BAROM_ADDR, data, 2, 1);         // send Start Conversion Sequence
        udelay(sleepTime);
        readBytesSPI(SPI1, BCAST_DISABLE_ADDR >> 1, 1, aux); // disable all sensors
        udelay(3000);                                     // wait 3ms

        uint8_t values[4] = {0, 0, 0, 0};
 80033ce:	f88d 9019 	strb.w	r9, [sp, #25]
        uint8_t addresses[9] = {0x00, 0x02, 0x04, 0x06, 0x08, 0x10, 0x12, 0x14, 0x16};
 80033d2:	4643      	mov	r3, r8
 80033d4:	c303      	stmia	r3!, {r0, r1}
        //   printf("%3d ", g_state.takktile_pressures[index]);
        // }

        // printf("\n");
       
        printf("Pressures 2: ");
 80033d6:	4835      	ldr	r0, [pc, #212]	; (80034ac <takktile_poll_nonblocking_tick+0x460>)
        writeBytesSPI(SPI1, BAROM_ADDR, data, 2, 1);         // send Start Conversion Sequence
        udelay(sleepTime);
        readBytesSPI(SPI1, BCAST_DISABLE_ADDR >> 1, 1, aux); // disable all sensors
        udelay(3000);                                     // wait 3ms

        uint8_t values[4] = {0, 0, 0, 0};
 80033d8:	f88d 901a 	strb.w	r9, [sp, #26]
 80033dc:	f88d 901b 	strb.w	r9, [sp, #27]
        uint8_t addresses[9] = {0x00, 0x02, 0x04, 0x06, 0x08, 0x10, 0x12, 0x14, 0x16};
 80033e0:	701a      	strb	r2, [r3, #0]
        //   printf("%3d ", g_state.takktile_pressures[index]);
        // }

        // printf("\n");
       
        printf("Pressures 2: ");
 80033e2:	f000 fc39 	bl	8003c58 <printf>

        for (int i = 0; i < 9; i++)
        {
          
          writeBytesSPI(SPI1, addresses[i], NULL, 0, 1); // enable sensor i
 80033e6:	4655      	mov	r5, sl
 80033e8:	f10d 0924 	add.w	r9, sp, #36	; 0x24
 80033ec:	f10d 0a1b 	add.w	sl, sp, #27
 80033f0:	f81a 4f01 	ldrb.w	r4, [sl, #1]!
 80033f4:	482b      	ldr	r0, [pc, #172]	; (80034a4 <takktile_poll_nonblocking_tick+0x458>)
 80033f6:	9500      	str	r5, [sp, #0]
 80033f8:	2200      	movs	r2, #0
 80033fa:	4613      	mov	r3, r2
 80033fc:	4621      	mov	r1, r4
 80033fe:	f7fd fa91 	bl	8000924 <writeBytesSPI>
          udelay(sleepTime);
 8003402:	2064      	movs	r0, #100	; 0x64
 8003404:	f7fd fa86 	bl	8000914 <udelay>

          writeBytesSPI(SPI1, BAROM_ADDR, msg, 1, 1);       // choose register 0x00
 8003408:	21c0      	movs	r1, #192	; 0xc0
 800340a:	aa03      	add	r2, sp, #12
 800340c:	2301      	movs	r3, #1
 800340e:	9500      	str	r5, [sp, #0]
 8003410:	4824      	ldr	r0, [pc, #144]	; (80034a4 <takktile_poll_nonblocking_tick+0x458>)
 8003412:	f7fd fa87 	bl	8000924 <writeBytesSPI>
          udelay(sleepTime);
 8003416:	2064      	movs	r0, #100	; 0x64
 8003418:	f7fd fa7c 	bl	8000914 <udelay>

          readBytesSPI(SPI1, BAROM_ADDR >> 1, 4, values);      // read 4 bytes
 800341c:	2160      	movs	r1, #96	; 0x60
 800341e:	2204      	movs	r2, #4
 8003420:	ab06      	add	r3, sp, #24
 8003422:	4820      	ldr	r0, [pc, #128]	; (80034a4 <takktile_poll_nonblocking_tick+0x458>)
 8003424:	f7fd fbd2 	bl	8000bcc <readBytesSPI>
          udelay(sleepTime);
 8003428:	2064      	movs	r0, #100	; 0x64
 800342a:	f7fd fa73 	bl	8000914 <udelay>

          index = tp * SENSORS_PER_FINGER + i;
          g_state.takktile_pressures[index] = 510 - (values[0]<200 ? ((uint16_t)values[0] + 255) : ((uint16_t)values[0]));
 800342e:	f89d 2018 	ldrb.w	r2, [sp, #24]
          g_state.takktile_temperatures[index] = ((uint16_t)values[2] << 2) | (values[3] >> 6);
 8003432:	f89d e01b 	ldrb.w	lr, [sp, #27]
          printf("%3d ", g_state.takktile_pressures[index]);
 8003436:	481e      	ldr	r0, [pc, #120]	; (80034b0 <takktile_poll_nonblocking_tick+0x464>)
 8003438:	ebc8 030a 	rsb	r3, r8, sl

          readBytesSPI(SPI1, BAROM_ADDR >> 1, 4, values);      // read 4 bytes
          udelay(sleepTime);

          index = tp * SENSORS_PER_FINGER + i;
          g_state.takktile_pressures[index] = 510 - (values[0]<200 ? ((uint16_t)values[0] + 255) : ((uint16_t)values[0]));
 800343c:	2ac7      	cmp	r2, #199	; 0xc7
 800343e:	f1c2 01ff 	rsb	r1, r2, #255	; 0xff
 8003442:	f103 0312 	add.w	r3, r3, #18
 8003446:	bf98      	it	ls
 8003448:	b28a      	uxthls	r2, r1
 800344a:	f103 0104 	add.w	r1, r3, #4
 800344e:	bf84      	itt	hi
 8003450:	f5c2 72ff 	rsbhi	r2, r2, #510	; 0x1fe
 8003454:	b292      	uxthhi	r2, r2
 8003456:	f837 c011 	ldrh.w	ip, [r7, r1, lsl #1]
          g_state.takktile_temperatures[index] = ((uint16_t)values[2] << 2) | (values[3] >> 6);
 800345a:	f89d c01a 	ldrb.w	ip, [sp, #26]

          readBytesSPI(SPI1, BAROM_ADDR >> 1, 4, values);      // read 4 bytes
          udelay(sleepTime);

          index = tp * SENSORS_PER_FINGER + i;
          g_state.takktile_pressures[index] = 510 - (values[0]<200 ? ((uint16_t)values[0] + 255) : ((uint16_t)values[0]));
 800345e:	f827 2011 	strh.w	r2, [r7, r1, lsl #1]
          g_state.takktile_temperatures[index] = ((uint16_t)values[2] << 2) | (values[3] >> 6);
 8003462:	3328      	adds	r3, #40	; 0x28
 8003464:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8003468:	ea4f 129e 	mov.w	r2, lr, lsr #6
 800346c:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
 8003470:	f8b3 e004 	ldrh.w	lr, [r3, #4]
 8003474:	809a      	strh	r2, [r3, #4]
          printf("%3d ", g_state.takktile_pressures[index]);
 8003476:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 800347a:	b289      	uxth	r1, r1
 800347c:	f000 fbec 	bl	8003c58 <printf>

          readBytesSPI(SPI1, addresses[i] >> 1, 1, aux);
 8003480:	0861      	lsrs	r1, r4, #1
 8003482:	2201      	movs	r2, #1
 8003484:	4633      	mov	r3, r6
 8003486:	4807      	ldr	r0, [pc, #28]	; (80034a4 <takktile_poll_nonblocking_tick+0x458>)
 8003488:	f7fd fba0 	bl	8000bcc <readBytesSPI>
          udelay(sleepTime);
 800348c:	2064      	movs	r0, #100	; 0x64
 800348e:	f7fd fa41 	bl	8000914 <udelay>

        // printf("\n");
       
        printf("Pressures 2: ");

        for (int i = 0; i < 9; i++)
 8003492:	45ca      	cmp	sl, r9
 8003494:	d1ac      	bne.n	80033f0 <takktile_poll_nonblocking_tick+0x3a4>

          readBytesSPI(SPI1, addresses[i] >> 1, 1, aux);
          udelay(sleepTime);
        }

        printf("\n");
 8003496:	200a      	movs	r0, #10
 8003498:	f000 fbf6 	bl	8003c88 <putchar>
 800349c:	e5e2      	b.n	8003064 <takktile_poll_nonblocking_tick+0x18>
 800349e:	bf00      	nop
 80034a0:	0800aaf0 	.word	0x0800aaf0
 80034a4:	40013000 	.word	0x40013000
 80034a8:	20010580 	.word	0x20010580
 80034ac:	0800ab74 	.word	0x0800ab74
 80034b0:	0800ab84 	.word	0x0800ab84

080034b4 <pin_set_output_type>:

void pin_set_output_type(GPIO_TypeDef *gpio, 
                         const uint8_t pin_idx,
                         const uint8_t output_type)
{
  if (output_type == PIN_OUTPUT_TYPE_OPEN_DRAIN)
 80034b4:	2a01      	cmp	r2, #1
 80034b6:	d006      	beq.n	80034c6 <pin_set_output_type+0x12>
    gpio->OTYPER |= (1 << pin_idx);
  }
  else
  {
    //printf("setting pin %d to push-pull\r\n", pin_idx);
    gpio->OTYPER &= ~(1 << pin_idx);
 80034b8:	6842      	ldr	r2, [r0, #4]
 80034ba:	2301      	movs	r3, #1
 80034bc:	408b      	lsls	r3, r1
 80034be:	ea22 0303 	bic.w	r3, r2, r3
 80034c2:	6043      	str	r3, [r0, #4]
 80034c4:	4770      	bx	lr
                         const uint8_t output_type)
{
  if (output_type == PIN_OUTPUT_TYPE_OPEN_DRAIN)
  {
    //printf("setting pin %d to open-drain\r\n", pin_idx);
    gpio->OTYPER |= (1 << pin_idx);
 80034c6:	6843      	ldr	r3, [r0, #4]
 80034c8:	408a      	lsls	r2, r1
 80034ca:	431a      	orrs	r2, r3
 80034cc:	6042      	str	r2, [r0, #4]
 80034ce:	4770      	bx	lr

080034d0 <pin_set_alternate_function>:

void pin_set_alternate_function(GPIO_TypeDef *gpio,
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
 80034d0:	290f      	cmp	r1, #15
 80034d2:	d822      	bhi.n	800351a <pin_set_alternate_function+0x4a>
 80034d4:	2a0f      	cmp	r2, #15
 80034d6:	d820      	bhi.n	800351a <pin_set_alternate_function+0x4a>
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 80034d8:	2907      	cmp	r1, #7
}

void pin_set_alternate_function(GPIO_TypeDef *gpio,
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
 80034da:	b470      	push	{r4, r5, r6}
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 80034dc:	d91e      	bls.n	800351c <pin_set_alternate_function+0x4c>
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
 80034de:	f1a1 0308 	sub.w	r3, r1, #8
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 80034e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	b2db      	uxtb	r3, r3
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 80034e8:	4625      	mov	r5, r4
 80034ea:	f100 0624 	add.w	r6, r0, #36	; 0x24
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
  *af_reg &= ~(0xf << reg_ofs); // zero out whatever was there before
 80034ee:	240f      	movs	r4, #15
 80034f0:	409c      	lsls	r4, r3
 80034f2:	ea25 0404 	bic.w	r4, r5, r4
 80034f6:	6034      	str	r4, [r6, #0]
  *af_reg |= function_idx << reg_ofs; // set the alternate function register
 80034f8:	6834      	ldr	r4, [r6, #0]
 80034fa:	409a      	lsls	r2, r3
 80034fc:	4322      	orrs	r2, r4
 80034fe:	6032      	str	r2, [r6, #0]
  gpio->MODER &= ~(3 << (pin_idx * 2)); // zero out whatever was there before
 8003500:	6802      	ldr	r2, [r0, #0]
 8003502:	0049      	lsls	r1, r1, #1
 8003504:	2303      	movs	r3, #3
 8003506:	408b      	lsls	r3, r1
 8003508:	ea22 0303 	bic.w	r3, r2, r3
 800350c:	6003      	str	r3, [r0, #0]
  gpio->MODER |= 2 << (pin_idx * 2); // put the GPIO in alternate-function mode
}
 800350e:	bc70      	pop	{r4, r5, r6}
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
  *af_reg &= ~(0xf << reg_ofs); // zero out whatever was there before
  *af_reg |= function_idx << reg_ofs; // set the alternate function register
  gpio->MODER &= ~(3 << (pin_idx * 2)); // zero out whatever was there before
  gpio->MODER |= 2 << (pin_idx * 2); // put the GPIO in alternate-function mode
 8003510:	6802      	ldr	r2, [r0, #0]
 8003512:	2302      	movs	r3, #2
 8003514:	408b      	lsls	r3, r1
 8003516:	4313      	orrs	r3, r2
 8003518:	6003      	str	r3, [r0, #0]
}
 800351a:	4770      	bx	lr
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 800351c:	6a04      	ldr	r4, [r0, #32]
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
 800351e:	008b      	lsls	r3, r1, #2
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 8003520:	4625      	mov	r5, r4
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
 8003522:	b2db      	uxtb	r3, r3
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 8003524:	f100 0620 	add.w	r6, r0, #32
 8003528:	e7e1      	b.n	80034ee <pin_set_alternate_function+0x1e>
 800352a:	bf00      	nop

0800352c <pin_set_output>:
  gpio->MODER |= 2 << (pin_idx * 2); // put the GPIO in alternate-function mode
}

void pin_set_output(GPIO_TypeDef *gpio, const uint8_t pin_idx)
{
  if (pin_idx > 15)
 800352c:	290f      	cmp	r1, #15
 800352e:	d80b      	bhi.n	8003548 <pin_set_output+0x1c>
    return; // adios amigo
  gpio->MODER &= ~(3 << (pin_idx * 2));
 8003530:	6802      	ldr	r2, [r0, #0]
 8003532:	0049      	lsls	r1, r1, #1
 8003534:	2303      	movs	r3, #3
 8003536:	408b      	lsls	r3, r1
 8003538:	ea22 0303 	bic.w	r3, r2, r3
 800353c:	6003      	str	r3, [r0, #0]
  gpio->MODER |= 1 << (pin_idx * 2);
 800353e:	6802      	ldr	r2, [r0, #0]
 8003540:	2301      	movs	r3, #1
 8003542:	408b      	lsls	r3, r1
 8003544:	4313      	orrs	r3, r2
 8003546:	6003      	str	r3, [r0, #0]
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop

0800354c <pin_set_output_level>:

void pin_set_output_level(GPIO_TypeDef *gpio, 
                          const uint8_t pin_idx, 
                          const uint8_t pin_level)
{
  if (pin_idx > 15)
 800354c:	290f      	cmp	r1, #15
 800354e:	d804      	bhi.n	800355a <pin_set_output_level+0xe>
    return;
  if (pin_level)
    gpio->BSRRL = 1 << pin_idx;
 8003550:	2301      	movs	r3, #1
 8003552:	408b      	lsls	r3, r1
 8003554:	b29b      	uxth	r3, r3
                          const uint8_t pin_idx, 
                          const uint8_t pin_level)
{
  if (pin_idx > 15)
    return;
  if (pin_level)
 8003556:	b90a      	cbnz	r2, 800355c <pin_set_output_level+0x10>
    gpio->BSRRL = 1 << pin_idx;
  else
    gpio->BSRRH = 1 << pin_idx;
 8003558:	8343      	strh	r3, [r0, #26]
 800355a:	4770      	bx	lr
                          const uint8_t pin_level)
{
  if (pin_idx > 15)
    return;
  if (pin_level)
    gpio->BSRRL = 1 << pin_idx;
 800355c:	8303      	strh	r3, [r0, #24]
 800355e:	4770      	bx	lr

08003560 <encInit>:
  // writeBytesSPI(SPI1, AS5048_7BIT_ADDRESS, data, 2, 0);

  // initializing encoders state
  for (int i = 0; i < NUM_ENC; i++)
  {
    g_state.encoders[i] = 0;
 8003560:	4b07      	ldr	r3, [pc, #28]	; (8003580 <encInit+0x20>)
 8003562:	2200      	movs	r2, #0
 8003564:	f8b3 10a0 	ldrh.w	r1, [r3, #160]	; 0xa0
 8003568:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 800356c:	f8b3 10a2 	ldrh.w	r1, [r3, #162]	; 0xa2
 8003570:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8003574:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	; 0xa4
 8003578:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	20010580 	.word	0x20010580

08003584 <checkTimeout>:
  }
}

int checkTimeout(int utime, int initialTime)
{
 return (SYSTIME - initialTime > utime);
 8003584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	1a59      	subs	r1, r3, r1
}
 800358c:	4281      	cmp	r1, r0
 800358e:	bf94      	ite	ls
 8003590:	2000      	movls	r0, #0
 8003592:	2001      	movhi	r0, #1
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop

08003598 <readEncoderI2C>:

int readEncoderI2C(I2C_TypeDef* i2cPort, uint8_t encoderNumber, int timeout)
{
 8003598:	b530      	push	{r4, r5, lr}
 800359a:	4605      	mov	r5, r0
 800359c:	b083      	sub	sp, #12
  printf("Encoder %d: ", encoderNumber);
 800359e:	4813      	ldr	r0, [pc, #76]	; (80035ec <readEncoderI2C+0x54>)
{
 return (SYSTIME - initialTime > utime);
}

int readEncoderI2C(I2C_TypeDef* i2cPort, uint8_t encoderNumber, int timeout)
{
 80035a0:	460c      	mov	r4, r1
  printf("Encoder %d: ", encoderNumber);
 80035a2:	f000 fb59 	bl	8003c58 <printf>
  writeRegisterI2C(i2cPort, AS5048_7BIT_ADDRESS, AS5048B_ANGLLSB_REG);
 80035a6:	4628      	mov	r0, r5
 80035a8:	2140      	movs	r1, #64	; 0x40
 80035aa:	22ff      	movs	r2, #255	; 0xff
 80035ac:	f7fd f93a 	bl	8000824 <writeRegisterI2C>
  uint8_t valueRead[2];
  readBytesI2C(i2cPort, AS5048_7BIT_ADDRESS, 2, valueRead);
 80035b0:	ab01      	add	r3, sp, #4
 80035b2:	4628      	mov	r0, r5
 80035b4:	2140      	movs	r1, #64	; 0x40
 80035b6:	2202      	movs	r2, #2
 80035b8:	f7fd f960 	bl	800087c <readBytesI2C>
  g_state.encoders[encoderNumber] = (((uint16_t) valueRead[0] << 6) + ((uint16_t) (valueRead[1] & 0x3F))); 
 80035bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80035c0:	f89d 5004 	ldrb.w	r5, [sp, #4]
 80035c4:	4a0a      	ldr	r2, [pc, #40]	; (80035f0 <readEncoderI2C+0x58>)
  printf("%d\n" , g_state.encoders[encoderNumber]);
 80035c6:	480b      	ldr	r0, [pc, #44]	; (80035f4 <readEncoderI2C+0x5c>)
{
  printf("Encoder %d: ", encoderNumber);
  writeRegisterI2C(i2cPort, AS5048_7BIT_ADDRESS, AS5048B_ANGLLSB_REG);
  uint8_t valueRead[2];
  readBytesI2C(i2cPort, AS5048_7BIT_ADDRESS, 2, valueRead);
  g_state.encoders[encoderNumber] = (((uint16_t) valueRead[0] << 6) + ((uint16_t) (valueRead[1] & 0x3F))); 
 80035c8:	f104 0150 	add.w	r1, r4, #80	; 0x50
 80035cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035d0:	eb03 1385 	add.w	r3, r3, r5, lsl #6
 80035d4:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]
 80035d8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
  printf("%d\n" , g_state.encoders[encoderNumber]);
 80035dc:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80035e0:	b289      	uxth	r1, r1
 80035e2:	f000 fb39 	bl	8003c58 <printf>


  return 0;
}
 80035e6:	2000      	movs	r0, #0
 80035e8:	b003      	add	sp, #12
 80035ea:	bd30      	pop	{r4, r5, pc}
 80035ec:	0800ab9c 	.word	0x0800ab9c
 80035f0:	20010580 	.word	0x20010580
 80035f4:	0800abac 	.word	0x0800abac

080035f8 <readEncoderSPI>:

int readEncoderSPI(SPI_TypeDef* spiPort, uint8_t encoderNumber, int timeout)
{
 80035f8:	b530      	push	{r4, r5, lr}
 80035fa:	4605      	mov	r5, r0
 80035fc:	b083      	sub	sp, #12
  printf("Encoder %d: ", encoderNumber);
 80035fe:	4813      	ldr	r0, [pc, #76]	; (800364c <readEncoderSPI+0x54>)

  return 0;
}

int readEncoderSPI(SPI_TypeDef* spiPort, uint8_t encoderNumber, int timeout)
{
 8003600:	460c      	mov	r4, r1
  printf("Encoder %d: ", encoderNumber);
 8003602:	f000 fb29 	bl	8003c58 <printf>
  writeRegisterSPI(spiPort, AS5048_7BIT_ADDRESS_SPI, AS5048B_ANGLLSB_REG);
 8003606:	4628      	mov	r0, r5
 8003608:	2140      	movs	r1, #64	; 0x40
 800360a:	22ff      	movs	r2, #255	; 0xff
 800360c:	f7fd f9e2 	bl	80009d4 <writeRegisterSPI>
  uint8_t valueRead[2];
  readBytesSPI(spiPort, AS5048_7BIT_ADDRESS_SPI, 2, valueRead);
 8003610:	ab01      	add	r3, sp, #4
 8003612:	4628      	mov	r0, r5
 8003614:	2140      	movs	r1, #64	; 0x40
 8003616:	2202      	movs	r2, #2
 8003618:	f7fd fad8 	bl	8000bcc <readBytesSPI>
  g_state.encoders[encoderNumber] = (((uint16_t) valueRead[0] << 6) + ((uint16_t) (valueRead[1] & 0x3F)));
 800361c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003620:	f89d 5004 	ldrb.w	r5, [sp, #4]
 8003624:	4a0a      	ldr	r2, [pc, #40]	; (8003650 <readEncoderSPI+0x58>)
  printf("%d\n", g_state.encoders[encoderNumber]);
 8003626:	480b      	ldr	r0, [pc, #44]	; (8003654 <readEncoderSPI+0x5c>)
{
  printf("Encoder %d: ", encoderNumber);
  writeRegisterSPI(spiPort, AS5048_7BIT_ADDRESS_SPI, AS5048B_ANGLLSB_REG);
  uint8_t valueRead[2];
  readBytesSPI(spiPort, AS5048_7BIT_ADDRESS_SPI, 2, valueRead);
  g_state.encoders[encoderNumber] = (((uint16_t) valueRead[0] << 6) + ((uint16_t) (valueRead[1] & 0x3F)));
 8003628:	f104 0150 	add.w	r1, r4, #80	; 0x50
 800362c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003630:	eb03 1385 	add.w	r3, r3, r5, lsl #6
 8003634:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]
 8003638:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
  printf("%d\n", g_state.encoders[encoderNumber]);
 800363c:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8003640:	b289      	uxth	r1, r1
 8003642:	f000 fb09 	bl	8003c58 <printf>

  return 0;
 8003646:	2000      	movs	r0, #0
 8003648:	b003      	add	sp, #12
 800364a:	bd30      	pop	{r4, r5, pc}
 800364c:	0800ab9c 	.word	0x0800ab9c
 8003650:	20010580 	.word	0x20010580
 8003654:	0800abac 	.word	0x0800abac

08003658 <enc_poll_nonblocking_tick>:
    0 -> Port I2C1
    1 -> Port SPI
    2 -> Port I2C3
*/
void enc_poll_nonblocking_tick(const uint8_t bogus __attribute__((unused)))
{
 8003658:	b570      	push	{r4, r5, r6, lr}
  static uint8_t i2cPort1Updated = 0;
  static uint8_t i2cPort3Updated = 0;
  int result;

  switch(enc_poll_state)
 800365a:	4c4b      	ldr	r4, [pc, #300]	; (8003788 <enc_poll_nonblocking_tick+0x130>)
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d034      	beq.n	80036cc <enc_poll_nonblocking_tick+0x74>
 8003662:	3301      	adds	r3, #1
 8003664:	d003      	beq.n	800366e <enc_poll_nonblocking_tick+0x16>
          if (i2cPort1Updated == 1)
            enc_poll_state = EPS_DONE;
        }
      break;
    default:
      enc_poll_state = EPS_DONE; // shouldn't get here
 8003666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800366a:	6023      	str	r3, [r4, #0]
 800366c:	bd70      	pop	{r4, r5, r6, pc}
  int result;

  switch(enc_poll_state)
  {
    case EPS_DONE:
        result = readEncoderSPI(SPI1, 1, SPI_TIMEOUT); // (spiPort, encoderNumber, timeout)
 800366e:	4847      	ldr	r0, [pc, #284]	; (800378c <enc_poll_nonblocking_tick+0x134>)
 8003670:	2101      	movs	r1, #1
 8003672:	2264      	movs	r2, #100	; 0x64
 8003674:	f7ff ffc0 	bl	80035f8 <readEncoderSPI>
        
        if (isBusyI2CPort(I2C3) && isBusyI2CPort(I2C1))
 8003678:	4845      	ldr	r0, [pc, #276]	; (8003790 <enc_poll_nonblocking_tick+0x138>)
 800367a:	f7fd f947 	bl	800090c <isBusyI2CPort>
 800367e:	b120      	cbz	r0, 800368a <enc_poll_nonblocking_tick+0x32>
 8003680:	4844      	ldr	r0, [pc, #272]	; (8003794 <enc_poll_nonblocking_tick+0x13c>)
 8003682:	f7fd f943 	bl	800090c <isBusyI2CPort>
 8003686:	2800      	cmp	r0, #0
 8003688:	d169      	bne.n	800375e <enc_poll_nonblocking_tick+0x106>
          printf("neither 0 nor 2\n");
          enc_poll_state = EPS_I2C;
          i2cPort1Updated = 0;
          i2cPort3Updated = 0;
        }
        else if (!isBusyI2CPort(I2C3) && !isBusyI2CPort(I2C1))
 800368a:	4841      	ldr	r0, [pc, #260]	; (8003790 <enc_poll_nonblocking_tick+0x138>)
 800368c:	f7fd f93e 	bl	800090c <isBusyI2CPort>
 8003690:	b928      	cbnz	r0, 800369e <enc_poll_nonblocking_tick+0x46>
 8003692:	4840      	ldr	r0, [pc, #256]	; (8003794 <enc_poll_nonblocking_tick+0x13c>)
 8003694:	f7fd f93a 	bl	800090c <isBusyI2CPort>
 8003698:	4605      	mov	r5, r0
 800369a:	2800      	cmp	r0, #0
 800369c:	d069      	beq.n	8003772 <enc_poll_nonblocking_tick+0x11a>
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          printf("Second\n");
          result = readEncoderI2C(I2C3, 2, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          enc_poll_state = EPS_DONE;
        } 
        else if (!isBusyI2CPort(I2C1))
 800369e:	483d      	ldr	r0, [pc, #244]	; (8003794 <enc_poll_nonblocking_tick+0x13c>)
 80036a0:	f7fd f934 	bl	800090c <isBusyI2CPort>
 80036a4:	4605      	mov	r5, r0
 80036a6:	2800      	cmp	r0, #0
 80036a8:	d043      	beq.n	8003732 <enc_poll_nonblocking_tick+0xda>
        {
          printf("0\n");
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          enc_poll_state = EPS_DONE;
        }
        else if (!isBusyI2CPort(I2C3))
 80036aa:	4839      	ldr	r0, [pc, #228]	; (8003790 <enc_poll_nonblocking_tick+0x138>)
 80036ac:	f7fd f92e 	bl	800090c <isBusyI2CPort>
 80036b0:	2800      	cmp	r0, #0
 80036b2:	d1db      	bne.n	800366c <enc_poll_nonblocking_tick+0x14>
        {
          printf("2\n");
 80036b4:	4838      	ldr	r0, [pc, #224]	; (8003798 <enc_poll_nonblocking_tick+0x140>)
 80036b6:	f000 fb23 	bl	8003d00 <puts>
          result = readEncoderI2C(I2C3, 2, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
 80036ba:	4835      	ldr	r0, [pc, #212]	; (8003790 <enc_poll_nonblocking_tick+0x138>)
 80036bc:	2102      	movs	r1, #2
 80036be:	2264      	movs	r2, #100	; 0x64
 80036c0:	f7ff ff6a 	bl	8003598 <readEncoderI2C>
          enc_poll_state = EPS_DONE;
 80036c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036c8:	6023      	str	r3, [r4, #0]
 80036ca:	bd70      	pop	{r4, r5, r6, pc}
        }      
      break;
    case EPS_I2C:
        if (!isBusyI2CPort(I2C3) && !isBusyI2CPort(I2C1))
 80036cc:	4830      	ldr	r0, [pc, #192]	; (8003790 <enc_poll_nonblocking_tick+0x138>)
 80036ce:	f7fd f91d 	bl	800090c <isBusyI2CPort>
 80036d2:	b1f8      	cbz	r0, 8003714 <enc_poll_nonblocking_tick+0xbc>
          printf("0 and 2, EPS_I2C\n");
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          result = readEncoderI2C(I2C3, 2, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          enc_poll_state = EPS_DONE;
        } 
        else if (!isBusyI2CPort(I2C1) && i2cPort1Updated == 0)
 80036d4:	482f      	ldr	r0, [pc, #188]	; (8003794 <enc_poll_nonblocking_tick+0x13c>)
 80036d6:	f7fd f919 	bl	800090c <isBusyI2CPort>
 80036da:	b918      	cbnz	r0, 80036e4 <enc_poll_nonblocking_tick+0x8c>
 80036dc:	4d2f      	ldr	r5, [pc, #188]	; (800379c <enc_poll_nonblocking_tick+0x144>)
 80036de:	782e      	ldrb	r6, [r5, #0]
 80036e0:	2e00      	cmp	r6, #0
 80036e2:	d032      	beq.n	800374a <enc_poll_nonblocking_tick+0xf2>
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          i2cPort1Updated = 1;
          if (i2cPort3Updated == 1)
            enc_poll_state = EPS_DONE;
        }
        else if (!isBusyI2CPort(I2C3) && i2cPort3Updated == 0)
 80036e4:	482a      	ldr	r0, [pc, #168]	; (8003790 <enc_poll_nonblocking_tick+0x138>)
 80036e6:	f7fd f911 	bl	800090c <isBusyI2CPort>
 80036ea:	2800      	cmp	r0, #0
 80036ec:	d1be      	bne.n	800366c <enc_poll_nonblocking_tick+0x14>
 80036ee:	4d2c      	ldr	r5, [pc, #176]	; (80037a0 <enc_poll_nonblocking_tick+0x148>)
 80036f0:	782b      	ldrb	r3, [r5, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1ba      	bne.n	800366c <enc_poll_nonblocking_tick+0x14>
        {
          printf("2\n");
 80036f6:	4828      	ldr	r0, [pc, #160]	; (8003798 <enc_poll_nonblocking_tick+0x140>)
 80036f8:	f000 fb02 	bl	8003d00 <puts>
          result = readEncoderI2C(I2C3, 2, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
 80036fc:	4824      	ldr	r0, [pc, #144]	; (8003790 <enc_poll_nonblocking_tick+0x138>)
 80036fe:	2102      	movs	r1, #2
 8003700:	2264      	movs	r2, #100	; 0x64
 8003702:	f7ff ff49 	bl	8003598 <readEncoderI2C>
          i2cPort3Updated = 1;
          if (i2cPort1Updated == 1)
 8003706:	4b25      	ldr	r3, [pc, #148]	; (800379c <enc_poll_nonblocking_tick+0x144>)
        else if (!isBusyI2CPort(I2C1) && i2cPort1Updated == 0)
        {
          printf("0\n");
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          i2cPort1Updated = 1;
          if (i2cPort3Updated == 1)
 8003708:	781b      	ldrb	r3, [r3, #0]
        } 
        else if (!isBusyI2CPort(I2C1) && i2cPort1Updated == 0)
        {
          printf("0\n");
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          i2cPort1Updated = 1;
 800370a:	2201      	movs	r2, #1
          if (i2cPort3Updated == 1)
 800370c:	4293      	cmp	r3, r2
        } 
        else if (!isBusyI2CPort(I2C1) && i2cPort1Updated == 0)
        {
          printf("0\n");
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          i2cPort1Updated = 1;
 800370e:	702a      	strb	r2, [r5, #0]
          if (i2cPort3Updated == 1)
 8003710:	d1ac      	bne.n	800366c <enc_poll_nonblocking_tick+0x14>
 8003712:	e7a8      	b.n	8003666 <enc_poll_nonblocking_tick+0xe>
          result = readEncoderI2C(I2C3, 2, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          enc_poll_state = EPS_DONE;
        }      
      break;
    case EPS_I2C:
        if (!isBusyI2CPort(I2C3) && !isBusyI2CPort(I2C1))
 8003714:	481f      	ldr	r0, [pc, #124]	; (8003794 <enc_poll_nonblocking_tick+0x13c>)
 8003716:	f7fd f8f9 	bl	800090c <isBusyI2CPort>
 800371a:	4605      	mov	r5, r0
 800371c:	2800      	cmp	r0, #0
 800371e:	d1d9      	bne.n	80036d4 <enc_poll_nonblocking_tick+0x7c>
        {
          printf("0 and 2, EPS_I2C\n");
 8003720:	4820      	ldr	r0, [pc, #128]	; (80037a4 <enc_poll_nonblocking_tick+0x14c>)
 8003722:	f000 faed 	bl	8003d00 <puts>
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
 8003726:	4629      	mov	r1, r5
 8003728:	2264      	movs	r2, #100	; 0x64
 800372a:	481a      	ldr	r0, [pc, #104]	; (8003794 <enc_poll_nonblocking_tick+0x13c>)
 800372c:	f7ff ff34 	bl	8003598 <readEncoderI2C>
 8003730:	e7c3      	b.n	80036ba <enc_poll_nonblocking_tick+0x62>
          result = readEncoderI2C(I2C3, 2, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          enc_poll_state = EPS_DONE;
        } 
        else if (!isBusyI2CPort(I2C1))
        {
          printf("0\n");
 8003732:	481d      	ldr	r0, [pc, #116]	; (80037a8 <enc_poll_nonblocking_tick+0x150>)
 8003734:	f000 fae4 	bl	8003d00 <puts>
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
 8003738:	4629      	mov	r1, r5
 800373a:	4816      	ldr	r0, [pc, #88]	; (8003794 <enc_poll_nonblocking_tick+0x13c>)
 800373c:	2264      	movs	r2, #100	; 0x64
 800373e:	f7ff ff2b 	bl	8003598 <readEncoderI2C>
          enc_poll_state = EPS_DONE;
 8003742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003746:	6023      	str	r3, [r4, #0]
 8003748:	bd70      	pop	{r4, r5, r6, pc}
          result = readEncoderI2C(I2C3, 2, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          enc_poll_state = EPS_DONE;
        } 
        else if (!isBusyI2CPort(I2C1) && i2cPort1Updated == 0)
        {
          printf("0\n");
 800374a:	4817      	ldr	r0, [pc, #92]	; (80037a8 <enc_poll_nonblocking_tick+0x150>)
 800374c:	f000 fad8 	bl	8003d00 <puts>
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
 8003750:	4631      	mov	r1, r6
 8003752:	4810      	ldr	r0, [pc, #64]	; (8003794 <enc_poll_nonblocking_tick+0x13c>)
 8003754:	2264      	movs	r2, #100	; 0x64
 8003756:	f7ff ff1f 	bl	8003598 <readEncoderI2C>
          i2cPort1Updated = 1;
          if (i2cPort3Updated == 1)
 800375a:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <enc_poll_nonblocking_tick+0x148>)
 800375c:	e7d4      	b.n	8003708 <enc_poll_nonblocking_tick+0xb0>
    case EPS_DONE:
        result = readEncoderSPI(SPI1, 1, SPI_TIMEOUT); // (spiPort, encoderNumber, timeout)
        
        if (isBusyI2CPort(I2C3) && isBusyI2CPort(I2C1))
        {
          printf("neither 0 nor 2\n");
 800375e:	4813      	ldr	r0, [pc, #76]	; (80037ac <enc_poll_nonblocking_tick+0x154>)
 8003760:	f000 face 	bl	8003d00 <puts>
          enc_poll_state = EPS_I2C;
          i2cPort1Updated = 0;
 8003764:	490d      	ldr	r1, [pc, #52]	; (800379c <enc_poll_nonblocking_tick+0x144>)
          i2cPort3Updated = 0;
 8003766:	4a0e      	ldr	r2, [pc, #56]	; (80037a0 <enc_poll_nonblocking_tick+0x148>)
        result = readEncoderSPI(SPI1, 1, SPI_TIMEOUT); // (spiPort, encoderNumber, timeout)
        
        if (isBusyI2CPort(I2C3) && isBusyI2CPort(I2C1))
        {
          printf("neither 0 nor 2\n");
          enc_poll_state = EPS_I2C;
 8003768:	2300      	movs	r3, #0
          i2cPort1Updated = 0;
 800376a:	700b      	strb	r3, [r1, #0]
          i2cPort3Updated = 0;
 800376c:	7013      	strb	r3, [r2, #0]
        result = readEncoderSPI(SPI1, 1, SPI_TIMEOUT); // (spiPort, encoderNumber, timeout)
        
        if (isBusyI2CPort(I2C3) && isBusyI2CPort(I2C1))
        {
          printf("neither 0 nor 2\n");
          enc_poll_state = EPS_I2C;
 800376e:	6023      	str	r3, [r4, #0]
          i2cPort1Updated = 0;
          i2cPort3Updated = 0;
 8003770:	bd70      	pop	{r4, r5, r6, pc}
        }
        else if (!isBusyI2CPort(I2C3) && !isBusyI2CPort(I2C1))
        {
          printf("0 and 2, EPS_DONE\n");
 8003772:	480f      	ldr	r0, [pc, #60]	; (80037b0 <enc_poll_nonblocking_tick+0x158>)
 8003774:	f000 fac4 	bl	8003d00 <puts>
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
 8003778:	4629      	mov	r1, r5
 800377a:	4806      	ldr	r0, [pc, #24]	; (8003794 <enc_poll_nonblocking_tick+0x13c>)
 800377c:	2264      	movs	r2, #100	; 0x64
 800377e:	f7ff ff0b 	bl	8003598 <readEncoderI2C>
          printf("Second\n");
 8003782:	480c      	ldr	r0, [pc, #48]	; (80037b4 <enc_poll_nonblocking_tick+0x15c>)
 8003784:	e797      	b.n	80036b6 <enc_poll_nonblocking_tick+0x5e>
 8003786:	bf00      	nop
 8003788:	2000007c 	.word	0x2000007c
 800378c:	40013000 	.word	0x40013000
 8003790:	40005c00 	.word	0x40005c00
 8003794:	40005400 	.word	0x40005400
 8003798:	0800abe0 	.word	0x0800abe0
 800379c:	20010451 	.word	0x20010451
 80037a0:	20010450 	.word	0x20010450
 80037a4:	0800abe4 	.word	0x0800abe4
 80037a8:	0800abdc 	.word	0x0800abdc
 80037ac:	0800abb0 	.word	0x0800abb0
 80037b0:	0800abc0 	.word	0x0800abc0
 80037b4:	0800abd4 	.word	0x0800abd4

080037b8 <state_init>:

volatile state_t g_state;

void state_init()
{
  g_state.header[0] = 0x01; // version number of this state format
 80037b8:	4915      	ldr	r1, [pc, #84]	; (8003810 <state_init+0x58>)
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
 80037ba:	2200      	movs	r2, #0

volatile state_t g_state;

void state_init()
{
  g_state.header[0] = 0x01; // version number of this state format
 80037bc:	2301      	movs	r3, #1
#include "state.h"

volatile state_t g_state;

void state_init()
{
 80037be:	b430      	push	{r4, r5}
  g_state.header[0] = 0x01; // version number of this state format
 80037c0:	700b      	strb	r3, [r1, #0]
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
 80037c2:	704a      	strb	r2, [r1, #1]
  g_state.header[2] = 0x00; // ditto
 80037c4:	708a      	strb	r2, [r1, #2]
  g_state.header[3] = 0x00; // ditto
 80037c6:	70ca      	strb	r2, [r1, #3]
  g_state.systime = 0;
 80037c8:	6848      	ldr	r0, [r1, #4]
 80037ca:	604a      	str	r2, [r1, #4]
  for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 80037cc:	4613      	mov	r3, r2
    g_state.takktile_pressures[i] = g_state.takktile_temperatures[i] = 0;
 80037ce:	4614      	mov	r4, r2
 80037d0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80037d4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80037d8:	1d18      	adds	r0, r3, #4
  g_state.header[0] = 0x01; // version number of this state format
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
  g_state.header[2] = 0x00; // ditto
  g_state.header[3] = 0x00; // ditto
  g_state.systime = 0;
  for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 80037da:	3301      	adds	r3, #1
    g_state.takktile_pressures[i] = g_state.takktile_temperatures[i] = 0;
 80037dc:	8895      	ldrh	r5, [r2, #4]
 80037de:	8094      	strh	r4, [r2, #4]
  g_state.header[0] = 0x01; // version number of this state format
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
  g_state.header[2] = 0x00; // ditto
  g_state.header[3] = 0x00; // ditto
  g_state.systime = 0;
  for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 80037e0:	2b26      	cmp	r3, #38	; 0x26
    g_state.takktile_pressures[i] = g_state.takktile_temperatures[i] = 0;
 80037e2:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
 80037e6:	f821 4010 	strh.w	r4, [r1, r0, lsl #1]
 80037ea:	4a09      	ldr	r2, [pc, #36]	; (8003810 <state_init+0x58>)
 80037ec:	f04f 0000 	mov.w	r0, #0
  g_state.header[0] = 0x01; // version number of this state format
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
  g_state.header[2] = 0x00; // ditto
  g_state.header[3] = 0x00; // ditto
  g_state.systime = 0;
  for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 80037f0:	d1ee      	bne.n	80037d0 <state_init+0x18>
    g_state.takktile_pressures[i] = g_state.takktile_temperatures[i] = 0;
  for (uint_fast8_t i = 0; i < NUM_ENC; i++)
    g_state.encoders[i] = 0;
 80037f2:	f8b2 30a0 	ldrh.w	r3, [r2, #160]	; 0xa0
 80037f6:	f8a2 00a0 	strh.w	r0, [r2, #160]	; 0xa0
 80037fa:	f8b2 30a2 	ldrh.w	r3, [r2, #162]	; 0xa2
 80037fe:	f8a2 00a2 	strh.w	r0, [r2, #162]	; 0xa2
 8003802:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8003806:	f8a2 00a4 	strh.w	r0, [r2, #164]	; 0xa4
}
 800380a:	bc30      	pop	{r4, r5}
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20010580 	.word	0x20010580

08003814 <asyncInit>:
  // { dmxl_poll_nonblocking_tick   , 3, (int *)(&dmxl_poll_states[3])    },
  { enc_poll_nonblocking_tick    , 0, (int *)(&enc_poll_state)         }
};

void asyncInit()
{
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	4c09      	ldr	r4, [pc, #36]	; (800383c <asyncInit+0x28>)
  for (uint_fast8_t i = 0; i < 5; i++)
  {
    *stateMachines[i].poll_state = ASYNC_POLL_DONE;
 8003818:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800381c:	f104 053c 	add.w	r5, r4, #60	; 0x3c
 8003820:	68a3      	ldr	r3, [r4, #8]
 8003822:	601e      	str	r6, [r3, #0]
    stateMachines[i].fptr(stateMachines[i].arg);
 8003824:	7920      	ldrb	r0, [r4, #4]
 8003826:	f854 3b0c 	ldr.w	r3, [r4], #12
 800382a:	4798      	blx	r3
  { enc_poll_nonblocking_tick    , 0, (int *)(&enc_poll_state)         }
};

void asyncInit()
{
  for (uint_fast8_t i = 0; i < 5; i++)
 800382c:	42ac      	cmp	r4, r5
 800382e:	d1f7      	bne.n	8003820 <asyncInit+0xc>
  {
    *stateMachines[i].poll_state = ASYNC_POLL_DONE;
    stateMachines[i].fptr(stateMachines[i].arg);
  }
  asyncStartTime = SYSTIME;
 8003830:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003834:	4b02      	ldr	r3, [pc, #8]	; (8003840 <asyncInit+0x2c>)
 8003836:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	bd70      	pop	{r4, r5, r6, pc}
 800383c:	0800abf8 	.word	0x0800abf8
 8003840:	20010454 	.word	0x20010454

08003844 <asyncUpdate>:
}

uint8_t asyncUpdate()
{
 8003844:	b570      	push	{r4, r5, r6, lr}
 8003846:	4c0a      	ldr	r4, [pc, #40]	; (8003870 <asyncUpdate+0x2c>)
  uint8_t allDone = 1;
 8003848:	2601      	movs	r6, #1
 800384a:	f104 053c 	add.w	r5, r4, #60	; 0x3c
  // if (SYSTIME - asyncStartTime > MAX_CYCLE_PERIOD)
  //   asyncInit();

  for (uint_fast8_t i = 0; i < 5; i++)
  {
    if (!(*(stateMachines[i].poll_state) == (int)ASYNC_POLL_DONE))
 800384e:	68a3      	ldr	r3, [r4, #8]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3301      	adds	r3, #1
 8003854:	d003      	beq.n	800385e <asyncUpdate+0x1a>
    {
      allDone = 0;
      stateMachines[i].fptr(stateMachines[i].arg);
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	7920      	ldrb	r0, [r4, #4]
 800385a:	4798      	blx	r3

  for (uint_fast8_t i = 0; i < 5; i++)
  {
    if (!(*(stateMachines[i].poll_state) == (int)ASYNC_POLL_DONE))
    {
      allDone = 0;
 800385c:	2600      	movs	r6, #0
 800385e:	340c      	adds	r4, #12

  // if stateMachines did not finish before MAX_CYCLE_PERIOD, restart
  // if (SYSTIME - asyncStartTime > MAX_CYCLE_PERIOD)
  //   asyncInit();

  for (uint_fast8_t i = 0; i < 5; i++)
 8003860:	42ac      	cmp	r4, r5
 8003862:	d1f4      	bne.n	800384e <asyncUpdate+0xa>
    {
      allDone = 0;
      stateMachines[i].fptr(stateMachines[i].arg);
    }
  }
  if (allDone)                // if all stateMachines finished
 8003864:	b10e      	cbz	r6, 800386a <asyncUpdate+0x26>
    asyncInit();              // restart
 8003866:	f7ff ffd5 	bl	8003814 <asyncInit>

  return allDone;
}
 800386a:	4630      	mov	r0, r6
 800386c:	bd70      	pop	{r4, r5, r6, pc}
 800386e:	bf00      	nop
 8003870:	0800abf8 	.word	0x0800abf8

08003874 <delay_ns>:
#include <stdint.h>

// TODO: tune this better on an oscilloscope

void delay_ns(uint32_t ns)
{
 8003874:	b082      	sub	sp, #8
  for (volatile uint32_t i = 0; i < ns/10; i++) { }
 8003876:	4b08      	ldr	r3, [pc, #32]	; (8003898 <delay_ns+0x24>)
 8003878:	2200      	movs	r2, #0
 800387a:	9201      	str	r2, [sp, #4]
 800387c:	fba3 3000 	umull	r3, r0, r3, r0
 8003880:	9b01      	ldr	r3, [sp, #4]
 8003882:	08c0      	lsrs	r0, r0, #3
 8003884:	4298      	cmp	r0, r3
 8003886:	d905      	bls.n	8003894 <delay_ns+0x20>
 8003888:	9b01      	ldr	r3, [sp, #4]
 800388a:	3301      	adds	r3, #1
 800388c:	9301      	str	r3, [sp, #4]
 800388e:	9b01      	ldr	r3, [sp, #4]
 8003890:	4283      	cmp	r3, r0
 8003892:	d3f9      	bcc.n	8003888 <delay_ns+0x14>
}
 8003894:	b002      	add	sp, #8
 8003896:	4770      	bx	lr
 8003898:	cccccccd 	.word	0xcccccccd

0800389c <delay_us>:

void delay_us(uint32_t us)
{
 800389c:	b082      	sub	sp, #8
  for (volatile int i = 0; i < us*10; i++) { }
 800389e:	2300      	movs	r3, #0
 80038a0:	9301      	str	r3, [sp, #4]
 80038a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80038a6:	9b01      	ldr	r3, [sp, #4]
 80038a8:	0040      	lsls	r0, r0, #1
 80038aa:	4283      	cmp	r3, r0
 80038ac:	d205      	bcs.n	80038ba <delay_us+0x1e>
 80038ae:	9b01      	ldr	r3, [sp, #4]
 80038b0:	3301      	adds	r3, #1
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	9b01      	ldr	r3, [sp, #4]
 80038b6:	4283      	cmp	r3, r0
 80038b8:	d3f9      	bcc.n	80038ae <delay_us+0x12>
}
 80038ba:	b002      	add	sp, #8
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop

080038c0 <delay_ms>:

void delay_ms(uint32_t ms)
{
 80038c0:	b082      	sub	sp, #8
  for (volatile int i = 0; i < ms; i++)
 80038c2:	2100      	movs	r1, #0
 80038c4:	9100      	str	r1, [sp, #0]
 80038c6:	9b00      	ldr	r3, [sp, #0]
 80038c8:	4298      	cmp	r0, r3
 80038ca:	d911      	bls.n	80038f0 <delay_ms+0x30>
  for (volatile uint32_t i = 0; i < ns/10; i++) { }
}

void delay_us(uint32_t us)
{
  for (volatile int i = 0; i < us*10; i++) { }
 80038cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80038d0:	9101      	str	r1, [sp, #4]
 80038d2:	9b01      	ldr	r3, [sp, #4]
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d805      	bhi.n	80038e4 <delay_ms+0x24>
 80038d8:	9b01      	ldr	r3, [sp, #4]
 80038da:	3301      	adds	r3, #1
 80038dc:	9301      	str	r3, [sp, #4]
 80038de:	9b01      	ldr	r3, [sp, #4]
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d9f9      	bls.n	80038d8 <delay_ms+0x18>
}

void delay_ms(uint32_t ms)
{
  for (volatile int i = 0; i < ms; i++)
 80038e4:	9b00      	ldr	r3, [sp, #0]
 80038e6:	3301      	adds	r3, #1
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	9b00      	ldr	r3, [sp, #0]
 80038ec:	4283      	cmp	r3, r0
 80038ee:	d3ef      	bcc.n	80038d0 <delay_ms+0x10>
    delay_us(1000);
}
 80038f0:	b002      	add	sp, #8
 80038f2:	4770      	bx	lr

080038f4 <setLEDs>:
static uint8_t errDetected[ERR_NUMBER] = {0};


// Displays the appropriate LED pattern for a given error at a point in its
// sequence
void setLEDs(uint8_t errorIndex, uint8_t flashIndex) {
 80038f4:	b538      	push	{r3, r4, r5, lr}
  uint8_t pattern = errSequence[errorIndex][flashIndex];
 80038f6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80038fa:	4b09      	ldr	r3, [pc, #36]	; (8003920 <setLEDs+0x2c>)
 80038fc:	5c5d      	ldrb	r5, [r3, r1]
  for (int i = 0; i < NUM_LEDs; i++) {
 80038fe:	2400      	movs	r4, #0
    if (pattern & (1 << i)) {
 8003900:	fa45 f304 	asr.w	r3, r5, r4
 8003904:	f013 0f01 	tst.w	r3, #1
      leds_on(i);
 8003908:	b2e0      	uxtb	r0, r4
// Displays the appropriate LED pattern for a given error at a point in its
// sequence
void setLEDs(uint8_t errorIndex, uint8_t flashIndex) {
  uint8_t pattern = errSequence[errorIndex][flashIndex];
  for (int i = 0; i < NUM_LEDs; i++) {
    if (pattern & (1 << i)) {
 800390a:	d005      	beq.n	8003918 <setLEDs+0x24>
      leds_on(i);
 800390c:	f7fd fa5c 	bl	8000dc8 <leds_on>

// Displays the appropriate LED pattern for a given error at a point in its
// sequence
void setLEDs(uint8_t errorIndex, uint8_t flashIndex) {
  uint8_t pattern = errSequence[errorIndex][flashIndex];
  for (int i = 0; i < NUM_LEDs; i++) {
 8003910:	3401      	adds	r4, #1
 8003912:	2c04      	cmp	r4, #4
 8003914:	d1f4      	bne.n	8003900 <setLEDs+0xc>
      leds_on(i);
    } else {
      leds_off(i);
    }
  }
}
 8003916:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t pattern = errSequence[errorIndex][flashIndex];
  for (int i = 0; i < NUM_LEDs; i++) {
    if (pattern & (1 << i)) {
      leds_on(i);
    } else {
      leds_off(i);
 8003918:	b2e0      	uxtb	r0, r4
 800391a:	f7fd fa79 	bl	8000e10 <leds_off>
 800391e:	e7f7      	b.n	8003910 <setLEDs+0x1c>
 8003920:	0800ac64 	.word	0x0800ac64

08003924 <errorService>:
  // The time (in uS) when the current flash started.
  static uint32_t flashStartTime = 0;


  // We should continue with our current display
  if (displaying)
 8003924:	4a27      	ldr	r2, [pc, #156]	; (80039c4 <errorService+0xa0>)
 8003926:	7811      	ldrb	r1, [r2, #0]
}

// This displays the error codes one by one. Each dispay is made up of four
// "flashes" of LED patterns over the first second of the display with no LEDs
// in the second second of the display
void errorService() {
 8003928:	b430      	push	{r4, r5}
  // The time (in uS) when the current flash started.
  static uint32_t flashStartTime = 0;


  // We should continue with our current display
  if (displaying)
 800392a:	b329      	cbz	r1, 8003978 <errorService+0x54>
  {
    if (SYSTIME - flashStartTime < FLASH_INTERVAL_US)
 800392c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003930:	4825      	ldr	r0, [pc, #148]	; (80039c8 <errorService+0xa4>)
 8003932:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003934:	6805      	ldr	r5, [r0, #0]
 8003936:	4c25      	ldr	r4, [pc, #148]	; (80039cc <errorService+0xa8>)
 8003938:	1b5b      	subs	r3, r3, r5
 800393a:	42a3      	cmp	r3, r4
 800393c:	d91a      	bls.n	8003974 <errorService+0x50>
    {
      return;
    }

    flashStartTime = SYSTIME;
    flashIndex++;
 800393e:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <errorService+0xac>)
    if (SYSTIME - flashStartTime < FLASH_INTERVAL_US)
    {
      return;
    }

    flashStartTime = SYSTIME;
 8003940:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    flashIndex++;
 8003942:	7819      	ldrb	r1, [r3, #0]
    if (SYSTIME - flashStartTime < FLASH_INTERVAL_US)
    {
      return;
    }

    flashStartTime = SYSTIME;
 8003944:	6004      	str	r4, [r0, #0]
    flashIndex++;
 8003946:	3101      	adds	r1, #1
 8003948:	b2c9      	uxtb	r1, r1
    if (flashIndex < NUM_FLASHES)
 800394a:	2907      	cmp	r1, #7
    {
      return;
    }

    flashStartTime = SYSTIME;
    flashIndex++;
 800394c:	7019      	strb	r1, [r3, #0]
    if (flashIndex < NUM_FLASHES)
 800394e:	d933      	bls.n	80039b8 <errorService+0x94>
      setLEDs(errorIndex, flashIndex);
      return;
    }

    // If all are stuck we don't need to then display each individual stuck encoder
    if (errorIndex == ERR_ENC_ALL_STUCK)
 8003950:	4820      	ldr	r0, [pc, #128]	; (80039d4 <errorService+0xb0>)
 8003952:	7803      	ldrb	r3, [r0, #0]
 8003954:	2b04      	cmp	r3, #4
 8003956:	d02d      	beq.n	80039b4 <errorService+0x90>
    {
      errorIndex += 4;
    }
    else
    {
      errorIndex++;
 8003958:	3301      	adds	r3, #1
 800395a:	491f      	ldr	r1, [pc, #124]	; (80039d8 <errorService+0xb4>)
 800395c:	b2db      	uxtb	r3, r3
 800395e:	fba1 4103 	umull	r4, r1, r1, r3
 8003962:	08c9      	lsrs	r1, r1, #3
 8003964:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003968:	eba3 0381 	sub.w	r3, r3, r1, lsl #2
 800396c:	b2db      	uxtb	r3, r3
    }
    errorIndex %= ERR_NUMBER;
    displaying = false;
 800396e:	2100      	movs	r1, #0
    }
    else
    {
      errorIndex++;
    }
    errorIndex %= ERR_NUMBER;
 8003970:	7003      	strb	r3, [r0, #0]
    displaying = false;
 8003972:	7011      	strb	r1, [r2, #0]

  // Otherwise keep cycling and looking for an error
  errorIndex++;
  errorIndex %= ERR_NUMBER;
  return;
}
 8003974:	bc30      	pop	{r4, r5}
 8003976:	4770      	bx	lr
    displaying = false;
    return;
  }

  // If we've found a new error start displaying it
  if (errDetected[errorIndex])
 8003978:	4c16      	ldr	r4, [pc, #88]	; (80039d4 <errorService+0xb0>)
 800397a:	4b18      	ldr	r3, [pc, #96]	; (80039dc <errorService+0xb8>)
 800397c:	7820      	ldrb	r0, [r4, #0]
 800397e:	5c1b      	ldrb	r3, [r3, r0]
 8003980:	b963      	cbnz	r3, 800399c <errorService+0x78>
    setLEDs(errorIndex, flashIndex);
    return;
  }

  // Otherwise keep cycling and looking for an error
  errorIndex++;
 8003982:	3001      	adds	r0, #1
  errorIndex %= ERR_NUMBER;
 8003984:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <errorService+0xb4>)
 8003986:	b2c0      	uxtb	r0, r0
 8003988:	fba3 2300 	umull	r2, r3, r3, r0
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003992:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 8003996:	7020      	strb	r0, [r4, #0]
  return;
}
 8003998:	bc30      	pop	{r4, r5}
 800399a:	4770      	bx	lr

  // If we've found a new error start displaying it
  if (errDetected[errorIndex])
  {
    displaying = true;
    flashIndex = 0;
 800399c:	4c0c      	ldr	r4, [pc, #48]	; (80039d0 <errorService+0xac>)
    flashStartTime = SYSTIME;
 800399e:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <errorService+0xa4>)

  // If we've found a new error start displaying it
  if (errDetected[errorIndex])
  {
    displaying = true;
    flashIndex = 0;
 80039a0:	7021      	strb	r1, [r4, #0]
    flashStartTime = SYSTIME;
 80039a2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  }

  // If we've found a new error start displaying it
  if (errDetected[errorIndex])
  {
    displaying = true;
 80039a6:	2501      	movs	r5, #1
 80039a8:	7015      	strb	r5, [r2, #0]
    flashIndex = 0;
    flashStartTime = SYSTIME;
 80039aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80039ac:	601a      	str	r2, [r3, #0]

  // Otherwise keep cycling and looking for an error
  errorIndex++;
  errorIndex %= ERR_NUMBER;
  return;
}
 80039ae:	bc30      	pop	{r4, r5}
  if (errDetected[errorIndex])
  {
    displaying = true;
    flashIndex = 0;
    flashStartTime = SYSTIME;
    setLEDs(errorIndex, flashIndex);
 80039b0:	f7ff bfa0 	b.w	80038f4 <setLEDs>
 80039b4:	2308      	movs	r3, #8
 80039b6:	e7da      	b.n	800396e <errorService+0x4a>

    flashStartTime = SYSTIME;
    flashIndex++;
    if (flashIndex < NUM_FLASHES)
    {
      setLEDs(errorIndex, flashIndex);
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <errorService+0xb0>)

  // Otherwise keep cycling and looking for an error
  errorIndex++;
  errorIndex %= ERR_NUMBER;
  return;
}
 80039ba:	bc30      	pop	{r4, r5}

    flashStartTime = SYSTIME;
    flashIndex++;
    if (flashIndex < NUM_FLASHES)
    {
      setLEDs(errorIndex, flashIndex);
 80039bc:	7818      	ldrb	r0, [r3, #0]
 80039be:	f7ff bf99 	b.w	80038f4 <setLEDs>
 80039c2:	bf00      	nop
 80039c4:	2001046c 	.word	0x2001046c
 80039c8:	20010458 	.word	0x20010458
 80039cc:	0003d08f 	.word	0x0003d08f
 80039d0:	2001046d 	.word	0x2001046d
 80039d4:	2001045c 	.word	0x2001045c
 80039d8:	aaaaaaab 	.word	0xaaaaaaab
 80039dc:	20010460 	.word	0x20010460

080039e0 <err_set>:
  errorIndex %= ERR_NUMBER;
  return;
}

void err_set(error_type_t err) {
  errDetected[err] = 1;
 80039e0:	4b01      	ldr	r3, [pc, #4]	; (80039e8 <err_set+0x8>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	541a      	strb	r2, [r3, r0]
 80039e6:	4770      	bx	lr
 80039e8:	20010460 	.word	0x20010460

080039ec <err_unset>:
}

void err_unset(error_type_t err) {
  errDetected[err] = 0;
 80039ec:	4b01      	ldr	r3, [pc, #4]	; (80039f4 <err_unset+0x8>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	541a      	strb	r2, [r3, r0]
 80039f2:	4770      	bx	lr
 80039f4:	20010460 	.word	0x20010460

080039f8 <exit>:
 80039f8:	b508      	push	{r3, lr}
 80039fa:	2100      	movs	r1, #0
 80039fc:	4604      	mov	r4, r0
 80039fe:	f001 fc7d 	bl	80052fc <__call_exitprocs>
 8003a02:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <exit+0x1c>)
 8003a04:	6818      	ldr	r0, [r3, #0]
 8003a06:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003a08:	b103      	cbz	r3, 8003a0c <exit+0x14>
 8003a0a:	4798      	blx	r3
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	f7fd fac3 	bl	8000f98 <_exit>
 8003a12:	bf00      	nop
 8003a14:	0800acc8 	.word	0x0800acc8

08003a18 <__libc_init_array>:
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	4e0f      	ldr	r6, [pc, #60]	; (8003a58 <__libc_init_array+0x40>)
 8003a1c:	4d0f      	ldr	r5, [pc, #60]	; (8003a5c <__libc_init_array+0x44>)
 8003a1e:	1b76      	subs	r6, r6, r5
 8003a20:	10b6      	asrs	r6, r6, #2
 8003a22:	bf18      	it	ne
 8003a24:	2400      	movne	r4, #0
 8003a26:	d005      	beq.n	8003a34 <__libc_init_array+0x1c>
 8003a28:	3401      	adds	r4, #1
 8003a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a2e:	4798      	blx	r3
 8003a30:	42a6      	cmp	r6, r4
 8003a32:	d1f9      	bne.n	8003a28 <__libc_init_array+0x10>
 8003a34:	4e0a      	ldr	r6, [pc, #40]	; (8003a60 <__libc_init_array+0x48>)
 8003a36:	4d0b      	ldr	r5, [pc, #44]	; (8003a64 <__libc_init_array+0x4c>)
 8003a38:	1b76      	subs	r6, r6, r5
 8003a3a:	f007 fa29 	bl	800ae90 <_init>
 8003a3e:	10b6      	asrs	r6, r6, #2
 8003a40:	bf18      	it	ne
 8003a42:	2400      	movne	r4, #0
 8003a44:	d006      	beq.n	8003a54 <__libc_init_array+0x3c>
 8003a46:	3401      	adds	r4, #1
 8003a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a4c:	4798      	blx	r3
 8003a4e:	42a6      	cmp	r6, r4
 8003a50:	d1f9      	bne.n	8003a46 <__libc_init_array+0x2e>
 8003a52:	bd70      	pop	{r4, r5, r6, pc}
 8003a54:	bd70      	pop	{r4, r5, r6, pc}
 8003a56:	bf00      	nop
 8003a58:	0800ae9c 	.word	0x0800ae9c
 8003a5c:	0800ae9c 	.word	0x0800ae9c
 8003a60:	0800aea4 	.word	0x0800aea4
 8003a64:	0800ae9c 	.word	0x0800ae9c

08003a68 <memcpy>:
 8003a68:	4684      	mov	ip, r0
 8003a6a:	ea41 0300 	orr.w	r3, r1, r0
 8003a6e:	f013 0303 	ands.w	r3, r3, #3
 8003a72:	d16d      	bne.n	8003b50 <memcpy+0xe8>
 8003a74:	3a40      	subs	r2, #64	; 0x40
 8003a76:	d341      	bcc.n	8003afc <memcpy+0x94>
 8003a78:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a7c:	f840 3b04 	str.w	r3, [r0], #4
 8003a80:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a84:	f840 3b04 	str.w	r3, [r0], #4
 8003a88:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a8c:	f840 3b04 	str.w	r3, [r0], #4
 8003a90:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a94:	f840 3b04 	str.w	r3, [r0], #4
 8003a98:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a9c:	f840 3b04 	str.w	r3, [r0], #4
 8003aa0:	f851 3b04 	ldr.w	r3, [r1], #4
 8003aa4:	f840 3b04 	str.w	r3, [r0], #4
 8003aa8:	f851 3b04 	ldr.w	r3, [r1], #4
 8003aac:	f840 3b04 	str.w	r3, [r0], #4
 8003ab0:	f851 3b04 	ldr.w	r3, [r1], #4
 8003ab4:	f840 3b04 	str.w	r3, [r0], #4
 8003ab8:	f851 3b04 	ldr.w	r3, [r1], #4
 8003abc:	f840 3b04 	str.w	r3, [r0], #4
 8003ac0:	f851 3b04 	ldr.w	r3, [r1], #4
 8003ac4:	f840 3b04 	str.w	r3, [r0], #4
 8003ac8:	f851 3b04 	ldr.w	r3, [r1], #4
 8003acc:	f840 3b04 	str.w	r3, [r0], #4
 8003ad0:	f851 3b04 	ldr.w	r3, [r1], #4
 8003ad4:	f840 3b04 	str.w	r3, [r0], #4
 8003ad8:	f851 3b04 	ldr.w	r3, [r1], #4
 8003adc:	f840 3b04 	str.w	r3, [r0], #4
 8003ae0:	f851 3b04 	ldr.w	r3, [r1], #4
 8003ae4:	f840 3b04 	str.w	r3, [r0], #4
 8003ae8:	f851 3b04 	ldr.w	r3, [r1], #4
 8003aec:	f840 3b04 	str.w	r3, [r0], #4
 8003af0:	f851 3b04 	ldr.w	r3, [r1], #4
 8003af4:	f840 3b04 	str.w	r3, [r0], #4
 8003af8:	3a40      	subs	r2, #64	; 0x40
 8003afa:	d2bd      	bcs.n	8003a78 <memcpy+0x10>
 8003afc:	3230      	adds	r2, #48	; 0x30
 8003afe:	d311      	bcc.n	8003b24 <memcpy+0xbc>
 8003b00:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b04:	f840 3b04 	str.w	r3, [r0], #4
 8003b08:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b0c:	f840 3b04 	str.w	r3, [r0], #4
 8003b10:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b14:	f840 3b04 	str.w	r3, [r0], #4
 8003b18:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b1c:	f840 3b04 	str.w	r3, [r0], #4
 8003b20:	3a10      	subs	r2, #16
 8003b22:	d2ed      	bcs.n	8003b00 <memcpy+0x98>
 8003b24:	320c      	adds	r2, #12
 8003b26:	d305      	bcc.n	8003b34 <memcpy+0xcc>
 8003b28:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b2c:	f840 3b04 	str.w	r3, [r0], #4
 8003b30:	3a04      	subs	r2, #4
 8003b32:	d2f9      	bcs.n	8003b28 <memcpy+0xc0>
 8003b34:	3204      	adds	r2, #4
 8003b36:	d008      	beq.n	8003b4a <memcpy+0xe2>
 8003b38:	07d2      	lsls	r2, r2, #31
 8003b3a:	bf1c      	itt	ne
 8003b3c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003b40:	f800 3b01 	strbne.w	r3, [r0], #1
 8003b44:	d301      	bcc.n	8003b4a <memcpy+0xe2>
 8003b46:	880b      	ldrh	r3, [r1, #0]
 8003b48:	8003      	strh	r3, [r0, #0]
 8003b4a:	4660      	mov	r0, ip
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	2a08      	cmp	r2, #8
 8003b52:	d313      	bcc.n	8003b7c <memcpy+0x114>
 8003b54:	078b      	lsls	r3, r1, #30
 8003b56:	d08d      	beq.n	8003a74 <memcpy+0xc>
 8003b58:	f010 0303 	ands.w	r3, r0, #3
 8003b5c:	d08a      	beq.n	8003a74 <memcpy+0xc>
 8003b5e:	f1c3 0304 	rsb	r3, r3, #4
 8003b62:	1ad2      	subs	r2, r2, r3
 8003b64:	07db      	lsls	r3, r3, #31
 8003b66:	bf1c      	itt	ne
 8003b68:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003b6c:	f800 3b01 	strbne.w	r3, [r0], #1
 8003b70:	d380      	bcc.n	8003a74 <memcpy+0xc>
 8003b72:	f831 3b02 	ldrh.w	r3, [r1], #2
 8003b76:	f820 3b02 	strh.w	r3, [r0], #2
 8003b7a:	e77b      	b.n	8003a74 <memcpy+0xc>
 8003b7c:	3a04      	subs	r2, #4
 8003b7e:	d3d9      	bcc.n	8003b34 <memcpy+0xcc>
 8003b80:	3a01      	subs	r2, #1
 8003b82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b86:	f800 3b01 	strb.w	r3, [r0], #1
 8003b8a:	d2f9      	bcs.n	8003b80 <memcpy+0x118>
 8003b8c:	780b      	ldrb	r3, [r1, #0]
 8003b8e:	7003      	strb	r3, [r0, #0]
 8003b90:	784b      	ldrb	r3, [r1, #1]
 8003b92:	7043      	strb	r3, [r0, #1]
 8003b94:	788b      	ldrb	r3, [r1, #2]
 8003b96:	7083      	strb	r3, [r0, #2]
 8003b98:	4660      	mov	r0, ip
 8003b9a:	4770      	bx	lr

08003b9c <memset>:
 8003b9c:	b470      	push	{r4, r5, r6}
 8003b9e:	0784      	lsls	r4, r0, #30
 8003ba0:	d046      	beq.n	8003c30 <memset+0x94>
 8003ba2:	1e54      	subs	r4, r2, #1
 8003ba4:	2a00      	cmp	r2, #0
 8003ba6:	d041      	beq.n	8003c2c <memset+0x90>
 8003ba8:	b2cd      	uxtb	r5, r1
 8003baa:	4603      	mov	r3, r0
 8003bac:	e002      	b.n	8003bb4 <memset+0x18>
 8003bae:	1e62      	subs	r2, r4, #1
 8003bb0:	b3e4      	cbz	r4, 8003c2c <memset+0x90>
 8003bb2:	4614      	mov	r4, r2
 8003bb4:	f803 5b01 	strb.w	r5, [r3], #1
 8003bb8:	079a      	lsls	r2, r3, #30
 8003bba:	d1f8      	bne.n	8003bae <memset+0x12>
 8003bbc:	2c03      	cmp	r4, #3
 8003bbe:	d92e      	bls.n	8003c1e <memset+0x82>
 8003bc0:	b2cd      	uxtb	r5, r1
 8003bc2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003bc6:	2c0f      	cmp	r4, #15
 8003bc8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003bcc:	d919      	bls.n	8003c02 <memset+0x66>
 8003bce:	f103 0210 	add.w	r2, r3, #16
 8003bd2:	4626      	mov	r6, r4
 8003bd4:	3e10      	subs	r6, #16
 8003bd6:	2e0f      	cmp	r6, #15
 8003bd8:	f842 5c10 	str.w	r5, [r2, #-16]
 8003bdc:	f842 5c0c 	str.w	r5, [r2, #-12]
 8003be0:	f842 5c08 	str.w	r5, [r2, #-8]
 8003be4:	f842 5c04 	str.w	r5, [r2, #-4]
 8003be8:	f102 0210 	add.w	r2, r2, #16
 8003bec:	d8f2      	bhi.n	8003bd4 <memset+0x38>
 8003bee:	f1a4 0210 	sub.w	r2, r4, #16
 8003bf2:	f022 020f 	bic.w	r2, r2, #15
 8003bf6:	f004 040f 	and.w	r4, r4, #15
 8003bfa:	3210      	adds	r2, #16
 8003bfc:	2c03      	cmp	r4, #3
 8003bfe:	4413      	add	r3, r2
 8003c00:	d90d      	bls.n	8003c1e <memset+0x82>
 8003c02:	461e      	mov	r6, r3
 8003c04:	4622      	mov	r2, r4
 8003c06:	3a04      	subs	r2, #4
 8003c08:	2a03      	cmp	r2, #3
 8003c0a:	f846 5b04 	str.w	r5, [r6], #4
 8003c0e:	d8fa      	bhi.n	8003c06 <memset+0x6a>
 8003c10:	1f22      	subs	r2, r4, #4
 8003c12:	f022 0203 	bic.w	r2, r2, #3
 8003c16:	3204      	adds	r2, #4
 8003c18:	4413      	add	r3, r2
 8003c1a:	f004 0403 	and.w	r4, r4, #3
 8003c1e:	b12c      	cbz	r4, 8003c2c <memset+0x90>
 8003c20:	b2c9      	uxtb	r1, r1
 8003c22:	441c      	add	r4, r3
 8003c24:	f803 1b01 	strb.w	r1, [r3], #1
 8003c28:	42a3      	cmp	r3, r4
 8003c2a:	d1fb      	bne.n	8003c24 <memset+0x88>
 8003c2c:	bc70      	pop	{r4, r5, r6}
 8003c2e:	4770      	bx	lr
 8003c30:	4614      	mov	r4, r2
 8003c32:	4603      	mov	r3, r0
 8003c34:	e7c2      	b.n	8003bbc <memset+0x20>
 8003c36:	bf00      	nop

08003c38 <_printf_r>:
 8003c38:	b40e      	push	{r1, r2, r3}
 8003c3a:	b500      	push	{lr}
 8003c3c:	b082      	sub	sp, #8
 8003c3e:	ab03      	add	r3, sp, #12
 8003c40:	6881      	ldr	r1, [r0, #8]
 8003c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c46:	9301      	str	r3, [sp, #4]
 8003c48:	f000 f892 	bl	8003d70 <_vfprintf_r>
 8003c4c:	b002      	add	sp, #8
 8003c4e:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c52:	b003      	add	sp, #12
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop

08003c58 <printf>:
 8003c58:	b40f      	push	{r0, r1, r2, r3}
 8003c5a:	b500      	push	{lr}
 8003c5c:	4907      	ldr	r1, [pc, #28]	; (8003c7c <printf+0x24>)
 8003c5e:	b083      	sub	sp, #12
 8003c60:	ab04      	add	r3, sp, #16
 8003c62:	6808      	ldr	r0, [r1, #0]
 8003c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c68:	6881      	ldr	r1, [r0, #8]
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	f000 f880 	bl	8003d70 <_vfprintf_r>
 8003c70:	b003      	add	sp, #12
 8003c72:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c76:	b004      	add	sp, #16
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	200004a8 	.word	0x200004a8

08003c80 <_putchar_r>:
 8003c80:	6882      	ldr	r2, [r0, #8]
 8003c82:	f004 b8e9 	b.w	8007e58 <_putc_r>
 8003c86:	bf00      	nop

08003c88 <putchar>:
 8003c88:	4b03      	ldr	r3, [pc, #12]	; (8003c98 <putchar+0x10>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4601      	mov	r1, r0
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f004 b8e1 	b.w	8007e58 <_putc_r>
 8003c96:	bf00      	nop
 8003c98:	200004a8 	.word	0x200004a8

08003c9c <_puts_r>:
 8003c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c9e:	4605      	mov	r5, r0
 8003ca0:	b089      	sub	sp, #36	; 0x24
 8003ca2:	4608      	mov	r0, r1
 8003ca4:	460c      	mov	r4, r1
 8003ca6:	f000 f833 	bl	8003d10 <strlen>
 8003caa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003cac:	4f13      	ldr	r7, [pc, #76]	; (8003cfc <_puts_r+0x60>)
 8003cae:	9404      	str	r4, [sp, #16]
 8003cb0:	2601      	movs	r6, #1
 8003cb2:	1c44      	adds	r4, r0, #1
 8003cb4:	a904      	add	r1, sp, #16
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	9403      	str	r4, [sp, #12]
 8003cba:	9005      	str	r0, [sp, #20]
 8003cbc:	68ac      	ldr	r4, [r5, #8]
 8003cbe:	9706      	str	r7, [sp, #24]
 8003cc0:	9607      	str	r6, [sp, #28]
 8003cc2:	9101      	str	r1, [sp, #4]
 8003cc4:	9202      	str	r2, [sp, #8]
 8003cc6:	b1ab      	cbz	r3, 8003cf4 <_puts_r+0x58>
 8003cc8:	89a3      	ldrh	r3, [r4, #12]
 8003cca:	049a      	lsls	r2, r3, #18
 8003ccc:	d406      	bmi.n	8003cdc <_puts_r+0x40>
 8003cce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003cd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cd8:	81a3      	strh	r3, [r4, #12]
 8003cda:	6662      	str	r2, [r4, #100]	; 0x64
 8003cdc:	4628      	mov	r0, r5
 8003cde:	4621      	mov	r1, r4
 8003ce0:	aa01      	add	r2, sp, #4
 8003ce2:	f002 fe7b 	bl	80069dc <__sfvwrite_r>
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	bf14      	ite	ne
 8003cea:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8003cee:	200a      	moveq	r0, #10
 8003cf0:	b009      	add	sp, #36	; 0x24
 8003cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	f002 fd13 	bl	8006720 <__sinit>
 8003cfa:	e7e5      	b.n	8003cc8 <_puts_r+0x2c>
 8003cfc:	0800aaec 	.word	0x0800aaec

08003d00 <puts>:
 8003d00:	4b02      	ldr	r3, [pc, #8]	; (8003d0c <puts+0xc>)
 8003d02:	4601      	mov	r1, r0
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	f7ff bfc9 	b.w	8003c9c <_puts_r>
 8003d0a:	bf00      	nop
 8003d0c:	200004a8 	.word	0x200004a8

08003d10 <strlen>:
 8003d10:	f020 0103 	bic.w	r1, r0, #3
 8003d14:	f010 0003 	ands.w	r0, r0, #3
 8003d18:	f1c0 0000 	rsb	r0, r0, #0
 8003d1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003d20:	f100 0c04 	add.w	ip, r0, #4
 8003d24:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8003d28:	f06f 0200 	mvn.w	r2, #0
 8003d2c:	bf1c      	itt	ne
 8003d2e:	fa22 f20c 	lsrne.w	r2, r2, ip
 8003d32:	4313      	orrne	r3, r2
 8003d34:	f04f 0c01 	mov.w	ip, #1
 8003d38:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8003d3c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8003d40:	eba3 020c 	sub.w	r2, r3, ip
 8003d44:	ea22 0203 	bic.w	r2, r2, r3
 8003d48:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8003d4c:	bf04      	itt	eq
 8003d4e:	f851 3b04 	ldreq.w	r3, [r1], #4
 8003d52:	3004      	addeq	r0, #4
 8003d54:	d0f4      	beq.n	8003d40 <strlen+0x30>
 8003d56:	f1c2 0100 	rsb	r1, r2, #0
 8003d5a:	ea02 0201 	and.w	r2, r2, r1
 8003d5e:	fab2 f282 	clz	r2, r2
 8003d62:	f1c2 021f 	rsb	r2, r2, #31
 8003d66:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8003d6a:	4770      	bx	lr
 8003d6c:	0000      	movs	r0, r0
	...

08003d70 <_vfprintf_r>:
 8003d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d74:	b0bd      	sub	sp, #244	; 0xf4
 8003d76:	461c      	mov	r4, r3
 8003d78:	4689      	mov	r9, r1
 8003d7a:	9204      	str	r2, [sp, #16]
 8003d7c:	4607      	mov	r7, r0
 8003d7e:	f003 f83b 	bl	8006df8 <_localeconv_r>
 8003d82:	6803      	ldr	r3, [r0, #0]
 8003d84:	9311      	str	r3, [sp, #68]	; 0x44
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff ffc2 	bl	8003d10 <strlen>
 8003d8c:	9408      	str	r4, [sp, #32]
 8003d8e:	9012      	str	r0, [sp, #72]	; 0x48
 8003d90:	b11f      	cbz	r7, 8003d9a <_vfprintf_r+0x2a>
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80f3 	beq.w	8003f80 <_vfprintf_r+0x210>
 8003d9a:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8003d9e:	b293      	uxth	r3, r2
 8003da0:	049e      	lsls	r6, r3, #18
 8003da2:	d40a      	bmi.n	8003dba <_vfprintf_r+0x4a>
 8003da4:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 8003da8:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8003dac:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8003db0:	f8a9 300c 	strh.w	r3, [r9, #12]
 8003db4:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	071d      	lsls	r5, r3, #28
 8003dbc:	f140 80aa 	bpl.w	8003f14 <_vfprintf_r+0x1a4>
 8003dc0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8003dc4:	2a00      	cmp	r2, #0
 8003dc6:	f000 80a5 	beq.w	8003f14 <_vfprintf_r+0x1a4>
 8003dca:	f003 031a 	and.w	r3, r3, #26
 8003dce:	2b0a      	cmp	r3, #10
 8003dd0:	f000 80ac 	beq.w	8003f2c <_vfprintf_r+0x1bc>
 8003dd4:	ed9f 7b6e 	vldr	d7, [pc, #440]	; 8003f90 <_vfprintf_r+0x220>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003dde:	930d      	str	r3, [sp, #52]	; 0x34
 8003de0:	9321      	str	r3, [sp, #132]	; 0x84
 8003de2:	9320      	str	r3, [sp, #128]	; 0x80
 8003de4:	9310      	str	r3, [sp, #64]	; 0x40
 8003de6:	9313      	str	r3, [sp, #76]	; 0x4c
 8003de8:	9305      	str	r3, [sp, #20]
 8003dea:	ab2c      	add	r3, sp, #176	; 0xb0
 8003dec:	931f      	str	r3, [sp, #124]	; 0x7c
 8003dee:	461c      	mov	r4, r3
 8003df0:	46b8      	mov	r8, r7
 8003df2:	9d04      	ldr	r5, [sp, #16]
 8003df4:	782b      	ldrb	r3, [r5, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80c6 	beq.w	8003f88 <_vfprintf_r+0x218>
 8003dfc:	2b25      	cmp	r3, #37	; 0x25
 8003dfe:	d102      	bne.n	8003e06 <_vfprintf_r+0x96>
 8003e00:	e0c2      	b.n	8003f88 <_vfprintf_r+0x218>
 8003e02:	2b25      	cmp	r3, #37	; 0x25
 8003e04:	d003      	beq.n	8003e0e <_vfprintf_r+0x9e>
 8003e06:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f9      	bne.n	8003e02 <_vfprintf_r+0x92>
 8003e0e:	9b04      	ldr	r3, [sp, #16]
 8003e10:	1aee      	subs	r6, r5, r3
 8003e12:	b17e      	cbz	r6, 8003e34 <_vfprintf_r+0xc4>
 8003e14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003e16:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003e18:	9904      	ldr	r1, [sp, #16]
 8003e1a:	6021      	str	r1, [r4, #0]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	4432      	add	r2, r6
 8003e20:	2b07      	cmp	r3, #7
 8003e22:	6066      	str	r6, [r4, #4]
 8003e24:	9221      	str	r2, [sp, #132]	; 0x84
 8003e26:	9320      	str	r3, [sp, #128]	; 0x80
 8003e28:	f300 8093 	bgt.w	8003f52 <_vfprintf_r+0x1e2>
 8003e2c:	3408      	adds	r4, #8
 8003e2e:	9b05      	ldr	r3, [sp, #20]
 8003e30:	4433      	add	r3, r6
 8003e32:	9305      	str	r3, [sp, #20]
 8003e34:	782b      	ldrb	r3, [r5, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 8093 	beq.w	8003f62 <_vfprintf_r+0x1f2>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	1c69      	adds	r1, r5, #1
 8003e40:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003e44:	786d      	ldrb	r5, [r5, #1]
 8003e46:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	9306      	str	r3, [sp, #24]
 8003e4e:	9302      	str	r3, [sp, #8]
 8003e50:	4656      	mov	r6, sl
 8003e52:	1c4b      	adds	r3, r1, #1
 8003e54:	f1a5 0120 	sub.w	r1, r5, #32
 8003e58:	2958      	cmp	r1, #88	; 0x58
 8003e5a:	f200 83cd 	bhi.w	80045f8 <_vfprintf_r+0x888>
 8003e5e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003e62:	025c      	.short	0x025c
 8003e64:	03cb03cb 	.word	0x03cb03cb
 8003e68:	03cb0302 	.word	0x03cb0302
 8003e6c:	03cb03cb 	.word	0x03cb03cb
 8003e70:	03cb03cb 	.word	0x03cb03cb
 8003e74:	030903cb 	.word	0x030903cb
 8003e78:	03cb02d2 	.word	0x03cb02d2
 8003e7c:	035301f8 	.word	0x035301f8
 8003e80:	02d603cb 	.word	0x02d603cb
 8003e84:	02dd02dd 	.word	0x02dd02dd
 8003e88:	02dd02dd 	.word	0x02dd02dd
 8003e8c:	02dd02dd 	.word	0x02dd02dd
 8003e90:	02dd02dd 	.word	0x02dd02dd
 8003e94:	03cb02dd 	.word	0x03cb02dd
 8003e98:	03cb03cb 	.word	0x03cb03cb
 8003e9c:	03cb03cb 	.word	0x03cb03cb
 8003ea0:	03cb03cb 	.word	0x03cb03cb
 8003ea4:	03cb03cb 	.word	0x03cb03cb
 8003ea8:	027103cb 	.word	0x027103cb
 8003eac:	03cb0293 	.word	0x03cb0293
 8003eb0:	03cb0293 	.word	0x03cb0293
 8003eb4:	03cb03cb 	.word	0x03cb03cb
 8003eb8:	02cb03cb 	.word	0x02cb03cb
 8003ebc:	03cb03cb 	.word	0x03cb03cb
 8003ec0:	03cb036e 	.word	0x03cb036e
 8003ec4:	03cb03cb 	.word	0x03cb03cb
 8003ec8:	03cb03cb 	.word	0x03cb03cb
 8003ecc:	03cb03b5 	.word	0x03cb03b5
 8003ed0:	038b03cb 	.word	0x038b03cb
 8003ed4:	03cb03cb 	.word	0x03cb03cb
 8003ed8:	03cb03cb 	.word	0x03cb03cb
 8003edc:	03cb03cb 	.word	0x03cb03cb
 8003ee0:	03cb03cb 	.word	0x03cb03cb
 8003ee4:	03cb03cb 	.word	0x03cb03cb
 8003ee8:	031703a0 	.word	0x031703a0
 8003eec:	02930293 	.word	0x02930293
 8003ef0:	03300293 	.word	0x03300293
 8003ef4:	03cb0317 	.word	0x03cb0317
 8003ef8:	033703cb 	.word	0x033703cb
 8003efc:	034103cb 	.word	0x034103cb
 8003f00:	02ec01ff 	.word	0x02ec01ff
 8003f04:	03cb0263 	.word	0x03cb0263
 8003f08:	03cb0211 	.word	0x03cb0211
 8003f0c:	03cb009b 	.word	0x03cb009b
 8003f10:	023603cb 	.word	0x023603cb
 8003f14:	4638      	mov	r0, r7
 8003f16:	4649      	mov	r1, r9
 8003f18:	f001 f984 	bl	8005224 <__swsetup_r>
 8003f1c:	b9a0      	cbnz	r0, 8003f48 <_vfprintf_r+0x1d8>
 8003f1e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003f22:	f003 031a 	and.w	r3, r3, #26
 8003f26:	2b0a      	cmp	r3, #10
 8003f28:	f47f af54 	bne.w	8003dd4 <_vfprintf_r+0x64>
 8003f2c:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f6ff af4f 	blt.w	8003dd4 <_vfprintf_r+0x64>
 8003f36:	4638      	mov	r0, r7
 8003f38:	4649      	mov	r1, r9
 8003f3a:	9a04      	ldr	r2, [sp, #16]
 8003f3c:	4623      	mov	r3, r4
 8003f3e:	f001 f935 	bl	80051ac <__sbprintf>
 8003f42:	b03d      	add	sp, #244	; 0xf4
 8003f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f4c:	b03d      	add	sp, #244	; 0xf4
 8003f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f52:	4640      	mov	r0, r8
 8003f54:	4649      	mov	r1, r9
 8003f56:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f58:	f004 fc0c 	bl	8008774 <__sprint_r>
 8003f5c:	b940      	cbnz	r0, 8003f70 <_vfprintf_r+0x200>
 8003f5e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f60:	e765      	b.n	8003e2e <_vfprintf_r+0xbe>
 8003f62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f64:	b123      	cbz	r3, 8003f70 <_vfprintf_r+0x200>
 8003f66:	4640      	mov	r0, r8
 8003f68:	4649      	mov	r1, r9
 8003f6a:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f6c:	f004 fc02 	bl	8008774 <__sprint_r>
 8003f70:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003f74:	065a      	lsls	r2, r3, #25
 8003f76:	d4e7      	bmi.n	8003f48 <_vfprintf_r+0x1d8>
 8003f78:	9805      	ldr	r0, [sp, #20]
 8003f7a:	b03d      	add	sp, #244	; 0xf4
 8003f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f80:	4638      	mov	r0, r7
 8003f82:	f002 fbcd 	bl	8006720 <__sinit>
 8003f86:	e708      	b.n	8003d9a <_vfprintf_r+0x2a>
 8003f88:	9d04      	ldr	r5, [sp, #16]
 8003f8a:	e753      	b.n	8003e34 <_vfprintf_r+0xc4>
 8003f8c:	f3af 8000 	nop.w
	...
 8003f98:	9304      	str	r3, [sp, #16]
 8003f9a:	9b02      	ldr	r3, [sp, #8]
 8003f9c:	46b2      	mov	sl, r6
 8003f9e:	069e      	lsls	r6, r3, #26
 8003fa0:	f140 831e 	bpl.w	80045e0 <_vfprintf_r+0x870>
 8003fa4:	9f08      	ldr	r7, [sp, #32]
 8003fa6:	3707      	adds	r7, #7
 8003fa8:	f027 0307 	bic.w	r3, r7, #7
 8003fac:	f103 0208 	add.w	r2, r3, #8
 8003fb0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003fb4:	9208      	str	r2, [sp, #32]
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f04f 0c00 	mov.w	ip, #0
 8003fbc:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 8003fc0:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8003fc4:	f1ba 0f00 	cmp.w	sl, #0
 8003fc8:	db03      	blt.n	8003fd2 <_vfprintf_r+0x262>
 8003fca:	9a02      	ldr	r2, [sp, #8]
 8003fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fd0:	9202      	str	r2, [sp, #8]
 8003fd2:	ea56 0207 	orrs.w	r2, r6, r7
 8003fd6:	f040 831f 	bne.w	8004618 <_vfprintf_r+0x8a8>
 8003fda:	f1ba 0f00 	cmp.w	sl, #0
 8003fde:	f000 841c 	beq.w	800481a <_vfprintf_r+0xaaa>
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	f000 8320 	beq.w	8004628 <_vfprintf_r+0x8b8>
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	f000 8452 	beq.w	8004892 <_vfprintf_r+0xb22>
 8003fee:	a92c      	add	r1, sp, #176	; 0xb0
 8003ff0:	08f2      	lsrs	r2, r6, #3
 8003ff2:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8003ff6:	08f8      	lsrs	r0, r7, #3
 8003ff8:	f006 0307 	and.w	r3, r6, #7
 8003ffc:	4607      	mov	r7, r0
 8003ffe:	4616      	mov	r6, r2
 8004000:	3330      	adds	r3, #48	; 0x30
 8004002:	ea56 0207 	orrs.w	r2, r6, r7
 8004006:	f801 3d01 	strb.w	r3, [r1, #-1]!
 800400a:	d1f1      	bne.n	8003ff0 <_vfprintf_r+0x280>
 800400c:	9a02      	ldr	r2, [sp, #8]
 800400e:	910a      	str	r1, [sp, #40]	; 0x28
 8004010:	07d0      	lsls	r0, r2, #31
 8004012:	f100 84f9 	bmi.w	8004a08 <_vfprintf_r+0xc98>
 8004016:	ab2c      	add	r3, sp, #176	; 0xb0
 8004018:	1a5b      	subs	r3, r3, r1
 800401a:	9307      	str	r3, [sp, #28]
 800401c:	9a07      	ldr	r2, [sp, #28]
 800401e:	4592      	cmp	sl, r2
 8004020:	4653      	mov	r3, sl
 8004022:	bfb8      	it	lt
 8004024:	4613      	movlt	r3, r2
 8004026:	9303      	str	r3, [sp, #12]
 8004028:	2300      	movs	r3, #0
 800402a:	930c      	str	r3, [sp, #48]	; 0x30
 800402c:	f1bc 0f00 	cmp.w	ip, #0
 8004030:	d002      	beq.n	8004038 <_vfprintf_r+0x2c8>
 8004032:	9b03      	ldr	r3, [sp, #12]
 8004034:	3301      	adds	r3, #1
 8004036:	9303      	str	r3, [sp, #12]
 8004038:	9b02      	ldr	r3, [sp, #8]
 800403a:	f013 0302 	ands.w	r3, r3, #2
 800403e:	9309      	str	r3, [sp, #36]	; 0x24
 8004040:	d002      	beq.n	8004048 <_vfprintf_r+0x2d8>
 8004042:	9b03      	ldr	r3, [sp, #12]
 8004044:	3302      	adds	r3, #2
 8004046:	9303      	str	r3, [sp, #12]
 8004048:	9b02      	ldr	r3, [sp, #8]
 800404a:	f013 0684 	ands.w	r6, r3, #132	; 0x84
 800404e:	f040 82e0 	bne.w	8004612 <_vfprintf_r+0x8a2>
 8004052:	9b06      	ldr	r3, [sp, #24]
 8004054:	9a03      	ldr	r2, [sp, #12]
 8004056:	ebc2 0a03 	rsb	sl, r2, r3
 800405a:	f1ba 0f00 	cmp.w	sl, #0
 800405e:	f340 82d8 	ble.w	8004612 <_vfprintf_r+0x8a2>
 8004062:	f1ba 0f10 	cmp.w	sl, #16
 8004066:	9921      	ldr	r1, [sp, #132]	; 0x84
 8004068:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800406a:	4fb3      	ldr	r7, [pc, #716]	; (8004338 <_vfprintf_r+0x5c8>)
 800406c:	bfc8      	it	gt
 800406e:	f04f 0b10 	movgt.w	fp, #16
 8004072:	dc07      	bgt.n	8004084 <_vfprintf_r+0x314>
 8004074:	e01e      	b.n	80040b4 <_vfprintf_r+0x344>
 8004076:	f1aa 0a10 	sub.w	sl, sl, #16
 800407a:	f1ba 0f10 	cmp.w	sl, #16
 800407e:	f104 0408 	add.w	r4, r4, #8
 8004082:	dd17      	ble.n	80040b4 <_vfprintf_r+0x344>
 8004084:	3201      	adds	r2, #1
 8004086:	3110      	adds	r1, #16
 8004088:	2a07      	cmp	r2, #7
 800408a:	9121      	str	r1, [sp, #132]	; 0x84
 800408c:	9220      	str	r2, [sp, #128]	; 0x80
 800408e:	e884 0880 	stmia.w	r4, {r7, fp}
 8004092:	ddf0      	ble.n	8004076 <_vfprintf_r+0x306>
 8004094:	4640      	mov	r0, r8
 8004096:	4649      	mov	r1, r9
 8004098:	aa1f      	add	r2, sp, #124	; 0x7c
 800409a:	f004 fb6b 	bl	8008774 <__sprint_r>
 800409e:	2800      	cmp	r0, #0
 80040a0:	f47f af66 	bne.w	8003f70 <_vfprintf_r+0x200>
 80040a4:	f1aa 0a10 	sub.w	sl, sl, #16
 80040a8:	f1ba 0f10 	cmp.w	sl, #16
 80040ac:	9921      	ldr	r1, [sp, #132]	; 0x84
 80040ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80040b0:	ac2c      	add	r4, sp, #176	; 0xb0
 80040b2:	dce7      	bgt.n	8004084 <_vfprintf_r+0x314>
 80040b4:	3201      	adds	r2, #1
 80040b6:	eb0a 0b01 	add.w	fp, sl, r1
 80040ba:	2a07      	cmp	r2, #7
 80040bc:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80040c0:	9220      	str	r2, [sp, #128]	; 0x80
 80040c2:	e884 0480 	stmia.w	r4, {r7, sl}
 80040c6:	f300 844a 	bgt.w	800495e <_vfprintf_r+0xbee>
 80040ca:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80040ce:	3408      	adds	r4, #8
 80040d0:	f1bc 0f00 	cmp.w	ip, #0
 80040d4:	d00f      	beq.n	80040f6 <_vfprintf_r+0x386>
 80040d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80040d8:	3301      	adds	r3, #1
 80040da:	f10b 0b01 	add.w	fp, fp, #1
 80040de:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
 80040e2:	2201      	movs	r2, #1
 80040e4:	2b07      	cmp	r3, #7
 80040e6:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80040ea:	9320      	str	r3, [sp, #128]	; 0x80
 80040ec:	e884 0006 	stmia.w	r4, {r1, r2}
 80040f0:	f300 83b1 	bgt.w	8004856 <_vfprintf_r+0xae6>
 80040f4:	3408      	adds	r4, #8
 80040f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040f8:	b173      	cbz	r3, 8004118 <_vfprintf_r+0x3a8>
 80040fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80040fc:	3301      	adds	r3, #1
 80040fe:	f10b 0b02 	add.w	fp, fp, #2
 8004102:	a918      	add	r1, sp, #96	; 0x60
 8004104:	2202      	movs	r2, #2
 8004106:	2b07      	cmp	r3, #7
 8004108:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800410c:	9320      	str	r3, [sp, #128]	; 0x80
 800410e:	e884 0006 	stmia.w	r4, {r1, r2}
 8004112:	f300 83ac 	bgt.w	800486e <_vfprintf_r+0xafe>
 8004116:	3408      	adds	r4, #8
 8004118:	2e80      	cmp	r6, #128	; 0x80
 800411a:	f000 82f0 	beq.w	80046fe <_vfprintf_r+0x98e>
 800411e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004120:	9a07      	ldr	r2, [sp, #28]
 8004122:	ebc2 0a03 	rsb	sl, r2, r3
 8004126:	f1ba 0f00 	cmp.w	sl, #0
 800412a:	dd32      	ble.n	8004192 <_vfprintf_r+0x422>
 800412c:	f1ba 0f10 	cmp.w	sl, #16
 8004130:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004132:	4f82      	ldr	r7, [pc, #520]	; (800433c <_vfprintf_r+0x5cc>)
 8004134:	dd22      	ble.n	800417c <_vfprintf_r+0x40c>
 8004136:	2610      	movs	r6, #16
 8004138:	465b      	mov	r3, fp
 800413a:	e006      	b.n	800414a <_vfprintf_r+0x3da>
 800413c:	f1aa 0a10 	sub.w	sl, sl, #16
 8004140:	f1ba 0f10 	cmp.w	sl, #16
 8004144:	f104 0408 	add.w	r4, r4, #8
 8004148:	dd17      	ble.n	800417a <_vfprintf_r+0x40a>
 800414a:	3201      	adds	r2, #1
 800414c:	3310      	adds	r3, #16
 800414e:	2a07      	cmp	r2, #7
 8004150:	9321      	str	r3, [sp, #132]	; 0x84
 8004152:	9220      	str	r2, [sp, #128]	; 0x80
 8004154:	6027      	str	r7, [r4, #0]
 8004156:	6066      	str	r6, [r4, #4]
 8004158:	ddf0      	ble.n	800413c <_vfprintf_r+0x3cc>
 800415a:	4640      	mov	r0, r8
 800415c:	4649      	mov	r1, r9
 800415e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004160:	f004 fb08 	bl	8008774 <__sprint_r>
 8004164:	2800      	cmp	r0, #0
 8004166:	f47f af03 	bne.w	8003f70 <_vfprintf_r+0x200>
 800416a:	f1aa 0a10 	sub.w	sl, sl, #16
 800416e:	f1ba 0f10 	cmp.w	sl, #16
 8004172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004174:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004176:	ac2c      	add	r4, sp, #176	; 0xb0
 8004178:	dce7      	bgt.n	800414a <_vfprintf_r+0x3da>
 800417a:	469b      	mov	fp, r3
 800417c:	3201      	adds	r2, #1
 800417e:	44d3      	add	fp, sl
 8004180:	2a07      	cmp	r2, #7
 8004182:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004186:	9220      	str	r2, [sp, #128]	; 0x80
 8004188:	e884 0480 	stmia.w	r4, {r7, sl}
 800418c:	f300 8357 	bgt.w	800483e <_vfprintf_r+0xace>
 8004190:	3408      	adds	r4, #8
 8004192:	9b02      	ldr	r3, [sp, #8]
 8004194:	05db      	lsls	r3, r3, #23
 8004196:	f100 825b 	bmi.w	8004650 <_vfprintf_r+0x8e0>
 800419a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800419c:	9907      	ldr	r1, [sp, #28]
 800419e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041a0:	6022      	str	r2, [r4, #0]
 80041a2:	3301      	adds	r3, #1
 80041a4:	448b      	add	fp, r1
 80041a6:	2b07      	cmp	r3, #7
 80041a8:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80041ac:	6061      	str	r1, [r4, #4]
 80041ae:	9320      	str	r3, [sp, #128]	; 0x80
 80041b0:	f300 831d 	bgt.w	80047ee <_vfprintf_r+0xa7e>
 80041b4:	3408      	adds	r4, #8
 80041b6:	9b02      	ldr	r3, [sp, #8]
 80041b8:	0759      	lsls	r1, r3, #29
 80041ba:	d53a      	bpl.n	8004232 <_vfprintf_r+0x4c2>
 80041bc:	9b06      	ldr	r3, [sp, #24]
 80041be:	9a03      	ldr	r2, [sp, #12]
 80041c0:	1a9d      	subs	r5, r3, r2
 80041c2:	2d00      	cmp	r5, #0
 80041c4:	dd35      	ble.n	8004232 <_vfprintf_r+0x4c2>
 80041c6:	2d10      	cmp	r5, #16
 80041c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80041ca:	4f5b      	ldr	r7, [pc, #364]	; (8004338 <_vfprintf_r+0x5c8>)
 80041cc:	dd1e      	ble.n	800420c <_vfprintf_r+0x49c>
 80041ce:	2610      	movs	r6, #16
 80041d0:	465a      	mov	r2, fp
 80041d2:	e004      	b.n	80041de <_vfprintf_r+0x46e>
 80041d4:	3d10      	subs	r5, #16
 80041d6:	2d10      	cmp	r5, #16
 80041d8:	f104 0408 	add.w	r4, r4, #8
 80041dc:	dd15      	ble.n	800420a <_vfprintf_r+0x49a>
 80041de:	3301      	adds	r3, #1
 80041e0:	3210      	adds	r2, #16
 80041e2:	2b07      	cmp	r3, #7
 80041e4:	9221      	str	r2, [sp, #132]	; 0x84
 80041e6:	9320      	str	r3, [sp, #128]	; 0x80
 80041e8:	6027      	str	r7, [r4, #0]
 80041ea:	6066      	str	r6, [r4, #4]
 80041ec:	ddf2      	ble.n	80041d4 <_vfprintf_r+0x464>
 80041ee:	4640      	mov	r0, r8
 80041f0:	4649      	mov	r1, r9
 80041f2:	aa1f      	add	r2, sp, #124	; 0x7c
 80041f4:	f004 fabe 	bl	8008774 <__sprint_r>
 80041f8:	2800      	cmp	r0, #0
 80041fa:	f47f aeb9 	bne.w	8003f70 <_vfprintf_r+0x200>
 80041fe:	3d10      	subs	r5, #16
 8004200:	2d10      	cmp	r5, #16
 8004202:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004204:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004206:	ac2c      	add	r4, sp, #176	; 0xb0
 8004208:	dce9      	bgt.n	80041de <_vfprintf_r+0x46e>
 800420a:	4693      	mov	fp, r2
 800420c:	3301      	adds	r3, #1
 800420e:	44ab      	add	fp, r5
 8004210:	2b07      	cmp	r3, #7
 8004212:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004216:	9320      	str	r3, [sp, #128]	; 0x80
 8004218:	6027      	str	r7, [r4, #0]
 800421a:	6065      	str	r5, [r4, #4]
 800421c:	dd09      	ble.n	8004232 <_vfprintf_r+0x4c2>
 800421e:	4640      	mov	r0, r8
 8004220:	4649      	mov	r1, r9
 8004222:	aa1f      	add	r2, sp, #124	; 0x7c
 8004224:	f004 faa6 	bl	8008774 <__sprint_r>
 8004228:	2800      	cmp	r0, #0
 800422a:	f47f aea1 	bne.w	8003f70 <_vfprintf_r+0x200>
 800422e:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004232:	9b05      	ldr	r3, [sp, #20]
 8004234:	9a03      	ldr	r2, [sp, #12]
 8004236:	9906      	ldr	r1, [sp, #24]
 8004238:	428a      	cmp	r2, r1
 800423a:	bfac      	ite	ge
 800423c:	189b      	addge	r3, r3, r2
 800423e:	185b      	addlt	r3, r3, r1
 8004240:	9305      	str	r3, [sp, #20]
 8004242:	f1bb 0f00 	cmp.w	fp, #0
 8004246:	f040 82de 	bne.w	8004806 <_vfprintf_r+0xa96>
 800424a:	2300      	movs	r3, #0
 800424c:	9320      	str	r3, [sp, #128]	; 0x80
 800424e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004250:	e5cf      	b.n	8003df2 <_vfprintf_r+0x82>
 8004252:	4619      	mov	r1, r3
 8004254:	9802      	ldr	r0, [sp, #8]
 8004256:	781d      	ldrb	r5, [r3, #0]
 8004258:	f040 0004 	orr.w	r0, r0, #4
 800425c:	9002      	str	r0, [sp, #8]
 800425e:	e5f8      	b.n	8003e52 <_vfprintf_r+0xe2>
 8004260:	9304      	str	r3, [sp, #16]
 8004262:	9b02      	ldr	r3, [sp, #8]
 8004264:	f013 0320 	ands.w	r3, r3, #32
 8004268:	46b2      	mov	sl, r6
 800426a:	f000 8173 	beq.w	8004554 <_vfprintf_r+0x7e4>
 800426e:	9f08      	ldr	r7, [sp, #32]
 8004270:	3707      	adds	r7, #7
 8004272:	f027 0307 	bic.w	r3, r7, #7
 8004276:	f103 0208 	add.w	r2, r3, #8
 800427a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800427e:	9208      	str	r2, [sp, #32]
 8004280:	2300      	movs	r3, #0
 8004282:	e699      	b.n	8003fb8 <_vfprintf_r+0x248>
 8004284:	9a08      	ldr	r2, [sp, #32]
 8004286:	9304      	str	r3, [sp, #16]
 8004288:	6813      	ldr	r3, [r2, #0]
 800428a:	930a      	str	r3, [sp, #40]	; 0x28
 800428c:	f04f 0b00 	mov.w	fp, #0
 8004290:	f88d b05f 	strb.w	fp, [sp, #95]	; 0x5f
 8004294:	1d17      	adds	r7, r2, #4
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 865e 	beq.w	8004f58 <_vfprintf_r+0x11e8>
 800429c:	2e00      	cmp	r6, #0
 800429e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80042a0:	f2c0 8612 	blt.w	8004ec8 <_vfprintf_r+0x1158>
 80042a4:	4659      	mov	r1, fp
 80042a6:	4632      	mov	r2, r6
 80042a8:	f003 f8b8 	bl	800741c <memchr>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	f000 868f 	beq.w	8004fd0 <_vfprintf_r+0x1260>
 80042b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042b4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80042b8:	1ac3      	subs	r3, r0, r3
 80042ba:	9307      	str	r3, [sp, #28]
 80042bc:	9708      	str	r7, [sp, #32]
 80042be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80042c2:	9303      	str	r3, [sp, #12]
 80042c4:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80042c8:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80042cc:	e6ae      	b.n	800402c <_vfprintf_r+0x2bc>
 80042ce:	9304      	str	r3, [sp, #16]
 80042d0:	4b1b      	ldr	r3, [pc, #108]	; (8004340 <_vfprintf_r+0x5d0>)
 80042d2:	9310      	str	r3, [sp, #64]	; 0x40
 80042d4:	9b02      	ldr	r3, [sp, #8]
 80042d6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80042da:	0699      	lsls	r1, r3, #26
 80042dc:	46b2      	mov	sl, r6
 80042de:	f140 8155 	bpl.w	800458c <_vfprintf_r+0x81c>
 80042e2:	9f08      	ldr	r7, [sp, #32]
 80042e4:	3707      	adds	r7, #7
 80042e6:	f027 0307 	bic.w	r3, r7, #7
 80042ea:	e9d3 6700 	ldrd	r6, r7, [r3]
 80042ee:	f103 0208 	add.w	r2, r3, #8
 80042f2:	9208      	str	r2, [sp, #32]
 80042f4:	9b02      	ldr	r3, [sp, #8]
 80042f6:	07db      	lsls	r3, r3, #31
 80042f8:	f140 82e4 	bpl.w	80048c4 <_vfprintf_r+0xb54>
 80042fc:	ea56 0307 	orrs.w	r3, r6, r7
 8004300:	f000 82e0 	beq.w	80048c4 <_vfprintf_r+0xb54>
 8004304:	9a02      	ldr	r2, [sp, #8]
 8004306:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
 800430a:	2330      	movs	r3, #48	; 0x30
 800430c:	f042 0202 	orr.w	r2, r2, #2
 8004310:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8004314:	9202      	str	r2, [sp, #8]
 8004316:	2302      	movs	r3, #2
 8004318:	e64e      	b.n	8003fb8 <_vfprintf_r+0x248>
 800431a:	781d      	ldrb	r5, [r3, #0]
 800431c:	4619      	mov	r1, r3
 800431e:	2a00      	cmp	r2, #0
 8004320:	f47f ad97 	bne.w	8003e52 <_vfprintf_r+0xe2>
 8004324:	2220      	movs	r2, #32
 8004326:	e594      	b.n	8003e52 <_vfprintf_r+0xe2>
 8004328:	9902      	ldr	r1, [sp, #8]
 800432a:	f041 0120 	orr.w	r1, r1, #32
 800432e:	9102      	str	r1, [sp, #8]
 8004330:	781d      	ldrb	r5, [r3, #0]
 8004332:	4619      	mov	r1, r3
 8004334:	e58d      	b.n	8003e52 <_vfprintf_r+0xe2>
 8004336:	bf00      	nop
 8004338:	0800ad1c 	.word	0x0800ad1c
 800433c:	0800accc 	.word	0x0800accc
 8004340:	0800ad00 	.word	0x0800ad00
 8004344:	9304      	str	r3, [sp, #16]
 8004346:	9b02      	ldr	r3, [sp, #8]
 8004348:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800434c:	f043 0310 	orr.w	r3, r3, #16
 8004350:	9302      	str	r3, [sp, #8]
 8004352:	9b02      	ldr	r3, [sp, #8]
 8004354:	0698      	lsls	r0, r3, #26
 8004356:	46b2      	mov	sl, r6
 8004358:	f140 80a2 	bpl.w	80044a0 <_vfprintf_r+0x730>
 800435c:	9f08      	ldr	r7, [sp, #32]
 800435e:	3707      	adds	r7, #7
 8004360:	f027 0707 	bic.w	r7, r7, #7
 8004364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004368:	f107 0108 	add.w	r1, r7, #8
 800436c:	9108      	str	r1, [sp, #32]
 800436e:	4616      	mov	r6, r2
 8004370:	461f      	mov	r7, r3
 8004372:	2a00      	cmp	r2, #0
 8004374:	f173 0300 	sbcs.w	r3, r3, #0
 8004378:	f2c0 841c 	blt.w	8004bb4 <_vfprintf_r+0xe44>
 800437c:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8004380:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8004384:	2301      	movs	r3, #1
 8004386:	e61d      	b.n	8003fc4 <_vfprintf_r+0x254>
 8004388:	9304      	str	r3, [sp, #16]
 800438a:	9b02      	ldr	r3, [sp, #8]
 800438c:	9f08      	ldr	r7, [sp, #32]
 800438e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004392:	071b      	lsls	r3, r3, #28
 8004394:	46b2      	mov	sl, r6
 8004396:	46b3      	mov	fp, r6
 8004398:	f107 0707 	add.w	r7, r7, #7
 800439c:	f140 849b 	bpl.w	8004cd6 <_vfprintf_r+0xf66>
 80043a0:	f027 0307 	bic.w	r3, r7, #7
 80043a4:	ed93 7b00 	vldr	d7, [r3]
 80043a8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80043ac:	f103 0208 	add.w	r2, r3, #8
 80043b0:	9208      	str	r2, [sp, #32]
 80043b2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80043b6:	f003 ffa1 	bl	80082fc <__fpclassifyd>
 80043ba:	2801      	cmp	r0, #1
 80043bc:	f040 8408 	bne.w	8004bd0 <_vfprintf_r+0xe60>
 80043c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80043c4:	2200      	movs	r2, #0
 80043c6:	2300      	movs	r3, #0
 80043c8:	f005 ff42 	bl	800a250 <__aeabi_dcmplt>
 80043cc:	2800      	cmp	r0, #0
 80043ce:	f040 85ec 	bne.w	8004faa <_vfprintf_r+0x123a>
 80043d2:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80043d6:	9e02      	ldr	r6, [sp, #8]
 80043d8:	4a99      	ldr	r2, [pc, #612]	; (8004640 <_vfprintf_r+0x8d0>)
 80043da:	4b9a      	ldr	r3, [pc, #616]	; (8004644 <_vfprintf_r+0x8d4>)
 80043dc:	2103      	movs	r1, #3
 80043de:	2000      	movs	r0, #0
 80043e0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 80043e4:	2d47      	cmp	r5, #71	; 0x47
 80043e6:	bfd8      	it	le
 80043e8:	461a      	movle	r2, r3
 80043ea:	9103      	str	r1, [sp, #12]
 80043ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80043ee:	9602      	str	r6, [sp, #8]
 80043f0:	920a      	str	r2, [sp, #40]	; 0x28
 80043f2:	9107      	str	r1, [sp, #28]
 80043f4:	900c      	str	r0, [sp, #48]	; 0x30
 80043f6:	e619      	b.n	800402c <_vfprintf_r+0x2bc>
 80043f8:	9902      	ldr	r1, [sp, #8]
 80043fa:	f041 0108 	orr.w	r1, r1, #8
 80043fe:	9102      	str	r1, [sp, #8]
 8004400:	781d      	ldrb	r5, [r3, #0]
 8004402:	4619      	mov	r1, r3
 8004404:	e525      	b.n	8003e52 <_vfprintf_r+0xe2>
 8004406:	781d      	ldrb	r5, [r3, #0]
 8004408:	4619      	mov	r1, r3
 800440a:	222b      	movs	r2, #43	; 0x2b
 800440c:	e521      	b.n	8003e52 <_vfprintf_r+0xe2>
 800440e:	9902      	ldr	r1, [sp, #8]
 8004410:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004414:	9102      	str	r1, [sp, #8]
 8004416:	781d      	ldrb	r5, [r3, #0]
 8004418:	4619      	mov	r1, r3
 800441a:	e51a      	b.n	8003e52 <_vfprintf_r+0xe2>
 800441c:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8004420:	2100      	movs	r1, #0
 8004422:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004426:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800442a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800442e:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8004432:	2809      	cmp	r0, #9
 8004434:	d9f5      	bls.n	8004422 <_vfprintf_r+0x6b2>
 8004436:	9106      	str	r1, [sp, #24]
 8004438:	e50c      	b.n	8003e54 <_vfprintf_r+0xe4>
 800443a:	9908      	ldr	r1, [sp, #32]
 800443c:	9304      	str	r3, [sp, #16]
 800443e:	2330      	movs	r3, #48	; 0x30
 8004440:	9a02      	ldr	r2, [sp, #8]
 8004442:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8004446:	460b      	mov	r3, r1
 8004448:	3304      	adds	r3, #4
 800444a:	2578      	movs	r5, #120	; 0x78
 800444c:	f042 0202 	orr.w	r2, r2, #2
 8004450:	9308      	str	r3, [sp, #32]
 8004452:	4b7d      	ldr	r3, [pc, #500]	; (8004648 <_vfprintf_r+0x8d8>)
 8004454:	9310      	str	r3, [sp, #64]	; 0x40
 8004456:	46b2      	mov	sl, r6
 8004458:	9202      	str	r2, [sp, #8]
 800445a:	680e      	ldr	r6, [r1, #0]
 800445c:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
 8004460:	2700      	movs	r7, #0
 8004462:	2302      	movs	r3, #2
 8004464:	e5a8      	b.n	8003fb8 <_vfprintf_r+0x248>
 8004466:	9902      	ldr	r1, [sp, #8]
 8004468:	f041 0101 	orr.w	r1, r1, #1
 800446c:	9102      	str	r1, [sp, #8]
 800446e:	781d      	ldrb	r5, [r3, #0]
 8004470:	4619      	mov	r1, r3
 8004472:	e4ee      	b.n	8003e52 <_vfprintf_r+0xe2>
 8004474:	9d08      	ldr	r5, [sp, #32]
 8004476:	6829      	ldr	r1, [r5, #0]
 8004478:	9106      	str	r1, [sp, #24]
 800447a:	4608      	mov	r0, r1
 800447c:	2800      	cmp	r0, #0
 800447e:	4629      	mov	r1, r5
 8004480:	f101 0104 	add.w	r1, r1, #4
 8004484:	f2c0 84ee 	blt.w	8004e64 <_vfprintf_r+0x10f4>
 8004488:	9108      	str	r1, [sp, #32]
 800448a:	781d      	ldrb	r5, [r3, #0]
 800448c:	4619      	mov	r1, r3
 800448e:	e4e0      	b.n	8003e52 <_vfprintf_r+0xe2>
 8004490:	9304      	str	r3, [sp, #16]
 8004492:	9b02      	ldr	r3, [sp, #8]
 8004494:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004498:	0698      	lsls	r0, r3, #26
 800449a:	46b2      	mov	sl, r6
 800449c:	f53f af5e 	bmi.w	800435c <_vfprintf_r+0x5ec>
 80044a0:	9b02      	ldr	r3, [sp, #8]
 80044a2:	06d9      	lsls	r1, r3, #27
 80044a4:	f100 829b 	bmi.w	80049de <_vfprintf_r+0xc6e>
 80044a8:	9b02      	ldr	r3, [sp, #8]
 80044aa:	065a      	lsls	r2, r3, #25
 80044ac:	f140 8297 	bpl.w	80049de <_vfprintf_r+0xc6e>
 80044b0:	9908      	ldr	r1, [sp, #32]
 80044b2:	f9b1 6000 	ldrsh.w	r6, [r1]
 80044b6:	3104      	adds	r1, #4
 80044b8:	17f7      	asrs	r7, r6, #31
 80044ba:	4632      	mov	r2, r6
 80044bc:	463b      	mov	r3, r7
 80044be:	9108      	str	r1, [sp, #32]
 80044c0:	e757      	b.n	8004372 <_vfprintf_r+0x602>
 80044c2:	9902      	ldr	r1, [sp, #8]
 80044c4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80044c8:	9102      	str	r1, [sp, #8]
 80044ca:	781d      	ldrb	r5, [r3, #0]
 80044cc:	4619      	mov	r1, r3
 80044ce:	e4c0      	b.n	8003e52 <_vfprintf_r+0xe2>
 80044d0:	781d      	ldrb	r5, [r3, #0]
 80044d2:	9902      	ldr	r1, [sp, #8]
 80044d4:	2d6c      	cmp	r5, #108	; 0x6c
 80044d6:	f000 84be 	beq.w	8004e56 <_vfprintf_r+0x10e6>
 80044da:	f041 0110 	orr.w	r1, r1, #16
 80044de:	9102      	str	r1, [sp, #8]
 80044e0:	4619      	mov	r1, r3
 80044e2:	e4b6      	b.n	8003e52 <_vfprintf_r+0xe2>
 80044e4:	9304      	str	r3, [sp, #16]
 80044e6:	9b02      	ldr	r3, [sp, #8]
 80044e8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80044ec:	069a      	lsls	r2, r3, #26
 80044ee:	f140 83fd 	bpl.w	8004cec <_vfprintf_r+0xf7c>
 80044f2:	9a08      	ldr	r2, [sp, #32]
 80044f4:	9905      	ldr	r1, [sp, #20]
 80044f6:	6813      	ldr	r3, [r2, #0]
 80044f8:	17cf      	asrs	r7, r1, #31
 80044fa:	4608      	mov	r0, r1
 80044fc:	3204      	adds	r2, #4
 80044fe:	4639      	mov	r1, r7
 8004500:	9208      	str	r2, [sp, #32]
 8004502:	e9c3 0100 	strd	r0, r1, [r3]
 8004506:	e474      	b.n	8003df2 <_vfprintf_r+0x82>
 8004508:	781d      	ldrb	r5, [r3, #0]
 800450a:	2d2a      	cmp	r5, #42	; 0x2a
 800450c:	f103 0101 	add.w	r1, r3, #1
 8004510:	f000 862a 	beq.w	8005168 <_vfprintf_r+0x13f8>
 8004514:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8004518:	2809      	cmp	r0, #9
 800451a:	460b      	mov	r3, r1
 800451c:	f04f 0600 	mov.w	r6, #0
 8004520:	f63f ac98 	bhi.w	8003e54 <_vfprintf_r+0xe4>
 8004524:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004528:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800452c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8004530:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8004534:	2809      	cmp	r0, #9
 8004536:	d9f5      	bls.n	8004524 <_vfprintf_r+0x7b4>
 8004538:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 800453c:	e48a      	b.n	8003e54 <_vfprintf_r+0xe4>
 800453e:	9304      	str	r3, [sp, #16]
 8004540:	9b02      	ldr	r3, [sp, #8]
 8004542:	f043 0310 	orr.w	r3, r3, #16
 8004546:	9302      	str	r3, [sp, #8]
 8004548:	9b02      	ldr	r3, [sp, #8]
 800454a:	f013 0320 	ands.w	r3, r3, #32
 800454e:	46b2      	mov	sl, r6
 8004550:	f47f ae8d 	bne.w	800426e <_vfprintf_r+0x4fe>
 8004554:	9a02      	ldr	r2, [sp, #8]
 8004556:	f012 0210 	ands.w	r2, r2, #16
 800455a:	f040 8238 	bne.w	80049ce <_vfprintf_r+0xc5e>
 800455e:	9b02      	ldr	r3, [sp, #8]
 8004560:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8004564:	f000 8233 	beq.w	80049ce <_vfprintf_r+0xc5e>
 8004568:	9908      	ldr	r1, [sp, #32]
 800456a:	4613      	mov	r3, r2
 800456c:	460a      	mov	r2, r1
 800456e:	3204      	adds	r2, #4
 8004570:	880e      	ldrh	r6, [r1, #0]
 8004572:	9208      	str	r2, [sp, #32]
 8004574:	2700      	movs	r7, #0
 8004576:	e51f      	b.n	8003fb8 <_vfprintf_r+0x248>
 8004578:	9304      	str	r3, [sp, #16]
 800457a:	4b34      	ldr	r3, [pc, #208]	; (800464c <_vfprintf_r+0x8dc>)
 800457c:	9310      	str	r3, [sp, #64]	; 0x40
 800457e:	9b02      	ldr	r3, [sp, #8]
 8004580:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004584:	0699      	lsls	r1, r3, #26
 8004586:	46b2      	mov	sl, r6
 8004588:	f53f aeab 	bmi.w	80042e2 <_vfprintf_r+0x572>
 800458c:	9b02      	ldr	r3, [sp, #8]
 800458e:	06da      	lsls	r2, r3, #27
 8004590:	f140 83d1 	bpl.w	8004d36 <_vfprintf_r+0xfc6>
 8004594:	9a08      	ldr	r2, [sp, #32]
 8004596:	4613      	mov	r3, r2
 8004598:	3304      	adds	r3, #4
 800459a:	6816      	ldr	r6, [r2, #0]
 800459c:	9308      	str	r3, [sp, #32]
 800459e:	2700      	movs	r7, #0
 80045a0:	e6a8      	b.n	80042f4 <_vfprintf_r+0x584>
 80045a2:	9908      	ldr	r1, [sp, #32]
 80045a4:	9304      	str	r3, [sp, #16]
 80045a6:	680a      	ldr	r2, [r1, #0]
 80045a8:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 80045ac:	2300      	movs	r3, #0
 80045ae:	2201      	movs	r2, #1
 80045b0:	3104      	adds	r1, #4
 80045b2:	469c      	mov	ip, r3
 80045b4:	9203      	str	r2, [sp, #12]
 80045b6:	9108      	str	r1, [sp, #32]
 80045b8:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80045bc:	ab22      	add	r3, sp, #136	; 0x88
 80045be:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80045c2:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80045c6:	9207      	str	r2, [sp, #28]
 80045c8:	930a      	str	r3, [sp, #40]	; 0x28
 80045ca:	e535      	b.n	8004038 <_vfprintf_r+0x2c8>
 80045cc:	9304      	str	r3, [sp, #16]
 80045ce:	9b02      	ldr	r3, [sp, #8]
 80045d0:	f043 0310 	orr.w	r3, r3, #16
 80045d4:	9302      	str	r3, [sp, #8]
 80045d6:	9b02      	ldr	r3, [sp, #8]
 80045d8:	46b2      	mov	sl, r6
 80045da:	069e      	lsls	r6, r3, #26
 80045dc:	f53f ace2 	bmi.w	8003fa4 <_vfprintf_r+0x234>
 80045e0:	9b02      	ldr	r3, [sp, #8]
 80045e2:	06d8      	lsls	r0, r3, #27
 80045e4:	f140 8399 	bpl.w	8004d1a <_vfprintf_r+0xfaa>
 80045e8:	9a08      	ldr	r2, [sp, #32]
 80045ea:	4613      	mov	r3, r2
 80045ec:	3204      	adds	r2, #4
 80045ee:	681e      	ldr	r6, [r3, #0]
 80045f0:	9208      	str	r2, [sp, #32]
 80045f2:	2301      	movs	r3, #1
 80045f4:	2700      	movs	r7, #0
 80045f6:	e4df      	b.n	8003fb8 <_vfprintf_r+0x248>
 80045f8:	9304      	str	r3, [sp, #16]
 80045fa:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80045fe:	2d00      	cmp	r5, #0
 8004600:	f43f acaf 	beq.w	8003f62 <_vfprintf_r+0x1f2>
 8004604:	2300      	movs	r3, #0
 8004606:	2201      	movs	r2, #1
 8004608:	469c      	mov	ip, r3
 800460a:	9203      	str	r2, [sp, #12]
 800460c:	f88d 5088 	strb.w	r5, [sp, #136]	; 0x88
 8004610:	e7d2      	b.n	80045b8 <_vfprintf_r+0x848>
 8004612:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004616:	e55b      	b.n	80040d0 <_vfprintf_r+0x360>
 8004618:	2b01      	cmp	r3, #1
 800461a:	f47f ace5 	bne.w	8003fe8 <_vfprintf_r+0x278>
 800461e:	2f00      	cmp	r7, #0
 8004620:	bf08      	it	eq
 8004622:	2e0a      	cmpeq	r6, #10
 8004624:	f080 81ff 	bcs.w	8004a26 <_vfprintf_r+0xcb6>
 8004628:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 800462c:	3630      	adds	r6, #48	; 0x30
 800462e:	f80b 6d41 	strb.w	r6, [fp, #-65]!
 8004632:	ab2c      	add	r3, sp, #176	; 0xb0
 8004634:	ebcb 0303 	rsb	r3, fp, r3
 8004638:	9307      	str	r3, [sp, #28]
 800463a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800463e:	e4ed      	b.n	800401c <_vfprintf_r+0x2ac>
 8004640:	0800ace0 	.word	0x0800ace0
 8004644:	0800acdc 	.word	0x0800acdc
 8004648:	0800ad00 	.word	0x0800ad00
 800464c:	0800acec 	.word	0x0800acec
 8004650:	2d65      	cmp	r5, #101	; 0x65
 8004652:	f340 808a 	ble.w	800476a <_vfprintf_r+0x9fa>
 8004656:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800465a:	2200      	movs	r2, #0
 800465c:	2300      	movs	r3, #0
 800465e:	f005 fded 	bl	800a23c <__aeabi_dcmpeq>
 8004662:	2800      	cmp	r0, #0
 8004664:	f000 8131 	beq.w	80048ca <_vfprintf_r+0xb5a>
 8004668:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800466a:	4aae      	ldr	r2, [pc, #696]	; (8004924 <_vfprintf_r+0xbb4>)
 800466c:	6022      	str	r2, [r4, #0]
 800466e:	3301      	adds	r3, #1
 8004670:	f10b 0b01 	add.w	fp, fp, #1
 8004674:	2201      	movs	r2, #1
 8004676:	2b07      	cmp	r3, #7
 8004678:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800467c:	9320      	str	r3, [sp, #128]	; 0x80
 800467e:	6062      	str	r2, [r4, #4]
 8004680:	f300 8372 	bgt.w	8004d68 <_vfprintf_r+0xff8>
 8004684:	3408      	adds	r4, #8
 8004686:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004688:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800468a:	4293      	cmp	r3, r2
 800468c:	db03      	blt.n	8004696 <_vfprintf_r+0x926>
 800468e:	9b02      	ldr	r3, [sp, #8]
 8004690:	07df      	lsls	r7, r3, #31
 8004692:	f57f ad90 	bpl.w	80041b6 <_vfprintf_r+0x446>
 8004696:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004698:	9912      	ldr	r1, [sp, #72]	; 0x48
 800469a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800469c:	6022      	str	r2, [r4, #0]
 800469e:	3301      	adds	r3, #1
 80046a0:	448b      	add	fp, r1
 80046a2:	2b07      	cmp	r3, #7
 80046a4:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80046a8:	6061      	str	r1, [r4, #4]
 80046aa:	9320      	str	r3, [sp, #128]	; 0x80
 80046ac:	f300 83e1 	bgt.w	8004e72 <_vfprintf_r+0x1102>
 80046b0:	3408      	adds	r4, #8
 80046b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046b4:	1e5d      	subs	r5, r3, #1
 80046b6:	2d00      	cmp	r5, #0
 80046b8:	f77f ad7d 	ble.w	80041b6 <_vfprintf_r+0x446>
 80046bc:	2d10      	cmp	r5, #16
 80046be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80046c0:	4f99      	ldr	r7, [pc, #612]	; (8004928 <_vfprintf_r+0xbb8>)
 80046c2:	f340 8196 	ble.w	80049f2 <_vfprintf_r+0xc82>
 80046c6:	2610      	movs	r6, #16
 80046c8:	465a      	mov	r2, fp
 80046ca:	e004      	b.n	80046d6 <_vfprintf_r+0x966>
 80046cc:	3408      	adds	r4, #8
 80046ce:	3d10      	subs	r5, #16
 80046d0:	2d10      	cmp	r5, #16
 80046d2:	f340 818d 	ble.w	80049f0 <_vfprintf_r+0xc80>
 80046d6:	3301      	adds	r3, #1
 80046d8:	3210      	adds	r2, #16
 80046da:	2b07      	cmp	r3, #7
 80046dc:	9221      	str	r2, [sp, #132]	; 0x84
 80046de:	9320      	str	r3, [sp, #128]	; 0x80
 80046e0:	6027      	str	r7, [r4, #0]
 80046e2:	6066      	str	r6, [r4, #4]
 80046e4:	ddf2      	ble.n	80046cc <_vfprintf_r+0x95c>
 80046e6:	4640      	mov	r0, r8
 80046e8:	4649      	mov	r1, r9
 80046ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80046ec:	f004 f842 	bl	8008774 <__sprint_r>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	f47f ac3d 	bne.w	8003f70 <_vfprintf_r+0x200>
 80046f6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80046f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80046fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80046fc:	e7e7      	b.n	80046ce <_vfprintf_r+0x95e>
 80046fe:	9b06      	ldr	r3, [sp, #24]
 8004700:	9a03      	ldr	r2, [sp, #12]
 8004702:	1a9e      	subs	r6, r3, r2
 8004704:	2e00      	cmp	r6, #0
 8004706:	f77f ad0a 	ble.w	800411e <_vfprintf_r+0x3ae>
 800470a:	2e10      	cmp	r6, #16
 800470c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800470e:	4f86      	ldr	r7, [pc, #536]	; (8004928 <_vfprintf_r+0xbb8>)
 8004710:	dd1f      	ble.n	8004752 <_vfprintf_r+0x9e2>
 8004712:	f04f 0a10 	mov.w	sl, #16
 8004716:	465b      	mov	r3, fp
 8004718:	e004      	b.n	8004724 <_vfprintf_r+0x9b4>
 800471a:	3e10      	subs	r6, #16
 800471c:	2e10      	cmp	r6, #16
 800471e:	f104 0408 	add.w	r4, r4, #8
 8004722:	dd15      	ble.n	8004750 <_vfprintf_r+0x9e0>
 8004724:	3201      	adds	r2, #1
 8004726:	3310      	adds	r3, #16
 8004728:	2a07      	cmp	r2, #7
 800472a:	9321      	str	r3, [sp, #132]	; 0x84
 800472c:	9220      	str	r2, [sp, #128]	; 0x80
 800472e:	e884 0480 	stmia.w	r4, {r7, sl}
 8004732:	ddf2      	ble.n	800471a <_vfprintf_r+0x9aa>
 8004734:	4640      	mov	r0, r8
 8004736:	4649      	mov	r1, r9
 8004738:	aa1f      	add	r2, sp, #124	; 0x7c
 800473a:	f004 f81b 	bl	8008774 <__sprint_r>
 800473e:	2800      	cmp	r0, #0
 8004740:	f47f ac16 	bne.w	8003f70 <_vfprintf_r+0x200>
 8004744:	3e10      	subs	r6, #16
 8004746:	2e10      	cmp	r6, #16
 8004748:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800474a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800474c:	ac2c      	add	r4, sp, #176	; 0xb0
 800474e:	dce9      	bgt.n	8004724 <_vfprintf_r+0x9b4>
 8004750:	469b      	mov	fp, r3
 8004752:	3201      	adds	r2, #1
 8004754:	44b3      	add	fp, r6
 8004756:	2a07      	cmp	r2, #7
 8004758:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800475c:	9220      	str	r2, [sp, #128]	; 0x80
 800475e:	6027      	str	r7, [r4, #0]
 8004760:	6066      	str	r6, [r4, #4]
 8004762:	f300 821a 	bgt.w	8004b9a <_vfprintf_r+0xe2a>
 8004766:	3408      	adds	r4, #8
 8004768:	e4d9      	b.n	800411e <_vfprintf_r+0x3ae>
 800476a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800476c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800476e:	2b01      	cmp	r3, #1
 8004770:	f340 81d5 	ble.w	8004b1e <_vfprintf_r+0xdae>
 8004774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004776:	6023      	str	r3, [r4, #0]
 8004778:	3501      	adds	r5, #1
 800477a:	f10b 0601 	add.w	r6, fp, #1
 800477e:	2301      	movs	r3, #1
 8004780:	2d07      	cmp	r5, #7
 8004782:	9621      	str	r6, [sp, #132]	; 0x84
 8004784:	9520      	str	r5, [sp, #128]	; 0x80
 8004786:	6063      	str	r3, [r4, #4]
 8004788:	f300 81e5 	bgt.w	8004b56 <_vfprintf_r+0xde6>
 800478c:	3408      	adds	r4, #8
 800478e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004790:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004792:	6023      	str	r3, [r4, #0]
 8004794:	3501      	adds	r5, #1
 8004796:	4416      	add	r6, r2
 8004798:	2d07      	cmp	r5, #7
 800479a:	9621      	str	r6, [sp, #132]	; 0x84
 800479c:	9520      	str	r5, [sp, #128]	; 0x80
 800479e:	6062      	str	r2, [r4, #4]
 80047a0:	f300 81ef 	bgt.w	8004b82 <_vfprintf_r+0xe12>
 80047a4:	3408      	adds	r4, #8
 80047a6:	2300      	movs	r3, #0
 80047a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80047ac:	2200      	movs	r2, #0
 80047ae:	f005 fd45 	bl	800a23c <__aeabi_dcmpeq>
 80047b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047b4:	2800      	cmp	r0, #0
 80047b6:	f040 80e1 	bne.w	800497c <_vfprintf_r+0xc0c>
 80047ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047bc:	3b01      	subs	r3, #1
 80047be:	3501      	adds	r5, #1
 80047c0:	3201      	adds	r2, #1
 80047c2:	441e      	add	r6, r3
 80047c4:	2d07      	cmp	r5, #7
 80047c6:	9520      	str	r5, [sp, #128]	; 0x80
 80047c8:	9621      	str	r6, [sp, #132]	; 0x84
 80047ca:	6022      	str	r2, [r4, #0]
 80047cc:	6063      	str	r3, [r4, #4]
 80047ce:	f300 81b6 	bgt.w	8004b3e <_vfprintf_r+0xdce>
 80047d2:	3408      	adds	r4, #8
 80047d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80047d6:	6062      	str	r2, [r4, #4]
 80047d8:	3501      	adds	r5, #1
 80047da:	eb06 0b02 	add.w	fp, r6, r2
 80047de:	ab1b      	add	r3, sp, #108	; 0x6c
 80047e0:	2d07      	cmp	r5, #7
 80047e2:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80047e6:	9520      	str	r5, [sp, #128]	; 0x80
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	f77f ace3 	ble.w	80041b4 <_vfprintf_r+0x444>
 80047ee:	4640      	mov	r0, r8
 80047f0:	4649      	mov	r1, r9
 80047f2:	aa1f      	add	r2, sp, #124	; 0x7c
 80047f4:	f003 ffbe 	bl	8008774 <__sprint_r>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	f47f abb9 	bne.w	8003f70 <_vfprintf_r+0x200>
 80047fe:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004802:	ac2c      	add	r4, sp, #176	; 0xb0
 8004804:	e4d7      	b.n	80041b6 <_vfprintf_r+0x446>
 8004806:	4640      	mov	r0, r8
 8004808:	4649      	mov	r1, r9
 800480a:	aa1f      	add	r2, sp, #124	; 0x7c
 800480c:	f003 ffb2 	bl	8008774 <__sprint_r>
 8004810:	2800      	cmp	r0, #0
 8004812:	f43f ad1a 	beq.w	800424a <_vfprintf_r+0x4da>
 8004816:	f7ff bbab 	b.w	8003f70 <_vfprintf_r+0x200>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d133      	bne.n	8004886 <_vfprintf_r+0xb16>
 800481e:	9b02      	ldr	r3, [sp, #8]
 8004820:	07da      	lsls	r2, r3, #31
 8004822:	d530      	bpl.n	8004886 <_vfprintf_r+0xb16>
 8004824:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 8004828:	2330      	movs	r3, #48	; 0x30
 800482a:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 800482e:	ab2c      	add	r3, sp, #176	; 0xb0
 8004830:	ebcb 0303 	rsb	r3, fp, r3
 8004834:	9307      	str	r3, [sp, #28]
 8004836:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800483a:	f7ff bbef 	b.w	800401c <_vfprintf_r+0x2ac>
 800483e:	4640      	mov	r0, r8
 8004840:	4649      	mov	r1, r9
 8004842:	aa1f      	add	r2, sp, #124	; 0x7c
 8004844:	f003 ff96 	bl	8008774 <__sprint_r>
 8004848:	2800      	cmp	r0, #0
 800484a:	f47f ab91 	bne.w	8003f70 <_vfprintf_r+0x200>
 800484e:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004852:	ac2c      	add	r4, sp, #176	; 0xb0
 8004854:	e49d      	b.n	8004192 <_vfprintf_r+0x422>
 8004856:	4640      	mov	r0, r8
 8004858:	4649      	mov	r1, r9
 800485a:	aa1f      	add	r2, sp, #124	; 0x7c
 800485c:	f003 ff8a 	bl	8008774 <__sprint_r>
 8004860:	2800      	cmp	r0, #0
 8004862:	f47f ab85 	bne.w	8003f70 <_vfprintf_r+0x200>
 8004866:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800486a:	ac2c      	add	r4, sp, #176	; 0xb0
 800486c:	e443      	b.n	80040f6 <_vfprintf_r+0x386>
 800486e:	4640      	mov	r0, r8
 8004870:	4649      	mov	r1, r9
 8004872:	aa1f      	add	r2, sp, #124	; 0x7c
 8004874:	f003 ff7e 	bl	8008774 <__sprint_r>
 8004878:	2800      	cmp	r0, #0
 800487a:	f47f ab79 	bne.w	8003f70 <_vfprintf_r+0x200>
 800487e:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004882:	ac2c      	add	r4, sp, #176	; 0xb0
 8004884:	e448      	b.n	8004118 <_vfprintf_r+0x3a8>
 8004886:	ab2c      	add	r3, sp, #176	; 0xb0
 8004888:	f8cd a01c 	str.w	sl, [sp, #28]
 800488c:	930a      	str	r3, [sp, #40]	; 0x28
 800488e:	f7ff bbc5 	b.w	800401c <_vfprintf_r+0x2ac>
 8004892:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004894:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
 8004898:	0933      	lsrs	r3, r6, #4
 800489a:	f006 010f 	and.w	r1, r6, #15
 800489e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80048a2:	093a      	lsrs	r2, r7, #4
 80048a4:	461e      	mov	r6, r3
 80048a6:	4617      	mov	r7, r2
 80048a8:	5c43      	ldrb	r3, [r0, r1]
 80048aa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 80048ae:	ea56 0307 	orrs.w	r3, r6, r7
 80048b2:	d1f1      	bne.n	8004898 <_vfprintf_r+0xb28>
 80048b4:	465a      	mov	r2, fp
 80048b6:	ab2c      	add	r3, sp, #176	; 0xb0
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80048be:	9307      	str	r3, [sp, #28]
 80048c0:	f7ff bbac 	b.w	800401c <_vfprintf_r+0x2ac>
 80048c4:	2302      	movs	r3, #2
 80048c6:	f7ff bb77 	b.w	8003fb8 <_vfprintf_r+0x248>
 80048ca:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80048cc:	2d00      	cmp	r5, #0
 80048ce:	f340 8257 	ble.w	8004d80 <_vfprintf_r+0x1010>
 80048d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80048d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048d6:	428a      	cmp	r2, r1
 80048d8:	4613      	mov	r3, r2
 80048da:	bfa8      	it	ge
 80048dc:	460b      	movge	r3, r1
 80048de:	461d      	mov	r5, r3
 80048e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80048e2:	2d00      	cmp	r5, #0
 80048e4:	eb01 0a02 	add.w	sl, r1, r2
 80048e8:	dd0b      	ble.n	8004902 <_vfprintf_r+0xb92>
 80048ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80048ec:	6021      	str	r1, [r4, #0]
 80048ee:	3301      	adds	r3, #1
 80048f0:	44ab      	add	fp, r5
 80048f2:	2b07      	cmp	r3, #7
 80048f4:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80048f8:	6065      	str	r5, [r4, #4]
 80048fa:	9320      	str	r3, [sp, #128]	; 0x80
 80048fc:	f300 8309 	bgt.w	8004f12 <_vfprintf_r+0x11a2>
 8004900:	3408      	adds	r4, #8
 8004902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004904:	2d00      	cmp	r5, #0
 8004906:	bfa8      	it	ge
 8004908:	1b5b      	subge	r3, r3, r5
 800490a:	2b00      	cmp	r3, #0
 800490c:	461d      	mov	r5, r3
 800490e:	f340 80b0 	ble.w	8004a72 <_vfprintf_r+0xd02>
 8004912:	2d10      	cmp	r5, #16
 8004914:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004916:	4f04      	ldr	r7, [pc, #16]	; (8004928 <_vfprintf_r+0xbb8>)
 8004918:	f340 821a 	ble.w	8004d50 <_vfprintf_r+0xfe0>
 800491c:	2610      	movs	r6, #16
 800491e:	465a      	mov	r2, fp
 8004920:	e009      	b.n	8004936 <_vfprintf_r+0xbc6>
 8004922:	bf00      	nop
 8004924:	0800abdc 	.word	0x0800abdc
 8004928:	0800accc 	.word	0x0800accc
 800492c:	3408      	adds	r4, #8
 800492e:	3d10      	subs	r5, #16
 8004930:	2d10      	cmp	r5, #16
 8004932:	f340 820c 	ble.w	8004d4e <_vfprintf_r+0xfde>
 8004936:	3301      	adds	r3, #1
 8004938:	3210      	adds	r2, #16
 800493a:	2b07      	cmp	r3, #7
 800493c:	9221      	str	r2, [sp, #132]	; 0x84
 800493e:	9320      	str	r3, [sp, #128]	; 0x80
 8004940:	6027      	str	r7, [r4, #0]
 8004942:	6066      	str	r6, [r4, #4]
 8004944:	ddf2      	ble.n	800492c <_vfprintf_r+0xbbc>
 8004946:	4640      	mov	r0, r8
 8004948:	4649      	mov	r1, r9
 800494a:	aa1f      	add	r2, sp, #124	; 0x7c
 800494c:	f003 ff12 	bl	8008774 <__sprint_r>
 8004950:	2800      	cmp	r0, #0
 8004952:	f47f ab0d 	bne.w	8003f70 <_vfprintf_r+0x200>
 8004956:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004958:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800495a:	ac2c      	add	r4, sp, #176	; 0xb0
 800495c:	e7e7      	b.n	800492e <_vfprintf_r+0xbbe>
 800495e:	4640      	mov	r0, r8
 8004960:	4649      	mov	r1, r9
 8004962:	aa1f      	add	r2, sp, #124	; 0x7c
 8004964:	f003 ff06 	bl	8008774 <__sprint_r>
 8004968:	2800      	cmp	r0, #0
 800496a:	f47f ab01 	bne.w	8003f70 <_vfprintf_r+0x200>
 800496e:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8004972:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004976:	ac2c      	add	r4, sp, #176	; 0xb0
 8004978:	f7ff bbaa 	b.w	80040d0 <_vfprintf_r+0x360>
 800497c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8004980:	f1ba 0f00 	cmp.w	sl, #0
 8004984:	f77f af26 	ble.w	80047d4 <_vfprintf_r+0xa64>
 8004988:	f1ba 0f10 	cmp.w	sl, #16
 800498c:	4f8f      	ldr	r7, [pc, #572]	; (8004bcc <_vfprintf_r+0xe5c>)
 800498e:	bfc8      	it	gt
 8004990:	f04f 0b10 	movgt.w	fp, #16
 8004994:	dc07      	bgt.n	80049a6 <_vfprintf_r+0xc36>
 8004996:	e0ea      	b.n	8004b6e <_vfprintf_r+0xdfe>
 8004998:	3408      	adds	r4, #8
 800499a:	f1aa 0a10 	sub.w	sl, sl, #16
 800499e:	f1ba 0f10 	cmp.w	sl, #16
 80049a2:	f340 80e4 	ble.w	8004b6e <_vfprintf_r+0xdfe>
 80049a6:	3501      	adds	r5, #1
 80049a8:	3610      	adds	r6, #16
 80049aa:	2d07      	cmp	r5, #7
 80049ac:	9621      	str	r6, [sp, #132]	; 0x84
 80049ae:	9520      	str	r5, [sp, #128]	; 0x80
 80049b0:	e884 0880 	stmia.w	r4, {r7, fp}
 80049b4:	ddf0      	ble.n	8004998 <_vfprintf_r+0xc28>
 80049b6:	4640      	mov	r0, r8
 80049b8:	4649      	mov	r1, r9
 80049ba:	aa1f      	add	r2, sp, #124	; 0x7c
 80049bc:	f003 feda 	bl	8008774 <__sprint_r>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	f47f aad5 	bne.w	8003f70 <_vfprintf_r+0x200>
 80049c6:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80049c8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80049ca:	ac2c      	add	r4, sp, #176	; 0xb0
 80049cc:	e7e5      	b.n	800499a <_vfprintf_r+0xc2a>
 80049ce:	9908      	ldr	r1, [sp, #32]
 80049d0:	460a      	mov	r2, r1
 80049d2:	3204      	adds	r2, #4
 80049d4:	680e      	ldr	r6, [r1, #0]
 80049d6:	9208      	str	r2, [sp, #32]
 80049d8:	2700      	movs	r7, #0
 80049da:	f7ff baed 	b.w	8003fb8 <_vfprintf_r+0x248>
 80049de:	9a08      	ldr	r2, [sp, #32]
 80049e0:	6816      	ldr	r6, [r2, #0]
 80049e2:	4613      	mov	r3, r2
 80049e4:	3304      	adds	r3, #4
 80049e6:	17f7      	asrs	r7, r6, #31
 80049e8:	9308      	str	r3, [sp, #32]
 80049ea:	4632      	mov	r2, r6
 80049ec:	463b      	mov	r3, r7
 80049ee:	e4c0      	b.n	8004372 <_vfprintf_r+0x602>
 80049f0:	4693      	mov	fp, r2
 80049f2:	3301      	adds	r3, #1
 80049f4:	44ab      	add	fp, r5
 80049f6:	2b07      	cmp	r3, #7
 80049f8:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80049fc:	9320      	str	r3, [sp, #128]	; 0x80
 80049fe:	6027      	str	r7, [r4, #0]
 8004a00:	6065      	str	r5, [r4, #4]
 8004a02:	f77f abd7 	ble.w	80041b4 <_vfprintf_r+0x444>
 8004a06:	e6f2      	b.n	80047ee <_vfprintf_r+0xa7e>
 8004a08:	2b30      	cmp	r3, #48	; 0x30
 8004a0a:	f000 823e 	beq.w	8004e8a <_vfprintf_r+0x111a>
 8004a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a10:	3b01      	subs	r3, #1
 8004a12:	461a      	mov	r2, r3
 8004a14:	a82c      	add	r0, sp, #176	; 0xb0
 8004a16:	930a      	str	r3, [sp, #40]	; 0x28
 8004a18:	1a82      	subs	r2, r0, r2
 8004a1a:	2330      	movs	r3, #48	; 0x30
 8004a1c:	9207      	str	r2, [sp, #28]
 8004a1e:	f801 3c01 	strb.w	r3, [r1, #-1]
 8004a22:	f7ff bafb 	b.w	800401c <_vfprintf_r+0x2ac>
 8004a26:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
 8004a2a:	f8cd c00c 	str.w	ip, [sp, #12]
 8004a2e:	4630      	mov	r0, r6
 8004a30:	4639      	mov	r1, r7
 8004a32:	220a      	movs	r2, #10
 8004a34:	2300      	movs	r3, #0
 8004a36:	f005 fc5b 	bl	800a2f0 <__aeabi_uldivmod>
 8004a3a:	3230      	adds	r2, #48	; 0x30
 8004a3c:	4630      	mov	r0, r6
 8004a3e:	4639      	mov	r1, r7
 8004a40:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8004a44:	2300      	movs	r3, #0
 8004a46:	220a      	movs	r2, #10
 8004a48:	f005 fc52 	bl	800a2f0 <__aeabi_uldivmod>
 8004a4c:	4606      	mov	r6, r0
 8004a4e:	460f      	mov	r7, r1
 8004a50:	ea56 0307 	orrs.w	r3, r6, r7
 8004a54:	d1eb      	bne.n	8004a2e <_vfprintf_r+0xcbe>
 8004a56:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004a5a:	e72b      	b.n	80048b4 <_vfprintf_r+0xb44>
 8004a5c:	4640      	mov	r0, r8
 8004a5e:	4649      	mov	r1, r9
 8004a60:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a62:	f003 fe87 	bl	8008774 <__sprint_r>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	f47f aa82 	bne.w	8003f70 <_vfprintf_r+0x200>
 8004a6c:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004a70:	ac2c      	add	r4, sp, #176	; 0xb0
 8004a72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a74:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a78:	440a      	add	r2, r1
 8004a7a:	4616      	mov	r6, r2
 8004a7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	db3e      	blt.n	8004b00 <_vfprintf_r+0xd90>
 8004a82:	9a02      	ldr	r2, [sp, #8]
 8004a84:	07d5      	lsls	r5, r2, #31
 8004a86:	d43b      	bmi.n	8004b00 <_vfprintf_r+0xd90>
 8004a88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004a8a:	ebc6 050a 	rsb	r5, r6, sl
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	429d      	cmp	r5, r3
 8004a92:	bfa8      	it	ge
 8004a94:	461d      	movge	r5, r3
 8004a96:	2d00      	cmp	r5, #0
 8004a98:	462f      	mov	r7, r5
 8004a9a:	dd0b      	ble.n	8004ab4 <_vfprintf_r+0xd44>
 8004a9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004a9e:	6026      	str	r6, [r4, #0]
 8004aa0:	3201      	adds	r2, #1
 8004aa2:	44ab      	add	fp, r5
 8004aa4:	2a07      	cmp	r2, #7
 8004aa6:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004aaa:	6065      	str	r5, [r4, #4]
 8004aac:	9220      	str	r2, [sp, #128]	; 0x80
 8004aae:	f300 8266 	bgt.w	8004f7e <_vfprintf_r+0x120e>
 8004ab2:	3408      	adds	r4, #8
 8004ab4:	2f00      	cmp	r7, #0
 8004ab6:	bfac      	ite	ge
 8004ab8:	1bdd      	subge	r5, r3, r7
 8004aba:	461d      	movlt	r5, r3
 8004abc:	2d00      	cmp	r5, #0
 8004abe:	f77f ab7a 	ble.w	80041b6 <_vfprintf_r+0x446>
 8004ac2:	2d10      	cmp	r5, #16
 8004ac4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004ac6:	4f41      	ldr	r7, [pc, #260]	; (8004bcc <_vfprintf_r+0xe5c>)
 8004ac8:	dd93      	ble.n	80049f2 <_vfprintf_r+0xc82>
 8004aca:	2610      	movs	r6, #16
 8004acc:	465a      	mov	r2, fp
 8004ace:	e003      	b.n	8004ad8 <_vfprintf_r+0xd68>
 8004ad0:	3408      	adds	r4, #8
 8004ad2:	3d10      	subs	r5, #16
 8004ad4:	2d10      	cmp	r5, #16
 8004ad6:	dd8b      	ble.n	80049f0 <_vfprintf_r+0xc80>
 8004ad8:	3301      	adds	r3, #1
 8004ada:	3210      	adds	r2, #16
 8004adc:	2b07      	cmp	r3, #7
 8004ade:	9221      	str	r2, [sp, #132]	; 0x84
 8004ae0:	9320      	str	r3, [sp, #128]	; 0x80
 8004ae2:	6027      	str	r7, [r4, #0]
 8004ae4:	6066      	str	r6, [r4, #4]
 8004ae6:	ddf3      	ble.n	8004ad0 <_vfprintf_r+0xd60>
 8004ae8:	4640      	mov	r0, r8
 8004aea:	4649      	mov	r1, r9
 8004aec:	aa1f      	add	r2, sp, #124	; 0x7c
 8004aee:	f003 fe41 	bl	8008774 <__sprint_r>
 8004af2:	2800      	cmp	r0, #0
 8004af4:	f47f aa3c 	bne.w	8003f70 <_vfprintf_r+0x200>
 8004af8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004afa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004afc:	ac2c      	add	r4, sp, #176	; 0xb0
 8004afe:	e7e8      	b.n	8004ad2 <_vfprintf_r+0xd62>
 8004b00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b02:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004b04:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004b06:	6021      	str	r1, [r4, #0]
 8004b08:	3201      	adds	r2, #1
 8004b0a:	4483      	add	fp, r0
 8004b0c:	2a07      	cmp	r2, #7
 8004b0e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004b12:	6060      	str	r0, [r4, #4]
 8004b14:	9220      	str	r2, [sp, #128]	; 0x80
 8004b16:	f300 8208 	bgt.w	8004f2a <_vfprintf_r+0x11ba>
 8004b1a:	3408      	adds	r4, #8
 8004b1c:	e7b4      	b.n	8004a88 <_vfprintf_r+0xd18>
 8004b1e:	9b02      	ldr	r3, [sp, #8]
 8004b20:	07d8      	lsls	r0, r3, #31
 8004b22:	f53f ae27 	bmi.w	8004774 <_vfprintf_r+0xa04>
 8004b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	3501      	adds	r5, #1
 8004b2c:	f10b 0601 	add.w	r6, fp, #1
 8004b30:	2301      	movs	r3, #1
 8004b32:	2d07      	cmp	r5, #7
 8004b34:	9621      	str	r6, [sp, #132]	; 0x84
 8004b36:	9520      	str	r5, [sp, #128]	; 0x80
 8004b38:	6063      	str	r3, [r4, #4]
 8004b3a:	f77f ae4a 	ble.w	80047d2 <_vfprintf_r+0xa62>
 8004b3e:	4640      	mov	r0, r8
 8004b40:	4649      	mov	r1, r9
 8004b42:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b44:	f003 fe16 	bl	8008774 <__sprint_r>
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	f47f aa11 	bne.w	8003f70 <_vfprintf_r+0x200>
 8004b4e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8004b50:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004b52:	ac2c      	add	r4, sp, #176	; 0xb0
 8004b54:	e63e      	b.n	80047d4 <_vfprintf_r+0xa64>
 8004b56:	4640      	mov	r0, r8
 8004b58:	4649      	mov	r1, r9
 8004b5a:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b5c:	f003 fe0a 	bl	8008774 <__sprint_r>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	f47f aa05 	bne.w	8003f70 <_vfprintf_r+0x200>
 8004b66:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8004b68:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004b6a:	ac2c      	add	r4, sp, #176	; 0xb0
 8004b6c:	e60f      	b.n	800478e <_vfprintf_r+0xa1e>
 8004b6e:	3501      	adds	r5, #1
 8004b70:	4456      	add	r6, sl
 8004b72:	2d07      	cmp	r5, #7
 8004b74:	9621      	str	r6, [sp, #132]	; 0x84
 8004b76:	9520      	str	r5, [sp, #128]	; 0x80
 8004b78:	e884 0480 	stmia.w	r4, {r7, sl}
 8004b7c:	f77f ae29 	ble.w	80047d2 <_vfprintf_r+0xa62>
 8004b80:	e7dd      	b.n	8004b3e <_vfprintf_r+0xdce>
 8004b82:	4640      	mov	r0, r8
 8004b84:	4649      	mov	r1, r9
 8004b86:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b88:	f003 fdf4 	bl	8008774 <__sprint_r>
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	f47f a9ef 	bne.w	8003f70 <_vfprintf_r+0x200>
 8004b92:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8004b94:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004b96:	ac2c      	add	r4, sp, #176	; 0xb0
 8004b98:	e605      	b.n	80047a6 <_vfprintf_r+0xa36>
 8004b9a:	4640      	mov	r0, r8
 8004b9c:	4649      	mov	r1, r9
 8004b9e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004ba0:	f003 fde8 	bl	8008774 <__sprint_r>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	f47f a9e3 	bne.w	8003f70 <_vfprintf_r+0x200>
 8004baa:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004bae:	ac2c      	add	r4, sp, #176	; 0xb0
 8004bb0:	f7ff bab5 	b.w	800411e <_vfprintf_r+0x3ae>
 8004bb4:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8004bb8:	4276      	negs	r6, r6
 8004bba:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004bbe:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 8004bc2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f7ff b9fc 	b.w	8003fc4 <_vfprintf_r+0x254>
 8004bcc:	0800accc 	.word	0x0800accc
 8004bd0:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8004bd4:	f003 fb92 	bl	80082fc <__fpclassifyd>
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	f000 8116 	beq.w	8004e0a <_vfprintf_r+0x109a>
 8004bde:	f025 0320 	bic.w	r3, r5, #32
 8004be2:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8004be6:	9303      	str	r3, [sp, #12]
 8004be8:	f000 8260 	beq.w	80050ac <_vfprintf_r+0x133c>
 8004bec:	2b47      	cmp	r3, #71	; 0x47
 8004bee:	d105      	bne.n	8004bfc <_vfprintf_r+0xe8c>
 8004bf0:	f1ba 0f00 	cmp.w	sl, #0
 8004bf4:	bf14      	ite	ne
 8004bf6:	46d3      	movne	fp, sl
 8004bf8:	f04f 0b01 	moveq.w	fp, #1
 8004bfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bfe:	9a02      	ldr	r2, [sp, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c06:	9209      	str	r2, [sp, #36]	; 0x24
 8004c08:	f2c0 8260 	blt.w	80050cc <_vfprintf_r+0x135c>
 8004c0c:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8004c10:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004c14:	f04f 0a00 	mov.w	sl, #0
 8004c18:	2d66      	cmp	r5, #102	; 0x66
 8004c1a:	f000 815e 	beq.w	8004eda <_vfprintf_r+0x116a>
 8004c1e:	2d46      	cmp	r5, #70	; 0x46
 8004c20:	f000 815b 	beq.w	8004eda <_vfprintf_r+0x116a>
 8004c24:	9b03      	ldr	r3, [sp, #12]
 8004c26:	2b45      	cmp	r3, #69	; 0x45
 8004c28:	bf0c      	ite	eq
 8004c2a:	f10b 0701 	addeq.w	r7, fp, #1
 8004c2e:	465f      	movne	r7, fp
 8004c30:	aa1a      	add	r2, sp, #104	; 0x68
 8004c32:	ab1d      	add	r3, sp, #116	; 0x74
 8004c34:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004c38:	4640      	mov	r0, r8
 8004c3a:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8004c3e:	2102      	movs	r1, #2
 8004c40:	463a      	mov	r2, r7
 8004c42:	ab19      	add	r3, sp, #100	; 0x64
 8004c44:	f000 fc60 	bl	8005508 <_dtoa_r>
 8004c48:	2d67      	cmp	r5, #103	; 0x67
 8004c4a:	900a      	str	r0, [sp, #40]	; 0x28
 8004c4c:	d002      	beq.n	8004c54 <_vfprintf_r+0xee4>
 8004c4e:	2d47      	cmp	r5, #71	; 0x47
 8004c50:	f040 8151 	bne.w	8004ef6 <_vfprintf_r+0x1186>
 8004c54:	9b02      	ldr	r3, [sp, #8]
 8004c56:	07db      	lsls	r3, r3, #31
 8004c58:	f140 8241 	bpl.w	80050de <_vfprintf_r+0x136e>
 8004c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c5e:	19de      	adds	r6, r3, r7
 8004c60:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004c64:	2200      	movs	r2, #0
 8004c66:	2300      	movs	r3, #0
 8004c68:	f005 fae8 	bl	800a23c <__aeabi_dcmpeq>
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	f040 81ad 	bne.w	8004fcc <_vfprintf_r+0x125c>
 8004c72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c74:	429e      	cmp	r6, r3
 8004c76:	d906      	bls.n	8004c86 <_vfprintf_r+0xf16>
 8004c78:	2130      	movs	r1, #48	; 0x30
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	921d      	str	r2, [sp, #116]	; 0x74
 8004c7e:	7019      	strb	r1, [r3, #0]
 8004c80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c82:	429e      	cmp	r6, r3
 8004c84:	d8f9      	bhi.n	8004c7a <_vfprintf_r+0xf0a>
 8004c86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c88:	1a9b      	subs	r3, r3, r2
 8004c8a:	930d      	str	r3, [sp, #52]	; 0x34
 8004c8c:	9b03      	ldr	r3, [sp, #12]
 8004c8e:	2b47      	cmp	r3, #71	; 0x47
 8004c90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c92:	f000 8183 	beq.w	8004f9c <_vfprintf_r+0x122c>
 8004c96:	2d65      	cmp	r5, #101	; 0x65
 8004c98:	f340 81a6 	ble.w	8004fe8 <_vfprintf_r+0x1278>
 8004c9c:	2d66      	cmp	r5, #102	; 0x66
 8004c9e:	930c      	str	r3, [sp, #48]	; 0x30
 8004ca0:	f000 821f 	beq.w	80050e2 <_vfprintf_r+0x1372>
 8004ca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ca6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	f300 8202 	bgt.w	80050b2 <_vfprintf_r+0x1342>
 8004cae:	9b02      	ldr	r3, [sp, #8]
 8004cb0:	07d9      	lsls	r1, r3, #31
 8004cb2:	f100 8239 	bmi.w	8005128 <_vfprintf_r+0x13b8>
 8004cb6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004cba:	9207      	str	r2, [sp, #28]
 8004cbc:	f1ba 0f00 	cmp.w	sl, #0
 8004cc0:	f040 8179 	bne.w	8004fb6 <_vfprintf_r+0x1246>
 8004cc4:	9303      	str	r3, [sp, #12]
 8004cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc8:	9302      	str	r3, [sp, #8]
 8004cca:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8004cce:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8004cd2:	f7ff b9ab 	b.w	800402c <_vfprintf_r+0x2bc>
 8004cd6:	f027 0707 	bic.w	r7, r7, #7
 8004cda:	ed97 7b00 	vldr	d7, [r7]
 8004cde:	f107 0308 	add.w	r3, r7, #8
 8004ce2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004ce6:	9308      	str	r3, [sp, #32]
 8004ce8:	f7ff bb63 	b.w	80043b2 <_vfprintf_r+0x642>
 8004cec:	9b02      	ldr	r3, [sp, #8]
 8004cee:	06db      	lsls	r3, r3, #27
 8004cf0:	d40b      	bmi.n	8004d0a <_vfprintf_r+0xf9a>
 8004cf2:	9b02      	ldr	r3, [sp, #8]
 8004cf4:	065f      	lsls	r7, r3, #25
 8004cf6:	d508      	bpl.n	8004d0a <_vfprintf_r+0xf9a>
 8004cf8:	9a08      	ldr	r2, [sp, #32]
 8004cfa:	6813      	ldr	r3, [r2, #0]
 8004cfc:	3204      	adds	r2, #4
 8004cfe:	9208      	str	r2, [sp, #32]
 8004d00:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8004d04:	801a      	strh	r2, [r3, #0]
 8004d06:	f7ff b874 	b.w	8003df2 <_vfprintf_r+0x82>
 8004d0a:	9a08      	ldr	r2, [sp, #32]
 8004d0c:	6813      	ldr	r3, [r2, #0]
 8004d0e:	3204      	adds	r2, #4
 8004d10:	9208      	str	r2, [sp, #32]
 8004d12:	9a05      	ldr	r2, [sp, #20]
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	f7ff b86c 	b.w	8003df2 <_vfprintf_r+0x82>
 8004d1a:	9b02      	ldr	r3, [sp, #8]
 8004d1c:	9a08      	ldr	r2, [sp, #32]
 8004d1e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d22:	4613      	mov	r3, r2
 8004d24:	f43f ac62 	beq.w	80045ec <_vfprintf_r+0x87c>
 8004d28:	8816      	ldrh	r6, [r2, #0]
 8004d2a:	3204      	adds	r2, #4
 8004d2c:	2700      	movs	r7, #0
 8004d2e:	2301      	movs	r3, #1
 8004d30:	9208      	str	r2, [sp, #32]
 8004d32:	f7ff b941 	b.w	8003fb8 <_vfprintf_r+0x248>
 8004d36:	9b02      	ldr	r3, [sp, #8]
 8004d38:	9a08      	ldr	r2, [sp, #32]
 8004d3a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d3e:	4613      	mov	r3, r2
 8004d40:	d076      	beq.n	8004e30 <_vfprintf_r+0x10c0>
 8004d42:	3304      	adds	r3, #4
 8004d44:	8816      	ldrh	r6, [r2, #0]
 8004d46:	9308      	str	r3, [sp, #32]
 8004d48:	2700      	movs	r7, #0
 8004d4a:	f7ff bad3 	b.w	80042f4 <_vfprintf_r+0x584>
 8004d4e:	4693      	mov	fp, r2
 8004d50:	3301      	adds	r3, #1
 8004d52:	44ab      	add	fp, r5
 8004d54:	2b07      	cmp	r3, #7
 8004d56:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004d5a:	9320      	str	r3, [sp, #128]	; 0x80
 8004d5c:	6027      	str	r7, [r4, #0]
 8004d5e:	6065      	str	r5, [r4, #4]
 8004d60:	f73f ae7c 	bgt.w	8004a5c <_vfprintf_r+0xcec>
 8004d64:	3408      	adds	r4, #8
 8004d66:	e684      	b.n	8004a72 <_vfprintf_r+0xd02>
 8004d68:	4640      	mov	r0, r8
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d6e:	f003 fd01 	bl	8008774 <__sprint_r>
 8004d72:	2800      	cmp	r0, #0
 8004d74:	f47f a8fc 	bne.w	8003f70 <_vfprintf_r+0x200>
 8004d78:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004d7c:	ac2c      	add	r4, sp, #176	; 0xb0
 8004d7e:	e482      	b.n	8004686 <_vfprintf_r+0x916>
 8004d80:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004d82:	4ab0      	ldr	r2, [pc, #704]	; (8005044 <_vfprintf_r+0x12d4>)
 8004d84:	6022      	str	r2, [r4, #0]
 8004d86:	3301      	adds	r3, #1
 8004d88:	f10b 0b01 	add.w	fp, fp, #1
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	2b07      	cmp	r3, #7
 8004d90:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004d94:	9320      	str	r3, [sp, #128]	; 0x80
 8004d96:	6062      	str	r2, [r4, #4]
 8004d98:	dc50      	bgt.n	8004e3c <_vfprintf_r+0x10cc>
 8004d9a:	3408      	adds	r4, #8
 8004d9c:	b92d      	cbnz	r5, 8004daa <_vfprintf_r+0x103a>
 8004d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004da0:	b91b      	cbnz	r3, 8004daa <_vfprintf_r+0x103a>
 8004da2:	9b02      	ldr	r3, [sp, #8]
 8004da4:	07de      	lsls	r6, r3, #31
 8004da6:	f57f aa06 	bpl.w	80041b6 <_vfprintf_r+0x446>
 8004daa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004dac:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004dae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004db0:	6022      	str	r2, [r4, #0]
 8004db2:	3301      	adds	r3, #1
 8004db4:	eb0b 0201 	add.w	r2, fp, r1
 8004db8:	2b07      	cmp	r3, #7
 8004dba:	9221      	str	r2, [sp, #132]	; 0x84
 8004dbc:	6061      	str	r1, [r4, #4]
 8004dbe:	9320      	str	r3, [sp, #128]	; 0x80
 8004dc0:	f300 8167 	bgt.w	8005092 <_vfprintf_r+0x1322>
 8004dc4:	3408      	adds	r4, #8
 8004dc6:	426d      	negs	r5, r5
 8004dc8:	2d00      	cmp	r5, #0
 8004dca:	dd6f      	ble.n	8004eac <_vfprintf_r+0x113c>
 8004dcc:	2d10      	cmp	r5, #16
 8004dce:	4f9e      	ldr	r7, [pc, #632]	; (8005048 <_vfprintf_r+0x12d8>)
 8004dd0:	bfc8      	it	gt
 8004dd2:	2610      	movgt	r6, #16
 8004dd4:	dc05      	bgt.n	8004de2 <_vfprintf_r+0x1072>
 8004dd6:	e0b5      	b.n	8004f44 <_vfprintf_r+0x11d4>
 8004dd8:	3408      	adds	r4, #8
 8004dda:	3d10      	subs	r5, #16
 8004ddc:	2d10      	cmp	r5, #16
 8004dde:	f340 80b1 	ble.w	8004f44 <_vfprintf_r+0x11d4>
 8004de2:	3301      	adds	r3, #1
 8004de4:	3210      	adds	r2, #16
 8004de6:	2b07      	cmp	r3, #7
 8004de8:	9221      	str	r2, [sp, #132]	; 0x84
 8004dea:	9320      	str	r3, [sp, #128]	; 0x80
 8004dec:	6027      	str	r7, [r4, #0]
 8004dee:	6066      	str	r6, [r4, #4]
 8004df0:	ddf2      	ble.n	8004dd8 <_vfprintf_r+0x1068>
 8004df2:	4640      	mov	r0, r8
 8004df4:	4649      	mov	r1, r9
 8004df6:	aa1f      	add	r2, sp, #124	; 0x7c
 8004df8:	f003 fcbc 	bl	8008774 <__sprint_r>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	f47f a8b7 	bne.w	8003f70 <_vfprintf_r+0x200>
 8004e02:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004e04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004e06:	ac2c      	add	r4, sp, #176	; 0xb0
 8004e08:	e7e7      	b.n	8004dda <_vfprintf_r+0x106a>
 8004e0a:	9e02      	ldr	r6, [sp, #8]
 8004e0c:	4a8f      	ldr	r2, [pc, #572]	; (800504c <_vfprintf_r+0x12dc>)
 8004e0e:	4b90      	ldr	r3, [pc, #576]	; (8005050 <_vfprintf_r+0x12e0>)
 8004e10:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8004e14:	900b      	str	r0, [sp, #44]	; 0x2c
 8004e16:	2103      	movs	r1, #3
 8004e18:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8004e1c:	2d47      	cmp	r5, #71	; 0x47
 8004e1e:	bfd8      	it	le
 8004e20:	461a      	movle	r2, r3
 8004e22:	9103      	str	r1, [sp, #12]
 8004e24:	9602      	str	r6, [sp, #8]
 8004e26:	900c      	str	r0, [sp, #48]	; 0x30
 8004e28:	920a      	str	r2, [sp, #40]	; 0x28
 8004e2a:	9107      	str	r1, [sp, #28]
 8004e2c:	f7ff b8fe 	b.w	800402c <_vfprintf_r+0x2bc>
 8004e30:	3304      	adds	r3, #4
 8004e32:	6816      	ldr	r6, [r2, #0]
 8004e34:	9308      	str	r3, [sp, #32]
 8004e36:	2700      	movs	r7, #0
 8004e38:	f7ff ba5c 	b.w	80042f4 <_vfprintf_r+0x584>
 8004e3c:	4640      	mov	r0, r8
 8004e3e:	4649      	mov	r1, r9
 8004e40:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e42:	f003 fc97 	bl	8008774 <__sprint_r>
 8004e46:	2800      	cmp	r0, #0
 8004e48:	f47f a892 	bne.w	8003f70 <_vfprintf_r+0x200>
 8004e4c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004e4e:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004e52:	ac2c      	add	r4, sp, #176	; 0xb0
 8004e54:	e7a2      	b.n	8004d9c <_vfprintf_r+0x102c>
 8004e56:	f041 0120 	orr.w	r1, r1, #32
 8004e5a:	9102      	str	r1, [sp, #8]
 8004e5c:	785d      	ldrb	r5, [r3, #1]
 8004e5e:	1c59      	adds	r1, r3, #1
 8004e60:	f7fe bff7 	b.w	8003e52 <_vfprintf_r+0xe2>
 8004e64:	9806      	ldr	r0, [sp, #24]
 8004e66:	9108      	str	r1, [sp, #32]
 8004e68:	4240      	negs	r0, r0
 8004e6a:	9006      	str	r0, [sp, #24]
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	f7ff b9f1 	b.w	8004254 <_vfprintf_r+0x4e4>
 8004e72:	4640      	mov	r0, r8
 8004e74:	4649      	mov	r1, r9
 8004e76:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e78:	f003 fc7c 	bl	8008774 <__sprint_r>
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	f47f a877 	bne.w	8003f70 <_vfprintf_r+0x200>
 8004e82:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004e86:	ac2c      	add	r4, sp, #176	; 0xb0
 8004e88:	e413      	b.n	80046b2 <_vfprintf_r+0x942>
 8004e8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e8c:	ab2c      	add	r3, sp, #176	; 0xb0
 8004e8e:	1a9b      	subs	r3, r3, r2
 8004e90:	9307      	str	r3, [sp, #28]
 8004e92:	f7ff b8c3 	b.w	800401c <_vfprintf_r+0x2ac>
 8004e96:	4640      	mov	r0, r8
 8004e98:	4649      	mov	r1, r9
 8004e9a:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e9c:	f003 fc6a 	bl	8008774 <__sprint_r>
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	f47f a865 	bne.w	8003f70 <_vfprintf_r+0x200>
 8004ea6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004ea8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004eaa:	ac2c      	add	r4, sp, #176	; 0xb0
 8004eac:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004eae:	6060      	str	r0, [r4, #4]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	eb02 0b00 	add.w	fp, r2, r0
 8004eb6:	2b07      	cmp	r3, #7
 8004eb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004eba:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004ebe:	9320      	str	r3, [sp, #128]	; 0x80
 8004ec0:	6022      	str	r2, [r4, #0]
 8004ec2:	f77f a977 	ble.w	80041b4 <_vfprintf_r+0x444>
 8004ec6:	e492      	b.n	80047ee <_vfprintf_r+0xa7e>
 8004ec8:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004ecc:	f7fe ff20 	bl	8003d10 <strlen>
 8004ed0:	9708      	str	r7, [sp, #32]
 8004ed2:	9007      	str	r0, [sp, #28]
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f7ff b9f2 	b.w	80042be <_vfprintf_r+0x54e>
 8004eda:	aa1a      	add	r2, sp, #104	; 0x68
 8004edc:	ab1d      	add	r3, sp, #116	; 0x74
 8004ede:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004ee2:	4640      	mov	r0, r8
 8004ee4:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8004ee8:	2103      	movs	r1, #3
 8004eea:	465a      	mov	r2, fp
 8004eec:	ab19      	add	r3, sp, #100	; 0x64
 8004eee:	f000 fb0b 	bl	8005508 <_dtoa_r>
 8004ef2:	465f      	mov	r7, fp
 8004ef4:	900a      	str	r0, [sp, #40]	; 0x28
 8004ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ef8:	19de      	adds	r6, r3, r7
 8004efa:	9b03      	ldr	r3, [sp, #12]
 8004efc:	2b46      	cmp	r3, #70	; 0x46
 8004efe:	f47f aeaf 	bne.w	8004c60 <_vfprintf_r+0xef0>
 8004f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b30      	cmp	r3, #48	; 0x30
 8004f08:	f000 8100 	beq.w	800510c <_vfprintf_r+0x139c>
 8004f0c:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8004f0e:	443e      	add	r6, r7
 8004f10:	e6a6      	b.n	8004c60 <_vfprintf_r+0xef0>
 8004f12:	4640      	mov	r0, r8
 8004f14:	4649      	mov	r1, r9
 8004f16:	aa1f      	add	r2, sp, #124	; 0x7c
 8004f18:	f003 fc2c 	bl	8008774 <__sprint_r>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	f47f a827 	bne.w	8003f70 <_vfprintf_r+0x200>
 8004f22:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004f26:	ac2c      	add	r4, sp, #176	; 0xb0
 8004f28:	e4eb      	b.n	8004902 <_vfprintf_r+0xb92>
 8004f2a:	4640      	mov	r0, r8
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004f30:	f003 fc20 	bl	8008774 <__sprint_r>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	f47f a81b 	bne.w	8003f70 <_vfprintf_r+0x200>
 8004f3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f3c:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004f40:	ac2c      	add	r4, sp, #176	; 0xb0
 8004f42:	e5a1      	b.n	8004a88 <_vfprintf_r+0xd18>
 8004f44:	3301      	adds	r3, #1
 8004f46:	442a      	add	r2, r5
 8004f48:	2b07      	cmp	r3, #7
 8004f4a:	9221      	str	r2, [sp, #132]	; 0x84
 8004f4c:	9320      	str	r3, [sp, #128]	; 0x80
 8004f4e:	6027      	str	r7, [r4, #0]
 8004f50:	6065      	str	r5, [r4, #4]
 8004f52:	dca0      	bgt.n	8004e96 <_vfprintf_r+0x1126>
 8004f54:	3408      	adds	r4, #8
 8004f56:	e7a9      	b.n	8004eac <_vfprintf_r+0x113c>
 8004f58:	2e06      	cmp	r6, #6
 8004f5a:	4633      	mov	r3, r6
 8004f5c:	bf28      	it	cs
 8004f5e:	2306      	movcs	r3, #6
 8004f60:	9307      	str	r3, [sp, #28]
 8004f62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004f66:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8004f6a:	9303      	str	r3, [sp, #12]
 8004f6c:	4b39      	ldr	r3, [pc, #228]	; (8005054 <_vfprintf_r+0x12e4>)
 8004f6e:	9708      	str	r7, [sp, #32]
 8004f70:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8004f74:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8004f78:	930a      	str	r3, [sp, #40]	; 0x28
 8004f7a:	f7ff b857 	b.w	800402c <_vfprintf_r+0x2bc>
 8004f7e:	4640      	mov	r0, r8
 8004f80:	4649      	mov	r1, r9
 8004f82:	aa1f      	add	r2, sp, #124	; 0x7c
 8004f84:	f003 fbf6 	bl	8008774 <__sprint_r>
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	f47e aff1 	bne.w	8003f70 <_vfprintf_r+0x200>
 8004f8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f92:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	ac2c      	add	r4, sp, #176	; 0xb0
 8004f9a:	e58b      	b.n	8004ab4 <_vfprintf_r+0xd44>
 8004f9c:	1cdf      	adds	r7, r3, #3
 8004f9e:	db22      	blt.n	8004fe6 <_vfprintf_r+0x1276>
 8004fa0:	459b      	cmp	fp, r3
 8004fa2:	db20      	blt.n	8004fe6 <_vfprintf_r+0x1276>
 8004fa4:	930c      	str	r3, [sp, #48]	; 0x30
 8004fa6:	2567      	movs	r5, #103	; 0x67
 8004fa8:	e67c      	b.n	8004ca4 <_vfprintf_r+0xf34>
 8004faa:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8004fae:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 8004fb2:	f7ff ba10 	b.w	80043d6 <_vfprintf_r+0x666>
 8004fb6:	9303      	str	r3, [sp, #12]
 8004fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fba:	9302      	str	r3, [sp, #8]
 8004fbc:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 8004fc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fc8:	f7ff b833 	b.w	8004032 <_vfprintf_r+0x2c2>
 8004fcc:	4633      	mov	r3, r6
 8004fce:	e65a      	b.n	8004c86 <_vfprintf_r+0xf16>
 8004fd0:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8004fd4:	900b      	str	r0, [sp, #44]	; 0x2c
 8004fd6:	9708      	str	r7, [sp, #32]
 8004fd8:	900c      	str	r0, [sp, #48]	; 0x30
 8004fda:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8004fde:	9303      	str	r3, [sp, #12]
 8004fe0:	9607      	str	r6, [sp, #28]
 8004fe2:	f7ff b823 	b.w	800402c <_vfprintf_r+0x2bc>
 8004fe6:	3d02      	subs	r5, #2
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	9319      	str	r3, [sp, #100]	; 0x64
 8004fee:	bfba      	itte	lt
 8004ff0:	425b      	neglt	r3, r3
 8004ff2:	222d      	movlt	r2, #45	; 0x2d
 8004ff4:	222b      	movge	r2, #43	; 0x2b
 8004ff6:	2b09      	cmp	r3, #9
 8004ff8:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
 8004ffc:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8005000:	f340 8098 	ble.w	8005134 <_vfprintf_r+0x13c4>
 8005004:	f10d 067b 	add.w	r6, sp, #123	; 0x7b
 8005008:	4630      	mov	r0, r6
 800500a:	4a13      	ldr	r2, [pc, #76]	; (8005058 <_vfprintf_r+0x12e8>)
 800500c:	fb82 2103 	smull	r2, r1, r2, r3
 8005010:	17da      	asrs	r2, r3, #31
 8005012:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8005016:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800501a:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800501e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005022:	2a09      	cmp	r2, #9
 8005024:	4613      	mov	r3, r2
 8005026:	f800 1d01 	strb.w	r1, [r0, #-1]!
 800502a:	dcee      	bgt.n	800500a <_vfprintf_r+0x129a>
 800502c:	4602      	mov	r2, r0
 800502e:	3330      	adds	r3, #48	; 0x30
 8005030:	b2d9      	uxtb	r1, r3
 8005032:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8005036:	4296      	cmp	r6, r2
 8005038:	f240 80a9 	bls.w	800518e <_vfprintf_r+0x141e>
 800503c:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8005040:	4603      	mov	r3, r0
 8005042:	e00d      	b.n	8005060 <_vfprintf_r+0x12f0>
 8005044:	0800abdc 	.word	0x0800abdc
 8005048:	0800accc 	.word	0x0800accc
 800504c:	0800ace8 	.word	0x0800ace8
 8005050:	0800ace4 	.word	0x0800ace4
 8005054:	0800ad14 	.word	0x0800ad14
 8005058:	66666667 	.word	0x66666667
 800505c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005060:	f802 1b01 	strb.w	r1, [r2], #1
 8005064:	42b3      	cmp	r3, r6
 8005066:	d1f9      	bne.n	800505c <_vfprintf_r+0x12ec>
 8005068:	ab1f      	add	r3, sp, #124	; 0x7c
 800506a:	1a1b      	subs	r3, r3, r0
 800506c:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8005070:	4413      	add	r3, r2
 8005072:	aa1b      	add	r2, sp, #108	; 0x6c
 8005074:	1a9b      	subs	r3, r3, r2
 8005076:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005078:	9313      	str	r3, [sp, #76]	; 0x4c
 800507a:	2a01      	cmp	r2, #1
 800507c:	4413      	add	r3, r2
 800507e:	9307      	str	r3, [sp, #28]
 8005080:	dd69      	ble.n	8005156 <_vfprintf_r+0x13e6>
 8005082:	9b07      	ldr	r3, [sp, #28]
 8005084:	2200      	movs	r2, #0
 8005086:	3301      	adds	r3, #1
 8005088:	9307      	str	r3, [sp, #28]
 800508a:	920c      	str	r2, [sp, #48]	; 0x30
 800508c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005090:	e614      	b.n	8004cbc <_vfprintf_r+0xf4c>
 8005092:	4640      	mov	r0, r8
 8005094:	4649      	mov	r1, r9
 8005096:	aa1f      	add	r2, sp, #124	; 0x7c
 8005098:	f003 fb6c 	bl	8008774 <__sprint_r>
 800509c:	2800      	cmp	r0, #0
 800509e:	f47e af67 	bne.w	8003f70 <_vfprintf_r+0x200>
 80050a2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80050a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80050a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80050a8:	ac2c      	add	r4, sp, #176	; 0xb0
 80050aa:	e68c      	b.n	8004dc6 <_vfprintf_r+0x1056>
 80050ac:	f04f 0b06 	mov.w	fp, #6
 80050b0:	e5a4      	b.n	8004bfc <_vfprintf_r+0xe8c>
 80050b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	bfd8      	it	le
 80050b8:	f1c3 0602 	rsble	r6, r3, #2
 80050bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050be:	bfc8      	it	gt
 80050c0:	2601      	movgt	r6, #1
 80050c2:	18f3      	adds	r3, r6, r3
 80050c4:	9307      	str	r3, [sp, #28]
 80050c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80050ca:	e5f7      	b.n	8004cbc <_vfprintf_r+0xf4c>
 80050cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80050d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050d4:	9014      	str	r0, [sp, #80]	; 0x50
 80050d6:	9315      	str	r3, [sp, #84]	; 0x54
 80050d8:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 80050dc:	e59c      	b.n	8004c18 <_vfprintf_r+0xea8>
 80050de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80050e0:	e5d1      	b.n	8004c86 <_vfprintf_r+0xf16>
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	dd2e      	ble.n	8005144 <_vfprintf_r+0x13d4>
 80050e6:	f1bb 0f00 	cmp.w	fp, #0
 80050ea:	d107      	bne.n	80050fc <_vfprintf_r+0x138c>
 80050ec:	9b02      	ldr	r3, [sp, #8]
 80050ee:	07de      	lsls	r6, r3, #31
 80050f0:	d404      	bmi.n	80050fc <_vfprintf_r+0x138c>
 80050f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050f4:	9207      	str	r2, [sp, #28]
 80050f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80050fa:	e5df      	b.n	8004cbc <_vfprintf_r+0xf4c>
 80050fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050fe:	f10b 0601 	add.w	r6, fp, #1
 8005102:	4433      	add	r3, r6
 8005104:	9307      	str	r3, [sp, #28]
 8005106:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800510a:	e5d7      	b.n	8004cbc <_vfprintf_r+0xf4c>
 800510c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8005110:	2200      	movs	r2, #0
 8005112:	2300      	movs	r3, #0
 8005114:	f005 f892 	bl	800a23c <__aeabi_dcmpeq>
 8005118:	2800      	cmp	r0, #0
 800511a:	f47f aef7 	bne.w	8004f0c <_vfprintf_r+0x119c>
 800511e:	f1c7 0701 	rsb	r7, r7, #1
 8005122:	9719      	str	r7, [sp, #100]	; 0x64
 8005124:	443e      	add	r6, r7
 8005126:	e59b      	b.n	8004c60 <_vfprintf_r+0xef0>
 8005128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800512a:	3301      	adds	r3, #1
 800512c:	9307      	str	r3, [sp, #28]
 800512e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005132:	e5c3      	b.n	8004cbc <_vfprintf_r+0xf4c>
 8005134:	3330      	adds	r3, #48	; 0x30
 8005136:	2230      	movs	r2, #48	; 0x30
 8005138:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800513c:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8005140:	ab1c      	add	r3, sp, #112	; 0x70
 8005142:	e796      	b.n	8005072 <_vfprintf_r+0x1302>
 8005144:	f1bb 0f00 	cmp.w	fp, #0
 8005148:	d11b      	bne.n	8005182 <_vfprintf_r+0x1412>
 800514a:	9b02      	ldr	r3, [sp, #8]
 800514c:	07d8      	lsls	r0, r3, #31
 800514e:	d418      	bmi.n	8005182 <_vfprintf_r+0x1412>
 8005150:	2301      	movs	r3, #1
 8005152:	9307      	str	r3, [sp, #28]
 8005154:	e5b2      	b.n	8004cbc <_vfprintf_r+0xf4c>
 8005156:	9b02      	ldr	r3, [sp, #8]
 8005158:	f013 0301 	ands.w	r3, r3, #1
 800515c:	d191      	bne.n	8005082 <_vfprintf_r+0x1312>
 800515e:	930c      	str	r3, [sp, #48]	; 0x30
 8005160:	9b07      	ldr	r3, [sp, #28]
 8005162:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005166:	e5a9      	b.n	8004cbc <_vfprintf_r+0xf4c>
 8005168:	9d08      	ldr	r5, [sp, #32]
 800516a:	682e      	ldr	r6, [r5, #0]
 800516c:	4628      	mov	r0, r5
 800516e:	3004      	adds	r0, #4
 8005170:	2e00      	cmp	r6, #0
 8005172:	785d      	ldrb	r5, [r3, #1]
 8005174:	9008      	str	r0, [sp, #32]
 8005176:	f6be ae6c 	bge.w	8003e52 <_vfprintf_r+0xe2>
 800517a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800517e:	f7fe be68 	b.w	8003e52 <_vfprintf_r+0xe2>
 8005182:	f10b 0302 	add.w	r3, fp, #2
 8005186:	9307      	str	r3, [sp, #28]
 8005188:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800518c:	e596      	b.n	8004cbc <_vfprintf_r+0xf4c>
 800518e:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8005192:	e76e      	b.n	8005072 <_vfprintf_r+0x1302>

08005194 <vfprintf>:
 8005194:	b430      	push	{r4, r5}
 8005196:	4c04      	ldr	r4, [pc, #16]	; (80051a8 <vfprintf+0x14>)
 8005198:	460d      	mov	r5, r1
 800519a:	4613      	mov	r3, r2
 800519c:	4601      	mov	r1, r0
 800519e:	462a      	mov	r2, r5
 80051a0:	6820      	ldr	r0, [r4, #0]
 80051a2:	bc30      	pop	{r4, r5}
 80051a4:	f7fe bde4 	b.w	8003d70 <_vfprintf_r>
 80051a8:	200004a8 	.word	0x200004a8

080051ac <__sbprintf>:
 80051ac:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 80051b0:	460c      	mov	r4, r1
 80051b2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 80051b6:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 80051ba:	69e7      	ldr	r7, [r4, #28]
 80051bc:	6e49      	ldr	r1, [r1, #100]	; 0x64
 80051be:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 80051c2:	9119      	str	r1, [sp, #100]	; 0x64
 80051c4:	ad1a      	add	r5, sp, #104	; 0x68
 80051c6:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80051ca:	f02e 0e02 	bic.w	lr, lr, #2
 80051ce:	f04f 0c00 	mov.w	ip, #0
 80051d2:	9707      	str	r7, [sp, #28]
 80051d4:	4669      	mov	r1, sp
 80051d6:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80051d8:	9500      	str	r5, [sp, #0]
 80051da:	9504      	str	r5, [sp, #16]
 80051dc:	9602      	str	r6, [sp, #8]
 80051de:	9605      	str	r6, [sp, #20]
 80051e0:	f8ad e00c 	strh.w	lr, [sp, #12]
 80051e4:	f8ad 900e 	strh.w	r9, [sp, #14]
 80051e8:	9709      	str	r7, [sp, #36]	; 0x24
 80051ea:	f8cd c018 	str.w	ip, [sp, #24]
 80051ee:	4606      	mov	r6, r0
 80051f0:	f7fe fdbe 	bl	8003d70 <_vfprintf_r>
 80051f4:	1e05      	subs	r5, r0, #0
 80051f6:	db07      	blt.n	8005208 <__sbprintf+0x5c>
 80051f8:	4630      	mov	r0, r6
 80051fa:	4669      	mov	r1, sp
 80051fc:	f001 f980 	bl	8006500 <_fflush_r>
 8005200:	2800      	cmp	r0, #0
 8005202:	bf18      	it	ne
 8005204:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8005208:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800520c:	065b      	lsls	r3, r3, #25
 800520e:	d503      	bpl.n	8005218 <__sbprintf+0x6c>
 8005210:	89a3      	ldrh	r3, [r4, #12]
 8005212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005216:	81a3      	strh	r3, [r4, #12]
 8005218:	4628      	mov	r0, r5
 800521a:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 800521e:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8005222:	bf00      	nop

08005224 <__swsetup_r>:
 8005224:	b538      	push	{r3, r4, r5, lr}
 8005226:	4b2f      	ldr	r3, [pc, #188]	; (80052e4 <__swsetup_r+0xc0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4605      	mov	r5, r0
 800522c:	460c      	mov	r4, r1
 800522e:	b113      	cbz	r3, 8005236 <__swsetup_r+0x12>
 8005230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005232:	2a00      	cmp	r2, #0
 8005234:	d036      	beq.n	80052a4 <__swsetup_r+0x80>
 8005236:	89a2      	ldrh	r2, [r4, #12]
 8005238:	b293      	uxth	r3, r2
 800523a:	0718      	lsls	r0, r3, #28
 800523c:	d50c      	bpl.n	8005258 <__swsetup_r+0x34>
 800523e:	6920      	ldr	r0, [r4, #16]
 8005240:	b1a8      	cbz	r0, 800526e <__swsetup_r+0x4a>
 8005242:	f013 0201 	ands.w	r2, r3, #1
 8005246:	d01e      	beq.n	8005286 <__swsetup_r+0x62>
 8005248:	6963      	ldr	r3, [r4, #20]
 800524a:	2200      	movs	r2, #0
 800524c:	425b      	negs	r3, r3
 800524e:	61a3      	str	r3, [r4, #24]
 8005250:	60a2      	str	r2, [r4, #8]
 8005252:	b1f0      	cbz	r0, 8005292 <__swsetup_r+0x6e>
 8005254:	2000      	movs	r0, #0
 8005256:	bd38      	pop	{r3, r4, r5, pc}
 8005258:	06d9      	lsls	r1, r3, #27
 800525a:	d53b      	bpl.n	80052d4 <__swsetup_r+0xb0>
 800525c:	0758      	lsls	r0, r3, #29
 800525e:	d425      	bmi.n	80052ac <__swsetup_r+0x88>
 8005260:	6920      	ldr	r0, [r4, #16]
 8005262:	f042 0308 	orr.w	r3, r2, #8
 8005266:	81a3      	strh	r3, [r4, #12]
 8005268:	b29b      	uxth	r3, r3
 800526a:	2800      	cmp	r0, #0
 800526c:	d1e9      	bne.n	8005242 <__swsetup_r+0x1e>
 800526e:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8005272:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005276:	d0e4      	beq.n	8005242 <__swsetup_r+0x1e>
 8005278:	4628      	mov	r0, r5
 800527a:	4621      	mov	r1, r4
 800527c:	f001 fdcc 	bl	8006e18 <__smakebuf_r>
 8005280:	89a3      	ldrh	r3, [r4, #12]
 8005282:	6920      	ldr	r0, [r4, #16]
 8005284:	e7dd      	b.n	8005242 <__swsetup_r+0x1e>
 8005286:	0799      	lsls	r1, r3, #30
 8005288:	bf58      	it	pl
 800528a:	6962      	ldrpl	r2, [r4, #20]
 800528c:	60a2      	str	r2, [r4, #8]
 800528e:	2800      	cmp	r0, #0
 8005290:	d1e0      	bne.n	8005254 <__swsetup_r+0x30>
 8005292:	89a3      	ldrh	r3, [r4, #12]
 8005294:	061a      	lsls	r2, r3, #24
 8005296:	d5de      	bpl.n	8005256 <__swsetup_r+0x32>
 8005298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800529c:	81a3      	strh	r3, [r4, #12]
 800529e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	4618      	mov	r0, r3
 80052a6:	f001 fa3b 	bl	8006720 <__sinit>
 80052aa:	e7c4      	b.n	8005236 <__swsetup_r+0x12>
 80052ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80052ae:	b149      	cbz	r1, 80052c4 <__swsetup_r+0xa0>
 80052b0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80052b4:	4299      	cmp	r1, r3
 80052b6:	d003      	beq.n	80052c0 <__swsetup_r+0x9c>
 80052b8:	4628      	mov	r0, r5
 80052ba:	f001 fab7 	bl	800682c <_free_r>
 80052be:	89a2      	ldrh	r2, [r4, #12]
 80052c0:	2300      	movs	r3, #0
 80052c2:	6323      	str	r3, [r4, #48]	; 0x30
 80052c4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 80052c8:	2300      	movs	r3, #0
 80052ca:	6920      	ldr	r0, [r4, #16]
 80052cc:	6063      	str	r3, [r4, #4]
 80052ce:	b292      	uxth	r2, r2
 80052d0:	6020      	str	r0, [r4, #0]
 80052d2:	e7c6      	b.n	8005262 <__swsetup_r+0x3e>
 80052d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052d8:	2309      	movs	r3, #9
 80052da:	602b      	str	r3, [r5, #0]
 80052dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052e0:	81a2      	strh	r2, [r4, #12]
 80052e2:	bd38      	pop	{r3, r4, r5, pc}
 80052e4:	200004a8 	.word	0x200004a8

080052e8 <register_fini>:
 80052e8:	4b02      	ldr	r3, [pc, #8]	; (80052f4 <register_fini+0xc>)
 80052ea:	b113      	cbz	r3, 80052f2 <register_fini+0xa>
 80052ec:	4802      	ldr	r0, [pc, #8]	; (80052f8 <register_fini+0x10>)
 80052ee:	f000 b86f 	b.w	80053d0 <atexit>
 80052f2:	4770      	bx	lr
 80052f4:	00000000 	.word	0x00000000
 80052f8:	08006765 	.word	0x08006765

080052fc <__call_exitprocs>:
 80052fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005300:	4b31      	ldr	r3, [pc, #196]	; (80053c8 <__call_exitprocs+0xcc>)
 8005302:	b083      	sub	sp, #12
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800530c:	4681      	mov	r9, r0
 800530e:	460e      	mov	r6, r1
 8005310:	9301      	str	r3, [sp, #4]
 8005312:	9b00      	ldr	r3, [sp, #0]
 8005314:	f8d3 7148 	ldr.w	r7, [r3, #328]	; 0x148
 8005318:	b327      	cbz	r7, 8005364 <__call_exitprocs+0x68>
 800531a:	f8dd a004 	ldr.w	sl, [sp, #4]
 800531e:	687c      	ldr	r4, [r7, #4]
 8005320:	1e65      	subs	r5, r4, #1
 8005322:	d40e      	bmi.n	8005342 <__call_exitprocs+0x46>
 8005324:	3401      	adds	r4, #1
 8005326:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800532a:	f04f 0800 	mov.w	r8, #0
 800532e:	b1e6      	cbz	r6, 800536a <__call_exitprocs+0x6e>
 8005330:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005334:	42b3      	cmp	r3, r6
 8005336:	d018      	beq.n	800536a <__call_exitprocs+0x6e>
 8005338:	3d01      	subs	r5, #1
 800533a:	1c6b      	adds	r3, r5, #1
 800533c:	f1a4 0404 	sub.w	r4, r4, #4
 8005340:	d1f5      	bne.n	800532e <__call_exitprocs+0x32>
 8005342:	4b22      	ldr	r3, [pc, #136]	; (80053cc <__call_exitprocs+0xd0>)
 8005344:	b173      	cbz	r3, 8005364 <__call_exitprocs+0x68>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d136      	bne.n	80053ba <__call_exitprocs+0xbe>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d034      	beq.n	80053bc <__call_exitprocs+0xc0>
 8005352:	4638      	mov	r0, r7
 8005354:	f8ca 3000 	str.w	r3, [sl]
 8005358:	f3af 8000 	nop.w
 800535c:	f8da 7000 	ldr.w	r7, [sl]
 8005360:	2f00      	cmp	r7, #0
 8005362:	d1dc      	bne.n	800531e <__call_exitprocs+0x22>
 8005364:	b003      	add	sp, #12
 8005366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6822      	ldr	r2, [r4, #0]
 800536e:	3b01      	subs	r3, #1
 8005370:	42ab      	cmp	r3, r5
 8005372:	bf0c      	ite	eq
 8005374:	607d      	streq	r5, [r7, #4]
 8005376:	f8c4 8000 	strne.w	r8, [r4]
 800537a:	2a00      	cmp	r2, #0
 800537c:	d0dc      	beq.n	8005338 <__call_exitprocs+0x3c>
 800537e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005382:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8005386:	2101      	movs	r1, #1
 8005388:	40a9      	lsls	r1, r5
 800538a:	4219      	tst	r1, r3
 800538c:	d108      	bne.n	80053a0 <__call_exitprocs+0xa4>
 800538e:	4790      	blx	r2
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	455b      	cmp	r3, fp
 8005394:	d1bd      	bne.n	8005312 <__call_exitprocs+0x16>
 8005396:	f8da 3000 	ldr.w	r3, [sl]
 800539a:	42bb      	cmp	r3, r7
 800539c:	d0cc      	beq.n	8005338 <__call_exitprocs+0x3c>
 800539e:	e7b8      	b.n	8005312 <__call_exitprocs+0x16>
 80053a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80053a4:	4219      	tst	r1, r3
 80053a6:	d104      	bne.n	80053b2 <__call_exitprocs+0xb6>
 80053a8:	4648      	mov	r0, r9
 80053aa:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80053ae:	4790      	blx	r2
 80053b0:	e7ee      	b.n	8005390 <__call_exitprocs+0x94>
 80053b2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80053b6:	4790      	blx	r2
 80053b8:	e7ea      	b.n	8005390 <__call_exitprocs+0x94>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	46ba      	mov	sl, r7
 80053be:	461f      	mov	r7, r3
 80053c0:	2f00      	cmp	r7, #0
 80053c2:	d1ac      	bne.n	800531e <__call_exitprocs+0x22>
 80053c4:	e7ce      	b.n	8005364 <__call_exitprocs+0x68>
 80053c6:	bf00      	nop
 80053c8:	0800acc8 	.word	0x0800acc8
 80053cc:	00000000 	.word	0x00000000

080053d0 <atexit>:
 80053d0:	4601      	mov	r1, r0
 80053d2:	2000      	movs	r0, #0
 80053d4:	4602      	mov	r2, r0
 80053d6:	4603      	mov	r3, r0
 80053d8:	f004 b898 	b.w	800950c <__register_exitproc>

080053dc <quorem>:
 80053dc:	6902      	ldr	r2, [r0, #16]
 80053de:	690b      	ldr	r3, [r1, #16]
 80053e0:	4293      	cmp	r3, r2
 80053e2:	f300 808f 	bgt.w	8005504 <quorem+0x128>
 80053e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ea:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80053ee:	f101 0714 	add.w	r7, r1, #20
 80053f2:	f100 0b14 	add.w	fp, r0, #20
 80053f6:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 80053fa:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 80053fe:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8005402:	b083      	sub	sp, #12
 8005404:	3201      	adds	r2, #1
 8005406:	fbb3 f9f2 	udiv	r9, r3, r2
 800540a:	eb0b 0304 	add.w	r3, fp, r4
 800540e:	9400      	str	r4, [sp, #0]
 8005410:	eb07 0a04 	add.w	sl, r7, r4
 8005414:	9301      	str	r3, [sp, #4]
 8005416:	f1b9 0f00 	cmp.w	r9, #0
 800541a:	d03b      	beq.n	8005494 <quorem+0xb8>
 800541c:	2600      	movs	r6, #0
 800541e:	4632      	mov	r2, r6
 8005420:	46bc      	mov	ip, r7
 8005422:	46de      	mov	lr, fp
 8005424:	4634      	mov	r4, r6
 8005426:	f85c 6b04 	ldr.w	r6, [ip], #4
 800542a:	f8de 5000 	ldr.w	r5, [lr]
 800542e:	b2b3      	uxth	r3, r6
 8005430:	0c36      	lsrs	r6, r6, #16
 8005432:	fb03 4409 	mla	r4, r3, r9, r4
 8005436:	fb06 f609 	mul.w	r6, r6, r9
 800543a:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 800543e:	b2a3      	uxth	r3, r4
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	b2b4      	uxth	r4, r6
 8005444:	fa13 f385 	uxtah	r3, r3, r5
 8005448:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 800544c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005450:	b29b      	uxth	r3, r3
 8005452:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005456:	45e2      	cmp	sl, ip
 8005458:	ea4f 4224 	mov.w	r2, r4, asr #16
 800545c:	f84e 3b04 	str.w	r3, [lr], #4
 8005460:	ea4f 4416 	mov.w	r4, r6, lsr #16
 8005464:	d2df      	bcs.n	8005426 <quorem+0x4a>
 8005466:	9b00      	ldr	r3, [sp, #0]
 8005468:	f85b 3003 	ldr.w	r3, [fp, r3]
 800546c:	b993      	cbnz	r3, 8005494 <quorem+0xb8>
 800546e:	9c01      	ldr	r4, [sp, #4]
 8005470:	1f23      	subs	r3, r4, #4
 8005472:	459b      	cmp	fp, r3
 8005474:	d20c      	bcs.n	8005490 <quorem+0xb4>
 8005476:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800547a:	b94b      	cbnz	r3, 8005490 <quorem+0xb4>
 800547c:	f1a4 0308 	sub.w	r3, r4, #8
 8005480:	e002      	b.n	8005488 <quorem+0xac>
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	3b04      	subs	r3, #4
 8005486:	b91a      	cbnz	r2, 8005490 <quorem+0xb4>
 8005488:	459b      	cmp	fp, r3
 800548a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800548e:	d3f8      	bcc.n	8005482 <quorem+0xa6>
 8005490:	f8c0 8010 	str.w	r8, [r0, #16]
 8005494:	4604      	mov	r4, r0
 8005496:	f002 fac9 	bl	8007a2c <__mcmp>
 800549a:	2800      	cmp	r0, #0
 800549c:	db2e      	blt.n	80054fc <quorem+0x120>
 800549e:	f109 0901 	add.w	r9, r9, #1
 80054a2:	465d      	mov	r5, fp
 80054a4:	2300      	movs	r3, #0
 80054a6:	f857 1b04 	ldr.w	r1, [r7], #4
 80054aa:	6828      	ldr	r0, [r5, #0]
 80054ac:	b28a      	uxth	r2, r1
 80054ae:	1a9a      	subs	r2, r3, r2
 80054b0:	0c09      	lsrs	r1, r1, #16
 80054b2:	fa12 f280 	uxtah	r2, r2, r0
 80054b6:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 80054ba:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80054be:	b291      	uxth	r1, r2
 80054c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80054c4:	45ba      	cmp	sl, r7
 80054c6:	f845 1b04 	str.w	r1, [r5], #4
 80054ca:	ea4f 4323 	mov.w	r3, r3, asr #16
 80054ce:	d2ea      	bcs.n	80054a6 <quorem+0xca>
 80054d0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 80054d4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 80054d8:	b982      	cbnz	r2, 80054fc <quorem+0x120>
 80054da:	1f1a      	subs	r2, r3, #4
 80054dc:	4593      	cmp	fp, r2
 80054de:	d20b      	bcs.n	80054f8 <quorem+0x11c>
 80054e0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80054e4:	b942      	cbnz	r2, 80054f8 <quorem+0x11c>
 80054e6:	3b08      	subs	r3, #8
 80054e8:	e002      	b.n	80054f0 <quorem+0x114>
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	3b04      	subs	r3, #4
 80054ee:	b91a      	cbnz	r2, 80054f8 <quorem+0x11c>
 80054f0:	459b      	cmp	fp, r3
 80054f2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80054f6:	d3f8      	bcc.n	80054ea <quorem+0x10e>
 80054f8:	f8c4 8010 	str.w	r8, [r4, #16]
 80054fc:	4648      	mov	r0, r9
 80054fe:	b003      	add	sp, #12
 8005500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005504:	2000      	movs	r0, #0
 8005506:	4770      	bx	lr

08005508 <_dtoa_r>:
 8005508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550c:	b099      	sub	sp, #100	; 0x64
 800550e:	4604      	mov	r4, r0
 8005510:	9103      	str	r1, [sp, #12]
 8005512:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005514:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8005516:	9304      	str	r3, [sp, #16]
 8005518:	4692      	mov	sl, r2
 800551a:	ed8d 0b00 	vstr	d0, [sp]
 800551e:	b141      	cbz	r1, 8005532 <_dtoa_r+0x2a>
 8005520:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005522:	604a      	str	r2, [r1, #4]
 8005524:	2301      	movs	r3, #1
 8005526:	4093      	lsls	r3, r2
 8005528:	608b      	str	r3, [r1, #8]
 800552a:	f002 f84f 	bl	80075cc <_Bfree>
 800552e:	2300      	movs	r3, #0
 8005530:	6423      	str	r3, [r4, #64]	; 0x40
 8005532:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005536:	2b00      	cmp	r3, #0
 8005538:	4699      	mov	r9, r3
 800553a:	db36      	blt.n	80055aa <_dtoa_r+0xa2>
 800553c:	2300      	movs	r3, #0
 800553e:	602b      	str	r3, [r5, #0]
 8005540:	4ba5      	ldr	r3, [pc, #660]	; (80057d8 <_dtoa_r+0x2d0>)
 8005542:	461a      	mov	r2, r3
 8005544:	ea09 0303 	and.w	r3, r9, r3
 8005548:	4293      	cmp	r3, r2
 800554a:	d017      	beq.n	800557c <_dtoa_r+0x74>
 800554c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005550:	2200      	movs	r2, #0
 8005552:	2300      	movs	r3, #0
 8005554:	4630      	mov	r0, r6
 8005556:	4639      	mov	r1, r7
 8005558:	f004 fe70 	bl	800a23c <__aeabi_dcmpeq>
 800555c:	4680      	mov	r8, r0
 800555e:	2800      	cmp	r0, #0
 8005560:	d02b      	beq.n	80055ba <_dtoa_r+0xb2>
 8005562:	9a04      	ldr	r2, [sp, #16]
 8005564:	2301      	movs	r3, #1
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 80cc 	beq.w	8005708 <_dtoa_r+0x200>
 8005570:	489a      	ldr	r0, [pc, #616]	; (80057dc <_dtoa_r+0x2d4>)
 8005572:	6018      	str	r0, [r3, #0]
 8005574:	3801      	subs	r0, #1
 8005576:	b019      	add	sp, #100	; 0x64
 8005578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557c:	9a04      	ldr	r2, [sp, #16]
 800557e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	9b00      	ldr	r3, [sp, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 80a7 	beq.w	80056da <_dtoa_r+0x1d2>
 800558c:	4894      	ldr	r0, [pc, #592]	; (80057e0 <_dtoa_r+0x2d8>)
 800558e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0f0      	beq.n	8005576 <_dtoa_r+0x6e>
 8005594:	78c3      	ldrb	r3, [r0, #3]
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 80b8 	beq.w	800570c <_dtoa_r+0x204>
 800559c:	f100 0308 	add.w	r3, r0, #8
 80055a0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	b019      	add	sp, #100	; 0x64
 80055a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055aa:	9a01      	ldr	r2, [sp, #4]
 80055ac:	2301      	movs	r3, #1
 80055ae:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 80055b2:	602b      	str	r3, [r5, #0]
 80055b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80055b8:	e7c2      	b.n	8005540 <_dtoa_r+0x38>
 80055ba:	4620      	mov	r0, r4
 80055bc:	ec47 6b10 	vmov	d0, r6, r7
 80055c0:	a917      	add	r1, sp, #92	; 0x5c
 80055c2:	aa16      	add	r2, sp, #88	; 0x58
 80055c4:	f002 fb4a 	bl	8007c5c <__d2b>
 80055c8:	ea5f 5519 	movs.w	r5, r9, lsr #20
 80055cc:	4683      	mov	fp, r0
 80055ce:	f040 808d 	bne.w	80056ec <_dtoa_r+0x1e4>
 80055d2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80055d6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80055d8:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80055dc:	4445      	add	r5, r8
 80055de:	429d      	cmp	r5, r3
 80055e0:	f2c0 829e 	blt.w	8005b20 <_dtoa_r+0x618>
 80055e4:	4a7f      	ldr	r2, [pc, #508]	; (80057e4 <_dtoa_r+0x2dc>)
 80055e6:	1b52      	subs	r2, r2, r5
 80055e8:	fa09 f902 	lsl.w	r9, r9, r2
 80055ec:	9a00      	ldr	r2, [sp, #0]
 80055ee:	f205 4312 	addw	r3, r5, #1042	; 0x412
 80055f2:	fa22 f003 	lsr.w	r0, r2, r3
 80055f6:	ea49 0000 	orr.w	r0, r9, r0
 80055fa:	f004 fb41 	bl	8009c80 <__aeabi_ui2d>
 80055fe:	2301      	movs	r3, #1
 8005600:	3d01      	subs	r5, #1
 8005602:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005606:	930f      	str	r3, [sp, #60]	; 0x3c
 8005608:	2200      	movs	r2, #0
 800560a:	4b77      	ldr	r3, [pc, #476]	; (80057e8 <_dtoa_r+0x2e0>)
 800560c:	f004 f9fa 	bl	8009a04 <__aeabi_dsub>
 8005610:	a36b      	add	r3, pc, #428	; (adr r3, 80057c0 <_dtoa_r+0x2b8>)
 8005612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005616:	f004 fba9 	bl	8009d6c <__aeabi_dmul>
 800561a:	a36b      	add	r3, pc, #428	; (adr r3, 80057c8 <_dtoa_r+0x2c0>)
 800561c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005620:	f004 f9f2 	bl	8009a08 <__adddf3>
 8005624:	4606      	mov	r6, r0
 8005626:	4628      	mov	r0, r5
 8005628:	460f      	mov	r7, r1
 800562a:	f004 fb39 	bl	8009ca0 <__aeabi_i2d>
 800562e:	a368      	add	r3, pc, #416	; (adr r3, 80057d0 <_dtoa_r+0x2c8>)
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	f004 fb9a 	bl	8009d6c <__aeabi_dmul>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4630      	mov	r0, r6
 800563e:	4639      	mov	r1, r7
 8005640:	f004 f9e2 	bl	8009a08 <__adddf3>
 8005644:	4606      	mov	r6, r0
 8005646:	460f      	mov	r7, r1
 8005648:	f004 fe2a 	bl	800a2a0 <__aeabi_d2iz>
 800564c:	4639      	mov	r1, r7
 800564e:	9005      	str	r0, [sp, #20]
 8005650:	2200      	movs	r2, #0
 8005652:	4630      	mov	r0, r6
 8005654:	2300      	movs	r3, #0
 8005656:	f004 fdfb 	bl	800a250 <__aeabi_dcmplt>
 800565a:	2800      	cmp	r0, #0
 800565c:	f040 81ab 	bne.w	80059b6 <_dtoa_r+0x4ae>
 8005660:	9b05      	ldr	r3, [sp, #20]
 8005662:	2b16      	cmp	r3, #22
 8005664:	f200 81a4 	bhi.w	80059b0 <_dtoa_r+0x4a8>
 8005668:	9a05      	ldr	r2, [sp, #20]
 800566a:	4b60      	ldr	r3, [pc, #384]	; (80057ec <_dtoa_r+0x2e4>)
 800566c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005670:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005674:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005678:	f004 fe08 	bl	800a28c <__aeabi_dcmpgt>
 800567c:	2800      	cmp	r0, #0
 800567e:	f000 8255 	beq.w	8005b2c <_dtoa_r+0x624>
 8005682:	9b05      	ldr	r3, [sp, #20]
 8005684:	3b01      	subs	r3, #1
 8005686:	9305      	str	r3, [sp, #20]
 8005688:	2300      	movs	r3, #0
 800568a:	930d      	str	r3, [sp, #52]	; 0x34
 800568c:	ebc5 0508 	rsb	r5, r5, r8
 8005690:	1e6b      	subs	r3, r5, #1
 8005692:	9306      	str	r3, [sp, #24]
 8005694:	f100 81a6 	bmi.w	80059e4 <_dtoa_r+0x4dc>
 8005698:	2300      	movs	r3, #0
 800569a:	9307      	str	r3, [sp, #28]
 800569c:	9b05      	ldr	r3, [sp, #20]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f2c0 8197 	blt.w	80059d2 <_dtoa_r+0x4ca>
 80056a4:	9a06      	ldr	r2, [sp, #24]
 80056a6:	930c      	str	r3, [sp, #48]	; 0x30
 80056a8:	4611      	mov	r1, r2
 80056aa:	4419      	add	r1, r3
 80056ac:	2300      	movs	r3, #0
 80056ae:	9106      	str	r1, [sp, #24]
 80056b0:	930a      	str	r3, [sp, #40]	; 0x28
 80056b2:	9b03      	ldr	r3, [sp, #12]
 80056b4:	2b09      	cmp	r3, #9
 80056b6:	d82b      	bhi.n	8005710 <_dtoa_r+0x208>
 80056b8:	2b05      	cmp	r3, #5
 80056ba:	f340 8673 	ble.w	80063a4 <_dtoa_r+0xe9c>
 80056be:	3b04      	subs	r3, #4
 80056c0:	9303      	str	r3, [sp, #12]
 80056c2:	2700      	movs	r7, #0
 80056c4:	9b03      	ldr	r3, [sp, #12]
 80056c6:	3b02      	subs	r3, #2
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	f200 8651 	bhi.w	8006370 <_dtoa_r+0xe68>
 80056ce:	e8df f013 	tbh	[pc, r3, lsl #1]
 80056d2:	03d1      	.short	0x03d1
 80056d4:	02b603c4 	.word	0x02b603c4
 80056d8:	0666      	.short	0x0666
 80056da:	4b41      	ldr	r3, [pc, #260]	; (80057e0 <_dtoa_r+0x2d8>)
 80056dc:	4a44      	ldr	r2, [pc, #272]	; (80057f0 <_dtoa_r+0x2e8>)
 80056de:	f3c9 0013 	ubfx	r0, r9, #0, #20
 80056e2:	2800      	cmp	r0, #0
 80056e4:	bf14      	ite	ne
 80056e6:	4618      	movne	r0, r3
 80056e8:	4610      	moveq	r0, r2
 80056ea:	e750      	b.n	800558e <_dtoa_r+0x86>
 80056ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80056f0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80056f4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80056f8:	4630      	mov	r0, r6
 80056fa:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80056fe:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005702:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005706:	e77f      	b.n	8005608 <_dtoa_r+0x100>
 8005708:	483a      	ldr	r0, [pc, #232]	; (80057f4 <_dtoa_r+0x2ec>)
 800570a:	e734      	b.n	8005576 <_dtoa_r+0x6e>
 800570c:	1cc3      	adds	r3, r0, #3
 800570e:	e747      	b.n	80055a0 <_dtoa_r+0x98>
 8005710:	2100      	movs	r1, #0
 8005712:	6461      	str	r1, [r4, #68]	; 0x44
 8005714:	4620      	mov	r0, r4
 8005716:	468a      	mov	sl, r1
 8005718:	9103      	str	r1, [sp, #12]
 800571a:	f001 ff31 	bl	8007580 <_Balloc>
 800571e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005722:	9308      	str	r3, [sp, #32]
 8005724:	930e      	str	r3, [sp, #56]	; 0x38
 8005726:	2301      	movs	r3, #1
 8005728:	9009      	str	r0, [sp, #36]	; 0x24
 800572a:	6420      	str	r0, [r4, #64]	; 0x40
 800572c:	930b      	str	r3, [sp, #44]	; 0x2c
 800572e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005730:	2b00      	cmp	r3, #0
 8005732:	f2c0 80d3 	blt.w	80058dc <_dtoa_r+0x3d4>
 8005736:	9a05      	ldr	r2, [sp, #20]
 8005738:	2a0e      	cmp	r2, #14
 800573a:	f300 80cf 	bgt.w	80058dc <_dtoa_r+0x3d4>
 800573e:	4b2b      	ldr	r3, [pc, #172]	; (80057ec <_dtoa_r+0x2e4>)
 8005740:	f1ba 0f00 	cmp.w	sl, #0
 8005744:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005748:	e9d3 8900 	ldrd	r8, r9, [r3]
 800574c:	f2c0 8395 	blt.w	8005e7a <_dtoa_r+0x972>
 8005750:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005754:	4642      	mov	r2, r8
 8005756:	464b      	mov	r3, r9
 8005758:	4630      	mov	r0, r6
 800575a:	4639      	mov	r1, r7
 800575c:	f004 fc30 	bl	8009fc0 <__aeabi_ddiv>
 8005760:	f004 fd9e 	bl	800a2a0 <__aeabi_d2iz>
 8005764:	4682      	mov	sl, r0
 8005766:	f004 fa9b 	bl	8009ca0 <__aeabi_i2d>
 800576a:	4642      	mov	r2, r8
 800576c:	464b      	mov	r3, r9
 800576e:	f004 fafd 	bl	8009d6c <__aeabi_dmul>
 8005772:	460b      	mov	r3, r1
 8005774:	4602      	mov	r2, r0
 8005776:	4639      	mov	r1, r7
 8005778:	4630      	mov	r0, r6
 800577a:	f004 f943 	bl	8009a04 <__aeabi_dsub>
 800577e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005780:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 8005784:	702b      	strb	r3, [r5, #0]
 8005786:	9b08      	ldr	r3, [sp, #32]
 8005788:	2b01      	cmp	r3, #1
 800578a:	4606      	mov	r6, r0
 800578c:	460f      	mov	r7, r1
 800578e:	f105 0501 	add.w	r5, r5, #1
 8005792:	d063      	beq.n	800585c <_dtoa_r+0x354>
 8005794:	2200      	movs	r2, #0
 8005796:	4b18      	ldr	r3, [pc, #96]	; (80057f8 <_dtoa_r+0x2f0>)
 8005798:	f004 fae8 	bl	8009d6c <__aeabi_dmul>
 800579c:	2200      	movs	r2, #0
 800579e:	2300      	movs	r3, #0
 80057a0:	4606      	mov	r6, r0
 80057a2:	460f      	mov	r7, r1
 80057a4:	f004 fd4a 	bl	800a23c <__aeabi_dcmpeq>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	f040 8084 	bne.w	80058b6 <_dtoa_r+0x3ae>
 80057ae:	f8cd b000 	str.w	fp, [sp]
 80057b2:	9403      	str	r4, [sp, #12]
 80057b4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80057b8:	9c08      	ldr	r4, [sp, #32]
 80057ba:	e02a      	b.n	8005812 <_dtoa_r+0x30a>
 80057bc:	f3af 8000 	nop.w
 80057c0:	636f4361 	.word	0x636f4361
 80057c4:	3fd287a7 	.word	0x3fd287a7
 80057c8:	8b60c8b3 	.word	0x8b60c8b3
 80057cc:	3fc68a28 	.word	0x3fc68a28
 80057d0:	509f79fb 	.word	0x509f79fb
 80057d4:	3fd34413 	.word	0x3fd34413
 80057d8:	7ff00000 	.word	0x7ff00000
 80057dc:	0800abdd 	.word	0x0800abdd
 80057e0:	0800ad38 	.word	0x0800ad38
 80057e4:	fffffc0e 	.word	0xfffffc0e
 80057e8:	3ff80000 	.word	0x3ff80000
 80057ec:	0800ad48 	.word	0x0800ad48
 80057f0:	0800ad2c 	.word	0x0800ad2c
 80057f4:	0800abdc 	.word	0x0800abdc
 80057f8:	40240000 	.word	0x40240000
 80057fc:	f004 fab6 	bl	8009d6c <__aeabi_dmul>
 8005800:	2200      	movs	r2, #0
 8005802:	2300      	movs	r3, #0
 8005804:	4606      	mov	r6, r0
 8005806:	460f      	mov	r7, r1
 8005808:	f004 fd18 	bl	800a23c <__aeabi_dcmpeq>
 800580c:	2800      	cmp	r0, #0
 800580e:	f040 83e4 	bne.w	8005fda <_dtoa_r+0xad2>
 8005812:	4642      	mov	r2, r8
 8005814:	464b      	mov	r3, r9
 8005816:	4630      	mov	r0, r6
 8005818:	4639      	mov	r1, r7
 800581a:	f004 fbd1 	bl	8009fc0 <__aeabi_ddiv>
 800581e:	f004 fd3f 	bl	800a2a0 <__aeabi_d2iz>
 8005822:	4682      	mov	sl, r0
 8005824:	f004 fa3c 	bl	8009ca0 <__aeabi_i2d>
 8005828:	4642      	mov	r2, r8
 800582a:	464b      	mov	r3, r9
 800582c:	f004 fa9e 	bl	8009d6c <__aeabi_dmul>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	4630      	mov	r0, r6
 8005836:	4639      	mov	r1, r7
 8005838:	f004 f8e4 	bl	8009a04 <__aeabi_dsub>
 800583c:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 8005840:	f805 eb01 	strb.w	lr, [r5], #1
 8005844:	ebcb 0e05 	rsb	lr, fp, r5
 8005848:	4574      	cmp	r4, lr
 800584a:	4606      	mov	r6, r0
 800584c:	460f      	mov	r7, r1
 800584e:	f04f 0200 	mov.w	r2, #0
 8005852:	4bb7      	ldr	r3, [pc, #732]	; (8005b30 <_dtoa_r+0x628>)
 8005854:	d1d2      	bne.n	80057fc <_dtoa_r+0x2f4>
 8005856:	f8dd b000 	ldr.w	fp, [sp]
 800585a:	9c03      	ldr	r4, [sp, #12]
 800585c:	4632      	mov	r2, r6
 800585e:	463b      	mov	r3, r7
 8005860:	4630      	mov	r0, r6
 8005862:	4639      	mov	r1, r7
 8005864:	f004 f8d0 	bl	8009a08 <__adddf3>
 8005868:	4606      	mov	r6, r0
 800586a:	460f      	mov	r7, r1
 800586c:	4640      	mov	r0, r8
 800586e:	4649      	mov	r1, r9
 8005870:	4632      	mov	r2, r6
 8005872:	463b      	mov	r3, r7
 8005874:	f004 fcec 	bl	800a250 <__aeabi_dcmplt>
 8005878:	b948      	cbnz	r0, 800588e <_dtoa_r+0x386>
 800587a:	4640      	mov	r0, r8
 800587c:	4649      	mov	r1, r9
 800587e:	4632      	mov	r2, r6
 8005880:	463b      	mov	r3, r7
 8005882:	f004 fcdb 	bl	800a23c <__aeabi_dcmpeq>
 8005886:	b1b0      	cbz	r0, 80058b6 <_dtoa_r+0x3ae>
 8005888:	f01a 0f01 	tst.w	sl, #1
 800588c:	d013      	beq.n	80058b6 <_dtoa_r+0x3ae>
 800588e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8005892:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005894:	1e6b      	subs	r3, r5, #1
 8005896:	e004      	b.n	80058a2 <_dtoa_r+0x39a>
 8005898:	428b      	cmp	r3, r1
 800589a:	f000 8448 	beq.w	800612e <_dtoa_r+0xc26>
 800589e:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 80058a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80058a6:	f103 0501 	add.w	r5, r3, #1
 80058aa:	461a      	mov	r2, r3
 80058ac:	d0f4      	beq.n	8005898 <_dtoa_r+0x390>
 80058ae:	f108 0301 	add.w	r3, r8, #1
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	7013      	strb	r3, [r2, #0]
 80058b6:	4620      	mov	r0, r4
 80058b8:	4659      	mov	r1, fp
 80058ba:	f001 fe87 	bl	80075cc <_Bfree>
 80058be:	2200      	movs	r2, #0
 80058c0:	9b05      	ldr	r3, [sp, #20]
 80058c2:	702a      	strb	r2, [r5, #0]
 80058c4:	9a04      	ldr	r2, [sp, #16]
 80058c6:	3301      	adds	r3, #1
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 834b 	beq.w	8005f68 <_dtoa_r+0xa60>
 80058d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058d4:	601d      	str	r5, [r3, #0]
 80058d6:	b019      	add	sp, #100	; 0x64
 80058d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058de:	2a00      	cmp	r2, #0
 80058e0:	f000 8085 	beq.w	80059ee <_dtoa_r+0x4e6>
 80058e4:	9a03      	ldr	r2, [sp, #12]
 80058e6:	2a01      	cmp	r2, #1
 80058e8:	f340 830a 	ble.w	8005f00 <_dtoa_r+0x9f8>
 80058ec:	9b08      	ldr	r3, [sp, #32]
 80058ee:	1e5f      	subs	r7, r3, #1
 80058f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058f2:	42bb      	cmp	r3, r7
 80058f4:	f2c0 83a6 	blt.w	8006044 <_dtoa_r+0xb3c>
 80058f8:	1bdf      	subs	r7, r3, r7
 80058fa:	9b08      	ldr	r3, [sp, #32]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f2c0 84a4 	blt.w	800624a <_dtoa_r+0xd42>
 8005902:	9d07      	ldr	r5, [sp, #28]
 8005904:	9b08      	ldr	r3, [sp, #32]
 8005906:	9a07      	ldr	r2, [sp, #28]
 8005908:	441a      	add	r2, r3
 800590a:	9207      	str	r2, [sp, #28]
 800590c:	9a06      	ldr	r2, [sp, #24]
 800590e:	4620      	mov	r0, r4
 8005910:	441a      	add	r2, r3
 8005912:	2101      	movs	r1, #1
 8005914:	9206      	str	r2, [sp, #24]
 8005916:	f001 ff3f 	bl	8007798 <__i2b>
 800591a:	4606      	mov	r6, r0
 800591c:	b165      	cbz	r5, 8005938 <_dtoa_r+0x430>
 800591e:	9906      	ldr	r1, [sp, #24]
 8005920:	2900      	cmp	r1, #0
 8005922:	460b      	mov	r3, r1
 8005924:	dd08      	ble.n	8005938 <_dtoa_r+0x430>
 8005926:	42a9      	cmp	r1, r5
 8005928:	9a07      	ldr	r2, [sp, #28]
 800592a:	bfa8      	it	ge
 800592c:	462b      	movge	r3, r5
 800592e:	1ad2      	subs	r2, r2, r3
 8005930:	1aed      	subs	r5, r5, r3
 8005932:	1acb      	subs	r3, r1, r3
 8005934:	9207      	str	r2, [sp, #28]
 8005936:	9306      	str	r3, [sp, #24]
 8005938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800593a:	2b00      	cmp	r3, #0
 800593c:	dd1a      	ble.n	8005974 <_dtoa_r+0x46c>
 800593e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 8378 	beq.w	8006036 <_dtoa_r+0xb2e>
 8005946:	2f00      	cmp	r7, #0
 8005948:	dd10      	ble.n	800596c <_dtoa_r+0x464>
 800594a:	4631      	mov	r1, r6
 800594c:	463a      	mov	r2, r7
 800594e:	4620      	mov	r0, r4
 8005950:	f001 ffc6 	bl	80078e0 <__pow5mult>
 8005954:	4606      	mov	r6, r0
 8005956:	465a      	mov	r2, fp
 8005958:	4631      	mov	r1, r6
 800595a:	4620      	mov	r0, r4
 800595c:	f001 ff26 	bl	80077ac <__multiply>
 8005960:	4659      	mov	r1, fp
 8005962:	4680      	mov	r8, r0
 8005964:	4620      	mov	r0, r4
 8005966:	f001 fe31 	bl	80075cc <_Bfree>
 800596a:	46c3      	mov	fp, r8
 800596c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800596e:	1bda      	subs	r2, r3, r7
 8005970:	f040 82a5 	bne.w	8005ebe <_dtoa_r+0x9b6>
 8005974:	4620      	mov	r0, r4
 8005976:	2101      	movs	r1, #1
 8005978:	f001 ff0e 	bl	8007798 <__i2b>
 800597c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800597e:	2b00      	cmp	r3, #0
 8005980:	4680      	mov	r8, r0
 8005982:	dd38      	ble.n	80059f6 <_dtoa_r+0x4ee>
 8005984:	4601      	mov	r1, r0
 8005986:	461a      	mov	r2, r3
 8005988:	4620      	mov	r0, r4
 800598a:	f001 ffa9 	bl	80078e0 <__pow5mult>
 800598e:	9b03      	ldr	r3, [sp, #12]
 8005990:	2b01      	cmp	r3, #1
 8005992:	4680      	mov	r8, r0
 8005994:	f340 8299 	ble.w	8005eca <_dtoa_r+0x9c2>
 8005998:	f04f 0900 	mov.w	r9, #0
 800599c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80059a0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80059a4:	6918      	ldr	r0, [r3, #16]
 80059a6:	f001 fea9 	bl	80076fc <__hi0bits>
 80059aa:	f1c0 0020 	rsb	r0, r0, #32
 80059ae:	e02c      	b.n	8005a0a <_dtoa_r+0x502>
 80059b0:	2301      	movs	r3, #1
 80059b2:	930d      	str	r3, [sp, #52]	; 0x34
 80059b4:	e66a      	b.n	800568c <_dtoa_r+0x184>
 80059b6:	9805      	ldr	r0, [sp, #20]
 80059b8:	f004 f972 	bl	8009ca0 <__aeabi_i2d>
 80059bc:	4632      	mov	r2, r6
 80059be:	463b      	mov	r3, r7
 80059c0:	f004 fc3c 	bl	800a23c <__aeabi_dcmpeq>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	f47f ae4b 	bne.w	8005660 <_dtoa_r+0x158>
 80059ca:	9b05      	ldr	r3, [sp, #20]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	9305      	str	r3, [sp, #20]
 80059d0:	e646      	b.n	8005660 <_dtoa_r+0x158>
 80059d2:	9a07      	ldr	r2, [sp, #28]
 80059d4:	9b05      	ldr	r3, [sp, #20]
 80059d6:	1ad2      	subs	r2, r2, r3
 80059d8:	425b      	negs	r3, r3
 80059da:	930a      	str	r3, [sp, #40]	; 0x28
 80059dc:	2300      	movs	r3, #0
 80059de:	9207      	str	r2, [sp, #28]
 80059e0:	930c      	str	r3, [sp, #48]	; 0x30
 80059e2:	e666      	b.n	80056b2 <_dtoa_r+0x1aa>
 80059e4:	425b      	negs	r3, r3
 80059e6:	9307      	str	r3, [sp, #28]
 80059e8:	2300      	movs	r3, #0
 80059ea:	9306      	str	r3, [sp, #24]
 80059ec:	e656      	b.n	800569c <_dtoa_r+0x194>
 80059ee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80059f0:	9d07      	ldr	r5, [sp, #28]
 80059f2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80059f4:	e792      	b.n	800591c <_dtoa_r+0x414>
 80059f6:	9b03      	ldr	r3, [sp, #12]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	f340 82b8 	ble.w	8005f6e <_dtoa_r+0xa66>
 80059fe:	f04f 0900 	mov.w	r9, #0
 8005a02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1c9      	bne.n	800599c <_dtoa_r+0x494>
 8005a08:	2001      	movs	r0, #1
 8005a0a:	9b06      	ldr	r3, [sp, #24]
 8005a0c:	4418      	add	r0, r3
 8005a0e:	f010 001f 	ands.w	r0, r0, #31
 8005a12:	f000 8083 	beq.w	8005b1c <_dtoa_r+0x614>
 8005a16:	f1c0 0320 	rsb	r3, r0, #32
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	f340 84b9 	ble.w	8006392 <_dtoa_r+0xe8a>
 8005a20:	f1c0 001c 	rsb	r0, r0, #28
 8005a24:	9b07      	ldr	r3, [sp, #28]
 8005a26:	4403      	add	r3, r0
 8005a28:	9307      	str	r3, [sp, #28]
 8005a2a:	9b06      	ldr	r3, [sp, #24]
 8005a2c:	4403      	add	r3, r0
 8005a2e:	4405      	add	r5, r0
 8005a30:	9306      	str	r3, [sp, #24]
 8005a32:	9b07      	ldr	r3, [sp, #28]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	dd05      	ble.n	8005a44 <_dtoa_r+0x53c>
 8005a38:	4659      	mov	r1, fp
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f001 ff9f 	bl	8007980 <__lshift>
 8005a42:	4683      	mov	fp, r0
 8005a44:	9b06      	ldr	r3, [sp, #24]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	dd05      	ble.n	8005a56 <_dtoa_r+0x54e>
 8005a4a:	4641      	mov	r1, r8
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f001 ff96 	bl	8007980 <__lshift>
 8005a54:	4680      	mov	r8, r0
 8005a56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f040 826a 	bne.w	8005f32 <_dtoa_r+0xa2a>
 8005a5e:	9b08      	ldr	r3, [sp, #32]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f340 8297 	ble.w	8005f94 <_dtoa_r+0xa8c>
 8005a66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d171      	bne.n	8005b50 <_dtoa_r+0x648>
 8005a6c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005a70:	9f08      	ldr	r7, [sp, #32]
 8005a72:	464d      	mov	r5, r9
 8005a74:	e002      	b.n	8005a7c <_dtoa_r+0x574>
 8005a76:	f001 fdb3 	bl	80075e0 <__multadd>
 8005a7a:	4683      	mov	fp, r0
 8005a7c:	4641      	mov	r1, r8
 8005a7e:	4658      	mov	r0, fp
 8005a80:	f7ff fcac 	bl	80053dc <quorem>
 8005a84:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8005a88:	f805 cb01 	strb.w	ip, [r5], #1
 8005a8c:	ebc9 0305 	rsb	r3, r9, r5
 8005a90:	42bb      	cmp	r3, r7
 8005a92:	4620      	mov	r0, r4
 8005a94:	4659      	mov	r1, fp
 8005a96:	f04f 020a 	mov.w	r2, #10
 8005a9a:	f04f 0300 	mov.w	r3, #0
 8005a9e:	dbea      	blt.n	8005a76 <_dtoa_r+0x56e>
 8005aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa2:	9a08      	ldr	r2, [sp, #32]
 8005aa4:	2a01      	cmp	r2, #1
 8005aa6:	bfac      	ite	ge
 8005aa8:	189b      	addge	r3, r3, r2
 8005aaa:	3301      	addlt	r3, #1
 8005aac:	461d      	mov	r5, r3
 8005aae:	f04f 0a00 	mov.w	sl, #0
 8005ab2:	4659      	mov	r1, fp
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f8cd c000 	str.w	ip, [sp]
 8005abc:	f001 ff60 	bl	8007980 <__lshift>
 8005ac0:	4641      	mov	r1, r8
 8005ac2:	4683      	mov	fp, r0
 8005ac4:	f001 ffb2 	bl	8007a2c <__mcmp>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	f8dd c000 	ldr.w	ip, [sp]
 8005ace:	f340 82ef 	ble.w	80060b0 <_dtoa_r+0xba8>
 8005ad2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005ad6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ad8:	1e6b      	subs	r3, r5, #1
 8005ada:	e004      	b.n	8005ae6 <_dtoa_r+0x5de>
 8005adc:	428b      	cmp	r3, r1
 8005ade:	f000 8275 	beq.w	8005fcc <_dtoa_r+0xac4>
 8005ae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ae6:	2a39      	cmp	r2, #57	; 0x39
 8005ae8:	f103 0501 	add.w	r5, r3, #1
 8005aec:	d0f6      	beq.n	8005adc <_dtoa_r+0x5d4>
 8005aee:	3201      	adds	r2, #1
 8005af0:	701a      	strb	r2, [r3, #0]
 8005af2:	4641      	mov	r1, r8
 8005af4:	4620      	mov	r0, r4
 8005af6:	f001 fd69 	bl	80075cc <_Bfree>
 8005afa:	2e00      	cmp	r6, #0
 8005afc:	f43f aedb 	beq.w	80058b6 <_dtoa_r+0x3ae>
 8005b00:	f1ba 0f00 	cmp.w	sl, #0
 8005b04:	d005      	beq.n	8005b12 <_dtoa_r+0x60a>
 8005b06:	45b2      	cmp	sl, r6
 8005b08:	d003      	beq.n	8005b12 <_dtoa_r+0x60a>
 8005b0a:	4651      	mov	r1, sl
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	f001 fd5d 	bl	80075cc <_Bfree>
 8005b12:	4631      	mov	r1, r6
 8005b14:	4620      	mov	r0, r4
 8005b16:	f001 fd59 	bl	80075cc <_Bfree>
 8005b1a:	e6cc      	b.n	80058b6 <_dtoa_r+0x3ae>
 8005b1c:	201c      	movs	r0, #28
 8005b1e:	e781      	b.n	8005a24 <_dtoa_r+0x51c>
 8005b20:	4b04      	ldr	r3, [pc, #16]	; (8005b34 <_dtoa_r+0x62c>)
 8005b22:	9a00      	ldr	r2, [sp, #0]
 8005b24:	1b5b      	subs	r3, r3, r5
 8005b26:	fa02 f003 	lsl.w	r0, r2, r3
 8005b2a:	e566      	b.n	80055fa <_dtoa_r+0xf2>
 8005b2c:	900d      	str	r0, [sp, #52]	; 0x34
 8005b2e:	e5ad      	b.n	800568c <_dtoa_r+0x184>
 8005b30:	40240000 	.word	0x40240000
 8005b34:	fffffbee 	.word	0xfffffbee
 8005b38:	4631      	mov	r1, r6
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	220a      	movs	r2, #10
 8005b40:	f001 fd4e 	bl	80075e0 <__multadd>
 8005b44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	4606      	mov	r6, r0
 8005b4a:	f340 840b 	ble.w	8006364 <_dtoa_r+0xe5c>
 8005b4e:	9308      	str	r3, [sp, #32]
 8005b50:	2d00      	cmp	r5, #0
 8005b52:	dd05      	ble.n	8005b60 <_dtoa_r+0x658>
 8005b54:	4631      	mov	r1, r6
 8005b56:	462a      	mov	r2, r5
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f001 ff11 	bl	8007980 <__lshift>
 8005b5e:	4606      	mov	r6, r0
 8005b60:	f1b9 0f00 	cmp.w	r9, #0
 8005b64:	f040 82ed 	bne.w	8006142 <_dtoa_r+0xc3a>
 8005b68:	46b1      	mov	r9, r6
 8005b6a:	9b08      	ldr	r3, [sp, #32]
 8005b6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	18d3      	adds	r3, r2, r3
 8005b72:	9308      	str	r3, [sp, #32]
 8005b74:	9b00      	ldr	r3, [sp, #0]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	930a      	str	r3, [sp, #40]	; 0x28
 8005b7c:	4617      	mov	r7, r2
 8005b7e:	4641      	mov	r1, r8
 8005b80:	4658      	mov	r0, fp
 8005b82:	f7ff fc2b 	bl	80053dc <quorem>
 8005b86:	4631      	mov	r1, r6
 8005b88:	4605      	mov	r5, r0
 8005b8a:	4658      	mov	r0, fp
 8005b8c:	f001 ff4e 	bl	8007a2c <__mcmp>
 8005b90:	464a      	mov	r2, r9
 8005b92:	4682      	mov	sl, r0
 8005b94:	4641      	mov	r1, r8
 8005b96:	4620      	mov	r0, r4
 8005b98:	f001 ff6c 	bl	8007a74 <__mdiff>
 8005b9c:	68c2      	ldr	r2, [r0, #12]
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8005ba4:	2a00      	cmp	r2, #0
 8005ba6:	f040 81ba 	bne.w	8005f1e <_dtoa_r+0xa16>
 8005baa:	4619      	mov	r1, r3
 8005bac:	4658      	mov	r0, fp
 8005bae:	f8cd c01c 	str.w	ip, [sp, #28]
 8005bb2:	9306      	str	r3, [sp, #24]
 8005bb4:	f001 ff3a 	bl	8007a2c <__mcmp>
 8005bb8:	9b06      	ldr	r3, [sp, #24]
 8005bba:	9000      	str	r0, [sp, #0]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f001 fd04 	bl	80075cc <_Bfree>
 8005bc4:	9a00      	ldr	r2, [sp, #0]
 8005bc6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8005bca:	b92a      	cbnz	r2, 8005bd8 <_dtoa_r+0x6d0>
 8005bcc:	9b03      	ldr	r3, [sp, #12]
 8005bce:	b91b      	cbnz	r3, 8005bd8 <_dtoa_r+0x6d0>
 8005bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 83aa 	beq.w	800632c <_dtoa_r+0xe24>
 8005bd8:	f1ba 0f00 	cmp.w	sl, #0
 8005bdc:	f2c0 824a 	blt.w	8006074 <_dtoa_r+0xb6c>
 8005be0:	d105      	bne.n	8005bee <_dtoa_r+0x6e6>
 8005be2:	9b03      	ldr	r3, [sp, #12]
 8005be4:	b91b      	cbnz	r3, 8005bee <_dtoa_r+0x6e6>
 8005be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 8243 	beq.w	8006074 <_dtoa_r+0xb6c>
 8005bee:	2a00      	cmp	r2, #0
 8005bf0:	f300 82bb 	bgt.w	800616a <_dtoa_r+0xc62>
 8005bf4:	9b08      	ldr	r3, [sp, #32]
 8005bf6:	f887 c000 	strb.w	ip, [r7]
 8005bfa:	f107 0a01 	add.w	sl, r7, #1
 8005bfe:	429f      	cmp	r7, r3
 8005c00:	4655      	mov	r5, sl
 8005c02:	f000 82be 	beq.w	8006182 <_dtoa_r+0xc7a>
 8005c06:	4659      	mov	r1, fp
 8005c08:	220a      	movs	r2, #10
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	f001 fce7 	bl	80075e0 <__multadd>
 8005c12:	454e      	cmp	r6, r9
 8005c14:	4683      	mov	fp, r0
 8005c16:	4631      	mov	r1, r6
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f04f 020a 	mov.w	r2, #10
 8005c1e:	f04f 0300 	mov.w	r3, #0
 8005c22:	f000 8176 	beq.w	8005f12 <_dtoa_r+0xa0a>
 8005c26:	f001 fcdb 	bl	80075e0 <__multadd>
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	4606      	mov	r6, r0
 8005c2e:	220a      	movs	r2, #10
 8005c30:	4620      	mov	r0, r4
 8005c32:	2300      	movs	r3, #0
 8005c34:	f001 fcd4 	bl	80075e0 <__multadd>
 8005c38:	4657      	mov	r7, sl
 8005c3a:	4681      	mov	r9, r0
 8005c3c:	e79f      	b.n	8005b7e <_dtoa_r+0x676>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c42:	f1ba 0f00 	cmp.w	sl, #0
 8005c46:	f340 820c 	ble.w	8006062 <_dtoa_r+0xb5a>
 8005c4a:	4656      	mov	r6, sl
 8005c4c:	4655      	mov	r5, sl
 8005c4e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005c52:	f8cd a020 	str.w	sl, [sp, #32]
 8005c56:	2100      	movs	r1, #0
 8005c58:	2e17      	cmp	r6, #23
 8005c5a:	6461      	str	r1, [r4, #68]	; 0x44
 8005c5c:	d90a      	bls.n	8005c74 <_dtoa_r+0x76c>
 8005c5e:	2201      	movs	r2, #1
 8005c60:	2304      	movs	r3, #4
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	f103 0014 	add.w	r0, r3, #20
 8005c68:	4286      	cmp	r6, r0
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	f102 0201 	add.w	r2, r2, #1
 8005c70:	d2f7      	bcs.n	8005c62 <_dtoa_r+0x75a>
 8005c72:	6461      	str	r1, [r4, #68]	; 0x44
 8005c74:	4620      	mov	r0, r4
 8005c76:	f001 fc83 	bl	8007580 <_Balloc>
 8005c7a:	2d0e      	cmp	r5, #14
 8005c7c:	9009      	str	r0, [sp, #36]	; 0x24
 8005c7e:	6420      	str	r0, [r4, #64]	; 0x40
 8005c80:	f63f ad55 	bhi.w	800572e <_dtoa_r+0x226>
 8005c84:	2f00      	cmp	r7, #0
 8005c86:	f43f ad52 	beq.w	800572e <_dtoa_r+0x226>
 8005c8a:	ed9d 7b00 	vldr	d7, [sp]
 8005c8e:	9905      	ldr	r1, [sp, #20]
 8005c90:	2900      	cmp	r1, #0
 8005c92:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005c96:	f340 8223 	ble.w	80060e0 <_dtoa_r+0xbd8>
 8005c9a:	4bb7      	ldr	r3, [pc, #732]	; (8005f78 <_dtoa_r+0xa70>)
 8005c9c:	f001 020f 	and.w	r2, r1, #15
 8005ca0:	110d      	asrs	r5, r1, #4
 8005ca2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ca6:	06e9      	lsls	r1, r5, #27
 8005ca8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005cac:	f140 81d2 	bpl.w	8006054 <_dtoa_r+0xb4c>
 8005cb0:	4bb2      	ldr	r3, [pc, #712]	; (8005f7c <_dtoa_r+0xa74>)
 8005cb2:	ec51 0b17 	vmov	r0, r1, d7
 8005cb6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005cba:	f004 f981 	bl	8009fc0 <__aeabi_ddiv>
 8005cbe:	e9cd 0100 	strd	r0, r1, [sp]
 8005cc2:	f005 050f 	and.w	r5, r5, #15
 8005cc6:	f04f 0803 	mov.w	r8, #3
 8005cca:	b18d      	cbz	r5, 8005cf0 <_dtoa_r+0x7e8>
 8005ccc:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8005f7c <_dtoa_r+0xa74>
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	4639      	mov	r1, r7
 8005cd4:	07ea      	lsls	r2, r5, #31
 8005cd6:	d505      	bpl.n	8005ce4 <_dtoa_r+0x7dc>
 8005cd8:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005cdc:	f004 f846 	bl	8009d6c <__aeabi_dmul>
 8005ce0:	f108 0801 	add.w	r8, r8, #1
 8005ce4:	106d      	asrs	r5, r5, #1
 8005ce6:	f109 0908 	add.w	r9, r9, #8
 8005cea:	d1f3      	bne.n	8005cd4 <_dtoa_r+0x7cc>
 8005cec:	4606      	mov	r6, r0
 8005cee:	460f      	mov	r7, r1
 8005cf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cf4:	4632      	mov	r2, r6
 8005cf6:	463b      	mov	r3, r7
 8005cf8:	f004 f962 	bl	8009fc0 <__aeabi_ddiv>
 8005cfc:	e9cd 0100 	strd	r0, r1, [sp]
 8005d00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d02:	b143      	cbz	r3, 8005d16 <_dtoa_r+0x80e>
 8005d04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	4b9d      	ldr	r3, [pc, #628]	; (8005f80 <_dtoa_r+0xa78>)
 8005d0c:	f004 faa0 	bl	800a250 <__aeabi_dcmplt>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	f040 82ae 	bne.w	8006272 <_dtoa_r+0xd6a>
 8005d16:	4640      	mov	r0, r8
 8005d18:	f003 ffc2 	bl	8009ca0 <__aeabi_i2d>
 8005d1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d20:	f004 f824 	bl	8009d6c <__aeabi_dmul>
 8005d24:	4b97      	ldr	r3, [pc, #604]	; (8005f84 <_dtoa_r+0xa7c>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	f003 fe6e 	bl	8009a08 <__adddf3>
 8005d2c:	9b08      	ldr	r3, [sp, #32]
 8005d2e:	4606      	mov	r6, r0
 8005d30:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 8162 	beq.w	8005ffe <_dtoa_r+0xaf6>
 8005d3a:	9b05      	ldr	r3, [sp, #20]
 8005d3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d40:	9314      	str	r3, [sp, #80]	; 0x50
 8005d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 8223 	beq.w	8006190 <_dtoa_r+0xc88>
 8005d4a:	4b8b      	ldr	r3, [pc, #556]	; (8005f78 <_dtoa_r+0xa70>)
 8005d4c:	498e      	ldr	r1, [pc, #568]	; (8005f88 <_dtoa_r+0xa80>)
 8005d4e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005d52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d56:	2000      	movs	r0, #0
 8005d58:	f004 f932 	bl	8009fc0 <__aeabi_ddiv>
 8005d5c:	4632      	mov	r2, r6
 8005d5e:	463b      	mov	r3, r7
 8005d60:	f003 fe50 	bl	8009a04 <__aeabi_dsub>
 8005d64:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005d68:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8005d6c:	4639      	mov	r1, r7
 8005d6e:	4630      	mov	r0, r6
 8005d70:	f004 fa96 	bl	800a2a0 <__aeabi_d2iz>
 8005d74:	4605      	mov	r5, r0
 8005d76:	f003 ff93 	bl	8009ca0 <__aeabi_i2d>
 8005d7a:	3530      	adds	r5, #48	; 0x30
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4630      	mov	r0, r6
 8005d82:	4639      	mov	r1, r7
 8005d84:	f003 fe3e 	bl	8009a04 <__aeabi_dsub>
 8005d88:	fa5f f885 	uxtb.w	r8, r5
 8005d8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d8e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005d92:	f885 8000 	strb.w	r8, [r5]
 8005d96:	4606      	mov	r6, r0
 8005d98:	460f      	mov	r7, r1
 8005d9a:	3501      	adds	r5, #1
 8005d9c:	f004 fa58 	bl	800a250 <__aeabi_dcmplt>
 8005da0:	2800      	cmp	r0, #0
 8005da2:	f040 82a7 	bne.w	80062f4 <_dtoa_r+0xdec>
 8005da6:	4632      	mov	r2, r6
 8005da8:	463b      	mov	r3, r7
 8005daa:	2000      	movs	r0, #0
 8005dac:	4974      	ldr	r1, [pc, #464]	; (8005f80 <_dtoa_r+0xa78>)
 8005dae:	f003 fe29 	bl	8009a04 <__aeabi_dsub>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005dba:	f004 fa67 	bl	800a28c <__aeabi_dcmpgt>
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	f040 82ad 	bne.w	800631e <_dtoa_r+0xe16>
 8005dc4:	f1b9 0f01 	cmp.w	r9, #1
 8005dc8:	f340 8184 	ble.w	80060d4 <_dtoa_r+0xbcc>
 8005dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dce:	f8cd b000 	str.w	fp, [sp]
 8005dd2:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 8005dd6:	4499      	add	r9, r3
 8005dd8:	46a0      	mov	r8, r4
 8005dda:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8005dde:	e00d      	b.n	8005dfc <_dtoa_r+0x8f4>
 8005de0:	2000      	movs	r0, #0
 8005de2:	4967      	ldr	r1, [pc, #412]	; (8005f80 <_dtoa_r+0xa78>)
 8005de4:	f003 fe0e 	bl	8009a04 <__aeabi_dsub>
 8005de8:	4652      	mov	r2, sl
 8005dea:	465b      	mov	r3, fp
 8005dec:	f004 fa30 	bl	800a250 <__aeabi_dcmplt>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	f040 828f 	bne.w	8006314 <_dtoa_r+0xe0c>
 8005df6:	454d      	cmp	r5, r9
 8005df8:	f000 8167 	beq.w	80060ca <_dtoa_r+0xbc2>
 8005dfc:	4650      	mov	r0, sl
 8005dfe:	4659      	mov	r1, fp
 8005e00:	2200      	movs	r2, #0
 8005e02:	4b62      	ldr	r3, [pc, #392]	; (8005f8c <_dtoa_r+0xa84>)
 8005e04:	f003 ffb2 	bl	8009d6c <__aeabi_dmul>
 8005e08:	2200      	movs	r2, #0
 8005e0a:	4b60      	ldr	r3, [pc, #384]	; (8005f8c <_dtoa_r+0xa84>)
 8005e0c:	4682      	mov	sl, r0
 8005e0e:	468b      	mov	fp, r1
 8005e10:	4630      	mov	r0, r6
 8005e12:	4639      	mov	r1, r7
 8005e14:	f003 ffaa 	bl	8009d6c <__aeabi_dmul>
 8005e18:	460f      	mov	r7, r1
 8005e1a:	4606      	mov	r6, r0
 8005e1c:	f004 fa40 	bl	800a2a0 <__aeabi_d2iz>
 8005e20:	4604      	mov	r4, r0
 8005e22:	f003 ff3d 	bl	8009ca0 <__aeabi_i2d>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	4639      	mov	r1, r7
 8005e2e:	f003 fde9 	bl	8009a04 <__aeabi_dsub>
 8005e32:	3430      	adds	r4, #48	; 0x30
 8005e34:	b2e4      	uxtb	r4, r4
 8005e36:	4652      	mov	r2, sl
 8005e38:	465b      	mov	r3, fp
 8005e3a:	f805 4b01 	strb.w	r4, [r5], #1
 8005e3e:	4606      	mov	r6, r0
 8005e40:	460f      	mov	r7, r1
 8005e42:	f004 fa05 	bl	800a250 <__aeabi_dcmplt>
 8005e46:	4632      	mov	r2, r6
 8005e48:	463b      	mov	r3, r7
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d0c8      	beq.n	8005de0 <_dtoa_r+0x8d8>
 8005e4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e50:	f8dd b000 	ldr.w	fp, [sp]
 8005e54:	9305      	str	r3, [sp, #20]
 8005e56:	4644      	mov	r4, r8
 8005e58:	e52d      	b.n	80058b6 <_dtoa_r+0x3ae>
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e5e:	9b05      	ldr	r3, [sp, #20]
 8005e60:	4453      	add	r3, sl
 8005e62:	930e      	str	r3, [sp, #56]	; 0x38
 8005e64:	3301      	adds	r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	9308      	str	r3, [sp, #32]
 8005e6a:	f340 8101 	ble.w	8006070 <_dtoa_r+0xb68>
 8005e6e:	9d08      	ldr	r5, [sp, #32]
 8005e70:	462e      	mov	r6, r5
 8005e72:	e6f0      	b.n	8005c56 <_dtoa_r+0x74e>
 8005e74:	2300      	movs	r3, #0
 8005e76:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e78:	e6e3      	b.n	8005c42 <_dtoa_r+0x73a>
 8005e7a:	9b08      	ldr	r3, [sp, #32]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f73f ac67 	bgt.w	8005750 <_dtoa_r+0x248>
 8005e82:	f040 80d4 	bne.w	800602e <_dtoa_r+0xb26>
 8005e86:	4640      	mov	r0, r8
 8005e88:	2200      	movs	r2, #0
 8005e8a:	4b41      	ldr	r3, [pc, #260]	; (8005f90 <_dtoa_r+0xa88>)
 8005e8c:	4649      	mov	r1, r9
 8005e8e:	f003 ff6d 	bl	8009d6c <__aeabi_dmul>
 8005e92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e96:	f004 f9ef 	bl	800a278 <__aeabi_dcmpge>
 8005e9a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e9e:	4646      	mov	r6, r8
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	f000 808b 	beq.w	8005fbc <_dtoa_r+0xab4>
 8005ea6:	ea6f 030a 	mvn.w	r3, sl
 8005eaa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005eac:	9305      	str	r3, [sp, #20]
 8005eae:	4641      	mov	r1, r8
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f001 fb8b 	bl	80075cc <_Bfree>
 8005eb6:	2e00      	cmp	r6, #0
 8005eb8:	f47f ae2b 	bne.w	8005b12 <_dtoa_r+0x60a>
 8005ebc:	e4fb      	b.n	80058b6 <_dtoa_r+0x3ae>
 8005ebe:	4659      	mov	r1, fp
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f001 fd0d 	bl	80078e0 <__pow5mult>
 8005ec6:	4683      	mov	fp, r0
 8005ec8:	e554      	b.n	8005974 <_dtoa_r+0x46c>
 8005eca:	9b00      	ldr	r3, [sp, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f47f ad63 	bne.w	8005998 <_dtoa_r+0x490>
 8005ed2:	9b01      	ldr	r3, [sp, #4]
 8005ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f47f ad90 	bne.w	80059fe <_dtoa_r+0x4f6>
 8005ede:	9b01      	ldr	r3, [sp, #4]
 8005ee0:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8005ee4:	0d3f      	lsrs	r7, r7, #20
 8005ee6:	053f      	lsls	r7, r7, #20
 8005ee8:	2f00      	cmp	r7, #0
 8005eea:	f000 821c 	beq.w	8006326 <_dtoa_r+0xe1e>
 8005eee:	9b07      	ldr	r3, [sp, #28]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	9307      	str	r3, [sp, #28]
 8005ef4:	9b06      	ldr	r3, [sp, #24]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	9306      	str	r3, [sp, #24]
 8005efa:	f04f 0901 	mov.w	r9, #1
 8005efe:	e580      	b.n	8005a02 <_dtoa_r+0x4fa>
 8005f00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f02:	2a00      	cmp	r2, #0
 8005f04:	f000 81a7 	beq.w	8006256 <_dtoa_r+0xd4e>
 8005f08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f0c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005f0e:	9d07      	ldr	r5, [sp, #28]
 8005f10:	e4f9      	b.n	8005906 <_dtoa_r+0x3fe>
 8005f12:	f001 fb65 	bl	80075e0 <__multadd>
 8005f16:	4657      	mov	r7, sl
 8005f18:	4606      	mov	r6, r0
 8005f1a:	4681      	mov	r9, r0
 8005f1c:	e62f      	b.n	8005b7e <_dtoa_r+0x676>
 8005f1e:	4601      	mov	r1, r0
 8005f20:	4620      	mov	r0, r4
 8005f22:	f8cd c000 	str.w	ip, [sp]
 8005f26:	f001 fb51 	bl	80075cc <_Bfree>
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f8dd c000 	ldr.w	ip, [sp]
 8005f30:	e652      	b.n	8005bd8 <_dtoa_r+0x6d0>
 8005f32:	4658      	mov	r0, fp
 8005f34:	4641      	mov	r1, r8
 8005f36:	f001 fd79 	bl	8007a2c <__mcmp>
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	f6bf ad8f 	bge.w	8005a5e <_dtoa_r+0x556>
 8005f40:	9f05      	ldr	r7, [sp, #20]
 8005f42:	4659      	mov	r1, fp
 8005f44:	2300      	movs	r3, #0
 8005f46:	4620      	mov	r0, r4
 8005f48:	220a      	movs	r2, #10
 8005f4a:	3f01      	subs	r7, #1
 8005f4c:	9705      	str	r7, [sp, #20]
 8005f4e:	f001 fb47 	bl	80075e0 <__multadd>
 8005f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f54:	4683      	mov	fp, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f47f adee 	bne.w	8005b38 <_dtoa_r+0x630>
 8005f5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f340 81f5 	ble.w	800634e <_dtoa_r+0xe46>
 8005f64:	9308      	str	r3, [sp, #32]
 8005f66:	e581      	b.n	8005a6c <_dtoa_r+0x564>
 8005f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f6a:	f7ff bb04 	b.w	8005576 <_dtoa_r+0x6e>
 8005f6e:	9b00      	ldr	r3, [sp, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f47f ad44 	bne.w	80059fe <_dtoa_r+0x4f6>
 8005f76:	e7ac      	b.n	8005ed2 <_dtoa_r+0x9ca>
 8005f78:	0800ad48 	.word	0x0800ad48
 8005f7c:	0800ae20 	.word	0x0800ae20
 8005f80:	3ff00000 	.word	0x3ff00000
 8005f84:	401c0000 	.word	0x401c0000
 8005f88:	3fe00000 	.word	0x3fe00000
 8005f8c:	40240000 	.word	0x40240000
 8005f90:	40140000 	.word	0x40140000
 8005f94:	9b03      	ldr	r3, [sp, #12]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	f77f ad65 	ble.w	8005a66 <_dtoa_r+0x55e>
 8005f9c:	9b08      	ldr	r3, [sp, #32]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d181      	bne.n	8005ea6 <_dtoa_r+0x99e>
 8005fa2:	4641      	mov	r1, r8
 8005fa4:	2205      	movs	r2, #5
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f001 fb1a 	bl	80075e0 <__multadd>
 8005fac:	4680      	mov	r8, r0
 8005fae:	4641      	mov	r1, r8
 8005fb0:	4658      	mov	r0, fp
 8005fb2:	f001 fd3b 	bl	8007a2c <__mcmp>
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	f77f af75 	ble.w	8005ea6 <_dtoa_r+0x99e>
 8005fbc:	9a05      	ldr	r2, [sp, #20]
 8005fbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fc0:	2331      	movs	r3, #49	; 0x31
 8005fc2:	3201      	adds	r2, #1
 8005fc4:	9205      	str	r2, [sp, #20]
 8005fc6:	700b      	strb	r3, [r1, #0]
 8005fc8:	1c4d      	adds	r5, r1, #1
 8005fca:	e770      	b.n	8005eae <_dtoa_r+0x9a6>
 8005fcc:	9a05      	ldr	r2, [sp, #20]
 8005fce:	3201      	adds	r2, #1
 8005fd0:	9205      	str	r2, [sp, #20]
 8005fd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fd4:	2331      	movs	r3, #49	; 0x31
 8005fd6:	7013      	strb	r3, [r2, #0]
 8005fd8:	e58b      	b.n	8005af2 <_dtoa_r+0x5ea>
 8005fda:	f8dd b000 	ldr.w	fp, [sp]
 8005fde:	9c03      	ldr	r4, [sp, #12]
 8005fe0:	e469      	b.n	80058b6 <_dtoa_r+0x3ae>
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	f003 fe5c 	bl	8009ca0 <__aeabi_i2d>
 8005fe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fec:	f003 febe 	bl	8009d6c <__aeabi_dmul>
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	4bc2      	ldr	r3, [pc, #776]	; (80062fc <_dtoa_r+0xdf4>)
 8005ff4:	f003 fd08 	bl	8009a08 <__adddf3>
 8005ff8:	4606      	mov	r6, r0
 8005ffa:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8005ffe:	2200      	movs	r2, #0
 8006000:	4bbf      	ldr	r3, [pc, #764]	; (8006300 <_dtoa_r+0xdf8>)
 8006002:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006006:	f003 fcfd 	bl	8009a04 <__aeabi_dsub>
 800600a:	4632      	mov	r2, r6
 800600c:	463b      	mov	r3, r7
 800600e:	4680      	mov	r8, r0
 8006010:	4689      	mov	r9, r1
 8006012:	f004 f93b 	bl	800a28c <__aeabi_dcmpgt>
 8006016:	2800      	cmp	r0, #0
 8006018:	f040 80b6 	bne.w	8006188 <_dtoa_r+0xc80>
 800601c:	4632      	mov	r2, r6
 800601e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006022:	4640      	mov	r0, r8
 8006024:	4649      	mov	r1, r9
 8006026:	f004 f913 	bl	800a250 <__aeabi_dcmplt>
 800602a:	2800      	cmp	r0, #0
 800602c:	d052      	beq.n	80060d4 <_dtoa_r+0xbcc>
 800602e:	f04f 0800 	mov.w	r8, #0
 8006032:	4646      	mov	r6, r8
 8006034:	e737      	b.n	8005ea6 <_dtoa_r+0x99e>
 8006036:	4659      	mov	r1, fp
 8006038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800603a:	4620      	mov	r0, r4
 800603c:	f001 fc50 	bl	80078e0 <__pow5mult>
 8006040:	4683      	mov	fp, r0
 8006042:	e497      	b.n	8005974 <_dtoa_r+0x46c>
 8006044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006046:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006048:	970a      	str	r7, [sp, #40]	; 0x28
 800604a:	1afb      	subs	r3, r7, r3
 800604c:	441a      	add	r2, r3
 800604e:	920c      	str	r2, [sp, #48]	; 0x30
 8006050:	2700      	movs	r7, #0
 8006052:	e452      	b.n	80058fa <_dtoa_r+0x3f2>
 8006054:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8006058:	f04f 0802 	mov.w	r8, #2
 800605c:	ed8d 7b00 	vstr	d7, [sp]
 8006060:	e633      	b.n	8005cca <_dtoa_r+0x7c2>
 8006062:	2501      	movs	r5, #1
 8006064:	950e      	str	r5, [sp, #56]	; 0x38
 8006066:	9508      	str	r5, [sp, #32]
 8006068:	46aa      	mov	sl, r5
 800606a:	2100      	movs	r1, #0
 800606c:	6461      	str	r1, [r4, #68]	; 0x44
 800606e:	e601      	b.n	8005c74 <_dtoa_r+0x76c>
 8006070:	461d      	mov	r5, r3
 8006072:	e7fa      	b.n	800606a <_dtoa_r+0xb62>
 8006074:	2a00      	cmp	r2, #0
 8006076:	dd15      	ble.n	80060a4 <_dtoa_r+0xb9c>
 8006078:	4659      	mov	r1, fp
 800607a:	2201      	movs	r2, #1
 800607c:	4620      	mov	r0, r4
 800607e:	f8cd c000 	str.w	ip, [sp]
 8006082:	f001 fc7d 	bl	8007980 <__lshift>
 8006086:	4641      	mov	r1, r8
 8006088:	4683      	mov	fp, r0
 800608a:	f001 fccf 	bl	8007a2c <__mcmp>
 800608e:	2800      	cmp	r0, #0
 8006090:	f8dd c000 	ldr.w	ip, [sp]
 8006094:	f340 8154 	ble.w	8006340 <_dtoa_r+0xe38>
 8006098:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 800609c:	f000 8111 	beq.w	80062c2 <_dtoa_r+0xdba>
 80060a0:	f10c 0c01 	add.w	ip, ip, #1
 80060a4:	46b2      	mov	sl, r6
 80060a6:	f887 c000 	strb.w	ip, [r7]
 80060aa:	1c7d      	adds	r5, r7, #1
 80060ac:	464e      	mov	r6, r9
 80060ae:	e520      	b.n	8005af2 <_dtoa_r+0x5ea>
 80060b0:	d104      	bne.n	80060bc <_dtoa_r+0xbb4>
 80060b2:	f01c 0f01 	tst.w	ip, #1
 80060b6:	d001      	beq.n	80060bc <_dtoa_r+0xbb4>
 80060b8:	e50b      	b.n	8005ad2 <_dtoa_r+0x5ca>
 80060ba:	4615      	mov	r5, r2
 80060bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060c0:	2b30      	cmp	r3, #48	; 0x30
 80060c2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80060c6:	d0f8      	beq.n	80060ba <_dtoa_r+0xbb2>
 80060c8:	e513      	b.n	8005af2 <_dtoa_r+0x5ea>
 80060ca:	f8dd b000 	ldr.w	fp, [sp]
 80060ce:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80060d2:	4644      	mov	r4, r8
 80060d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060d8:	e9cd 2300 	strd	r2, r3, [sp]
 80060dc:	f7ff bb27 	b.w	800572e <_dtoa_r+0x226>
 80060e0:	9b05      	ldr	r3, [sp, #20]
 80060e2:	425d      	negs	r5, r3
 80060e4:	2d00      	cmp	r5, #0
 80060e6:	f000 80bd 	beq.w	8006264 <_dtoa_r+0xd5c>
 80060ea:	4b86      	ldr	r3, [pc, #536]	; (8006304 <_dtoa_r+0xdfc>)
 80060ec:	f005 020f 	and.w	r2, r5, #15
 80060f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060fc:	f003 fe36 	bl	8009d6c <__aeabi_dmul>
 8006100:	112d      	asrs	r5, r5, #4
 8006102:	e9cd 0100 	strd	r0, r1, [sp]
 8006106:	f000 8127 	beq.w	8006358 <_dtoa_r+0xe50>
 800610a:	4e7f      	ldr	r6, [pc, #508]	; (8006308 <_dtoa_r+0xe00>)
 800610c:	f04f 0802 	mov.w	r8, #2
 8006110:	07eb      	lsls	r3, r5, #31
 8006112:	d505      	bpl.n	8006120 <_dtoa_r+0xc18>
 8006114:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006118:	f003 fe28 	bl	8009d6c <__aeabi_dmul>
 800611c:	f108 0801 	add.w	r8, r8, #1
 8006120:	106d      	asrs	r5, r5, #1
 8006122:	f106 0608 	add.w	r6, r6, #8
 8006126:	d1f3      	bne.n	8006110 <_dtoa_r+0xc08>
 8006128:	e9cd 0100 	strd	r0, r1, [sp]
 800612c:	e5e8      	b.n	8005d00 <_dtoa_r+0x7f8>
 800612e:	9a05      	ldr	r2, [sp, #20]
 8006130:	3201      	adds	r2, #1
 8006132:	9205      	str	r2, [sp, #20]
 8006134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006136:	2330      	movs	r3, #48	; 0x30
 8006138:	7013      	strb	r3, [r2, #0]
 800613a:	2331      	movs	r3, #49	; 0x31
 800613c:	7013      	strb	r3, [r2, #0]
 800613e:	f7ff bbba 	b.w	80058b6 <_dtoa_r+0x3ae>
 8006142:	6871      	ldr	r1, [r6, #4]
 8006144:	4620      	mov	r0, r4
 8006146:	f001 fa1b 	bl	8007580 <_Balloc>
 800614a:	6933      	ldr	r3, [r6, #16]
 800614c:	1c9a      	adds	r2, r3, #2
 800614e:	4605      	mov	r5, r0
 8006150:	0092      	lsls	r2, r2, #2
 8006152:	f106 010c 	add.w	r1, r6, #12
 8006156:	300c      	adds	r0, #12
 8006158:	f7fd fc86 	bl	8003a68 <memcpy>
 800615c:	4620      	mov	r0, r4
 800615e:	4629      	mov	r1, r5
 8006160:	2201      	movs	r2, #1
 8006162:	f001 fc0d 	bl	8007980 <__lshift>
 8006166:	4681      	mov	r9, r0
 8006168:	e4ff      	b.n	8005b6a <_dtoa_r+0x662>
 800616a:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 800616e:	f000 80a8 	beq.w	80062c2 <_dtoa_r+0xdba>
 8006172:	f10c 0c01 	add.w	ip, ip, #1
 8006176:	46b2      	mov	sl, r6
 8006178:	f887 c000 	strb.w	ip, [r7]
 800617c:	1c7d      	adds	r5, r7, #1
 800617e:	464e      	mov	r6, r9
 8006180:	e4b7      	b.n	8005af2 <_dtoa_r+0x5ea>
 8006182:	46b2      	mov	sl, r6
 8006184:	464e      	mov	r6, r9
 8006186:	e494      	b.n	8005ab2 <_dtoa_r+0x5aa>
 8006188:	f04f 0800 	mov.w	r8, #0
 800618c:	4646      	mov	r6, r8
 800618e:	e715      	b.n	8005fbc <_dtoa_r+0xab4>
 8006190:	495c      	ldr	r1, [pc, #368]	; (8006304 <_dtoa_r+0xdfc>)
 8006192:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8006196:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800619a:	4632      	mov	r2, r6
 800619c:	9315      	str	r3, [sp, #84]	; 0x54
 800619e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061a2:	463b      	mov	r3, r7
 80061a4:	f003 fde2 	bl	8009d6c <__aeabi_dmul>
 80061a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80061ac:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80061b0:	4639      	mov	r1, r7
 80061b2:	4630      	mov	r0, r6
 80061b4:	f004 f874 	bl	800a2a0 <__aeabi_d2iz>
 80061b8:	4605      	mov	r5, r0
 80061ba:	f003 fd71 	bl	8009ca0 <__aeabi_i2d>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	4630      	mov	r0, r6
 80061c4:	4639      	mov	r1, r7
 80061c6:	f003 fc1d 	bl	8009a04 <__aeabi_dsub>
 80061ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061cc:	3530      	adds	r5, #48	; 0x30
 80061ce:	f1b9 0f01 	cmp.w	r9, #1
 80061d2:	7015      	strb	r5, [r2, #0]
 80061d4:	4606      	mov	r6, r0
 80061d6:	460f      	mov	r7, r1
 80061d8:	f102 0501 	add.w	r5, r2, #1
 80061dc:	d023      	beq.n	8006226 <_dtoa_r+0xd1e>
 80061de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e0:	f8cd b000 	str.w	fp, [sp]
 80061e4:	444b      	add	r3, r9
 80061e6:	4698      	mov	r8, r3
 80061e8:	46a9      	mov	r9, r5
 80061ea:	46ab      	mov	fp, r5
 80061ec:	2200      	movs	r2, #0
 80061ee:	4b47      	ldr	r3, [pc, #284]	; (800630c <_dtoa_r+0xe04>)
 80061f0:	f003 fdbc 	bl	8009d6c <__aeabi_dmul>
 80061f4:	460f      	mov	r7, r1
 80061f6:	4606      	mov	r6, r0
 80061f8:	f004 f852 	bl	800a2a0 <__aeabi_d2iz>
 80061fc:	4605      	mov	r5, r0
 80061fe:	f003 fd4f 	bl	8009ca0 <__aeabi_i2d>
 8006202:	3530      	adds	r5, #48	; 0x30
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4630      	mov	r0, r6
 800620a:	4639      	mov	r1, r7
 800620c:	f003 fbfa 	bl	8009a04 <__aeabi_dsub>
 8006210:	f809 5b01 	strb.w	r5, [r9], #1
 8006214:	45c1      	cmp	r9, r8
 8006216:	d1e9      	bne.n	80061ec <_dtoa_r+0xce4>
 8006218:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800621a:	465d      	mov	r5, fp
 800621c:	f8dd b000 	ldr.w	fp, [sp]
 8006220:	4606      	mov	r6, r0
 8006222:	460f      	mov	r7, r1
 8006224:	441d      	add	r5, r3
 8006226:	2200      	movs	r2, #0
 8006228:	4b39      	ldr	r3, [pc, #228]	; (8006310 <_dtoa_r+0xe08>)
 800622a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800622e:	f003 fbeb 	bl	8009a08 <__adddf3>
 8006232:	4632      	mov	r2, r6
 8006234:	463b      	mov	r3, r7
 8006236:	f004 f80b 	bl	800a250 <__aeabi_dcmplt>
 800623a:	2800      	cmp	r0, #0
 800623c:	d047      	beq.n	80062ce <_dtoa_r+0xdc6>
 800623e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006240:	9305      	str	r3, [sp, #20]
 8006242:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8006246:	f7ff bb24 	b.w	8005892 <_dtoa_r+0x38a>
 800624a:	9b07      	ldr	r3, [sp, #28]
 800624c:	9a08      	ldr	r2, [sp, #32]
 800624e:	1a9d      	subs	r5, r3, r2
 8006250:	2300      	movs	r3, #0
 8006252:	f7ff bb58 	b.w	8005906 <_dtoa_r+0x3fe>
 8006256:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006258:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800625a:	9d07      	ldr	r5, [sp, #28]
 800625c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006260:	f7ff bb51 	b.w	8005906 <_dtoa_r+0x3fe>
 8006264:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8006268:	f04f 0802 	mov.w	r8, #2
 800626c:	ed8d 7b00 	vstr	d7, [sp]
 8006270:	e546      	b.n	8005d00 <_dtoa_r+0x7f8>
 8006272:	9b08      	ldr	r3, [sp, #32]
 8006274:	2b00      	cmp	r3, #0
 8006276:	f43f aeb4 	beq.w	8005fe2 <_dtoa_r+0xada>
 800627a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800627c:	2d00      	cmp	r5, #0
 800627e:	f77f af29 	ble.w	80060d4 <_dtoa_r+0xbcc>
 8006282:	2200      	movs	r2, #0
 8006284:	4b21      	ldr	r3, [pc, #132]	; (800630c <_dtoa_r+0xe04>)
 8006286:	e9dd 0100 	ldrd	r0, r1, [sp]
 800628a:	f003 fd6f 	bl	8009d6c <__aeabi_dmul>
 800628e:	4606      	mov	r6, r0
 8006290:	460f      	mov	r7, r1
 8006292:	f108 0001 	add.w	r0, r8, #1
 8006296:	e9cd 6700 	strd	r6, r7, [sp]
 800629a:	f003 fd01 	bl	8009ca0 <__aeabi_i2d>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4630      	mov	r0, r6
 80062a4:	4639      	mov	r1, r7
 80062a6:	f003 fd61 	bl	8009d6c <__aeabi_dmul>
 80062aa:	4b14      	ldr	r3, [pc, #80]	; (80062fc <_dtoa_r+0xdf4>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	f003 fbab 	bl	8009a08 <__adddf3>
 80062b2:	9b05      	ldr	r3, [sp, #20]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	4606      	mov	r6, r0
 80062b8:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80062bc:	9314      	str	r3, [sp, #80]	; 0x50
 80062be:	46a9      	mov	r9, r5
 80062c0:	e53f      	b.n	8005d42 <_dtoa_r+0x83a>
 80062c2:	2239      	movs	r2, #57	; 0x39
 80062c4:	46b2      	mov	sl, r6
 80062c6:	703a      	strb	r2, [r7, #0]
 80062c8:	464e      	mov	r6, r9
 80062ca:	1c7d      	adds	r5, r7, #1
 80062cc:	e403      	b.n	8005ad6 <_dtoa_r+0x5ce>
 80062ce:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80062d2:	2000      	movs	r0, #0
 80062d4:	490e      	ldr	r1, [pc, #56]	; (8006310 <_dtoa_r+0xe08>)
 80062d6:	f003 fb95 	bl	8009a04 <__aeabi_dsub>
 80062da:	4632      	mov	r2, r6
 80062dc:	463b      	mov	r3, r7
 80062de:	f003 ffd5 	bl	800a28c <__aeabi_dcmpgt>
 80062e2:	b908      	cbnz	r0, 80062e8 <_dtoa_r+0xde0>
 80062e4:	e6f6      	b.n	80060d4 <_dtoa_r+0xbcc>
 80062e6:	4615      	mov	r5, r2
 80062e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80062ec:	2b30      	cmp	r3, #48	; 0x30
 80062ee:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80062f2:	d0f8      	beq.n	80062e6 <_dtoa_r+0xdde>
 80062f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062f6:	9305      	str	r3, [sp, #20]
 80062f8:	f7ff badd 	b.w	80058b6 <_dtoa_r+0x3ae>
 80062fc:	401c0000 	.word	0x401c0000
 8006300:	40140000 	.word	0x40140000
 8006304:	0800ad48 	.word	0x0800ad48
 8006308:	0800ae20 	.word	0x0800ae20
 800630c:	40240000 	.word	0x40240000
 8006310:	3fe00000 	.word	0x3fe00000
 8006314:	4643      	mov	r3, r8
 8006316:	f8dd b000 	ldr.w	fp, [sp]
 800631a:	46a0      	mov	r8, r4
 800631c:	461c      	mov	r4, r3
 800631e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006320:	9305      	str	r3, [sp, #20]
 8006322:	f7ff bab6 	b.w	8005892 <_dtoa_r+0x38a>
 8006326:	46b9      	mov	r9, r7
 8006328:	f7ff bb6b 	b.w	8005a02 <_dtoa_r+0x4fa>
 800632c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8006330:	d0c7      	beq.n	80062c2 <_dtoa_r+0xdba>
 8006332:	f1ba 0f00 	cmp.w	sl, #0
 8006336:	f77f aeb5 	ble.w	80060a4 <_dtoa_r+0xb9c>
 800633a:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 800633e:	e6b1      	b.n	80060a4 <_dtoa_r+0xb9c>
 8006340:	f47f aeb0 	bne.w	80060a4 <_dtoa_r+0xb9c>
 8006344:	f01c 0f01 	tst.w	ip, #1
 8006348:	f43f aeac 	beq.w	80060a4 <_dtoa_r+0xb9c>
 800634c:	e6a4      	b.n	8006098 <_dtoa_r+0xb90>
 800634e:	9b03      	ldr	r3, [sp, #12]
 8006350:	2b02      	cmp	r3, #2
 8006352:	dc04      	bgt.n	800635e <_dtoa_r+0xe56>
 8006354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006356:	e605      	b.n	8005f64 <_dtoa_r+0xa5c>
 8006358:	f04f 0802 	mov.w	r8, #2
 800635c:	e4d0      	b.n	8005d00 <_dtoa_r+0x7f8>
 800635e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006360:	9308      	str	r3, [sp, #32]
 8006362:	e61b      	b.n	8005f9c <_dtoa_r+0xa94>
 8006364:	9b03      	ldr	r3, [sp, #12]
 8006366:	2b02      	cmp	r3, #2
 8006368:	dcf9      	bgt.n	800635e <_dtoa_r+0xe56>
 800636a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800636c:	f7ff bbef 	b.w	8005b4e <_dtoa_r+0x646>
 8006370:	2500      	movs	r5, #0
 8006372:	6465      	str	r5, [r4, #68]	; 0x44
 8006374:	4629      	mov	r1, r5
 8006376:	4620      	mov	r0, r4
 8006378:	f001 f902 	bl	8007580 <_Balloc>
 800637c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006380:	9308      	str	r3, [sp, #32]
 8006382:	930e      	str	r3, [sp, #56]	; 0x38
 8006384:	2301      	movs	r3, #1
 8006386:	9009      	str	r0, [sp, #36]	; 0x24
 8006388:	46aa      	mov	sl, r5
 800638a:	6420      	str	r0, [r4, #64]	; 0x40
 800638c:	930b      	str	r3, [sp, #44]	; 0x2c
 800638e:	f7ff b9ce 	b.w	800572e <_dtoa_r+0x226>
 8006392:	f43f ab4e 	beq.w	8005a32 <_dtoa_r+0x52a>
 8006396:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800639a:	f7ff bb43 	b.w	8005a24 <_dtoa_r+0x51c>
 800639e:	2301      	movs	r3, #1
 80063a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80063a2:	e55c      	b.n	8005e5e <_dtoa_r+0x956>
 80063a4:	2701      	movs	r7, #1
 80063a6:	f7ff b98d 	b.w	80056c4 <_dtoa_r+0x1bc>
 80063aa:	bf00      	nop

080063ac <__sflush_r>:
 80063ac:	898b      	ldrh	r3, [r1, #12]
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063b4:	460d      	mov	r5, r1
 80063b6:	0711      	lsls	r1, r2, #28
 80063b8:	4680      	mov	r8, r0
 80063ba:	d43c      	bmi.n	8006436 <__sflush_r+0x8a>
 80063bc:	686a      	ldr	r2, [r5, #4]
 80063be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80063c2:	2a00      	cmp	r2, #0
 80063c4:	81ab      	strh	r3, [r5, #12]
 80063c6:	dd65      	ble.n	8006494 <__sflush_r+0xe8>
 80063c8:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80063ca:	2e00      	cmp	r6, #0
 80063cc:	d04b      	beq.n	8006466 <__sflush_r+0xba>
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80063d4:	2100      	movs	r1, #0
 80063d6:	b292      	uxth	r2, r2
 80063d8:	f8d8 4000 	ldr.w	r4, [r8]
 80063dc:	f8c8 1000 	str.w	r1, [r8]
 80063e0:	2a00      	cmp	r2, #0
 80063e2:	d05b      	beq.n	800649c <__sflush_r+0xf0>
 80063e4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80063e6:	075f      	lsls	r7, r3, #29
 80063e8:	d505      	bpl.n	80063f6 <__sflush_r+0x4a>
 80063ea:	6869      	ldr	r1, [r5, #4]
 80063ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80063ee:	1a52      	subs	r2, r2, r1
 80063f0:	b10b      	cbz	r3, 80063f6 <__sflush_r+0x4a>
 80063f2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80063f4:	1ad2      	subs	r2, r2, r3
 80063f6:	4640      	mov	r0, r8
 80063f8:	69e9      	ldr	r1, [r5, #28]
 80063fa:	2300      	movs	r3, #0
 80063fc:	47b0      	blx	r6
 80063fe:	1c46      	adds	r6, r0, #1
 8006400:	d056      	beq.n	80064b0 <__sflush_r+0x104>
 8006402:	89ab      	ldrh	r3, [r5, #12]
 8006404:	692a      	ldr	r2, [r5, #16]
 8006406:	602a      	str	r2, [r5, #0]
 8006408:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800640c:	b29b      	uxth	r3, r3
 800640e:	2200      	movs	r2, #0
 8006410:	606a      	str	r2, [r5, #4]
 8006412:	04da      	lsls	r2, r3, #19
 8006414:	81ab      	strh	r3, [r5, #12]
 8006416:	d43b      	bmi.n	8006490 <__sflush_r+0xe4>
 8006418:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800641a:	f8c8 4000 	str.w	r4, [r8]
 800641e:	b311      	cbz	r1, 8006466 <__sflush_r+0xba>
 8006420:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8006424:	4299      	cmp	r1, r3
 8006426:	d002      	beq.n	800642e <__sflush_r+0x82>
 8006428:	4640      	mov	r0, r8
 800642a:	f000 f9ff 	bl	800682c <_free_r>
 800642e:	2000      	movs	r0, #0
 8006430:	6328      	str	r0, [r5, #48]	; 0x30
 8006432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006436:	692e      	ldr	r6, [r5, #16]
 8006438:	b1ae      	cbz	r6, 8006466 <__sflush_r+0xba>
 800643a:	682c      	ldr	r4, [r5, #0]
 800643c:	602e      	str	r6, [r5, #0]
 800643e:	0791      	lsls	r1, r2, #30
 8006440:	bf0c      	ite	eq
 8006442:	696b      	ldreq	r3, [r5, #20]
 8006444:	2300      	movne	r3, #0
 8006446:	1ba4      	subs	r4, r4, r6
 8006448:	60ab      	str	r3, [r5, #8]
 800644a:	e00a      	b.n	8006462 <__sflush_r+0xb6>
 800644c:	4632      	mov	r2, r6
 800644e:	4623      	mov	r3, r4
 8006450:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8006452:	69e9      	ldr	r1, [r5, #28]
 8006454:	4640      	mov	r0, r8
 8006456:	47b8      	blx	r7
 8006458:	2800      	cmp	r0, #0
 800645a:	eba4 0400 	sub.w	r4, r4, r0
 800645e:	4406      	add	r6, r0
 8006460:	dd04      	ble.n	800646c <__sflush_r+0xc0>
 8006462:	2c00      	cmp	r4, #0
 8006464:	dcf2      	bgt.n	800644c <__sflush_r+0xa0>
 8006466:	2000      	movs	r0, #0
 8006468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800646c:	89ab      	ldrh	r3, [r5, #12]
 800646e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006472:	81ab      	strh	r3, [r5, #12]
 8006474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800647c:	89ab      	ldrh	r3, [r5, #12]
 800647e:	692a      	ldr	r2, [r5, #16]
 8006480:	6069      	str	r1, [r5, #4]
 8006482:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006486:	b29b      	uxth	r3, r3
 8006488:	81ab      	strh	r3, [r5, #12]
 800648a:	04db      	lsls	r3, r3, #19
 800648c:	602a      	str	r2, [r5, #0]
 800648e:	d5c3      	bpl.n	8006418 <__sflush_r+0x6c>
 8006490:	6528      	str	r0, [r5, #80]	; 0x50
 8006492:	e7c1      	b.n	8006418 <__sflush_r+0x6c>
 8006494:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8006496:	2a00      	cmp	r2, #0
 8006498:	dc96      	bgt.n	80063c8 <__sflush_r+0x1c>
 800649a:	e7e4      	b.n	8006466 <__sflush_r+0xba>
 800649c:	2301      	movs	r3, #1
 800649e:	4640      	mov	r0, r8
 80064a0:	69e9      	ldr	r1, [r5, #28]
 80064a2:	47b0      	blx	r6
 80064a4:	1c43      	adds	r3, r0, #1
 80064a6:	4602      	mov	r2, r0
 80064a8:	d019      	beq.n	80064de <__sflush_r+0x132>
 80064aa:	89ab      	ldrh	r3, [r5, #12]
 80064ac:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80064ae:	e79a      	b.n	80063e6 <__sflush_r+0x3a>
 80064b0:	f8d8 1000 	ldr.w	r1, [r8]
 80064b4:	2900      	cmp	r1, #0
 80064b6:	d0e1      	beq.n	800647c <__sflush_r+0xd0>
 80064b8:	291d      	cmp	r1, #29
 80064ba:	d007      	beq.n	80064cc <__sflush_r+0x120>
 80064bc:	2916      	cmp	r1, #22
 80064be:	d005      	beq.n	80064cc <__sflush_r+0x120>
 80064c0:	89ab      	ldrh	r3, [r5, #12]
 80064c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064c6:	81ab      	strh	r3, [r5, #12]
 80064c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064cc:	89ab      	ldrh	r3, [r5, #12]
 80064ce:	692a      	ldr	r2, [r5, #16]
 80064d0:	602a      	str	r2, [r5, #0]
 80064d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064d6:	2200      	movs	r2, #0
 80064d8:	81ab      	strh	r3, [r5, #12]
 80064da:	606a      	str	r2, [r5, #4]
 80064dc:	e79c      	b.n	8006418 <__sflush_r+0x6c>
 80064de:	f8d8 3000 	ldr.w	r3, [r8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0e1      	beq.n	80064aa <__sflush_r+0xfe>
 80064e6:	2b1d      	cmp	r3, #29
 80064e8:	d007      	beq.n	80064fa <__sflush_r+0x14e>
 80064ea:	2b16      	cmp	r3, #22
 80064ec:	d005      	beq.n	80064fa <__sflush_r+0x14e>
 80064ee:	89ab      	ldrh	r3, [r5, #12]
 80064f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064f4:	81ab      	strh	r3, [r5, #12]
 80064f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064fa:	f8c8 4000 	str.w	r4, [r8]
 80064fe:	e7b2      	b.n	8006466 <__sflush_r+0xba>

08006500 <_fflush_r>:
 8006500:	b510      	push	{r4, lr}
 8006502:	4604      	mov	r4, r0
 8006504:	b082      	sub	sp, #8
 8006506:	b108      	cbz	r0, 800650c <_fflush_r+0xc>
 8006508:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800650a:	b153      	cbz	r3, 8006522 <_fflush_r+0x22>
 800650c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8006510:	b908      	cbnz	r0, 8006516 <_fflush_r+0x16>
 8006512:	b002      	add	sp, #8
 8006514:	bd10      	pop	{r4, pc}
 8006516:	4620      	mov	r0, r4
 8006518:	b002      	add	sp, #8
 800651a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800651e:	f7ff bf45 	b.w	80063ac <__sflush_r>
 8006522:	9101      	str	r1, [sp, #4]
 8006524:	f000 f8fc 	bl	8006720 <__sinit>
 8006528:	9901      	ldr	r1, [sp, #4]
 800652a:	e7ef      	b.n	800650c <_fflush_r+0xc>

0800652c <fflush>:
 800652c:	b120      	cbz	r0, 8006538 <fflush+0xc>
 800652e:	4b05      	ldr	r3, [pc, #20]	; (8006544 <fflush+0x18>)
 8006530:	4601      	mov	r1, r0
 8006532:	6818      	ldr	r0, [r3, #0]
 8006534:	f7ff bfe4 	b.w	8006500 <_fflush_r>
 8006538:	4b03      	ldr	r3, [pc, #12]	; (8006548 <fflush+0x1c>)
 800653a:	4904      	ldr	r1, [pc, #16]	; (800654c <fflush+0x20>)
 800653c:	6818      	ldr	r0, [r3, #0]
 800653e:	f000 bbff 	b.w	8006d40 <_fwalk_reent>
 8006542:	bf00      	nop
 8006544:	200004a8 	.word	0x200004a8
 8006548:	0800acc8 	.word	0x0800acc8
 800654c:	08006501 	.word	0x08006501

08006550 <__fp_lock>:
 8006550:	2000      	movs	r0, #0
 8006552:	4770      	bx	lr

08006554 <__fp_unlock>:
 8006554:	2000      	movs	r0, #0
 8006556:	4770      	bx	lr

08006558 <_cleanup_r>:
 8006558:	4901      	ldr	r1, [pc, #4]	; (8006560 <_cleanup_r+0x8>)
 800655a:	f000 bbf1 	b.w	8006d40 <_fwalk_reent>
 800655e:	bf00      	nop
 8006560:	08009635 	.word	0x08009635

08006564 <__sinit.part.1>:
 8006564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006568:	4b35      	ldr	r3, [pc, #212]	; (8006640 <__sinit.part.1+0xdc>)
 800656a:	6845      	ldr	r5, [r0, #4]
 800656c:	63c3      	str	r3, [r0, #60]	; 0x3c
 800656e:	2400      	movs	r4, #0
 8006570:	4607      	mov	r7, r0
 8006572:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8006576:	2304      	movs	r3, #4
 8006578:	2103      	movs	r1, #3
 800657a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 800657e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8006582:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8006586:	b083      	sub	sp, #12
 8006588:	602c      	str	r4, [r5, #0]
 800658a:	606c      	str	r4, [r5, #4]
 800658c:	60ac      	str	r4, [r5, #8]
 800658e:	666c      	str	r4, [r5, #100]	; 0x64
 8006590:	81ec      	strh	r4, [r5, #14]
 8006592:	612c      	str	r4, [r5, #16]
 8006594:	616c      	str	r4, [r5, #20]
 8006596:	61ac      	str	r4, [r5, #24]
 8006598:	81ab      	strh	r3, [r5, #12]
 800659a:	4621      	mov	r1, r4
 800659c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80065a0:	2208      	movs	r2, #8
 80065a2:	f7fd fafb 	bl	8003b9c <memset>
 80065a6:	68be      	ldr	r6, [r7, #8]
 80065a8:	f8df b098 	ldr.w	fp, [pc, #152]	; 8006644 <__sinit.part.1+0xe0>
 80065ac:	f8df a098 	ldr.w	sl, [pc, #152]	; 8006648 <__sinit.part.1+0xe4>
 80065b0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800664c <__sinit.part.1+0xe8>
 80065b4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8006650 <__sinit.part.1+0xec>
 80065b8:	f8c5 b020 	str.w	fp, [r5, #32]
 80065bc:	2301      	movs	r3, #1
 80065be:	2209      	movs	r2, #9
 80065c0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80065c4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80065c8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80065cc:	61ed      	str	r5, [r5, #28]
 80065ce:	4621      	mov	r1, r4
 80065d0:	81f3      	strh	r3, [r6, #14]
 80065d2:	81b2      	strh	r2, [r6, #12]
 80065d4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80065d8:	6034      	str	r4, [r6, #0]
 80065da:	6074      	str	r4, [r6, #4]
 80065dc:	60b4      	str	r4, [r6, #8]
 80065de:	6674      	str	r4, [r6, #100]	; 0x64
 80065e0:	6134      	str	r4, [r6, #16]
 80065e2:	6174      	str	r4, [r6, #20]
 80065e4:	61b4      	str	r4, [r6, #24]
 80065e6:	2208      	movs	r2, #8
 80065e8:	9301      	str	r3, [sp, #4]
 80065ea:	f7fd fad7 	bl	8003b9c <memset>
 80065ee:	68fd      	ldr	r5, [r7, #12]
 80065f0:	61f6      	str	r6, [r6, #28]
 80065f2:	2012      	movs	r0, #18
 80065f4:	2202      	movs	r2, #2
 80065f6:	f8c6 b020 	str.w	fp, [r6, #32]
 80065fa:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 80065fe:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8006602:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8006606:	4621      	mov	r1, r4
 8006608:	81a8      	strh	r0, [r5, #12]
 800660a:	81ea      	strh	r2, [r5, #14]
 800660c:	602c      	str	r4, [r5, #0]
 800660e:	606c      	str	r4, [r5, #4]
 8006610:	60ac      	str	r4, [r5, #8]
 8006612:	666c      	str	r4, [r5, #100]	; 0x64
 8006614:	612c      	str	r4, [r5, #16]
 8006616:	616c      	str	r4, [r5, #20]
 8006618:	61ac      	str	r4, [r5, #24]
 800661a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800661e:	2208      	movs	r2, #8
 8006620:	f7fd fabc 	bl	8003b9c <memset>
 8006624:	9b01      	ldr	r3, [sp, #4]
 8006626:	61ed      	str	r5, [r5, #28]
 8006628:	f8c5 b020 	str.w	fp, [r5, #32]
 800662c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8006630:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8006634:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8006638:	63bb      	str	r3, [r7, #56]	; 0x38
 800663a:	b003      	add	sp, #12
 800663c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006640:	08006559 	.word	0x08006559
 8006644:	0800837d 	.word	0x0800837d
 8006648:	080083a5 	.word	0x080083a5
 800664c:	080083dd 	.word	0x080083dd
 8006650:	080083fd 	.word	0x080083fd

08006654 <__sfmoreglue>:
 8006654:	b570      	push	{r4, r5, r6, lr}
 8006656:	2368      	movs	r3, #104	; 0x68
 8006658:	1e4d      	subs	r5, r1, #1
 800665a:	fb03 f505 	mul.w	r5, r3, r5
 800665e:	460e      	mov	r6, r1
 8006660:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006664:	f000 fc48 	bl	8006ef8 <_malloc_r>
 8006668:	4604      	mov	r4, r0
 800666a:	b140      	cbz	r0, 800667e <__sfmoreglue+0x2a>
 800666c:	2100      	movs	r1, #0
 800666e:	300c      	adds	r0, #12
 8006670:	6066      	str	r6, [r4, #4]
 8006672:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006676:	6021      	str	r1, [r4, #0]
 8006678:	60a0      	str	r0, [r4, #8]
 800667a:	f7fd fa8f 	bl	8003b9c <memset>
 800667e:	4620      	mov	r0, r4
 8006680:	bd70      	pop	{r4, r5, r6, pc}
 8006682:	bf00      	nop

08006684 <__sfp>:
 8006684:	4b20      	ldr	r3, [pc, #128]	; (8006708 <__sfp+0x84>)
 8006686:	b570      	push	{r4, r5, r6, lr}
 8006688:	681d      	ldr	r5, [r3, #0]
 800668a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800668c:	4606      	mov	r6, r0
 800668e:	b913      	cbnz	r3, 8006696 <__sfp+0x12>
 8006690:	4628      	mov	r0, r5
 8006692:	f7ff ff67 	bl	8006564 <__sinit.part.1>
 8006696:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 800669a:	686b      	ldr	r3, [r5, #4]
 800669c:	68ac      	ldr	r4, [r5, #8]
 800669e:	3b01      	subs	r3, #1
 80066a0:	d505      	bpl.n	80066ae <__sfp+0x2a>
 80066a2:	e021      	b.n	80066e8 <__sfp+0x64>
 80066a4:	3b01      	subs	r3, #1
 80066a6:	1c5a      	adds	r2, r3, #1
 80066a8:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80066ac:	d01c      	beq.n	80066e8 <__sfp+0x64>
 80066ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066b2:	2a00      	cmp	r2, #0
 80066b4:	d1f6      	bne.n	80066a4 <__sfp+0x20>
 80066b6:	2500      	movs	r5, #0
 80066b8:	2301      	movs	r3, #1
 80066ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066be:	81e2      	strh	r2, [r4, #14]
 80066c0:	81a3      	strh	r3, [r4, #12]
 80066c2:	6665      	str	r5, [r4, #100]	; 0x64
 80066c4:	6025      	str	r5, [r4, #0]
 80066c6:	60a5      	str	r5, [r4, #8]
 80066c8:	6065      	str	r5, [r4, #4]
 80066ca:	6125      	str	r5, [r4, #16]
 80066cc:	6165      	str	r5, [r4, #20]
 80066ce:	61a5      	str	r5, [r4, #24]
 80066d0:	4629      	mov	r1, r5
 80066d2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80066d6:	2208      	movs	r2, #8
 80066d8:	f7fd fa60 	bl	8003b9c <memset>
 80066dc:	6325      	str	r5, [r4, #48]	; 0x30
 80066de:	6365      	str	r5, [r4, #52]	; 0x34
 80066e0:	6465      	str	r5, [r4, #68]	; 0x44
 80066e2:	64a5      	str	r5, [r4, #72]	; 0x48
 80066e4:	4620      	mov	r0, r4
 80066e6:	bd70      	pop	{r4, r5, r6, pc}
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	b10b      	cbz	r3, 80066f0 <__sfp+0x6c>
 80066ec:	461d      	mov	r5, r3
 80066ee:	e7d4      	b.n	800669a <__sfp+0x16>
 80066f0:	4630      	mov	r0, r6
 80066f2:	2104      	movs	r1, #4
 80066f4:	f7ff ffae 	bl	8006654 <__sfmoreglue>
 80066f8:	6028      	str	r0, [r5, #0]
 80066fa:	b108      	cbz	r0, 8006700 <__sfp+0x7c>
 80066fc:	4605      	mov	r5, r0
 80066fe:	e7cc      	b.n	800669a <__sfp+0x16>
 8006700:	230c      	movs	r3, #12
 8006702:	6033      	str	r3, [r6, #0]
 8006704:	bd70      	pop	{r4, r5, r6, pc}
 8006706:	bf00      	nop
 8006708:	0800acc8 	.word	0x0800acc8

0800670c <_cleanup>:
 800670c:	4b02      	ldr	r3, [pc, #8]	; (8006718 <_cleanup+0xc>)
 800670e:	4903      	ldr	r1, [pc, #12]	; (800671c <_cleanup+0x10>)
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	f000 bb15 	b.w	8006d40 <_fwalk_reent>
 8006716:	bf00      	nop
 8006718:	0800acc8 	.word	0x0800acc8
 800671c:	08009635 	.word	0x08009635

08006720 <__sinit>:
 8006720:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006722:	b103      	cbz	r3, 8006726 <__sinit+0x6>
 8006724:	4770      	bx	lr
 8006726:	f7ff bf1d 	b.w	8006564 <__sinit.part.1>
 800672a:	bf00      	nop

0800672c <__sfp_lock_acquire>:
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop

08006730 <__sfp_lock_release>:
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop

08006734 <__sinit_lock_acquire>:
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop

08006738 <__sinit_lock_release>:
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop

0800673c <__fp_lock_all>:
 800673c:	4b02      	ldr	r3, [pc, #8]	; (8006748 <__fp_lock_all+0xc>)
 800673e:	4903      	ldr	r1, [pc, #12]	; (800674c <__fp_lock_all+0x10>)
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	f000 bad7 	b.w	8006cf4 <_fwalk>
 8006746:	bf00      	nop
 8006748:	200004a8 	.word	0x200004a8
 800674c:	08006551 	.word	0x08006551

08006750 <__fp_unlock_all>:
 8006750:	4b02      	ldr	r3, [pc, #8]	; (800675c <__fp_unlock_all+0xc>)
 8006752:	4903      	ldr	r1, [pc, #12]	; (8006760 <__fp_unlock_all+0x10>)
 8006754:	6818      	ldr	r0, [r3, #0]
 8006756:	f000 bacd 	b.w	8006cf4 <_fwalk>
 800675a:	bf00      	nop
 800675c:	200004a8 	.word	0x200004a8
 8006760:	08006555 	.word	0x08006555

08006764 <__libc_fini_array>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	4b08      	ldr	r3, [pc, #32]	; (8006788 <__libc_fini_array+0x24>)
 8006768:	4d08      	ldr	r5, [pc, #32]	; (800678c <__libc_fini_array+0x28>)
 800676a:	1aed      	subs	r5, r5, r3
 800676c:	10ac      	asrs	r4, r5, #2
 800676e:	bf18      	it	ne
 8006770:	18ed      	addne	r5, r5, r3
 8006772:	d005      	beq.n	8006780 <__libc_fini_array+0x1c>
 8006774:	3c01      	subs	r4, #1
 8006776:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800677a:	4798      	blx	r3
 800677c:	2c00      	cmp	r4, #0
 800677e:	d1f9      	bne.n	8006774 <__libc_fini_array+0x10>
 8006780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006784:	f004 bb8e 	b.w	800aea4 <_fini>
 8006788:	0800aeb0 	.word	0x0800aeb0
 800678c:	0800aeb4 	.word	0x0800aeb4

08006790 <_malloc_trim_r>:
 8006790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006792:	4f23      	ldr	r7, [pc, #140]	; (8006820 <_malloc_trim_r+0x90>)
 8006794:	460c      	mov	r4, r1
 8006796:	4606      	mov	r6, r0
 8006798:	f000 feee 	bl	8007578 <__malloc_lock>
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	685d      	ldr	r5, [r3, #4]
 80067a0:	f025 0503 	bic.w	r5, r5, #3
 80067a4:	1b29      	subs	r1, r5, r4
 80067a6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 80067aa:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80067ae:	f021 010f 	bic.w	r1, r1, #15
 80067b2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80067b6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80067ba:	db07      	blt.n	80067cc <_malloc_trim_r+0x3c>
 80067bc:	4630      	mov	r0, r6
 80067be:	2100      	movs	r1, #0
 80067c0:	f001 fdca 	bl	8008358 <_sbrk_r>
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	442b      	add	r3, r5
 80067c8:	4298      	cmp	r0, r3
 80067ca:	d004      	beq.n	80067d6 <_malloc_trim_r+0x46>
 80067cc:	4630      	mov	r0, r6
 80067ce:	f000 fed5 	bl	800757c <__malloc_unlock>
 80067d2:	2000      	movs	r0, #0
 80067d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067d6:	4630      	mov	r0, r6
 80067d8:	4261      	negs	r1, r4
 80067da:	f001 fdbd 	bl	8008358 <_sbrk_r>
 80067de:	3001      	adds	r0, #1
 80067e0:	d00d      	beq.n	80067fe <_malloc_trim_r+0x6e>
 80067e2:	4b10      	ldr	r3, [pc, #64]	; (8006824 <_malloc_trim_r+0x94>)
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	6819      	ldr	r1, [r3, #0]
 80067e8:	1b2d      	subs	r5, r5, r4
 80067ea:	f045 0501 	orr.w	r5, r5, #1
 80067ee:	4630      	mov	r0, r6
 80067f0:	1b09      	subs	r1, r1, r4
 80067f2:	6055      	str	r5, [r2, #4]
 80067f4:	6019      	str	r1, [r3, #0]
 80067f6:	f000 fec1 	bl	800757c <__malloc_unlock>
 80067fa:	2001      	movs	r0, #1
 80067fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067fe:	4630      	mov	r0, r6
 8006800:	2100      	movs	r1, #0
 8006802:	f001 fda9 	bl	8008358 <_sbrk_r>
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	1a83      	subs	r3, r0, r2
 800680a:	2b0f      	cmp	r3, #15
 800680c:	ddde      	ble.n	80067cc <_malloc_trim_r+0x3c>
 800680e:	4c06      	ldr	r4, [pc, #24]	; (8006828 <_malloc_trim_r+0x98>)
 8006810:	4904      	ldr	r1, [pc, #16]	; (8006824 <_malloc_trim_r+0x94>)
 8006812:	6824      	ldr	r4, [r4, #0]
 8006814:	f043 0301 	orr.w	r3, r3, #1
 8006818:	1b00      	subs	r0, r0, r4
 800681a:	6053      	str	r3, [r2, #4]
 800681c:	6008      	str	r0, [r1, #0]
 800681e:	e7d5      	b.n	80067cc <_malloc_trim_r+0x3c>
 8006820:	20000528 	.word	0x20000528
 8006824:	20010488 	.word	0x20010488
 8006828:	20000934 	.word	0x20000934

0800682c <_free_r>:
 800682c:	2900      	cmp	r1, #0
 800682e:	d04e      	beq.n	80068ce <_free_r+0xa2>
 8006830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006834:	460c      	mov	r4, r1
 8006836:	4680      	mov	r8, r0
 8006838:	f000 fe9e 	bl	8007578 <__malloc_lock>
 800683c:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8006840:	4962      	ldr	r1, [pc, #392]	; (80069cc <_free_r+0x1a0>)
 8006842:	f027 0201 	bic.w	r2, r7, #1
 8006846:	f1a4 0508 	sub.w	r5, r4, #8
 800684a:	18ab      	adds	r3, r5, r2
 800684c:	688e      	ldr	r6, [r1, #8]
 800684e:	6858      	ldr	r0, [r3, #4]
 8006850:	429e      	cmp	r6, r3
 8006852:	f020 0003 	bic.w	r0, r0, #3
 8006856:	d05a      	beq.n	800690e <_free_r+0xe2>
 8006858:	07fe      	lsls	r6, r7, #31
 800685a:	6058      	str	r0, [r3, #4]
 800685c:	d40b      	bmi.n	8006876 <_free_r+0x4a>
 800685e:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8006862:	1bed      	subs	r5, r5, r7
 8006864:	f101 0e08 	add.w	lr, r1, #8
 8006868:	68ac      	ldr	r4, [r5, #8]
 800686a:	4574      	cmp	r4, lr
 800686c:	443a      	add	r2, r7
 800686e:	d067      	beq.n	8006940 <_free_r+0x114>
 8006870:	68ef      	ldr	r7, [r5, #12]
 8006872:	60e7      	str	r7, [r4, #12]
 8006874:	60bc      	str	r4, [r7, #8]
 8006876:	181c      	adds	r4, r3, r0
 8006878:	6864      	ldr	r4, [r4, #4]
 800687a:	07e4      	lsls	r4, r4, #31
 800687c:	d40c      	bmi.n	8006898 <_free_r+0x6c>
 800687e:	4f54      	ldr	r7, [pc, #336]	; (80069d0 <_free_r+0x1a4>)
 8006880:	689c      	ldr	r4, [r3, #8]
 8006882:	42bc      	cmp	r4, r7
 8006884:	4402      	add	r2, r0
 8006886:	d07c      	beq.n	8006982 <_free_r+0x156>
 8006888:	68d8      	ldr	r0, [r3, #12]
 800688a:	60e0      	str	r0, [r4, #12]
 800688c:	f042 0301 	orr.w	r3, r2, #1
 8006890:	6084      	str	r4, [r0, #8]
 8006892:	606b      	str	r3, [r5, #4]
 8006894:	50aa      	str	r2, [r5, r2]
 8006896:	e003      	b.n	80068a0 <_free_r+0x74>
 8006898:	f042 0301 	orr.w	r3, r2, #1
 800689c:	606b      	str	r3, [r5, #4]
 800689e:	50aa      	str	r2, [r5, r2]
 80068a0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80068a4:	d214      	bcs.n	80068d0 <_free_r+0xa4>
 80068a6:	08d2      	lsrs	r2, r2, #3
 80068a8:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 80068ac:	6848      	ldr	r0, [r1, #4]
 80068ae:	689f      	ldr	r7, [r3, #8]
 80068b0:	60af      	str	r7, [r5, #8]
 80068b2:	1092      	asrs	r2, r2, #2
 80068b4:	2401      	movs	r4, #1
 80068b6:	fa04 f202 	lsl.w	r2, r4, r2
 80068ba:	4310      	orrs	r0, r2
 80068bc:	60eb      	str	r3, [r5, #12]
 80068be:	6048      	str	r0, [r1, #4]
 80068c0:	609d      	str	r5, [r3, #8]
 80068c2:	60fd      	str	r5, [r7, #12]
 80068c4:	4640      	mov	r0, r8
 80068c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068ca:	f000 be57 	b.w	800757c <__malloc_unlock>
 80068ce:	4770      	bx	lr
 80068d0:	0a53      	lsrs	r3, r2, #9
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d847      	bhi.n	8006966 <_free_r+0x13a>
 80068d6:	0993      	lsrs	r3, r2, #6
 80068d8:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80068dc:	0060      	lsls	r0, r4, #1
 80068de:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80068e2:	493a      	ldr	r1, [pc, #232]	; (80069cc <_free_r+0x1a0>)
 80068e4:	6883      	ldr	r3, [r0, #8]
 80068e6:	4283      	cmp	r3, r0
 80068e8:	d043      	beq.n	8006972 <_free_r+0x146>
 80068ea:	6859      	ldr	r1, [r3, #4]
 80068ec:	f021 0103 	bic.w	r1, r1, #3
 80068f0:	4291      	cmp	r1, r2
 80068f2:	d902      	bls.n	80068fa <_free_r+0xce>
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	4298      	cmp	r0, r3
 80068f8:	d1f7      	bne.n	80068ea <_free_r+0xbe>
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	60ea      	str	r2, [r5, #12]
 80068fe:	60ab      	str	r3, [r5, #8]
 8006900:	4640      	mov	r0, r8
 8006902:	6095      	str	r5, [r2, #8]
 8006904:	60dd      	str	r5, [r3, #12]
 8006906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800690a:	f000 be37 	b.w	800757c <__malloc_unlock>
 800690e:	07ff      	lsls	r7, r7, #31
 8006910:	4402      	add	r2, r0
 8006912:	d407      	bmi.n	8006924 <_free_r+0xf8>
 8006914:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8006918:	1aed      	subs	r5, r5, r3
 800691a:	441a      	add	r2, r3
 800691c:	68a8      	ldr	r0, [r5, #8]
 800691e:	68eb      	ldr	r3, [r5, #12]
 8006920:	60c3      	str	r3, [r0, #12]
 8006922:	6098      	str	r0, [r3, #8]
 8006924:	4b2b      	ldr	r3, [pc, #172]	; (80069d4 <_free_r+0x1a8>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f042 0001 	orr.w	r0, r2, #1
 800692c:	429a      	cmp	r2, r3
 800692e:	6068      	str	r0, [r5, #4]
 8006930:	608d      	str	r5, [r1, #8]
 8006932:	d3c7      	bcc.n	80068c4 <_free_r+0x98>
 8006934:	4b28      	ldr	r3, [pc, #160]	; (80069d8 <_free_r+0x1ac>)
 8006936:	4640      	mov	r0, r8
 8006938:	6819      	ldr	r1, [r3, #0]
 800693a:	f7ff ff29 	bl	8006790 <_malloc_trim_r>
 800693e:	e7c1      	b.n	80068c4 <_free_r+0x98>
 8006940:	1819      	adds	r1, r3, r0
 8006942:	6849      	ldr	r1, [r1, #4]
 8006944:	07c9      	lsls	r1, r1, #31
 8006946:	d409      	bmi.n	800695c <_free_r+0x130>
 8006948:	68d9      	ldr	r1, [r3, #12]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	4402      	add	r2, r0
 800694e:	f042 0001 	orr.w	r0, r2, #1
 8006952:	60d9      	str	r1, [r3, #12]
 8006954:	608b      	str	r3, [r1, #8]
 8006956:	6068      	str	r0, [r5, #4]
 8006958:	50aa      	str	r2, [r5, r2]
 800695a:	e7b3      	b.n	80068c4 <_free_r+0x98>
 800695c:	f042 0301 	orr.w	r3, r2, #1
 8006960:	606b      	str	r3, [r5, #4]
 8006962:	50aa      	str	r2, [r5, r2]
 8006964:	e7ae      	b.n	80068c4 <_free_r+0x98>
 8006966:	2b14      	cmp	r3, #20
 8006968:	d814      	bhi.n	8006994 <_free_r+0x168>
 800696a:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 800696e:	0060      	lsls	r0, r4, #1
 8006970:	e7b5      	b.n	80068de <_free_r+0xb2>
 8006972:	684a      	ldr	r2, [r1, #4]
 8006974:	10a4      	asrs	r4, r4, #2
 8006976:	2001      	movs	r0, #1
 8006978:	40a0      	lsls	r0, r4
 800697a:	4302      	orrs	r2, r0
 800697c:	604a      	str	r2, [r1, #4]
 800697e:	461a      	mov	r2, r3
 8006980:	e7bc      	b.n	80068fc <_free_r+0xd0>
 8006982:	f042 0301 	orr.w	r3, r2, #1
 8006986:	614d      	str	r5, [r1, #20]
 8006988:	610d      	str	r5, [r1, #16]
 800698a:	60ec      	str	r4, [r5, #12]
 800698c:	60ac      	str	r4, [r5, #8]
 800698e:	606b      	str	r3, [r5, #4]
 8006990:	50aa      	str	r2, [r5, r2]
 8006992:	e797      	b.n	80068c4 <_free_r+0x98>
 8006994:	2b54      	cmp	r3, #84	; 0x54
 8006996:	d804      	bhi.n	80069a2 <_free_r+0x176>
 8006998:	0b13      	lsrs	r3, r2, #12
 800699a:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 800699e:	0060      	lsls	r0, r4, #1
 80069a0:	e79d      	b.n	80068de <_free_r+0xb2>
 80069a2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80069a6:	d804      	bhi.n	80069b2 <_free_r+0x186>
 80069a8:	0bd3      	lsrs	r3, r2, #15
 80069aa:	f103 0477 	add.w	r4, r3, #119	; 0x77
 80069ae:	0060      	lsls	r0, r4, #1
 80069b0:	e795      	b.n	80068de <_free_r+0xb2>
 80069b2:	f240 5054 	movw	r0, #1364	; 0x554
 80069b6:	4283      	cmp	r3, r0
 80069b8:	d804      	bhi.n	80069c4 <_free_r+0x198>
 80069ba:	0c93      	lsrs	r3, r2, #18
 80069bc:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80069c0:	0060      	lsls	r0, r4, #1
 80069c2:	e78c      	b.n	80068de <_free_r+0xb2>
 80069c4:	20fc      	movs	r0, #252	; 0xfc
 80069c6:	247e      	movs	r4, #126	; 0x7e
 80069c8:	e789      	b.n	80068de <_free_r+0xb2>
 80069ca:	bf00      	nop
 80069cc:	20000528 	.word	0x20000528
 80069d0:	20000530 	.word	0x20000530
 80069d4:	20000930 	.word	0x20000930
 80069d8:	20010484 	.word	0x20010484

080069dc <__sfvwrite_r>:
 80069dc:	6893      	ldr	r3, [r2, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d07a      	beq.n	8006ad8 <__sfvwrite_r+0xfc>
 80069e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e6:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 80069ea:	f01e 0f08 	tst.w	lr, #8
 80069ee:	b083      	sub	sp, #12
 80069f0:	460c      	mov	r4, r1
 80069f2:	4681      	mov	r9, r0
 80069f4:	4616      	mov	r6, r2
 80069f6:	d026      	beq.n	8006a46 <__sfvwrite_r+0x6a>
 80069f8:	690b      	ldr	r3, [r1, #16]
 80069fa:	b323      	cbz	r3, 8006a46 <__sfvwrite_r+0x6a>
 80069fc:	f00e 0802 	and.w	r8, lr, #2
 8006a00:	fa1f f088 	uxth.w	r0, r8
 8006a04:	6835      	ldr	r5, [r6, #0]
 8006a06:	b370      	cbz	r0, 8006a66 <__sfvwrite_r+0x8a>
 8006a08:	f04f 0a00 	mov.w	sl, #0
 8006a0c:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 8006cf0 <__sfvwrite_r+0x314>
 8006a10:	46d0      	mov	r8, sl
 8006a12:	45d8      	cmp	r8, fp
 8006a14:	4643      	mov	r3, r8
 8006a16:	4652      	mov	r2, sl
 8006a18:	bf28      	it	cs
 8006a1a:	465b      	movcs	r3, fp
 8006a1c:	4648      	mov	r0, r9
 8006a1e:	f1b8 0f00 	cmp.w	r8, #0
 8006a22:	d053      	beq.n	8006acc <__sfvwrite_r+0xf0>
 8006a24:	69e1      	ldr	r1, [r4, #28]
 8006a26:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006a28:	47b8      	blx	r7
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	dd73      	ble.n	8006b16 <__sfvwrite_r+0x13a>
 8006a2e:	68b3      	ldr	r3, [r6, #8]
 8006a30:	1a1b      	subs	r3, r3, r0
 8006a32:	4482      	add	sl, r0
 8006a34:	ebc0 0808 	rsb	r8, r0, r8
 8006a38:	60b3      	str	r3, [r6, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e9      	bne.n	8006a12 <__sfvwrite_r+0x36>
 8006a3e:	2000      	movs	r0, #0
 8006a40:	b003      	add	sp, #12
 8006a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a46:	4648      	mov	r0, r9
 8006a48:	4621      	mov	r1, r4
 8006a4a:	f7fe fbeb 	bl	8005224 <__swsetup_r>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	f040 8145 	bne.w	8006cde <__sfvwrite_r+0x302>
 8006a54:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8006a58:	6835      	ldr	r5, [r6, #0]
 8006a5a:	f00e 0802 	and.w	r8, lr, #2
 8006a5e:	fa1f f088 	uxth.w	r0, r8
 8006a62:	2800      	cmp	r0, #0
 8006a64:	d1d0      	bne.n	8006a08 <__sfvwrite_r+0x2c>
 8006a66:	f01e 0b01 	ands.w	fp, lr, #1
 8006a6a:	d15d      	bne.n	8006b28 <__sfvwrite_r+0x14c>
 8006a6c:	46d8      	mov	r8, fp
 8006a6e:	f1b8 0f00 	cmp.w	r8, #0
 8006a72:	d025      	beq.n	8006ac0 <__sfvwrite_r+0xe4>
 8006a74:	f41e 7f00 	tst.w	lr, #512	; 0x200
 8006a78:	68a7      	ldr	r7, [r4, #8]
 8006a7a:	d02f      	beq.n	8006adc <__sfvwrite_r+0x100>
 8006a7c:	45b8      	cmp	r8, r7
 8006a7e:	46ba      	mov	sl, r7
 8006a80:	f0c0 80a9 	bcc.w	8006bd6 <__sfvwrite_r+0x1fa>
 8006a84:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 8006a88:	f040 80b6 	bne.w	8006bf8 <__sfvwrite_r+0x21c>
 8006a8c:	6820      	ldr	r0, [r4, #0]
 8006a8e:	4652      	mov	r2, sl
 8006a90:	4659      	mov	r1, fp
 8006a92:	f000 fd0d 	bl	80074b0 <memmove>
 8006a96:	68a0      	ldr	r0, [r4, #8]
 8006a98:	6822      	ldr	r2, [r4, #0]
 8006a9a:	1bc0      	subs	r0, r0, r7
 8006a9c:	eb02 030a 	add.w	r3, r2, sl
 8006aa0:	60a0      	str	r0, [r4, #8]
 8006aa2:	6023      	str	r3, [r4, #0]
 8006aa4:	4640      	mov	r0, r8
 8006aa6:	68b3      	ldr	r3, [r6, #8]
 8006aa8:	1a1b      	subs	r3, r3, r0
 8006aaa:	4483      	add	fp, r0
 8006aac:	ebc0 0808 	rsb	r8, r0, r8
 8006ab0:	60b3      	str	r3, [r6, #8]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0c3      	beq.n	8006a3e <__sfvwrite_r+0x62>
 8006ab6:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8006aba:	f1b8 0f00 	cmp.w	r8, #0
 8006abe:	d1d9      	bne.n	8006a74 <__sfvwrite_r+0x98>
 8006ac0:	f8d5 b000 	ldr.w	fp, [r5]
 8006ac4:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8006ac8:	3508      	adds	r5, #8
 8006aca:	e7d0      	b.n	8006a6e <__sfvwrite_r+0x92>
 8006acc:	f8d5 a000 	ldr.w	sl, [r5]
 8006ad0:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8006ad4:	3508      	adds	r5, #8
 8006ad6:	e79c      	b.n	8006a12 <__sfvwrite_r+0x36>
 8006ad8:	2000      	movs	r0, #0
 8006ada:	4770      	bx	lr
 8006adc:	6820      	ldr	r0, [r4, #0]
 8006ade:	6923      	ldr	r3, [r4, #16]
 8006ae0:	4298      	cmp	r0, r3
 8006ae2:	d803      	bhi.n	8006aec <__sfvwrite_r+0x110>
 8006ae4:	6962      	ldr	r2, [r4, #20]
 8006ae6:	4590      	cmp	r8, r2
 8006ae8:	f080 80b9 	bcs.w	8006c5e <__sfvwrite_r+0x282>
 8006aec:	4547      	cmp	r7, r8
 8006aee:	bf28      	it	cs
 8006af0:	4647      	movcs	r7, r8
 8006af2:	463a      	mov	r2, r7
 8006af4:	4659      	mov	r1, fp
 8006af6:	f000 fcdb 	bl	80074b0 <memmove>
 8006afa:	68a3      	ldr	r3, [r4, #8]
 8006afc:	6822      	ldr	r2, [r4, #0]
 8006afe:	1bdb      	subs	r3, r3, r7
 8006b00:	443a      	add	r2, r7
 8006b02:	60a3      	str	r3, [r4, #8]
 8006b04:	6022      	str	r2, [r4, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d14a      	bne.n	8006ba0 <__sfvwrite_r+0x1c4>
 8006b0a:	4648      	mov	r0, r9
 8006b0c:	4621      	mov	r1, r4
 8006b0e:	f7ff fcf7 	bl	8006500 <_fflush_r>
 8006b12:	2800      	cmp	r0, #0
 8006b14:	d044      	beq.n	8006ba0 <__sfvwrite_r+0x1c4>
 8006b16:	89a3      	ldrh	r3, [r4, #12]
 8006b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b20:	81a3      	strh	r3, [r4, #12]
 8006b22:	b003      	add	sp, #12
 8006b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b28:	4680      	mov	r8, r0
 8006b2a:	9000      	str	r0, [sp, #0]
 8006b2c:	4683      	mov	fp, r0
 8006b2e:	4682      	mov	sl, r0
 8006b30:	f1ba 0f00 	cmp.w	sl, #0
 8006b34:	d02c      	beq.n	8006b90 <__sfvwrite_r+0x1b4>
 8006b36:	9b00      	ldr	r3, [sp, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d050      	beq.n	8006bde <__sfvwrite_r+0x202>
 8006b3c:	6820      	ldr	r0, [r4, #0]
 8006b3e:	6921      	ldr	r1, [r4, #16]
 8006b40:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8006b44:	6962      	ldr	r2, [r4, #20]
 8006b46:	45d0      	cmp	r8, sl
 8006b48:	4643      	mov	r3, r8
 8006b4a:	bf28      	it	cs
 8006b4c:	4653      	movcs	r3, sl
 8006b4e:	4288      	cmp	r0, r1
 8006b50:	461f      	mov	r7, r3
 8006b52:	d904      	bls.n	8006b5e <__sfvwrite_r+0x182>
 8006b54:	eb0e 0c02 	add.w	ip, lr, r2
 8006b58:	4563      	cmp	r3, ip
 8006b5a:	f300 8092 	bgt.w	8006c82 <__sfvwrite_r+0x2a6>
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	db20      	blt.n	8006ba4 <__sfvwrite_r+0x1c8>
 8006b62:	4613      	mov	r3, r2
 8006b64:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006b66:	69e1      	ldr	r1, [r4, #28]
 8006b68:	4648      	mov	r0, r9
 8006b6a:	465a      	mov	r2, fp
 8006b6c:	47b8      	blx	r7
 8006b6e:	1e07      	subs	r7, r0, #0
 8006b70:	ddd1      	ble.n	8006b16 <__sfvwrite_r+0x13a>
 8006b72:	ebb8 0807 	subs.w	r8, r8, r7
 8006b76:	d025      	beq.n	8006bc4 <__sfvwrite_r+0x1e8>
 8006b78:	68b3      	ldr	r3, [r6, #8]
 8006b7a:	1bdb      	subs	r3, r3, r7
 8006b7c:	44bb      	add	fp, r7
 8006b7e:	ebc7 0a0a 	rsb	sl, r7, sl
 8006b82:	60b3      	str	r3, [r6, #8]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f43f af5a 	beq.w	8006a3e <__sfvwrite_r+0x62>
 8006b8a:	f1ba 0f00 	cmp.w	sl, #0
 8006b8e:	d1d2      	bne.n	8006b36 <__sfvwrite_r+0x15a>
 8006b90:	2300      	movs	r3, #0
 8006b92:	f8d5 b000 	ldr.w	fp, [r5]
 8006b96:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	3508      	adds	r5, #8
 8006b9e:	e7c7      	b.n	8006b30 <__sfvwrite_r+0x154>
 8006ba0:	4638      	mov	r0, r7
 8006ba2:	e780      	b.n	8006aa6 <__sfvwrite_r+0xca>
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	4659      	mov	r1, fp
 8006ba8:	9301      	str	r3, [sp, #4]
 8006baa:	f000 fc81 	bl	80074b0 <memmove>
 8006bae:	68a2      	ldr	r2, [r4, #8]
 8006bb0:	6821      	ldr	r1, [r4, #0]
 8006bb2:	9b01      	ldr	r3, [sp, #4]
 8006bb4:	ebb8 0807 	subs.w	r8, r8, r7
 8006bb8:	eba2 0203 	sub.w	r2, r2, r3
 8006bbc:	440b      	add	r3, r1
 8006bbe:	60a2      	str	r2, [r4, #8]
 8006bc0:	6023      	str	r3, [r4, #0]
 8006bc2:	d1d9      	bne.n	8006b78 <__sfvwrite_r+0x19c>
 8006bc4:	4648      	mov	r0, r9
 8006bc6:	4621      	mov	r1, r4
 8006bc8:	f7ff fc9a 	bl	8006500 <_fflush_r>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d1a2      	bne.n	8006b16 <__sfvwrite_r+0x13a>
 8006bd0:	f8cd 8000 	str.w	r8, [sp]
 8006bd4:	e7d0      	b.n	8006b78 <__sfvwrite_r+0x19c>
 8006bd6:	6820      	ldr	r0, [r4, #0]
 8006bd8:	4647      	mov	r7, r8
 8006bda:	46c2      	mov	sl, r8
 8006bdc:	e757      	b.n	8006a8e <__sfvwrite_r+0xb2>
 8006bde:	4658      	mov	r0, fp
 8006be0:	210a      	movs	r1, #10
 8006be2:	4652      	mov	r2, sl
 8006be4:	f000 fc1a 	bl	800741c <memchr>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d073      	beq.n	8006cd4 <__sfvwrite_r+0x2f8>
 8006bec:	3001      	adds	r0, #1
 8006bee:	2301      	movs	r3, #1
 8006bf0:	ebcb 0800 	rsb	r8, fp, r0
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	e7a1      	b.n	8006b3c <__sfvwrite_r+0x160>
 8006bf8:	6967      	ldr	r7, [r4, #20]
 8006bfa:	6921      	ldr	r1, [r4, #16]
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8006c02:	1a5b      	subs	r3, r3, r1
 8006c04:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8006c08:	1c58      	adds	r0, r3, #1
 8006c0a:	107f      	asrs	r7, r7, #1
 8006c0c:	4440      	add	r0, r8
 8006c0e:	4287      	cmp	r7, r0
 8006c10:	463a      	mov	r2, r7
 8006c12:	bf3c      	itt	cc
 8006c14:	4607      	movcc	r7, r0
 8006c16:	463a      	movcc	r2, r7
 8006c18:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	d046      	beq.n	8006cae <__sfvwrite_r+0x2d2>
 8006c20:	4611      	mov	r1, r2
 8006c22:	4648      	mov	r0, r9
 8006c24:	f000 f968 	bl	8006ef8 <_malloc_r>
 8006c28:	9b00      	ldr	r3, [sp, #0]
 8006c2a:	4682      	mov	sl, r0
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	d059      	beq.n	8006ce4 <__sfvwrite_r+0x308>
 8006c30:	461a      	mov	r2, r3
 8006c32:	6921      	ldr	r1, [r4, #16]
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	f7fc ff17 	bl	8003a68 <memcpy>
 8006c3a:	89a2      	ldrh	r2, [r4, #12]
 8006c3c:	9b00      	ldr	r3, [sp, #0]
 8006c3e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8006c42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c46:	81a2      	strh	r2, [r4, #12]
 8006c48:	eb0a 0003 	add.w	r0, sl, r3
 8006c4c:	1afb      	subs	r3, r7, r3
 8006c4e:	f8c4 a010 	str.w	sl, [r4, #16]
 8006c52:	6167      	str	r7, [r4, #20]
 8006c54:	6020      	str	r0, [r4, #0]
 8006c56:	60a3      	str	r3, [r4, #8]
 8006c58:	4647      	mov	r7, r8
 8006c5a:	46c2      	mov	sl, r8
 8006c5c:	e717      	b.n	8006a8e <__sfvwrite_r+0xb2>
 8006c5e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006c62:	4543      	cmp	r3, r8
 8006c64:	bf28      	it	cs
 8006c66:	4643      	movcs	r3, r8
 8006c68:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006c6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c6e:	4648      	mov	r0, r9
 8006c70:	fb03 f302 	mul.w	r3, r3, r2
 8006c74:	69e1      	ldr	r1, [r4, #28]
 8006c76:	465a      	mov	r2, fp
 8006c78:	47b8      	blx	r7
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	f73f af13 	bgt.w	8006aa6 <__sfvwrite_r+0xca>
 8006c80:	e749      	b.n	8006b16 <__sfvwrite_r+0x13a>
 8006c82:	4662      	mov	r2, ip
 8006c84:	4659      	mov	r1, fp
 8006c86:	f8cd c004 	str.w	ip, [sp, #4]
 8006c8a:	f000 fc11 	bl	80074b0 <memmove>
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006c94:	4463      	add	r3, ip
 8006c96:	6023      	str	r3, [r4, #0]
 8006c98:	4648      	mov	r0, r9
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	f7ff fc30 	bl	8006500 <_fflush_r>
 8006ca0:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	f47f af36 	bne.w	8006b16 <__sfvwrite_r+0x13a>
 8006caa:	4667      	mov	r7, ip
 8006cac:	e761      	b.n	8006b72 <__sfvwrite_r+0x196>
 8006cae:	4648      	mov	r0, r9
 8006cb0:	f001 f92e 	bl	8007f10 <_realloc_r>
 8006cb4:	9b00      	ldr	r3, [sp, #0]
 8006cb6:	4682      	mov	sl, r0
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d1c5      	bne.n	8006c48 <__sfvwrite_r+0x26c>
 8006cbc:	4648      	mov	r0, r9
 8006cbe:	6921      	ldr	r1, [r4, #16]
 8006cc0:	f7ff fdb4 	bl	800682c <_free_r>
 8006cc4:	89a3      	ldrh	r3, [r4, #12]
 8006cc6:	220c      	movs	r2, #12
 8006cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	f8c9 2000 	str.w	r2, [r9]
 8006cd2:	e721      	b.n	8006b18 <__sfvwrite_r+0x13c>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	f10a 0801 	add.w	r8, sl, #1
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	e72e      	b.n	8006b3c <__sfvwrite_r+0x160>
 8006cde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ce2:	e6ad      	b.n	8006a40 <__sfvwrite_r+0x64>
 8006ce4:	230c      	movs	r3, #12
 8006ce6:	f8c9 3000 	str.w	r3, [r9]
 8006cea:	89a3      	ldrh	r3, [r4, #12]
 8006cec:	e714      	b.n	8006b18 <__sfvwrite_r+0x13c>
 8006cee:	bf00      	nop
 8006cf0:	7ffffc00 	.word	0x7ffffc00

08006cf4 <_fwalk>:
 8006cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8006cfc:	d01b      	beq.n	8006d36 <_fwalk+0x42>
 8006cfe:	4688      	mov	r8, r1
 8006d00:	2600      	movs	r6, #0
 8006d02:	687d      	ldr	r5, [r7, #4]
 8006d04:	68bc      	ldr	r4, [r7, #8]
 8006d06:	3d01      	subs	r5, #1
 8006d08:	d40f      	bmi.n	8006d2a <_fwalk+0x36>
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8006d12:	d906      	bls.n	8006d22 <_fwalk+0x2e>
 8006d14:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	d001      	beq.n	8006d22 <_fwalk+0x2e>
 8006d1e:	47c0      	blx	r8
 8006d20:	4306      	orrs	r6, r0
 8006d22:	1c6b      	adds	r3, r5, #1
 8006d24:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8006d28:	d1ef      	bne.n	8006d0a <_fwalk+0x16>
 8006d2a:	683f      	ldr	r7, [r7, #0]
 8006d2c:	2f00      	cmp	r7, #0
 8006d2e:	d1e8      	bne.n	8006d02 <_fwalk+0xe>
 8006d30:	4630      	mov	r0, r6
 8006d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d36:	463e      	mov	r6, r7
 8006d38:	4630      	mov	r0, r6
 8006d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d3e:	bf00      	nop

08006d40 <_fwalk_reent>:
 8006d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d44:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8006d48:	d01f      	beq.n	8006d8a <_fwalk_reent+0x4a>
 8006d4a:	4688      	mov	r8, r1
 8006d4c:	4606      	mov	r6, r0
 8006d4e:	f04f 0900 	mov.w	r9, #0
 8006d52:	687d      	ldr	r5, [r7, #4]
 8006d54:	68bc      	ldr	r4, [r7, #8]
 8006d56:	3d01      	subs	r5, #1
 8006d58:	d411      	bmi.n	8006d7e <_fwalk_reent+0x3e>
 8006d5a:	89a3      	ldrh	r3, [r4, #12]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8006d62:	d908      	bls.n	8006d76 <_fwalk_reent+0x36>
 8006d64:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	d002      	beq.n	8006d76 <_fwalk_reent+0x36>
 8006d70:	47c0      	blx	r8
 8006d72:	ea49 0900 	orr.w	r9, r9, r0
 8006d76:	1c6b      	adds	r3, r5, #1
 8006d78:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8006d7c:	d1ed      	bne.n	8006d5a <_fwalk_reent+0x1a>
 8006d7e:	683f      	ldr	r7, [r7, #0]
 8006d80:	2f00      	cmp	r7, #0
 8006d82:	d1e6      	bne.n	8006d52 <_fwalk_reent+0x12>
 8006d84:	4648      	mov	r0, r9
 8006d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d8a:	46b9      	mov	r9, r7
 8006d8c:	4648      	mov	r0, r9
 8006d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d92:	bf00      	nop

08006d94 <_setlocale_r>:
 8006d94:	b1c2      	cbz	r2, 8006dc8 <_setlocale_r+0x34>
 8006d96:	b510      	push	{r4, lr}
 8006d98:	4610      	mov	r0, r2
 8006d9a:	490c      	ldr	r1, [pc, #48]	; (8006dcc <_setlocale_r+0x38>)
 8006d9c:	4614      	mov	r4, r2
 8006d9e:	f001 fb43 	bl	8008428 <strcmp>
 8006da2:	b908      	cbnz	r0, 8006da8 <_setlocale_r+0x14>
 8006da4:	480a      	ldr	r0, [pc, #40]	; (8006dd0 <_setlocale_r+0x3c>)
 8006da6:	bd10      	pop	{r4, pc}
 8006da8:	4620      	mov	r0, r4
 8006daa:	4909      	ldr	r1, [pc, #36]	; (8006dd0 <_setlocale_r+0x3c>)
 8006dac:	f001 fb3c 	bl	8008428 <strcmp>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d0f7      	beq.n	8006da4 <_setlocale_r+0x10>
 8006db4:	4620      	mov	r0, r4
 8006db6:	4907      	ldr	r1, [pc, #28]	; (8006dd4 <_setlocale_r+0x40>)
 8006db8:	f001 fb36 	bl	8008428 <strcmp>
 8006dbc:	4b04      	ldr	r3, [pc, #16]	; (8006dd0 <_setlocale_r+0x3c>)
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	bf0c      	ite	eq
 8006dc2:	4618      	moveq	r0, r3
 8006dc4:	2000      	movne	r0, #0
 8006dc6:	bd10      	pop	{r4, pc}
 8006dc8:	4801      	ldr	r0, [pc, #4]	; (8006dd0 <_setlocale_r+0x3c>)
 8006dca:	4770      	bx	lr
 8006dcc:	0800ad3c 	.word	0x0800ad3c
 8006dd0:	0800acc4 	.word	0x0800acc4
 8006dd4:	0800ab30 	.word	0x0800ab30

08006dd8 <__locale_charset>:
 8006dd8:	4800      	ldr	r0, [pc, #0]	; (8006ddc <__locale_charset+0x4>)
 8006dda:	4770      	bx	lr
 8006ddc:	20000504 	.word	0x20000504

08006de0 <__locale_mb_cur_max>:
 8006de0:	4b01      	ldr	r3, [pc, #4]	; (8006de8 <__locale_mb_cur_max+0x8>)
 8006de2:	6818      	ldr	r0, [r3, #0]
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	20000524 	.word	0x20000524

08006dec <__locale_msgcharset>:
 8006dec:	4800      	ldr	r0, [pc, #0]	; (8006df0 <__locale_msgcharset+0x4>)
 8006dee:	4770      	bx	lr
 8006df0:	200004ac 	.word	0x200004ac

08006df4 <__locale_cjk_lang>:
 8006df4:	2000      	movs	r0, #0
 8006df6:	4770      	bx	lr

08006df8 <_localeconv_r>:
 8006df8:	4800      	ldr	r0, [pc, #0]	; (8006dfc <_localeconv_r+0x4>)
 8006dfa:	4770      	bx	lr
 8006dfc:	200004cc 	.word	0x200004cc

08006e00 <setlocale>:
 8006e00:	4b02      	ldr	r3, [pc, #8]	; (8006e0c <setlocale+0xc>)
 8006e02:	460a      	mov	r2, r1
 8006e04:	4601      	mov	r1, r0
 8006e06:	6818      	ldr	r0, [r3, #0]
 8006e08:	f7ff bfc4 	b.w	8006d94 <_setlocale_r>
 8006e0c:	200004a8 	.word	0x200004a8

08006e10 <localeconv>:
 8006e10:	4800      	ldr	r0, [pc, #0]	; (8006e14 <localeconv+0x4>)
 8006e12:	4770      	bx	lr
 8006e14:	200004cc 	.word	0x200004cc

08006e18 <__smakebuf_r>:
 8006e18:	898b      	ldrh	r3, [r1, #12]
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	f012 0f02 	tst.w	r2, #2
 8006e20:	d13c      	bne.n	8006e9c <__smakebuf_r+0x84>
 8006e22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e24:	460c      	mov	r4, r1
 8006e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e2a:	2900      	cmp	r1, #0
 8006e2c:	b091      	sub	sp, #68	; 0x44
 8006e2e:	4605      	mov	r5, r0
 8006e30:	db19      	blt.n	8006e66 <__smakebuf_r+0x4e>
 8006e32:	aa01      	add	r2, sp, #4
 8006e34:	f002 fcc6 	bl	80097c4 <_fstat_r>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	db12      	blt.n	8006e62 <__smakebuf_r+0x4a>
 8006e3c:	9b02      	ldr	r3, [sp, #8]
 8006e3e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e46:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 8006e4a:	fab7 f787 	clz	r7, r7
 8006e4e:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8006e52:	d02a      	beq.n	8006eaa <__smakebuf_r+0x92>
 8006e54:	89a3      	ldrh	r3, [r4, #12]
 8006e56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e5a:	81a3      	strh	r3, [r4, #12]
 8006e5c:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8006e60:	e00b      	b.n	8006e7a <__smakebuf_r+0x62>
 8006e62:	89a3      	ldrh	r3, [r4, #12]
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006e6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e6e:	81a3      	strh	r3, [r4, #12]
 8006e70:	bf0c      	ite	eq
 8006e72:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8006e76:	2640      	movne	r6, #64	; 0x40
 8006e78:	2700      	movs	r7, #0
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	4631      	mov	r1, r6
 8006e7e:	f000 f83b 	bl	8006ef8 <_malloc_r>
 8006e82:	89a3      	ldrh	r3, [r4, #12]
 8006e84:	b340      	cbz	r0, 8006ed8 <__smakebuf_r+0xc0>
 8006e86:	4a1a      	ldr	r2, [pc, #104]	; (8006ef0 <__smakebuf_r+0xd8>)
 8006e88:	63ea      	str	r2, [r5, #60]	; 0x3c
 8006e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8e:	81a3      	strh	r3, [r4, #12]
 8006e90:	6020      	str	r0, [r4, #0]
 8006e92:	6120      	str	r0, [r4, #16]
 8006e94:	6166      	str	r6, [r4, #20]
 8006e96:	b99f      	cbnz	r7, 8006ec0 <__smakebuf_r+0xa8>
 8006e98:	b011      	add	sp, #68	; 0x44
 8006e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e9c:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	600b      	str	r3, [r1, #0]
 8006ea4:	610b      	str	r3, [r1, #16]
 8006ea6:	614a      	str	r2, [r1, #20]
 8006ea8:	4770      	bx	lr
 8006eaa:	4b12      	ldr	r3, [pc, #72]	; (8006ef4 <__smakebuf_r+0xdc>)
 8006eac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d1d0      	bne.n	8006e54 <__smakebuf_r+0x3c>
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8006eb8:	4333      	orrs	r3, r6
 8006eba:	81a3      	strh	r3, [r4, #12]
 8006ebc:	64e6      	str	r6, [r4, #76]	; 0x4c
 8006ebe:	e7dc      	b.n	8006e7a <__smakebuf_r+0x62>
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ec6:	f002 fc91 	bl	80097ec <_isatty_r>
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	d0e4      	beq.n	8006e98 <__smakebuf_r+0x80>
 8006ece:	89a3      	ldrh	r3, [r4, #12]
 8006ed0:	f043 0301 	orr.w	r3, r3, #1
 8006ed4:	81a3      	strh	r3, [r4, #12]
 8006ed6:	e7df      	b.n	8006e98 <__smakebuf_r+0x80>
 8006ed8:	059a      	lsls	r2, r3, #22
 8006eda:	d4dd      	bmi.n	8006e98 <__smakebuf_r+0x80>
 8006edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ee0:	f043 0302 	orr.w	r3, r3, #2
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	81a3      	strh	r3, [r4, #12]
 8006ee8:	6022      	str	r2, [r4, #0]
 8006eea:	6122      	str	r2, [r4, #16]
 8006eec:	6161      	str	r1, [r4, #20]
 8006eee:	e7d3      	b.n	8006e98 <__smakebuf_r+0x80>
 8006ef0:	08006559 	.word	0x08006559
 8006ef4:	080083dd 	.word	0x080083dd

08006ef8 <_malloc_r>:
 8006ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	f101 050b 	add.w	r5, r1, #11
 8006f00:	2d16      	cmp	r5, #22
 8006f02:	b083      	sub	sp, #12
 8006f04:	4606      	mov	r6, r0
 8006f06:	d927      	bls.n	8006f58 <_malloc_r+0x60>
 8006f08:	f035 0507 	bics.w	r5, r5, #7
 8006f0c:	f100 80b6 	bmi.w	800707c <_malloc_r+0x184>
 8006f10:	42a9      	cmp	r1, r5
 8006f12:	f200 80b3 	bhi.w	800707c <_malloc_r+0x184>
 8006f16:	f000 fb2f 	bl	8007578 <__malloc_lock>
 8006f1a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8006f1e:	d222      	bcs.n	8006f66 <_malloc_r+0x6e>
 8006f20:	4fc2      	ldr	r7, [pc, #776]	; (800722c <_malloc_r+0x334>)
 8006f22:	08e8      	lsrs	r0, r5, #3
 8006f24:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8006f28:	68dc      	ldr	r4, [r3, #12]
 8006f2a:	429c      	cmp	r4, r3
 8006f2c:	f000 81c8 	beq.w	80072c0 <_malloc_r+0x3c8>
 8006f30:	6863      	ldr	r3, [r4, #4]
 8006f32:	68e1      	ldr	r1, [r4, #12]
 8006f34:	68a5      	ldr	r5, [r4, #8]
 8006f36:	f023 0303 	bic.w	r3, r3, #3
 8006f3a:	4423      	add	r3, r4
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	60e9      	str	r1, [r5, #12]
 8006f42:	f042 0201 	orr.w	r2, r2, #1
 8006f46:	608d      	str	r5, [r1, #8]
 8006f48:	605a      	str	r2, [r3, #4]
 8006f4a:	f000 fb17 	bl	800757c <__malloc_unlock>
 8006f4e:	3408      	adds	r4, #8
 8006f50:	4620      	mov	r0, r4
 8006f52:	b003      	add	sp, #12
 8006f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f58:	2910      	cmp	r1, #16
 8006f5a:	f200 808f 	bhi.w	800707c <_malloc_r+0x184>
 8006f5e:	f000 fb0b 	bl	8007578 <__malloc_lock>
 8006f62:	2510      	movs	r5, #16
 8006f64:	e7dc      	b.n	8006f20 <_malloc_r+0x28>
 8006f66:	0a68      	lsrs	r0, r5, #9
 8006f68:	f000 808f 	beq.w	800708a <_malloc_r+0x192>
 8006f6c:	2804      	cmp	r0, #4
 8006f6e:	f200 8154 	bhi.w	800721a <_malloc_r+0x322>
 8006f72:	09a8      	lsrs	r0, r5, #6
 8006f74:	3038      	adds	r0, #56	; 0x38
 8006f76:	0041      	lsls	r1, r0, #1
 8006f78:	4fac      	ldr	r7, [pc, #688]	; (800722c <_malloc_r+0x334>)
 8006f7a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8006f7e:	68cc      	ldr	r4, [r1, #12]
 8006f80:	42a1      	cmp	r1, r4
 8006f82:	d106      	bne.n	8006f92 <_malloc_r+0x9a>
 8006f84:	e00c      	b.n	8006fa0 <_malloc_r+0xa8>
 8006f86:	2a00      	cmp	r2, #0
 8006f88:	f280 8082 	bge.w	8007090 <_malloc_r+0x198>
 8006f8c:	68e4      	ldr	r4, [r4, #12]
 8006f8e:	42a1      	cmp	r1, r4
 8006f90:	d006      	beq.n	8006fa0 <_malloc_r+0xa8>
 8006f92:	6863      	ldr	r3, [r4, #4]
 8006f94:	f023 0303 	bic.w	r3, r3, #3
 8006f98:	1b5a      	subs	r2, r3, r5
 8006f9a:	2a0f      	cmp	r2, #15
 8006f9c:	ddf3      	ble.n	8006f86 <_malloc_r+0x8e>
 8006f9e:	3801      	subs	r0, #1
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	49a2      	ldr	r1, [pc, #648]	; (800722c <_malloc_r+0x334>)
 8006fa4:	693c      	ldr	r4, [r7, #16]
 8006fa6:	f101 0e08 	add.w	lr, r1, #8
 8006faa:	4574      	cmp	r4, lr
 8006fac:	f000 817d 	beq.w	80072aa <_malloc_r+0x3b2>
 8006fb0:	6863      	ldr	r3, [r4, #4]
 8006fb2:	f023 0303 	bic.w	r3, r3, #3
 8006fb6:	1b5a      	subs	r2, r3, r5
 8006fb8:	2a0f      	cmp	r2, #15
 8006fba:	f300 8163 	bgt.w	8007284 <_malloc_r+0x38c>
 8006fbe:	2a00      	cmp	r2, #0
 8006fc0:	f8c1 e014 	str.w	lr, [r1, #20]
 8006fc4:	f8c1 e010 	str.w	lr, [r1, #16]
 8006fc8:	da73      	bge.n	80070b2 <_malloc_r+0x1ba>
 8006fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fce:	f080 8139 	bcs.w	8007244 <_malloc_r+0x34c>
 8006fd2:	08db      	lsrs	r3, r3, #3
 8006fd4:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8006fd8:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8006fdc:	684a      	ldr	r2, [r1, #4]
 8006fde:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8006fe2:	f8c4 9008 	str.w	r9, [r4, #8]
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	fa03 f30c 	lsl.w	r3, r3, ip
 8006fec:	4313      	orrs	r3, r2
 8006fee:	f8c4 800c 	str.w	r8, [r4, #12]
 8006ff2:	604b      	str	r3, [r1, #4]
 8006ff4:	f8c8 4008 	str.w	r4, [r8, #8]
 8006ff8:	f8c9 400c 	str.w	r4, [r9, #12]
 8006ffc:	1082      	asrs	r2, r0, #2
 8006ffe:	2401      	movs	r4, #1
 8007000:	4094      	lsls	r4, r2
 8007002:	429c      	cmp	r4, r3
 8007004:	d862      	bhi.n	80070cc <_malloc_r+0x1d4>
 8007006:	4223      	tst	r3, r4
 8007008:	d106      	bne.n	8007018 <_malloc_r+0x120>
 800700a:	f020 0003 	bic.w	r0, r0, #3
 800700e:	0064      	lsls	r4, r4, #1
 8007010:	4223      	tst	r3, r4
 8007012:	f100 0004 	add.w	r0, r0, #4
 8007016:	d0fa      	beq.n	800700e <_malloc_r+0x116>
 8007018:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 800701c:	46c4      	mov	ip, r8
 800701e:	4681      	mov	r9, r0
 8007020:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8007024:	459c      	cmp	ip, r3
 8007026:	d107      	bne.n	8007038 <_malloc_r+0x140>
 8007028:	e141      	b.n	80072ae <_malloc_r+0x3b6>
 800702a:	2900      	cmp	r1, #0
 800702c:	f280 8151 	bge.w	80072d2 <_malloc_r+0x3da>
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	459c      	cmp	ip, r3
 8007034:	f000 813b 	beq.w	80072ae <_malloc_r+0x3b6>
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	f022 0203 	bic.w	r2, r2, #3
 800703e:	1b51      	subs	r1, r2, r5
 8007040:	290f      	cmp	r1, #15
 8007042:	ddf2      	ble.n	800702a <_malloc_r+0x132>
 8007044:	461c      	mov	r4, r3
 8007046:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800704a:	f854 8f08 	ldr.w	r8, [r4, #8]!
 800704e:	195a      	adds	r2, r3, r5
 8007050:	f045 0901 	orr.w	r9, r5, #1
 8007054:	f041 0501 	orr.w	r5, r1, #1
 8007058:	f8c3 9004 	str.w	r9, [r3, #4]
 800705c:	4630      	mov	r0, r6
 800705e:	f8c8 c00c 	str.w	ip, [r8, #12]
 8007062:	f8cc 8008 	str.w	r8, [ip, #8]
 8007066:	617a      	str	r2, [r7, #20]
 8007068:	613a      	str	r2, [r7, #16]
 800706a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800706e:	f8c2 e008 	str.w	lr, [r2, #8]
 8007072:	6055      	str	r5, [r2, #4]
 8007074:	5051      	str	r1, [r2, r1]
 8007076:	f000 fa81 	bl	800757c <__malloc_unlock>
 800707a:	e769      	b.n	8006f50 <_malloc_r+0x58>
 800707c:	2400      	movs	r4, #0
 800707e:	230c      	movs	r3, #12
 8007080:	4620      	mov	r0, r4
 8007082:	6033      	str	r3, [r6, #0]
 8007084:	b003      	add	sp, #12
 8007086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708a:	217e      	movs	r1, #126	; 0x7e
 800708c:	203f      	movs	r0, #63	; 0x3f
 800708e:	e773      	b.n	8006f78 <_malloc_r+0x80>
 8007090:	4423      	add	r3, r4
 8007092:	68e1      	ldr	r1, [r4, #12]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	68a5      	ldr	r5, [r4, #8]
 8007098:	f042 0201 	orr.w	r2, r2, #1
 800709c:	60e9      	str	r1, [r5, #12]
 800709e:	4630      	mov	r0, r6
 80070a0:	608d      	str	r5, [r1, #8]
 80070a2:	605a      	str	r2, [r3, #4]
 80070a4:	f000 fa6a 	bl	800757c <__malloc_unlock>
 80070a8:	3408      	adds	r4, #8
 80070aa:	4620      	mov	r0, r4
 80070ac:	b003      	add	sp, #12
 80070ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b2:	4423      	add	r3, r4
 80070b4:	4630      	mov	r0, r6
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	f042 0201 	orr.w	r2, r2, #1
 80070bc:	605a      	str	r2, [r3, #4]
 80070be:	f000 fa5d 	bl	800757c <__malloc_unlock>
 80070c2:	3408      	adds	r4, #8
 80070c4:	4620      	mov	r0, r4
 80070c6:	b003      	add	sp, #12
 80070c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070cc:	68bc      	ldr	r4, [r7, #8]
 80070ce:	6863      	ldr	r3, [r4, #4]
 80070d0:	f023 0803 	bic.w	r8, r3, #3
 80070d4:	4545      	cmp	r5, r8
 80070d6:	d804      	bhi.n	80070e2 <_malloc_r+0x1ea>
 80070d8:	ebc5 0308 	rsb	r3, r5, r8
 80070dc:	2b0f      	cmp	r3, #15
 80070de:	f300 808c 	bgt.w	80071fa <_malloc_r+0x302>
 80070e2:	4b53      	ldr	r3, [pc, #332]	; (8007230 <_malloc_r+0x338>)
 80070e4:	f8df a158 	ldr.w	sl, [pc, #344]	; 8007240 <_malloc_r+0x348>
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	f8da 3000 	ldr.w	r3, [sl]
 80070ee:	3301      	adds	r3, #1
 80070f0:	442a      	add	r2, r5
 80070f2:	eb04 0b08 	add.w	fp, r4, r8
 80070f6:	f000 8150 	beq.w	800739a <_malloc_r+0x4a2>
 80070fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80070fe:	320f      	adds	r2, #15
 8007100:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8007104:	f022 020f 	bic.w	r2, r2, #15
 8007108:	4611      	mov	r1, r2
 800710a:	4630      	mov	r0, r6
 800710c:	9201      	str	r2, [sp, #4]
 800710e:	f001 f923 	bl	8008358 <_sbrk_r>
 8007112:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007116:	4681      	mov	r9, r0
 8007118:	9a01      	ldr	r2, [sp, #4]
 800711a:	f000 8147 	beq.w	80073ac <_malloc_r+0x4b4>
 800711e:	4583      	cmp	fp, r0
 8007120:	f200 80ee 	bhi.w	8007300 <_malloc_r+0x408>
 8007124:	4b43      	ldr	r3, [pc, #268]	; (8007234 <_malloc_r+0x33c>)
 8007126:	6819      	ldr	r1, [r3, #0]
 8007128:	45cb      	cmp	fp, r9
 800712a:	4411      	add	r1, r2
 800712c:	6019      	str	r1, [r3, #0]
 800712e:	f000 8142 	beq.w	80073b6 <_malloc_r+0x4be>
 8007132:	f8da 0000 	ldr.w	r0, [sl]
 8007136:	f8df e108 	ldr.w	lr, [pc, #264]	; 8007240 <_malloc_r+0x348>
 800713a:	3001      	adds	r0, #1
 800713c:	bf1b      	ittet	ne
 800713e:	ebcb 0b09 	rsbne	fp, fp, r9
 8007142:	4459      	addne	r1, fp
 8007144:	f8ce 9000 	streq.w	r9, [lr]
 8007148:	6019      	strne	r1, [r3, #0]
 800714a:	f019 0107 	ands.w	r1, r9, #7
 800714e:	f000 8107 	beq.w	8007360 <_malloc_r+0x468>
 8007152:	f1c1 0008 	rsb	r0, r1, #8
 8007156:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800715a:	4481      	add	r9, r0
 800715c:	3108      	adds	r1, #8
 800715e:	444a      	add	r2, r9
 8007160:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007164:	ebc2 0a01 	rsb	sl, r2, r1
 8007168:	4651      	mov	r1, sl
 800716a:	4630      	mov	r0, r6
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	f001 f8f3 	bl	8008358 <_sbrk_r>
 8007172:	1c43      	adds	r3, r0, #1
 8007174:	9b01      	ldr	r3, [sp, #4]
 8007176:	f000 812c 	beq.w	80073d2 <_malloc_r+0x4da>
 800717a:	ebc9 0200 	rsb	r2, r9, r0
 800717e:	4452      	add	r2, sl
 8007180:	f042 0201 	orr.w	r2, r2, #1
 8007184:	6819      	ldr	r1, [r3, #0]
 8007186:	f8c7 9008 	str.w	r9, [r7, #8]
 800718a:	4451      	add	r1, sl
 800718c:	42bc      	cmp	r4, r7
 800718e:	f8c9 2004 	str.w	r2, [r9, #4]
 8007192:	6019      	str	r1, [r3, #0]
 8007194:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8007234 <_malloc_r+0x33c>
 8007198:	d016      	beq.n	80071c8 <_malloc_r+0x2d0>
 800719a:	f1b8 0f0f 	cmp.w	r8, #15
 800719e:	f240 80ee 	bls.w	800737e <_malloc_r+0x486>
 80071a2:	6862      	ldr	r2, [r4, #4]
 80071a4:	f1a8 030c 	sub.w	r3, r8, #12
 80071a8:	f023 0307 	bic.w	r3, r3, #7
 80071ac:	18e0      	adds	r0, r4, r3
 80071ae:	f002 0201 	and.w	r2, r2, #1
 80071b2:	f04f 0e05 	mov.w	lr, #5
 80071b6:	431a      	orrs	r2, r3
 80071b8:	2b0f      	cmp	r3, #15
 80071ba:	6062      	str	r2, [r4, #4]
 80071bc:	f8c0 e004 	str.w	lr, [r0, #4]
 80071c0:	f8c0 e008 	str.w	lr, [r0, #8]
 80071c4:	f200 8109 	bhi.w	80073da <_malloc_r+0x4e2>
 80071c8:	4b1b      	ldr	r3, [pc, #108]	; (8007238 <_malloc_r+0x340>)
 80071ca:	68bc      	ldr	r4, [r7, #8]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	4291      	cmp	r1, r2
 80071d0:	bf88      	it	hi
 80071d2:	6019      	strhi	r1, [r3, #0]
 80071d4:	4b19      	ldr	r3, [pc, #100]	; (800723c <_malloc_r+0x344>)
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	4291      	cmp	r1, r2
 80071da:	6862      	ldr	r2, [r4, #4]
 80071dc:	bf88      	it	hi
 80071de:	6019      	strhi	r1, [r3, #0]
 80071e0:	f022 0203 	bic.w	r2, r2, #3
 80071e4:	4295      	cmp	r5, r2
 80071e6:	eba2 0305 	sub.w	r3, r2, r5
 80071ea:	d801      	bhi.n	80071f0 <_malloc_r+0x2f8>
 80071ec:	2b0f      	cmp	r3, #15
 80071ee:	dc04      	bgt.n	80071fa <_malloc_r+0x302>
 80071f0:	4630      	mov	r0, r6
 80071f2:	f000 f9c3 	bl	800757c <__malloc_unlock>
 80071f6:	2400      	movs	r4, #0
 80071f8:	e6aa      	b.n	8006f50 <_malloc_r+0x58>
 80071fa:	1962      	adds	r2, r4, r5
 80071fc:	f043 0301 	orr.w	r3, r3, #1
 8007200:	f045 0501 	orr.w	r5, r5, #1
 8007204:	6065      	str	r5, [r4, #4]
 8007206:	4630      	mov	r0, r6
 8007208:	60ba      	str	r2, [r7, #8]
 800720a:	6053      	str	r3, [r2, #4]
 800720c:	f000 f9b6 	bl	800757c <__malloc_unlock>
 8007210:	3408      	adds	r4, #8
 8007212:	4620      	mov	r0, r4
 8007214:	b003      	add	sp, #12
 8007216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800721a:	2814      	cmp	r0, #20
 800721c:	d968      	bls.n	80072f0 <_malloc_r+0x3f8>
 800721e:	2854      	cmp	r0, #84	; 0x54
 8007220:	f200 8097 	bhi.w	8007352 <_malloc_r+0x45a>
 8007224:	0b28      	lsrs	r0, r5, #12
 8007226:	306e      	adds	r0, #110	; 0x6e
 8007228:	0041      	lsls	r1, r0, #1
 800722a:	e6a5      	b.n	8006f78 <_malloc_r+0x80>
 800722c:	20000528 	.word	0x20000528
 8007230:	20010484 	.word	0x20010484
 8007234:	20010488 	.word	0x20010488
 8007238:	20010480 	.word	0x20010480
 800723c:	2001047c 	.word	0x2001047c
 8007240:	20000934 	.word	0x20000934
 8007244:	0a5a      	lsrs	r2, r3, #9
 8007246:	2a04      	cmp	r2, #4
 8007248:	d955      	bls.n	80072f6 <_malloc_r+0x3fe>
 800724a:	2a14      	cmp	r2, #20
 800724c:	f200 80a7 	bhi.w	800739e <_malloc_r+0x4a6>
 8007250:	325b      	adds	r2, #91	; 0x5b
 8007252:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8007256:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 800725a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007418 <_malloc_r+0x520>
 800725e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8007262:	4561      	cmp	r1, ip
 8007264:	d07f      	beq.n	8007366 <_malloc_r+0x46e>
 8007266:	684a      	ldr	r2, [r1, #4]
 8007268:	f022 0203 	bic.w	r2, r2, #3
 800726c:	4293      	cmp	r3, r2
 800726e:	d202      	bcs.n	8007276 <_malloc_r+0x37e>
 8007270:	6889      	ldr	r1, [r1, #8]
 8007272:	458c      	cmp	ip, r1
 8007274:	d1f7      	bne.n	8007266 <_malloc_r+0x36e>
 8007276:	68ca      	ldr	r2, [r1, #12]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	60e2      	str	r2, [r4, #12]
 800727c:	60a1      	str	r1, [r4, #8]
 800727e:	6094      	str	r4, [r2, #8]
 8007280:	60cc      	str	r4, [r1, #12]
 8007282:	e6bb      	b.n	8006ffc <_malloc_r+0x104>
 8007284:	1963      	adds	r3, r4, r5
 8007286:	f042 0701 	orr.w	r7, r2, #1
 800728a:	f045 0501 	orr.w	r5, r5, #1
 800728e:	6065      	str	r5, [r4, #4]
 8007290:	4630      	mov	r0, r6
 8007292:	614b      	str	r3, [r1, #20]
 8007294:	610b      	str	r3, [r1, #16]
 8007296:	f8c3 e00c 	str.w	lr, [r3, #12]
 800729a:	f8c3 e008 	str.w	lr, [r3, #8]
 800729e:	605f      	str	r7, [r3, #4]
 80072a0:	509a      	str	r2, [r3, r2]
 80072a2:	3408      	adds	r4, #8
 80072a4:	f000 f96a 	bl	800757c <__malloc_unlock>
 80072a8:	e652      	b.n	8006f50 <_malloc_r+0x58>
 80072aa:	684b      	ldr	r3, [r1, #4]
 80072ac:	e6a6      	b.n	8006ffc <_malloc_r+0x104>
 80072ae:	f109 0901 	add.w	r9, r9, #1
 80072b2:	f019 0f03 	tst.w	r9, #3
 80072b6:	f10c 0c08 	add.w	ip, ip, #8
 80072ba:	f47f aeb1 	bne.w	8007020 <_malloc_r+0x128>
 80072be:	e02c      	b.n	800731a <_malloc_r+0x422>
 80072c0:	f104 0308 	add.w	r3, r4, #8
 80072c4:	6964      	ldr	r4, [r4, #20]
 80072c6:	42a3      	cmp	r3, r4
 80072c8:	bf08      	it	eq
 80072ca:	3002      	addeq	r0, #2
 80072cc:	f43f ae69 	beq.w	8006fa2 <_malloc_r+0xaa>
 80072d0:	e62e      	b.n	8006f30 <_malloc_r+0x38>
 80072d2:	441a      	add	r2, r3
 80072d4:	461c      	mov	r4, r3
 80072d6:	6851      	ldr	r1, [r2, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	f854 5f08 	ldr.w	r5, [r4, #8]!
 80072de:	f041 0101 	orr.w	r1, r1, #1
 80072e2:	6051      	str	r1, [r2, #4]
 80072e4:	4630      	mov	r0, r6
 80072e6:	60eb      	str	r3, [r5, #12]
 80072e8:	609d      	str	r5, [r3, #8]
 80072ea:	f000 f947 	bl	800757c <__malloc_unlock>
 80072ee:	e62f      	b.n	8006f50 <_malloc_r+0x58>
 80072f0:	305b      	adds	r0, #91	; 0x5b
 80072f2:	0041      	lsls	r1, r0, #1
 80072f4:	e640      	b.n	8006f78 <_malloc_r+0x80>
 80072f6:	099a      	lsrs	r2, r3, #6
 80072f8:	3238      	adds	r2, #56	; 0x38
 80072fa:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80072fe:	e7aa      	b.n	8007256 <_malloc_r+0x35e>
 8007300:	42bc      	cmp	r4, r7
 8007302:	4b45      	ldr	r3, [pc, #276]	; (8007418 <_malloc_r+0x520>)
 8007304:	f43f af0e 	beq.w	8007124 <_malloc_r+0x22c>
 8007308:	689c      	ldr	r4, [r3, #8]
 800730a:	6862      	ldr	r2, [r4, #4]
 800730c:	f022 0203 	bic.w	r2, r2, #3
 8007310:	e768      	b.n	80071e4 <_malloc_r+0x2ec>
 8007312:	f8d8 8000 	ldr.w	r8, [r8]
 8007316:	4598      	cmp	r8, r3
 8007318:	d17c      	bne.n	8007414 <_malloc_r+0x51c>
 800731a:	f010 0f03 	tst.w	r0, #3
 800731e:	f1a8 0308 	sub.w	r3, r8, #8
 8007322:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8007326:	d1f4      	bne.n	8007312 <_malloc_r+0x41a>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	ea23 0304 	bic.w	r3, r3, r4
 800732e:	607b      	str	r3, [r7, #4]
 8007330:	0064      	lsls	r4, r4, #1
 8007332:	429c      	cmp	r4, r3
 8007334:	f63f aeca 	bhi.w	80070cc <_malloc_r+0x1d4>
 8007338:	2c00      	cmp	r4, #0
 800733a:	f43f aec7 	beq.w	80070cc <_malloc_r+0x1d4>
 800733e:	4223      	tst	r3, r4
 8007340:	4648      	mov	r0, r9
 8007342:	f47f ae69 	bne.w	8007018 <_malloc_r+0x120>
 8007346:	0064      	lsls	r4, r4, #1
 8007348:	4223      	tst	r3, r4
 800734a:	f100 0004 	add.w	r0, r0, #4
 800734e:	d0fa      	beq.n	8007346 <_malloc_r+0x44e>
 8007350:	e662      	b.n	8007018 <_malloc_r+0x120>
 8007352:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8007356:	d818      	bhi.n	800738a <_malloc_r+0x492>
 8007358:	0be8      	lsrs	r0, r5, #15
 800735a:	3077      	adds	r0, #119	; 0x77
 800735c:	0041      	lsls	r1, r0, #1
 800735e:	e60b      	b.n	8006f78 <_malloc_r+0x80>
 8007360:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007364:	e6fb      	b.n	800715e <_malloc_r+0x266>
 8007366:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800736a:	1092      	asrs	r2, r2, #2
 800736c:	f04f 0c01 	mov.w	ip, #1
 8007370:	fa0c f202 	lsl.w	r2, ip, r2
 8007374:	4313      	orrs	r3, r2
 8007376:	f8c8 3004 	str.w	r3, [r8, #4]
 800737a:	460a      	mov	r2, r1
 800737c:	e77d      	b.n	800727a <_malloc_r+0x382>
 800737e:	2301      	movs	r3, #1
 8007380:	f8c9 3004 	str.w	r3, [r9, #4]
 8007384:	464c      	mov	r4, r9
 8007386:	2200      	movs	r2, #0
 8007388:	e72c      	b.n	80071e4 <_malloc_r+0x2ec>
 800738a:	f240 5354 	movw	r3, #1364	; 0x554
 800738e:	4298      	cmp	r0, r3
 8007390:	d81c      	bhi.n	80073cc <_malloc_r+0x4d4>
 8007392:	0ca8      	lsrs	r0, r5, #18
 8007394:	307c      	adds	r0, #124	; 0x7c
 8007396:	0041      	lsls	r1, r0, #1
 8007398:	e5ee      	b.n	8006f78 <_malloc_r+0x80>
 800739a:	3210      	adds	r2, #16
 800739c:	e6b4      	b.n	8007108 <_malloc_r+0x210>
 800739e:	2a54      	cmp	r2, #84	; 0x54
 80073a0:	d823      	bhi.n	80073ea <_malloc_r+0x4f2>
 80073a2:	0b1a      	lsrs	r2, r3, #12
 80073a4:	326e      	adds	r2, #110	; 0x6e
 80073a6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80073aa:	e754      	b.n	8007256 <_malloc_r+0x35e>
 80073ac:	68bc      	ldr	r4, [r7, #8]
 80073ae:	6862      	ldr	r2, [r4, #4]
 80073b0:	f022 0203 	bic.w	r2, r2, #3
 80073b4:	e716      	b.n	80071e4 <_malloc_r+0x2ec>
 80073b6:	f3cb 000b 	ubfx	r0, fp, #0, #12
 80073ba:	2800      	cmp	r0, #0
 80073bc:	f47f aeb9 	bne.w	8007132 <_malloc_r+0x23a>
 80073c0:	4442      	add	r2, r8
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	f042 0201 	orr.w	r2, r2, #1
 80073c8:	605a      	str	r2, [r3, #4]
 80073ca:	e6fd      	b.n	80071c8 <_malloc_r+0x2d0>
 80073cc:	21fc      	movs	r1, #252	; 0xfc
 80073ce:	207e      	movs	r0, #126	; 0x7e
 80073d0:	e5d2      	b.n	8006f78 <_malloc_r+0x80>
 80073d2:	2201      	movs	r2, #1
 80073d4:	f04f 0a00 	mov.w	sl, #0
 80073d8:	e6d4      	b.n	8007184 <_malloc_r+0x28c>
 80073da:	f104 0108 	add.w	r1, r4, #8
 80073de:	4630      	mov	r0, r6
 80073e0:	f7ff fa24 	bl	800682c <_free_r>
 80073e4:	f8da 1000 	ldr.w	r1, [sl]
 80073e8:	e6ee      	b.n	80071c8 <_malloc_r+0x2d0>
 80073ea:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80073ee:	d804      	bhi.n	80073fa <_malloc_r+0x502>
 80073f0:	0bda      	lsrs	r2, r3, #15
 80073f2:	3277      	adds	r2, #119	; 0x77
 80073f4:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80073f8:	e72d      	b.n	8007256 <_malloc_r+0x35e>
 80073fa:	f240 5154 	movw	r1, #1364	; 0x554
 80073fe:	428a      	cmp	r2, r1
 8007400:	d804      	bhi.n	800740c <_malloc_r+0x514>
 8007402:	0c9a      	lsrs	r2, r3, #18
 8007404:	327c      	adds	r2, #124	; 0x7c
 8007406:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800740a:	e724      	b.n	8007256 <_malloc_r+0x35e>
 800740c:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8007410:	227e      	movs	r2, #126	; 0x7e
 8007412:	e720      	b.n	8007256 <_malloc_r+0x35e>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	e78b      	b.n	8007330 <_malloc_r+0x438>
 8007418:	20000528 	.word	0x20000528

0800741c <memchr>:
 800741c:	0783      	lsls	r3, r0, #30
 800741e:	b470      	push	{r4, r5, r6}
 8007420:	b2c9      	uxtb	r1, r1
 8007422:	d040      	beq.n	80074a6 <memchr+0x8a>
 8007424:	1e54      	subs	r4, r2, #1
 8007426:	2a00      	cmp	r2, #0
 8007428:	d03f      	beq.n	80074aa <memchr+0x8e>
 800742a:	7803      	ldrb	r3, [r0, #0]
 800742c:	428b      	cmp	r3, r1
 800742e:	bf18      	it	ne
 8007430:	1c43      	addne	r3, r0, #1
 8007432:	d106      	bne.n	8007442 <memchr+0x26>
 8007434:	e01d      	b.n	8007472 <memchr+0x56>
 8007436:	b1f4      	cbz	r4, 8007476 <memchr+0x5a>
 8007438:	7802      	ldrb	r2, [r0, #0]
 800743a:	428a      	cmp	r2, r1
 800743c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007440:	d017      	beq.n	8007472 <memchr+0x56>
 8007442:	f013 0f03 	tst.w	r3, #3
 8007446:	4618      	mov	r0, r3
 8007448:	f103 0301 	add.w	r3, r3, #1
 800744c:	d1f3      	bne.n	8007436 <memchr+0x1a>
 800744e:	2c03      	cmp	r4, #3
 8007450:	d814      	bhi.n	800747c <memchr+0x60>
 8007452:	b184      	cbz	r4, 8007476 <memchr+0x5a>
 8007454:	7803      	ldrb	r3, [r0, #0]
 8007456:	428b      	cmp	r3, r1
 8007458:	d00b      	beq.n	8007472 <memchr+0x56>
 800745a:	1905      	adds	r5, r0, r4
 800745c:	1c43      	adds	r3, r0, #1
 800745e:	e002      	b.n	8007466 <memchr+0x4a>
 8007460:	7802      	ldrb	r2, [r0, #0]
 8007462:	428a      	cmp	r2, r1
 8007464:	d005      	beq.n	8007472 <memchr+0x56>
 8007466:	42ab      	cmp	r3, r5
 8007468:	4618      	mov	r0, r3
 800746a:	f103 0301 	add.w	r3, r3, #1
 800746e:	d1f7      	bne.n	8007460 <memchr+0x44>
 8007470:	2000      	movs	r0, #0
 8007472:	bc70      	pop	{r4, r5, r6}
 8007474:	4770      	bx	lr
 8007476:	4620      	mov	r0, r4
 8007478:	bc70      	pop	{r4, r5, r6}
 800747a:	4770      	bx	lr
 800747c:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8007480:	4602      	mov	r2, r0
 8007482:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8007486:	4610      	mov	r0, r2
 8007488:	3204      	adds	r2, #4
 800748a:	6803      	ldr	r3, [r0, #0]
 800748c:	4073      	eors	r3, r6
 800748e:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8007492:	ea25 0303 	bic.w	r3, r5, r3
 8007496:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800749a:	d1da      	bne.n	8007452 <memchr+0x36>
 800749c:	3c04      	subs	r4, #4
 800749e:	2c03      	cmp	r4, #3
 80074a0:	4610      	mov	r0, r2
 80074a2:	d8f0      	bhi.n	8007486 <memchr+0x6a>
 80074a4:	e7d5      	b.n	8007452 <memchr+0x36>
 80074a6:	4614      	mov	r4, r2
 80074a8:	e7d1      	b.n	800744e <memchr+0x32>
 80074aa:	4610      	mov	r0, r2
 80074ac:	e7e1      	b.n	8007472 <memchr+0x56>
 80074ae:	bf00      	nop

080074b0 <memmove>:
 80074b0:	4288      	cmp	r0, r1
 80074b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074b4:	d90d      	bls.n	80074d2 <memmove+0x22>
 80074b6:	188b      	adds	r3, r1, r2
 80074b8:	4298      	cmp	r0, r3
 80074ba:	d20a      	bcs.n	80074d2 <memmove+0x22>
 80074bc:	1881      	adds	r1, r0, r2
 80074be:	2a00      	cmp	r2, #0
 80074c0:	d054      	beq.n	800756c <memmove+0xbc>
 80074c2:	1a9a      	subs	r2, r3, r2
 80074c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d1f9      	bne.n	80074c4 <memmove+0x14>
 80074d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074d2:	2a0f      	cmp	r2, #15
 80074d4:	d948      	bls.n	8007568 <memmove+0xb8>
 80074d6:	ea40 0301 	orr.w	r3, r0, r1
 80074da:	079b      	lsls	r3, r3, #30
 80074dc:	d147      	bne.n	800756e <memmove+0xbe>
 80074de:	f100 0410 	add.w	r4, r0, #16
 80074e2:	f101 0310 	add.w	r3, r1, #16
 80074e6:	4615      	mov	r5, r2
 80074e8:	f853 6c10 	ldr.w	r6, [r3, #-16]
 80074ec:	f844 6c10 	str.w	r6, [r4, #-16]
 80074f0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 80074f4:	f844 6c0c 	str.w	r6, [r4, #-12]
 80074f8:	f853 6c08 	ldr.w	r6, [r3, #-8]
 80074fc:	f844 6c08 	str.w	r6, [r4, #-8]
 8007500:	3d10      	subs	r5, #16
 8007502:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8007506:	f844 6c04 	str.w	r6, [r4, #-4]
 800750a:	2d0f      	cmp	r5, #15
 800750c:	f103 0310 	add.w	r3, r3, #16
 8007510:	f104 0410 	add.w	r4, r4, #16
 8007514:	d8e8      	bhi.n	80074e8 <memmove+0x38>
 8007516:	f1a2 0310 	sub.w	r3, r2, #16
 800751a:	f023 030f 	bic.w	r3, r3, #15
 800751e:	f002 0e0f 	and.w	lr, r2, #15
 8007522:	3310      	adds	r3, #16
 8007524:	f1be 0f03 	cmp.w	lr, #3
 8007528:	4419      	add	r1, r3
 800752a:	4403      	add	r3, r0
 800752c:	d921      	bls.n	8007572 <memmove+0xc2>
 800752e:	1f1e      	subs	r6, r3, #4
 8007530:	460d      	mov	r5, r1
 8007532:	4674      	mov	r4, lr
 8007534:	3c04      	subs	r4, #4
 8007536:	f855 7b04 	ldr.w	r7, [r5], #4
 800753a:	f846 7f04 	str.w	r7, [r6, #4]!
 800753e:	2c03      	cmp	r4, #3
 8007540:	d8f8      	bhi.n	8007534 <memmove+0x84>
 8007542:	f1ae 0404 	sub.w	r4, lr, #4
 8007546:	f024 0403 	bic.w	r4, r4, #3
 800754a:	3404      	adds	r4, #4
 800754c:	4423      	add	r3, r4
 800754e:	4421      	add	r1, r4
 8007550:	f002 0203 	and.w	r2, r2, #3
 8007554:	b152      	cbz	r2, 800756c <memmove+0xbc>
 8007556:	3b01      	subs	r3, #1
 8007558:	440a      	add	r2, r1
 800755a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800755e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007562:	4291      	cmp	r1, r2
 8007564:	d1f9      	bne.n	800755a <memmove+0xaa>
 8007566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007568:	4603      	mov	r3, r0
 800756a:	e7f3      	b.n	8007554 <memmove+0xa4>
 800756c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800756e:	4603      	mov	r3, r0
 8007570:	e7f1      	b.n	8007556 <memmove+0xa6>
 8007572:	4672      	mov	r2, lr
 8007574:	e7ee      	b.n	8007554 <memmove+0xa4>
 8007576:	bf00      	nop

08007578 <__malloc_lock>:
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop

0800757c <__malloc_unlock>:
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop

08007580 <_Balloc>:
 8007580:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007582:	b570      	push	{r4, r5, r6, lr}
 8007584:	4605      	mov	r5, r0
 8007586:	460c      	mov	r4, r1
 8007588:	b14b      	cbz	r3, 800759e <_Balloc+0x1e>
 800758a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800758e:	b180      	cbz	r0, 80075b2 <_Balloc+0x32>
 8007590:	6802      	ldr	r2, [r0, #0]
 8007592:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8007596:	2300      	movs	r3, #0
 8007598:	6103      	str	r3, [r0, #16]
 800759a:	60c3      	str	r3, [r0, #12]
 800759c:	bd70      	pop	{r4, r5, r6, pc}
 800759e:	2104      	movs	r1, #4
 80075a0:	2221      	movs	r2, #33	; 0x21
 80075a2:	f002 f805 	bl	80095b0 <_calloc_r>
 80075a6:	64e8      	str	r0, [r5, #76]	; 0x4c
 80075a8:	4603      	mov	r3, r0
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d1ed      	bne.n	800758a <_Balloc+0xa>
 80075ae:	2000      	movs	r0, #0
 80075b0:	bd70      	pop	{r4, r5, r6, pc}
 80075b2:	2101      	movs	r1, #1
 80075b4:	fa01 f604 	lsl.w	r6, r1, r4
 80075b8:	1d72      	adds	r2, r6, #5
 80075ba:	4628      	mov	r0, r5
 80075bc:	0092      	lsls	r2, r2, #2
 80075be:	f001 fff7 	bl	80095b0 <_calloc_r>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d0f3      	beq.n	80075ae <_Balloc+0x2e>
 80075c6:	6044      	str	r4, [r0, #4]
 80075c8:	6086      	str	r6, [r0, #8]
 80075ca:	e7e4      	b.n	8007596 <_Balloc+0x16>

080075cc <_Bfree>:
 80075cc:	b131      	cbz	r1, 80075dc <_Bfree+0x10>
 80075ce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80075d0:	684a      	ldr	r2, [r1, #4]
 80075d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80075d6:	6008      	str	r0, [r1, #0]
 80075d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop

080075e0 <__multadd>:
 80075e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075e2:	690c      	ldr	r4, [r1, #16]
 80075e4:	b083      	sub	sp, #12
 80075e6:	460d      	mov	r5, r1
 80075e8:	4606      	mov	r6, r0
 80075ea:	f101 0e14 	add.w	lr, r1, #20
 80075ee:	2700      	movs	r7, #0
 80075f0:	f8de 1000 	ldr.w	r1, [lr]
 80075f4:	b288      	uxth	r0, r1
 80075f6:	0c09      	lsrs	r1, r1, #16
 80075f8:	fb02 3300 	mla	r3, r2, r0, r3
 80075fc:	fb02 f101 	mul.w	r1, r2, r1
 8007600:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 8007604:	3701      	adds	r7, #1
 8007606:	b29b      	uxth	r3, r3
 8007608:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 800760c:	42bc      	cmp	r4, r7
 800760e:	f84e 3b04 	str.w	r3, [lr], #4
 8007612:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8007616:	dceb      	bgt.n	80075f0 <__multadd+0x10>
 8007618:	b13b      	cbz	r3, 800762a <__multadd+0x4a>
 800761a:	68aa      	ldr	r2, [r5, #8]
 800761c:	4294      	cmp	r4, r2
 800761e:	da07      	bge.n	8007630 <__multadd+0x50>
 8007620:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8007624:	3401      	adds	r4, #1
 8007626:	6153      	str	r3, [r2, #20]
 8007628:	612c      	str	r4, [r5, #16]
 800762a:	4628      	mov	r0, r5
 800762c:	b003      	add	sp, #12
 800762e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007630:	6869      	ldr	r1, [r5, #4]
 8007632:	9301      	str	r3, [sp, #4]
 8007634:	3101      	adds	r1, #1
 8007636:	4630      	mov	r0, r6
 8007638:	f7ff ffa2 	bl	8007580 <_Balloc>
 800763c:	692a      	ldr	r2, [r5, #16]
 800763e:	3202      	adds	r2, #2
 8007640:	f105 010c 	add.w	r1, r5, #12
 8007644:	4607      	mov	r7, r0
 8007646:	0092      	lsls	r2, r2, #2
 8007648:	300c      	adds	r0, #12
 800764a:	f7fc fa0d 	bl	8003a68 <memcpy>
 800764e:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8007650:	6869      	ldr	r1, [r5, #4]
 8007652:	9b01      	ldr	r3, [sp, #4]
 8007654:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8007658:	6028      	str	r0, [r5, #0]
 800765a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800765e:	463d      	mov	r5, r7
 8007660:	e7de      	b.n	8007620 <__multadd+0x40>
 8007662:	bf00      	nop

08007664 <__s2b>:
 8007664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007668:	4c23      	ldr	r4, [pc, #140]	; (80076f8 <__s2b+0x94>)
 800766a:	9e08      	ldr	r6, [sp, #32]
 800766c:	461f      	mov	r7, r3
 800766e:	3308      	adds	r3, #8
 8007670:	fb84 4e03 	smull	r4, lr, r4, r3
 8007674:	17db      	asrs	r3, r3, #31
 8007676:	ebc3 0e6e 	rsb	lr, r3, lr, asr #1
 800767a:	f1be 0f01 	cmp.w	lr, #1
 800767e:	4605      	mov	r5, r0
 8007680:	460c      	mov	r4, r1
 8007682:	4690      	mov	r8, r2
 8007684:	dd35      	ble.n	80076f2 <__s2b+0x8e>
 8007686:	2301      	movs	r3, #1
 8007688:	2100      	movs	r1, #0
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	459e      	cmp	lr, r3
 800768e:	f101 0101 	add.w	r1, r1, #1
 8007692:	dcfa      	bgt.n	800768a <__s2b+0x26>
 8007694:	4628      	mov	r0, r5
 8007696:	f7ff ff73 	bl	8007580 <_Balloc>
 800769a:	2301      	movs	r3, #1
 800769c:	f1b8 0f09 	cmp.w	r8, #9
 80076a0:	6146      	str	r6, [r0, #20]
 80076a2:	6103      	str	r3, [r0, #16]
 80076a4:	dd21      	ble.n	80076ea <__s2b+0x86>
 80076a6:	f104 0909 	add.w	r9, r4, #9
 80076aa:	464e      	mov	r6, r9
 80076ac:	4444      	add	r4, r8
 80076ae:	f816 3b01 	ldrb.w	r3, [r6], #1
 80076b2:	4601      	mov	r1, r0
 80076b4:	3b30      	subs	r3, #48	; 0x30
 80076b6:	4628      	mov	r0, r5
 80076b8:	220a      	movs	r2, #10
 80076ba:	f7ff ff91 	bl	80075e0 <__multadd>
 80076be:	42a6      	cmp	r6, r4
 80076c0:	d1f5      	bne.n	80076ae <__s2b+0x4a>
 80076c2:	eb09 0408 	add.w	r4, r9, r8
 80076c6:	3c08      	subs	r4, #8
 80076c8:	4547      	cmp	r7, r8
 80076ca:	dd0c      	ble.n	80076e6 <__s2b+0x82>
 80076cc:	ebc8 0707 	rsb	r7, r8, r7
 80076d0:	4427      	add	r7, r4
 80076d2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80076d6:	4601      	mov	r1, r0
 80076d8:	3b30      	subs	r3, #48	; 0x30
 80076da:	4628      	mov	r0, r5
 80076dc:	220a      	movs	r2, #10
 80076de:	f7ff ff7f 	bl	80075e0 <__multadd>
 80076e2:	42bc      	cmp	r4, r7
 80076e4:	d1f5      	bne.n	80076d2 <__s2b+0x6e>
 80076e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ea:	340a      	adds	r4, #10
 80076ec:	f04f 0809 	mov.w	r8, #9
 80076f0:	e7ea      	b.n	80076c8 <__s2b+0x64>
 80076f2:	2100      	movs	r1, #0
 80076f4:	e7ce      	b.n	8007694 <__s2b+0x30>
 80076f6:	bf00      	nop
 80076f8:	38e38e39 	.word	0x38e38e39

080076fc <__hi0bits>:
 80076fc:	0c03      	lsrs	r3, r0, #16
 80076fe:	041b      	lsls	r3, r3, #16
 8007700:	b9b3      	cbnz	r3, 8007730 <__hi0bits+0x34>
 8007702:	0400      	lsls	r0, r0, #16
 8007704:	2310      	movs	r3, #16
 8007706:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800770a:	bf04      	itt	eq
 800770c:	0200      	lsleq	r0, r0, #8
 800770e:	3308      	addeq	r3, #8
 8007710:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007714:	bf04      	itt	eq
 8007716:	0100      	lsleq	r0, r0, #4
 8007718:	3304      	addeq	r3, #4
 800771a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800771e:	bf04      	itt	eq
 8007720:	0080      	lsleq	r0, r0, #2
 8007722:	3302      	addeq	r3, #2
 8007724:	2800      	cmp	r0, #0
 8007726:	db07      	blt.n	8007738 <__hi0bits+0x3c>
 8007728:	0042      	lsls	r2, r0, #1
 800772a:	d403      	bmi.n	8007734 <__hi0bits+0x38>
 800772c:	2020      	movs	r0, #32
 800772e:	4770      	bx	lr
 8007730:	2300      	movs	r3, #0
 8007732:	e7e8      	b.n	8007706 <__hi0bits+0xa>
 8007734:	1c58      	adds	r0, r3, #1
 8007736:	4770      	bx	lr
 8007738:	4618      	mov	r0, r3
 800773a:	4770      	bx	lr

0800773c <__lo0bits>:
 800773c:	6803      	ldr	r3, [r0, #0]
 800773e:	f013 0207 	ands.w	r2, r3, #7
 8007742:	d007      	beq.n	8007754 <__lo0bits+0x18>
 8007744:	07d9      	lsls	r1, r3, #31
 8007746:	d420      	bmi.n	800778a <__lo0bits+0x4e>
 8007748:	079a      	lsls	r2, r3, #30
 800774a:	d420      	bmi.n	800778e <__lo0bits+0x52>
 800774c:	089b      	lsrs	r3, r3, #2
 800774e:	6003      	str	r3, [r0, #0]
 8007750:	2002      	movs	r0, #2
 8007752:	4770      	bx	lr
 8007754:	b299      	uxth	r1, r3
 8007756:	b909      	cbnz	r1, 800775c <__lo0bits+0x20>
 8007758:	0c1b      	lsrs	r3, r3, #16
 800775a:	2210      	movs	r2, #16
 800775c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007760:	bf04      	itt	eq
 8007762:	0a1b      	lsreq	r3, r3, #8
 8007764:	3208      	addeq	r2, #8
 8007766:	0719      	lsls	r1, r3, #28
 8007768:	bf04      	itt	eq
 800776a:	091b      	lsreq	r3, r3, #4
 800776c:	3204      	addeq	r2, #4
 800776e:	0799      	lsls	r1, r3, #30
 8007770:	bf04      	itt	eq
 8007772:	089b      	lsreq	r3, r3, #2
 8007774:	3202      	addeq	r2, #2
 8007776:	07d9      	lsls	r1, r3, #31
 8007778:	d404      	bmi.n	8007784 <__lo0bits+0x48>
 800777a:	085b      	lsrs	r3, r3, #1
 800777c:	d101      	bne.n	8007782 <__lo0bits+0x46>
 800777e:	2020      	movs	r0, #32
 8007780:	4770      	bx	lr
 8007782:	3201      	adds	r2, #1
 8007784:	6003      	str	r3, [r0, #0]
 8007786:	4610      	mov	r0, r2
 8007788:	4770      	bx	lr
 800778a:	2000      	movs	r0, #0
 800778c:	4770      	bx	lr
 800778e:	085b      	lsrs	r3, r3, #1
 8007790:	6003      	str	r3, [r0, #0]
 8007792:	2001      	movs	r0, #1
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop

08007798 <__i2b>:
 8007798:	b510      	push	{r4, lr}
 800779a:	460c      	mov	r4, r1
 800779c:	2101      	movs	r1, #1
 800779e:	f7ff feef 	bl	8007580 <_Balloc>
 80077a2:	2201      	movs	r2, #1
 80077a4:	6144      	str	r4, [r0, #20]
 80077a6:	6102      	str	r2, [r0, #16]
 80077a8:	bd10      	pop	{r4, pc}
 80077aa:	bf00      	nop

080077ac <__multiply>:
 80077ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b0:	690f      	ldr	r7, [r1, #16]
 80077b2:	6916      	ldr	r6, [r2, #16]
 80077b4:	42b7      	cmp	r7, r6
 80077b6:	b083      	sub	sp, #12
 80077b8:	460d      	mov	r5, r1
 80077ba:	4614      	mov	r4, r2
 80077bc:	f2c0 808d 	blt.w	80078da <__multiply+0x12e>
 80077c0:	4633      	mov	r3, r6
 80077c2:	463e      	mov	r6, r7
 80077c4:	461f      	mov	r7, r3
 80077c6:	68ab      	ldr	r3, [r5, #8]
 80077c8:	6869      	ldr	r1, [r5, #4]
 80077ca:	eb06 0807 	add.w	r8, r6, r7
 80077ce:	4598      	cmp	r8, r3
 80077d0:	bfc8      	it	gt
 80077d2:	3101      	addgt	r1, #1
 80077d4:	f7ff fed4 	bl	8007580 <_Balloc>
 80077d8:	f100 0c14 	add.w	ip, r0, #20
 80077dc:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 80077e0:	45cc      	cmp	ip, r9
 80077e2:	9000      	str	r0, [sp, #0]
 80077e4:	d205      	bcs.n	80077f2 <__multiply+0x46>
 80077e6:	4663      	mov	r3, ip
 80077e8:	2100      	movs	r1, #0
 80077ea:	f843 1b04 	str.w	r1, [r3], #4
 80077ee:	4599      	cmp	r9, r3
 80077f0:	d8fb      	bhi.n	80077ea <__multiply+0x3e>
 80077f2:	f104 0214 	add.w	r2, r4, #20
 80077f6:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 80077fa:	f105 0314 	add.w	r3, r5, #20
 80077fe:	4552      	cmp	r2, sl
 8007800:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8007804:	d254      	bcs.n	80078b0 <__multiply+0x104>
 8007806:	f8cd 9004 	str.w	r9, [sp, #4]
 800780a:	4699      	mov	r9, r3
 800780c:	f852 3b04 	ldr.w	r3, [r2], #4
 8007810:	fa1f fb83 	uxth.w	fp, r3
 8007814:	f1bb 0f00 	cmp.w	fp, #0
 8007818:	d020      	beq.n	800785c <__multiply+0xb0>
 800781a:	2000      	movs	r0, #0
 800781c:	464f      	mov	r7, r9
 800781e:	4666      	mov	r6, ip
 8007820:	4605      	mov	r5, r0
 8007822:	e000      	b.n	8007826 <__multiply+0x7a>
 8007824:	461e      	mov	r6, r3
 8007826:	f857 4b04 	ldr.w	r4, [r7], #4
 800782a:	6830      	ldr	r0, [r6, #0]
 800782c:	b2a1      	uxth	r1, r4
 800782e:	b283      	uxth	r3, r0
 8007830:	fb0b 3101 	mla	r1, fp, r1, r3
 8007834:	0c24      	lsrs	r4, r4, #16
 8007836:	0c00      	lsrs	r0, r0, #16
 8007838:	194b      	adds	r3, r1, r5
 800783a:	fb0b 0004 	mla	r0, fp, r4, r0
 800783e:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8007842:	b299      	uxth	r1, r3
 8007844:	4633      	mov	r3, r6
 8007846:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800784a:	45be      	cmp	lr, r7
 800784c:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8007850:	f843 1b04 	str.w	r1, [r3], #4
 8007854:	d8e6      	bhi.n	8007824 <__multiply+0x78>
 8007856:	6075      	str	r5, [r6, #4]
 8007858:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800785c:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8007860:	d020      	beq.n	80078a4 <__multiply+0xf8>
 8007862:	f8dc 3000 	ldr.w	r3, [ip]
 8007866:	4667      	mov	r7, ip
 8007868:	4618      	mov	r0, r3
 800786a:	464d      	mov	r5, r9
 800786c:	2100      	movs	r1, #0
 800786e:	e000      	b.n	8007872 <__multiply+0xc6>
 8007870:	4637      	mov	r7, r6
 8007872:	882c      	ldrh	r4, [r5, #0]
 8007874:	0c00      	lsrs	r0, r0, #16
 8007876:	fb0b 0004 	mla	r0, fp, r4, r0
 800787a:	4401      	add	r1, r0
 800787c:	b29c      	uxth	r4, r3
 800787e:	463e      	mov	r6, r7
 8007880:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8007884:	f846 3b04 	str.w	r3, [r6], #4
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f855 4b04 	ldr.w	r4, [r5], #4
 800788e:	b283      	uxth	r3, r0
 8007890:	0c24      	lsrs	r4, r4, #16
 8007892:	fb0b 3404 	mla	r4, fp, r4, r3
 8007896:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 800789a:	45ae      	cmp	lr, r5
 800789c:	ea4f 4113 	mov.w	r1, r3, lsr #16
 80078a0:	d8e6      	bhi.n	8007870 <__multiply+0xc4>
 80078a2:	607b      	str	r3, [r7, #4]
 80078a4:	4592      	cmp	sl, r2
 80078a6:	f10c 0c04 	add.w	ip, ip, #4
 80078aa:	d8af      	bhi.n	800780c <__multiply+0x60>
 80078ac:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80078b0:	f1b8 0f00 	cmp.w	r8, #0
 80078b4:	dd0b      	ble.n	80078ce <__multiply+0x122>
 80078b6:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80078ba:	f1a9 0904 	sub.w	r9, r9, #4
 80078be:	b11b      	cbz	r3, 80078c8 <__multiply+0x11c>
 80078c0:	e005      	b.n	80078ce <__multiply+0x122>
 80078c2:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 80078c6:	b913      	cbnz	r3, 80078ce <__multiply+0x122>
 80078c8:	f1b8 0801 	subs.w	r8, r8, #1
 80078cc:	d1f9      	bne.n	80078c2 <__multiply+0x116>
 80078ce:	9800      	ldr	r0, [sp, #0]
 80078d0:	f8c0 8010 	str.w	r8, [r0, #16]
 80078d4:	b003      	add	sp, #12
 80078d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078da:	4615      	mov	r5, r2
 80078dc:	460c      	mov	r4, r1
 80078de:	e772      	b.n	80077c6 <__multiply+0x1a>

080078e0 <__pow5mult>:
 80078e0:	f012 0303 	ands.w	r3, r2, #3
 80078e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e8:	4614      	mov	r4, r2
 80078ea:	4607      	mov	r7, r0
 80078ec:	460e      	mov	r6, r1
 80078ee:	d12d      	bne.n	800794c <__pow5mult+0x6c>
 80078f0:	10a4      	asrs	r4, r4, #2
 80078f2:	d01c      	beq.n	800792e <__pow5mult+0x4e>
 80078f4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80078f6:	b395      	cbz	r5, 800795e <__pow5mult+0x7e>
 80078f8:	07e3      	lsls	r3, r4, #31
 80078fa:	f04f 0800 	mov.w	r8, #0
 80078fe:	d406      	bmi.n	800790e <__pow5mult+0x2e>
 8007900:	1064      	asrs	r4, r4, #1
 8007902:	d014      	beq.n	800792e <__pow5mult+0x4e>
 8007904:	6828      	ldr	r0, [r5, #0]
 8007906:	b1a8      	cbz	r0, 8007934 <__pow5mult+0x54>
 8007908:	4605      	mov	r5, r0
 800790a:	07e3      	lsls	r3, r4, #31
 800790c:	d5f8      	bpl.n	8007900 <__pow5mult+0x20>
 800790e:	4638      	mov	r0, r7
 8007910:	4631      	mov	r1, r6
 8007912:	462a      	mov	r2, r5
 8007914:	f7ff ff4a 	bl	80077ac <__multiply>
 8007918:	b1b6      	cbz	r6, 8007948 <__pow5mult+0x68>
 800791a:	6872      	ldr	r2, [r6, #4]
 800791c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800791e:	1064      	asrs	r4, r4, #1
 8007920:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007924:	6031      	str	r1, [r6, #0]
 8007926:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800792a:	4606      	mov	r6, r0
 800792c:	d1ea      	bne.n	8007904 <__pow5mult+0x24>
 800792e:	4630      	mov	r0, r6
 8007930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007934:	4629      	mov	r1, r5
 8007936:	462a      	mov	r2, r5
 8007938:	4638      	mov	r0, r7
 800793a:	f7ff ff37 	bl	80077ac <__multiply>
 800793e:	6028      	str	r0, [r5, #0]
 8007940:	f8c0 8000 	str.w	r8, [r0]
 8007944:	4605      	mov	r5, r0
 8007946:	e7e0      	b.n	800790a <__pow5mult+0x2a>
 8007948:	4606      	mov	r6, r0
 800794a:	e7d9      	b.n	8007900 <__pow5mult+0x20>
 800794c:	1e5a      	subs	r2, r3, #1
 800794e:	4d0b      	ldr	r5, [pc, #44]	; (800797c <__pow5mult+0x9c>)
 8007950:	2300      	movs	r3, #0
 8007952:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8007956:	f7ff fe43 	bl	80075e0 <__multadd>
 800795a:	4606      	mov	r6, r0
 800795c:	e7c8      	b.n	80078f0 <__pow5mult+0x10>
 800795e:	2101      	movs	r1, #1
 8007960:	4638      	mov	r0, r7
 8007962:	f7ff fe0d 	bl	8007580 <_Balloc>
 8007966:	f240 2171 	movw	r1, #625	; 0x271
 800796a:	2201      	movs	r2, #1
 800796c:	2300      	movs	r3, #0
 800796e:	6141      	str	r1, [r0, #20]
 8007970:	6102      	str	r2, [r0, #16]
 8007972:	4605      	mov	r5, r0
 8007974:	64b8      	str	r0, [r7, #72]	; 0x48
 8007976:	6003      	str	r3, [r0, #0]
 8007978:	e7be      	b.n	80078f8 <__pow5mult+0x18>
 800797a:	bf00      	nop
 800797c:	0800ae10 	.word	0x0800ae10

08007980 <__lshift>:
 8007980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007984:	690f      	ldr	r7, [r1, #16]
 8007986:	688b      	ldr	r3, [r1, #8]
 8007988:	ea4f 1962 	mov.w	r9, r2, asr #5
 800798c:	444f      	add	r7, r9
 800798e:	1c7d      	adds	r5, r7, #1
 8007990:	429d      	cmp	r5, r3
 8007992:	460e      	mov	r6, r1
 8007994:	4614      	mov	r4, r2
 8007996:	6849      	ldr	r1, [r1, #4]
 8007998:	4680      	mov	r8, r0
 800799a:	dd04      	ble.n	80079a6 <__lshift+0x26>
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	429d      	cmp	r5, r3
 80079a0:	f101 0101 	add.w	r1, r1, #1
 80079a4:	dcfa      	bgt.n	800799c <__lshift+0x1c>
 80079a6:	4640      	mov	r0, r8
 80079a8:	f7ff fdea 	bl	8007580 <_Balloc>
 80079ac:	f1b9 0f00 	cmp.w	r9, #0
 80079b0:	f100 0114 	add.w	r1, r0, #20
 80079b4:	dd09      	ble.n	80079ca <__lshift+0x4a>
 80079b6:	2300      	movs	r3, #0
 80079b8:	469e      	mov	lr, r3
 80079ba:	460a      	mov	r2, r1
 80079bc:	3301      	adds	r3, #1
 80079be:	454b      	cmp	r3, r9
 80079c0:	f842 eb04 	str.w	lr, [r2], #4
 80079c4:	d1fa      	bne.n	80079bc <__lshift+0x3c>
 80079c6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80079ca:	6932      	ldr	r2, [r6, #16]
 80079cc:	f106 0314 	add.w	r3, r6, #20
 80079d0:	f014 0c1f 	ands.w	ip, r4, #31
 80079d4:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 80079d8:	d01f      	beq.n	8007a1a <__lshift+0x9a>
 80079da:	f1cc 0920 	rsb	r9, ip, #32
 80079de:	2200      	movs	r2, #0
 80079e0:	681c      	ldr	r4, [r3, #0]
 80079e2:	fa04 f40c 	lsl.w	r4, r4, ip
 80079e6:	4314      	orrs	r4, r2
 80079e8:	468a      	mov	sl, r1
 80079ea:	f841 4b04 	str.w	r4, [r1], #4
 80079ee:	f853 4b04 	ldr.w	r4, [r3], #4
 80079f2:	459e      	cmp	lr, r3
 80079f4:	fa24 f209 	lsr.w	r2, r4, r9
 80079f8:	d8f2      	bhi.n	80079e0 <__lshift+0x60>
 80079fa:	f8ca 2004 	str.w	r2, [sl, #4]
 80079fe:	b102      	cbz	r2, 8007a02 <__lshift+0x82>
 8007a00:	1cbd      	adds	r5, r7, #2
 8007a02:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8007a06:	6872      	ldr	r2, [r6, #4]
 8007a08:	3d01      	subs	r5, #1
 8007a0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a0e:	6105      	str	r5, [r0, #16]
 8007a10:	6031      	str	r1, [r6, #0]
 8007a12:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8007a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a1a:	3904      	subs	r1, #4
 8007a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a20:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a24:	459e      	cmp	lr, r3
 8007a26:	d8f9      	bhi.n	8007a1c <__lshift+0x9c>
 8007a28:	e7eb      	b.n	8007a02 <__lshift+0x82>
 8007a2a:	bf00      	nop

08007a2c <__mcmp>:
 8007a2c:	6902      	ldr	r2, [r0, #16]
 8007a2e:	690b      	ldr	r3, [r1, #16]
 8007a30:	1ad2      	subs	r2, r2, r3
 8007a32:	d113      	bne.n	8007a5c <__mcmp+0x30>
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	3014      	adds	r0, #20
 8007a38:	3114      	adds	r1, #20
 8007a3a:	4419      	add	r1, r3
 8007a3c:	b410      	push	{r4}
 8007a3e:	4403      	add	r3, r0
 8007a40:	e001      	b.n	8007a46 <__mcmp+0x1a>
 8007a42:	4298      	cmp	r0, r3
 8007a44:	d20c      	bcs.n	8007a60 <__mcmp+0x34>
 8007a46:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007a4a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a4e:	4294      	cmp	r4, r2
 8007a50:	d0f7      	beq.n	8007a42 <__mcmp+0x16>
 8007a52:	d309      	bcc.n	8007a68 <__mcmp+0x3c>
 8007a54:	2001      	movs	r0, #1
 8007a56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	4770      	bx	lr
 8007a60:	2000      	movs	r0, #0
 8007a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop

08007a74 <__mdiff>:
 8007a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a78:	460e      	mov	r6, r1
 8007a7a:	4605      	mov	r5, r0
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	4630      	mov	r0, r6
 8007a80:	4614      	mov	r4, r2
 8007a82:	f7ff ffd3 	bl	8007a2c <__mcmp>
 8007a86:	1e07      	subs	r7, r0, #0
 8007a88:	d054      	beq.n	8007b34 <__mdiff+0xc0>
 8007a8a:	db4d      	blt.n	8007b28 <__mdiff+0xb4>
 8007a8c:	f04f 0800 	mov.w	r8, #0
 8007a90:	6871      	ldr	r1, [r6, #4]
 8007a92:	4628      	mov	r0, r5
 8007a94:	f7ff fd74 	bl	8007580 <_Balloc>
 8007a98:	6937      	ldr	r7, [r6, #16]
 8007a9a:	6923      	ldr	r3, [r4, #16]
 8007a9c:	f8c0 800c 	str.w	r8, [r0, #12]
 8007aa0:	3614      	adds	r6, #20
 8007aa2:	f104 0214 	add.w	r2, r4, #20
 8007aa6:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8007aaa:	f100 0514 	add.w	r5, r0, #20
 8007aae:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f856 8b04 	ldr.w	r8, [r6], #4
 8007ab8:	f852 4b04 	ldr.w	r4, [r2], #4
 8007abc:	fa13 f388 	uxtah	r3, r3, r8
 8007ac0:	b2a1      	uxth	r1, r4
 8007ac2:	0c24      	lsrs	r4, r4, #16
 8007ac4:	1a59      	subs	r1, r3, r1
 8007ac6:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 8007aca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007ace:	b289      	uxth	r1, r1
 8007ad0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007ad4:	4594      	cmp	ip, r2
 8007ad6:	f845 1b04 	str.w	r1, [r5], #4
 8007ada:	ea4f 4323 	mov.w	r3, r3, asr #16
 8007ade:	4634      	mov	r4, r6
 8007ae0:	d8e8      	bhi.n	8007ab4 <__mdiff+0x40>
 8007ae2:	45b6      	cmp	lr, r6
 8007ae4:	46ac      	mov	ip, r5
 8007ae6:	d915      	bls.n	8007b14 <__mdiff+0xa0>
 8007ae8:	f854 2b04 	ldr.w	r2, [r4], #4
 8007aec:	fa13 f182 	uxtah	r1, r3, r2
 8007af0:	0c13      	lsrs	r3, r2, #16
 8007af2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007af6:	b289      	uxth	r1, r1
 8007af8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007afc:	45a6      	cmp	lr, r4
 8007afe:	f845 1b04 	str.w	r1, [r5], #4
 8007b02:	ea4f 4323 	mov.w	r3, r3, asr #16
 8007b06:	d8ef      	bhi.n	8007ae8 <__mdiff+0x74>
 8007b08:	43f6      	mvns	r6, r6
 8007b0a:	4476      	add	r6, lr
 8007b0c:	f026 0503 	bic.w	r5, r6, #3
 8007b10:	3504      	adds	r5, #4
 8007b12:	4465      	add	r5, ip
 8007b14:	3d04      	subs	r5, #4
 8007b16:	b921      	cbnz	r1, 8007b22 <__mdiff+0xae>
 8007b18:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007b1c:	3f01      	subs	r7, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d0fa      	beq.n	8007b18 <__mdiff+0xa4>
 8007b22:	6107      	str	r7, [r0, #16]
 8007b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b28:	4633      	mov	r3, r6
 8007b2a:	f04f 0801 	mov.w	r8, #1
 8007b2e:	4626      	mov	r6, r4
 8007b30:	461c      	mov	r4, r3
 8007b32:	e7ad      	b.n	8007a90 <__mdiff+0x1c>
 8007b34:	4628      	mov	r0, r5
 8007b36:	4639      	mov	r1, r7
 8007b38:	f7ff fd22 	bl	8007580 <_Balloc>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	6147      	str	r7, [r0, #20]
 8007b40:	6103      	str	r3, [r0, #16]
 8007b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b46:	bf00      	nop

08007b48 <__ulp>:
 8007b48:	4b12      	ldr	r3, [pc, #72]	; (8007b94 <__ulp+0x4c>)
 8007b4a:	ee10 2a90 	vmov	r2, s1
 8007b4e:	401a      	ands	r2, r3
 8007b50:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	dd04      	ble.n	8007b62 <__ulp+0x1a>
 8007b58:	2000      	movs	r0, #0
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	ec41 0b10 	vmov	d0, r0, r1
 8007b60:	4770      	bx	lr
 8007b62:	425b      	negs	r3, r3
 8007b64:	151b      	asrs	r3, r3, #20
 8007b66:	2b13      	cmp	r3, #19
 8007b68:	dd0c      	ble.n	8007b84 <__ulp+0x3c>
 8007b6a:	2b32      	cmp	r3, #50	; 0x32
 8007b6c:	bfdd      	ittte	le
 8007b6e:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
 8007b72:	2201      	movle	r2, #1
 8007b74:	fa02 f303 	lslle.w	r3, r2, r3
 8007b78:	2301      	movgt	r3, #1
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	ec41 0b10 	vmov	d0, r0, r1
 8007b82:	4770      	bx	lr
 8007b84:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007b88:	2000      	movs	r0, #0
 8007b8a:	fa42 f103 	asr.w	r1, r2, r3
 8007b8e:	ec41 0b10 	vmov	d0, r0, r1
 8007b92:	4770      	bx	lr
 8007b94:	7ff00000 	.word	0x7ff00000

08007b98 <__b2d>:
 8007b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9a:	6904      	ldr	r4, [r0, #16]
 8007b9c:	f100 0714 	add.w	r7, r0, #20
 8007ba0:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8007ba4:	460d      	mov	r5, r1
 8007ba6:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8007baa:	4630      	mov	r0, r6
 8007bac:	f7ff fda6 	bl	80076fc <__hi0bits>
 8007bb0:	f1c0 0320 	rsb	r3, r0, #32
 8007bb4:	280a      	cmp	r0, #10
 8007bb6:	602b      	str	r3, [r5, #0]
 8007bb8:	f1a4 0104 	sub.w	r1, r4, #4
 8007bbc:	dc16      	bgt.n	8007bec <__b2d+0x54>
 8007bbe:	428f      	cmp	r7, r1
 8007bc0:	f1c0 050b 	rsb	r5, r0, #11
 8007bc4:	bf38      	it	cc
 8007bc6:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 8007bca:	fa26 fe05 	lsr.w	lr, r6, r5
 8007bce:	f100 0015 	add.w	r0, r0, #21
 8007bd2:	f04e 537f 	orr.w	r3, lr, #1069547520	; 0x3fc00000
 8007bd6:	bf34      	ite	cc
 8007bd8:	40e9      	lsrcc	r1, r5
 8007bda:	2100      	movcs	r1, #0
 8007bdc:	4086      	lsls	r6, r0
 8007bde:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007be2:	ea41 0206 	orr.w	r2, r1, r6
 8007be6:	ec43 2b10 	vmov	d0, r2, r3
 8007bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bec:	428f      	cmp	r7, r1
 8007bee:	d220      	bcs.n	8007c32 <__b2d+0x9a>
 8007bf0:	f1b0 0e0b 	subs.w	lr, r0, #11
 8007bf4:	f1a4 0c08 	sub.w	ip, r4, #8
 8007bf8:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8007bfc:	d026      	beq.n	8007c4c <__b2d+0xb4>
 8007bfe:	f1c0 052b 	rsb	r5, r0, #43	; 0x2b
 8007c02:	4567      	cmp	r7, ip
 8007c04:	fa21 f305 	lsr.w	r3, r1, r5
 8007c08:	fa06 f60e 	lsl.w	r6, r6, lr
 8007c0c:	ea46 0603 	orr.w	r6, r6, r3
 8007c10:	bf38      	it	cc
 8007c12:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
 8007c16:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
 8007c1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007c1e:	bf34      	ite	cc
 8007c20:	40e8      	lsrcc	r0, r5
 8007c22:	2000      	movcs	r0, #0
 8007c24:	fa01 f10e 	lsl.w	r1, r1, lr
 8007c28:	ea41 0200 	orr.w	r2, r1, r0
 8007c2c:	ec43 2b10 	vmov	d0, r2, r3
 8007c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c32:	f1b0 0e0b 	subs.w	lr, r0, #11
 8007c36:	d008      	beq.n	8007c4a <__b2d+0xb2>
 8007c38:	fa06 f60e 	lsl.w	r6, r6, lr
 8007c3c:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
 8007c40:	2000      	movs	r0, #0
 8007c42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007c46:	4601      	mov	r1, r0
 8007c48:	e7ec      	b.n	8007c24 <__b2d+0x8c>
 8007c4a:	4671      	mov	r1, lr
 8007c4c:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
 8007c50:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007c54:	460a      	mov	r2, r1
 8007c56:	ec43 2b10 	vmov	d0, r2, r3
 8007c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007c5c <__d2b>:
 8007c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c60:	ec57 6b10 	vmov	r6, r7, d0
 8007c64:	b083      	sub	sp, #12
 8007c66:	4688      	mov	r8, r1
 8007c68:	2101      	movs	r1, #1
 8007c6a:	463c      	mov	r4, r7
 8007c6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007c70:	4617      	mov	r7, r2
 8007c72:	f7ff fc85 	bl	8007580 <_Balloc>
 8007c76:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007c7a:	4681      	mov	r9, r0
 8007c7c:	b10d      	cbz	r5, 8007c82 <__d2b+0x26>
 8007c7e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8007c82:	9401      	str	r4, [sp, #4]
 8007c84:	b31e      	cbz	r6, 8007cce <__d2b+0x72>
 8007c86:	a802      	add	r0, sp, #8
 8007c88:	f840 6d08 	str.w	r6, [r0, #-8]!
 8007c8c:	f7ff fd56 	bl	800773c <__lo0bits>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d134      	bne.n	8007cfe <__d2b+0xa2>
 8007c94:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8007c98:	f8c9 2014 	str.w	r2, [r9, #20]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	bf14      	ite	ne
 8007ca0:	2402      	movne	r4, #2
 8007ca2:	2401      	moveq	r4, #1
 8007ca4:	f8c9 3018 	str.w	r3, [r9, #24]
 8007ca8:	f8c9 4010 	str.w	r4, [r9, #16]
 8007cac:	b9dd      	cbnz	r5, 8007ce6 <__d2b+0x8a>
 8007cae:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 8007cb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007cb6:	f8c8 0000 	str.w	r0, [r8]
 8007cba:	6918      	ldr	r0, [r3, #16]
 8007cbc:	f7ff fd1e 	bl	80076fc <__hi0bits>
 8007cc0:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8007cc4:	6038      	str	r0, [r7, #0]
 8007cc6:	4648      	mov	r0, r9
 8007cc8:	b003      	add	sp, #12
 8007cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cce:	a801      	add	r0, sp, #4
 8007cd0:	f7ff fd34 	bl	800773c <__lo0bits>
 8007cd4:	2401      	movs	r4, #1
 8007cd6:	9b01      	ldr	r3, [sp, #4]
 8007cd8:	f8c9 3014 	str.w	r3, [r9, #20]
 8007cdc:	3020      	adds	r0, #32
 8007cde:	f8c9 4010 	str.w	r4, [r9, #16]
 8007ce2:	2d00      	cmp	r5, #0
 8007ce4:	d0e3      	beq.n	8007cae <__d2b+0x52>
 8007ce6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007cea:	4405      	add	r5, r0
 8007cec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007cf0:	f8c8 5000 	str.w	r5, [r8]
 8007cf4:	6038      	str	r0, [r7, #0]
 8007cf6:	4648      	mov	r0, r9
 8007cf8:	b003      	add	sp, #12
 8007cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cfe:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8007d02:	f1c0 0120 	rsb	r1, r0, #32
 8007d06:	fa03 f101 	lsl.w	r1, r3, r1
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	40c3      	lsrs	r3, r0
 8007d0e:	9301      	str	r3, [sp, #4]
 8007d10:	f8c9 2014 	str.w	r2, [r9, #20]
 8007d14:	e7c2      	b.n	8007c9c <__d2b+0x40>
 8007d16:	bf00      	nop

08007d18 <__ratio>:
 8007d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	4688      	mov	r8, r1
 8007d20:	4669      	mov	r1, sp
 8007d22:	4681      	mov	r9, r0
 8007d24:	f7ff ff38 	bl	8007b98 <__b2d>
 8007d28:	4640      	mov	r0, r8
 8007d2a:	a901      	add	r1, sp, #4
 8007d2c:	ec55 4b10 	vmov	r4, r5, d0
 8007d30:	f7ff ff32 	bl	8007b98 <__b2d>
 8007d34:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8007d38:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8007d3c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8007d40:	1ac9      	subs	r1, r1, r3
 8007d42:	1a12      	subs	r2, r2, r0
 8007d44:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	ec57 6b10 	vmov	r6, r7, d0
 8007d4e:	dd0d      	ble.n	8007d6c <__ratio+0x54>
 8007d50:	eb05 5103 	add.w	r1, r5, r3, lsl #20
 8007d54:	460d      	mov	r5, r1
 8007d56:	4620      	mov	r0, r4
 8007d58:	4629      	mov	r1, r5
 8007d5a:	4632      	mov	r2, r6
 8007d5c:	463b      	mov	r3, r7
 8007d5e:	f002 f92f 	bl	8009fc0 <__aeabi_ddiv>
 8007d62:	ec41 0b10 	vmov	d0, r0, r1
 8007d66:	b003      	add	sp, #12
 8007d68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d6c:	eba7 5903 	sub.w	r9, r7, r3, lsl #20
 8007d70:	ee10 6a10 	vmov	r6, s0
 8007d74:	464f      	mov	r7, r9
 8007d76:	e7ee      	b.n	8007d56 <__ratio+0x3e>

08007d78 <_mprec_log10>:
 8007d78:	2817      	cmp	r0, #23
 8007d7a:	b510      	push	{r4, lr}
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	dd0a      	ble.n	8007d96 <_mprec_log10+0x1e>
 8007d80:	4908      	ldr	r1, [pc, #32]	; (8007da4 <_mprec_log10+0x2c>)
 8007d82:	2000      	movs	r0, #0
 8007d84:	2200      	movs	r2, #0
 8007d86:	4b08      	ldr	r3, [pc, #32]	; (8007da8 <_mprec_log10+0x30>)
 8007d88:	f001 fff0 	bl	8009d6c <__aeabi_dmul>
 8007d8c:	3c01      	subs	r4, #1
 8007d8e:	d1f9      	bne.n	8007d84 <_mprec_log10+0xc>
 8007d90:	ec41 0b10 	vmov	d0, r0, r1
 8007d94:	bd10      	pop	{r4, pc}
 8007d96:	4b05      	ldr	r3, [pc, #20]	; (8007dac <_mprec_log10+0x34>)
 8007d98:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8007d9c:	ed94 0b00 	vldr	d0, [r4]
 8007da0:	bd10      	pop	{r4, pc}
 8007da2:	bf00      	nop
 8007da4:	3ff00000 	.word	0x3ff00000
 8007da8:	40240000 	.word	0x40240000
 8007dac:	0800ad48 	.word	0x0800ad48

08007db0 <__copybits>:
 8007db0:	b470      	push	{r4, r5, r6}
 8007db2:	6914      	ldr	r4, [r2, #16]
 8007db4:	f102 0314 	add.w	r3, r2, #20
 8007db8:	3901      	subs	r1, #1
 8007dba:	114e      	asrs	r6, r1, #5
 8007dbc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007dc0:	3601      	adds	r6, #1
 8007dc2:	42a3      	cmp	r3, r4
 8007dc4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007dc8:	d20c      	bcs.n	8007de4 <__copybits+0x34>
 8007dca:	1f01      	subs	r1, r0, #4
 8007dcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007dd0:	f841 5f04 	str.w	r5, [r1, #4]!
 8007dd4:	429c      	cmp	r4, r3
 8007dd6:	d8f9      	bhi.n	8007dcc <__copybits+0x1c>
 8007dd8:	1aa3      	subs	r3, r4, r2
 8007dda:	3b15      	subs	r3, #21
 8007ddc:	f023 0303 	bic.w	r3, r3, #3
 8007de0:	3304      	adds	r3, #4
 8007de2:	4418      	add	r0, r3
 8007de4:	4286      	cmp	r6, r0
 8007de6:	d904      	bls.n	8007df2 <__copybits+0x42>
 8007de8:	2300      	movs	r3, #0
 8007dea:	f840 3b04 	str.w	r3, [r0], #4
 8007dee:	4286      	cmp	r6, r0
 8007df0:	d8fb      	bhi.n	8007dea <__copybits+0x3a>
 8007df2:	bc70      	pop	{r4, r5, r6}
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop

08007df8 <__any_on>:
 8007df8:	6903      	ldr	r3, [r0, #16]
 8007dfa:	114a      	asrs	r2, r1, #5
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	b410      	push	{r4}
 8007e00:	f100 0414 	add.w	r4, r0, #20
 8007e04:	da10      	bge.n	8007e28 <__any_on+0x30>
 8007e06:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e0a:	429c      	cmp	r4, r3
 8007e0c:	d221      	bcs.n	8007e52 <__any_on+0x5a>
 8007e0e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007e12:	3b04      	subs	r3, #4
 8007e14:	b118      	cbz	r0, 8007e1e <__any_on+0x26>
 8007e16:	e015      	b.n	8007e44 <__any_on+0x4c>
 8007e18:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007e1c:	b992      	cbnz	r2, 8007e44 <__any_on+0x4c>
 8007e1e:	429c      	cmp	r4, r3
 8007e20:	d3fa      	bcc.n	8007e18 <__any_on+0x20>
 8007e22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	dd10      	ble.n	8007e4c <__any_on+0x54>
 8007e2a:	f011 011f 	ands.w	r1, r1, #31
 8007e2e:	d00d      	beq.n	8007e4c <__any_on+0x54>
 8007e30:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 8007e34:	fa20 f301 	lsr.w	r3, r0, r1
 8007e38:	fa03 f101 	lsl.w	r1, r3, r1
 8007e3c:	4281      	cmp	r1, r0
 8007e3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e42:	d0e2      	beq.n	8007e0a <__any_on+0x12>
 8007e44:	2001      	movs	r0, #1
 8007e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e50:	e7db      	b.n	8007e0a <__any_on+0x12>
 8007e52:	2000      	movs	r0, #0
 8007e54:	e7e5      	b.n	8007e22 <__any_on+0x2a>
 8007e56:	bf00      	nop

08007e58 <_putc_r>:
 8007e58:	b570      	push	{r4, r5, r6, lr}
 8007e5a:	460d      	mov	r5, r1
 8007e5c:	4614      	mov	r4, r2
 8007e5e:	4606      	mov	r6, r0
 8007e60:	b108      	cbz	r0, 8007e66 <_putc_r+0xe>
 8007e62:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007e64:	b1d3      	cbz	r3, 8007e9c <_putc_r+0x44>
 8007e66:	68a3      	ldr	r3, [r4, #8]
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	60a3      	str	r3, [r4, #8]
 8007e6e:	db06      	blt.n	8007e7e <_putc_r+0x26>
 8007e70:	6823      	ldr	r3, [r4, #0]
 8007e72:	701d      	strb	r5, [r3, #0]
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	1c5a      	adds	r2, r3, #1
 8007e78:	6022      	str	r2, [r4, #0]
 8007e7a:	7818      	ldrb	r0, [r3, #0]
 8007e7c:	bd70      	pop	{r4, r5, r6, pc}
 8007e7e:	69a2      	ldr	r2, [r4, #24]
 8007e80:	4293      	cmp	r3, r2
 8007e82:	db0e      	blt.n	8007ea2 <_putc_r+0x4a>
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	701d      	strb	r5, [r3, #0]
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	7819      	ldrb	r1, [r3, #0]
 8007e8c:	290a      	cmp	r1, #10
 8007e8e:	d1f2      	bne.n	8007e76 <_putc_r+0x1e>
 8007e90:	4630      	mov	r0, r6
 8007e92:	4622      	mov	r2, r4
 8007e94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e98:	f001 bac8 	b.w	800942c <__swbuf_r>
 8007e9c:	f7fe fc40 	bl	8006720 <__sinit>
 8007ea0:	e7e1      	b.n	8007e66 <_putc_r+0xe>
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	4629      	mov	r1, r5
 8007ea6:	4622      	mov	r2, r4
 8007ea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007eac:	f001 babe 	b.w	800942c <__swbuf_r>

08007eb0 <putc>:
 8007eb0:	4b16      	ldr	r3, [pc, #88]	; (8007f0c <putc+0x5c>)
 8007eb2:	b570      	push	{r4, r5, r6, lr}
 8007eb4:	681d      	ldr	r5, [r3, #0]
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	460c      	mov	r4, r1
 8007eba:	b10d      	cbz	r5, 8007ec0 <putc+0x10>
 8007ebc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007ebe:	b1d3      	cbz	r3, 8007ef6 <putc+0x46>
 8007ec0:	68a3      	ldr	r3, [r4, #8]
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	60a3      	str	r3, [r4, #8]
 8007ec8:	db06      	blt.n	8007ed8 <putc+0x28>
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	701e      	strb	r6, [r3, #0]
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	6022      	str	r2, [r4, #0]
 8007ed4:	7818      	ldrb	r0, [r3, #0]
 8007ed6:	bd70      	pop	{r4, r5, r6, pc}
 8007ed8:	69a2      	ldr	r2, [r4, #24]
 8007eda:	4293      	cmp	r3, r2
 8007edc:	db0f      	blt.n	8007efe <putc+0x4e>
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	701e      	strb	r6, [r3, #0]
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	7819      	ldrb	r1, [r3, #0]
 8007ee6:	290a      	cmp	r1, #10
 8007ee8:	d1f2      	bne.n	8007ed0 <putc+0x20>
 8007eea:	4628      	mov	r0, r5
 8007eec:	4622      	mov	r2, r4
 8007eee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ef2:	f001 ba9b 	b.w	800942c <__swbuf_r>
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	f7fe fc12 	bl	8006720 <__sinit>
 8007efc:	e7e0      	b.n	8007ec0 <putc+0x10>
 8007efe:	4628      	mov	r0, r5
 8007f00:	4631      	mov	r1, r6
 8007f02:	4622      	mov	r2, r4
 8007f04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f08:	f001 ba90 	b.w	800942c <__swbuf_r>
 8007f0c:	200004a8 	.word	0x200004a8

08007f10 <_realloc_r>:
 8007f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f14:	4617      	mov	r7, r2
 8007f16:	b083      	sub	sp, #12
 8007f18:	460e      	mov	r6, r1
 8007f1a:	2900      	cmp	r1, #0
 8007f1c:	f000 80e7 	beq.w	80080ee <_realloc_r+0x1de>
 8007f20:	4681      	mov	r9, r0
 8007f22:	f107 050b 	add.w	r5, r7, #11
 8007f26:	f7ff fb27 	bl	8007578 <__malloc_lock>
 8007f2a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007f2e:	2d16      	cmp	r5, #22
 8007f30:	f023 0403 	bic.w	r4, r3, #3
 8007f34:	f1a6 0808 	sub.w	r8, r6, #8
 8007f38:	d84c      	bhi.n	8007fd4 <_realloc_r+0xc4>
 8007f3a:	2210      	movs	r2, #16
 8007f3c:	4615      	mov	r5, r2
 8007f3e:	42af      	cmp	r7, r5
 8007f40:	d84d      	bhi.n	8007fde <_realloc_r+0xce>
 8007f42:	4294      	cmp	r4, r2
 8007f44:	f280 8084 	bge.w	8008050 <_realloc_r+0x140>
 8007f48:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 80082f8 <_realloc_r+0x3e8>
 8007f4c:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007f50:	eb08 0104 	add.w	r1, r8, r4
 8007f54:	4288      	cmp	r0, r1
 8007f56:	f000 80d6 	beq.w	8008106 <_realloc_r+0x1f6>
 8007f5a:	6848      	ldr	r0, [r1, #4]
 8007f5c:	f020 0e01 	bic.w	lr, r0, #1
 8007f60:	448e      	add	lr, r1
 8007f62:	f8de e004 	ldr.w	lr, [lr, #4]
 8007f66:	f01e 0f01 	tst.w	lr, #1
 8007f6a:	d13f      	bne.n	8007fec <_realloc_r+0xdc>
 8007f6c:	f020 0003 	bic.w	r0, r0, #3
 8007f70:	4420      	add	r0, r4
 8007f72:	4290      	cmp	r0, r2
 8007f74:	f280 80c1 	bge.w	80080fa <_realloc_r+0x1ea>
 8007f78:	07db      	lsls	r3, r3, #31
 8007f7a:	f100 808f 	bmi.w	800809c <_realloc_r+0x18c>
 8007f7e:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8007f82:	ebc3 0a08 	rsb	sl, r3, r8
 8007f86:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007f8a:	f023 0303 	bic.w	r3, r3, #3
 8007f8e:	eb00 0e03 	add.w	lr, r0, r3
 8007f92:	4596      	cmp	lr, r2
 8007f94:	db34      	blt.n	8008000 <_realloc_r+0xf0>
 8007f96:	68cb      	ldr	r3, [r1, #12]
 8007f98:	688a      	ldr	r2, [r1, #8]
 8007f9a:	4657      	mov	r7, sl
 8007f9c:	60d3      	str	r3, [r2, #12]
 8007f9e:	609a      	str	r2, [r3, #8]
 8007fa0:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8007fa4:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007fa8:	60cb      	str	r3, [r1, #12]
 8007faa:	1f22      	subs	r2, r4, #4
 8007fac:	2a24      	cmp	r2, #36	; 0x24
 8007fae:	6099      	str	r1, [r3, #8]
 8007fb0:	f200 8136 	bhi.w	8008220 <_realloc_r+0x310>
 8007fb4:	2a13      	cmp	r2, #19
 8007fb6:	f240 80fd 	bls.w	80081b4 <_realloc_r+0x2a4>
 8007fba:	6833      	ldr	r3, [r6, #0]
 8007fbc:	f8ca 3008 	str.w	r3, [sl, #8]
 8007fc0:	6873      	ldr	r3, [r6, #4]
 8007fc2:	f8ca 300c 	str.w	r3, [sl, #12]
 8007fc6:	2a1b      	cmp	r2, #27
 8007fc8:	f200 8140 	bhi.w	800824c <_realloc_r+0x33c>
 8007fcc:	3608      	adds	r6, #8
 8007fce:	f10a 0310 	add.w	r3, sl, #16
 8007fd2:	e0f0      	b.n	80081b6 <_realloc_r+0x2a6>
 8007fd4:	f025 0507 	bic.w	r5, r5, #7
 8007fd8:	2d00      	cmp	r5, #0
 8007fda:	462a      	mov	r2, r5
 8007fdc:	daaf      	bge.n	8007f3e <_realloc_r+0x2e>
 8007fde:	230c      	movs	r3, #12
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	f8c9 3000 	str.w	r3, [r9]
 8007fe6:	b003      	add	sp, #12
 8007fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fec:	07d9      	lsls	r1, r3, #31
 8007fee:	d455      	bmi.n	800809c <_realloc_r+0x18c>
 8007ff0:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8007ff4:	ebc3 0a08 	rsb	sl, r3, r8
 8007ff8:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007ffc:	f023 0303 	bic.w	r3, r3, #3
 8008000:	4423      	add	r3, r4
 8008002:	4293      	cmp	r3, r2
 8008004:	db4a      	blt.n	800809c <_realloc_r+0x18c>
 8008006:	4657      	mov	r7, sl
 8008008:	f8da 100c 	ldr.w	r1, [sl, #12]
 800800c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8008010:	1f22      	subs	r2, r4, #4
 8008012:	2a24      	cmp	r2, #36	; 0x24
 8008014:	60c1      	str	r1, [r0, #12]
 8008016:	6088      	str	r0, [r1, #8]
 8008018:	f200 810e 	bhi.w	8008238 <_realloc_r+0x328>
 800801c:	2a13      	cmp	r2, #19
 800801e:	f240 8109 	bls.w	8008234 <_realloc_r+0x324>
 8008022:	6831      	ldr	r1, [r6, #0]
 8008024:	f8ca 1008 	str.w	r1, [sl, #8]
 8008028:	6871      	ldr	r1, [r6, #4]
 800802a:	f8ca 100c 	str.w	r1, [sl, #12]
 800802e:	2a1b      	cmp	r2, #27
 8008030:	f200 8121 	bhi.w	8008276 <_realloc_r+0x366>
 8008034:	3608      	adds	r6, #8
 8008036:	f10a 0210 	add.w	r2, sl, #16
 800803a:	6831      	ldr	r1, [r6, #0]
 800803c:	6011      	str	r1, [r2, #0]
 800803e:	6871      	ldr	r1, [r6, #4]
 8008040:	6051      	str	r1, [r2, #4]
 8008042:	68b1      	ldr	r1, [r6, #8]
 8008044:	6091      	str	r1, [r2, #8]
 8008046:	461c      	mov	r4, r3
 8008048:	f8da 3004 	ldr.w	r3, [sl, #4]
 800804c:	463e      	mov	r6, r7
 800804e:	46d0      	mov	r8, sl
 8008050:	1b62      	subs	r2, r4, r5
 8008052:	2a0f      	cmp	r2, #15
 8008054:	f003 0301 	and.w	r3, r3, #1
 8008058:	d80e      	bhi.n	8008078 <_realloc_r+0x168>
 800805a:	4323      	orrs	r3, r4
 800805c:	4444      	add	r4, r8
 800805e:	f8c8 3004 	str.w	r3, [r8, #4]
 8008062:	6863      	ldr	r3, [r4, #4]
 8008064:	f043 0301 	orr.w	r3, r3, #1
 8008068:	6063      	str	r3, [r4, #4]
 800806a:	4648      	mov	r0, r9
 800806c:	f7ff fa86 	bl	800757c <__malloc_unlock>
 8008070:	4630      	mov	r0, r6
 8008072:	b003      	add	sp, #12
 8008074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008078:	eb08 0105 	add.w	r1, r8, r5
 800807c:	431d      	orrs	r5, r3
 800807e:	f042 0301 	orr.w	r3, r2, #1
 8008082:	440a      	add	r2, r1
 8008084:	f8c8 5004 	str.w	r5, [r8, #4]
 8008088:	604b      	str	r3, [r1, #4]
 800808a:	6853      	ldr	r3, [r2, #4]
 800808c:	f043 0301 	orr.w	r3, r3, #1
 8008090:	3108      	adds	r1, #8
 8008092:	6053      	str	r3, [r2, #4]
 8008094:	4648      	mov	r0, r9
 8008096:	f7fe fbc9 	bl	800682c <_free_r>
 800809a:	e7e6      	b.n	800806a <_realloc_r+0x15a>
 800809c:	4639      	mov	r1, r7
 800809e:	4648      	mov	r0, r9
 80080a0:	f7fe ff2a 	bl	8006ef8 <_malloc_r>
 80080a4:	4607      	mov	r7, r0
 80080a6:	b1d8      	cbz	r0, 80080e0 <_realloc_r+0x1d0>
 80080a8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80080ac:	f023 0201 	bic.w	r2, r3, #1
 80080b0:	4442      	add	r2, r8
 80080b2:	f1a0 0108 	sub.w	r1, r0, #8
 80080b6:	4291      	cmp	r1, r2
 80080b8:	f000 80ac 	beq.w	8008214 <_realloc_r+0x304>
 80080bc:	1f22      	subs	r2, r4, #4
 80080be:	2a24      	cmp	r2, #36	; 0x24
 80080c0:	f200 8099 	bhi.w	80081f6 <_realloc_r+0x2e6>
 80080c4:	2a13      	cmp	r2, #19
 80080c6:	d86a      	bhi.n	800819e <_realloc_r+0x28e>
 80080c8:	4603      	mov	r3, r0
 80080ca:	4632      	mov	r2, r6
 80080cc:	6811      	ldr	r1, [r2, #0]
 80080ce:	6019      	str	r1, [r3, #0]
 80080d0:	6851      	ldr	r1, [r2, #4]
 80080d2:	6059      	str	r1, [r3, #4]
 80080d4:	6892      	ldr	r2, [r2, #8]
 80080d6:	609a      	str	r2, [r3, #8]
 80080d8:	4631      	mov	r1, r6
 80080da:	4648      	mov	r0, r9
 80080dc:	f7fe fba6 	bl	800682c <_free_r>
 80080e0:	4648      	mov	r0, r9
 80080e2:	f7ff fa4b 	bl	800757c <__malloc_unlock>
 80080e6:	4638      	mov	r0, r7
 80080e8:	b003      	add	sp, #12
 80080ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ee:	4611      	mov	r1, r2
 80080f0:	b003      	add	sp, #12
 80080f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f6:	f7fe beff 	b.w	8006ef8 <_malloc_r>
 80080fa:	68ca      	ldr	r2, [r1, #12]
 80080fc:	6889      	ldr	r1, [r1, #8]
 80080fe:	4604      	mov	r4, r0
 8008100:	60ca      	str	r2, [r1, #12]
 8008102:	6091      	str	r1, [r2, #8]
 8008104:	e7a4      	b.n	8008050 <_realloc_r+0x140>
 8008106:	6841      	ldr	r1, [r0, #4]
 8008108:	f021 0103 	bic.w	r1, r1, #3
 800810c:	4421      	add	r1, r4
 800810e:	f105 0010 	add.w	r0, r5, #16
 8008112:	4281      	cmp	r1, r0
 8008114:	da5b      	bge.n	80081ce <_realloc_r+0x2be>
 8008116:	07db      	lsls	r3, r3, #31
 8008118:	d4c0      	bmi.n	800809c <_realloc_r+0x18c>
 800811a:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800811e:	ebc3 0a08 	rsb	sl, r3, r8
 8008122:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008126:	f023 0303 	bic.w	r3, r3, #3
 800812a:	eb01 0c03 	add.w	ip, r1, r3
 800812e:	4560      	cmp	r0, ip
 8008130:	f73f af66 	bgt.w	8008000 <_realloc_r+0xf0>
 8008134:	4657      	mov	r7, sl
 8008136:	f8da 300c 	ldr.w	r3, [sl, #12]
 800813a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800813e:	1f22      	subs	r2, r4, #4
 8008140:	2a24      	cmp	r2, #36	; 0x24
 8008142:	60cb      	str	r3, [r1, #12]
 8008144:	6099      	str	r1, [r3, #8]
 8008146:	f200 80b8 	bhi.w	80082ba <_realloc_r+0x3aa>
 800814a:	2a13      	cmp	r2, #19
 800814c:	f240 80a9 	bls.w	80082a2 <_realloc_r+0x392>
 8008150:	6833      	ldr	r3, [r6, #0]
 8008152:	f8ca 3008 	str.w	r3, [sl, #8]
 8008156:	6873      	ldr	r3, [r6, #4]
 8008158:	f8ca 300c 	str.w	r3, [sl, #12]
 800815c:	2a1b      	cmp	r2, #27
 800815e:	f200 80b5 	bhi.w	80082cc <_realloc_r+0x3bc>
 8008162:	3608      	adds	r6, #8
 8008164:	f10a 0310 	add.w	r3, sl, #16
 8008168:	6832      	ldr	r2, [r6, #0]
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	6872      	ldr	r2, [r6, #4]
 800816e:	605a      	str	r2, [r3, #4]
 8008170:	68b2      	ldr	r2, [r6, #8]
 8008172:	609a      	str	r2, [r3, #8]
 8008174:	eb0a 0205 	add.w	r2, sl, r5
 8008178:	ebc5 030c 	rsb	r3, r5, ip
 800817c:	f043 0301 	orr.w	r3, r3, #1
 8008180:	f8cb 2008 	str.w	r2, [fp, #8]
 8008184:	6053      	str	r3, [r2, #4]
 8008186:	f8da 3004 	ldr.w	r3, [sl, #4]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	431d      	orrs	r5, r3
 8008190:	4648      	mov	r0, r9
 8008192:	f8ca 5004 	str.w	r5, [sl, #4]
 8008196:	f7ff f9f1 	bl	800757c <__malloc_unlock>
 800819a:	4638      	mov	r0, r7
 800819c:	e769      	b.n	8008072 <_realloc_r+0x162>
 800819e:	6833      	ldr	r3, [r6, #0]
 80081a0:	6003      	str	r3, [r0, #0]
 80081a2:	6873      	ldr	r3, [r6, #4]
 80081a4:	6043      	str	r3, [r0, #4]
 80081a6:	2a1b      	cmp	r2, #27
 80081a8:	d829      	bhi.n	80081fe <_realloc_r+0x2ee>
 80081aa:	f100 0308 	add.w	r3, r0, #8
 80081ae:	f106 0208 	add.w	r2, r6, #8
 80081b2:	e78b      	b.n	80080cc <_realloc_r+0x1bc>
 80081b4:	463b      	mov	r3, r7
 80081b6:	6832      	ldr	r2, [r6, #0]
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	6872      	ldr	r2, [r6, #4]
 80081bc:	605a      	str	r2, [r3, #4]
 80081be:	68b2      	ldr	r2, [r6, #8]
 80081c0:	609a      	str	r2, [r3, #8]
 80081c2:	463e      	mov	r6, r7
 80081c4:	4674      	mov	r4, lr
 80081c6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80081ca:	46d0      	mov	r8, sl
 80081cc:	e740      	b.n	8008050 <_realloc_r+0x140>
 80081ce:	eb08 0205 	add.w	r2, r8, r5
 80081d2:	1b4b      	subs	r3, r1, r5
 80081d4:	f043 0301 	orr.w	r3, r3, #1
 80081d8:	f8cb 2008 	str.w	r2, [fp, #8]
 80081dc:	6053      	str	r3, [r2, #4]
 80081de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	431d      	orrs	r5, r3
 80081e8:	4648      	mov	r0, r9
 80081ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80081ee:	f7ff f9c5 	bl	800757c <__malloc_unlock>
 80081f2:	4630      	mov	r0, r6
 80081f4:	e73d      	b.n	8008072 <_realloc_r+0x162>
 80081f6:	4631      	mov	r1, r6
 80081f8:	f7ff f95a 	bl	80074b0 <memmove>
 80081fc:	e76c      	b.n	80080d8 <_realloc_r+0x1c8>
 80081fe:	68b3      	ldr	r3, [r6, #8]
 8008200:	6083      	str	r3, [r0, #8]
 8008202:	68f3      	ldr	r3, [r6, #12]
 8008204:	60c3      	str	r3, [r0, #12]
 8008206:	2a24      	cmp	r2, #36	; 0x24
 8008208:	d02c      	beq.n	8008264 <_realloc_r+0x354>
 800820a:	f100 0310 	add.w	r3, r0, #16
 800820e:	f106 0210 	add.w	r2, r6, #16
 8008212:	e75b      	b.n	80080cc <_realloc_r+0x1bc>
 8008214:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008218:	f022 0203 	bic.w	r2, r2, #3
 800821c:	4414      	add	r4, r2
 800821e:	e717      	b.n	8008050 <_realloc_r+0x140>
 8008220:	4631      	mov	r1, r6
 8008222:	4638      	mov	r0, r7
 8008224:	4674      	mov	r4, lr
 8008226:	463e      	mov	r6, r7
 8008228:	f7ff f942 	bl	80074b0 <memmove>
 800822c:	46d0      	mov	r8, sl
 800822e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008232:	e70d      	b.n	8008050 <_realloc_r+0x140>
 8008234:	463a      	mov	r2, r7
 8008236:	e700      	b.n	800803a <_realloc_r+0x12a>
 8008238:	4631      	mov	r1, r6
 800823a:	4638      	mov	r0, r7
 800823c:	461c      	mov	r4, r3
 800823e:	463e      	mov	r6, r7
 8008240:	f7ff f936 	bl	80074b0 <memmove>
 8008244:	46d0      	mov	r8, sl
 8008246:	f8da 3004 	ldr.w	r3, [sl, #4]
 800824a:	e701      	b.n	8008050 <_realloc_r+0x140>
 800824c:	68b3      	ldr	r3, [r6, #8]
 800824e:	f8ca 3010 	str.w	r3, [sl, #16]
 8008252:	68f3      	ldr	r3, [r6, #12]
 8008254:	f8ca 3014 	str.w	r3, [sl, #20]
 8008258:	2a24      	cmp	r2, #36	; 0x24
 800825a:	d018      	beq.n	800828e <_realloc_r+0x37e>
 800825c:	3610      	adds	r6, #16
 800825e:	f10a 0318 	add.w	r3, sl, #24
 8008262:	e7a8      	b.n	80081b6 <_realloc_r+0x2a6>
 8008264:	6933      	ldr	r3, [r6, #16]
 8008266:	6103      	str	r3, [r0, #16]
 8008268:	6973      	ldr	r3, [r6, #20]
 800826a:	6143      	str	r3, [r0, #20]
 800826c:	f106 0218 	add.w	r2, r6, #24
 8008270:	f100 0318 	add.w	r3, r0, #24
 8008274:	e72a      	b.n	80080cc <_realloc_r+0x1bc>
 8008276:	68b1      	ldr	r1, [r6, #8]
 8008278:	f8ca 1010 	str.w	r1, [sl, #16]
 800827c:	68f1      	ldr	r1, [r6, #12]
 800827e:	f8ca 1014 	str.w	r1, [sl, #20]
 8008282:	2a24      	cmp	r2, #36	; 0x24
 8008284:	d00f      	beq.n	80082a6 <_realloc_r+0x396>
 8008286:	3610      	adds	r6, #16
 8008288:	f10a 0218 	add.w	r2, sl, #24
 800828c:	e6d5      	b.n	800803a <_realloc_r+0x12a>
 800828e:	6933      	ldr	r3, [r6, #16]
 8008290:	f8ca 3018 	str.w	r3, [sl, #24]
 8008294:	6973      	ldr	r3, [r6, #20]
 8008296:	f8ca 301c 	str.w	r3, [sl, #28]
 800829a:	3618      	adds	r6, #24
 800829c:	f10a 0320 	add.w	r3, sl, #32
 80082a0:	e789      	b.n	80081b6 <_realloc_r+0x2a6>
 80082a2:	463b      	mov	r3, r7
 80082a4:	e760      	b.n	8008168 <_realloc_r+0x258>
 80082a6:	6932      	ldr	r2, [r6, #16]
 80082a8:	f8ca 2018 	str.w	r2, [sl, #24]
 80082ac:	6972      	ldr	r2, [r6, #20]
 80082ae:	f8ca 201c 	str.w	r2, [sl, #28]
 80082b2:	3618      	adds	r6, #24
 80082b4:	f10a 0220 	add.w	r2, sl, #32
 80082b8:	e6bf      	b.n	800803a <_realloc_r+0x12a>
 80082ba:	4631      	mov	r1, r6
 80082bc:	4638      	mov	r0, r7
 80082be:	f8cd c004 	str.w	ip, [sp, #4]
 80082c2:	f7ff f8f5 	bl	80074b0 <memmove>
 80082c6:	f8dd c004 	ldr.w	ip, [sp, #4]
 80082ca:	e753      	b.n	8008174 <_realloc_r+0x264>
 80082cc:	68b3      	ldr	r3, [r6, #8]
 80082ce:	f8ca 3010 	str.w	r3, [sl, #16]
 80082d2:	68f3      	ldr	r3, [r6, #12]
 80082d4:	f8ca 3014 	str.w	r3, [sl, #20]
 80082d8:	2a24      	cmp	r2, #36	; 0x24
 80082da:	d003      	beq.n	80082e4 <_realloc_r+0x3d4>
 80082dc:	3610      	adds	r6, #16
 80082de:	f10a 0318 	add.w	r3, sl, #24
 80082e2:	e741      	b.n	8008168 <_realloc_r+0x258>
 80082e4:	6933      	ldr	r3, [r6, #16]
 80082e6:	f8ca 3018 	str.w	r3, [sl, #24]
 80082ea:	6973      	ldr	r3, [r6, #20]
 80082ec:	f8ca 301c 	str.w	r3, [sl, #28]
 80082f0:	3618      	adds	r6, #24
 80082f2:	f10a 0320 	add.w	r3, sl, #32
 80082f6:	e737      	b.n	8008168 <_realloc_r+0x258>
 80082f8:	20000528 	.word	0x20000528

080082fc <__fpclassifyd>:
 80082fc:	ec53 2b10 	vmov	r2, r3, d0
 8008300:	b410      	push	{r4}
 8008302:	f033 4400 	bics.w	r4, r3, #2147483648	; 0x80000000
 8008306:	d008      	beq.n	800831a <__fpclassifyd+0x1e>
 8008308:	4911      	ldr	r1, [pc, #68]	; (8008350 <__fpclassifyd+0x54>)
 800830a:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 800830e:	4288      	cmp	r0, r1
 8008310:	d808      	bhi.n	8008324 <__fpclassifyd+0x28>
 8008312:	2004      	movs	r0, #4
 8008314:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008318:	4770      	bx	lr
 800831a:	b91a      	cbnz	r2, 8008324 <__fpclassifyd+0x28>
 800831c:	2002      	movs	r0, #2
 800831e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008322:	4770      	bx	lr
 8008324:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8008328:	4909      	ldr	r1, [pc, #36]	; (8008350 <__fpclassifyd+0x54>)
 800832a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800832e:	428b      	cmp	r3, r1
 8008330:	d9ef      	bls.n	8008312 <__fpclassifyd+0x16>
 8008332:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008336:	d201      	bcs.n	800833c <__fpclassifyd+0x40>
 8008338:	2003      	movs	r0, #3
 800833a:	e7eb      	b.n	8008314 <__fpclassifyd+0x18>
 800833c:	4b05      	ldr	r3, [pc, #20]	; (8008354 <__fpclassifyd+0x58>)
 800833e:	429c      	cmp	r4, r3
 8008340:	d001      	beq.n	8008346 <__fpclassifyd+0x4a>
 8008342:	2000      	movs	r0, #0
 8008344:	e7e6      	b.n	8008314 <__fpclassifyd+0x18>
 8008346:	fab2 f082 	clz	r0, r2
 800834a:	0940      	lsrs	r0, r0, #5
 800834c:	e7e2      	b.n	8008314 <__fpclassifyd+0x18>
 800834e:	bf00      	nop
 8008350:	7fdfffff 	.word	0x7fdfffff
 8008354:	7ff00000 	.word	0x7ff00000

08008358 <_sbrk_r>:
 8008358:	b538      	push	{r3, r4, r5, lr}
 800835a:	4c07      	ldr	r4, [pc, #28]	; (8008378 <_sbrk_r+0x20>)
 800835c:	2300      	movs	r3, #0
 800835e:	4605      	mov	r5, r0
 8008360:	4608      	mov	r0, r1
 8008362:	6023      	str	r3, [r4, #0]
 8008364:	f7f8 fe06 	bl	8000f74 <_sbrk>
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d000      	beq.n	800836e <_sbrk_r+0x16>
 800836c:	bd38      	pop	{r3, r4, r5, pc}
 800836e:	6823      	ldr	r3, [r4, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d0fb      	beq.n	800836c <_sbrk_r+0x14>
 8008374:	602b      	str	r3, [r5, #0]
 8008376:	bd38      	pop	{r3, r4, r5, pc}
 8008378:	2001064c 	.word	0x2001064c

0800837c <__sread>:
 800837c:	b510      	push	{r4, lr}
 800837e:	460c      	mov	r4, r1
 8008380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008384:	f001 fa58 	bl	8009838 <_read_r>
 8008388:	2800      	cmp	r0, #0
 800838a:	db03      	blt.n	8008394 <__sread+0x18>
 800838c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800838e:	4403      	add	r3, r0
 8008390:	6523      	str	r3, [r4, #80]	; 0x50
 8008392:	bd10      	pop	{r4, pc}
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800839a:	81a3      	strh	r3, [r4, #12]
 800839c:	bd10      	pop	{r4, pc}
 800839e:	bf00      	nop

080083a0 <__seofread>:
 80083a0:	2000      	movs	r0, #0
 80083a2:	4770      	bx	lr

080083a4 <__swrite>:
 80083a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a8:	4616      	mov	r6, r2
 80083aa:	898a      	ldrh	r2, [r1, #12]
 80083ac:	461d      	mov	r5, r3
 80083ae:	05d3      	lsls	r3, r2, #23
 80083b0:	460c      	mov	r4, r1
 80083b2:	4607      	mov	r7, r0
 80083b4:	d506      	bpl.n	80083c4 <__swrite+0x20>
 80083b6:	2200      	movs	r2, #0
 80083b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083bc:	2302      	movs	r3, #2
 80083be:	f001 fa27 	bl	8009810 <_lseek_r>
 80083c2:	89a2      	ldrh	r2, [r4, #12]
 80083c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80083cc:	81a2      	strh	r2, [r4, #12]
 80083ce:	4638      	mov	r0, r7
 80083d0:	4632      	mov	r2, r6
 80083d2:	462b      	mov	r3, r5
 80083d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083d8:	f001 b884 	b.w	80094e4 <_write_r>

080083dc <__sseek>:
 80083dc:	b510      	push	{r4, lr}
 80083de:	460c      	mov	r4, r1
 80083e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e4:	f001 fa14 	bl	8009810 <_lseek_r>
 80083e8:	89a3      	ldrh	r3, [r4, #12]
 80083ea:	1c42      	adds	r2, r0, #1
 80083ec:	bf0e      	itee	eq
 80083ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083f6:	6520      	strne	r0, [r4, #80]	; 0x50
 80083f8:	81a3      	strh	r3, [r4, #12]
 80083fa:	bd10      	pop	{r4, pc}

080083fc <__sclose>:
 80083fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008400:	f001 b906 	b.w	8009610 <_close_r>
	...
 8008420:	eba2 0003 	sub.w	r0, r2, r3
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop

08008428 <strcmp>:
 8008428:	7802      	ldrb	r2, [r0, #0]
 800842a:	780b      	ldrb	r3, [r1, #0]
 800842c:	2a01      	cmp	r2, #1
 800842e:	bf28      	it	cs
 8008430:	429a      	cmpcs	r2, r3
 8008432:	d1f5      	bne.n	8008420 <__sclose+0x24>
 8008434:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8008438:	ea40 0401 	orr.w	r4, r0, r1
 800843c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008440:	f06f 0c00 	mvn.w	ip, #0
 8008444:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8008448:	b312      	cbz	r2, 8008490 <strcmp+0x68>
 800844a:	ea80 0401 	eor.w	r4, r0, r1
 800844e:	f014 0f07 	tst.w	r4, #7
 8008452:	d16a      	bne.n	800852a <strcmp+0x102>
 8008454:	f000 0407 	and.w	r4, r0, #7
 8008458:	f020 0007 	bic.w	r0, r0, #7
 800845c:	f004 0503 	and.w	r5, r4, #3
 8008460:	f021 0107 	bic.w	r1, r1, #7
 8008464:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8008468:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800846c:	f014 0f04 	tst.w	r4, #4
 8008470:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8008474:	fa0c f405 	lsl.w	r4, ip, r5
 8008478:	ea62 0204 	orn	r2, r2, r4
 800847c:	ea66 0604 	orn	r6, r6, r4
 8008480:	d00a      	beq.n	8008498 <strcmp+0x70>
 8008482:	ea63 0304 	orn	r3, r3, r4
 8008486:	4662      	mov	r2, ip
 8008488:	ea67 0704 	orn	r7, r7, r4
 800848c:	4666      	mov	r6, ip
 800848e:	e003      	b.n	8008498 <strcmp+0x70>
 8008490:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8008494:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8008498:	fa82 f54c 	uadd8	r5, r2, ip
 800849c:	ea82 0406 	eor.w	r4, r2, r6
 80084a0:	faa4 f48c 	sel	r4, r4, ip
 80084a4:	bb6c      	cbnz	r4, 8008502 <strcmp+0xda>
 80084a6:	fa83 f54c 	uadd8	r5, r3, ip
 80084aa:	ea83 0507 	eor.w	r5, r3, r7
 80084ae:	faa5 f58c 	sel	r5, r5, ip
 80084b2:	b995      	cbnz	r5, 80084da <strcmp+0xb2>
 80084b4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 80084b8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 80084bc:	fa82 f54c 	uadd8	r5, r2, ip
 80084c0:	ea82 0406 	eor.w	r4, r2, r6
 80084c4:	faa4 f48c 	sel	r4, r4, ip
 80084c8:	fa83 f54c 	uadd8	r5, r3, ip
 80084cc:	ea83 0507 	eor.w	r5, r3, r7
 80084d0:	faa5 f58c 	sel	r5, r5, ip
 80084d4:	4325      	orrs	r5, r4
 80084d6:	d0db      	beq.n	8008490 <strcmp+0x68>
 80084d8:	b99c      	cbnz	r4, 8008502 <strcmp+0xda>
 80084da:	ba2d      	rev	r5, r5
 80084dc:	fab5 f485 	clz	r4, r5
 80084e0:	f024 0407 	bic.w	r4, r4, #7
 80084e4:	fa27 f104 	lsr.w	r1, r7, r4
 80084e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80084ec:	fa23 f304 	lsr.w	r3, r3, r4
 80084f0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80084f4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80084f8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80084fc:	eba0 0001 	sub.w	r0, r0, r1
 8008500:	4770      	bx	lr
 8008502:	ba24      	rev	r4, r4
 8008504:	fab4 f484 	clz	r4, r4
 8008508:	f024 0407 	bic.w	r4, r4, #7
 800850c:	fa26 f104 	lsr.w	r1, r6, r4
 8008510:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008514:	fa22 f204 	lsr.w	r2, r2, r4
 8008518:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800851c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008520:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8008524:	eba0 0001 	sub.w	r0, r0, r1
 8008528:	4770      	bx	lr
 800852a:	f014 0f03 	tst.w	r4, #3
 800852e:	d13c      	bne.n	80085aa <strcmp+0x182>
 8008530:	f010 0403 	ands.w	r4, r0, #3
 8008534:	d128      	bne.n	8008588 <strcmp+0x160>
 8008536:	f850 2b08 	ldr.w	r2, [r0], #8
 800853a:	f851 3b08 	ldr.w	r3, [r1], #8
 800853e:	fa82 f54c 	uadd8	r5, r2, ip
 8008542:	ea82 0503 	eor.w	r5, r2, r3
 8008546:	faa5 f58c 	sel	r5, r5, ip
 800854a:	b95d      	cbnz	r5, 8008564 <strcmp+0x13c>
 800854c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008554:	fa82 f54c 	uadd8	r5, r2, ip
 8008558:	ea82 0503 	eor.w	r5, r2, r3
 800855c:	faa5 f58c 	sel	r5, r5, ip
 8008560:	2d00      	cmp	r5, #0
 8008562:	d0e8      	beq.n	8008536 <strcmp+0x10e>
 8008564:	ba2d      	rev	r5, r5
 8008566:	fab5 f485 	clz	r4, r5
 800856a:	f024 0407 	bic.w	r4, r4, #7
 800856e:	fa23 f104 	lsr.w	r1, r3, r4
 8008572:	fa22 f204 	lsr.w	r2, r2, r4
 8008576:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800857a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800857e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8008582:	eba0 0001 	sub.w	r0, r0, r1
 8008586:	4770      	bx	lr
 8008588:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800858c:	f020 0003 	bic.w	r0, r0, #3
 8008590:	f850 2b08 	ldr.w	r2, [r0], #8
 8008594:	f021 0103 	bic.w	r1, r1, #3
 8008598:	f851 3b08 	ldr.w	r3, [r1], #8
 800859c:	fa0c f404 	lsl.w	r4, ip, r4
 80085a0:	ea62 0204 	orn	r2, r2, r4
 80085a4:	ea63 0304 	orn	r3, r3, r4
 80085a8:	e7c9      	b.n	800853e <strcmp+0x116>
 80085aa:	f010 0403 	ands.w	r4, r0, #3
 80085ae:	d01a      	beq.n	80085e6 <strcmp+0x1be>
 80085b0:	eba1 0104 	sub.w	r1, r1, r4
 80085b4:	f020 0003 	bic.w	r0, r0, #3
 80085b8:	07e4      	lsls	r4, r4, #31
 80085ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80085be:	d006      	beq.n	80085ce <strcmp+0x1a6>
 80085c0:	d20f      	bcs.n	80085e2 <strcmp+0x1ba>
 80085c2:	788b      	ldrb	r3, [r1, #2]
 80085c4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 80085c8:	1ae4      	subs	r4, r4, r3
 80085ca:	d106      	bne.n	80085da <strcmp+0x1b2>
 80085cc:	b12b      	cbz	r3, 80085da <strcmp+0x1b2>
 80085ce:	78cb      	ldrb	r3, [r1, #3]
 80085d0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 80085d4:	1ae4      	subs	r4, r4, r3
 80085d6:	d100      	bne.n	80085da <strcmp+0x1b2>
 80085d8:	b91b      	cbnz	r3, 80085e2 <strcmp+0x1ba>
 80085da:	4620      	mov	r0, r4
 80085dc:	f85d 4b10 	ldr.w	r4, [sp], #16
 80085e0:	4770      	bx	lr
 80085e2:	f101 0104 	add.w	r1, r1, #4
 80085e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80085ea:	07cc      	lsls	r4, r1, #31
 80085ec:	f021 0103 	bic.w	r1, r1, #3
 80085f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80085f4:	d848      	bhi.n	8008688 <strcmp+0x260>
 80085f6:	d224      	bcs.n	8008642 <strcmp+0x21a>
 80085f8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 80085fc:	fa82 f54c 	uadd8	r5, r2, ip
 8008600:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8008604:	faa5 f58c 	sel	r5, r5, ip
 8008608:	d10a      	bne.n	8008620 <strcmp+0x1f8>
 800860a:	b965      	cbnz	r5, 8008626 <strcmp+0x1fe>
 800860c:	f851 3b04 	ldr.w	r3, [r1], #4
 8008610:	ea84 0402 	eor.w	r4, r4, r2
 8008614:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8008618:	d10e      	bne.n	8008638 <strcmp+0x210>
 800861a:	f850 2b04 	ldr.w	r2, [r0], #4
 800861e:	e7eb      	b.n	80085f8 <strcmp+0x1d0>
 8008620:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8008624:	e055      	b.n	80086d2 <strcmp+0x2aa>
 8008626:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800862a:	d14d      	bne.n	80086c8 <strcmp+0x2a0>
 800862c:	7808      	ldrb	r0, [r1, #0]
 800862e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8008632:	f1c0 0000 	rsb	r0, r0, #0
 8008636:	4770      	bx	lr
 8008638:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800863c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8008640:	e047      	b.n	80086d2 <strcmp+0x2aa>
 8008642:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8008646:	fa82 f54c 	uadd8	r5, r2, ip
 800864a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800864e:	faa5 f58c 	sel	r5, r5, ip
 8008652:	d10a      	bne.n	800866a <strcmp+0x242>
 8008654:	b965      	cbnz	r5, 8008670 <strcmp+0x248>
 8008656:	f851 3b04 	ldr.w	r3, [r1], #4
 800865a:	ea84 0402 	eor.w	r4, r4, r2
 800865e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8008662:	d10c      	bne.n	800867e <strcmp+0x256>
 8008664:	f850 2b04 	ldr.w	r2, [r0], #4
 8008668:	e7eb      	b.n	8008642 <strcmp+0x21a>
 800866a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800866e:	e030      	b.n	80086d2 <strcmp+0x2aa>
 8008670:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8008674:	d128      	bne.n	80086c8 <strcmp+0x2a0>
 8008676:	880b      	ldrh	r3, [r1, #0]
 8008678:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800867c:	e029      	b.n	80086d2 <strcmp+0x2aa>
 800867e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8008682:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8008686:	e024      	b.n	80086d2 <strcmp+0x2aa>
 8008688:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800868c:	fa82 f54c 	uadd8	r5, r2, ip
 8008690:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8008694:	faa5 f58c 	sel	r5, r5, ip
 8008698:	d10a      	bne.n	80086b0 <strcmp+0x288>
 800869a:	b965      	cbnz	r5, 80086b6 <strcmp+0x28e>
 800869c:	f851 3b04 	ldr.w	r3, [r1], #4
 80086a0:	ea84 0402 	eor.w	r4, r4, r2
 80086a4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 80086a8:	d109      	bne.n	80086be <strcmp+0x296>
 80086aa:	f850 2b04 	ldr.w	r2, [r0], #4
 80086ae:	e7eb      	b.n	8008688 <strcmp+0x260>
 80086b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80086b4:	e00d      	b.n	80086d2 <strcmp+0x2aa>
 80086b6:	f015 0fff 	tst.w	r5, #255	; 0xff
 80086ba:	d105      	bne.n	80086c8 <strcmp+0x2a0>
 80086bc:	680b      	ldr	r3, [r1, #0]
 80086be:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80086c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80086c6:	e004      	b.n	80086d2 <strcmp+0x2aa>
 80086c8:	f04f 0000 	mov.w	r0, #0
 80086cc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80086d0:	4770      	bx	lr
 80086d2:	ba12      	rev	r2, r2
 80086d4:	ba1b      	rev	r3, r3
 80086d6:	fa82 f44c 	uadd8	r4, r2, ip
 80086da:	ea82 0403 	eor.w	r4, r2, r3
 80086de:	faa4 f58c 	sel	r5, r4, ip
 80086e2:	fab5 f485 	clz	r4, r5
 80086e6:	fa02 f204 	lsl.w	r2, r2, r4
 80086ea:	fa03 f304 	lsl.w	r3, r3, r4
 80086ee:	ea4f 6012 	mov.w	r0, r2, lsr #24
 80086f2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80086f6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 80086fa:	4770      	bx	lr

080086fc <__sprint_r.part.0>:
 80086fc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80086fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008702:	049c      	lsls	r4, r3, #18
 8008704:	460f      	mov	r7, r1
 8008706:	4692      	mov	sl, r2
 8008708:	d52b      	bpl.n	8008762 <__sprint_r.part.0+0x66>
 800870a:	6893      	ldr	r3, [r2, #8]
 800870c:	6812      	ldr	r2, [r2, #0]
 800870e:	b333      	cbz	r3, 800875e <__sprint_r.part.0+0x62>
 8008710:	4680      	mov	r8, r0
 8008712:	f102 0908 	add.w	r9, r2, #8
 8008716:	e919 0060 	ldmdb	r9, {r5, r6}
 800871a:	08b6      	lsrs	r6, r6, #2
 800871c:	d017      	beq.n	800874e <__sprint_r.part.0+0x52>
 800871e:	3d04      	subs	r5, #4
 8008720:	2400      	movs	r4, #0
 8008722:	e001      	b.n	8008728 <__sprint_r.part.0+0x2c>
 8008724:	42a6      	cmp	r6, r4
 8008726:	d010      	beq.n	800874a <__sprint_r.part.0+0x4e>
 8008728:	4640      	mov	r0, r8
 800872a:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800872e:	463a      	mov	r2, r7
 8008730:	f001 f822 	bl	8009778 <_fputwc_r>
 8008734:	1c43      	adds	r3, r0, #1
 8008736:	f104 0401 	add.w	r4, r4, #1
 800873a:	d1f3      	bne.n	8008724 <__sprint_r.part.0+0x28>
 800873c:	2300      	movs	r3, #0
 800873e:	f8ca 3008 	str.w	r3, [sl, #8]
 8008742:	f8ca 3004 	str.w	r3, [sl, #4]
 8008746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800874a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800874e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 8008752:	f8ca 3008 	str.w	r3, [sl, #8]
 8008756:	f109 0908 	add.w	r9, r9, #8
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1db      	bne.n	8008716 <__sprint_r.part.0+0x1a>
 800875e:	2000      	movs	r0, #0
 8008760:	e7ec      	b.n	800873c <__sprint_r.part.0+0x40>
 8008762:	f7fe f93b 	bl	80069dc <__sfvwrite_r>
 8008766:	2300      	movs	r3, #0
 8008768:	f8ca 3008 	str.w	r3, [sl, #8]
 800876c:	f8ca 3004 	str.w	r3, [sl, #4]
 8008770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008774 <__sprint_r>:
 8008774:	6893      	ldr	r3, [r2, #8]
 8008776:	b410      	push	{r4}
 8008778:	b11b      	cbz	r3, 8008782 <__sprint_r+0xe>
 800877a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800877e:	f7ff bfbd 	b.w	80086fc <__sprint_r.part.0>
 8008782:	4618      	mov	r0, r3
 8008784:	6053      	str	r3, [r2, #4]
 8008786:	f85d 4b04 	ldr.w	r4, [sp], #4
 800878a:	4770      	bx	lr

0800878c <_vfiprintf_r>:
 800878c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008790:	b0ab      	sub	sp, #172	; 0xac
 8008792:	461c      	mov	r4, r3
 8008794:	9100      	str	r1, [sp, #0]
 8008796:	4693      	mov	fp, r2
 8008798:	9304      	str	r3, [sp, #16]
 800879a:	9001      	str	r0, [sp, #4]
 800879c:	b118      	cbz	r0, 80087a6 <_vfiprintf_r+0x1a>
 800879e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f000 80e3 	beq.w	800896c <_vfiprintf_r+0x1e0>
 80087a6:	9b00      	ldr	r3, [sp, #0]
 80087a8:	8999      	ldrh	r1, [r3, #12]
 80087aa:	b28a      	uxth	r2, r1
 80087ac:	0490      	lsls	r0, r2, #18
 80087ae:	d408      	bmi.n	80087c2 <_vfiprintf_r+0x36>
 80087b0:	4618      	mov	r0, r3
 80087b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087b4:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 80087b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087bc:	8182      	strh	r2, [r0, #12]
 80087be:	6643      	str	r3, [r0, #100]	; 0x64
 80087c0:	b292      	uxth	r2, r2
 80087c2:	0711      	lsls	r1, r2, #28
 80087c4:	f140 80b2 	bpl.w	800892c <_vfiprintf_r+0x1a0>
 80087c8:	9b00      	ldr	r3, [sp, #0]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 80ad 	beq.w	800892c <_vfiprintf_r+0x1a0>
 80087d2:	f002 021a 	and.w	r2, r2, #26
 80087d6:	2a0a      	cmp	r2, #10
 80087d8:	f000 80b4 	beq.w	8008944 <_vfiprintf_r+0x1b8>
 80087dc:	2300      	movs	r3, #0
 80087de:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80087e2:	9309      	str	r3, [sp, #36]	; 0x24
 80087e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80087e6:	930e      	str	r3, [sp, #56]	; 0x38
 80087e8:	9302      	str	r3, [sp, #8]
 80087ea:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80087ee:	4654      	mov	r4, sl
 80087f0:	f89b 3000 	ldrb.w	r3, [fp]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 84a3 	beq.w	8009140 <_vfiprintf_r+0x9b4>
 80087fa:	2b25      	cmp	r3, #37	; 0x25
 80087fc:	f000 84a0 	beq.w	8009140 <_vfiprintf_r+0x9b4>
 8008800:	465a      	mov	r2, fp
 8008802:	e001      	b.n	8008808 <_vfiprintf_r+0x7c>
 8008804:	2b25      	cmp	r3, #37	; 0x25
 8008806:	d003      	beq.n	8008810 <_vfiprintf_r+0x84>
 8008808:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1f9      	bne.n	8008804 <_vfiprintf_r+0x78>
 8008810:	ebcb 0602 	rsb	r6, fp, r2
 8008814:	4615      	mov	r5, r2
 8008816:	b196      	cbz	r6, 800883e <_vfiprintf_r+0xb2>
 8008818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800881a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800881c:	f8c4 b000 	str.w	fp, [r4]
 8008820:	3301      	adds	r3, #1
 8008822:	4432      	add	r2, r6
 8008824:	2b07      	cmp	r3, #7
 8008826:	6066      	str	r6, [r4, #4]
 8008828:	920f      	str	r2, [sp, #60]	; 0x3c
 800882a:	930e      	str	r3, [sp, #56]	; 0x38
 800882c:	dd79      	ble.n	8008922 <_vfiprintf_r+0x196>
 800882e:	2a00      	cmp	r2, #0
 8008830:	f040 84af 	bne.w	8009192 <_vfiprintf_r+0xa06>
 8008834:	9b02      	ldr	r3, [sp, #8]
 8008836:	920e      	str	r2, [sp, #56]	; 0x38
 8008838:	4433      	add	r3, r6
 800883a:	4654      	mov	r4, sl
 800883c:	9302      	str	r3, [sp, #8]
 800883e:	782b      	ldrb	r3, [r5, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	f000 8360 	beq.w	8008f06 <_vfiprintf_r+0x77a>
 8008846:	2100      	movs	r1, #0
 8008848:	f04f 0300 	mov.w	r3, #0
 800884c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008850:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8008854:	1c68      	adds	r0, r5, #1
 8008856:	786b      	ldrb	r3, [r5, #1]
 8008858:	4688      	mov	r8, r1
 800885a:	460d      	mov	r5, r1
 800885c:	4666      	mov	r6, ip
 800885e:	f100 0b01 	add.w	fp, r0, #1
 8008862:	f1a3 0220 	sub.w	r2, r3, #32
 8008866:	2a58      	cmp	r2, #88	; 0x58
 8008868:	f200 82ab 	bhi.w	8008dc2 <_vfiprintf_r+0x636>
 800886c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008870:	02a9029b 	.word	0x02a9029b
 8008874:	02a302a9 	.word	0x02a302a9
 8008878:	02a902a9 	.word	0x02a902a9
 800887c:	02a902a9 	.word	0x02a902a9
 8008880:	02a902a9 	.word	0x02a902a9
 8008884:	02620255 	.word	0x02620255
 8008888:	010d02a9 	.word	0x010d02a9
 800888c:	02a9026e 	.word	0x02a9026e
 8008890:	012f0129 	.word	0x012f0129
 8008894:	012f012f 	.word	0x012f012f
 8008898:	012f012f 	.word	0x012f012f
 800889c:	012f012f 	.word	0x012f012f
 80088a0:	012f012f 	.word	0x012f012f
 80088a4:	02a902a9 	.word	0x02a902a9
 80088a8:	02a902a9 	.word	0x02a902a9
 80088ac:	02a902a9 	.word	0x02a902a9
 80088b0:	02a902a9 	.word	0x02a902a9
 80088b4:	02a902a9 	.word	0x02a902a9
 80088b8:	02a9013d 	.word	0x02a9013d
 80088bc:	02a902a9 	.word	0x02a902a9
 80088c0:	02a902a9 	.word	0x02a902a9
 80088c4:	02a902a9 	.word	0x02a902a9
 80088c8:	02a902a9 	.word	0x02a902a9
 80088cc:	017402a9 	.word	0x017402a9
 80088d0:	02a902a9 	.word	0x02a902a9
 80088d4:	02a902a9 	.word	0x02a902a9
 80088d8:	018b02a9 	.word	0x018b02a9
 80088dc:	02a902a9 	.word	0x02a902a9
 80088e0:	02a901a3 	.word	0x02a901a3
 80088e4:	02a902a9 	.word	0x02a902a9
 80088e8:	02a902a9 	.word	0x02a902a9
 80088ec:	02a902a9 	.word	0x02a902a9
 80088f0:	02a902a9 	.word	0x02a902a9
 80088f4:	01c702a9 	.word	0x01c702a9
 80088f8:	02a901da 	.word	0x02a901da
 80088fc:	02a902a9 	.word	0x02a902a9
 8008900:	01da0123 	.word	0x01da0123
 8008904:	02a902a9 	.word	0x02a902a9
 8008908:	02a9024c 	.word	0x02a9024c
 800890c:	0113028a 	.word	0x0113028a
 8008910:	020701f3 	.word	0x020701f3
 8008914:	020d02a9 	.word	0x020d02a9
 8008918:	008102a9 	.word	0x008102a9
 800891c:	02a902a9 	.word	0x02a902a9
 8008920:	0233      	.short	0x0233
 8008922:	3408      	adds	r4, #8
 8008924:	9b02      	ldr	r3, [sp, #8]
 8008926:	4433      	add	r3, r6
 8008928:	9302      	str	r3, [sp, #8]
 800892a:	e788      	b.n	800883e <_vfiprintf_r+0xb2>
 800892c:	9801      	ldr	r0, [sp, #4]
 800892e:	9900      	ldr	r1, [sp, #0]
 8008930:	f7fc fc78 	bl	8005224 <__swsetup_r>
 8008934:	b9a8      	cbnz	r0, 8008962 <_vfiprintf_r+0x1d6>
 8008936:	9b00      	ldr	r3, [sp, #0]
 8008938:	899a      	ldrh	r2, [r3, #12]
 800893a:	f002 021a 	and.w	r2, r2, #26
 800893e:	2a0a      	cmp	r2, #10
 8008940:	f47f af4c 	bne.w	80087dc <_vfiprintf_r+0x50>
 8008944:	9b00      	ldr	r3, [sp, #0]
 8008946:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800894a:	2b00      	cmp	r3, #0
 800894c:	f6ff af46 	blt.w	80087dc <_vfiprintf_r+0x50>
 8008950:	9801      	ldr	r0, [sp, #4]
 8008952:	9900      	ldr	r1, [sp, #0]
 8008954:	465a      	mov	r2, fp
 8008956:	4623      	mov	r3, r4
 8008958:	f000 fd2c 	bl	80093b4 <__sbprintf>
 800895c:	b02b      	add	sp, #172	; 0xac
 800895e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008966:	b02b      	add	sp, #172	; 0xac
 8008968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896c:	f7fd fed8 	bl	8006720 <__sinit>
 8008970:	e719      	b.n	80087a6 <_vfiprintf_r+0x1a>
 8008972:	f018 0f20 	tst.w	r8, #32
 8008976:	9503      	str	r5, [sp, #12]
 8008978:	46b4      	mov	ip, r6
 800897a:	f000 810c 	beq.w	8008b96 <_vfiprintf_r+0x40a>
 800897e:	9b04      	ldr	r3, [sp, #16]
 8008980:	3307      	adds	r3, #7
 8008982:	f023 0307 	bic.w	r3, r3, #7
 8008986:	f103 0208 	add.w	r2, r3, #8
 800898a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800898e:	9204      	str	r2, [sp, #16]
 8008990:	2301      	movs	r3, #1
 8008992:	f04f 0200 	mov.w	r2, #0
 8008996:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 800899a:	46e1      	mov	r9, ip
 800899c:	2500      	movs	r5, #0
 800899e:	f1bc 0f00 	cmp.w	ip, #0
 80089a2:	bfa8      	it	ge
 80089a4:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
 80089a8:	ea56 0207 	orrs.w	r2, r6, r7
 80089ac:	f040 80c4 	bne.w	8008b38 <_vfiprintf_r+0x3ac>
 80089b0:	f1bc 0f00 	cmp.w	ip, #0
 80089b4:	f000 8381 	beq.w	80090ba <_vfiprintf_r+0x92e>
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	f000 80c5 	beq.w	8008b48 <_vfiprintf_r+0x3bc>
 80089be:	2b02      	cmp	r3, #2
 80089c0:	f000 8387 	beq.w	80090d2 <_vfiprintf_r+0x946>
 80089c4:	4651      	mov	r1, sl
 80089c6:	08f2      	lsrs	r2, r6, #3
 80089c8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80089cc:	08f8      	lsrs	r0, r7, #3
 80089ce:	f006 0307 	and.w	r3, r6, #7
 80089d2:	4607      	mov	r7, r0
 80089d4:	4616      	mov	r6, r2
 80089d6:	3330      	adds	r3, #48	; 0x30
 80089d8:	ea56 0207 	orrs.w	r2, r6, r7
 80089dc:	f801 3d01 	strb.w	r3, [r1, #-1]!
 80089e0:	d1f1      	bne.n	80089c6 <_vfiprintf_r+0x23a>
 80089e2:	f018 0f01 	tst.w	r8, #1
 80089e6:	9107      	str	r1, [sp, #28]
 80089e8:	f040 83fc 	bne.w	80091e4 <_vfiprintf_r+0xa58>
 80089ec:	ebc1 090a 	rsb	r9, r1, sl
 80089f0:	45e1      	cmp	r9, ip
 80089f2:	464e      	mov	r6, r9
 80089f4:	bfb8      	it	lt
 80089f6:	4666      	movlt	r6, ip
 80089f8:	b105      	cbz	r5, 80089fc <_vfiprintf_r+0x270>
 80089fa:	3601      	adds	r6, #1
 80089fc:	f018 0302 	ands.w	r3, r8, #2
 8008a00:	9305      	str	r3, [sp, #20]
 8008a02:	bf18      	it	ne
 8008a04:	3602      	addne	r6, #2
 8008a06:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8008a0a:	9306      	str	r3, [sp, #24]
 8008a0c:	f040 81fa 	bne.w	8008e04 <_vfiprintf_r+0x678>
 8008a10:	9b03      	ldr	r3, [sp, #12]
 8008a12:	1b9d      	subs	r5, r3, r6
 8008a14:	2d00      	cmp	r5, #0
 8008a16:	f340 81f5 	ble.w	8008e04 <_vfiprintf_r+0x678>
 8008a1a:	2d10      	cmp	r5, #16
 8008a1c:	f340 848c 	ble.w	8009338 <_vfiprintf_r+0xbac>
 8008a20:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8008a24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a26:	4fc6      	ldr	r7, [pc, #792]	; (8008d40 <_vfiprintf_r+0x5b4>)
 8008a28:	4620      	mov	r0, r4
 8008a2a:	2310      	movs	r3, #16
 8008a2c:	4664      	mov	r4, ip
 8008a2e:	4671      	mov	r1, lr
 8008a30:	4684      	mov	ip, r0
 8008a32:	e007      	b.n	8008a44 <_vfiprintf_r+0x2b8>
 8008a34:	f101 0e02 	add.w	lr, r1, #2
 8008a38:	f10c 0c08 	add.w	ip, ip, #8
 8008a3c:	4601      	mov	r1, r0
 8008a3e:	3d10      	subs	r5, #16
 8008a40:	2d10      	cmp	r5, #16
 8008a42:	dd13      	ble.n	8008a6c <_vfiprintf_r+0x2e0>
 8008a44:	1c48      	adds	r0, r1, #1
 8008a46:	3210      	adds	r2, #16
 8008a48:	2807      	cmp	r0, #7
 8008a4a:	920f      	str	r2, [sp, #60]	; 0x3c
 8008a4c:	f8cc 7000 	str.w	r7, [ip]
 8008a50:	f8cc 3004 	str.w	r3, [ip, #4]
 8008a54:	900e      	str	r0, [sp, #56]	; 0x38
 8008a56:	dded      	ble.n	8008a34 <_vfiprintf_r+0x2a8>
 8008a58:	2a00      	cmp	r2, #0
 8008a5a:	f040 81c3 	bne.w	8008de4 <_vfiprintf_r+0x658>
 8008a5e:	3d10      	subs	r5, #16
 8008a60:	2d10      	cmp	r5, #16
 8008a62:	4611      	mov	r1, r2
 8008a64:	f04f 0e01 	mov.w	lr, #1
 8008a68:	46d4      	mov	ip, sl
 8008a6a:	dceb      	bgt.n	8008a44 <_vfiprintf_r+0x2b8>
 8008a6c:	4663      	mov	r3, ip
 8008a6e:	4671      	mov	r1, lr
 8008a70:	46a4      	mov	ip, r4
 8008a72:	461c      	mov	r4, r3
 8008a74:	442a      	add	r2, r5
 8008a76:	2907      	cmp	r1, #7
 8008a78:	920f      	str	r2, [sp, #60]	; 0x3c
 8008a7a:	6027      	str	r7, [r4, #0]
 8008a7c:	6065      	str	r5, [r4, #4]
 8008a7e:	910e      	str	r1, [sp, #56]	; 0x38
 8008a80:	f300 8346 	bgt.w	8009110 <_vfiprintf_r+0x984>
 8008a84:	3408      	adds	r4, #8
 8008a86:	1c48      	adds	r0, r1, #1
 8008a88:	e1bf      	b.n	8008e0a <_vfiprintf_r+0x67e>
 8008a8a:	4658      	mov	r0, fp
 8008a8c:	f048 0804 	orr.w	r8, r8, #4
 8008a90:	f89b 3000 	ldrb.w	r3, [fp]
 8008a94:	e6e3      	b.n	800885e <_vfiprintf_r+0xd2>
 8008a96:	f018 0320 	ands.w	r3, r8, #32
 8008a9a:	9503      	str	r5, [sp, #12]
 8008a9c:	46b4      	mov	ip, r6
 8008a9e:	d062      	beq.n	8008b66 <_vfiprintf_r+0x3da>
 8008aa0:	9b04      	ldr	r3, [sp, #16]
 8008aa2:	3307      	adds	r3, #7
 8008aa4:	f023 0307 	bic.w	r3, r3, #7
 8008aa8:	f103 0208 	add.w	r2, r3, #8
 8008aac:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008ab0:	9204      	str	r2, [sp, #16]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	e76d      	b.n	8008992 <_vfiprintf_r+0x206>
 8008ab6:	f048 0840 	orr.w	r8, r8, #64	; 0x40
 8008aba:	f89b 3000 	ldrb.w	r3, [fp]
 8008abe:	4658      	mov	r0, fp
 8008ac0:	e6cd      	b.n	800885e <_vfiprintf_r+0xd2>
 8008ac2:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 8008ac6:	f89b 3000 	ldrb.w	r3, [fp]
 8008aca:	4658      	mov	r0, fp
 8008acc:	e6c7      	b.n	800885e <_vfiprintf_r+0xd2>
 8008ace:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008ad2:	2500      	movs	r5, #0
 8008ad4:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8008ad8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8008adc:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8008ae0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008ae4:	2a09      	cmp	r2, #9
 8008ae6:	d9f5      	bls.n	8008ad4 <_vfiprintf_r+0x348>
 8008ae8:	e6bb      	b.n	8008862 <_vfiprintf_r+0xd6>
 8008aea:	f048 0810 	orr.w	r8, r8, #16
 8008aee:	f018 0f20 	tst.w	r8, #32
 8008af2:	9503      	str	r5, [sp, #12]
 8008af4:	46b4      	mov	ip, r6
 8008af6:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8008afa:	f000 809b 	beq.w	8008c34 <_vfiprintf_r+0x4a8>
 8008afe:	9904      	ldr	r1, [sp, #16]
 8008b00:	3107      	adds	r1, #7
 8008b02:	f021 0107 	bic.w	r1, r1, #7
 8008b06:	e9d1 2300 	ldrd	r2, r3, [r1]
 8008b0a:	3108      	adds	r1, #8
 8008b0c:	9104      	str	r1, [sp, #16]
 8008b0e:	4616      	mov	r6, r2
 8008b10:	461f      	mov	r7, r3
 8008b12:	2a00      	cmp	r2, #0
 8008b14:	f173 0300 	sbcs.w	r3, r3, #0
 8008b18:	f2c0 83a6 	blt.w	8009268 <_vfiprintf_r+0xadc>
 8008b1c:	f1bc 0f00 	cmp.w	ip, #0
 8008b20:	bfa8      	it	ge
 8008b22:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
 8008b26:	ea56 0207 	orrs.w	r2, r6, r7
 8008b2a:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 8008b2e:	46e1      	mov	r9, ip
 8008b30:	f04f 0301 	mov.w	r3, #1
 8008b34:	f43f af3c 	beq.w	80089b0 <_vfiprintf_r+0x224>
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	f47f af40 	bne.w	80089be <_vfiprintf_r+0x232>
 8008b3e:	2f00      	cmp	r7, #0
 8008b40:	bf08      	it	eq
 8008b42:	2e0a      	cmpeq	r6, #10
 8008b44:	f080 8334 	bcs.w	80091b0 <_vfiprintf_r+0xa24>
 8008b48:	ab2a      	add	r3, sp, #168	; 0xa8
 8008b4a:	3630      	adds	r6, #48	; 0x30
 8008b4c:	f803 6d41 	strb.w	r6, [r3, #-65]!
 8008b50:	ebc3 090a 	rsb	r9, r3, sl
 8008b54:	9307      	str	r3, [sp, #28]
 8008b56:	e74b      	b.n	80089f0 <_vfiprintf_r+0x264>
 8008b58:	f048 0810 	orr.w	r8, r8, #16
 8008b5c:	f018 0320 	ands.w	r3, r8, #32
 8008b60:	9503      	str	r5, [sp, #12]
 8008b62:	46b4      	mov	ip, r6
 8008b64:	d19c      	bne.n	8008aa0 <_vfiprintf_r+0x314>
 8008b66:	f018 0210 	ands.w	r2, r8, #16
 8008b6a:	f040 82f7 	bne.w	800915c <_vfiprintf_r+0x9d0>
 8008b6e:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8008b72:	f000 82f3 	beq.w	800915c <_vfiprintf_r+0x9d0>
 8008b76:	9904      	ldr	r1, [sp, #16]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	460a      	mov	r2, r1
 8008b7c:	3204      	adds	r2, #4
 8008b7e:	880e      	ldrh	r6, [r1, #0]
 8008b80:	9204      	str	r2, [sp, #16]
 8008b82:	2700      	movs	r7, #0
 8008b84:	e705      	b.n	8008992 <_vfiprintf_r+0x206>
 8008b86:	f048 0810 	orr.w	r8, r8, #16
 8008b8a:	f018 0f20 	tst.w	r8, #32
 8008b8e:	9503      	str	r5, [sp, #12]
 8008b90:	46b4      	mov	ip, r6
 8008b92:	f47f aef4 	bne.w	800897e <_vfiprintf_r+0x1f2>
 8008b96:	9a04      	ldr	r2, [sp, #16]
 8008b98:	f018 0f10 	tst.w	r8, #16
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	f040 82e4 	bne.w	800916a <_vfiprintf_r+0x9de>
 8008ba2:	f018 0f40 	tst.w	r8, #64	; 0x40
 8008ba6:	f000 82e0 	beq.w	800916a <_vfiprintf_r+0x9de>
 8008baa:	8816      	ldrh	r6, [r2, #0]
 8008bac:	3204      	adds	r2, #4
 8008bae:	2700      	movs	r7, #0
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	9204      	str	r2, [sp, #16]
 8008bb4:	e6ed      	b.n	8008992 <_vfiprintf_r+0x206>
 8008bb6:	4a63      	ldr	r2, [pc, #396]	; (8008d44 <_vfiprintf_r+0x5b8>)
 8008bb8:	9503      	str	r5, [sp, #12]
 8008bba:	f018 0f20 	tst.w	r8, #32
 8008bbe:	46b4      	mov	ip, r6
 8008bc0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8008bc4:	9209      	str	r2, [sp, #36]	; 0x24
 8008bc6:	f000 8090 	beq.w	8008cea <_vfiprintf_r+0x55e>
 8008bca:	9a04      	ldr	r2, [sp, #16]
 8008bcc:	3207      	adds	r2, #7
 8008bce:	f022 0207 	bic.w	r2, r2, #7
 8008bd2:	e9d2 6700 	ldrd	r6, r7, [r2]
 8008bd6:	f102 0108 	add.w	r1, r2, #8
 8008bda:	9104      	str	r1, [sp, #16]
 8008bdc:	f018 0f01 	tst.w	r8, #1
 8008be0:	f000 8290 	beq.w	8009104 <_vfiprintf_r+0x978>
 8008be4:	ea56 0207 	orrs.w	r2, r6, r7
 8008be8:	f000 828c 	beq.w	8009104 <_vfiprintf_r+0x978>
 8008bec:	2230      	movs	r2, #48	; 0x30
 8008bee:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8008bf2:	f048 0802 	orr.w	r8, r8, #2
 8008bf6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	e6c9      	b.n	8008992 <_vfiprintf_r+0x206>
 8008bfe:	9a04      	ldr	r2, [sp, #16]
 8008c00:	9503      	str	r5, [sp, #12]
 8008c02:	6813      	ldr	r3, [r2, #0]
 8008c04:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8008c08:	4613      	mov	r3, r2
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	2601      	movs	r6, #1
 8008c0e:	f04f 0100 	mov.w	r1, #0
 8008c12:	9304      	str	r3, [sp, #16]
 8008c14:	ab10      	add	r3, sp, #64	; 0x40
 8008c16:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8008c1a:	46b1      	mov	r9, r6
 8008c1c:	9307      	str	r3, [sp, #28]
 8008c1e:	f04f 0c00 	mov.w	ip, #0
 8008c22:	e6eb      	b.n	80089fc <_vfiprintf_r+0x270>
 8008c24:	f018 0f20 	tst.w	r8, #32
 8008c28:	9503      	str	r5, [sp, #12]
 8008c2a:	46b4      	mov	ip, r6
 8008c2c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8008c30:	f47f af65 	bne.w	8008afe <_vfiprintf_r+0x372>
 8008c34:	f018 0f10 	tst.w	r8, #16
 8008c38:	f040 82a2 	bne.w	8009180 <_vfiprintf_r+0x9f4>
 8008c3c:	f018 0f40 	tst.w	r8, #64	; 0x40
 8008c40:	f000 829e 	beq.w	8009180 <_vfiprintf_r+0x9f4>
 8008c44:	9904      	ldr	r1, [sp, #16]
 8008c46:	f9b1 6000 	ldrsh.w	r6, [r1]
 8008c4a:	3104      	adds	r1, #4
 8008c4c:	17f7      	asrs	r7, r6, #31
 8008c4e:	4632      	mov	r2, r6
 8008c50:	463b      	mov	r3, r7
 8008c52:	9104      	str	r1, [sp, #16]
 8008c54:	e75d      	b.n	8008b12 <_vfiprintf_r+0x386>
 8008c56:	9904      	ldr	r1, [sp, #16]
 8008c58:	9503      	str	r5, [sp, #12]
 8008c5a:	2330      	movs	r3, #48	; 0x30
 8008c5c:	460a      	mov	r2, r1
 8008c5e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8008c62:	2378      	movs	r3, #120	; 0x78
 8008c64:	3204      	adds	r2, #4
 8008c66:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8008c6a:	4b37      	ldr	r3, [pc, #220]	; (8008d48 <_vfiprintf_r+0x5bc>)
 8008c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c6e:	46b4      	mov	ip, r6
 8008c70:	f048 0802 	orr.w	r8, r8, #2
 8008c74:	680e      	ldr	r6, [r1, #0]
 8008c76:	9204      	str	r2, [sp, #16]
 8008c78:	2700      	movs	r7, #0
 8008c7a:	2302      	movs	r3, #2
 8008c7c:	e689      	b.n	8008992 <_vfiprintf_r+0x206>
 8008c7e:	f048 0820 	orr.w	r8, r8, #32
 8008c82:	f89b 3000 	ldrb.w	r3, [fp]
 8008c86:	4658      	mov	r0, fp
 8008c88:	e5e9      	b.n	800885e <_vfiprintf_r+0xd2>
 8008c8a:	9a04      	ldr	r2, [sp, #16]
 8008c8c:	9503      	str	r5, [sp, #12]
 8008c8e:	6813      	ldr	r3, [r2, #0]
 8008c90:	9307      	str	r3, [sp, #28]
 8008c92:	f04f 0100 	mov.w	r1, #0
 8008c96:	46b4      	mov	ip, r6
 8008c98:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8008c9c:	1d16      	adds	r6, r2, #4
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f000 8350 	beq.w	8009344 <_vfiprintf_r+0xbb8>
 8008ca4:	f1bc 0f00 	cmp.w	ip, #0
 8008ca8:	f2c0 832a 	blt.w	8009300 <_vfiprintf_r+0xb74>
 8008cac:	9d07      	ldr	r5, [sp, #28]
 8008cae:	f8cd c010 	str.w	ip, [sp, #16]
 8008cb2:	4662      	mov	r2, ip
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	f7fe fbb0 	bl	800741c <memchr>
 8008cbc:	f8dd c010 	ldr.w	ip, [sp, #16]
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	f000 8350 	beq.w	8009366 <_vfiprintf_r+0xbda>
 8008cc6:	ebc5 0900 	rsb	r9, r5, r0
 8008cca:	9604      	str	r6, [sp, #16]
 8008ccc:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 8008cd0:	f04f 0c00 	mov.w	ip, #0
 8008cd4:	e68c      	b.n	80089f0 <_vfiprintf_r+0x264>
 8008cd6:	4a1c      	ldr	r2, [pc, #112]	; (8008d48 <_vfiprintf_r+0x5bc>)
 8008cd8:	9503      	str	r5, [sp, #12]
 8008cda:	f018 0f20 	tst.w	r8, #32
 8008cde:	46b4      	mov	ip, r6
 8008ce0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ce2:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8008ce6:	f47f af70 	bne.w	8008bca <_vfiprintf_r+0x43e>
 8008cea:	9904      	ldr	r1, [sp, #16]
 8008cec:	f018 0f10 	tst.w	r8, #16
 8008cf0:	460a      	mov	r2, r1
 8008cf2:	f040 8240 	bne.w	8009176 <_vfiprintf_r+0x9ea>
 8008cf6:	f018 0f40 	tst.w	r8, #64	; 0x40
 8008cfa:	f000 823c 	beq.w	8009176 <_vfiprintf_r+0x9ea>
 8008cfe:	3204      	adds	r2, #4
 8008d00:	880e      	ldrh	r6, [r1, #0]
 8008d02:	9204      	str	r2, [sp, #16]
 8008d04:	2700      	movs	r7, #0
 8008d06:	e769      	b.n	8008bdc <_vfiprintf_r+0x450>
 8008d08:	f89b 3000 	ldrb.w	r3, [fp]
 8008d0c:	2b6c      	cmp	r3, #108	; 0x6c
 8008d0e:	f000 82ea 	beq.w	80092e6 <_vfiprintf_r+0xb5a>
 8008d12:	f048 0810 	orr.w	r8, r8, #16
 8008d16:	4658      	mov	r0, fp
 8008d18:	e5a1      	b.n	800885e <_vfiprintf_r+0xd2>
 8008d1a:	9a04      	ldr	r2, [sp, #16]
 8008d1c:	6815      	ldr	r5, [r2, #0]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	2d00      	cmp	r5, #0
 8008d22:	f103 0304 	add.w	r3, r3, #4
 8008d26:	f2c0 82e6 	blt.w	80092f6 <_vfiprintf_r+0xb6a>
 8008d2a:	9304      	str	r3, [sp, #16]
 8008d2c:	f89b 3000 	ldrb.w	r3, [fp]
 8008d30:	4658      	mov	r0, fp
 8008d32:	e594      	b.n	800885e <_vfiprintf_r+0xd2>
 8008d34:	f89b 3000 	ldrb.w	r3, [fp]
 8008d38:	4658      	mov	r0, fp
 8008d3a:	212b      	movs	r1, #43	; 0x2b
 8008d3c:	e58f      	b.n	800885e <_vfiprintf_r+0xd2>
 8008d3e:	bf00      	nop
 8008d40:	0800ae80 	.word	0x0800ae80
 8008d44:	0800acec 	.word	0x0800acec
 8008d48:	0800ad00 	.word	0x0800ad00
 8008d4c:	f89b 3000 	ldrb.w	r3, [fp]
 8008d50:	2b2a      	cmp	r3, #42	; 0x2a
 8008d52:	f10b 0001 	add.w	r0, fp, #1
 8008d56:	f000 830f 	beq.w	8009378 <_vfiprintf_r+0xbec>
 8008d5a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008d5e:	2a09      	cmp	r2, #9
 8008d60:	4683      	mov	fp, r0
 8008d62:	f04f 0600 	mov.w	r6, #0
 8008d66:	f63f ad7c 	bhi.w	8008862 <_vfiprintf_r+0xd6>
 8008d6a:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8008d6e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8008d72:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 8008d76:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008d7a:	2a09      	cmp	r2, #9
 8008d7c:	d9f5      	bls.n	8008d6a <_vfiprintf_r+0x5de>
 8008d7e:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 8008d82:	e56e      	b.n	8008862 <_vfiprintf_r+0xd6>
 8008d84:	f018 0f20 	tst.w	r8, #32
 8008d88:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8008d8c:	f000 8283 	beq.w	8009296 <_vfiprintf_r+0xb0a>
 8008d90:	9a04      	ldr	r2, [sp, #16]
 8008d92:	9902      	ldr	r1, [sp, #8]
 8008d94:	6813      	ldr	r3, [r2, #0]
 8008d96:	17cf      	asrs	r7, r1, #31
 8008d98:	4608      	mov	r0, r1
 8008d9a:	3204      	adds	r2, #4
 8008d9c:	4639      	mov	r1, r7
 8008d9e:	9204      	str	r2, [sp, #16]
 8008da0:	e9c3 0100 	strd	r0, r1, [r3]
 8008da4:	e524      	b.n	80087f0 <_vfiprintf_r+0x64>
 8008da6:	4658      	mov	r0, fp
 8008da8:	f89b 3000 	ldrb.w	r3, [fp]
 8008dac:	2900      	cmp	r1, #0
 8008dae:	f47f ad56 	bne.w	800885e <_vfiprintf_r+0xd2>
 8008db2:	2120      	movs	r1, #32
 8008db4:	e553      	b.n	800885e <_vfiprintf_r+0xd2>
 8008db6:	f048 0801 	orr.w	r8, r8, #1
 8008dba:	4658      	mov	r0, fp
 8008dbc:	f89b 3000 	ldrb.w	r3, [fp]
 8008dc0:	e54d      	b.n	800885e <_vfiprintf_r+0xd2>
 8008dc2:	9503      	str	r5, [sp, #12]
 8008dc4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f000 809c 	beq.w	8008f06 <_vfiprintf_r+0x77a>
 8008dce:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8008dd2:	f04f 0300 	mov.w	r3, #0
 8008dd6:	2601      	movs	r6, #1
 8008dd8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8008ddc:	ab10      	add	r3, sp, #64	; 0x40
 8008dde:	46b1      	mov	r9, r6
 8008de0:	9307      	str	r3, [sp, #28]
 8008de2:	e71c      	b.n	8008c1e <_vfiprintf_r+0x492>
 8008de4:	9801      	ldr	r0, [sp, #4]
 8008de6:	9900      	ldr	r1, [sp, #0]
 8008de8:	9308      	str	r3, [sp, #32]
 8008dea:	aa0d      	add	r2, sp, #52	; 0x34
 8008dec:	f7ff fc86 	bl	80086fc <__sprint_r.part.0>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	f040 808f 	bne.w	8008f14 <_vfiprintf_r+0x788>
 8008df6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008df8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008dfa:	9b08      	ldr	r3, [sp, #32]
 8008dfc:	f101 0e01 	add.w	lr, r1, #1
 8008e00:	46d4      	mov	ip, sl
 8008e02:	e61c      	b.n	8008a3e <_vfiprintf_r+0x2b2>
 8008e04:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008e06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e08:	1c48      	adds	r0, r1, #1
 8008e0a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8008e0e:	b16b      	cbz	r3, 8008e2c <_vfiprintf_r+0x6a0>
 8008e10:	3201      	adds	r2, #1
 8008e12:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8008e16:	2101      	movs	r1, #1
 8008e18:	2807      	cmp	r0, #7
 8008e1a:	920f      	str	r2, [sp, #60]	; 0x3c
 8008e1c:	900e      	str	r0, [sp, #56]	; 0x38
 8008e1e:	6023      	str	r3, [r4, #0]
 8008e20:	6061      	str	r1, [r4, #4]
 8008e22:	f300 8134 	bgt.w	800908e <_vfiprintf_r+0x902>
 8008e26:	4601      	mov	r1, r0
 8008e28:	3408      	adds	r4, #8
 8008e2a:	3001      	adds	r0, #1
 8008e2c:	9b05      	ldr	r3, [sp, #20]
 8008e2e:	b163      	cbz	r3, 8008e4a <_vfiprintf_r+0x6be>
 8008e30:	3202      	adds	r2, #2
 8008e32:	a90c      	add	r1, sp, #48	; 0x30
 8008e34:	2302      	movs	r3, #2
 8008e36:	2807      	cmp	r0, #7
 8008e38:	920f      	str	r2, [sp, #60]	; 0x3c
 8008e3a:	900e      	str	r0, [sp, #56]	; 0x38
 8008e3c:	e884 000a 	stmia.w	r4, {r1, r3}
 8008e40:	f300 8134 	bgt.w	80090ac <_vfiprintf_r+0x920>
 8008e44:	4601      	mov	r1, r0
 8008e46:	3408      	adds	r4, #8
 8008e48:	3001      	adds	r0, #1
 8008e4a:	9b06      	ldr	r3, [sp, #24]
 8008e4c:	2b80      	cmp	r3, #128	; 0x80
 8008e4e:	f000 80d4 	beq.w	8008ffa <_vfiprintf_r+0x86e>
 8008e52:	ebc9 070c 	rsb	r7, r9, ip
 8008e56:	2f00      	cmp	r7, #0
 8008e58:	dd2b      	ble.n	8008eb2 <_vfiprintf_r+0x726>
 8008e5a:	2f10      	cmp	r7, #16
 8008e5c:	4daa      	ldr	r5, [pc, #680]	; (8009108 <_vfiprintf_r+0x97c>)
 8008e5e:	dd1f      	ble.n	8008ea0 <_vfiprintf_r+0x714>
 8008e60:	46a6      	mov	lr, r4
 8008e62:	2310      	movs	r3, #16
 8008e64:	9c01      	ldr	r4, [sp, #4]
 8008e66:	e007      	b.n	8008e78 <_vfiprintf_r+0x6ec>
 8008e68:	f101 0c02 	add.w	ip, r1, #2
 8008e6c:	f10e 0e08 	add.w	lr, lr, #8
 8008e70:	4601      	mov	r1, r0
 8008e72:	3f10      	subs	r7, #16
 8008e74:	2f10      	cmp	r7, #16
 8008e76:	dd11      	ble.n	8008e9c <_vfiprintf_r+0x710>
 8008e78:	1c48      	adds	r0, r1, #1
 8008e7a:	3210      	adds	r2, #16
 8008e7c:	2807      	cmp	r0, #7
 8008e7e:	920f      	str	r2, [sp, #60]	; 0x3c
 8008e80:	f8ce 5000 	str.w	r5, [lr]
 8008e84:	f8ce 3004 	str.w	r3, [lr, #4]
 8008e88:	900e      	str	r0, [sp, #56]	; 0x38
 8008e8a:	dded      	ble.n	8008e68 <_vfiprintf_r+0x6dc>
 8008e8c:	bb6a      	cbnz	r2, 8008eea <_vfiprintf_r+0x75e>
 8008e8e:	3f10      	subs	r7, #16
 8008e90:	2f10      	cmp	r7, #16
 8008e92:	f04f 0c01 	mov.w	ip, #1
 8008e96:	4611      	mov	r1, r2
 8008e98:	46d6      	mov	lr, sl
 8008e9a:	dced      	bgt.n	8008e78 <_vfiprintf_r+0x6ec>
 8008e9c:	4674      	mov	r4, lr
 8008e9e:	4660      	mov	r0, ip
 8008ea0:	443a      	add	r2, r7
 8008ea2:	2807      	cmp	r0, #7
 8008ea4:	920f      	str	r2, [sp, #60]	; 0x3c
 8008ea6:	e884 00a0 	stmia.w	r4, {r5, r7}
 8008eaa:	900e      	str	r0, [sp, #56]	; 0x38
 8008eac:	dc3b      	bgt.n	8008f26 <_vfiprintf_r+0x79a>
 8008eae:	3408      	adds	r4, #8
 8008eb0:	3001      	adds	r0, #1
 8008eb2:	eb02 0309 	add.w	r3, r2, r9
 8008eb6:	9a07      	ldr	r2, [sp, #28]
 8008eb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008eba:	2807      	cmp	r0, #7
 8008ebc:	e884 0204 	stmia.w	r4, {r2, r9}
 8008ec0:	900e      	str	r0, [sp, #56]	; 0x38
 8008ec2:	dd3d      	ble.n	8008f40 <_vfiprintf_r+0x7b4>
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f040 813e 	bne.w	8009146 <_vfiprintf_r+0x9ba>
 8008eca:	f018 0f04 	tst.w	r8, #4
 8008ece:	930e      	str	r3, [sp, #56]	; 0x38
 8008ed0:	f040 812f 	bne.w	8009132 <_vfiprintf_r+0x9a6>
 8008ed4:	9b02      	ldr	r3, [sp, #8]
 8008ed6:	9a03      	ldr	r2, [sp, #12]
 8008ed8:	4296      	cmp	r6, r2
 8008eda:	bfac      	ite	ge
 8008edc:	199b      	addge	r3, r3, r6
 8008ede:	189b      	addlt	r3, r3, r2
 8008ee0:	9302      	str	r3, [sp, #8]
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ee6:	4654      	mov	r4, sl
 8008ee8:	e482      	b.n	80087f0 <_vfiprintf_r+0x64>
 8008eea:	4620      	mov	r0, r4
 8008eec:	9900      	ldr	r1, [sp, #0]
 8008eee:	9305      	str	r3, [sp, #20]
 8008ef0:	aa0d      	add	r2, sp, #52	; 0x34
 8008ef2:	f7ff fc03 	bl	80086fc <__sprint_r.part.0>
 8008ef6:	b968      	cbnz	r0, 8008f14 <_vfiprintf_r+0x788>
 8008ef8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008efa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008efc:	9b05      	ldr	r3, [sp, #20]
 8008efe:	f101 0c01 	add.w	ip, r1, #1
 8008f02:	46d6      	mov	lr, sl
 8008f04:	e7b5      	b.n	8008e72 <_vfiprintf_r+0x6e6>
 8008f06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f08:	b123      	cbz	r3, 8008f14 <_vfiprintf_r+0x788>
 8008f0a:	9801      	ldr	r0, [sp, #4]
 8008f0c:	9900      	ldr	r1, [sp, #0]
 8008f0e:	aa0d      	add	r2, sp, #52	; 0x34
 8008f10:	f7ff fbf4 	bl	80086fc <__sprint_r.part.0>
 8008f14:	9b00      	ldr	r3, [sp, #0]
 8008f16:	899b      	ldrh	r3, [r3, #12]
 8008f18:	065b      	lsls	r3, r3, #25
 8008f1a:	f53f ad22 	bmi.w	8008962 <_vfiprintf_r+0x1d6>
 8008f1e:	9802      	ldr	r0, [sp, #8]
 8008f20:	b02b      	add	sp, #172	; 0xac
 8008f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f26:	2a00      	cmp	r2, #0
 8008f28:	f040 8191 	bne.w	800924e <_vfiprintf_r+0xac2>
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	9907      	ldr	r1, [sp, #28]
 8008f30:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 8008f34:	464b      	mov	r3, r9
 8008f36:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8008f3a:	911a      	str	r1, [sp, #104]	; 0x68
 8008f3c:	920e      	str	r2, [sp, #56]	; 0x38
 8008f3e:	4654      	mov	r4, sl
 8008f40:	f104 0208 	add.w	r2, r4, #8
 8008f44:	f018 0f04 	tst.w	r8, #4
 8008f48:	d039      	beq.n	8008fbe <_vfiprintf_r+0x832>
 8008f4a:	9903      	ldr	r1, [sp, #12]
 8008f4c:	1b8d      	subs	r5, r1, r6
 8008f4e:	2d00      	cmp	r5, #0
 8008f50:	dd35      	ble.n	8008fbe <_vfiprintf_r+0x832>
 8008f52:	2d10      	cmp	r5, #16
 8008f54:	f340 8202 	ble.w	800935c <_vfiprintf_r+0xbd0>
 8008f58:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008f5a:	4f6c      	ldr	r7, [pc, #432]	; (800910c <_vfiprintf_r+0x980>)
 8008f5c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008f60:	f8dd 9000 	ldr.w	r9, [sp]
 8008f64:	2410      	movs	r4, #16
 8008f66:	e006      	b.n	8008f76 <_vfiprintf_r+0x7ea>
 8008f68:	f100 0e02 	add.w	lr, r0, #2
 8008f6c:	3208      	adds	r2, #8
 8008f6e:	4608      	mov	r0, r1
 8008f70:	3d10      	subs	r5, #16
 8008f72:	2d10      	cmp	r5, #16
 8008f74:	dd10      	ble.n	8008f98 <_vfiprintf_r+0x80c>
 8008f76:	1c41      	adds	r1, r0, #1
 8008f78:	3310      	adds	r3, #16
 8008f7a:	2907      	cmp	r1, #7
 8008f7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f7e:	6017      	str	r7, [r2, #0]
 8008f80:	6054      	str	r4, [r2, #4]
 8008f82:	910e      	str	r1, [sp, #56]	; 0x38
 8008f84:	ddf0      	ble.n	8008f68 <_vfiprintf_r+0x7dc>
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d12a      	bne.n	8008fe0 <_vfiprintf_r+0x854>
 8008f8a:	3d10      	subs	r5, #16
 8008f8c:	2d10      	cmp	r5, #16
 8008f8e:	f04f 0e01 	mov.w	lr, #1
 8008f92:	4618      	mov	r0, r3
 8008f94:	4652      	mov	r2, sl
 8008f96:	dcee      	bgt.n	8008f76 <_vfiprintf_r+0x7ea>
 8008f98:	442b      	add	r3, r5
 8008f9a:	f1be 0f07 	cmp.w	lr, #7
 8008f9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fa0:	6017      	str	r7, [r2, #0]
 8008fa2:	6055      	str	r5, [r2, #4]
 8008fa4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8008fa8:	dd09      	ble.n	8008fbe <_vfiprintf_r+0x832>
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d092      	beq.n	8008ed4 <_vfiprintf_r+0x748>
 8008fae:	9801      	ldr	r0, [sp, #4]
 8008fb0:	9900      	ldr	r1, [sp, #0]
 8008fb2:	aa0d      	add	r2, sp, #52	; 0x34
 8008fb4:	f7ff fba2 	bl	80086fc <__sprint_r.part.0>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	d1ab      	bne.n	8008f14 <_vfiprintf_r+0x788>
 8008fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fbe:	9a02      	ldr	r2, [sp, #8]
 8008fc0:	9903      	ldr	r1, [sp, #12]
 8008fc2:	428e      	cmp	r6, r1
 8008fc4:	bfac      	ite	ge
 8008fc6:	1992      	addge	r2, r2, r6
 8008fc8:	1852      	addlt	r2, r2, r1
 8008fca:	9202      	str	r2, [sp, #8]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d088      	beq.n	8008ee2 <_vfiprintf_r+0x756>
 8008fd0:	9801      	ldr	r0, [sp, #4]
 8008fd2:	9900      	ldr	r1, [sp, #0]
 8008fd4:	aa0d      	add	r2, sp, #52	; 0x34
 8008fd6:	f7ff fb91 	bl	80086fc <__sprint_r.part.0>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d081      	beq.n	8008ee2 <_vfiprintf_r+0x756>
 8008fde:	e799      	b.n	8008f14 <_vfiprintf_r+0x788>
 8008fe0:	4640      	mov	r0, r8
 8008fe2:	4649      	mov	r1, r9
 8008fe4:	aa0d      	add	r2, sp, #52	; 0x34
 8008fe6:	f7ff fb89 	bl	80086fc <__sprint_r.part.0>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d192      	bne.n	8008f14 <_vfiprintf_r+0x788>
 8008fee:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008ff0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ff2:	f100 0e01 	add.w	lr, r0, #1
 8008ff6:	4652      	mov	r2, sl
 8008ff8:	e7ba      	b.n	8008f70 <_vfiprintf_r+0x7e4>
 8008ffa:	9b03      	ldr	r3, [sp, #12]
 8008ffc:	1b9f      	subs	r7, r3, r6
 8008ffe:	2f00      	cmp	r7, #0
 8009000:	f77f af27 	ble.w	8008e52 <_vfiprintf_r+0x6c6>
 8009004:	2f10      	cmp	r7, #16
 8009006:	4d40      	ldr	r5, [pc, #256]	; (8009108 <_vfiprintf_r+0x97c>)
 8009008:	f340 81b4 	ble.w	8009374 <_vfiprintf_r+0xbe8>
 800900c:	4620      	mov	r0, r4
 800900e:	2310      	movs	r3, #16
 8009010:	4664      	mov	r4, ip
 8009012:	4684      	mov	ip, r0
 8009014:	e007      	b.n	8009026 <_vfiprintf_r+0x89a>
 8009016:	f101 0e02 	add.w	lr, r1, #2
 800901a:	f10c 0c08 	add.w	ip, ip, #8
 800901e:	4601      	mov	r1, r0
 8009020:	3f10      	subs	r7, #16
 8009022:	2f10      	cmp	r7, #16
 8009024:	dd11      	ble.n	800904a <_vfiprintf_r+0x8be>
 8009026:	1c48      	adds	r0, r1, #1
 8009028:	3210      	adds	r2, #16
 800902a:	2807      	cmp	r0, #7
 800902c:	920f      	str	r2, [sp, #60]	; 0x3c
 800902e:	f8cc 5000 	str.w	r5, [ip]
 8009032:	f8cc 3004 	str.w	r3, [ip, #4]
 8009036:	900e      	str	r0, [sp, #56]	; 0x38
 8009038:	dded      	ble.n	8009016 <_vfiprintf_r+0x88a>
 800903a:	b9c2      	cbnz	r2, 800906e <_vfiprintf_r+0x8e2>
 800903c:	3f10      	subs	r7, #16
 800903e:	2f10      	cmp	r7, #16
 8009040:	f04f 0e01 	mov.w	lr, #1
 8009044:	4611      	mov	r1, r2
 8009046:	46d4      	mov	ip, sl
 8009048:	dced      	bgt.n	8009026 <_vfiprintf_r+0x89a>
 800904a:	4663      	mov	r3, ip
 800904c:	46a4      	mov	ip, r4
 800904e:	461c      	mov	r4, r3
 8009050:	443a      	add	r2, r7
 8009052:	f1be 0f07 	cmp.w	lr, #7
 8009056:	920f      	str	r2, [sp, #60]	; 0x3c
 8009058:	e884 00a0 	stmia.w	r4, {r5, r7}
 800905c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8009060:	f300 80ef 	bgt.w	8009242 <_vfiprintf_r+0xab6>
 8009064:	3408      	adds	r4, #8
 8009066:	f10e 0001 	add.w	r0, lr, #1
 800906a:	4671      	mov	r1, lr
 800906c:	e6f1      	b.n	8008e52 <_vfiprintf_r+0x6c6>
 800906e:	9801      	ldr	r0, [sp, #4]
 8009070:	9900      	ldr	r1, [sp, #0]
 8009072:	9305      	str	r3, [sp, #20]
 8009074:	aa0d      	add	r2, sp, #52	; 0x34
 8009076:	f7ff fb41 	bl	80086fc <__sprint_r.part.0>
 800907a:	2800      	cmp	r0, #0
 800907c:	f47f af4a 	bne.w	8008f14 <_vfiprintf_r+0x788>
 8009080:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009082:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009084:	9b05      	ldr	r3, [sp, #20]
 8009086:	f101 0e01 	add.w	lr, r1, #1
 800908a:	46d4      	mov	ip, sl
 800908c:	e7c8      	b.n	8009020 <_vfiprintf_r+0x894>
 800908e:	2a00      	cmp	r2, #0
 8009090:	f040 80c6 	bne.w	8009220 <_vfiprintf_r+0xa94>
 8009094:	9b05      	ldr	r3, [sp, #20]
 8009096:	2b00      	cmp	r3, #0
 8009098:	f000 8086 	beq.w	80091a8 <_vfiprintf_r+0xa1c>
 800909c:	aa0c      	add	r2, sp, #48	; 0x30
 800909e:	2302      	movs	r3, #2
 80090a0:	921a      	str	r2, [sp, #104]	; 0x68
 80090a2:	4608      	mov	r0, r1
 80090a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80090a6:	461a      	mov	r2, r3
 80090a8:	4654      	mov	r4, sl
 80090aa:	e6cb      	b.n	8008e44 <_vfiprintf_r+0x6b8>
 80090ac:	2a00      	cmp	r2, #0
 80090ae:	f040 80a6 	bne.w	80091fe <_vfiprintf_r+0xa72>
 80090b2:	2001      	movs	r0, #1
 80090b4:	4611      	mov	r1, r2
 80090b6:	4654      	mov	r4, sl
 80090b8:	e6c7      	b.n	8008e4a <_vfiprintf_r+0x6be>
 80090ba:	bb03      	cbnz	r3, 80090fe <_vfiprintf_r+0x972>
 80090bc:	f018 0f01 	tst.w	r8, #1
 80090c0:	d01d      	beq.n	80090fe <_vfiprintf_r+0x972>
 80090c2:	ab2a      	add	r3, sp, #168	; 0xa8
 80090c4:	2230      	movs	r2, #48	; 0x30
 80090c6:	f803 2d41 	strb.w	r2, [r3, #-65]!
 80090ca:	ebc3 090a 	rsb	r9, r3, sl
 80090ce:	9307      	str	r3, [sp, #28]
 80090d0:	e48e      	b.n	80089f0 <_vfiprintf_r+0x264>
 80090d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090d4:	46d1      	mov	r9, sl
 80090d6:	0933      	lsrs	r3, r6, #4
 80090d8:	f006 010f 	and.w	r1, r6, #15
 80090dc:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80090e0:	093a      	lsrs	r2, r7, #4
 80090e2:	461e      	mov	r6, r3
 80090e4:	4617      	mov	r7, r2
 80090e6:	5c43      	ldrb	r3, [r0, r1]
 80090e8:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80090ec:	ea56 0307 	orrs.w	r3, r6, r7
 80090f0:	d1f1      	bne.n	80090d6 <_vfiprintf_r+0x94a>
 80090f2:	464b      	mov	r3, r9
 80090f4:	f8cd 901c 	str.w	r9, [sp, #28]
 80090f8:	ebc3 090a 	rsb	r9, r3, sl
 80090fc:	e478      	b.n	80089f0 <_vfiprintf_r+0x264>
 80090fe:	f8cd a01c 	str.w	sl, [sp, #28]
 8009102:	e475      	b.n	80089f0 <_vfiprintf_r+0x264>
 8009104:	2302      	movs	r3, #2
 8009106:	e444      	b.n	8008992 <_vfiprintf_r+0x206>
 8009108:	0800ae70 	.word	0x0800ae70
 800910c:	0800ae80 	.word	0x0800ae80
 8009110:	2a00      	cmp	r2, #0
 8009112:	f040 80d7 	bne.w	80092c4 <_vfiprintf_r+0xb38>
 8009116:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800911a:	2b00      	cmp	r3, #0
 800911c:	f000 80ae 	beq.w	800927c <_vfiprintf_r+0xaf0>
 8009120:	2301      	movs	r3, #1
 8009122:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8009126:	4618      	mov	r0, r3
 8009128:	931b      	str	r3, [sp, #108]	; 0x6c
 800912a:	461a      	mov	r2, r3
 800912c:	911a      	str	r1, [sp, #104]	; 0x68
 800912e:	4654      	mov	r4, sl
 8009130:	e679      	b.n	8008e26 <_vfiprintf_r+0x69a>
 8009132:	9a03      	ldr	r2, [sp, #12]
 8009134:	1b95      	subs	r5, r2, r6
 8009136:	2d00      	cmp	r5, #0
 8009138:	4652      	mov	r2, sl
 800913a:	f73f af0a 	bgt.w	8008f52 <_vfiprintf_r+0x7c6>
 800913e:	e6c9      	b.n	8008ed4 <_vfiprintf_r+0x748>
 8009140:	465d      	mov	r5, fp
 8009142:	f7ff bb7c 	b.w	800883e <_vfiprintf_r+0xb2>
 8009146:	9801      	ldr	r0, [sp, #4]
 8009148:	9900      	ldr	r1, [sp, #0]
 800914a:	aa0d      	add	r2, sp, #52	; 0x34
 800914c:	f7ff fad6 	bl	80086fc <__sprint_r.part.0>
 8009150:	2800      	cmp	r0, #0
 8009152:	f47f aedf 	bne.w	8008f14 <_vfiprintf_r+0x788>
 8009156:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009158:	4652      	mov	r2, sl
 800915a:	e6f3      	b.n	8008f44 <_vfiprintf_r+0x7b8>
 800915c:	9904      	ldr	r1, [sp, #16]
 800915e:	460a      	mov	r2, r1
 8009160:	3204      	adds	r2, #4
 8009162:	680e      	ldr	r6, [r1, #0]
 8009164:	9204      	str	r2, [sp, #16]
 8009166:	2700      	movs	r7, #0
 8009168:	e413      	b.n	8008992 <_vfiprintf_r+0x206>
 800916a:	3204      	adds	r2, #4
 800916c:	681e      	ldr	r6, [r3, #0]
 800916e:	9204      	str	r2, [sp, #16]
 8009170:	2301      	movs	r3, #1
 8009172:	2700      	movs	r7, #0
 8009174:	e40d      	b.n	8008992 <_vfiprintf_r+0x206>
 8009176:	6816      	ldr	r6, [r2, #0]
 8009178:	3204      	adds	r2, #4
 800917a:	9204      	str	r2, [sp, #16]
 800917c:	2700      	movs	r7, #0
 800917e:	e52d      	b.n	8008bdc <_vfiprintf_r+0x450>
 8009180:	9a04      	ldr	r2, [sp, #16]
 8009182:	6816      	ldr	r6, [r2, #0]
 8009184:	4613      	mov	r3, r2
 8009186:	3304      	adds	r3, #4
 8009188:	17f7      	asrs	r7, r6, #31
 800918a:	9304      	str	r3, [sp, #16]
 800918c:	4632      	mov	r2, r6
 800918e:	463b      	mov	r3, r7
 8009190:	e4bf      	b.n	8008b12 <_vfiprintf_r+0x386>
 8009192:	9801      	ldr	r0, [sp, #4]
 8009194:	9900      	ldr	r1, [sp, #0]
 8009196:	aa0d      	add	r2, sp, #52	; 0x34
 8009198:	f7ff fab0 	bl	80086fc <__sprint_r.part.0>
 800919c:	2800      	cmp	r0, #0
 800919e:	f47f aeb9 	bne.w	8008f14 <_vfiprintf_r+0x788>
 80091a2:	4654      	mov	r4, sl
 80091a4:	f7ff bbbe 	b.w	8008924 <_vfiprintf_r+0x198>
 80091a8:	4608      	mov	r0, r1
 80091aa:	4654      	mov	r4, sl
 80091ac:	4611      	mov	r1, r2
 80091ae:	e64c      	b.n	8008e4a <_vfiprintf_r+0x6be>
 80091b0:	46d1      	mov	r9, sl
 80091b2:	f8cd c014 	str.w	ip, [sp, #20]
 80091b6:	4630      	mov	r0, r6
 80091b8:	4639      	mov	r1, r7
 80091ba:	220a      	movs	r2, #10
 80091bc:	2300      	movs	r3, #0
 80091be:	f001 f897 	bl	800a2f0 <__aeabi_uldivmod>
 80091c2:	3230      	adds	r2, #48	; 0x30
 80091c4:	4630      	mov	r0, r6
 80091c6:	4639      	mov	r1, r7
 80091c8:	f809 2d01 	strb.w	r2, [r9, #-1]!
 80091cc:	2300      	movs	r3, #0
 80091ce:	220a      	movs	r2, #10
 80091d0:	f001 f88e 	bl	800a2f0 <__aeabi_uldivmod>
 80091d4:	4606      	mov	r6, r0
 80091d6:	460f      	mov	r7, r1
 80091d8:	ea56 0307 	orrs.w	r3, r6, r7
 80091dc:	d1eb      	bne.n	80091b6 <_vfiprintf_r+0xa2a>
 80091de:	f8dd c014 	ldr.w	ip, [sp, #20]
 80091e2:	e786      	b.n	80090f2 <_vfiprintf_r+0x966>
 80091e4:	2b30      	cmp	r3, #48	; 0x30
 80091e6:	9b07      	ldr	r3, [sp, #28]
 80091e8:	d086      	beq.n	80090f8 <_vfiprintf_r+0x96c>
 80091ea:	3b01      	subs	r3, #1
 80091ec:	461a      	mov	r2, r3
 80091ee:	9307      	str	r3, [sp, #28]
 80091f0:	2330      	movs	r3, #48	; 0x30
 80091f2:	ebc2 090a 	rsb	r9, r2, sl
 80091f6:	f801 3c01 	strb.w	r3, [r1, #-1]
 80091fa:	f7ff bbf9 	b.w	80089f0 <_vfiprintf_r+0x264>
 80091fe:	9801      	ldr	r0, [sp, #4]
 8009200:	9900      	ldr	r1, [sp, #0]
 8009202:	f8cd c014 	str.w	ip, [sp, #20]
 8009206:	aa0d      	add	r2, sp, #52	; 0x34
 8009208:	f7ff fa78 	bl	80086fc <__sprint_r.part.0>
 800920c:	2800      	cmp	r0, #0
 800920e:	f47f ae81 	bne.w	8008f14 <_vfiprintf_r+0x788>
 8009212:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009214:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009216:	f8dd c014 	ldr.w	ip, [sp, #20]
 800921a:	1c48      	adds	r0, r1, #1
 800921c:	4654      	mov	r4, sl
 800921e:	e614      	b.n	8008e4a <_vfiprintf_r+0x6be>
 8009220:	9801      	ldr	r0, [sp, #4]
 8009222:	9900      	ldr	r1, [sp, #0]
 8009224:	f8cd c020 	str.w	ip, [sp, #32]
 8009228:	aa0d      	add	r2, sp, #52	; 0x34
 800922a:	f7ff fa67 	bl	80086fc <__sprint_r.part.0>
 800922e:	2800      	cmp	r0, #0
 8009230:	f47f ae70 	bne.w	8008f14 <_vfiprintf_r+0x788>
 8009234:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009236:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009238:	f8dd c020 	ldr.w	ip, [sp, #32]
 800923c:	1c48      	adds	r0, r1, #1
 800923e:	4654      	mov	r4, sl
 8009240:	e5f4      	b.n	8008e2c <_vfiprintf_r+0x6a0>
 8009242:	2a00      	cmp	r2, #0
 8009244:	d167      	bne.n	8009316 <_vfiprintf_r+0xb8a>
 8009246:	2001      	movs	r0, #1
 8009248:	4611      	mov	r1, r2
 800924a:	4654      	mov	r4, sl
 800924c:	e601      	b.n	8008e52 <_vfiprintf_r+0x6c6>
 800924e:	9801      	ldr	r0, [sp, #4]
 8009250:	9900      	ldr	r1, [sp, #0]
 8009252:	aa0d      	add	r2, sp, #52	; 0x34
 8009254:	f7ff fa52 	bl	80086fc <__sprint_r.part.0>
 8009258:	2800      	cmp	r0, #0
 800925a:	f47f ae5b 	bne.w	8008f14 <_vfiprintf_r+0x788>
 800925e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009260:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009262:	3001      	adds	r0, #1
 8009264:	4654      	mov	r4, sl
 8009266:	e624      	b.n	8008eb2 <_vfiprintf_r+0x726>
 8009268:	252d      	movs	r5, #45	; 0x2d
 800926a:	4276      	negs	r6, r6
 800926c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8009270:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 8009274:	46e1      	mov	r9, ip
 8009276:	2301      	movs	r3, #1
 8009278:	f7ff bb91 	b.w	800899e <_vfiprintf_r+0x212>
 800927c:	9b05      	ldr	r3, [sp, #20]
 800927e:	4611      	mov	r1, r2
 8009280:	2001      	movs	r0, #1
 8009282:	4654      	mov	r4, sl
 8009284:	2b00      	cmp	r3, #0
 8009286:	f43f ade4 	beq.w	8008e52 <_vfiprintf_r+0x6c6>
 800928a:	aa0c      	add	r2, sp, #48	; 0x30
 800928c:	2302      	movs	r3, #2
 800928e:	e88a 000c 	stmia.w	sl, {r2, r3}
 8009292:	461a      	mov	r2, r3
 8009294:	e5d6      	b.n	8008e44 <_vfiprintf_r+0x6b8>
 8009296:	f018 0f10 	tst.w	r8, #16
 800929a:	d10b      	bne.n	80092b4 <_vfiprintf_r+0xb28>
 800929c:	f018 0f40 	tst.w	r8, #64	; 0x40
 80092a0:	d008      	beq.n	80092b4 <_vfiprintf_r+0xb28>
 80092a2:	9a04      	ldr	r2, [sp, #16]
 80092a4:	6813      	ldr	r3, [r2, #0]
 80092a6:	3204      	adds	r2, #4
 80092a8:	9204      	str	r2, [sp, #16]
 80092aa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80092ae:	801a      	strh	r2, [r3, #0]
 80092b0:	f7ff ba9e 	b.w	80087f0 <_vfiprintf_r+0x64>
 80092b4:	9a04      	ldr	r2, [sp, #16]
 80092b6:	6813      	ldr	r3, [r2, #0]
 80092b8:	3204      	adds	r2, #4
 80092ba:	9204      	str	r2, [sp, #16]
 80092bc:	9a02      	ldr	r2, [sp, #8]
 80092be:	601a      	str	r2, [r3, #0]
 80092c0:	f7ff ba96 	b.w	80087f0 <_vfiprintf_r+0x64>
 80092c4:	9801      	ldr	r0, [sp, #4]
 80092c6:	9900      	ldr	r1, [sp, #0]
 80092c8:	f8cd c020 	str.w	ip, [sp, #32]
 80092cc:	aa0d      	add	r2, sp, #52	; 0x34
 80092ce:	f7ff fa15 	bl	80086fc <__sprint_r.part.0>
 80092d2:	2800      	cmp	r0, #0
 80092d4:	f47f ae1e 	bne.w	8008f14 <_vfiprintf_r+0x788>
 80092d8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80092da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80092dc:	f8dd c020 	ldr.w	ip, [sp, #32]
 80092e0:	1c48      	adds	r0, r1, #1
 80092e2:	4654      	mov	r4, sl
 80092e4:	e591      	b.n	8008e0a <_vfiprintf_r+0x67e>
 80092e6:	f048 0820 	orr.w	r8, r8, #32
 80092ea:	f10b 0001 	add.w	r0, fp, #1
 80092ee:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80092f2:	f7ff bab4 	b.w	800885e <_vfiprintf_r+0xd2>
 80092f6:	426d      	negs	r5, r5
 80092f8:	9304      	str	r3, [sp, #16]
 80092fa:	4658      	mov	r0, fp
 80092fc:	f7ff bbc6 	b.w	8008a8c <_vfiprintf_r+0x300>
 8009300:	9807      	ldr	r0, [sp, #28]
 8009302:	9604      	str	r6, [sp, #16]
 8009304:	f7fa fd04 	bl	8003d10 <strlen>
 8009308:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 800930c:	4681      	mov	r9, r0
 800930e:	f04f 0c00 	mov.w	ip, #0
 8009312:	f7ff bb6d 	b.w	80089f0 <_vfiprintf_r+0x264>
 8009316:	9801      	ldr	r0, [sp, #4]
 8009318:	9900      	ldr	r1, [sp, #0]
 800931a:	f8cd c014 	str.w	ip, [sp, #20]
 800931e:	aa0d      	add	r2, sp, #52	; 0x34
 8009320:	f7ff f9ec 	bl	80086fc <__sprint_r.part.0>
 8009324:	2800      	cmp	r0, #0
 8009326:	f47f adf5 	bne.w	8008f14 <_vfiprintf_r+0x788>
 800932a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800932c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800932e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8009332:	1c48      	adds	r0, r1, #1
 8009334:	4654      	mov	r4, sl
 8009336:	e58c      	b.n	8008e52 <_vfiprintf_r+0x6c6>
 8009338:	990e      	ldr	r1, [sp, #56]	; 0x38
 800933a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800933c:	4f15      	ldr	r7, [pc, #84]	; (8009394 <_vfiprintf_r+0xc08>)
 800933e:	3101      	adds	r1, #1
 8009340:	f7ff bb98 	b.w	8008a74 <_vfiprintf_r+0x2e8>
 8009344:	f1bc 0f06 	cmp.w	ip, #6
 8009348:	bf28      	it	cs
 800934a:	f04f 0c06 	movcs.w	ip, #6
 800934e:	4b12      	ldr	r3, [pc, #72]	; (8009398 <_vfiprintf_r+0xc0c>)
 8009350:	9604      	str	r6, [sp, #16]
 8009352:	46e1      	mov	r9, ip
 8009354:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
 8009358:	9307      	str	r3, [sp, #28]
 800935a:	e460      	b.n	8008c1e <_vfiprintf_r+0x492>
 800935c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800935e:	4f0d      	ldr	r7, [pc, #52]	; (8009394 <_vfiprintf_r+0xc08>)
 8009360:	f101 0e01 	add.w	lr, r1, #1
 8009364:	e618      	b.n	8008f98 <_vfiprintf_r+0x80c>
 8009366:	46e1      	mov	r9, ip
 8009368:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 800936c:	9604      	str	r6, [sp, #16]
 800936e:	4684      	mov	ip, r0
 8009370:	f7ff bb3e 	b.w	80089f0 <_vfiprintf_r+0x264>
 8009374:	4686      	mov	lr, r0
 8009376:	e66b      	b.n	8009050 <_vfiprintf_r+0x8c4>
 8009378:	9a04      	ldr	r2, [sp, #16]
 800937a:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800937e:	6816      	ldr	r6, [r2, #0]
 8009380:	3204      	adds	r2, #4
 8009382:	2e00      	cmp	r6, #0
 8009384:	9204      	str	r2, [sp, #16]
 8009386:	f6bf aa6a 	bge.w	800885e <_vfiprintf_r+0xd2>
 800938a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800938e:	f7ff ba66 	b.w	800885e <_vfiprintf_r+0xd2>
 8009392:	bf00      	nop
 8009394:	0800ae80 	.word	0x0800ae80
 8009398:	0800ad14 	.word	0x0800ad14

0800939c <vfiprintf>:
 800939c:	b430      	push	{r4, r5}
 800939e:	4c04      	ldr	r4, [pc, #16]	; (80093b0 <vfiprintf+0x14>)
 80093a0:	460d      	mov	r5, r1
 80093a2:	4613      	mov	r3, r2
 80093a4:	4601      	mov	r1, r0
 80093a6:	462a      	mov	r2, r5
 80093a8:	6820      	ldr	r0, [r4, #0]
 80093aa:	bc30      	pop	{r4, r5}
 80093ac:	f7ff b9ee 	b.w	800878c <_vfiprintf_r>
 80093b0:	200004a8 	.word	0x200004a8

080093b4 <__sbprintf>:
 80093b4:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 80093b8:	460c      	mov	r4, r1
 80093ba:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 80093be:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 80093c2:	69e7      	ldr	r7, [r4, #28]
 80093c4:	6e49      	ldr	r1, [r1, #100]	; 0x64
 80093c6:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 80093ca:	9119      	str	r1, [sp, #100]	; 0x64
 80093cc:	ad1a      	add	r5, sp, #104	; 0x68
 80093ce:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80093d2:	f02e 0e02 	bic.w	lr, lr, #2
 80093d6:	f04f 0c00 	mov.w	ip, #0
 80093da:	9707      	str	r7, [sp, #28]
 80093dc:	4669      	mov	r1, sp
 80093de:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80093e0:	9500      	str	r5, [sp, #0]
 80093e2:	9504      	str	r5, [sp, #16]
 80093e4:	9602      	str	r6, [sp, #8]
 80093e6:	9605      	str	r6, [sp, #20]
 80093e8:	f8ad e00c 	strh.w	lr, [sp, #12]
 80093ec:	f8ad 900e 	strh.w	r9, [sp, #14]
 80093f0:	9709      	str	r7, [sp, #36]	; 0x24
 80093f2:	f8cd c018 	str.w	ip, [sp, #24]
 80093f6:	4606      	mov	r6, r0
 80093f8:	f7ff f9c8 	bl	800878c <_vfiprintf_r>
 80093fc:	1e05      	subs	r5, r0, #0
 80093fe:	db07      	blt.n	8009410 <__sbprintf+0x5c>
 8009400:	4630      	mov	r0, r6
 8009402:	4669      	mov	r1, sp
 8009404:	f7fd f87c 	bl	8006500 <_fflush_r>
 8009408:	2800      	cmp	r0, #0
 800940a:	bf18      	it	ne
 800940c:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8009410:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009414:	065b      	lsls	r3, r3, #25
 8009416:	d503      	bpl.n	8009420 <__sbprintf+0x6c>
 8009418:	89a3      	ldrh	r3, [r4, #12]
 800941a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800941e:	81a3      	strh	r3, [r4, #12]
 8009420:	4628      	mov	r0, r5
 8009422:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8009426:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 800942a:	bf00      	nop

0800942c <__swbuf_r>:
 800942c:	b570      	push	{r4, r5, r6, lr}
 800942e:	460d      	mov	r5, r1
 8009430:	4614      	mov	r4, r2
 8009432:	4606      	mov	r6, r0
 8009434:	b110      	cbz	r0, 800943c <__swbuf_r+0x10>
 8009436:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009438:	2b00      	cmp	r3, #0
 800943a:	d048      	beq.n	80094ce <__swbuf_r+0xa2>
 800943c:	89a2      	ldrh	r2, [r4, #12]
 800943e:	69a3      	ldr	r3, [r4, #24]
 8009440:	60a3      	str	r3, [r4, #8]
 8009442:	b291      	uxth	r1, r2
 8009444:	0708      	lsls	r0, r1, #28
 8009446:	d538      	bpl.n	80094ba <__swbuf_r+0x8e>
 8009448:	6923      	ldr	r3, [r4, #16]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d035      	beq.n	80094ba <__swbuf_r+0x8e>
 800944e:	0489      	lsls	r1, r1, #18
 8009450:	b2ed      	uxtb	r5, r5
 8009452:	d515      	bpl.n	8009480 <__swbuf_r+0x54>
 8009454:	6822      	ldr	r2, [r4, #0]
 8009456:	6961      	ldr	r1, [r4, #20]
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	428b      	cmp	r3, r1
 800945c:	da1c      	bge.n	8009498 <__swbuf_r+0x6c>
 800945e:	3301      	adds	r3, #1
 8009460:	68a1      	ldr	r1, [r4, #8]
 8009462:	1c50      	adds	r0, r2, #1
 8009464:	3901      	subs	r1, #1
 8009466:	60a1      	str	r1, [r4, #8]
 8009468:	6020      	str	r0, [r4, #0]
 800946a:	7015      	strb	r5, [r2, #0]
 800946c:	6962      	ldr	r2, [r4, #20]
 800946e:	429a      	cmp	r2, r3
 8009470:	d01a      	beq.n	80094a8 <__swbuf_r+0x7c>
 8009472:	89a3      	ldrh	r3, [r4, #12]
 8009474:	07db      	lsls	r3, r3, #31
 8009476:	d501      	bpl.n	800947c <__swbuf_r+0x50>
 8009478:	2d0a      	cmp	r5, #10
 800947a:	d015      	beq.n	80094a8 <__swbuf_r+0x7c>
 800947c:	4628      	mov	r0, r5
 800947e:	bd70      	pop	{r4, r5, r6, pc}
 8009480:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009482:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009486:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800948a:	81a2      	strh	r2, [r4, #12]
 800948c:	6822      	ldr	r2, [r4, #0]
 800948e:	6661      	str	r1, [r4, #100]	; 0x64
 8009490:	6961      	ldr	r1, [r4, #20]
 8009492:	1ad3      	subs	r3, r2, r3
 8009494:	428b      	cmp	r3, r1
 8009496:	dbe2      	blt.n	800945e <__swbuf_r+0x32>
 8009498:	4630      	mov	r0, r6
 800949a:	4621      	mov	r1, r4
 800949c:	f7fd f830 	bl	8006500 <_fflush_r>
 80094a0:	b940      	cbnz	r0, 80094b4 <__swbuf_r+0x88>
 80094a2:	6822      	ldr	r2, [r4, #0]
 80094a4:	2301      	movs	r3, #1
 80094a6:	e7db      	b.n	8009460 <__swbuf_r+0x34>
 80094a8:	4630      	mov	r0, r6
 80094aa:	4621      	mov	r1, r4
 80094ac:	f7fd f828 	bl	8006500 <_fflush_r>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	d0e3      	beq.n	800947c <__swbuf_r+0x50>
 80094b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094b8:	bd70      	pop	{r4, r5, r6, pc}
 80094ba:	4630      	mov	r0, r6
 80094bc:	4621      	mov	r1, r4
 80094be:	f7fb feb1 	bl	8005224 <__swsetup_r>
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d1f6      	bne.n	80094b4 <__swbuf_r+0x88>
 80094c6:	89a2      	ldrh	r2, [r4, #12]
 80094c8:	6923      	ldr	r3, [r4, #16]
 80094ca:	b291      	uxth	r1, r2
 80094cc:	e7bf      	b.n	800944e <__swbuf_r+0x22>
 80094ce:	f7fd f927 	bl	8006720 <__sinit>
 80094d2:	e7b3      	b.n	800943c <__swbuf_r+0x10>

080094d4 <__swbuf>:
 80094d4:	4b02      	ldr	r3, [pc, #8]	; (80094e0 <__swbuf+0xc>)
 80094d6:	460a      	mov	r2, r1
 80094d8:	4601      	mov	r1, r0
 80094da:	6818      	ldr	r0, [r3, #0]
 80094dc:	f7ff bfa6 	b.w	800942c <__swbuf_r>
 80094e0:	200004a8 	.word	0x200004a8

080094e4 <_write_r>:
 80094e4:	b570      	push	{r4, r5, r6, lr}
 80094e6:	4c08      	ldr	r4, [pc, #32]	; (8009508 <_write_r+0x24>)
 80094e8:	4606      	mov	r6, r0
 80094ea:	2500      	movs	r5, #0
 80094ec:	4608      	mov	r0, r1
 80094ee:	4611      	mov	r1, r2
 80094f0:	461a      	mov	r2, r3
 80094f2:	6025      	str	r5, [r4, #0]
 80094f4:	f7f7 fd54 	bl	8000fa0 <_write>
 80094f8:	1c43      	adds	r3, r0, #1
 80094fa:	d000      	beq.n	80094fe <_write_r+0x1a>
 80094fc:	bd70      	pop	{r4, r5, r6, pc}
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d0fb      	beq.n	80094fc <_write_r+0x18>
 8009504:	6033      	str	r3, [r6, #0]
 8009506:	bd70      	pop	{r4, r5, r6, pc}
 8009508:	2001064c 	.word	0x2001064c

0800950c <__register_exitproc>:
 800950c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009510:	4c25      	ldr	r4, [pc, #148]	; (80095a8 <__register_exitproc+0x9c>)
 8009512:	6825      	ldr	r5, [r4, #0]
 8009514:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8009518:	4606      	mov	r6, r0
 800951a:	4688      	mov	r8, r1
 800951c:	4692      	mov	sl, r2
 800951e:	4699      	mov	r9, r3
 8009520:	b3cc      	cbz	r4, 8009596 <__register_exitproc+0x8a>
 8009522:	6860      	ldr	r0, [r4, #4]
 8009524:	281f      	cmp	r0, #31
 8009526:	dc18      	bgt.n	800955a <__register_exitproc+0x4e>
 8009528:	1c43      	adds	r3, r0, #1
 800952a:	b17e      	cbz	r6, 800954c <__register_exitproc+0x40>
 800952c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8009530:	2101      	movs	r1, #1
 8009532:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 8009536:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 800953a:	fa01 f200 	lsl.w	r2, r1, r0
 800953e:	4317      	orrs	r7, r2
 8009540:	2e02      	cmp	r6, #2
 8009542:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8009546:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 800954a:	d01e      	beq.n	800958a <__register_exitproc+0x7e>
 800954c:	3002      	adds	r0, #2
 800954e:	6063      	str	r3, [r4, #4]
 8009550:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8009554:	2000      	movs	r0, #0
 8009556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955a:	4b14      	ldr	r3, [pc, #80]	; (80095ac <__register_exitproc+0xa0>)
 800955c:	b303      	cbz	r3, 80095a0 <__register_exitproc+0x94>
 800955e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009562:	f3af 8000 	nop.w
 8009566:	4604      	mov	r4, r0
 8009568:	b1d0      	cbz	r0, 80095a0 <__register_exitproc+0x94>
 800956a:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800956e:	2700      	movs	r7, #0
 8009570:	e880 0088 	stmia.w	r0, {r3, r7}
 8009574:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8009578:	4638      	mov	r0, r7
 800957a:	2301      	movs	r3, #1
 800957c:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8009580:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8009584:	2e00      	cmp	r6, #0
 8009586:	d0e1      	beq.n	800954c <__register_exitproc+0x40>
 8009588:	e7d0      	b.n	800952c <__register_exitproc+0x20>
 800958a:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 800958e:	430a      	orrs	r2, r1
 8009590:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8009594:	e7da      	b.n	800954c <__register_exitproc+0x40>
 8009596:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 800959a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800959e:	e7c0      	b.n	8009522 <__register_exitproc+0x16>
 80095a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a8:	0800acc8 	.word	0x0800acc8
 80095ac:	00000000 	.word	0x00000000

080095b0 <_calloc_r>:
 80095b0:	b510      	push	{r4, lr}
 80095b2:	fb02 f101 	mul.w	r1, r2, r1
 80095b6:	f7fd fc9f 	bl	8006ef8 <_malloc_r>
 80095ba:	4604      	mov	r4, r0
 80095bc:	b168      	cbz	r0, 80095da <_calloc_r+0x2a>
 80095be:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80095c2:	f022 0203 	bic.w	r2, r2, #3
 80095c6:	3a04      	subs	r2, #4
 80095c8:	2a24      	cmp	r2, #36	; 0x24
 80095ca:	d818      	bhi.n	80095fe <_calloc_r+0x4e>
 80095cc:	2a13      	cmp	r2, #19
 80095ce:	d806      	bhi.n	80095de <_calloc_r+0x2e>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2200      	movs	r2, #0
 80095d4:	601a      	str	r2, [r3, #0]
 80095d6:	605a      	str	r2, [r3, #4]
 80095d8:	609a      	str	r2, [r3, #8]
 80095da:	4620      	mov	r0, r4
 80095dc:	bd10      	pop	{r4, pc}
 80095de:	2300      	movs	r3, #0
 80095e0:	2a1b      	cmp	r2, #27
 80095e2:	6003      	str	r3, [r0, #0]
 80095e4:	6043      	str	r3, [r0, #4]
 80095e6:	d90f      	bls.n	8009608 <_calloc_r+0x58>
 80095e8:	2a24      	cmp	r2, #36	; 0x24
 80095ea:	6083      	str	r3, [r0, #8]
 80095ec:	60c3      	str	r3, [r0, #12]
 80095ee:	bf05      	ittet	eq
 80095f0:	6103      	streq	r3, [r0, #16]
 80095f2:	6143      	streq	r3, [r0, #20]
 80095f4:	f100 0310 	addne.w	r3, r0, #16
 80095f8:	f100 0318 	addeq.w	r3, r0, #24
 80095fc:	e7e9      	b.n	80095d2 <_calloc_r+0x22>
 80095fe:	2100      	movs	r1, #0
 8009600:	f7fa facc 	bl	8003b9c <memset>
 8009604:	4620      	mov	r0, r4
 8009606:	bd10      	pop	{r4, pc}
 8009608:	f100 0308 	add.w	r3, r0, #8
 800960c:	e7e1      	b.n	80095d2 <_calloc_r+0x22>
 800960e:	bf00      	nop

08009610 <_close_r>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	4c07      	ldr	r4, [pc, #28]	; (8009630 <_close_r+0x20>)
 8009614:	2300      	movs	r3, #0
 8009616:	4605      	mov	r5, r0
 8009618:	4608      	mov	r0, r1
 800961a:	6023      	str	r3, [r4, #0]
 800961c:	f7f7 fcc8 	bl	8000fb0 <_close>
 8009620:	1c43      	adds	r3, r0, #1
 8009622:	d000      	beq.n	8009626 <_close_r+0x16>
 8009624:	bd38      	pop	{r3, r4, r5, pc}
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d0fb      	beq.n	8009624 <_close_r+0x14>
 800962c:	602b      	str	r3, [r5, #0]
 800962e:	bd38      	pop	{r3, r4, r5, pc}
 8009630:	2001064c 	.word	0x2001064c

08009634 <_fclose_r>:
 8009634:	2900      	cmp	r1, #0
 8009636:	d03d      	beq.n	80096b4 <_fclose_r+0x80>
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	4605      	mov	r5, r0
 800963c:	460c      	mov	r4, r1
 800963e:	b108      	cbz	r0, 8009644 <_fclose_r+0x10>
 8009640:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009642:	b37b      	cbz	r3, 80096a4 <_fclose_r+0x70>
 8009644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009648:	b90b      	cbnz	r3, 800964e <_fclose_r+0x1a>
 800964a:	2000      	movs	r0, #0
 800964c:	bd70      	pop	{r4, r5, r6, pc}
 800964e:	4628      	mov	r0, r5
 8009650:	4621      	mov	r1, r4
 8009652:	f7fc feab 	bl	80063ac <__sflush_r>
 8009656:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009658:	4606      	mov	r6, r0
 800965a:	b133      	cbz	r3, 800966a <_fclose_r+0x36>
 800965c:	4628      	mov	r0, r5
 800965e:	69e1      	ldr	r1, [r4, #28]
 8009660:	4798      	blx	r3
 8009662:	2800      	cmp	r0, #0
 8009664:	bfb8      	it	lt
 8009666:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 800966a:	89a3      	ldrh	r3, [r4, #12]
 800966c:	061b      	lsls	r3, r3, #24
 800966e:	d41c      	bmi.n	80096aa <_fclose_r+0x76>
 8009670:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009672:	b141      	cbz	r1, 8009686 <_fclose_r+0x52>
 8009674:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009678:	4299      	cmp	r1, r3
 800967a:	d002      	beq.n	8009682 <_fclose_r+0x4e>
 800967c:	4628      	mov	r0, r5
 800967e:	f7fd f8d5 	bl	800682c <_free_r>
 8009682:	2300      	movs	r3, #0
 8009684:	6323      	str	r3, [r4, #48]	; 0x30
 8009686:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009688:	b121      	cbz	r1, 8009694 <_fclose_r+0x60>
 800968a:	4628      	mov	r0, r5
 800968c:	f7fd f8ce 	bl	800682c <_free_r>
 8009690:	2300      	movs	r3, #0
 8009692:	6463      	str	r3, [r4, #68]	; 0x44
 8009694:	f7fd f84a 	bl	800672c <__sfp_lock_acquire>
 8009698:	2300      	movs	r3, #0
 800969a:	81a3      	strh	r3, [r4, #12]
 800969c:	f7fd f848 	bl	8006730 <__sfp_lock_release>
 80096a0:	4630      	mov	r0, r6
 80096a2:	bd70      	pop	{r4, r5, r6, pc}
 80096a4:	f7fd f83c 	bl	8006720 <__sinit>
 80096a8:	e7cc      	b.n	8009644 <_fclose_r+0x10>
 80096aa:	4628      	mov	r0, r5
 80096ac:	6921      	ldr	r1, [r4, #16]
 80096ae:	f7fd f8bd 	bl	800682c <_free_r>
 80096b2:	e7dd      	b.n	8009670 <_fclose_r+0x3c>
 80096b4:	2000      	movs	r0, #0
 80096b6:	4770      	bx	lr

080096b8 <fclose>:
 80096b8:	4b02      	ldr	r3, [pc, #8]	; (80096c4 <fclose+0xc>)
 80096ba:	4601      	mov	r1, r0
 80096bc:	6818      	ldr	r0, [r3, #0]
 80096be:	f7ff bfb9 	b.w	8009634 <_fclose_r>
 80096c2:	bf00      	nop
 80096c4:	200004a8 	.word	0x200004a8

080096c8 <__fputwc>:
 80096c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096cc:	b082      	sub	sp, #8
 80096ce:	4607      	mov	r7, r0
 80096d0:	460e      	mov	r6, r1
 80096d2:	4614      	mov	r4, r2
 80096d4:	f7fd fb84 	bl	8006de0 <__locale_mb_cur_max>
 80096d8:	2801      	cmp	r0, #1
 80096da:	d041      	beq.n	8009760 <__fputwc+0x98>
 80096dc:	4638      	mov	r0, r7
 80096de:	a901      	add	r1, sp, #4
 80096e0:	4632      	mov	r2, r6
 80096e2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80096e6:	f000 f90d 	bl	8009904 <_wcrtomb_r>
 80096ea:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80096ee:	4680      	mov	r8, r0
 80096f0:	d02f      	beq.n	8009752 <__fputwc+0x8a>
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d03c      	beq.n	8009770 <__fputwc+0xa8>
 80096f6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80096fa:	2500      	movs	r5, #0
 80096fc:	e009      	b.n	8009712 <__fputwc+0x4a>
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	7019      	strb	r1, [r3, #0]
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	3301      	adds	r3, #1
 8009706:	6023      	str	r3, [r4, #0]
 8009708:	3501      	adds	r5, #1
 800970a:	45a8      	cmp	r8, r5
 800970c:	d930      	bls.n	8009770 <__fputwc+0xa8>
 800970e:	ab01      	add	r3, sp, #4
 8009710:	5d59      	ldrb	r1, [r3, r5]
 8009712:	68a3      	ldr	r3, [r4, #8]
 8009714:	3b01      	subs	r3, #1
 8009716:	2b00      	cmp	r3, #0
 8009718:	60a3      	str	r3, [r4, #8]
 800971a:	daf0      	bge.n	80096fe <__fputwc+0x36>
 800971c:	69a2      	ldr	r2, [r4, #24]
 800971e:	4293      	cmp	r3, r2
 8009720:	db07      	blt.n	8009732 <__fputwc+0x6a>
 8009722:	6823      	ldr	r3, [r4, #0]
 8009724:	7019      	strb	r1, [r3, #0]
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	7819      	ldrb	r1, [r3, #0]
 800972a:	290a      	cmp	r1, #10
 800972c:	f103 0301 	add.w	r3, r3, #1
 8009730:	d1e9      	bne.n	8009706 <__fputwc+0x3e>
 8009732:	4638      	mov	r0, r7
 8009734:	4622      	mov	r2, r4
 8009736:	f7ff fe79 	bl	800942c <__swbuf_r>
 800973a:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 800973e:	fab0 f080 	clz	r0, r0
 8009742:	0940      	lsrs	r0, r0, #5
 8009744:	2800      	cmp	r0, #0
 8009746:	d0df      	beq.n	8009708 <__fputwc+0x40>
 8009748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800974c:	b002      	add	sp, #8
 800974e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009752:	89a3      	ldrh	r3, [r4, #12]
 8009754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009758:	81a3      	strh	r3, [r4, #12]
 800975a:	b002      	add	sp, #8
 800975c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009760:	1e73      	subs	r3, r6, #1
 8009762:	2bfe      	cmp	r3, #254	; 0xfe
 8009764:	d8ba      	bhi.n	80096dc <__fputwc+0x14>
 8009766:	b2f1      	uxtb	r1, r6
 8009768:	4680      	mov	r8, r0
 800976a:	f88d 1004 	strb.w	r1, [sp, #4]
 800976e:	e7c4      	b.n	80096fa <__fputwc+0x32>
 8009770:	4630      	mov	r0, r6
 8009772:	b002      	add	sp, #8
 8009774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009778 <_fputwc_r>:
 8009778:	8993      	ldrh	r3, [r2, #12]
 800977a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800977e:	d10b      	bne.n	8009798 <_fputwc_r+0x20>
 8009780:	b410      	push	{r4}
 8009782:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8009784:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009788:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800978c:	6654      	str	r4, [r2, #100]	; 0x64
 800978e:	8193      	strh	r3, [r2, #12]
 8009790:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009794:	f7ff bf98 	b.w	80096c8 <__fputwc>
 8009798:	f7ff bf96 	b.w	80096c8 <__fputwc>

0800979c <fputwc>:
 800979c:	4b08      	ldr	r3, [pc, #32]	; (80097c0 <fputwc+0x24>)
 800979e:	b570      	push	{r4, r5, r6, lr}
 80097a0:	681c      	ldr	r4, [r3, #0]
 80097a2:	4606      	mov	r6, r0
 80097a4:	460d      	mov	r5, r1
 80097a6:	b124      	cbz	r4, 80097b2 <fputwc+0x16>
 80097a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80097aa:	b913      	cbnz	r3, 80097b2 <fputwc+0x16>
 80097ac:	4620      	mov	r0, r4
 80097ae:	f7fc ffb7 	bl	8006720 <__sinit>
 80097b2:	4620      	mov	r0, r4
 80097b4:	4631      	mov	r1, r6
 80097b6:	462a      	mov	r2, r5
 80097b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80097bc:	f7ff bfdc 	b.w	8009778 <_fputwc_r>
 80097c0:	200004a8 	.word	0x200004a8

080097c4 <_fstat_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4c08      	ldr	r4, [pc, #32]	; (80097e8 <_fstat_r+0x24>)
 80097c8:	2300      	movs	r3, #0
 80097ca:	4605      	mov	r5, r0
 80097cc:	4608      	mov	r0, r1
 80097ce:	4611      	mov	r1, r2
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	f7f7 fbf1 	bl	8000fb8 <_fstat>
 80097d6:	1c43      	adds	r3, r0, #1
 80097d8:	d000      	beq.n	80097dc <_fstat_r+0x18>
 80097da:	bd38      	pop	{r3, r4, r5, pc}
 80097dc:	6823      	ldr	r3, [r4, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d0fb      	beq.n	80097da <_fstat_r+0x16>
 80097e2:	602b      	str	r3, [r5, #0]
 80097e4:	bd38      	pop	{r3, r4, r5, pc}
 80097e6:	bf00      	nop
 80097e8:	2001064c 	.word	0x2001064c

080097ec <_isatty_r>:
 80097ec:	b538      	push	{r3, r4, r5, lr}
 80097ee:	4c07      	ldr	r4, [pc, #28]	; (800980c <_isatty_r+0x20>)
 80097f0:	2300      	movs	r3, #0
 80097f2:	4605      	mov	r5, r0
 80097f4:	4608      	mov	r0, r1
 80097f6:	6023      	str	r3, [r4, #0]
 80097f8:	f7f7 fbe4 	bl	8000fc4 <_isatty>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	d000      	beq.n	8009802 <_isatty_r+0x16>
 8009800:	bd38      	pop	{r3, r4, r5, pc}
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d0fb      	beq.n	8009800 <_isatty_r+0x14>
 8009808:	602b      	str	r3, [r5, #0]
 800980a:	bd38      	pop	{r3, r4, r5, pc}
 800980c:	2001064c 	.word	0x2001064c

08009810 <_lseek_r>:
 8009810:	b570      	push	{r4, r5, r6, lr}
 8009812:	4c08      	ldr	r4, [pc, #32]	; (8009834 <_lseek_r+0x24>)
 8009814:	4606      	mov	r6, r0
 8009816:	2500      	movs	r5, #0
 8009818:	4608      	mov	r0, r1
 800981a:	4611      	mov	r1, r2
 800981c:	461a      	mov	r2, r3
 800981e:	6025      	str	r5, [r4, #0]
 8009820:	f7f7 fbd2 	bl	8000fc8 <_lseek>
 8009824:	1c43      	adds	r3, r0, #1
 8009826:	d000      	beq.n	800982a <_lseek_r+0x1a>
 8009828:	bd70      	pop	{r4, r5, r6, pc}
 800982a:	6823      	ldr	r3, [r4, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d0fb      	beq.n	8009828 <_lseek_r+0x18>
 8009830:	6033      	str	r3, [r6, #0]
 8009832:	bd70      	pop	{r4, r5, r6, pc}
 8009834:	2001064c 	.word	0x2001064c

08009838 <_read_r>:
 8009838:	b570      	push	{r4, r5, r6, lr}
 800983a:	4c08      	ldr	r4, [pc, #32]	; (800985c <_read_r+0x24>)
 800983c:	4606      	mov	r6, r0
 800983e:	2500      	movs	r5, #0
 8009840:	4608      	mov	r0, r1
 8009842:	4611      	mov	r1, r2
 8009844:	461a      	mov	r2, r3
 8009846:	6025      	str	r5, [r4, #0]
 8009848:	f7f7 fbc0 	bl	8000fcc <_read>
 800984c:	1c43      	adds	r3, r0, #1
 800984e:	d000      	beq.n	8009852 <_read_r+0x1a>
 8009850:	bd70      	pop	{r4, r5, r6, pc}
 8009852:	6823      	ldr	r3, [r4, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d0fb      	beq.n	8009850 <_read_r+0x18>
 8009858:	6033      	str	r3, [r6, #0]
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	2001064c 	.word	0x2001064c

08009860 <cleanup_glue>:
 8009860:	b538      	push	{r3, r4, r5, lr}
 8009862:	460c      	mov	r4, r1
 8009864:	6809      	ldr	r1, [r1, #0]
 8009866:	4605      	mov	r5, r0
 8009868:	b109      	cbz	r1, 800986e <cleanup_glue+0xe>
 800986a:	f7ff fff9 	bl	8009860 <cleanup_glue>
 800986e:	4628      	mov	r0, r5
 8009870:	4621      	mov	r1, r4
 8009872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009876:	f7fc bfd9 	b.w	800682c <_free_r>
 800987a:	bf00      	nop

0800987c <_reclaim_reent>:
 800987c:	4b20      	ldr	r3, [pc, #128]	; (8009900 <_reclaim_reent+0x84>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4298      	cmp	r0, r3
 8009882:	d03c      	beq.n	80098fe <_reclaim_reent+0x82>
 8009884:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009886:	b570      	push	{r4, r5, r6, lr}
 8009888:	4605      	mov	r5, r0
 800988a:	b18b      	cbz	r3, 80098b0 <_reclaim_reent+0x34>
 800988c:	2600      	movs	r6, #0
 800988e:	5999      	ldr	r1, [r3, r6]
 8009890:	b139      	cbz	r1, 80098a2 <_reclaim_reent+0x26>
 8009892:	680c      	ldr	r4, [r1, #0]
 8009894:	4628      	mov	r0, r5
 8009896:	f7fc ffc9 	bl	800682c <_free_r>
 800989a:	4621      	mov	r1, r4
 800989c:	2c00      	cmp	r4, #0
 800989e:	d1f8      	bne.n	8009892 <_reclaim_reent+0x16>
 80098a0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80098a2:	3604      	adds	r6, #4
 80098a4:	2e80      	cmp	r6, #128	; 0x80
 80098a6:	d1f2      	bne.n	800988e <_reclaim_reent+0x12>
 80098a8:	4619      	mov	r1, r3
 80098aa:	4628      	mov	r0, r5
 80098ac:	f7fc ffbe 	bl	800682c <_free_r>
 80098b0:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80098b2:	b111      	cbz	r1, 80098ba <_reclaim_reent+0x3e>
 80098b4:	4628      	mov	r0, r5
 80098b6:	f7fc ffb9 	bl	800682c <_free_r>
 80098ba:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 80098be:	b151      	cbz	r1, 80098d6 <_reclaim_reent+0x5a>
 80098c0:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 80098c4:	42b1      	cmp	r1, r6
 80098c6:	d006      	beq.n	80098d6 <_reclaim_reent+0x5a>
 80098c8:	680c      	ldr	r4, [r1, #0]
 80098ca:	4628      	mov	r0, r5
 80098cc:	f7fc ffae 	bl	800682c <_free_r>
 80098d0:	42a6      	cmp	r6, r4
 80098d2:	4621      	mov	r1, r4
 80098d4:	d1f8      	bne.n	80098c8 <_reclaim_reent+0x4c>
 80098d6:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80098d8:	b111      	cbz	r1, 80098e0 <_reclaim_reent+0x64>
 80098da:	4628      	mov	r0, r5
 80098dc:	f7fc ffa6 	bl	800682c <_free_r>
 80098e0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80098e2:	b903      	cbnz	r3, 80098e6 <_reclaim_reent+0x6a>
 80098e4:	bd70      	pop	{r4, r5, r6, pc}
 80098e6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80098e8:	4628      	mov	r0, r5
 80098ea:	4798      	blx	r3
 80098ec:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 80098f0:	2900      	cmp	r1, #0
 80098f2:	d0f7      	beq.n	80098e4 <_reclaim_reent+0x68>
 80098f4:	4628      	mov	r0, r5
 80098f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80098fa:	f7ff bfb1 	b.w	8009860 <cleanup_glue>
 80098fe:	4770      	bx	lr
 8009900:	200004a8 	.word	0x200004a8

08009904 <_wcrtomb_r>:
 8009904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009908:	4605      	mov	r5, r0
 800990a:	b086      	sub	sp, #24
 800990c:	461e      	mov	r6, r3
 800990e:	460c      	mov	r4, r1
 8009910:	b1a1      	cbz	r1, 800993c <_wcrtomb_r+0x38>
 8009912:	4b10      	ldr	r3, [pc, #64]	; (8009954 <_wcrtomb_r+0x50>)
 8009914:	4617      	mov	r7, r2
 8009916:	f8d3 8000 	ldr.w	r8, [r3]
 800991a:	f7fd fa5d 	bl	8006dd8 <__locale_charset>
 800991e:	9600      	str	r6, [sp, #0]
 8009920:	4603      	mov	r3, r0
 8009922:	4621      	mov	r1, r4
 8009924:	463a      	mov	r2, r7
 8009926:	4628      	mov	r0, r5
 8009928:	47c0      	blx	r8
 800992a:	1c43      	adds	r3, r0, #1
 800992c:	d103      	bne.n	8009936 <_wcrtomb_r+0x32>
 800992e:	2200      	movs	r2, #0
 8009930:	238a      	movs	r3, #138	; 0x8a
 8009932:	6032      	str	r2, [r6, #0]
 8009934:	602b      	str	r3, [r5, #0]
 8009936:	b006      	add	sp, #24
 8009938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800993c:	4b05      	ldr	r3, [pc, #20]	; (8009954 <_wcrtomb_r+0x50>)
 800993e:	681f      	ldr	r7, [r3, #0]
 8009940:	f7fd fa4a 	bl	8006dd8 <__locale_charset>
 8009944:	9600      	str	r6, [sp, #0]
 8009946:	4603      	mov	r3, r0
 8009948:	4622      	mov	r2, r4
 800994a:	4628      	mov	r0, r5
 800994c:	a903      	add	r1, sp, #12
 800994e:	47b8      	blx	r7
 8009950:	e7eb      	b.n	800992a <_wcrtomb_r+0x26>
 8009952:	bf00      	nop
 8009954:	20000938 	.word	0x20000938

08009958 <wcrtomb>:
 8009958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800995c:	4b12      	ldr	r3, [pc, #72]	; (80099a8 <wcrtomb+0x50>)
 800995e:	b086      	sub	sp, #24
 8009960:	4616      	mov	r6, r2
 8009962:	681d      	ldr	r5, [r3, #0]
 8009964:	4604      	mov	r4, r0
 8009966:	b1a0      	cbz	r0, 8009992 <wcrtomb+0x3a>
 8009968:	4b10      	ldr	r3, [pc, #64]	; (80099ac <wcrtomb+0x54>)
 800996a:	460f      	mov	r7, r1
 800996c:	f8d3 8000 	ldr.w	r8, [r3]
 8009970:	f7fd fa32 	bl	8006dd8 <__locale_charset>
 8009974:	9600      	str	r6, [sp, #0]
 8009976:	4603      	mov	r3, r0
 8009978:	4621      	mov	r1, r4
 800997a:	463a      	mov	r2, r7
 800997c:	4628      	mov	r0, r5
 800997e:	47c0      	blx	r8
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	d103      	bne.n	800998c <wcrtomb+0x34>
 8009984:	2200      	movs	r2, #0
 8009986:	238a      	movs	r3, #138	; 0x8a
 8009988:	6032      	str	r2, [r6, #0]
 800998a:	602b      	str	r3, [r5, #0]
 800998c:	b006      	add	sp, #24
 800998e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009992:	4b06      	ldr	r3, [pc, #24]	; (80099ac <wcrtomb+0x54>)
 8009994:	681f      	ldr	r7, [r3, #0]
 8009996:	f7fd fa1f 	bl	8006dd8 <__locale_charset>
 800999a:	9600      	str	r6, [sp, #0]
 800999c:	4603      	mov	r3, r0
 800999e:	4622      	mov	r2, r4
 80099a0:	4628      	mov	r0, r5
 80099a2:	a903      	add	r1, sp, #12
 80099a4:	47b8      	blx	r7
 80099a6:	e7eb      	b.n	8009980 <wcrtomb+0x28>
 80099a8:	200004a8 	.word	0x200004a8
 80099ac:	20000938 	.word	0x20000938

080099b0 <__ascii_wctomb>:
 80099b0:	b121      	cbz	r1, 80099bc <__ascii_wctomb+0xc>
 80099b2:	2aff      	cmp	r2, #255	; 0xff
 80099b4:	d804      	bhi.n	80099c0 <__ascii_wctomb+0x10>
 80099b6:	700a      	strb	r2, [r1, #0]
 80099b8:	2001      	movs	r0, #1
 80099ba:	4770      	bx	lr
 80099bc:	4608      	mov	r0, r1
 80099be:	4770      	bx	lr
 80099c0:	238a      	movs	r3, #138	; 0x8a
 80099c2:	6003      	str	r3, [r0, #0]
 80099c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop

080099cc <_wctomb_r>:
 80099cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d0:	4c09      	ldr	r4, [pc, #36]	; (80099f8 <_wctomb_r+0x2c>)
 80099d2:	b082      	sub	sp, #8
 80099d4:	4698      	mov	r8, r3
 80099d6:	4605      	mov	r5, r0
 80099d8:	460f      	mov	r7, r1
 80099da:	4616      	mov	r6, r2
 80099dc:	6824      	ldr	r4, [r4, #0]
 80099de:	f7fd f9fb 	bl	8006dd8 <__locale_charset>
 80099e2:	f8cd 8000 	str.w	r8, [sp]
 80099e6:	4603      	mov	r3, r0
 80099e8:	4639      	mov	r1, r7
 80099ea:	4632      	mov	r2, r6
 80099ec:	4628      	mov	r0, r5
 80099ee:	47a0      	blx	r4
 80099f0:	b002      	add	sp, #8
 80099f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f6:	bf00      	nop
 80099f8:	20000938 	.word	0x20000938

080099fc <__aeabi_drsub>:
 80099fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8009a00:	e002      	b.n	8009a08 <__adddf3>
 8009a02:	bf00      	nop

08009a04 <__aeabi_dsub>:
 8009a04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08009a08 <__adddf3>:
 8009a08:	b530      	push	{r4, r5, lr}
 8009a0a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8009a0e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8009a12:	ea94 0f05 	teq	r4, r5
 8009a16:	bf08      	it	eq
 8009a18:	ea90 0f02 	teqeq	r0, r2
 8009a1c:	bf1f      	itttt	ne
 8009a1e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8009a22:	ea55 0c02 	orrsne.w	ip, r5, r2
 8009a26:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8009a2a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8009a2e:	f000 80e2 	beq.w	8009bf6 <__adddf3+0x1ee>
 8009a32:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8009a36:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8009a3a:	bfb8      	it	lt
 8009a3c:	426d      	neglt	r5, r5
 8009a3e:	dd0c      	ble.n	8009a5a <__adddf3+0x52>
 8009a40:	442c      	add	r4, r5
 8009a42:	ea80 0202 	eor.w	r2, r0, r2
 8009a46:	ea81 0303 	eor.w	r3, r1, r3
 8009a4a:	ea82 0000 	eor.w	r0, r2, r0
 8009a4e:	ea83 0101 	eor.w	r1, r3, r1
 8009a52:	ea80 0202 	eor.w	r2, r0, r2
 8009a56:	ea81 0303 	eor.w	r3, r1, r3
 8009a5a:	2d36      	cmp	r5, #54	; 0x36
 8009a5c:	bf88      	it	hi
 8009a5e:	bd30      	pophi	{r4, r5, pc}
 8009a60:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8009a64:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8009a68:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8009a6c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8009a70:	d002      	beq.n	8009a78 <__adddf3+0x70>
 8009a72:	4240      	negs	r0, r0
 8009a74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8009a78:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8009a7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8009a80:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8009a84:	d002      	beq.n	8009a8c <__adddf3+0x84>
 8009a86:	4252      	negs	r2, r2
 8009a88:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8009a8c:	ea94 0f05 	teq	r4, r5
 8009a90:	f000 80a7 	beq.w	8009be2 <__adddf3+0x1da>
 8009a94:	f1a4 0401 	sub.w	r4, r4, #1
 8009a98:	f1d5 0e20 	rsbs	lr, r5, #32
 8009a9c:	db0d      	blt.n	8009aba <__adddf3+0xb2>
 8009a9e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8009aa2:	fa22 f205 	lsr.w	r2, r2, r5
 8009aa6:	1880      	adds	r0, r0, r2
 8009aa8:	f141 0100 	adc.w	r1, r1, #0
 8009aac:	fa03 f20e 	lsl.w	r2, r3, lr
 8009ab0:	1880      	adds	r0, r0, r2
 8009ab2:	fa43 f305 	asr.w	r3, r3, r5
 8009ab6:	4159      	adcs	r1, r3
 8009ab8:	e00e      	b.n	8009ad8 <__adddf3+0xd0>
 8009aba:	f1a5 0520 	sub.w	r5, r5, #32
 8009abe:	f10e 0e20 	add.w	lr, lr, #32
 8009ac2:	2a01      	cmp	r2, #1
 8009ac4:	fa03 fc0e 	lsl.w	ip, r3, lr
 8009ac8:	bf28      	it	cs
 8009aca:	f04c 0c02 	orrcs.w	ip, ip, #2
 8009ace:	fa43 f305 	asr.w	r3, r3, r5
 8009ad2:	18c0      	adds	r0, r0, r3
 8009ad4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8009ad8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8009adc:	d507      	bpl.n	8009aee <__adddf3+0xe6>
 8009ade:	f04f 0e00 	mov.w	lr, #0
 8009ae2:	f1dc 0c00 	rsbs	ip, ip, #0
 8009ae6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8009aea:	eb6e 0101 	sbc.w	r1, lr, r1
 8009aee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009af2:	d31b      	bcc.n	8009b2c <__adddf3+0x124>
 8009af4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8009af8:	d30c      	bcc.n	8009b14 <__adddf3+0x10c>
 8009afa:	0849      	lsrs	r1, r1, #1
 8009afc:	ea5f 0030 	movs.w	r0, r0, rrx
 8009b00:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8009b04:	f104 0401 	add.w	r4, r4, #1
 8009b08:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8009b0c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8009b10:	f080 809a 	bcs.w	8009c48 <__adddf3+0x240>
 8009b14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8009b18:	bf08      	it	eq
 8009b1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8009b1e:	f150 0000 	adcs.w	r0, r0, #0
 8009b22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8009b26:	ea41 0105 	orr.w	r1, r1, r5
 8009b2a:	bd30      	pop	{r4, r5, pc}
 8009b2c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8009b30:	4140      	adcs	r0, r0
 8009b32:	eb41 0101 	adc.w	r1, r1, r1
 8009b36:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009b3a:	f1a4 0401 	sub.w	r4, r4, #1
 8009b3e:	d1e9      	bne.n	8009b14 <__adddf3+0x10c>
 8009b40:	f091 0f00 	teq	r1, #0
 8009b44:	bf04      	itt	eq
 8009b46:	4601      	moveq	r1, r0
 8009b48:	2000      	moveq	r0, #0
 8009b4a:	fab1 f381 	clz	r3, r1
 8009b4e:	bf08      	it	eq
 8009b50:	3320      	addeq	r3, #32
 8009b52:	f1a3 030b 	sub.w	r3, r3, #11
 8009b56:	f1b3 0220 	subs.w	r2, r3, #32
 8009b5a:	da0c      	bge.n	8009b76 <__adddf3+0x16e>
 8009b5c:	320c      	adds	r2, #12
 8009b5e:	dd08      	ble.n	8009b72 <__adddf3+0x16a>
 8009b60:	f102 0c14 	add.w	ip, r2, #20
 8009b64:	f1c2 020c 	rsb	r2, r2, #12
 8009b68:	fa01 f00c 	lsl.w	r0, r1, ip
 8009b6c:	fa21 f102 	lsr.w	r1, r1, r2
 8009b70:	e00c      	b.n	8009b8c <__adddf3+0x184>
 8009b72:	f102 0214 	add.w	r2, r2, #20
 8009b76:	bfd8      	it	le
 8009b78:	f1c2 0c20 	rsble	ip, r2, #32
 8009b7c:	fa01 f102 	lsl.w	r1, r1, r2
 8009b80:	fa20 fc0c 	lsr.w	ip, r0, ip
 8009b84:	bfdc      	itt	le
 8009b86:	ea41 010c 	orrle.w	r1, r1, ip
 8009b8a:	4090      	lslle	r0, r2
 8009b8c:	1ae4      	subs	r4, r4, r3
 8009b8e:	bfa2      	ittt	ge
 8009b90:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8009b94:	4329      	orrge	r1, r5
 8009b96:	bd30      	popge	{r4, r5, pc}
 8009b98:	ea6f 0404 	mvn.w	r4, r4
 8009b9c:	3c1f      	subs	r4, #31
 8009b9e:	da1c      	bge.n	8009bda <__adddf3+0x1d2>
 8009ba0:	340c      	adds	r4, #12
 8009ba2:	dc0e      	bgt.n	8009bc2 <__adddf3+0x1ba>
 8009ba4:	f104 0414 	add.w	r4, r4, #20
 8009ba8:	f1c4 0220 	rsb	r2, r4, #32
 8009bac:	fa20 f004 	lsr.w	r0, r0, r4
 8009bb0:	fa01 f302 	lsl.w	r3, r1, r2
 8009bb4:	ea40 0003 	orr.w	r0, r0, r3
 8009bb8:	fa21 f304 	lsr.w	r3, r1, r4
 8009bbc:	ea45 0103 	orr.w	r1, r5, r3
 8009bc0:	bd30      	pop	{r4, r5, pc}
 8009bc2:	f1c4 040c 	rsb	r4, r4, #12
 8009bc6:	f1c4 0220 	rsb	r2, r4, #32
 8009bca:	fa20 f002 	lsr.w	r0, r0, r2
 8009bce:	fa01 f304 	lsl.w	r3, r1, r4
 8009bd2:	ea40 0003 	orr.w	r0, r0, r3
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	bd30      	pop	{r4, r5, pc}
 8009bda:	fa21 f004 	lsr.w	r0, r1, r4
 8009bde:	4629      	mov	r1, r5
 8009be0:	bd30      	pop	{r4, r5, pc}
 8009be2:	f094 0f00 	teq	r4, #0
 8009be6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8009bea:	bf06      	itte	eq
 8009bec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8009bf0:	3401      	addeq	r4, #1
 8009bf2:	3d01      	subne	r5, #1
 8009bf4:	e74e      	b.n	8009a94 <__adddf3+0x8c>
 8009bf6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8009bfa:	bf18      	it	ne
 8009bfc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8009c00:	d029      	beq.n	8009c56 <__adddf3+0x24e>
 8009c02:	ea94 0f05 	teq	r4, r5
 8009c06:	bf08      	it	eq
 8009c08:	ea90 0f02 	teqeq	r0, r2
 8009c0c:	d005      	beq.n	8009c1a <__adddf3+0x212>
 8009c0e:	ea54 0c00 	orrs.w	ip, r4, r0
 8009c12:	bf04      	itt	eq
 8009c14:	4619      	moveq	r1, r3
 8009c16:	4610      	moveq	r0, r2
 8009c18:	bd30      	pop	{r4, r5, pc}
 8009c1a:	ea91 0f03 	teq	r1, r3
 8009c1e:	bf1e      	ittt	ne
 8009c20:	2100      	movne	r1, #0
 8009c22:	2000      	movne	r0, #0
 8009c24:	bd30      	popne	{r4, r5, pc}
 8009c26:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8009c2a:	d105      	bne.n	8009c38 <__adddf3+0x230>
 8009c2c:	0040      	lsls	r0, r0, #1
 8009c2e:	4149      	adcs	r1, r1
 8009c30:	bf28      	it	cs
 8009c32:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8009c36:	bd30      	pop	{r4, r5, pc}
 8009c38:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8009c3c:	bf3c      	itt	cc
 8009c3e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8009c42:	bd30      	popcc	{r4, r5, pc}
 8009c44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8009c48:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8009c4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009c50:	f04f 0000 	mov.w	r0, #0
 8009c54:	bd30      	pop	{r4, r5, pc}
 8009c56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8009c5a:	bf1a      	itte	ne
 8009c5c:	4619      	movne	r1, r3
 8009c5e:	4610      	movne	r0, r2
 8009c60:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8009c64:	bf1c      	itt	ne
 8009c66:	460b      	movne	r3, r1
 8009c68:	4602      	movne	r2, r0
 8009c6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8009c6e:	bf06      	itte	eq
 8009c70:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8009c74:	ea91 0f03 	teqeq	r1, r3
 8009c78:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8009c7c:	bd30      	pop	{r4, r5, pc}
 8009c7e:	bf00      	nop

08009c80 <__aeabi_ui2d>:
 8009c80:	f090 0f00 	teq	r0, #0
 8009c84:	bf04      	itt	eq
 8009c86:	2100      	moveq	r1, #0
 8009c88:	4770      	bxeq	lr
 8009c8a:	b530      	push	{r4, r5, lr}
 8009c8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8009c90:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8009c94:	f04f 0500 	mov.w	r5, #0
 8009c98:	f04f 0100 	mov.w	r1, #0
 8009c9c:	e750      	b.n	8009b40 <__adddf3+0x138>
 8009c9e:	bf00      	nop

08009ca0 <__aeabi_i2d>:
 8009ca0:	f090 0f00 	teq	r0, #0
 8009ca4:	bf04      	itt	eq
 8009ca6:	2100      	moveq	r1, #0
 8009ca8:	4770      	bxeq	lr
 8009caa:	b530      	push	{r4, r5, lr}
 8009cac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8009cb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8009cb4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8009cb8:	bf48      	it	mi
 8009cba:	4240      	negmi	r0, r0
 8009cbc:	f04f 0100 	mov.w	r1, #0
 8009cc0:	e73e      	b.n	8009b40 <__adddf3+0x138>
 8009cc2:	bf00      	nop

08009cc4 <__aeabi_f2d>:
 8009cc4:	0042      	lsls	r2, r0, #1
 8009cc6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8009cca:	ea4f 0131 	mov.w	r1, r1, rrx
 8009cce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8009cd2:	bf1f      	itttt	ne
 8009cd4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8009cd8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8009cdc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8009ce0:	4770      	bxne	lr
 8009ce2:	f092 0f00 	teq	r2, #0
 8009ce6:	bf14      	ite	ne
 8009ce8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8009cec:	4770      	bxeq	lr
 8009cee:	b530      	push	{r4, r5, lr}
 8009cf0:	f44f 7460 	mov.w	r4, #896	; 0x380
 8009cf4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8009cf8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009cfc:	e720      	b.n	8009b40 <__adddf3+0x138>
 8009cfe:	bf00      	nop

08009d00 <__aeabi_ul2d>:
 8009d00:	ea50 0201 	orrs.w	r2, r0, r1
 8009d04:	bf08      	it	eq
 8009d06:	4770      	bxeq	lr
 8009d08:	b530      	push	{r4, r5, lr}
 8009d0a:	f04f 0500 	mov.w	r5, #0
 8009d0e:	e00a      	b.n	8009d26 <__aeabi_l2d+0x16>

08009d10 <__aeabi_l2d>:
 8009d10:	ea50 0201 	orrs.w	r2, r0, r1
 8009d14:	bf08      	it	eq
 8009d16:	4770      	bxeq	lr
 8009d18:	b530      	push	{r4, r5, lr}
 8009d1a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8009d1e:	d502      	bpl.n	8009d26 <__aeabi_l2d+0x16>
 8009d20:	4240      	negs	r0, r0
 8009d22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8009d26:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8009d2a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8009d2e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8009d32:	f43f aedc 	beq.w	8009aee <__adddf3+0xe6>
 8009d36:	f04f 0203 	mov.w	r2, #3
 8009d3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009d3e:	bf18      	it	ne
 8009d40:	3203      	addne	r2, #3
 8009d42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009d46:	bf18      	it	ne
 8009d48:	3203      	addne	r2, #3
 8009d4a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8009d4e:	f1c2 0320 	rsb	r3, r2, #32
 8009d52:	fa00 fc03 	lsl.w	ip, r0, r3
 8009d56:	fa20 f002 	lsr.w	r0, r0, r2
 8009d5a:	fa01 fe03 	lsl.w	lr, r1, r3
 8009d5e:	ea40 000e 	orr.w	r0, r0, lr
 8009d62:	fa21 f102 	lsr.w	r1, r1, r2
 8009d66:	4414      	add	r4, r2
 8009d68:	e6c1      	b.n	8009aee <__adddf3+0xe6>
 8009d6a:	bf00      	nop

08009d6c <__aeabi_dmul>:
 8009d6c:	b570      	push	{r4, r5, r6, lr}
 8009d6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8009d72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8009d76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8009d7a:	bf1d      	ittte	ne
 8009d7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8009d80:	ea94 0f0c 	teqne	r4, ip
 8009d84:	ea95 0f0c 	teqne	r5, ip
 8009d88:	f000 f8de 	bleq	8009f48 <__aeabi_dmul+0x1dc>
 8009d8c:	442c      	add	r4, r5
 8009d8e:	ea81 0603 	eor.w	r6, r1, r3
 8009d92:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8009d96:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8009d9a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8009d9e:	bf18      	it	ne
 8009da0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8009da4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009da8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dac:	d038      	beq.n	8009e20 <__aeabi_dmul+0xb4>
 8009dae:	fba0 ce02 	umull	ip, lr, r0, r2
 8009db2:	f04f 0500 	mov.w	r5, #0
 8009db6:	fbe1 e502 	umlal	lr, r5, r1, r2
 8009dba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8009dbe:	fbe0 e503 	umlal	lr, r5, r0, r3
 8009dc2:	f04f 0600 	mov.w	r6, #0
 8009dc6:	fbe1 5603 	umlal	r5, r6, r1, r3
 8009dca:	f09c 0f00 	teq	ip, #0
 8009dce:	bf18      	it	ne
 8009dd0:	f04e 0e01 	orrne.w	lr, lr, #1
 8009dd4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8009dd8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8009ddc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8009de0:	d204      	bcs.n	8009dec <__aeabi_dmul+0x80>
 8009de2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8009de6:	416d      	adcs	r5, r5
 8009de8:	eb46 0606 	adc.w	r6, r6, r6
 8009dec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8009df0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8009df4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8009df8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8009dfc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8009e00:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8009e04:	bf88      	it	hi
 8009e06:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8009e0a:	d81e      	bhi.n	8009e4a <__aeabi_dmul+0xde>
 8009e0c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8009e10:	bf08      	it	eq
 8009e12:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8009e16:	f150 0000 	adcs.w	r0, r0, #0
 8009e1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8009e1e:	bd70      	pop	{r4, r5, r6, pc}
 8009e20:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8009e24:	ea46 0101 	orr.w	r1, r6, r1
 8009e28:	ea40 0002 	orr.w	r0, r0, r2
 8009e2c:	ea81 0103 	eor.w	r1, r1, r3
 8009e30:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8009e34:	bfc2      	ittt	gt
 8009e36:	ebd4 050c 	rsbsgt	r5, r4, ip
 8009e3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8009e3e:	bd70      	popgt	{r4, r5, r6, pc}
 8009e40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009e44:	f04f 0e00 	mov.w	lr, #0
 8009e48:	3c01      	subs	r4, #1
 8009e4a:	f300 80ab 	bgt.w	8009fa4 <__aeabi_dmul+0x238>
 8009e4e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8009e52:	bfde      	ittt	le
 8009e54:	2000      	movle	r0, #0
 8009e56:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8009e5a:	bd70      	pople	{r4, r5, r6, pc}
 8009e5c:	f1c4 0400 	rsb	r4, r4, #0
 8009e60:	3c20      	subs	r4, #32
 8009e62:	da35      	bge.n	8009ed0 <__aeabi_dmul+0x164>
 8009e64:	340c      	adds	r4, #12
 8009e66:	dc1b      	bgt.n	8009ea0 <__aeabi_dmul+0x134>
 8009e68:	f104 0414 	add.w	r4, r4, #20
 8009e6c:	f1c4 0520 	rsb	r5, r4, #32
 8009e70:	fa00 f305 	lsl.w	r3, r0, r5
 8009e74:	fa20 f004 	lsr.w	r0, r0, r4
 8009e78:	fa01 f205 	lsl.w	r2, r1, r5
 8009e7c:	ea40 0002 	orr.w	r0, r0, r2
 8009e80:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8009e84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009e88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8009e8c:	fa21 f604 	lsr.w	r6, r1, r4
 8009e90:	eb42 0106 	adc.w	r1, r2, r6
 8009e94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009e98:	bf08      	it	eq
 8009e9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8009e9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ea0:	f1c4 040c 	rsb	r4, r4, #12
 8009ea4:	f1c4 0520 	rsb	r5, r4, #32
 8009ea8:	fa00 f304 	lsl.w	r3, r0, r4
 8009eac:	fa20 f005 	lsr.w	r0, r0, r5
 8009eb0:	fa01 f204 	lsl.w	r2, r1, r4
 8009eb4:	ea40 0002 	orr.w	r0, r0, r2
 8009eb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009ebc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8009ec0:	f141 0100 	adc.w	r1, r1, #0
 8009ec4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009ec8:	bf08      	it	eq
 8009eca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8009ece:	bd70      	pop	{r4, r5, r6, pc}
 8009ed0:	f1c4 0520 	rsb	r5, r4, #32
 8009ed4:	fa00 f205 	lsl.w	r2, r0, r5
 8009ed8:	ea4e 0e02 	orr.w	lr, lr, r2
 8009edc:	fa20 f304 	lsr.w	r3, r0, r4
 8009ee0:	fa01 f205 	lsl.w	r2, r1, r5
 8009ee4:	ea43 0302 	orr.w	r3, r3, r2
 8009ee8:	fa21 f004 	lsr.w	r0, r1, r4
 8009eec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009ef0:	fa21 f204 	lsr.w	r2, r1, r4
 8009ef4:	ea20 0002 	bic.w	r0, r0, r2
 8009ef8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8009efc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009f00:	bf08      	it	eq
 8009f02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8009f06:	bd70      	pop	{r4, r5, r6, pc}
 8009f08:	f094 0f00 	teq	r4, #0
 8009f0c:	d10f      	bne.n	8009f2e <__aeabi_dmul+0x1c2>
 8009f0e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8009f12:	0040      	lsls	r0, r0, #1
 8009f14:	eb41 0101 	adc.w	r1, r1, r1
 8009f18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009f1c:	bf08      	it	eq
 8009f1e:	3c01      	subeq	r4, #1
 8009f20:	d0f7      	beq.n	8009f12 <__aeabi_dmul+0x1a6>
 8009f22:	ea41 0106 	orr.w	r1, r1, r6
 8009f26:	f095 0f00 	teq	r5, #0
 8009f2a:	bf18      	it	ne
 8009f2c:	4770      	bxne	lr
 8009f2e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8009f32:	0052      	lsls	r2, r2, #1
 8009f34:	eb43 0303 	adc.w	r3, r3, r3
 8009f38:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8009f3c:	bf08      	it	eq
 8009f3e:	3d01      	subeq	r5, #1
 8009f40:	d0f7      	beq.n	8009f32 <__aeabi_dmul+0x1c6>
 8009f42:	ea43 0306 	orr.w	r3, r3, r6
 8009f46:	4770      	bx	lr
 8009f48:	ea94 0f0c 	teq	r4, ip
 8009f4c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8009f50:	bf18      	it	ne
 8009f52:	ea95 0f0c 	teqne	r5, ip
 8009f56:	d00c      	beq.n	8009f72 <__aeabi_dmul+0x206>
 8009f58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8009f5c:	bf18      	it	ne
 8009f5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8009f62:	d1d1      	bne.n	8009f08 <__aeabi_dmul+0x19c>
 8009f64:	ea81 0103 	eor.w	r1, r1, r3
 8009f68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009f6c:	f04f 0000 	mov.w	r0, #0
 8009f70:	bd70      	pop	{r4, r5, r6, pc}
 8009f72:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8009f76:	bf06      	itte	eq
 8009f78:	4610      	moveq	r0, r2
 8009f7a:	4619      	moveq	r1, r3
 8009f7c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8009f80:	d019      	beq.n	8009fb6 <__aeabi_dmul+0x24a>
 8009f82:	ea94 0f0c 	teq	r4, ip
 8009f86:	d102      	bne.n	8009f8e <__aeabi_dmul+0x222>
 8009f88:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8009f8c:	d113      	bne.n	8009fb6 <__aeabi_dmul+0x24a>
 8009f8e:	ea95 0f0c 	teq	r5, ip
 8009f92:	d105      	bne.n	8009fa0 <__aeabi_dmul+0x234>
 8009f94:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8009f98:	bf1c      	itt	ne
 8009f9a:	4610      	movne	r0, r2
 8009f9c:	4619      	movne	r1, r3
 8009f9e:	d10a      	bne.n	8009fb6 <__aeabi_dmul+0x24a>
 8009fa0:	ea81 0103 	eor.w	r1, r1, r3
 8009fa4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009fa8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8009fac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009fb0:	f04f 0000 	mov.w	r0, #0
 8009fb4:	bd70      	pop	{r4, r5, r6, pc}
 8009fb6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8009fba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8009fbe:	bd70      	pop	{r4, r5, r6, pc}

08009fc0 <__aeabi_ddiv>:
 8009fc0:	b570      	push	{r4, r5, r6, lr}
 8009fc2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8009fc6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8009fca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8009fce:	bf1d      	ittte	ne
 8009fd0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8009fd4:	ea94 0f0c 	teqne	r4, ip
 8009fd8:	ea95 0f0c 	teqne	r5, ip
 8009fdc:	f000 f8a7 	bleq	800a12e <__aeabi_ddiv+0x16e>
 8009fe0:	eba4 0405 	sub.w	r4, r4, r5
 8009fe4:	ea81 0e03 	eor.w	lr, r1, r3
 8009fe8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8009fec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8009ff0:	f000 8088 	beq.w	800a104 <__aeabi_ddiv+0x144>
 8009ff4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8009ff8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8009ffc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800a000:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800a004:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800a008:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800a00c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800a010:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800a014:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800a018:	429d      	cmp	r5, r3
 800a01a:	bf08      	it	eq
 800a01c:	4296      	cmpeq	r6, r2
 800a01e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800a022:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800a026:	d202      	bcs.n	800a02e <__aeabi_ddiv+0x6e>
 800a028:	085b      	lsrs	r3, r3, #1
 800a02a:	ea4f 0232 	mov.w	r2, r2, rrx
 800a02e:	1ab6      	subs	r6, r6, r2
 800a030:	eb65 0503 	sbc.w	r5, r5, r3
 800a034:	085b      	lsrs	r3, r3, #1
 800a036:	ea4f 0232 	mov.w	r2, r2, rrx
 800a03a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a03e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800a042:	ebb6 0e02 	subs.w	lr, r6, r2
 800a046:	eb75 0e03 	sbcs.w	lr, r5, r3
 800a04a:	bf22      	ittt	cs
 800a04c:	1ab6      	subcs	r6, r6, r2
 800a04e:	4675      	movcs	r5, lr
 800a050:	ea40 000c 	orrcs.w	r0, r0, ip
 800a054:	085b      	lsrs	r3, r3, #1
 800a056:	ea4f 0232 	mov.w	r2, r2, rrx
 800a05a:	ebb6 0e02 	subs.w	lr, r6, r2
 800a05e:	eb75 0e03 	sbcs.w	lr, r5, r3
 800a062:	bf22      	ittt	cs
 800a064:	1ab6      	subcs	r6, r6, r2
 800a066:	4675      	movcs	r5, lr
 800a068:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800a06c:	085b      	lsrs	r3, r3, #1
 800a06e:	ea4f 0232 	mov.w	r2, r2, rrx
 800a072:	ebb6 0e02 	subs.w	lr, r6, r2
 800a076:	eb75 0e03 	sbcs.w	lr, r5, r3
 800a07a:	bf22      	ittt	cs
 800a07c:	1ab6      	subcs	r6, r6, r2
 800a07e:	4675      	movcs	r5, lr
 800a080:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800a084:	085b      	lsrs	r3, r3, #1
 800a086:	ea4f 0232 	mov.w	r2, r2, rrx
 800a08a:	ebb6 0e02 	subs.w	lr, r6, r2
 800a08e:	eb75 0e03 	sbcs.w	lr, r5, r3
 800a092:	bf22      	ittt	cs
 800a094:	1ab6      	subcs	r6, r6, r2
 800a096:	4675      	movcs	r5, lr
 800a098:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800a09c:	ea55 0e06 	orrs.w	lr, r5, r6
 800a0a0:	d018      	beq.n	800a0d4 <__aeabi_ddiv+0x114>
 800a0a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800a0a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800a0aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800a0ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800a0b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800a0b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800a0ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800a0be:	d1c0      	bne.n	800a042 <__aeabi_ddiv+0x82>
 800a0c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800a0c4:	d10b      	bne.n	800a0de <__aeabi_ddiv+0x11e>
 800a0c6:	ea41 0100 	orr.w	r1, r1, r0
 800a0ca:	f04f 0000 	mov.w	r0, #0
 800a0ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800a0d2:	e7b6      	b.n	800a042 <__aeabi_ddiv+0x82>
 800a0d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800a0d8:	bf04      	itt	eq
 800a0da:	4301      	orreq	r1, r0
 800a0dc:	2000      	moveq	r0, #0
 800a0de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800a0e2:	bf88      	it	hi
 800a0e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800a0e8:	f63f aeaf 	bhi.w	8009e4a <__aeabi_dmul+0xde>
 800a0ec:	ebb5 0c03 	subs.w	ip, r5, r3
 800a0f0:	bf04      	itt	eq
 800a0f2:	ebb6 0c02 	subseq.w	ip, r6, r2
 800a0f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800a0fa:	f150 0000 	adcs.w	r0, r0, #0
 800a0fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800a102:	bd70      	pop	{r4, r5, r6, pc}
 800a104:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800a108:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800a10c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800a110:	bfc2      	ittt	gt
 800a112:	ebd4 050c 	rsbsgt	r5, r4, ip
 800a116:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800a11a:	bd70      	popgt	{r4, r5, r6, pc}
 800a11c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a120:	f04f 0e00 	mov.w	lr, #0
 800a124:	3c01      	subs	r4, #1
 800a126:	e690      	b.n	8009e4a <__aeabi_dmul+0xde>
 800a128:	ea45 0e06 	orr.w	lr, r5, r6
 800a12c:	e68d      	b.n	8009e4a <__aeabi_dmul+0xde>
 800a12e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800a132:	ea94 0f0c 	teq	r4, ip
 800a136:	bf08      	it	eq
 800a138:	ea95 0f0c 	teqeq	r5, ip
 800a13c:	f43f af3b 	beq.w	8009fb6 <__aeabi_dmul+0x24a>
 800a140:	ea94 0f0c 	teq	r4, ip
 800a144:	d10a      	bne.n	800a15c <__aeabi_ddiv+0x19c>
 800a146:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800a14a:	f47f af34 	bne.w	8009fb6 <__aeabi_dmul+0x24a>
 800a14e:	ea95 0f0c 	teq	r5, ip
 800a152:	f47f af25 	bne.w	8009fa0 <__aeabi_dmul+0x234>
 800a156:	4610      	mov	r0, r2
 800a158:	4619      	mov	r1, r3
 800a15a:	e72c      	b.n	8009fb6 <__aeabi_dmul+0x24a>
 800a15c:	ea95 0f0c 	teq	r5, ip
 800a160:	d106      	bne.n	800a170 <__aeabi_ddiv+0x1b0>
 800a162:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800a166:	f43f aefd 	beq.w	8009f64 <__aeabi_dmul+0x1f8>
 800a16a:	4610      	mov	r0, r2
 800a16c:	4619      	mov	r1, r3
 800a16e:	e722      	b.n	8009fb6 <__aeabi_dmul+0x24a>
 800a170:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800a174:	bf18      	it	ne
 800a176:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800a17a:	f47f aec5 	bne.w	8009f08 <__aeabi_dmul+0x19c>
 800a17e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800a182:	f47f af0d 	bne.w	8009fa0 <__aeabi_dmul+0x234>
 800a186:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800a18a:	f47f aeeb 	bne.w	8009f64 <__aeabi_dmul+0x1f8>
 800a18e:	e712      	b.n	8009fb6 <__aeabi_dmul+0x24a>

0800a190 <__gedf2>:
 800a190:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800a194:	e006      	b.n	800a1a4 <__cmpdf2+0x4>
 800a196:	bf00      	nop

0800a198 <__ledf2>:
 800a198:	f04f 0c01 	mov.w	ip, #1
 800a19c:	e002      	b.n	800a1a4 <__cmpdf2+0x4>
 800a19e:	bf00      	nop

0800a1a0 <__cmpdf2>:
 800a1a0:	f04f 0c01 	mov.w	ip, #1
 800a1a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 800a1a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800a1ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800a1b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800a1b4:	bf18      	it	ne
 800a1b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800a1ba:	d01b      	beq.n	800a1f4 <__cmpdf2+0x54>
 800a1bc:	b001      	add	sp, #4
 800a1be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800a1c2:	bf0c      	ite	eq
 800a1c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800a1c8:	ea91 0f03 	teqne	r1, r3
 800a1cc:	bf02      	ittt	eq
 800a1ce:	ea90 0f02 	teqeq	r0, r2
 800a1d2:	2000      	moveq	r0, #0
 800a1d4:	4770      	bxeq	lr
 800a1d6:	f110 0f00 	cmn.w	r0, #0
 800a1da:	ea91 0f03 	teq	r1, r3
 800a1de:	bf58      	it	pl
 800a1e0:	4299      	cmppl	r1, r3
 800a1e2:	bf08      	it	eq
 800a1e4:	4290      	cmpeq	r0, r2
 800a1e6:	bf2c      	ite	cs
 800a1e8:	17d8      	asrcs	r0, r3, #31
 800a1ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800a1ee:	f040 0001 	orr.w	r0, r0, #1
 800a1f2:	4770      	bx	lr
 800a1f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800a1f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800a1fc:	d102      	bne.n	800a204 <__cmpdf2+0x64>
 800a1fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800a202:	d107      	bne.n	800a214 <__cmpdf2+0x74>
 800a204:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800a208:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800a20c:	d1d6      	bne.n	800a1bc <__cmpdf2+0x1c>
 800a20e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800a212:	d0d3      	beq.n	800a1bc <__cmpdf2+0x1c>
 800a214:	f85d 0b04 	ldr.w	r0, [sp], #4
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop

0800a21c <__aeabi_cdrcmple>:
 800a21c:	4684      	mov	ip, r0
 800a21e:	4610      	mov	r0, r2
 800a220:	4662      	mov	r2, ip
 800a222:	468c      	mov	ip, r1
 800a224:	4619      	mov	r1, r3
 800a226:	4663      	mov	r3, ip
 800a228:	e000      	b.n	800a22c <__aeabi_cdcmpeq>
 800a22a:	bf00      	nop

0800a22c <__aeabi_cdcmpeq>:
 800a22c:	b501      	push	{r0, lr}
 800a22e:	f7ff ffb7 	bl	800a1a0 <__cmpdf2>
 800a232:	2800      	cmp	r0, #0
 800a234:	bf48      	it	mi
 800a236:	f110 0f00 	cmnmi.w	r0, #0
 800a23a:	bd01      	pop	{r0, pc}

0800a23c <__aeabi_dcmpeq>:
 800a23c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800a240:	f7ff fff4 	bl	800a22c <__aeabi_cdcmpeq>
 800a244:	bf0c      	ite	eq
 800a246:	2001      	moveq	r0, #1
 800a248:	2000      	movne	r0, #0
 800a24a:	f85d fb08 	ldr.w	pc, [sp], #8
 800a24e:	bf00      	nop

0800a250 <__aeabi_dcmplt>:
 800a250:	f84d ed08 	str.w	lr, [sp, #-8]!
 800a254:	f7ff ffea 	bl	800a22c <__aeabi_cdcmpeq>
 800a258:	bf34      	ite	cc
 800a25a:	2001      	movcc	r0, #1
 800a25c:	2000      	movcs	r0, #0
 800a25e:	f85d fb08 	ldr.w	pc, [sp], #8
 800a262:	bf00      	nop

0800a264 <__aeabi_dcmple>:
 800a264:	f84d ed08 	str.w	lr, [sp, #-8]!
 800a268:	f7ff ffe0 	bl	800a22c <__aeabi_cdcmpeq>
 800a26c:	bf94      	ite	ls
 800a26e:	2001      	movls	r0, #1
 800a270:	2000      	movhi	r0, #0
 800a272:	f85d fb08 	ldr.w	pc, [sp], #8
 800a276:	bf00      	nop

0800a278 <__aeabi_dcmpge>:
 800a278:	f84d ed08 	str.w	lr, [sp, #-8]!
 800a27c:	f7ff ffce 	bl	800a21c <__aeabi_cdrcmple>
 800a280:	bf94      	ite	ls
 800a282:	2001      	movls	r0, #1
 800a284:	2000      	movhi	r0, #0
 800a286:	f85d fb08 	ldr.w	pc, [sp], #8
 800a28a:	bf00      	nop

0800a28c <__aeabi_dcmpgt>:
 800a28c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800a290:	f7ff ffc4 	bl	800a21c <__aeabi_cdrcmple>
 800a294:	bf34      	ite	cc
 800a296:	2001      	movcc	r0, #1
 800a298:	2000      	movcs	r0, #0
 800a29a:	f85d fb08 	ldr.w	pc, [sp], #8
 800a29e:	bf00      	nop

0800a2a0 <__aeabi_d2iz>:
 800a2a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800a2a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800a2a8:	d215      	bcs.n	800a2d6 <__aeabi_d2iz+0x36>
 800a2aa:	d511      	bpl.n	800a2d0 <__aeabi_d2iz+0x30>
 800a2ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800a2b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800a2b4:	d912      	bls.n	800a2dc <__aeabi_d2iz+0x3c>
 800a2b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800a2ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a2be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800a2c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800a2c6:	fa23 f002 	lsr.w	r0, r3, r2
 800a2ca:	bf18      	it	ne
 800a2cc:	4240      	negne	r0, r0
 800a2ce:	4770      	bx	lr
 800a2d0:	f04f 0000 	mov.w	r0, #0
 800a2d4:	4770      	bx	lr
 800a2d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800a2da:	d105      	bne.n	800a2e8 <__aeabi_d2iz+0x48>
 800a2dc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800a2e0:	bf08      	it	eq
 800a2e2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800a2e6:	4770      	bx	lr
 800a2e8:	f04f 0000 	mov.w	r0, #0
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop

0800a2f0 <__aeabi_uldivmod>:
 800a2f0:	b953      	cbnz	r3, 800a308 <__aeabi_uldivmod+0x18>
 800a2f2:	b94a      	cbnz	r2, 800a308 <__aeabi_uldivmod+0x18>
 800a2f4:	2900      	cmp	r1, #0
 800a2f6:	bf08      	it	eq
 800a2f8:	2800      	cmpeq	r0, #0
 800a2fa:	bf1c      	itt	ne
 800a2fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800a300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800a304:	f000 b83c 	b.w	800a380 <__aeabi_idiv0>
 800a308:	b082      	sub	sp, #8
 800a30a:	46ec      	mov	ip, sp
 800a30c:	e92d 5000 	stmdb	sp!, {ip, lr}
 800a310:	f000 f81e 	bl	800a350 <__gnu_uldivmod_helper>
 800a314:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a318:	b002      	add	sp, #8
 800a31a:	bc0c      	pop	{r2, r3}
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop

0800a320 <__gnu_ldivmod_helper>:
 800a320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a324:	9c06      	ldr	r4, [sp, #24]
 800a326:	4615      	mov	r5, r2
 800a328:	4606      	mov	r6, r0
 800a32a:	460f      	mov	r7, r1
 800a32c:	4698      	mov	r8, r3
 800a32e:	f000 f829 	bl	800a384 <__divdi3>
 800a332:	fb05 f301 	mul.w	r3, r5, r1
 800a336:	fb00 3808 	mla	r8, r0, r8, r3
 800a33a:	fba5 2300 	umull	r2, r3, r5, r0
 800a33e:	1ab2      	subs	r2, r6, r2
 800a340:	4443      	add	r3, r8
 800a342:	eb67 0303 	sbc.w	r3, r7, r3
 800a346:	e9c4 2300 	strd	r2, r3, [r4]
 800a34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a34e:	bf00      	nop

0800a350 <__gnu_uldivmod_helper>:
 800a350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a354:	9c06      	ldr	r4, [sp, #24]
 800a356:	4690      	mov	r8, r2
 800a358:	4606      	mov	r6, r0
 800a35a:	460f      	mov	r7, r1
 800a35c:	461d      	mov	r5, r3
 800a35e:	f000 f95f 	bl	800a620 <__udivdi3>
 800a362:	fb00 f505 	mul.w	r5, r0, r5
 800a366:	fba0 2308 	umull	r2, r3, r0, r8
 800a36a:	fb08 5501 	mla	r5, r8, r1, r5
 800a36e:	1ab2      	subs	r2, r6, r2
 800a370:	442b      	add	r3, r5
 800a372:	eb67 0303 	sbc.w	r3, r7, r3
 800a376:	e9c4 2300 	strd	r2, r3, [r4]
 800a37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a37e:	bf00      	nop

0800a380 <__aeabi_idiv0>:
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop

0800a384 <__divdi3>:
 800a384:	2900      	cmp	r1, #0
 800a386:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a38a:	f2c0 80a6 	blt.w	800a4da <__divdi3+0x156>
 800a38e:	2600      	movs	r6, #0
 800a390:	2b00      	cmp	r3, #0
 800a392:	f2c0 809c 	blt.w	800a4ce <__divdi3+0x14a>
 800a396:	4688      	mov	r8, r1
 800a398:	4694      	mov	ip, r2
 800a39a:	469e      	mov	lr, r3
 800a39c:	4615      	mov	r5, r2
 800a39e:	4604      	mov	r4, r0
 800a3a0:	460f      	mov	r7, r1
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d13d      	bne.n	800a422 <__divdi3+0x9e>
 800a3a6:	428a      	cmp	r2, r1
 800a3a8:	d959      	bls.n	800a45e <__divdi3+0xda>
 800a3aa:	fab2 f382 	clz	r3, r2
 800a3ae:	b13b      	cbz	r3, 800a3c0 <__divdi3+0x3c>
 800a3b0:	f1c3 0220 	rsb	r2, r3, #32
 800a3b4:	409f      	lsls	r7, r3
 800a3b6:	fa20 f202 	lsr.w	r2, r0, r2
 800a3ba:	409d      	lsls	r5, r3
 800a3bc:	4317      	orrs	r7, r2
 800a3be:	409c      	lsls	r4, r3
 800a3c0:	0c29      	lsrs	r1, r5, #16
 800a3c2:	0c22      	lsrs	r2, r4, #16
 800a3c4:	fbb7 fef1 	udiv	lr, r7, r1
 800a3c8:	b2a8      	uxth	r0, r5
 800a3ca:	fb01 771e 	mls	r7, r1, lr, r7
 800a3ce:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800a3d2:	fb00 f30e 	mul.w	r3, r0, lr
 800a3d6:	42bb      	cmp	r3, r7
 800a3d8:	d90a      	bls.n	800a3f0 <__divdi3+0x6c>
 800a3da:	197f      	adds	r7, r7, r5
 800a3dc:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
 800a3e0:	f080 8105 	bcs.w	800a5ee <__divdi3+0x26a>
 800a3e4:	42bb      	cmp	r3, r7
 800a3e6:	f240 8102 	bls.w	800a5ee <__divdi3+0x26a>
 800a3ea:	f1ae 0e02 	sub.w	lr, lr, #2
 800a3ee:	442f      	add	r7, r5
 800a3f0:	1aff      	subs	r7, r7, r3
 800a3f2:	b2a4      	uxth	r4, r4
 800a3f4:	fbb7 f3f1 	udiv	r3, r7, r1
 800a3f8:	fb01 7713 	mls	r7, r1, r3, r7
 800a3fc:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800a400:	fb00 f003 	mul.w	r0, r0, r3
 800a404:	42b8      	cmp	r0, r7
 800a406:	d908      	bls.n	800a41a <__divdi3+0x96>
 800a408:	197f      	adds	r7, r7, r5
 800a40a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800a40e:	f080 80f0 	bcs.w	800a5f2 <__divdi3+0x26e>
 800a412:	42b8      	cmp	r0, r7
 800a414:	f240 80ed 	bls.w	800a5f2 <__divdi3+0x26e>
 800a418:	3b02      	subs	r3, #2
 800a41a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800a41e:	2200      	movs	r2, #0
 800a420:	e003      	b.n	800a42a <__divdi3+0xa6>
 800a422:	428b      	cmp	r3, r1
 800a424:	d90f      	bls.n	800a446 <__divdi3+0xc2>
 800a426:	2200      	movs	r2, #0
 800a428:	4613      	mov	r3, r2
 800a42a:	1c34      	adds	r4, r6, #0
 800a42c:	bf18      	it	ne
 800a42e:	2401      	movne	r4, #1
 800a430:	4260      	negs	r0, r4
 800a432:	f04f 0500 	mov.w	r5, #0
 800a436:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 800a43a:	4058      	eors	r0, r3
 800a43c:	4051      	eors	r1, r2
 800a43e:	1900      	adds	r0, r0, r4
 800a440:	4169      	adcs	r1, r5
 800a442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a446:	fab3 f283 	clz	r2, r3
 800a44a:	2a00      	cmp	r2, #0
 800a44c:	f040 8086 	bne.w	800a55c <__divdi3+0x1d8>
 800a450:	428b      	cmp	r3, r1
 800a452:	d302      	bcc.n	800a45a <__divdi3+0xd6>
 800a454:	4584      	cmp	ip, r0
 800a456:	f200 80db 	bhi.w	800a610 <__divdi3+0x28c>
 800a45a:	2301      	movs	r3, #1
 800a45c:	e7e5      	b.n	800a42a <__divdi3+0xa6>
 800a45e:	b912      	cbnz	r2, 800a466 <__divdi3+0xe2>
 800a460:	2301      	movs	r3, #1
 800a462:	fbb3 f5f2 	udiv	r5, r3, r2
 800a466:	fab5 f085 	clz	r0, r5
 800a46a:	2800      	cmp	r0, #0
 800a46c:	d13b      	bne.n	800a4e6 <__divdi3+0x162>
 800a46e:	1b78      	subs	r0, r7, r5
 800a470:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800a474:	fa1f fc85 	uxth.w	ip, r5
 800a478:	2201      	movs	r2, #1
 800a47a:	fbb0 f8fe 	udiv	r8, r0, lr
 800a47e:	0c21      	lsrs	r1, r4, #16
 800a480:	fb0e 0718 	mls	r7, lr, r8, r0
 800a484:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 800a488:	fb0c f308 	mul.w	r3, ip, r8
 800a48c:	42bb      	cmp	r3, r7
 800a48e:	d907      	bls.n	800a4a0 <__divdi3+0x11c>
 800a490:	197f      	adds	r7, r7, r5
 800a492:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 800a496:	d202      	bcs.n	800a49e <__divdi3+0x11a>
 800a498:	42bb      	cmp	r3, r7
 800a49a:	f200 80bd 	bhi.w	800a618 <__divdi3+0x294>
 800a49e:	4688      	mov	r8, r1
 800a4a0:	1aff      	subs	r7, r7, r3
 800a4a2:	b2a4      	uxth	r4, r4
 800a4a4:	fbb7 f3fe 	udiv	r3, r7, lr
 800a4a8:	fb0e 7713 	mls	r7, lr, r3, r7
 800a4ac:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800a4b0:	fb0c fc03 	mul.w	ip, ip, r3
 800a4b4:	45bc      	cmp	ip, r7
 800a4b6:	d907      	bls.n	800a4c8 <__divdi3+0x144>
 800a4b8:	197f      	adds	r7, r7, r5
 800a4ba:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800a4be:	d202      	bcs.n	800a4c6 <__divdi3+0x142>
 800a4c0:	45bc      	cmp	ip, r7
 800a4c2:	f200 80a7 	bhi.w	800a614 <__divdi3+0x290>
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800a4cc:	e7ad      	b.n	800a42a <__divdi3+0xa6>
 800a4ce:	4252      	negs	r2, r2
 800a4d0:	ea6f 0606 	mvn.w	r6, r6
 800a4d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800a4d8:	e75d      	b.n	800a396 <__divdi3+0x12>
 800a4da:	4240      	negs	r0, r0
 800a4dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800a4e0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800a4e4:	e754      	b.n	800a390 <__divdi3+0xc>
 800a4e6:	f1c0 0220 	rsb	r2, r0, #32
 800a4ea:	fa24 f102 	lsr.w	r1, r4, r2
 800a4ee:	fa07 f300 	lsl.w	r3, r7, r0
 800a4f2:	4085      	lsls	r5, r0
 800a4f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800a4f8:	40d7      	lsrs	r7, r2
 800a4fa:	4319      	orrs	r1, r3
 800a4fc:	fbb7 f2fe 	udiv	r2, r7, lr
 800a500:	0c0b      	lsrs	r3, r1, #16
 800a502:	fb0e 7712 	mls	r7, lr, r2, r7
 800a506:	fa1f fc85 	uxth.w	ip, r5
 800a50a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a50e:	fb0c f702 	mul.w	r7, ip, r2
 800a512:	429f      	cmp	r7, r3
 800a514:	fa04 f400 	lsl.w	r4, r4, r0
 800a518:	d907      	bls.n	800a52a <__divdi3+0x1a6>
 800a51a:	195b      	adds	r3, r3, r5
 800a51c:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800a520:	d274      	bcs.n	800a60c <__divdi3+0x288>
 800a522:	429f      	cmp	r7, r3
 800a524:	d972      	bls.n	800a60c <__divdi3+0x288>
 800a526:	3a02      	subs	r2, #2
 800a528:	442b      	add	r3, r5
 800a52a:	1bdf      	subs	r7, r3, r7
 800a52c:	b289      	uxth	r1, r1
 800a52e:	fbb7 f8fe 	udiv	r8, r7, lr
 800a532:	fb0e 7318 	mls	r3, lr, r8, r7
 800a536:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a53a:	fb0c f708 	mul.w	r7, ip, r8
 800a53e:	429f      	cmp	r7, r3
 800a540:	d908      	bls.n	800a554 <__divdi3+0x1d0>
 800a542:	195b      	adds	r3, r3, r5
 800a544:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 800a548:	d25c      	bcs.n	800a604 <__divdi3+0x280>
 800a54a:	429f      	cmp	r7, r3
 800a54c:	d95a      	bls.n	800a604 <__divdi3+0x280>
 800a54e:	f1a8 0802 	sub.w	r8, r8, #2
 800a552:	442b      	add	r3, r5
 800a554:	1bd8      	subs	r0, r3, r7
 800a556:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 800a55a:	e78e      	b.n	800a47a <__divdi3+0xf6>
 800a55c:	f1c2 0320 	rsb	r3, r2, #32
 800a560:	fa2c f103 	lsr.w	r1, ip, r3
 800a564:	fa0e fe02 	lsl.w	lr, lr, r2
 800a568:	fa20 f703 	lsr.w	r7, r0, r3
 800a56c:	ea41 0e0e 	orr.w	lr, r1, lr
 800a570:	fa08 f002 	lsl.w	r0, r8, r2
 800a574:	fa28 f103 	lsr.w	r1, r8, r3
 800a578:	ea4f 451e 	mov.w	r5, lr, lsr #16
 800a57c:	4338      	orrs	r0, r7
 800a57e:	fbb1 f8f5 	udiv	r8, r1, r5
 800a582:	0c03      	lsrs	r3, r0, #16
 800a584:	fb05 1118 	mls	r1, r5, r8, r1
 800a588:	fa1f f78e 	uxth.w	r7, lr
 800a58c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800a590:	fb07 f308 	mul.w	r3, r7, r8
 800a594:	428b      	cmp	r3, r1
 800a596:	fa0c fc02 	lsl.w	ip, ip, r2
 800a59a:	d909      	bls.n	800a5b0 <__divdi3+0x22c>
 800a59c:	eb11 010e 	adds.w	r1, r1, lr
 800a5a0:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 800a5a4:	d230      	bcs.n	800a608 <__divdi3+0x284>
 800a5a6:	428b      	cmp	r3, r1
 800a5a8:	d92e      	bls.n	800a608 <__divdi3+0x284>
 800a5aa:	f1a8 0802 	sub.w	r8, r8, #2
 800a5ae:	4471      	add	r1, lr
 800a5b0:	1ac9      	subs	r1, r1, r3
 800a5b2:	b280      	uxth	r0, r0
 800a5b4:	fbb1 f3f5 	udiv	r3, r1, r5
 800a5b8:	fb05 1113 	mls	r1, r5, r3, r1
 800a5bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800a5c0:	fb07 f703 	mul.w	r7, r7, r3
 800a5c4:	428f      	cmp	r7, r1
 800a5c6:	d908      	bls.n	800a5da <__divdi3+0x256>
 800a5c8:	eb11 010e 	adds.w	r1, r1, lr
 800a5cc:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800a5d0:	d216      	bcs.n	800a600 <__divdi3+0x27c>
 800a5d2:	428f      	cmp	r7, r1
 800a5d4:	d914      	bls.n	800a600 <__divdi3+0x27c>
 800a5d6:	3b02      	subs	r3, #2
 800a5d8:	4471      	add	r1, lr
 800a5da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800a5de:	1bc9      	subs	r1, r1, r7
 800a5e0:	fba3 890c 	umull	r8, r9, r3, ip
 800a5e4:	4549      	cmp	r1, r9
 800a5e6:	d309      	bcc.n	800a5fc <__divdi3+0x278>
 800a5e8:	d005      	beq.n	800a5f6 <__divdi3+0x272>
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	e71d      	b.n	800a42a <__divdi3+0xa6>
 800a5ee:	4696      	mov	lr, r2
 800a5f0:	e6fe      	b.n	800a3f0 <__divdi3+0x6c>
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	e711      	b.n	800a41a <__divdi3+0x96>
 800a5f6:	4094      	lsls	r4, r2
 800a5f8:	4544      	cmp	r4, r8
 800a5fa:	d2f6      	bcs.n	800a5ea <__divdi3+0x266>
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	e7f4      	b.n	800a5ea <__divdi3+0x266>
 800a600:	4603      	mov	r3, r0
 800a602:	e7ea      	b.n	800a5da <__divdi3+0x256>
 800a604:	4688      	mov	r8, r1
 800a606:	e7a5      	b.n	800a554 <__divdi3+0x1d0>
 800a608:	46c8      	mov	r8, r9
 800a60a:	e7d1      	b.n	800a5b0 <__divdi3+0x22c>
 800a60c:	4602      	mov	r2, r0
 800a60e:	e78c      	b.n	800a52a <__divdi3+0x1a6>
 800a610:	4613      	mov	r3, r2
 800a612:	e70a      	b.n	800a42a <__divdi3+0xa6>
 800a614:	3b02      	subs	r3, #2
 800a616:	e757      	b.n	800a4c8 <__divdi3+0x144>
 800a618:	f1a8 0802 	sub.w	r8, r8, #2
 800a61c:	442f      	add	r7, r5
 800a61e:	e73f      	b.n	800a4a0 <__divdi3+0x11c>

0800a620 <__udivdi3>:
 800a620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a624:	2b00      	cmp	r3, #0
 800a626:	d144      	bne.n	800a6b2 <__udivdi3+0x92>
 800a628:	428a      	cmp	r2, r1
 800a62a:	4615      	mov	r5, r2
 800a62c:	4604      	mov	r4, r0
 800a62e:	d94f      	bls.n	800a6d0 <__udivdi3+0xb0>
 800a630:	fab2 f782 	clz	r7, r2
 800a634:	460e      	mov	r6, r1
 800a636:	b14f      	cbz	r7, 800a64c <__udivdi3+0x2c>
 800a638:	f1c7 0320 	rsb	r3, r7, #32
 800a63c:	40b9      	lsls	r1, r7
 800a63e:	fa20 f603 	lsr.w	r6, r0, r3
 800a642:	fa02 f507 	lsl.w	r5, r2, r7
 800a646:	430e      	orrs	r6, r1
 800a648:	fa00 f407 	lsl.w	r4, r0, r7
 800a64c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800a650:	0c23      	lsrs	r3, r4, #16
 800a652:	fbb6 f0fe 	udiv	r0, r6, lr
 800a656:	b2af      	uxth	r7, r5
 800a658:	fb0e 6110 	mls	r1, lr, r0, r6
 800a65c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a660:	fb07 f100 	mul.w	r1, r7, r0
 800a664:	4299      	cmp	r1, r3
 800a666:	d909      	bls.n	800a67c <__udivdi3+0x5c>
 800a668:	195b      	adds	r3, r3, r5
 800a66a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800a66e:	f080 80ec 	bcs.w	800a84a <__udivdi3+0x22a>
 800a672:	4299      	cmp	r1, r3
 800a674:	f240 80e9 	bls.w	800a84a <__udivdi3+0x22a>
 800a678:	3802      	subs	r0, #2
 800a67a:	442b      	add	r3, r5
 800a67c:	1a5a      	subs	r2, r3, r1
 800a67e:	b2a4      	uxth	r4, r4
 800a680:	fbb2 f3fe 	udiv	r3, r2, lr
 800a684:	fb0e 2213 	mls	r2, lr, r3, r2
 800a688:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800a68c:	fb07 f703 	mul.w	r7, r7, r3
 800a690:	4297      	cmp	r7, r2
 800a692:	d908      	bls.n	800a6a6 <__udivdi3+0x86>
 800a694:	1952      	adds	r2, r2, r5
 800a696:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800a69a:	f080 80d8 	bcs.w	800a84e <__udivdi3+0x22e>
 800a69e:	4297      	cmp	r7, r2
 800a6a0:	f240 80d5 	bls.w	800a84e <__udivdi3+0x22e>
 800a6a4:	3b02      	subs	r3, #2
 800a6a6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800a6aa:	2600      	movs	r6, #0
 800a6ac:	4631      	mov	r1, r6
 800a6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6b2:	428b      	cmp	r3, r1
 800a6b4:	d847      	bhi.n	800a746 <__udivdi3+0x126>
 800a6b6:	fab3 f683 	clz	r6, r3
 800a6ba:	2e00      	cmp	r6, #0
 800a6bc:	d148      	bne.n	800a750 <__udivdi3+0x130>
 800a6be:	428b      	cmp	r3, r1
 800a6c0:	d302      	bcc.n	800a6c8 <__udivdi3+0xa8>
 800a6c2:	4282      	cmp	r2, r0
 800a6c4:	f200 80cd 	bhi.w	800a862 <__udivdi3+0x242>
 800a6c8:	2001      	movs	r0, #1
 800a6ca:	4631      	mov	r1, r6
 800a6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6d0:	b912      	cbnz	r2, 800a6d8 <__udivdi3+0xb8>
 800a6d2:	2501      	movs	r5, #1
 800a6d4:	fbb5 f5f2 	udiv	r5, r5, r2
 800a6d8:	fab5 f885 	clz	r8, r5
 800a6dc:	f1b8 0f00 	cmp.w	r8, #0
 800a6e0:	d177      	bne.n	800a7d2 <__udivdi3+0x1b2>
 800a6e2:	1b4a      	subs	r2, r1, r5
 800a6e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800a6e8:	b2af      	uxth	r7, r5
 800a6ea:	2601      	movs	r6, #1
 800a6ec:	fbb2 f0fe 	udiv	r0, r2, lr
 800a6f0:	0c23      	lsrs	r3, r4, #16
 800a6f2:	fb0e 2110 	mls	r1, lr, r0, r2
 800a6f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800a6fa:	fb07 f300 	mul.w	r3, r7, r0
 800a6fe:	428b      	cmp	r3, r1
 800a700:	d907      	bls.n	800a712 <__udivdi3+0xf2>
 800a702:	1949      	adds	r1, r1, r5
 800a704:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800a708:	d202      	bcs.n	800a710 <__udivdi3+0xf0>
 800a70a:	428b      	cmp	r3, r1
 800a70c:	f200 80ba 	bhi.w	800a884 <__udivdi3+0x264>
 800a710:	4610      	mov	r0, r2
 800a712:	1ac9      	subs	r1, r1, r3
 800a714:	b2a4      	uxth	r4, r4
 800a716:	fbb1 f3fe 	udiv	r3, r1, lr
 800a71a:	fb0e 1113 	mls	r1, lr, r3, r1
 800a71e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800a722:	fb07 f703 	mul.w	r7, r7, r3
 800a726:	42a7      	cmp	r7, r4
 800a728:	d908      	bls.n	800a73c <__udivdi3+0x11c>
 800a72a:	1964      	adds	r4, r4, r5
 800a72c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800a730:	f080 808f 	bcs.w	800a852 <__udivdi3+0x232>
 800a734:	42a7      	cmp	r7, r4
 800a736:	f240 808c 	bls.w	800a852 <__udivdi3+0x232>
 800a73a:	3b02      	subs	r3, #2
 800a73c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800a740:	4631      	mov	r1, r6
 800a742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a746:	2600      	movs	r6, #0
 800a748:	4630      	mov	r0, r6
 800a74a:	4631      	mov	r1, r6
 800a74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a750:	f1c6 0420 	rsb	r4, r6, #32
 800a754:	fa22 f504 	lsr.w	r5, r2, r4
 800a758:	40b3      	lsls	r3, r6
 800a75a:	432b      	orrs	r3, r5
 800a75c:	fa20 fc04 	lsr.w	ip, r0, r4
 800a760:	fa01 f706 	lsl.w	r7, r1, r6
 800a764:	fa21 f504 	lsr.w	r5, r1, r4
 800a768:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a76c:	ea4c 0707 	orr.w	r7, ip, r7
 800a770:	fbb5 f8fe 	udiv	r8, r5, lr
 800a774:	0c39      	lsrs	r1, r7, #16
 800a776:	fb0e 5518 	mls	r5, lr, r8, r5
 800a77a:	fa1f fc83 	uxth.w	ip, r3
 800a77e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800a782:	fb0c f108 	mul.w	r1, ip, r8
 800a786:	42a9      	cmp	r1, r5
 800a788:	fa02 f206 	lsl.w	r2, r2, r6
 800a78c:	d904      	bls.n	800a798 <__udivdi3+0x178>
 800a78e:	18ed      	adds	r5, r5, r3
 800a790:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 800a794:	d367      	bcc.n	800a866 <__udivdi3+0x246>
 800a796:	46a0      	mov	r8, r4
 800a798:	1a6d      	subs	r5, r5, r1
 800a79a:	b2bf      	uxth	r7, r7
 800a79c:	fbb5 f4fe 	udiv	r4, r5, lr
 800a7a0:	fb0e 5514 	mls	r5, lr, r4, r5
 800a7a4:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800a7a8:	fb0c fc04 	mul.w	ip, ip, r4
 800a7ac:	458c      	cmp	ip, r1
 800a7ae:	d904      	bls.n	800a7ba <__udivdi3+0x19a>
 800a7b0:	18c9      	adds	r1, r1, r3
 800a7b2:	f104 35ff 	add.w	r5, r4, #4294967295	; 0xffffffff
 800a7b6:	d35c      	bcc.n	800a872 <__udivdi3+0x252>
 800a7b8:	462c      	mov	r4, r5
 800a7ba:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800a7be:	ebcc 0101 	rsb	r1, ip, r1
 800a7c2:	fba4 2302 	umull	r2, r3, r4, r2
 800a7c6:	4299      	cmp	r1, r3
 800a7c8:	d348      	bcc.n	800a85c <__udivdi3+0x23c>
 800a7ca:	d044      	beq.n	800a856 <__udivdi3+0x236>
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	2600      	movs	r6, #0
 800a7d0:	e76c      	b.n	800a6ac <__udivdi3+0x8c>
 800a7d2:	f1c8 0420 	rsb	r4, r8, #32
 800a7d6:	fa01 f308 	lsl.w	r3, r1, r8
 800a7da:	fa05 f508 	lsl.w	r5, r5, r8
 800a7de:	fa20 f704 	lsr.w	r7, r0, r4
 800a7e2:	40e1      	lsrs	r1, r4
 800a7e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800a7e8:	431f      	orrs	r7, r3
 800a7ea:	fbb1 f6fe 	udiv	r6, r1, lr
 800a7ee:	0c3a      	lsrs	r2, r7, #16
 800a7f0:	fb0e 1116 	mls	r1, lr, r6, r1
 800a7f4:	fa1f fc85 	uxth.w	ip, r5
 800a7f8:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 800a7fc:	fb0c f206 	mul.w	r2, ip, r6
 800a800:	429a      	cmp	r2, r3
 800a802:	fa00 f408 	lsl.w	r4, r0, r8
 800a806:	d907      	bls.n	800a818 <__udivdi3+0x1f8>
 800a808:	195b      	adds	r3, r3, r5
 800a80a:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 800a80e:	d237      	bcs.n	800a880 <__udivdi3+0x260>
 800a810:	429a      	cmp	r2, r3
 800a812:	d935      	bls.n	800a880 <__udivdi3+0x260>
 800a814:	3e02      	subs	r6, #2
 800a816:	442b      	add	r3, r5
 800a818:	1a9b      	subs	r3, r3, r2
 800a81a:	b2bf      	uxth	r7, r7
 800a81c:	fbb3 f0fe 	udiv	r0, r3, lr
 800a820:	fb0e 3310 	mls	r3, lr, r0, r3
 800a824:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800a828:	fb0c f100 	mul.w	r1, ip, r0
 800a82c:	4299      	cmp	r1, r3
 800a82e:	d907      	bls.n	800a840 <__udivdi3+0x220>
 800a830:	195b      	adds	r3, r3, r5
 800a832:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800a836:	d221      	bcs.n	800a87c <__udivdi3+0x25c>
 800a838:	4299      	cmp	r1, r3
 800a83a:	d91f      	bls.n	800a87c <__udivdi3+0x25c>
 800a83c:	3802      	subs	r0, #2
 800a83e:	442b      	add	r3, r5
 800a840:	1a5a      	subs	r2, r3, r1
 800a842:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800a846:	4667      	mov	r7, ip
 800a848:	e750      	b.n	800a6ec <__udivdi3+0xcc>
 800a84a:	4610      	mov	r0, r2
 800a84c:	e716      	b.n	800a67c <__udivdi3+0x5c>
 800a84e:	460b      	mov	r3, r1
 800a850:	e729      	b.n	800a6a6 <__udivdi3+0x86>
 800a852:	4613      	mov	r3, r2
 800a854:	e772      	b.n	800a73c <__udivdi3+0x11c>
 800a856:	40b0      	lsls	r0, r6
 800a858:	4290      	cmp	r0, r2
 800a85a:	d2b7      	bcs.n	800a7cc <__udivdi3+0x1ac>
 800a85c:	1e60      	subs	r0, r4, #1
 800a85e:	2600      	movs	r6, #0
 800a860:	e724      	b.n	800a6ac <__udivdi3+0x8c>
 800a862:	4630      	mov	r0, r6
 800a864:	e722      	b.n	800a6ac <__udivdi3+0x8c>
 800a866:	42a9      	cmp	r1, r5
 800a868:	d995      	bls.n	800a796 <__udivdi3+0x176>
 800a86a:	f1a8 0802 	sub.w	r8, r8, #2
 800a86e:	441d      	add	r5, r3
 800a870:	e792      	b.n	800a798 <__udivdi3+0x178>
 800a872:	458c      	cmp	ip, r1
 800a874:	d9a0      	bls.n	800a7b8 <__udivdi3+0x198>
 800a876:	3c02      	subs	r4, #2
 800a878:	4419      	add	r1, r3
 800a87a:	e79e      	b.n	800a7ba <__udivdi3+0x19a>
 800a87c:	4610      	mov	r0, r2
 800a87e:	e7df      	b.n	800a840 <__udivdi3+0x220>
 800a880:	460e      	mov	r6, r1
 800a882:	e7c9      	b.n	800a818 <__udivdi3+0x1f8>
 800a884:	3802      	subs	r0, #2
 800a886:	4429      	add	r1, r5
 800a888:	e743      	b.n	800a712 <__udivdi3+0xf2>
 800a88a:	bf00      	nop
 800a88c:	72617453 	.word	0x72617453
 800a890:	676e6974 	.word	0x676e6974
 800a894:	002e2e2e 	.word	0x002e2e2e
 800a898:	206c6c41 	.word	0x206c6c41
 800a89c:	656e6f64 	.word	0x656e6f64
 800a8a0:	6573202c 	.word	0x6573202c
 800a8a4:	7620646e 	.word	0x7620646e
 800a8a8:	65206169 	.word	0x65206169
 800a8ac:	72656874 	.word	0x72656874
 800a8b0:	2e74656e 	.word	0x2e74656e
 800a8b4:	00002e2e 	.word	0x00002e2e
 800a8b8:	2044454c 	.word	0x2044454c
 800a8bc:	64206425 	.word	0x64206425
 800a8c0:	2073656f 	.word	0x2073656f
 800a8c4:	20746f6e 	.word	0x20746f6e
 800a8c8:	73697865 	.word	0x73697865
 800a8cc:	00000a74 	.word	0x00000a74
 800a8d0:	68616f77 	.word	0x68616f77
 800a8d4:	65687420 	.word	0x65687420
 800a8d8:	202e6572 	.word	0x202e6572
 800a8dc:	65697274 	.word	0x65697274
 800a8e0:	6f742064 	.word	0x6f742064
 800a8e4:	69727720 	.word	0x69727720
 800a8e8:	30206574 	.word	0x30206574
 800a8ec:	34302578 	.word	0x34302578
 800a8f0:	6f742078 	.word	0x6f742078
 800a8f4:	67657220 	.word	0x67657220
 800a8f8:	32302520 	.word	0x32302520
 800a8fc:	75622064 	.word	0x75622064
 800a900:	74692074 	.word	0x74692074
 800a904:	61657220 	.word	0x61657220
 800a908:	61622064 	.word	0x61622064
 800a90c:	25206b63 	.word	0x25206b63
 800a910:	0d783430 	.word	0x0d783430
 800a914:	0000000a 	.word	0x0000000a
 800a918:	74656e65 	.word	0x74656e65
 800a91c:	696e695f 	.word	0x696e695f
 800a920:	0d292874 	.word	0x0d292874
 800a924:	00000000 	.word	0x00000000
 800a928:	74696177 	.word	0x74696177
 800a92c:	20676e69 	.word	0x20676e69
 800a930:	20726f66 	.word	0x20726f66
 800a934:	20594850 	.word	0x20594850
 800a938:	77206f74 	.word	0x77206f74
 800a93c:	20656b61 	.word	0x20656b61
 800a940:	2e2e7075 	.word	0x2e2e7075
 800a944:	00000d2e 	.word	0x00000d2e
 800a948:	656e6f64 	.word	0x656e6f64
 800a94c:	74697720 	.word	0x74697720
 800a950:	48502068 	.word	0x48502068
 800a954:	65722059 	.word	0x65722059
 800a958:	2e746573 	.word	0x2e746573
 800a95c:	0000000d 	.word	0x0000000d
 800a960:	74746573 	.word	0x74746573
 800a964:	20676e69 	.word	0x20676e69
 800a968:	74666f73 	.word	0x74666f73
 800a96c:	65726177 	.word	0x65726177
 800a970:	72747320 	.word	0x72747320
 800a974:	72207061 	.word	0x72207061
 800a978:	73696765 	.word	0x73696765
 800a97c:	73726574 	.word	0x73726574
 800a980:	0d2e2e2e 	.word	0x0d2e2e2e
 800a984:	00000000 	.word	0x00000000
 800a988:	20594850 	.word	0x20594850
 800a98c:	20676572 	.word	0x20676572
 800a990:	64323025 	.word	0x64323025
 800a994:	30203d20 	.word	0x30203d20
 800a998:	34302578 	.word	0x34302578
 800a99c:	000a0d78 	.word	0x000a0d78

0800a9a0 <g_eth_src_mac>:
 800a9a0:	00c1f3a4 00000001 68686861 686e7520     ........ahhh unh
 800a9b0:	6c646e61 62206465 20647561 65746172     andled baud rate
 800a9c0:	6425203a 00000a0d 6c786d64 696e695f     : %d....dmxl_ini
 800a9d0:	0d292874 00000000 63656863 6d75736b     t().....checksum
 800a9e0:	69616620 3a64656c 636f6c20 30206c61      failed: local 0
 800a9f0:	32302578 3d212078 63657220 65766965     x%02x != receive
 800aa00:	78302064 78323025 00000a0d 68616f77     d 0x%02x....woah
 800aa10:	65687420 70206572 6e747261 202e7265      there partner. 
 800aa20:	78656e75 74636570 64206465 206c786d     unexpected dmxl 
 800aa30:	73207872 65746174 00000d21 6c786d64     rx state!...dmxl
 800aa40:	20642520 74617473 72207375 72757465      %d status retur
 800aa50:	656c206e 206c6576 6425203d 0000000a     n level = %d....
 800aa60:	6c756f63 74276e64 6c6f7020 7473206c     couldn't poll st
 800aa70:	73757461 74657220 206e7275 6576656c     atus return leve
 800aa80:	6f66206c 6d642072 25206c78 000a0d64     l for dmxl %d...
 800aa90:	65636572 64657669 20787220 35322040     received rx @ 25
 800aaa0:	626b2030 66207469 206d6f72 6c786d64     0 kbit from dmxl
 800aab0:	0d642520 0000000a 72206f6e 65722078      %d.....no rx re
 800aac0:	76696563 66206465 206d6f72 6c786d64     ceived from dmxl
 800aad0:	2e642520 74202e2e 6e697972 37352067      %d... trying 57
 800aae0:	20303036 64756162 0d2e2e2e 0000000a     600 baud........
 800aaf0:	00000112 06040200 14121008 00000016     ................

0800ab00 <g_takktile_palm_addrs>:
 800ab00:	66646260 74727068 007a7876              `bdfhprtvxz.

0800ab0c <g_takktile_finger_addrs>:
 800ab0c:	06040200 14121008 00000016 6b6b6174     ............takk
 800ab1c:	656c6974 6972625f 5f656764 65736572     tile_bridge_rese
 800ab2c:	0d292874 00000000 6b6b6174 656c6974     t().....takktile
 800ab3c:	69726220 20656764 72206425 25206765      bridge %d reg %
 800ab4c:	30203a64 32302578 000a0d78 656e6f64     d: 0x%02x...done
 800ab5c:	74697720 61742068 69746b6b 695f656c      with takktile_i
 800ab6c:	2874696e 00000d29 73657250 65727573     nit()...Pressure
 800ab7c:	3a322073 00000020 20643325 00000000     s 2: ...%3d ....
 800ab8c:	73657250 65727573 64252073 0000203a     Pressures %d: ..
 800ab9c:	6f636e45 20726564 203a6425 00000000     Encoder %d: ....
 800abac:	000a6425 7469656e 20726568 6f6e2030     %d..neither 0 no
 800abbc:	00322072 6e612030 2c322064 53504520     r 2.0 and 2, EPS
 800abcc:	4e4f445f 00000045 6f636553 0000646e     _DONE...Second..
 800abdc:	00000030 00000032 6e612030 2c322064     0...2...0 and 2,
 800abec:	53504520 4332495f 00000000               EPS_I2C....

0800abf8 <stateMachines>:
 800abf8:	0800304d 00000000 2001042c 0800304d     M0......,.. M0..
 800ac08:	00000001 20010430 0800304d 00000002     ....0.. M0......
 800ac18:	20010434 0800304d 00000003 20010438     4.. M0......8.. 
 800ac28:	08003659 00000000 2000007c 00000000     Y6......|.. ....
	...

0800ac64 <errSequence>:
 800ac64:	01020408 00000000 02010408 00000000     ................
 800ac74:	01040208 00000000 04010208 00000000     ................
 800ac84:	0e000804 00000000 08000804 00000000     ................
 800ac94:	04000804 00000000 02000804 00000000     ................
 800aca4:	08000204 00000000 04000204 00000000     ................
 800acb4:	02000204 00000000 01000204 00000000     ................
 800acc4:	00000043                                C...

0800acc8 <_global_impure_ptr>:
 800acc8:	20000080                                ... 

0800accc <zeroes.6926>:
 800accc:	30303030 30303030 30303030 30303030     0000000000000000
 800acdc:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 800acec:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 800acfc:	00000000 33323130 37363534 62613938     ....0123456789ab
 800ad0c:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

0800ad1c <blanks.6925>:
 800ad1c:	20202020 20202020 20202020 20202020                     
 800ad2c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 800ad3c:	49534f50 00000058 0000002e              POSIX.......

0800ad48 <__mprec_tens>:
 800ad48:	00000000 3ff00000 00000000 40240000     .......?......$@
 800ad58:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800ad68:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800ad78:	00000000 412e8480 00000000 416312d0     .......A......cA
 800ad88:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800ad98:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800ada8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800adb8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800adc8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800add8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800ade8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800adf8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800ae08:	79d99db4 44ea7843                       ...yCx.D

0800ae10 <p05.5302>:
 800ae10:	00000005 00000019 0000007d 00000000     ........}.......

0800ae20 <__mprec_bigtens>:
 800ae20:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800ae30:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800ae40:	7f73bf3c 75154fdd                       <.s..O.u

0800ae48 <__mprec_tinytens>:
 800ae48:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 800ae58:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 800ae68:	64ac6f43 0ac80628                       Co.d(...

0800ae70 <zeroes.6869>:
 800ae70:	30303030 30303030 30303030 30303030     0000000000000000

0800ae80 <blanks.6868>:
 800ae80:	20202020 20202020 20202020 20202020                     

0800ae90 <_init>:
 800ae90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae92:	bf00      	nop
 800ae94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae96:	bc08      	pop	{r3}
 800ae98:	469e      	mov	lr, r3
 800ae9a:	4770      	bx	lr

0800ae9c <__init_array_start>:
 800ae9c:	080052e9 	.word	0x080052e9

0800aea0 <__frame_dummy_init_array_entry>:
 800aea0:	08000425                                %...

0800aea4 <_fini>:
 800aea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea6:	bf00      	nop
 800aea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeaa:	bc08      	pop	{r3}
 800aeac:	469e      	mov	lr, r3
 800aeae:	4770      	bx	lr

0800aeb0 <__fini_array_start>:
 800aeb0:	08000401 	.word	0x08000401
