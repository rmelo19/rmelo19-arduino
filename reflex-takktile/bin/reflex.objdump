
bin/reflex:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_vectors>:
 8000000:	58 46 01 20 f9 06 00 08 f5 06 00 08 f5 06 00 08     XF. ............
 8000010:	f5 06 00 08 f5 06 00 08 f5 06 00 08 00 00 00 00     ................
	...
 800002c:	f5 06 00 08 f5 06 00 08 00 00 00 00 f5 06 00 08     ................
 800003c:	f5 06 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     ................
 800004c:	f5 06 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     ................
 800005c:	f5 06 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     ................
 800006c:	f5 06 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     ................
 800007c:	f5 06 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     ................
 800008c:	f5 06 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     ................
 800009c:	f5 06 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     ................
 80000ac:	f5 06 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     ................
 80000bc:	f5 06 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     ................
 80000cc:	f5 06 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     ................
 80000dc:	59 1a 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     Y...............
 80000ec:	f5 06 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     ................
 80000fc:	f5 06 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     ................
 800010c:	f5 06 00 08 95 1a 00 08 d9 1a 00 08 f5 06 00 08     ................
 800011c:	f5 06 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     ................
 800012c:	f5 06 00 08 f5 06 00 08 9d 14 00 08 f5 06 00 08     ................
 800013c:	f5 06 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     ................
 800014c:	f5 06 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     ................
 800015c:	1d 1b 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     ................
 800016c:	f5 06 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     ................
 800017c:	f5 06 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     ................
 800018c:	f5 06 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     ................
 800019c:	f5 06 00 08 f5 06 00 08 f5 06 00 08 f5 06 00 08     ................
	...

08000400 <__do_global_dtors_aux>:
 8000400:	b510      	push	{r4, lr}
 8000402:	4c05      	ldr	r4, [pc, #20]	; (8000418 <__do_global_dtors_aux+0x18>)
 8000404:	7823      	ldrb	r3, [r4, #0]
 8000406:	b933      	cbnz	r3, 8000416 <__do_global_dtors_aux+0x16>
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <__do_global_dtors_aux+0x1c>)
 800040a:	b113      	cbz	r3, 8000412 <__do_global_dtors_aux+0x12>
 800040c:	4804      	ldr	r0, [pc, #16]	; (8000420 <__do_global_dtors_aux+0x20>)
 800040e:	f3af 8000 	nop.w
 8000412:	2301      	movs	r3, #1
 8000414:	7023      	strb	r3, [r4, #0]
 8000416:	bd10      	pop	{r4, pc}
 8000418:	20000940 	.word	0x20000940
 800041c:	00000000 	.word	0x00000000
 8000420:	0800acc4 	.word	0x0800acc4

08000424 <frame_dummy>:
 8000424:	4b08      	ldr	r3, [pc, #32]	; (8000448 <frame_dummy+0x24>)
 8000426:	b510      	push	{r4, lr}
 8000428:	b11b      	cbz	r3, 8000432 <frame_dummy+0xe>
 800042a:	4808      	ldr	r0, [pc, #32]	; (800044c <frame_dummy+0x28>)
 800042c:	4908      	ldr	r1, [pc, #32]	; (8000450 <frame_dummy+0x2c>)
 800042e:	f3af 8000 	nop.w
 8000432:	4808      	ldr	r0, [pc, #32]	; (8000454 <frame_dummy+0x30>)
 8000434:	6803      	ldr	r3, [r0, #0]
 8000436:	b903      	cbnz	r3, 800043a <frame_dummy+0x16>
 8000438:	bd10      	pop	{r4, pc}
 800043a:	4b07      	ldr	r3, [pc, #28]	; (8000458 <frame_dummy+0x34>)
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0fb      	beq.n	8000438 <frame_dummy+0x14>
 8000440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000444:	4718      	bx	r3
 8000446:	bf00      	nop
 8000448:	00000000 	.word	0x00000000
 800044c:	0800acc4 	.word	0x0800acc4
 8000450:	20000944 	.word	0x20000944
 8000454:	0800ad38 	.word	0x0800ad38
 8000458:	00000000 	.word	0x00000000

0800045c <_mainCRTStartup>:
 800045c:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <_mainCRTStartup+0x58>)
 800045e:	2b00      	cmp	r3, #0
 8000460:	bf08      	it	eq
 8000462:	4b13      	ldreq	r3, [pc, #76]	; (80004b0 <_mainCRTStartup+0x54>)
 8000464:	469d      	mov	sp, r3
 8000466:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 800046a:	2100      	movs	r1, #0
 800046c:	468b      	mov	fp, r1
 800046e:	460f      	mov	r7, r1
 8000470:	4813      	ldr	r0, [pc, #76]	; (80004c0 <_mainCRTStartup+0x64>)
 8000472:	4a14      	ldr	r2, [pc, #80]	; (80004c4 <_mainCRTStartup+0x68>)
 8000474:	1a12      	subs	r2, r2, r0
 8000476:	f003 fb63 	bl	8003b40 <memset>
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <_mainCRTStartup+0x5c>)
 800047c:	2b00      	cmp	r3, #0
 800047e:	d000      	beq.n	8000482 <_mainCRTStartup+0x26>
 8000480:	4798      	blx	r3
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <_mainCRTStartup+0x60>)
 8000484:	2b00      	cmp	r3, #0
 8000486:	d000      	beq.n	800048a <_mainCRTStartup+0x2e>
 8000488:	4798      	blx	r3
 800048a:	2000      	movs	r0, #0
 800048c:	2100      	movs	r1, #0
 800048e:	0004      	movs	r4, r0
 8000490:	000d      	movs	r5, r1
 8000492:	480d      	ldr	r0, [pc, #52]	; (80004c8 <_mainCRTStartup+0x6c>)
 8000494:	2800      	cmp	r0, #0
 8000496:	d002      	beq.n	800049e <_mainCRTStartup+0x42>
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <_mainCRTStartup+0x70>)
 800049a:	f004 ff5d 	bl	8005358 <atexit>
 800049e:	f003 fa8d 	bl	80039bc <__libc_init_array>
 80004a2:	0020      	movs	r0, r4
 80004a4:	0029      	movs	r1, r5
 80004a6:	f000 f8d3 	bl	8000650 <main>
 80004aa:	f003 fa77 	bl	800399c <exit>
 80004ae:	bf00      	nop
 80004b0:	00080000 	.word	0x00080000
	...
 80004c0:	20000940 	.word	0x20000940
 80004c4:	2001065c 	.word	0x2001065c
 80004c8:	08005359 	.word	0x08005359
 80004cc:	080066ed 	.word	0x080066ed

080004d0 <configurePorts>:
  return 0;
}

void configurePorts(void)
{
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 80004d0:	4b56      	ldr	r3, [pc, #344]	; (800062c <configurePorts+0x15c>)
 80004d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004d4:	f042 020f 	orr.w	r2, r2, #15
  }
  return 0;
}

void configurePorts(void)
{
 80004d8:	b570      	push	{r4, r5, r6, lr}
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 80004da:	631a      	str	r2, [r3, #48]	; 0x30
                  RCC_AHB1ENR_GPIOBEN |
                  RCC_AHB1ENR_GPIOCEN |
                  RCC_AHB1ENR_GPIODEN;
  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN |
 80004dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  RCC_APB1ENR_I2C3EN |
                  RCC_APB1ENR_SPI2EN;
  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;

  pin_set_alternate_function(GPIOB, PORTB_I2C1_SCL, 4);
 80004de:	4d54      	ldr	r5, [pc, #336]	; (8000630 <configurePorts+0x160>)
  pin_set_alternate_function(GPIOB, PORTB_I2C1_SDA, 4);
  pin_set_output_type(GPIOB, PORTB_I2C1_SCL, PIN_OUTPUT_TYPE_OPEN_DRAIN);
  pin_set_output_type(GPIOB, PORTB_I2C1_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);

  pin_set_alternate_function(GPIOA, PORTA_I2C3_SCL, 4);
 80004e0:	4c54      	ldr	r4, [pc, #336]	; (8000634 <configurePorts+0x164>)
  pin_set_alternate_function(GPIOC, PORTC_I2C3_SDA, 4);
 80004e2:	4e55      	ldr	r6, [pc, #340]	; (8000638 <configurePorts+0x168>)
{
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
                  RCC_AHB1ENR_GPIOBEN |
                  RCC_AHB1ENR_GPIOCEN |
                  RCC_AHB1ENR_GPIODEN;
  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN |
 80004e4:	f442 0220 	orr.w	r2, r2, #10485760	; 0xa00000
 80004e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80004ec:	641a      	str	r2, [r3, #64]	; 0x40
                  RCC_APB1ENR_I2C3EN |
                  RCC_APB1ENR_SPI2EN;
  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80004ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80004f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80004f4:	645a      	str	r2, [r3, #68]	; 0x44

  pin_set_alternate_function(GPIOB, PORTB_I2C1_SCL, 4);
 80004f6:	4628      	mov	r0, r5
 80004f8:	2106      	movs	r1, #6
 80004fa:	2204      	movs	r2, #4
 80004fc:	f002 fffa 	bl	80034f4 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOB, PORTB_I2C1_SDA, 4);
 8000500:	4628      	mov	r0, r5
 8000502:	2107      	movs	r1, #7
 8000504:	2204      	movs	r2, #4
 8000506:	f002 fff5 	bl	80034f4 <pin_set_alternate_function>
  pin_set_output_type(GPIOB, PORTB_I2C1_SCL, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 800050a:	4628      	mov	r0, r5
 800050c:	2106      	movs	r1, #6
 800050e:	2201      	movs	r2, #1
 8000510:	f002 ffe2 	bl	80034d8 <pin_set_output_type>
  pin_set_output_type(GPIOB, PORTB_I2C1_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 8000514:	4628      	mov	r0, r5
 8000516:	2107      	movs	r1, #7
 8000518:	2201      	movs	r2, #1
 800051a:	f002 ffdd 	bl	80034d8 <pin_set_output_type>

  pin_set_alternate_function(GPIOA, PORTA_I2C3_SCL, 4);
 800051e:	4620      	mov	r0, r4
 8000520:	2108      	movs	r1, #8
 8000522:	2204      	movs	r2, #4
 8000524:	f002 ffe6 	bl	80034f4 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOC, PORTC_I2C3_SDA, 4);
 8000528:	4630      	mov	r0, r6
 800052a:	2109      	movs	r1, #9
 800052c:	2204      	movs	r2, #4
 800052e:	f002 ffe1 	bl	80034f4 <pin_set_alternate_function>
  pin_set_output_type(GPIOA, PORTA_I2C3_SCL, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 8000532:	4620      	mov	r0, r4
 8000534:	2108      	movs	r1, #8
 8000536:	2201      	movs	r2, #1
 8000538:	f002 ffce 	bl	80034d8 <pin_set_output_type>
  pin_set_output_type(GPIOC, PORTC_I2C3_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 800053c:	4630      	mov	r0, r6
 800053e:	2109      	movs	r1, #9
 8000540:	2201      	movs	r2, #1
 8000542:	f002 ffc9 	bl	80034d8 <pin_set_output_type>

  //I2C1->CCR |= I2C_CCR_FS | // set fast mode
  //             35; // 42 MHz / (3 * 400 kHz) == 35
  //I2C1->TRISE = 42 * 300 / 1000 + 1; // not sure here.
  I2C1->CR2   |= APB_MHZ; // 42MHz -> 101010
 8000546:	4a3d      	ldr	r2, [pc, #244]	; (800063c <configurePorts+0x16c>)
  I2C1->CCR   |= I2C_CCR; // I2C_CCR = 210
  I2C1->TRISE &= ~0x3f; // 0x3f = 0b00111111 -> 0b11000000, clearing register
  I2C1->TRISE |= I2C_TRISE; // = I2C_TRISE = (APB_MHZ * 200 / 1000 + 1), maximum rise time
  I2C1->CR1   |= I2C_CR1_PE; // peripheral enable

  I2C3->CR2   |= APB_MHZ;
 8000548:	4b3d      	ldr	r3, [pc, #244]	; (8000640 <configurePorts+0x170>)
  pin_set_output_type(GPIOC, PORTC_I2C3_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);

  //I2C1->CCR |= I2C_CCR_FS | // set fast mode
  //             35; // 42 MHz / (3 * 400 kHz) == 35
  //I2C1->TRISE = 42 * 300 / 1000 + 1; // not sure here.
  I2C1->CR2   |= APB_MHZ; // 42MHz -> 101010
 800054a:	8891      	ldrh	r1, [r2, #4]
 800054c:	b289      	uxth	r1, r1
 800054e:	f041 012a 	orr.w	r1, r1, #42	; 0x2a
 8000552:	8091      	strh	r1, [r2, #4]
  I2C1->CCR   |= I2C_CCR; // I2C_CCR = 210
 8000554:	8b91      	ldrh	r1, [r2, #28]
 8000556:	b289      	uxth	r1, r1
 8000558:	f041 01d2 	orr.w	r1, r1, #210	; 0xd2
 800055c:	8391      	strh	r1, [r2, #28]
  I2C1->TRISE &= ~0x3f; // 0x3f = 0b00111111 -> 0b11000000, clearing register
 800055e:	8c11      	ldrh	r1, [r2, #32]
 8000560:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8000564:	0409      	lsls	r1, r1, #16
 8000566:	0c09      	lsrs	r1, r1, #16
 8000568:	8411      	strh	r1, [r2, #32]
  I2C1->TRISE |= I2C_TRISE; // = I2C_TRISE = (APB_MHZ * 200 / 1000 + 1), maximum rise time
 800056a:	8c11      	ldrh	r1, [r2, #32]
 800056c:	b289      	uxth	r1, r1
 800056e:	f041 0109 	orr.w	r1, r1, #9
 8000572:	8411      	strh	r1, [r2, #32]
  I2C1->CR1   |= I2C_CR1_PE; // peripheral enable
 8000574:	8811      	ldrh	r1, [r2, #0]
 8000576:	b289      	uxth	r1, r1
 8000578:	f041 0101 	orr.w	r1, r1, #1
 800057c:	8011      	strh	r1, [r2, #0]

  I2C3->CR2   |= APB_MHZ;
 800057e:	889a      	ldrh	r2, [r3, #4]
 8000580:	b292      	uxth	r2, r2
 8000582:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 8000586:	809a      	strh	r2, [r3, #4]
  I2C3->CCR   |= I2C_CCR;
 8000588:	8b9a      	ldrh	r2, [r3, #28]
 800058a:	b292      	uxth	r2, r2
 800058c:	f042 02d2 	orr.w	r2, r2, #210	; 0xd2
 8000590:	839a      	strh	r2, [r3, #28]
  I2C3->TRISE &= ~0x3f;
 8000592:	8c1a      	ldrh	r2, [r3, #32]
 8000594:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000598:	0412      	lsls	r2, r2, #16
 800059a:	0c12      	lsrs	r2, r2, #16
 800059c:	841a      	strh	r2, [r3, #32]
  I2C3->TRISE |= I2C_TRISE;
 800059e:	8c1a      	ldrh	r2, [r3, #32]
 80005a0:	b292      	uxth	r2, r2
 80005a2:	f042 0209 	orr.w	r2, r2, #9
 80005a6:	841a      	strh	r2, [r3, #32]
  I2C3->CR1   |= I2C_CR1_PE;
 80005a8:	881a      	ldrh	r2, [r3, #0]
 80005aa:	b292      	uxth	r2, r2
 80005ac:	f042 0201 	orr.w	r2, r2, #1
 80005b0:	801a      	strh	r2, [r3, #0]

  // now, set up the spi-to-i2c bridges
  pin_set_output(GPIOC, PORTC_I2C_BRIDGE_RESET);
 80005b2:	4630      	mov	r0, r6
 80005b4:	210e      	movs	r1, #14
 80005b6:	f002 ffcb 	bl	8003550 <pin_set_output>
  pin_set_output(GPIOA, PORTA_BRIDGE0_CS);
 80005ba:	4620      	mov	r0, r4
 80005bc:	2104      	movs	r1, #4
 80005be:	f002 ffc7 	bl	8003550 <pin_set_output>
  pin_set_output(GPIOB, PORTB_BRIDGE1_CS);
 80005c2:	4628      	mov	r0, r5
 80005c4:	2109      	movs	r1, #9
 80005c6:	f002 ffc3 	bl	8003550 <pin_set_output>
  pin_set_output_level(GPIOA, PORTA_BRIDGE0_CS, 1);
 80005ca:	4620      	mov	r0, r4
 80005cc:	2104      	movs	r1, #4
 80005ce:	2201      	movs	r2, #1
 80005d0:	f002 ffce 	bl	8003570 <pin_set_output_level>
  pin_set_output_level(GPIOA, PORTB_BRIDGE1_CS, 1);
 80005d4:	4620      	mov	r0, r4
 80005d6:	2109      	movs	r1, #9
 80005d8:	2201      	movs	r2, #1
 80005da:	f002 ffc9 	bl	8003570 <pin_set_output_level>

  pin_set_alternate_function(GPIOA, PORTA_BRIDGE0_MISO, 5);
 80005de:	4620      	mov	r0, r4
 80005e0:	2106      	movs	r1, #6
 80005e2:	2205      	movs	r2, #5
 80005e4:	f002 ff86 	bl	80034f4 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOB, PORTB_BRIDGE0_MOSI, 5);
 80005e8:	2105      	movs	r1, #5
 80005ea:	460a      	mov	r2, r1
 80005ec:	4628      	mov	r0, r5
 80005ee:	f002 ff81 	bl	80034f4 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOA, PORTA_BRIDGE0_SCLK, 5);
 80005f2:	2105      	movs	r1, #5
 80005f4:	460a      	mov	r2, r1
 80005f6:	4620      	mov	r0, r4
 80005f8:	f002 ff7c 	bl	80034f4 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOC, PORTC_BRIDGE1_MISO, 5);
 80005fc:	4630      	mov	r0, r6
 80005fe:	2102      	movs	r1, #2
 8000600:	2205      	movs	r2, #5
 8000602:	f002 ff77 	bl	80034f4 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOC, PORTC_BRIDGE1_MOSI, 5);
 8000606:	4630      	mov	r0, r6
 8000608:	2103      	movs	r1, #3
 800060a:	2205      	movs	r2, #5
 800060c:	f002 ff72 	bl	80034f4 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOD, PORTD_BRIDGE1_SCLK, 5);
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <configurePorts+0x174>)
 8000612:	2103      	movs	r1, #3
 8000614:	2205      	movs	r2, #5
 8000616:	f002 ff6d 	bl	80034f4 <pin_set_alternate_function>

  // SPI1
  // running from a 84 MHz pclk. set it up with
  // sclk = pclk/64 to stay within datasheet limits.
  SPI1->CR1 = SPI_CR1_BR_2 | // sclk = pclk/64
 800061a:	490b      	ldr	r1, [pc, #44]	; (8000648 <configurePorts+0x178>)
              SPI_CR1_SSM  | // software slave-select mode
              SPI_CR1_SSI  | // the value of this bit is forced onto the NSS pin and the IO value of the NSS pin is ignored.
              SPI_CR1_SPE;   // SPI enable

  // bit rate = 42 mhz / 32 = 1.313 MHz
  SPI2->CR1 = SPI_CR1_BR_2 | // sclk = pclk/32
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <configurePorts+0x17c>)
  pin_set_alternate_function(GPIOD, PORTD_BRIDGE1_SCLK, 5);

  // SPI1
  // running from a 84 MHz pclk. set it up with
  // sclk = pclk/64 to stay within datasheet limits.
  SPI1->CR1 = SPI_CR1_BR_2 | // sclk = pclk/64
 800061e:	f240 306f 	movw	r0, #879	; 0x36f
              SPI_CR1_SSM  | // software slave-select mode
              SPI_CR1_SSI  | // the value of this bit is forced onto the NSS pin and the IO value of the NSS pin is ignored.
              SPI_CR1_SPE;   // SPI enable

  // bit rate = 42 mhz / 32 = 1.313 MHz
  SPI2->CR1 = SPI_CR1_BR_2 | // sclk = pclk/32
 8000622:	f240 3267 	movw	r2, #871	; 0x367
  pin_set_alternate_function(GPIOD, PORTD_BRIDGE1_SCLK, 5);

  // SPI1
  // running from a 84 MHz pclk. set it up with
  // sclk = pclk/64 to stay within datasheet limits.
  SPI1->CR1 = SPI_CR1_BR_2 | // sclk = pclk/64
 8000626:	8008      	strh	r0, [r1, #0]
              SPI_CR1_SSM  | // software slave-select mode
              SPI_CR1_SSI  | // the value of this bit is forced onto the NSS pin and the IO value of the NSS pin is ignored.
              SPI_CR1_SPE;   // SPI enable

  // bit rate = 42 mhz / 32 = 1.313 MHz
  SPI2->CR1 = SPI_CR1_BR_2 | // sclk = pclk/32
 8000628:	801a      	strh	r2, [r3, #0]
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	40023800 	.word	0x40023800
 8000630:	40020400 	.word	0x40020400
 8000634:	40020000 	.word	0x40020000
 8000638:	40020800 	.word	0x40020800
 800063c:	40005400 	.word	0x40005400
 8000640:	40005c00 	.word	0x40005c00
 8000644:	40020c00 	.word	0x40020c00
 8000648:	40013000 	.word	0x40013000
 800064c:	40003800 	.word	0x40003800

08000650 <main>:

// FUNCTION PROTOTYPES
void configurePorts(void);

int main()
{
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	b082      	sub	sp, #8
  // general initialization
  configurePorts();
 8000654:	f7ff ff3c 	bl	80004d0 <configurePorts>

  console_init();
 8000658:	f000 fc3a 	bl	8000ed0 <console_init>
  systime_init();
 800065c:	f001 f95a 	bl	8001914 <systime_init>
  leds_init();
 8000660:	f000 fba8 	bl	8000db4 <leds_init>
  enet_init();
 8000664:	f000 fd00 	bl	8001068 <enet_init>
  dmxl_init();
 8000668:	f001 faae 	bl	8001bc8 <dmxl_init>
  fan_init();
 800066c:	f001 ffdc 	bl	8002628 <fan_init>
  tactile_init();
 8000670:	f002 fb3c 	bl	8002cec <tactile_init>
  enc_init();
 8000674:	f002 ff86 	bl	8003584 <enc_init>
  state_init();
 8000678:	f003 f85e 	bl	8003738 <state_init>
  async_poll_init();
 800067c:	f003 f88a 	bl	8003794 <async_poll_init>
  fan_on(); // todo: be smarter. probably doesn't need to run all the time.
 8000680:	f001 ffe2 	bl	8002648 <fan_on>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000684:	b662      	cpsie	i
  __enable_irq();

  dmxl_set_baud_rates();
  dmxl_set_status_return_levels();

  volatile uint32_t prev_start_time = SYSTIME;
 8000686:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  state_init();
  async_poll_init();
  fan_on(); // todo: be smarter. probably doesn't need to run all the time.
  __enable_irq();

  dmxl_set_baud_rates();
 800068a:	f001 fcc1 	bl	8002010 <dmxl_set_baud_rates>
  dmxl_set_status_return_levels();
 800068e:	f001 fc67 	bl	8001f60 <dmxl_set_status_return_levels>

  volatile uint32_t prev_start_time = SYSTIME;
 8000692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000694:	4e16      	ldr	r6, [pc, #88]	; (80006f0 <main+0xa0>)
 8000696:	9301      	str	r3, [sp, #4]
  uint_fast8_t poll_cycles_to_skip = 0;

  for (uint_fast32_t loop_count = 1; ; loop_count++)
  {
    err_service();
    if (SYSTIME - prev_start_time >= POLL_PERIOD_US)
 8000698:	f246 15a7 	movw	r5, #24999	; 0x61a7
 800069c:	e003      	b.n	80006a6 <main+0x56>
      {
        g_state.systime = SYSTIME;
        async_poll_start();
      }
    }
    const async_poll_tick_result_t aptr = async_poll_tick();
 800069e:	f003 f87b 	bl	8003798 <async_poll_tick>
    if (aptr == APT_JUST_FINISHED)
 80006a2:	2801      	cmp	r0, #1
 80006a4:	d014      	beq.n	80006d0 <main+0x80>
  volatile uint32_t prev_start_time = SYSTIME;
  uint_fast8_t poll_cycles_to_skip = 0;

  for (uint_fast32_t loop_count = 1; ; loop_count++)
  {
    err_service();
 80006a6:	f003 f90f 	bl	80038c8 <err_service>
    if (SYSTIME - prev_start_time >= POLL_PERIOD_US)
 80006aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006ac:	9a01      	ldr	r2, [sp, #4]
 80006ae:	1a9b      	subs	r3, r3, r2
 80006b0:	42ab      	cmp	r3, r5
 80006b2:	d9f4      	bls.n	800069e <main+0x4e>
    {
      prev_start_time += POLL_PERIOD_US;
 80006b4:	9b01      	ldr	r3, [sp, #4]
 80006b6:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 80006ba:	3328      	adds	r3, #40	; 0x28
 80006bc:	9301      	str	r3, [sp, #4]
      if (poll_cycles_to_skip > 0)
        poll_cycles_to_skip--;
      else
      {
        g_state.systime = SYSTIME;
 80006be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006c0:	6872      	ldr	r2, [r6, #4]
 80006c2:	6073      	str	r3, [r6, #4]
        async_poll_start();
 80006c4:	f003 f888 	bl	80037d8 <async_poll_start>
      }
    }
    const async_poll_tick_result_t aptr = async_poll_tick();
 80006c8:	f003 f866 	bl	8003798 <async_poll_tick>
    if (aptr == APT_JUST_FINISHED)
 80006cc:	2801      	cmp	r0, #1
 80006ce:	d1ea      	bne.n	80006a6 <main+0x56>
    {
      if (enet_get_link_status() == ENET_LINK_UP)
 80006d0:	f000 ff52 	bl	8001578 <enet_get_link_status>
 80006d4:	2801      	cmp	r0, #1
        err_unset(ERR_NO_ETHERNET);
        enet_send_state();
      }
      else
      {
        err_set(ERR_NO_ETHERNET);
 80006d6:	f04f 0000 	mov.w	r0, #0
      }
    }
    const async_poll_tick_result_t aptr = async_poll_tick();
    if (aptr == APT_JUST_FINISHED)
    {
      if (enet_get_link_status() == ENET_LINK_UP)
 80006da:	d004      	beq.n	80006e6 <main+0x96>
        err_unset(ERR_NO_ETHERNET);
        enet_send_state();
      }
      else
      {
        err_set(ERR_NO_ETHERNET);
 80006dc:	f003 f952 	bl	8003984 <err_set>
      }
      enet_process_rx_ring();
 80006e0:	f001 f848 	bl	8001774 <enet_process_rx_ring>
 80006e4:	e7df      	b.n	80006a6 <main+0x56>
    const async_poll_tick_result_t aptr = async_poll_tick();
    if (aptr == APT_JUST_FINISHED)
    {
      if (enet_get_link_status() == ENET_LINK_UP)
      {
        err_unset(ERR_NO_ETHERNET);
 80006e6:	f003 f953 	bl	8003990 <err_unset>
        enet_send_state();
 80006ea:	f001 f8fd 	bl	80018e8 <enet_send_state>
 80006ee:	e7f7      	b.n	80006e0 <main+0x90>
 80006f0:	2001058c 	.word	0x2001058c

080006f4 <unmapped_vector>:
  while (1) { } // hopefully we never get here...
}

void unmapped_vector()
{
  while (1) { } // spin to allow jtag trap
 80006f4:	e7fe      	b.n	80006f4 <unmapped_vector>
 80006f6:	bf00      	nop

080006f8 <reset_vector>:
extern int main();

void startup_clock_init_fail() { while (1) { } }

void reset_vector()
{
 80006f8:	b510      	push	{r4, lr}
 80006fa:	b082      	sub	sp, #8
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
  //WDT->WDT_MR = WDT_MR_WDDIS; // disable watchdog for now
  // set up data segment
  __disable_irq();
  pSrc = &_srelocate_flash;
  pDest = &_srelocate;
  if (pSrc != pDest)
 80006fe:	4a46      	ldr	r2, [pc, #280]	; (8000818 <reset_vector+0x120>)
 8000700:	4946      	ldr	r1, [pc, #280]	; (800081c <reset_vector+0x124>)
 8000702:	428a      	cmp	r2, r1
 8000704:	d00e      	beq.n	8000724 <reset_vector+0x2c>
    for (; pDest < &_erelocate; )
 8000706:	4b46      	ldr	r3, [pc, #280]	; (8000820 <reset_vector+0x128>)
 8000708:	4299      	cmp	r1, r3
 800070a:	d20b      	bcs.n	8000724 <reset_vector+0x2c>
 800070c:	43c8      	mvns	r0, r1
 800070e:	4403      	add	r3, r0
 8000710:	f023 0303 	bic.w	r3, r3, #3
 8000714:	3304      	adds	r3, #4
 8000716:	4413      	add	r3, r2
      *pDest++ = *pSrc++;
 8000718:	f852 0b04 	ldr.w	r0, [r2], #4
 800071c:	f841 0b04 	str.w	r0, [r1], #4
  // set up data segment
  __disable_irq();
  pSrc = &_srelocate_flash;
  pDest = &_srelocate;
  if (pSrc != pDest)
    for (; pDest < &_erelocate; )
 8000720:	429a      	cmp	r2, r3
 8000722:	d1f9      	bne.n	8000718 <reset_vector+0x20>
      *pDest++ = *pSrc++;
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
 8000724:	4b3f      	ldr	r3, [pc, #252]	; (8000824 <reset_vector+0x12c>)
 8000726:	4a40      	ldr	r2, [pc, #256]	; (8000828 <reset_vector+0x130>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d20a      	bcs.n	8000742 <reset_vector+0x4a>
 800072c:	43d9      	mvns	r1, r3
 800072e:	440a      	add	r2, r1
 8000730:	f022 0203 	bic.w	r2, r2, #3
 8000734:	3204      	adds	r2, #4
 8000736:	441a      	add	r2, r3
    *pDest++ = 0;
 8000738:	2100      	movs	r1, #0
 800073a:	f843 1b04 	str.w	r1, [r3], #4
  pDest = &_srelocate;
  if (pSrc != pDest)
    for (; pDest < &_erelocate; )
      *pDest++ = *pSrc++;
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
 800073e:	4293      	cmp	r3, r2
 8000740:	d1fb      	bne.n	800073a <reset_vector+0x42>
    *pDest++ = 0;
  //__libc_init_array() ;
  SCB->CPACR |= ((3UL << (10*2)) | (3UL << (11*2))); // activate the FPU
 8000742:	493a      	ldr	r1, [pc, #232]	; (800082c <reset_vector+0x134>)
  RCC->CR |= 0x1; // ensure the HSI (internal) oscillator is on
 8000744:	4b3a      	ldr	r3, [pc, #232]	; (8000830 <reset_vector+0x138>)
      *pDest++ = *pSrc++;
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
    *pDest++ = 0;
  //__libc_init_array() ;
  SCB->CPACR |= ((3UL << (10*2)) | (3UL << (11*2))); // activate the FPU
 8000746:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
  RCC->CR |= 0x1; // ensure the HSI (internal) oscillator is on
  RCC->CFGR = 0; // ensure the HSI oscillator is the clock source
  RCC->CR &= 0xfef6ffff; // turn off the main PLL and HSE oscillator
  RCC->PLLCFGR = 0x24003010; // ensure PLLCFGR is at reset state
 800074a:	483a      	ldr	r0, [pc, #232]	; (8000834 <reset_vector+0x13c>)
      *pDest++ = *pSrc++;
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
    *pDest++ = 0;
  //__libc_init_array() ;
  SCB->CPACR |= ((3UL << (10*2)) | (3UL << (11*2))); // activate the FPU
 800074c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000750:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= 0x1; // ensure the HSI (internal) oscillator is on
 8000754:	681a      	ldr	r2, [r3, #0]
  RCC->CFGR = 0; // ensure the HSI oscillator is the clock source
 8000756:	2100      	movs	r1, #0
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
    *pDest++ = 0;
  //__libc_init_array() ;
  SCB->CPACR |= ((3UL << (10*2)) | (3UL << (11*2))); // activate the FPU
  RCC->CR |= 0x1; // ensure the HSI (internal) oscillator is on
 8000758:	f042 0201 	orr.w	r2, r2, #1
 800075c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0; // ensure the HSI oscillator is the clock source
 800075e:	6099      	str	r1, [r3, #8]
  RCC->CR &= 0xfef6ffff; // turn off the main PLL and HSE oscillator
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000766:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800076a:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010; // ensure PLLCFGR is at reset state
 800076c:	6058      	str	r0, [r3, #4]
  RCC->CR &= 0xfffbffff; // reset HSEBYP (i.e., HSE is *not* bypassed)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000774:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x0; // disable all RCC interrupts
 8000776:	60d9      	str	r1, [r3, #12]
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800077e:	601a      	str	r2, [r3, #0]
  for (volatile uint32_t i = 0; 
 8000780:	9101      	str	r1, [sp, #4]
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
 8000782:	9a01      	ldr	r2, [sp, #4]
  RCC->CR &= 0xfef6ffff; // turn off the main PLL and HSE oscillator
  RCC->PLLCFGR = 0x24003010; // ensure PLLCFGR is at reset state
  RCC->CR &= 0xfffbffff; // reset HSEBYP (i.e., HSE is *not* bypassed)
  RCC->CIR = 0x0; // disable all RCC interrupts
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
  for (volatile uint32_t i = 0; 
 8000784:	f5b2 4fa0 	cmp.w	r2, #20480	; 0x5000
 8000788:	d307      	bcc.n	800079a <reset_vector+0xa2>
 800078a:	e009      	b.n	80007a0 <reset_vector+0xa8>
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
 800078c:	9a01      	ldr	r2, [sp, #4]
 800078e:	3201      	adds	r2, #1
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	9a01      	ldr	r2, [sp, #4]
  RCC->CR &= 0xfef6ffff; // turn off the main PLL and HSE oscillator
  RCC->PLLCFGR = 0x24003010; // ensure PLLCFGR is at reset state
  RCC->CR &= 0xfffbffff; // reset HSEBYP (i.e., HSE is *not* bypassed)
  RCC->CIR = 0x0; // disable all RCC interrupts
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
  for (volatile uint32_t i = 0; 
 8000794:	f5b2 4fa0 	cmp.w	r2, #20480	; 0x5000
 8000798:	d202      	bcs.n	80007a0 <reset_vector+0xa8>
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	0390      	lsls	r0, r2, #14
 800079e:	d5f5      	bpl.n	800078c <reset_vector+0x94>
  { } // wait for either timeout or HSE to spin up
  FLASH->ACR = 0; // ensure the caches are turned off, so we can reset them
 80007a0:	4a25      	ldr	r2, [pc, #148]	; (8000838 <reset_vector+0x140>)
  FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST; // flush the cache
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | 
               FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS; // re-enable the caches
  if (!(RCC->CR & RCC_CR_HSERDY))
 80007a2:	4b23      	ldr	r3, [pc, #140]	; (8000830 <reset_vector+0x138>)
  RCC->CIR = 0x0; // disable all RCC interrupts
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
  for (volatile uint32_t i = 0; 
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
  { } // wait for either timeout or HSE to spin up
  FLASH->ACR = 0; // ensure the caches are turned off, so we can reset them
 80007a4:	2400      	movs	r4, #0
  FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST; // flush the cache
 80007a6:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | 
 80007aa:	f240 7105 	movw	r1, #1797	; 0x705
  RCC->CIR = 0x0; // disable all RCC interrupts
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
  for (volatile uint32_t i = 0; 
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
  { } // wait for either timeout or HSE to spin up
  FLASH->ACR = 0; // ensure the caches are turned off, so we can reset them
 80007ae:	6014      	str	r4, [r2, #0]
  FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST; // flush the cache
 80007b0:	6010      	str	r0, [r2, #0]
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | 
 80007b2:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS; // re-enable the caches
  if (!(RCC->CR & RCC_CR_HSERDY))
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	0394      	lsls	r4, r2, #14
 80007b8:	d400      	bmi.n	80007bc <reset_vector+0xc4>
 80007ba:	e7fe      	b.n	80007ba <reset_vector+0xc2>
    startup_clock_init_fail(); // go there and spin forever. BUH BYE
  RCC->APB1ENR |= RCC_APB1ENR_PWREN; // clock up the power controller
 80007bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_VOS; // ensure the voltage regulator is at max beef
 80007be:	491f      	ldr	r1, [pc, #124]	; (800083c <reset_vector+0x144>)
  // PLL_VCO = 25 mhz / PLL_M * PLL_N = 336 MHz
  #define PLL_P   2
  // SYSCLK = PLL_VCO / PLL_P = 168 MHz
  #define PLL_Q   7
  // USB clock = PLL_VCO / PLL_Q = 48 MHz
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1)-1) << 16) |
 80007c0:	481f      	ldr	r0, [pc, #124]	; (8000840 <reset_vector+0x148>)
  FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST; // flush the cache
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | 
               FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS; // re-enable the caches
  if (!(RCC->CR & RCC_CR_HSERDY))
    startup_clock_init_fail(); // go there and spin forever. BUH BYE
  RCC->APB1ENR |= RCC_APB1ENR_PWREN; // clock up the power controller
 80007c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007c6:	641a      	str	r2, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_VOS; // ensure the voltage regulator is at max beef
 80007c8:	680a      	ldr	r2, [r1, #0]
 80007ca:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80007ce:	600a      	str	r2, [r1, #0]
                         // this will let us run at 168 MHz without overdrive
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1; // set HCLK (AHB clock) to sysclock
 80007d0:	689a      	ldr	r2, [r3, #8]
 80007d2:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV2; // set APB high-speed clock to sysclock/2
 80007d4:	689a      	ldr	r2, [r3, #8]
 80007d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80007da:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV4; // set APB  low-speed clock to sysclock/4
 80007dc:	689a      	ldr	r2, [r3, #8]
 80007de:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80007e2:	609a      	str	r2, [r3, #8]
  // PLL_VCO = 25 mhz / PLL_M * PLL_N = 336 MHz
  #define PLL_P   2
  // SYSCLK = PLL_VCO / PLL_P = 168 MHz
  #define PLL_Q   7
  // USB clock = PLL_VCO / PLL_Q = 48 MHz
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1)-1) << 16) |
 80007e4:	6058      	str	r0, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
  RCC->CR |= RCC_CR_PLLON; // start spinning up the PLL
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80007ec:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY)) { } // wait until it's spun up
 80007ee:	6819      	ldr	r1, [r3, #0]
 80007f0:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <reset_vector+0x138>)
 80007f2:	0189      	lsls	r1, r1, #6
 80007f4:	d5fb      	bpl.n	80007ee <reset_vector+0xf6>
  RCC->CFGR &= ~((uint32_t)RCC_CFGR_SW); // select internal oscillator
 80007f6:	6893      	ldr	r3, [r2, #8]
 80007f8:	f023 0303 	bic.w	r3, r3, #3
 80007fc:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL; // select PLL as clock source
 80007fe:	6893      	ldr	r3, [r2, #8]
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL) { } // wait for it...
 8000806:	6893      	ldr	r3, [r2, #8]
 8000808:	f003 030c 	and.w	r3, r3, #12
 800080c:	2b08      	cmp	r3, #8
 800080e:	d1fa      	bne.n	8000806 <reset_vector+0x10e>
  // hooray we're done! we're now running at 168 MHz.
  main(); // jump to application main()
 8000810:	f7ff ff1e 	bl	8000650 <main>
  while (1) { } // hopefully we never get here...
 8000814:	e7fe      	b.n	8000814 <reset_vector+0x11c>
 8000816:	bf00      	nop
 8000818:	0800ad44 	.word	0x0800ad44
 800081c:	20000000 	.word	0x20000000
 8000820:	2000093c 	.word	0x2000093c
 8000824:	20000940 	.word	0x20000940
 8000828:	2001065c 	.word	0x2001065c
 800082c:	e000ed00 	.word	0xe000ed00
 8000830:	40023800 	.word	0x40023800
 8000834:	24003010 	.word	0x24003010
 8000838:	40023c00 	.word	0x40023c00
 800083c:	40007000 	.word	0x40007000
 8000840:	07405419 	.word	0x07405419

08000844 <startup_clock_init_fail>:
#include "./stm32/stm32f4xx.h"

extern uint32_t _srelocate_flash, _srelocate, _erelocate, _ebss, _sbss;
extern int main();

void startup_clock_init_fail() { while (1) { } }
 8000844:	e7fe      	b.n	8000844 <startup_clock_init_fail>
 8000846:	bf00      	nop

08000848 <writeRegisterI2C>:
#include "i2cFunc.h"

int writeRegisterI2C(I2C_TypeDef *i2cPort, uint8_t address, uint8_t registerAddress)
{
  // starting i2c communication on I2c bus 3 
  i2cPort->CR1 |=  I2C_CR1_START; // generating start condition
 8000848:	8803      	ldrh	r3, [r0, #0]
 800084a:	b29b      	uxth	r3, r3
 800084c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000850:	8003      	strh	r3, [r0, #0]
  i2cPort->SR1 &= ~I2C_SR1_AF;    // clearing acknowledge
 8000852:	8a83      	ldrh	r3, [r0, #20]
 8000854:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000858:	041b      	lsls	r3, r3, #16
 800085a:	0c1b      	lsrs	r3, r3, #16
 800085c:	8283      	strh	r3, [r0, #20]

  while (!(i2cPort->SR1 & I2C_SR1_SB));
 800085e:	8a83      	ldrh	r3, [r0, #20]
 8000860:	07db      	lsls	r3, r3, #31
 8000862:	d5fc      	bpl.n	800085e <writeRegisterI2C+0x16>
  // initialTime = SYSTIME; while (!(i2cPort->SR1 & I2C_SR1_SB) && !timeout(1000, initialTime));

  // Send address with write bit
  i2cPort->DR = ((uint8_t) address << 1); // puts the address to be sent on the buffer using global variable
 8000864:	0049      	lsls	r1, r1, #1
 8000866:	8201      	strh	r1, [r0, #16]

  while(!(i2cPort->SR1 & (I2C_SR1_ADDR))); // wait for address transmission
 8000868:	8a83      	ldrh	r3, [r0, #20]
 800086a:	079b      	lsls	r3, r3, #30
 800086c:	d5fc      	bpl.n	8000868 <writeRegisterI2C+0x20>
  i2cPort->SR2; // un-stretch clock by reading here (?)

  i2cPort->DR = registerAddress; // Send the address of the desired register
 800086e:	b292      	uxth	r2, r2

  // Send address with write bit
  i2cPort->DR = ((uint8_t) address << 1); // puts the address to be sent on the buffer using global variable

  while(!(i2cPort->SR1 & (I2C_SR1_ADDR))); // wait for address transmission
  i2cPort->SR2; // un-stretch clock by reading here (?)
 8000870:	8b03      	ldrh	r3, [r0, #24]

  i2cPort->DR = registerAddress; // Send the address of the desired register
 8000872:	8202      	strh	r2, [r0, #16]

  while (!(i2cPort->SR1 & (I2C_SR1_BTF | I2C_SR1_AF)));
 8000874:	8a83      	ldrh	r3, [r0, #20]
 8000876:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800087a:	f023 0303 	bic.w	r3, r3, #3
 800087e:	055b      	lsls	r3, r3, #21
 8000880:	0d5b      	lsrs	r3, r3, #21
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0f6      	beq.n	8000874 <writeRegisterI2C+0x2c>

  i2cPort->CR1 |= I2C_CR1_STOP;
 8000886:	8803      	ldrh	r3, [r0, #0]
 8000888:	b29b      	uxth	r3, r3
 800088a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800088e:	8003      	strh	r3, [r0, #0]
  return 0;
}

int isBusyI2CPort(I2C_TypeDef* i2cPort)
{
  return i2cPort->SR2 & I2C_SR2_BUSY;
 8000890:	8b03      	ldrh	r3, [r0, #24]
 8000892:	f003 0302 	and.w	r3, r3, #2

  while (!(i2cPort->SR1 & (I2C_SR1_BTF | I2C_SR1_AF)));

  i2cPort->CR1 |= I2C_CR1_STOP;

  while (isBusyI2CPort(i2cPort)); // wait until bus is not busy anymore   
 8000896:	b29b      	uxth	r3, r3
 8000898:	2b00      	cmp	r3, #0
 800089a:	d1f9      	bne.n	8000890 <writeRegisterI2C+0x48>

  return 0;
}
 800089c:	4618      	mov	r0, r3
 800089e:	4770      	bx	lr

080008a0 <readBytesI2C>:


int readBytesI2C(I2C_TypeDef *i2cPort, uint8_t address, int numBytes, uint8_t* values)
{
 80008a0:	b430      	push	{r4, r5}
 80008a2:	4604      	mov	r4, r0
  // Send the address with the read bit
  // starting I2C communication
  i2cPort->CR1 |=  I2C_CR1_START;
 80008a4:	8800      	ldrh	r0, [r0, #0]
 80008a6:	b280      	uxth	r0, r0
 80008a8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80008ac:	8020      	strh	r0, [r4, #0]
  i2cPort->SR1 &= ~I2C_SR1_AF;
 80008ae:	8aa0      	ldrh	r0, [r4, #20]
 80008b0:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 80008b4:	0400      	lsls	r0, r0, #16
 80008b6:	0c00      	lsrs	r0, r0, #16
 80008b8:	82a0      	strh	r0, [r4, #20]

  while (!(i2cPort->SR1 & I2C_SR1_SB));  
 80008ba:	8aa0      	ldrh	r0, [r4, #20]
 80008bc:	07c5      	lsls	r5, r0, #31
 80008be:	d5fc      	bpl.n	80008ba <readBytesI2C+0x1a>

  // Send address with read bit
  i2cPort->DR = ((uint8_t) address << 1) + 1; // puts the address to be sent on the buffer using global variable
 80008c0:	0049      	lsls	r1, r1, #1
 80008c2:	3101      	adds	r1, #1
 80008c4:	8221      	strh	r1, [r4, #16]

  while (!(i2cPort->SR1 & (I2C_SR1_ADDR)));
 80008c6:	8aa1      	ldrh	r1, [r4, #20]
 80008c8:	0788      	lsls	r0, r1, #30
 80008ca:	d5fc      	bpl.n	80008c6 <readBytesI2C+0x26>
  i2cPort->SR2; // un-stretch clock by reading here (?)
 80008cc:	8b21      	ldrh	r1, [r4, #24]

  i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable
 80008ce:	8821      	ldrh	r1, [r4, #0]
 80008d0:	b289      	uxth	r1, r1
 80008d2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400

  for (int i = 0; i < numBytes-1; i++)
 80008d6:	2a01      	cmp	r2, #1
  i2cPort->DR = ((uint8_t) address << 1) + 1; // puts the address to be sent on the buffer using global variable

  while (!(i2cPort->SR1 & (I2C_SR1_ADDR)));
  i2cPort->SR2; // un-stretch clock by reading here (?)

  i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable
 80008d8:	8021      	strh	r1, [r4, #0]

  for (int i = 0; i < numBytes-1; i++)
 80008da:	dd0f      	ble.n	80008fc <readBytesI2C+0x5c>
 80008dc:	1e95      	subs	r5, r2, #2
 80008de:	441d      	add	r5, r3
 80008e0:	1e58      	subs	r0, r3, #1
  {
    while (!(i2cPort->SR1 & I2C_SR1_RXNE));
 80008e2:	8aa1      	ldrh	r1, [r4, #20]
 80008e4:	0649      	lsls	r1, r1, #25
 80008e6:	d5fc      	bpl.n	80008e2 <readBytesI2C+0x42>
    values[i] = i2cPort->DR;
 80008e8:	8a21      	ldrh	r1, [r4, #16]
 80008ea:	f800 1f01 	strb.w	r1, [r0, #1]!
    i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable
 80008ee:	8821      	ldrh	r1, [r4, #0]
 80008f0:	b289      	uxth	r1, r1
 80008f2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  while (!(i2cPort->SR1 & (I2C_SR1_ADDR)));
  i2cPort->SR2; // un-stretch clock by reading here (?)

  i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable

  for (int i = 0; i < numBytes-1; i++)
 80008f6:	42a8      	cmp	r0, r5
  {
    while (!(i2cPort->SR1 & I2C_SR1_RXNE));
    values[i] = i2cPort->DR;
    i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable
 80008f8:	8021      	strh	r1, [r4, #0]
  while (!(i2cPort->SR1 & (I2C_SR1_ADDR)));
  i2cPort->SR2; // un-stretch clock by reading here (?)

  i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable

  for (int i = 0; i < numBytes-1; i++)
 80008fa:	d1f2      	bne.n	80008e2 <readBytesI2C+0x42>
  {
    while (!(i2cPort->SR1 & I2C_SR1_RXNE));
    values[i] = i2cPort->DR;
    i2cPort->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable
  }
  while (!(i2cPort->SR1 & I2C_SR1_RXNE));
 80008fc:	8aa1      	ldrh	r1, [r4, #20]
 80008fe:	0649      	lsls	r1, r1, #25
 8000900:	d5fc      	bpl.n	80008fc <readBytesI2C+0x5c>
  values[numBytes-1] = i2cPort->DR;
 8000902:	4413      	add	r3, r2
 8000904:	8a22      	ldrh	r2, [r4, #16]
 8000906:	f803 2c01 	strb.w	r2, [r3, #-1]
  i2cPort->CR1 &= ~I2C_CR1_ACK; // last read
 800090a:	8823      	ldrh	r3, [r4, #0]
 800090c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000910:	041b      	lsls	r3, r3, #16
 8000912:	0c1b      	lsrs	r3, r3, #16
 8000914:	8023      	strh	r3, [r4, #0]

  i2cPort->CR1 |= I2C_CR1_STOP;
 8000916:	8823      	ldrh	r3, [r4, #0]
 8000918:	b29b      	uxth	r3, r3
 800091a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800091e:	8023      	strh	r3, [r4, #0]
  return 0;
}

int isBusyI2CPort(I2C_TypeDef* i2cPort)
{
  return i2cPort->SR2 & I2C_SR2_BUSY;
 8000920:	8b20      	ldrh	r0, [r4, #24]
 8000922:	f000 0002 	and.w	r0, r0, #2
  values[numBytes-1] = i2cPort->DR;
  i2cPort->CR1 &= ~I2C_CR1_ACK; // last read

  i2cPort->CR1 |= I2C_CR1_STOP;

  while (isBusyI2CPort(i2cPort)); // wait until bus is not busy anymore
 8000926:	b280      	uxth	r0, r0
 8000928:	2800      	cmp	r0, #0
 800092a:	d1f9      	bne.n	8000920 <readBytesI2C+0x80>

  return 0;
}
 800092c:	bc30      	pop	{r4, r5}
 800092e:	4770      	bx	lr

08000930 <isBusyI2CPort>:

int isBusyI2CPort(I2C_TypeDef* i2cPort)
{
  return i2cPort->SR2 & I2C_SR2_BUSY;
 8000930:	8b00      	ldrh	r0, [r0, #24]
 8000932:	f000 0002 	and.w	r0, r0, #2
 8000936:	4770      	bx	lr

08000938 <udelay>:
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000938:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800093c:	6a51      	ldr	r1, [r2, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 800093e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000940:	1a5b      	subs	r3, r3, r1
 8000942:	4283      	cmp	r3, r0
 8000944:	d3fb      	bcc.n	800093e <udelay+0x6>
}
 8000946:	4770      	bx	lr

08000948 <writeBytesSPI>:
  uint8_t data[1] = {registerAddress};
  return writeBytesSPI(spiPort, address, data, 1, 0);
}

int writeBytesSPI(SPI_TypeDef* spiPort, uint8_t address, uint8_t* data, int len, int toggleAddress)
{
 8000948:	b4f0      	push	{r4, r5, r6, r7}
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  
  cs_gpio->BSRRH = cs_pin_mask;           // assert CS
 800094a:	4c2a      	ldr	r4, [pc, #168]	; (80009f4 <writeBytesSPI+0xac>)
 800094c:	2610      	movs	r6, #16
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 800094e:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
int writeBytesSPI(SPI_TypeDef* spiPort, uint8_t address, uint8_t* data, int len, int toggleAddress)
{
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  
  cs_gpio->BSRRH = cs_pin_mask;           // assert CS
 8000952:	8366      	strh	r6, [r4, #26]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000954:	6a7d      	ldr	r5, [r7, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000956:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	2c03      	cmp	r4, #3
 800095c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8000960:	d9f9      	bls.n	8000956 <writeBytesSPI+0xe>
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  
  cs_gpio->BSRRH = cs_pin_mask;           // assert CS
  udelay(4);                              // delay 4us

  spiPort->DR = 0x00;                     // send write command 
 8000962:	2400      	movs	r4, #0
 8000964:	8184      	strh	r4, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000966:	6a75      	ldr	r5, [r6, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000968:	4637      	mov	r7, r6
 800096a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800096c:	1b64      	subs	r4, r4, r5
 800096e:	2c0e      	cmp	r4, #14
 8000970:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8000974:	d9f9      	bls.n	800096a <writeBytesSPI+0x22>
  udelay(4);                              // delay 4us

  spiPort->DR = 0x00;                     // send write command 
  udelay(15);                             // delay 15us

  spiPort->DR = (uint8_t) len;            // send data len
 8000976:	b2dc      	uxtb	r4, r3
 8000978:	8184      	strh	r4, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 800097a:	6a77      	ldr	r7, [r6, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 800097c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800097e:	1be4      	subs	r4, r4, r7
 8000980:	2c0e      	cmp	r4, #14
 8000982:	d9fb      	bls.n	800097c <writeBytesSPI+0x34>

  spiPort->DR = (uint8_t) len;            // send data len
  udelay(15);                             // delay 15us
  
  uint8_t addr;
  if (toggleAddress == 0)
 8000984:	9c04      	ldr	r4, [sp, #16]
 8000986:	b90c      	cbnz	r4, 800098c <writeBytesSPI+0x44>
    addr = address << 1;
 8000988:	0049      	lsls	r1, r1, #1
 800098a:	b2c9      	uxtb	r1, r1
  else
    addr = address;                          
  spiPort->DR = ((uint8_t) addr);         // send addr
 800098c:	b289      	uxth	r1, r1
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 800098e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  uint8_t addr;
  if (toggleAddress == 0)
    addr = address << 1;
  else
    addr = address;                          
  spiPort->DR = ((uint8_t) addr);         // send addr
 8000992:	8181      	strh	r1, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000994:	6a65      	ldr	r5, [r4, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000996:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000998:	1b49      	subs	r1, r1, r5
 800099a:	290e      	cmp	r1, #14
 800099c:	d9fb      	bls.n	8000996 <writeBytesSPI+0x4e>
  else
    addr = address;                          
  spiPort->DR = ((uint8_t) addr);         // send addr
  udelay(15);                             // delay 15us

  for (int i = 0; i < len; i++)
 800099e:	2b00      	cmp	r3, #0
 80009a0:	dd20      	ble.n	80009e4 <writeBytesSPI+0x9c>
 80009a2:	4616      	mov	r6, r2
 80009a4:	18d7      	adds	r7, r2, r3
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 80009a6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  spiPort->DR = ((uint8_t) addr);         // send addr
  udelay(15);                             // delay 15us

  for (int i = 0; i < len; i++)
  {
    spiPort->DR = data[i];                // send data[i]
 80009aa:	f816 1b01 	ldrb.w	r1, [r6], #1
 80009ae:	8181      	strh	r1, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 80009b0:	6a65      	ldr	r5, [r4, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 80009b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80009b4:	1b49      	subs	r1, r1, r5
 80009b6:	290e      	cmp	r1, #14
 80009b8:	d9fb      	bls.n	80009b2 <writeBytesSPI+0x6a>
  else
    addr = address;                          
  spiPort->DR = ((uint8_t) addr);         // send addr
  udelay(15);                             // delay 15us

  for (int i = 0; i < len; i++)
 80009ba:	42be      	cmp	r6, r7
 80009bc:	d1f5      	bne.n	80009aa <writeBytesSPI+0x62>
  {
    spiPort->DR = data[i];                // send data[i]
    udelay(15);                           // delay 15us
  }

  cs_gpio->BSRRL = cs_pin_mask;           // de-assert CS
 80009be:	490d      	ldr	r1, [pc, #52]	; (80009f4 <writeBytesSPI+0xac>)
 80009c0:	2010      	movs	r0, #16
 80009c2:	8308      	strh	r0, [r1, #24]

  if (len == 0 || data == NULL)
 80009c4:	b15a      	cbz	r2, 80009de <writeBytesSPI+0x96>
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 80009c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000

  cs_gpio->BSRRL = cs_pin_mask;           // de-assert CS

  if (len == 0 || data == NULL)
    return 0;
  const uint32_t wait = 180 + 110 * len;
 80009ca:	226e      	movs	r2, #110	; 0x6e
 80009cc:	fb02 f303 	mul.w	r3, r2, r3
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 80009d0:	6a48      	ldr	r0, [r1, #36]	; 0x24

  cs_gpio->BSRRL = cs_pin_mask;           // de-assert CS

  if (len == 0 || data == NULL)
    return 0;
  const uint32_t wait = 180 + 110 * len;
 80009d2:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
  while(SYSTIME - mytime < utime);
 80009d6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80009d8:	1a1b      	subs	r3, r3, r0
 80009da:	429a      	cmp	r2, r3
 80009dc:	d8fb      	bhi.n	80009d6 <writeBytesSPI+0x8e>
    return 0;
  const uint32_t wait = 180 + 110 * len;
  udelay(wait);

  return 0;
}
 80009de:	2000      	movs	r0, #0
 80009e0:	bcf0      	pop	{r4, r5, r6, r7}
 80009e2:	4770      	bx	lr
  {
    spiPort->DR = data[i];                // send data[i]
    udelay(15);                           // delay 15us
  }

  cs_gpio->BSRRL = cs_pin_mask;           // de-assert CS
 80009e4:	4903      	ldr	r1, [pc, #12]	; (80009f4 <writeBytesSPI+0xac>)
 80009e6:	f04f 0010 	mov.w	r0, #16
 80009ea:	8308      	strh	r0, [r1, #24]

  if (len == 0 || data == NULL)
 80009ec:	d1ea      	bne.n	80009c4 <writeBytesSPI+0x7c>
    return 0;
  const uint32_t wait = 180 + 110 * len;
  udelay(wait);

  return 0;
}
 80009ee:	2000      	movs	r0, #0
 80009f0:	bcf0      	pop	{r4, r5, r6, r7}
 80009f2:	4770      	bx	lr
 80009f4:	40020000 	.word	0x40020000

080009f8 <writeRegisterSPI>:
  int mytime = SYSTIME;
  while(SYSTIME - mytime < utime);
}

int writeRegisterSPI(SPI_TypeDef* spiPort, uint8_t address, uint8_t registerAddress)
{
 80009f8:	b510      	push	{r4, lr}
 80009fa:	b084      	sub	sp, #16
  uint8_t data[1] = {registerAddress};
 80009fc:	ab04      	add	r3, sp, #16
  return writeBytesSPI(spiPort, address, data, 1, 0);
 80009fe:	2400      	movs	r4, #0
  while(SYSTIME - mytime < utime);
}

int writeRegisterSPI(SPI_TypeDef* spiPort, uint8_t address, uint8_t registerAddress)
{
  uint8_t data[1] = {registerAddress};
 8000a00:	f803 2d04 	strb.w	r2, [r3, #-4]!
  return writeBytesSPI(spiPort, address, data, 1, 0);
 8000a04:	9400      	str	r4, [sp, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	2301      	movs	r3, #1
 8000a0a:	f7ff ff9d 	bl	8000948 <writeBytesSPI>
}
 8000a0e:	b004      	add	sp, #16
 8000a10:	bd10      	pop	{r4, pc}
 8000a12:	bf00      	nop

08000a14 <readSPIStatus>:
{
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  uint8_t status;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 8000a14:	4b2b      	ldr	r3, [pc, #172]	; (8000ac4 <readSPIStatus+0xb0>)
 8000a16:	2110      	movs	r1, #16
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000a18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  uint8_t status;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 8000a1c:	8359      	strh	r1, [r3, #26]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000a1e:	6a51      	ldr	r1, [r2, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000a20:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000a22:	1a5b      	subs	r3, r3, r1
 8000a24:	2b03      	cmp	r3, #3
 8000a26:	d9fb      	bls.n	8000a20 <readSPIStatus+0xc>
  uint8_t status;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
  udelay(4);
  spiPort->DR;
  spiPort->DR = 0x21;                         // send read command       
 8000a28:	2321      	movs	r3, #33	; 0x21
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  uint8_t status;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
  udelay(4);
  spiPort->DR;
 8000a2a:	8982      	ldrh	r2, [r0, #12]
  spiPort->DR = 0x21;                         // send read command       
 8000a2c:	8183      	strh	r3, [r0, #12]
  while (!(spiPort->SR & SPI_SR_TXE)) { } // wait for buffer room
 8000a2e:	8903      	ldrh	r3, [r0, #8]
 8000a30:	0799      	lsls	r1, r3, #30
 8000a32:	d5fc      	bpl.n	8000a2e <readSPIStatus+0x1a>
  while (!(spiPort->SR & SPI_SR_RXNE)) { }
 8000a34:	8903      	ldrh	r3, [r0, #8]
 8000a36:	07da      	lsls	r2, r3, #31
 8000a38:	d5fc      	bpl.n	8000a34 <readSPIStatus+0x20>
  while (spiPort->SR & SPI_SR_BSY) { }
 8000a3a:	8903      	ldrh	r3, [r0, #8]
 8000a3c:	061b      	lsls	r3, r3, #24
 8000a3e:	d4fc      	bmi.n	8000a3a <readSPIStatus+0x26>
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000a40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  spiPort->DR;
  spiPort->DR = 0x21;                         // send read command       
  while (!(spiPort->SR & SPI_SR_TXE)) { } // wait for buffer room
  while (!(spiPort->SR & SPI_SR_RXNE)) { }
  while (spiPort->SR & SPI_SR_BSY) { }
  spiPort->DR;
 8000a44:	8983      	ldrh	r3, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000a46:	6a51      	ldr	r1, [r2, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000a48:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000a4a:	1a5b      	subs	r3, r3, r1
 8000a4c:	2b0e      	cmp	r3, #14
 8000a4e:	d9fb      	bls.n	8000a48 <readSPIStatus+0x34>
  while (!(spiPort->SR & SPI_SR_RXNE)) { }
  while (spiPort->SR & SPI_SR_BSY) { }
  spiPort->DR;
  udelay(15);

  spiPort->DR = 0x04;                         // send status register address
 8000a50:	2304      	movs	r3, #4
 8000a52:	8183      	strh	r3, [r0, #12]
   while (!(spiPort->SR & SPI_SR_TXE)) { } // wait for buffer room
 8000a54:	8903      	ldrh	r3, [r0, #8]
 8000a56:	0799      	lsls	r1, r3, #30
 8000a58:	d5fc      	bpl.n	8000a54 <readSPIStatus+0x40>
    while (!(spiPort->SR & SPI_SR_RXNE)) { }
 8000a5a:	8903      	ldrh	r3, [r0, #8]
 8000a5c:	07da      	lsls	r2, r3, #31
 8000a5e:	d5fc      	bpl.n	8000a5a <readSPIStatus+0x46>
    while (spiPort->SR & SPI_SR_BSY) { }
 8000a60:	8903      	ldrh	r3, [r0, #8]
 8000a62:	061b      	lsls	r3, r3, #24
 8000a64:	d4fc      	bmi.n	8000a60 <readSPIStatus+0x4c>
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000a66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000

  spiPort->DR = 0x04;                         // send status register address
   while (!(spiPort->SR & SPI_SR_TXE)) { } // wait for buffer room
    while (!(spiPort->SR & SPI_SR_RXNE)) { }
    while (spiPort->SR & SPI_SR_BSY) { }
  spiPort->DR;
 8000a6a:	8983      	ldrh	r3, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000a6c:	6a51      	ldr	r1, [r2, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000a6e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000a70:	1a5b      	subs	r3, r3, r1
 8000a72:	2b0e      	cmp	r3, #14
 8000a74:	d9fb      	bls.n	8000a6e <readSPIStatus+0x5a>
    while (!(spiPort->SR & SPI_SR_RXNE)) { }
    while (spiPort->SR & SPI_SR_BSY) { }
  spiPort->DR;
  udelay(15);

  spiPort->DR = 0x00;                         // send dummy data
 8000a76:	2300      	movs	r3, #0
 8000a78:	8183      	strh	r3, [r0, #12]
   while (!(spiPort->SR & SPI_SR_TXE)) { } // wait for buffer room
 8000a7a:	8903      	ldrh	r3, [r0, #8]
 8000a7c:	0799      	lsls	r1, r3, #30
 8000a7e:	d5fc      	bpl.n	8000a7a <readSPIStatus+0x66>
    while (!(spiPort->SR & SPI_SR_RXNE)) { }
 8000a80:	8903      	ldrh	r3, [r0, #8]
 8000a82:	07da      	lsls	r2, r3, #31
 8000a84:	d5fc      	bpl.n	8000a80 <readSPIStatus+0x6c>
    while (spiPort->SR & SPI_SR_BSY) { }
 8000a86:	8903      	ldrh	r3, [r0, #8]
 8000a88:	061b      	lsls	r3, r3, #24
 8000a8a:	d4fc      	bmi.n	8000a86 <readSPIStatus+0x72>
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000a8c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000

  spiPort->DR = 0x00;                         // send dummy data
   while (!(spiPort->SR & SPI_SR_TXE)) { } // wait for buffer room
    while (!(spiPort->SR & SPI_SR_RXNE)) { }
    while (spiPort->SR & SPI_SR_BSY) { }
  status = spiPort->DR;
 8000a90:	8983      	ldrh	r3, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000a92:	6a48      	ldr	r0, [r1, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000a94:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000a96:	1a1b      	subs	r3, r3, r0
 8000a98:	2b0e      	cmp	r3, #14
 8000a9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a9e:	d9f9      	bls.n	8000a94 <readSPIStatus+0x80>
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000aa0:	6a50      	ldr	r0, [r2, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000aa6:	1a1b      	subs	r3, r3, r0
 8000aa8:	2b0e      	cmp	r3, #14
 8000aaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aae:	d9f9      	bls.n	8000aa4 <readSPIStatus+0x90>
  udelay(15);

  status = status + 1 - 1;
  udelay(15);

  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <readSPIStatus+0xb0>)
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	8319      	strh	r1, [r3, #24]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000ab6:	6a51      	ldr	r1, [r2, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000ab8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000aba:	1a5b      	subs	r3, r3, r1
 8000abc:	2b03      	cmp	r3, #3
 8000abe:	d9fb      	bls.n	8000ab8 <readSPIStatus+0xa4>

  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS
  udelay(4);

  return 0;
}
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	4770      	bx	lr
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <readBytesSPIAssert>:

int readBytesSPIAssert(SPI_TypeDef* spiPort, uint8_t address, uint8_t numBytes, volatile uint8_t* values)
{
 8000ac8:	b4f0      	push	{r4, r5, r6, r7}
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 8000aca:	4d30      	ldr	r5, [pc, #192]	; (8000b8c <readBytesSPIAssert+0xc4>)
 8000acc:	2710      	movs	r7, #16
  // udelay(4);                                  // delay 4us
  
  spiPort->DR = 0x01;                         // send read command       
 8000ace:	2401      	movs	r4, #1
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000ad0:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
int readBytesSPIAssert(SPI_TypeDef* spiPort, uint8_t address, uint8_t numBytes, volatile uint8_t* values)
{
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 8000ad4:	836f      	strh	r7, [r5, #26]
  // udelay(4);                                  // delay 4us
  
  spiPort->DR = 0x01;                         // send read command       
 8000ad6:	8184      	strh	r4, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000ad8:	6a77      	ldr	r7, [r6, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000ada:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8000adc:	1be4      	subs	r4, r4, r7
 8000ade:	2c0e      	cmp	r4, #14
 8000ae0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8000ae4:	d9f9      	bls.n	8000ada <readBytesSPIAssert+0x12>
  // udelay(4);                                  // delay 4us
  
  spiPort->DR = 0x01;                         // send read command       
  udelay(SLEEP);                                 // delay 15us

  spiPort->DR = (uint8_t) numBytes;           // send data len
 8000ae6:	b294      	uxth	r4, r2
 8000ae8:	8184      	strh	r4, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000aea:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000aec:	462e      	mov	r6, r5
 8000aee:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8000af0:	1be4      	subs	r4, r4, r7
 8000af2:	2c0e      	cmp	r4, #14
 8000af4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8000af8:	d9f9      	bls.n	8000aee <readBytesSPIAssert+0x26>
  udelay(SLEEP);                                 // delay 15us

  spiPort->DR = (uint8_t) numBytes;           // send data len
  udelay(SLEEP);                                 // delay 15us
                                              
  spiPort->DR = ((uint8_t) address << 1) + 1; // send addr
 8000afa:	0049      	lsls	r1, r1, #1
 8000afc:	3101      	adds	r1, #1
 8000afe:	8181      	strh	r1, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000b00:	6a6e      	ldr	r6, [r5, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000b02:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000b04:	1b89      	subs	r1, r1, r6
 8000b06:	290e      	cmp	r1, #14
 8000b08:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000b0c:	d9f9      	bls.n	8000b02 <readBytesSPIAssert+0x3a>
  udelay(SLEEP);                                 // delay 15us
                                              
  spiPort->DR = ((uint8_t) address << 1) + 1; // send addr
  udelay(SLEEP);                                 // delay 15us
  
  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS
 8000b0e:	491f      	ldr	r1, [pc, #124]	; (8000b8c <readBytesSPIAssert+0xc4>)
 8000b10:	2510      	movs	r5, #16
 8000b12:	830d      	strh	r5, [r1, #24]

  if (numBytes == 0 || values == NULL)
 8000b14:	2a00      	cmp	r2, #0
 8000b16:	d035      	beq.n	8000b84 <readBytesSPIAssert+0xbc>
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d033      	beq.n	8000b84 <readBytesSPIAssert+0xbc>
    return 0;

  const uint32_t wait = 180 + 110 * numBytes;
 8000b1c:	216e      	movs	r1, #110	; 0x6e
 8000b1e:	26b4      	movs	r6, #180	; 0xb4
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000b20:	6a67      	ldr	r7, [r4, #36]	; 0x24
  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS

  if (numBytes == 0 || values == NULL)
    return 0;

  const uint32_t wait = 180 + 110 * numBytes;
 8000b22:	fb11 6602 	smlabb	r6, r1, r2, r6
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
  while(SYSTIME - mytime < utime);
 8000b26:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000b28:	1bc9      	subs	r1, r1, r7
 8000b2a:	428e      	cmp	r6, r1
 8000b2c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8000b30:	d8f9      	bhi.n	8000b26 <readBytesSPIAssert+0x5e>
    return 0;

  const uint32_t wait = 180 + 110 * numBytes;
  udelay(wait);
  
  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 8000b32:	4916      	ldr	r1, [pc, #88]	; (8000b8c <readBytesSPIAssert+0xc4>)
 8000b34:	2410      	movs	r4, #16
 8000b36:	834c      	strh	r4, [r1, #26]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000b38:	6a6e      	ldr	r6, [r5, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000b3a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000b3c:	1b89      	subs	r1, r1, r6
 8000b3e:	2903      	cmp	r1, #3
 8000b40:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000b44:	d9f9      	bls.n	8000b3a <readBytesSPIAssert+0x72>
  udelay(wait);
  
  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
  udelay(4);

  spiPort->DR = 0x06;                         // read buffer command
 8000b46:	2106      	movs	r1, #6
 8000b48:	8181      	strh	r1, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000b4a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000b4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000b4e:	1b49      	subs	r1, r1, r5
 8000b50:	290e      	cmp	r1, #14
 8000b52:	d9fb      	bls.n	8000b4c <readBytesSPIAssert+0x84>
 8000b54:	189e      	adds	r6, r3, r2
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000b56:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  spiPort->DR = 0x06;                         // read buffer command
  // spiPort->DR; 
  udelay(SLEEP);                                 // delay 15us
  for (int i=0; i<numBytes;i++)
  {
    values[i] = (uint8_t) spiPort->DR;
 8000b5a:	8981      	ldrh	r1, [r0, #12]
 8000b5c:	b2c9      	uxtb	r1, r1
 8000b5e:	7019      	strb	r1, [r3, #0]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000b60:	6a65      	ldr	r5, [r4, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000b62:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b64:	1b52      	subs	r2, r2, r5
 8000b66:	2a0e      	cmp	r2, #14
 8000b68:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000b6c:	d9f9      	bls.n	8000b62 <readBytesSPIAssert+0x9a>
 8000b6e:	3301      	adds	r3, #1
  udelay(4);

  spiPort->DR = 0x06;                         // read buffer command
  // spiPort->DR; 
  udelay(SLEEP);                                 // delay 15us
  for (int i=0; i<numBytes;i++)
 8000b70:	42b3      	cmp	r3, r6
 8000b72:	d1f2      	bne.n	8000b5a <readBytesSPIAssert+0x92>
    values[i] = (uint8_t) spiPort->DR;
    // if (i != numBytes-1)
    //   spiPort->DR = 0x0;                      
    udelay(SLEEP);                               // delay 15us
  }
  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <readBytesSPIAssert+0xc4>)
 8000b76:	2210      	movs	r2, #16
 8000b78:	831a      	strh	r2, [r3, #24]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000b7a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000b7c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000b7e:	1a9b      	subs	r3, r3, r2
 8000b80:	2b1d      	cmp	r3, #29
 8000b82:	d9fb      	bls.n	8000b7c <readBytesSPIAssert+0xb4>
  }
  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS
  udelay(30);

  return 0;
}
 8000b84:	2000      	movs	r0, #0
 8000b86:	bcf0      	pop	{r4, r5, r6, r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40020000 	.word	0x40020000

08000b90 <readCommmand>:
int readCommmand(SPI_TypeDef* spiPort, uint8_t address, uint8_t numBytes)
{
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <readCommmand+0x5c>)

  return 0;
}

int readCommmand(SPI_TypeDef* spiPort, uint8_t address, uint8_t numBytes)
{
 8000b92:	b470      	push	{r4, r5, r6}
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 8000b94:	2410      	movs	r4, #16
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000b96:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
int readCommmand(SPI_TypeDef* spiPort, uint8_t address, uint8_t numBytes)
{
  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 8000b9a:	835c      	strh	r4, [r3, #26]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000b9c:	6a6e      	ldr	r6, [r5, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000b9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000ba0:	1b9b      	subs	r3, r3, r6
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000ba8:	d9f9      	bls.n	8000b9e <readCommmand+0xe>
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;

  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
  udelay(4);
  
  spiPort->DR = 0x01;                         // send read command
 8000baa:	2301      	movs	r3, #1
 8000bac:	8183      	strh	r3, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000bae:	6a66      	ldr	r6, [r4, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000bb0:	4625      	mov	r5, r4
 8000bb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000bb4:	1b9b      	subs	r3, r3, r6
 8000bb6:	2b0e      	cmp	r3, #14
 8000bb8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000bbc:	d9f9      	bls.n	8000bb2 <readCommmand+0x22>
  
  spiPort->DR = 0x01;                         // send read command
  // while((spiPort->SR & (SPI_SR_TXE)));        //while((spiPort->SR & (SPI_SR_BSY)));
  udelay(15);
  
  spiPort->DR = (uint8_t) numBytes;           // send data len                            
 8000bbe:	b292      	uxth	r2, r2
 8000bc0:	8182      	strh	r2, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000bc2:	6a65      	ldr	r5, [r4, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000bc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bc6:	1b5b      	subs	r3, r3, r5
 8000bc8:	2b0e      	cmp	r3, #14
 8000bca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bce:	d9f9      	bls.n	8000bc4 <readCommmand+0x34>
  
  spiPort->DR = (uint8_t) numBytes;           // send data len                            
  // while((spiPort->SR & (SPI_SR_BSY)));
  udelay(15);
  
  spiPort->DR = ((uint8_t) address << 1) + 1; // send addr
 8000bd0:	0049      	lsls	r1, r1, #1
 8000bd2:	3101      	adds	r1, #1
 8000bd4:	8181      	strh	r1, [r0, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000bd6:	6a51      	ldr	r1, [r2, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000bd8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000bda:	1a5b      	subs	r3, r3, r1
 8000bdc:	2b0e      	cmp	r3, #14
 8000bde:	d9fb      	bls.n	8000bd8 <readCommmand+0x48>
  
  spiPort->DR = ((uint8_t) address << 1) + 1; // send addr
  // while((spiPort->SR & (SPI_SR_BSY))); 
  udelay(15);
  
  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS
 8000be0:	4b02      	ldr	r3, [pc, #8]	; (8000bec <readCommmand+0x5c>)
 8000be2:	2210      	movs	r2, #16

  return 0;
}
 8000be4:	2000      	movs	r0, #0
  
  spiPort->DR = ((uint8_t) address << 1) + 1; // send addr
  // while((spiPort->SR & (SPI_SR_BSY))); 
  udelay(15);
  
  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS
 8000be6:	831a      	strh	r2, [r3, #24]

  return 0;
}
 8000be8:	bc70      	pop	{r4, r5, r6}
 8000bea:	4770      	bx	lr
 8000bec:	40020000 	.word	0x40020000

08000bf0 <readBytesSPI>:


int readBytesSPI(SPI_TypeDef* spiPort, uint8_t address, uint8_t numBytes, volatile uint8_t* values)
{
 8000bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	461f      	mov	r7, r3
 8000bf6:	4616      	mov	r6, r2
 8000bf8:	4605      	mov	r5, r0

  GPIO_TypeDef *cs_gpio = GPIOA;
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  // uint8_t status;

  readCommmand(spiPort, address, numBytes);
 8000bfa:	f7ff ffc9 	bl	8000b90 <readCommmand>
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000bfe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  // uint8_t status;

  readCommmand(spiPort, address, numBytes);

  uint32_t wait = 180 + 110 * numBytes;
 8000c02:	236e      	movs	r3, #110	; 0x6e
 8000c04:	20b4      	movs	r0, #180	; 0xb4
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000c06:	6a4c      	ldr	r4, [r1, #36]	; 0x24
  uint32_t cs_pin_mask = 1 << PORTA_BRIDGE0_CS;
  // uint8_t status;

  readCommmand(spiPort, address, numBytes);

  uint32_t wait = 180 + 110 * numBytes;
 8000c08:	fb13 0006 	smlabb	r0, r3, r6, r0
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
  while(SYSTIME - mytime < utime);
 8000c0c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000c0e:	1b12      	subs	r2, r2, r4
 8000c10:	4282      	cmp	r2, r0
 8000c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c16:	d3f9      	bcc.n	8000c0c <readBytesSPI+0x1c>
  readCommmand(spiPort, address, numBytes);

  uint32_t wait = 180 + 110 * numBytes;
  udelay(wait);

  if (numBytes == 0 || values == NULL)
 8000c18:	2e00      	cmp	r6, #0
 8000c1a:	d039      	beq.n	8000c90 <readBytesSPI+0xa0>
 8000c1c:	2f00      	cmp	r7, #0
 8000c1e:	d037      	beq.n	8000c90 <readBytesSPI+0xa0>
    return 0;
  
  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
 8000c20:	4a1d      	ldr	r2, [pc, #116]	; (8000c98 <readBytesSPI+0xa8>)
 8000c22:	2110      	movs	r1, #16
 8000c24:	8351      	strh	r1, [r2, #26]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000c26:	6a58      	ldr	r0, [r3, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000c28:	461a      	mov	r2, r3
 8000c2a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000c2c:	1a1b      	subs	r3, r3, r0
 8000c2e:	2b03      	cmp	r3, #3
 8000c30:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000c34:	d9f9      	bls.n	8000c2a <readBytesSPI+0x3a>
    return 0;
  
  cs_gpio->BSRRH = cs_pin_mask;               // assert CS
  udelay(4);

  spiPort->DR = 0x06;                         // read buffer command
 8000c36:	2306      	movs	r3, #6
 8000c38:	81ab      	strh	r3, [r5, #12]
  spiPort->DR; 
 8000c3a:	89ab      	ldrh	r3, [r5, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000c3c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000c3e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000c40:	1a9b      	subs	r3, r3, r2
 8000c42:	2b0e      	cmp	r3, #14
 8000c44:	d9fb      	bls.n	8000c3e <readBytesSPI+0x4e>
  udelay(4);

  spiPort->DR = 0x06;                         // read buffer command
  spiPort->DR; 
  udelay(SLEEP);                                 // delay 15us
  for (int i=0; i<numBytes;i++)
 8000c46:	b1ce      	cbz	r6, 8000c7c <readBytesSPI+0x8c>
 8000c48:	2400      	movs	r4, #0
  {
    dr = (uint8_t) spiPort->DR;
    values[i] = dr;
    if (i != numBytes-1)
      spiPort->DR = 0x0;                      
 8000c4a:	46a4      	mov	ip, r4
 8000c4c:	f106 3eff 	add.w	lr, r6, #4294967295	; 0xffffffff
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000c50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  spiPort->DR = 0x06;                         // read buffer command
  spiPort->DR; 
  udelay(SLEEP);                                 // delay 15us
  for (int i=0; i<numBytes;i++)
  {
    dr = (uint8_t) spiPort->DR;
 8000c54:	89ab      	ldrh	r3, [r5, #12]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f88d 3007 	strb.w	r3, [sp, #7]
    values[i] = dr;
 8000c5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	553b      	strb	r3, [r7, r4]
    if (i != numBytes-1)
 8000c64:	45a6      	cmp	lr, r4
      spiPort->DR = 0x0;                      
 8000c66:	bf18      	it	ne
 8000c68:	f8a5 c00c 	strhne.w	ip, [r5, #12]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000c6c:	6a48      	ldr	r0, [r1, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000c6e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000c70:	1a12      	subs	r2, r2, r0
 8000c72:	2a0e      	cmp	r2, #14
 8000c74:	d9fb      	bls.n	8000c6e <readBytesSPI+0x7e>
  udelay(4);

  spiPort->DR = 0x06;                         // read buffer command
  spiPort->DR; 
  udelay(SLEEP);                                 // delay 15us
  for (int i=0; i<numBytes;i++)
 8000c76:	3401      	adds	r4, #1
 8000c78:	42a6      	cmp	r6, r4
 8000c7a:	d1eb      	bne.n	8000c54 <readBytesSPI+0x64>
    values[i] = dr;
    if (i != numBytes-1)
      spiPort->DR = 0x0;                      
    udelay(SLEEP);                               // delay 15us
  }
  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <readBytesSPI+0xa8>)
 8000c7e:	2110      	movs	r1, #16
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000c80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    values[i] = dr;
    if (i != numBytes-1)
      spiPort->DR = 0x0;                      
    udelay(SLEEP);                               // delay 15us
  }
  cs_gpio->BSRRL = cs_pin_mask;               // de-assert CS
 8000c84:	8319      	strh	r1, [r3, #24]
#include "spiFunc.h"

void udelay(int utime)
{
  int mytime = SYSTIME;
 8000c86:	6a51      	ldr	r1, [r2, #36]	; 0x24
  while(SYSTIME - mytime < utime);
 8000c88:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000c8a:	1a5b      	subs	r3, r3, r1
 8000c8c:	2b1d      	cmp	r3, #29
 8000c8e:	d9fb      	bls.n	8000c88 <readBytesSPI+0x98>
  // ledStatus(status);
  // udelay(100);
  // while(1);

  return 0;
}
 8000c90:	2000      	movs	r0, #0
 8000c92:	b003      	add	sp, #12
 8000c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40020000 	.word	0x40020000

08000c9c <ledsPattern>:
      break;
  }
}

void ledsPattern(int led1, int led2, int led3, int led4)
{
 8000c9c:	b530      	push	{r4, r5, lr}
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
  {
    if (leds[i] == ON)
 8000c9e:	2801      	cmp	r0, #1
      break;
  }
}

void ledsPattern(int led1, int led2, int led3, int led4)
{
 8000ca0:	b085      	sub	sp, #20
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
 8000ca2:	f04f 0400 	mov.w	r4, #0
  }
}

void ledsPattern(int led1, int led2, int led3, int led4)
{
  int leds[4] = {led1, led2, led3, led4};
 8000ca6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8000caa:	466d      	mov	r5, sp
    {
      leds_on(i);
    }
    else
    {
      leds_off(i);
 8000cac:	b2e0      	uxtb	r0, r4
{
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
  {
    if (leds[i] == ON)
 8000cae:	d009      	beq.n	8000cc4 <ledsPattern+0x28>

void ledsPattern(int led1, int led2, int led3, int led4)
{
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
 8000cb0:	3401      	adds	r4, #1
    {
      leds_on(i);
    }
    else
    {
      leds_off(i);
 8000cb2:	f000 f8bf 	bl	8000e34 <leds_off>

void ledsPattern(int led1, int led2, int led3, int led4)
{
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
 8000cb6:	2c04      	cmp	r4, #4
 8000cb8:	d009      	beq.n	8000cce <ledsPattern+0x32>
 8000cba:	f855 0f04 	ldr.w	r0, [r5, #4]!
  {
    if (leds[i] == ON)
 8000cbe:	2801      	cmp	r0, #1
    {
      leds_on(i);
    }
    else
    {
      leds_off(i);
 8000cc0:	b2e0      	uxtb	r0, r4
{
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
  {
    if (leds[i] == ON)
 8000cc2:	d1f5      	bne.n	8000cb0 <ledsPattern+0x14>

void ledsPattern(int led1, int led2, int led3, int led4)
{
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
 8000cc4:	3401      	adds	r4, #1
  {
    if (leds[i] == ON)
    {
      leds_on(i);
 8000cc6:	f000 f891 	bl	8000dec <leds_on>

void ledsPattern(int led1, int led2, int led3, int led4)
{
  int leds[4] = {led1, led2, led3, led4};

  for(int i=0; i<4;i++)
 8000cca:	2c04      	cmp	r4, #4
 8000ccc:	d1f5      	bne.n	8000cba <ledsPattern+0x1e>
    else
    {
      leds_off(i);
    }
  }
 8000cce:	b005      	add	sp, #20
 8000cd0:	bd30      	pop	{r4, r5, pc}
 8000cd2:	bf00      	nop

08000cd4 <ledStatus>:
  return 0;
}

void ledStatus(uint8_t status)
{
  switch(status & 0xF)
 8000cd4:	f000 000f 	and.w	r0, r0, #15
 8000cd8:	3801      	subs	r0, #1
 8000cda:	280e      	cmp	r0, #14
 8000cdc:	d80f      	bhi.n	8000cfe <ledStatus+0x2a>
 8000cde:	e8df f000 	tbb	[pc, r0]
 8000ce2:	1a14      	.short	0x1a14
 8000ce4:	322c2620 	.word	0x322c2620
 8000ce8:	4a443e38 	.word	0x4a443e38
 8000cec:	085c5650 	.word	0x085c5650
 8000cf0:	62          	.byte	0x62
 8000cf1:	00          	.byte	0x00
      break;
    case 0xD: // 1101 -> 101 -> 5
      ledsPattern(OFF, OFF, ON, OFF);
      break;
    case 0xE:
      ledsPattern(OFF, OFF, OFF, ON);
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	4601      	mov	r1, r0
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	f7ff bfcf 	b.w	8000c9c <ledsPattern>
void ledStatus(uint8_t status)
{
  switch(status & 0xF)
  {
    case 0x0:
      ledsPattern(ON, ON, ON, ON);
 8000cfe:	2001      	movs	r0, #1
 8000d00:	4601      	mov	r1, r0
 8000d02:	4602      	mov	r2, r0
 8000d04:	4603      	mov	r3, r0
 8000d06:	f7ff bfc9 	b.w	8000c9c <ledsPattern>
      break;
    case 0x1:
      ledsPattern(ON, ON, ON, OFF);
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	4601      	mov	r1, r0
 8000d0e:	4602      	mov	r2, r0
 8000d10:	2300      	movs	r3, #0
 8000d12:	f7ff bfc3 	b.w	8000c9c <ledsPattern>
      break;
    case 0x2:
      ledsPattern(ON, ON, OFF, ON);
 8000d16:	2001      	movs	r0, #1
 8000d18:	4601      	mov	r1, r0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f7ff bfbd 	b.w	8000c9c <ledsPattern>
      break;
    case 0x3:
      ledsPattern(ON, ON, OFF, OFF);
 8000d22:	2001      	movs	r0, #1
 8000d24:	2200      	movs	r2, #0
 8000d26:	4601      	mov	r1, r0
 8000d28:	4613      	mov	r3, r2
 8000d2a:	f7ff bfb7 	b.w	8000c9c <ledsPattern>
      break;
    case 0x4:
      ledsPattern(ON, OFF, ON, ON);
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4602      	mov	r2, r0
 8000d32:	4603      	mov	r3, r0
 8000d34:	2100      	movs	r1, #0
 8000d36:	f7ff bfb1 	b.w	8000c9c <ledsPattern>
      break;
    case 0x5:
      ledsPattern(ON, OFF, ON, OFF);
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4602      	mov	r2, r0
 8000d40:	460b      	mov	r3, r1
 8000d42:	f7ff bfab 	b.w	8000c9c <ledsPattern>
      break;
    case 0x6:
      ledsPattern(ON, OFF, OFF, ON);
 8000d46:	2001      	movs	r0, #1
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	f7ff bfa5 	b.w	8000c9c <ledsPattern>
      break;
    case 0x7:
      ledsPattern(ON, OFF, OFF, OFF);
 8000d52:	2100      	movs	r1, #0
 8000d54:	460a      	mov	r2, r1
 8000d56:	460b      	mov	r3, r1
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f7ff bf9f 	b.w	8000c9c <ledsPattern>
      break;
    case 0x8:
      ledsPattern(OFF, ON, ON, ON);
 8000d5e:	2101      	movs	r1, #1
 8000d60:	460a      	mov	r2, r1
 8000d62:	460b      	mov	r3, r1
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff bf99 	b.w	8000c9c <ledsPattern>
      break;
    case 0x9:
      ledsPattern(OFF, ON, ON, OFF);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	4603      	mov	r3, r0
 8000d70:	460a      	mov	r2, r1
 8000d72:	f7ff bf93 	b.w	8000c9c <ledsPattern>
      break;
    case 0xA:
      ledsPattern(OFF, ON, OFF, ON);
 8000d76:	2000      	movs	r0, #0
 8000d78:	2101      	movs	r1, #1
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	f7ff bf8d 	b.w	8000c9c <ledsPattern>
      break;
    case 0xB: // 1011 -> 011 3
      ledsPattern(OFF, ON, OFF, OFF);
 8000d82:	2000      	movs	r0, #0
 8000d84:	4602      	mov	r2, r0
 8000d86:	4603      	mov	r3, r0
 8000d88:	2101      	movs	r1, #1
 8000d8a:	f7ff bf87 	b.w	8000c9c <ledsPattern>
      break;
    case 0xC:
      ledsPattern(OFF, OFF, ON, ON);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	2201      	movs	r2, #1
 8000d92:	4601      	mov	r1, r0
 8000d94:	4613      	mov	r3, r2
 8000d96:	f7ff bf81 	b.w	8000c9c <ledsPattern>
      break;
    case 0xD: // 1101 -> 101 -> 5
      ledsPattern(OFF, OFF, ON, OFF);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	4601      	mov	r1, r0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2201      	movs	r2, #1
 8000da2:	f7ff bf7b 	b.w	8000c9c <ledsPattern>
      break;
    case 0xE:
      ledsPattern(OFF, OFF, OFF, ON);
      break;
    case 0xF:
      ledsPattern(OFF, OFF, OFF, OFF);
 8000da6:	2000      	movs	r0, #0
 8000da8:	4601      	mov	r1, r0
 8000daa:	4602      	mov	r2, r0
 8000dac:	4603      	mov	r3, r0
 8000dae:	f7ff bf75 	b.w	8000c9c <ledsPattern>
 8000db2:	bf00      	nop

08000db4 <leds_init>:
#define PORTB_LED2 10
#define PORTE_LED3 15

void leds_init()
{
  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 8000db4:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <leds_init+0x2c>)
  GPIOE->MODER   |= (1 << (PORTE_LED0 * 2)) |
 8000db6:	480b      	ldr	r0, [pc, #44]	; (8000de4 <leds_init+0x30>)
#define PORTB_LED2 10
#define PORTE_LED3 15

void leds_init()
{
  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 8000db8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  GPIOE->MODER   |= (1 << (PORTE_LED0 * 2)) |
                    (1 << (PORTE_LED1 * 2)) |
                    (1 << (PORTE_LED3 * 2));

  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOBEN;
  GPIOB->MODER   |= (1 << (PORTB_LED2 * 2));
 8000dba:	490b      	ldr	r1, [pc, #44]	; (8000de8 <leds_init+0x34>)
#define PORTB_LED2 10
#define PORTE_LED3 15

void leds_init()
{
  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 8000dbc:	f043 0310 	orr.w	r3, r3, #16
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOE->MODER   |= (1 << (PORTE_LED0 * 2)) |
 8000dc2:	6803      	ldr	r3, [r0, #0]
 8000dc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000dc8:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8000dcc:	6003      	str	r3, [r0, #0]
                    (1 << (PORTE_LED1 * 2)) |
                    (1 << (PORTE_LED3 * 2));

  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOBEN;
 8000dce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOB->MODER   |= (1 << (PORTB_LED2 * 2));
 8000dd6:	680b      	ldr	r3, [r1, #0]
 8000dd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ddc:	600b      	str	r3, [r1, #0]
 8000dde:	4770      	bx	lr
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40020400 	.word	0x40020400

08000dec <leds_on>:
}

void leds_on(uint8_t led)
{
  if (led == 0)
 8000dec:	b148      	cbz	r0, 8000e02 <leds_on+0x16>
    GPIOE->BSRRL = 1 << PORTE_LED0;
  else if (led == 1)
 8000dee:	2801      	cmp	r0, #1
 8000df0:	d00b      	beq.n	8000e0a <leds_on+0x1e>
    GPIOE->BSRRL = 1 << PORTE_LED1;
  else if (led == 2)
 8000df2:	2802      	cmp	r0, #2
 8000df4:	d012      	beq.n	8000e1c <leds_on+0x30>
    GPIOB->BSRRL = 1 << PORTB_LED2;
  else if (led == 3)
 8000df6:	2803      	cmp	r0, #3
 8000df8:	d00b      	beq.n	8000e12 <leds_on+0x26>
    GPIOE->BSRRL = 1 << PORTE_LED3;
  else
    printf("LED %d does not exist\n", led);
 8000dfa:	4601      	mov	r1, r0
 8000dfc:	480a      	ldr	r0, [pc, #40]	; (8000e28 <leds_on+0x3c>)
 8000dfe:	f002 befd 	b.w	8003bfc <printf>
}

void leds_on(uint8_t led)
{
  if (led == 0)
    GPIOE->BSRRL = 1 << PORTE_LED0;
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <leds_on+0x40>)
 8000e04:	2208      	movs	r2, #8
 8000e06:	831a      	strh	r2, [r3, #24]
 8000e08:	4770      	bx	lr
  else if (led == 1)
    GPIOE->BSRRL = 1 << PORTE_LED1;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <leds_on+0x40>)
 8000e0c:	2210      	movs	r2, #16
 8000e0e:	831a      	strh	r2, [r3, #24]
 8000e10:	4770      	bx	lr
  else if (led == 2)
    GPIOB->BSRRL = 1 << PORTB_LED2;
  else if (led == 3)
    GPIOE->BSRRL = 1 << PORTE_LED3;
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <leds_on+0x40>)
 8000e14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e18:	831a      	strh	r2, [r3, #24]
 8000e1a:	4770      	bx	lr
  if (led == 0)
    GPIOE->BSRRL = 1 << PORTE_LED0;
  else if (led == 1)
    GPIOE->BSRRL = 1 << PORTE_LED1;
  else if (led == 2)
    GPIOB->BSRRL = 1 << PORTB_LED2;
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <leds_on+0x44>)
 8000e1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e22:	831a      	strh	r2, [r3, #24]
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	0800a74c 	.word	0x0800a74c
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40020400 	.word	0x40020400

08000e34 <leds_off>:
    printf("LED %d does not exist\n", led);
}

void leds_off(uint8_t led)
{
  if (led == 0)
 8000e34:	b148      	cbz	r0, 8000e4a <leds_off+0x16>
    GPIOE->BSRRH = 1 << PORTE_LED0;
  else if (led == 1)
 8000e36:	2801      	cmp	r0, #1
 8000e38:	d00b      	beq.n	8000e52 <leds_off+0x1e>
    GPIOE->BSRRH = 1 << PORTE_LED1;
  else if (led == 2)
 8000e3a:	2802      	cmp	r0, #2
 8000e3c:	d012      	beq.n	8000e64 <leds_off+0x30>
    GPIOB->BSRRH = 1 << PORTB_LED2;
  else if (led == 3)
 8000e3e:	2803      	cmp	r0, #3
 8000e40:	d00b      	beq.n	8000e5a <leds_off+0x26>
    GPIOE->BSRRH = 1 << PORTE_LED3;
  else
    printf("LED %d does not exist\n", led);
 8000e42:	4601      	mov	r1, r0
 8000e44:	480a      	ldr	r0, [pc, #40]	; (8000e70 <leds_off+0x3c>)
 8000e46:	f002 bed9 	b.w	8003bfc <printf>
}

void leds_off(uint8_t led)
{
  if (led == 0)
    GPIOE->BSRRH = 1 << PORTE_LED0;
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <leds_off+0x40>)
 8000e4c:	2208      	movs	r2, #8
 8000e4e:	835a      	strh	r2, [r3, #26]
 8000e50:	4770      	bx	lr
  else if (led == 1)
    GPIOE->BSRRH = 1 << PORTE_LED1;
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <leds_off+0x40>)
 8000e54:	2210      	movs	r2, #16
 8000e56:	835a      	strh	r2, [r3, #26]
 8000e58:	4770      	bx	lr
  else if (led == 2)
    GPIOB->BSRRH = 1 << PORTB_LED2;
  else if (led == 3)
    GPIOE->BSRRH = 1 << PORTE_LED3;
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <leds_off+0x40>)
 8000e5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e60:	835a      	strh	r2, [r3, #26]
 8000e62:	4770      	bx	lr
  if (led == 0)
    GPIOE->BSRRH = 1 << PORTE_LED0;
  else if (led == 1)
    GPIOE->BSRRH = 1 << PORTE_LED1;
  else if (led == 2)
    GPIOB->BSRRH = 1 << PORTB_LED2;
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <leds_off+0x44>)
 8000e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e6a:	835a      	strh	r2, [r3, #26]
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	0800a74c 	.word	0x0800a74c
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40020400 	.word	0x40020400

08000e7c <leds_toggle>:
    printf("LED %d does not exist\n", led);
}

void leds_toggle(uint8_t led)
{
  if (led == 0)
 8000e7c:	b148      	cbz	r0, 8000e92 <leds_toggle+0x16>
    GPIOE->ODR ^= 1 << PORTE_LED0;
  else if (led == 1)
 8000e7e:	2801      	cmp	r0, #1
 8000e80:	d00d      	beq.n	8000e9e <leds_toggle+0x22>
    GPIOE->ODR ^= 1 << PORTE_LED1;
  else if (led == 2)
 8000e82:	2802      	cmp	r0, #2
 8000e84:	d017      	beq.n	8000eb6 <leds_toggle+0x3a>
    GPIOB->ODR ^= 1 << PORTB_LED2;
  else if (led == 3)
 8000e86:	2803      	cmp	r0, #3
 8000e88:	d00f      	beq.n	8000eaa <leds_toggle+0x2e>
    GPIOE->ODR ^= 1 << PORTE_LED3;
  else
    printf("LED %d does not exist\n", led);
 8000e8a:	4601      	mov	r1, r0
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <leds_toggle+0x48>)
 8000e8e:	f002 beb5 	b.w	8003bfc <printf>
}

void leds_toggle(uint8_t led)
{
  if (led == 0)
    GPIOE->ODR ^= 1 << PORTE_LED0;
 8000e92:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <leds_toggle+0x4c>)
 8000e94:	6953      	ldr	r3, [r2, #20]
 8000e96:	f083 0308 	eor.w	r3, r3, #8
 8000e9a:	6153      	str	r3, [r2, #20]
 8000e9c:	4770      	bx	lr
  else if (led == 1)
    GPIOE->ODR ^= 1 << PORTE_LED1;
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <leds_toggle+0x4c>)
 8000ea0:	6953      	ldr	r3, [r2, #20]
 8000ea2:	f083 0310 	eor.w	r3, r3, #16
 8000ea6:	6153      	str	r3, [r2, #20]
 8000ea8:	4770      	bx	lr
  else if (led == 2)
    GPIOB->ODR ^= 1 << PORTB_LED2;
  else if (led == 3)
    GPIOE->ODR ^= 1 << PORTE_LED3;
 8000eaa:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <leds_toggle+0x4c>)
 8000eac:	6953      	ldr	r3, [r2, #20]
 8000eae:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8000eb2:	6153      	str	r3, [r2, #20]
 8000eb4:	4770      	bx	lr
  if (led == 0)
    GPIOE->ODR ^= 1 << PORTE_LED0;
  else if (led == 1)
    GPIOE->ODR ^= 1 << PORTE_LED1;
  else if (led == 2)
    GPIOB->ODR ^= 1 << PORTB_LED2;
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <leds_toggle+0x50>)
 8000eb8:	6953      	ldr	r3, [r2, #20]
 8000eba:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 8000ebe:	6153      	str	r3, [r2, #20]
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	0800a74c 	.word	0x0800a74c
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40020400 	.word	0x40020400

08000ed0 <console_init>:

static volatile uint8_t s_console_init_complete = 0;

void console_init()
{
  s_console_init_complete = 1;
 8000ed0:	4815      	ldr	r0, [pc, #84]	; (8000f28 <console_init+0x58>)
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000ed2:	4916      	ldr	r1, [pc, #88]	; (8000f2c <console_init+0x5c>)
  RCC->APB1ENR |= RCC_APB1ENR_UART8EN;
  GPIOE->MODER   |= (0x2) << (PORTE_TX * 2);
 8000ed4:	4a16      	ldr	r2, [pc, #88]	; (8000f30 <console_init+0x60>)
  GPIOE->AFR[0]  |= (0x8) << (PORTE_TX * 4);
  // RX not used at the moment. TX only used for stdout
  UART8->CR1 &= ~USART_CR1_UE;
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <console_init+0x64>)
#define PORTE_TX 1

static volatile uint8_t s_console_init_complete = 0;

void console_init()
{
 8000ed8:	b410      	push	{r4}
  s_console_init_complete = 1;
 8000eda:	2401      	movs	r4, #1
 8000edc:	7004      	strb	r4, [r0, #0]
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000ede:	6b08      	ldr	r0, [r1, #48]	; 0x30
  UART8->CR1 &= ~USART_CR1_UE;
  UART8->CR1 |=  USART_CR1_TE | USART_CR1_RE;
  // we want 1 megabit. do this with mantissa=2 and fraction (sixteenths)=10
  UART8->BRR  = (((uint16_t)2) << 4) | 10;
  UART8->CR1 |=  USART_CR1_UE;
}
 8000ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
static volatile uint8_t s_console_init_complete = 0;

void console_init()
{
  s_console_init_complete = 1;
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000ee4:	f040 0010 	orr.w	r0, r0, #16
 8000ee8:	6308      	str	r0, [r1, #48]	; 0x30
  RCC->APB1ENR |= RCC_APB1ENR_UART8EN;
 8000eea:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8000eec:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8000ef0:	6408      	str	r0, [r1, #64]	; 0x40
  GPIOE->MODER   |= (0x2) << (PORTE_TX * 2);
 8000ef2:	6811      	ldr	r1, [r2, #0]
 8000ef4:	f041 0108 	orr.w	r1, r1, #8
 8000ef8:	6011      	str	r1, [r2, #0]
  GPIOE->AFR[0]  |= (0x8) << (PORTE_TX * 4);
 8000efa:	6a11      	ldr	r1, [r2, #32]
 8000efc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000f00:	6211      	str	r1, [r2, #32]
  // RX not used at the moment. TX only used for stdout
  UART8->CR1 &= ~USART_CR1_UE;
 8000f02:	899a      	ldrh	r2, [r3, #12]
 8000f04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f08:	0412      	lsls	r2, r2, #16
 8000f0a:	0c12      	lsrs	r2, r2, #16
 8000f0c:	819a      	strh	r2, [r3, #12]
  UART8->CR1 |=  USART_CR1_TE | USART_CR1_RE;
 8000f0e:	899a      	ldrh	r2, [r3, #12]
 8000f10:	b292      	uxth	r2, r2
 8000f12:	f042 020c 	orr.w	r2, r2, #12
  // we want 1 megabit. do this with mantissa=2 and fraction (sixteenths)=10
  UART8->BRR  = (((uint16_t)2) << 4) | 10;
 8000f16:	212a      	movs	r1, #42	; 0x2a
  RCC->APB1ENR |= RCC_APB1ENR_UART8EN;
  GPIOE->MODER   |= (0x2) << (PORTE_TX * 2);
  GPIOE->AFR[0]  |= (0x8) << (PORTE_TX * 4);
  // RX not used at the moment. TX only used for stdout
  UART8->CR1 &= ~USART_CR1_UE;
  UART8->CR1 |=  USART_CR1_TE | USART_CR1_RE;
 8000f18:	819a      	strh	r2, [r3, #12]
  // we want 1 megabit. do this with mantissa=2 and fraction (sixteenths)=10
  UART8->BRR  = (((uint16_t)2) << 4) | 10;
 8000f1a:	8119      	strh	r1, [r3, #8]
  UART8->CR1 |=  USART_CR1_UE;
 8000f1c:	899a      	ldrh	r2, [r3, #12]
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f24:	819a      	strh	r2, [r3, #12]
}
 8000f26:	4770      	bx	lr
 8000f28:	2000095c 	.word	0x2000095c
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40007c00 	.word	0x40007c00

08000f38 <console_send_block>:

void console_send_block(const uint8_t *buf, uint32_t len)
{
 8000f38:	b538      	push	{r3, r4, r5, lr}
  if (!s_console_init_complete)
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <console_send_block+0x38>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
  UART8->BRR  = (((uint16_t)2) << 4) | 10;
  UART8->CR1 |=  USART_CR1_UE;
}

void console_send_block(const uint8_t *buf, uint32_t len)
{
 8000f3e:	4605      	mov	r5, r0
 8000f40:	460c      	mov	r4, r1
  if (!s_console_init_complete)
 8000f42:	b18b      	cbz	r3, 8000f68 <console_send_block+0x30>
    console_init();
  for (uint32_t i = 0; i < len; i++)
 8000f44:	b15c      	cbz	r4, 8000f5e <console_send_block+0x26>
  {
    while (!(UART8->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <console_send_block+0x3c>)
 8000f48:	1929      	adds	r1, r5, r4
 8000f4a:	4628      	mov	r0, r5
 8000f4c:	4614      	mov	r4, r2
 8000f4e:	8813      	ldrh	r3, [r2, #0]
 8000f50:	061d      	lsls	r5, r3, #24
 8000f52:	d5fc      	bpl.n	8000f4e <console_send_block+0x16>
    UART8->DR = buf[i];
 8000f54:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000f58:	80a3      	strh	r3, [r4, #4]

void console_send_block(const uint8_t *buf, uint32_t len)
{
  if (!s_console_init_complete)
    console_init();
  for (uint32_t i = 0; i < len; i++)
 8000f5a:	4288      	cmp	r0, r1
 8000f5c:	d1f7      	bne.n	8000f4e <console_send_block+0x16>
  {
    while (!(UART8->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
    UART8->DR = buf[i];
  }
  while (!(UART8->SR & USART_SR_TC)) { } // wait for TX to finish
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <console_send_block+0x3c>)
 8000f60:	8813      	ldrh	r3, [r2, #0]
 8000f62:	065b      	lsls	r3, r3, #25
 8000f64:	d5fc      	bpl.n	8000f60 <console_send_block+0x28>
  //for (volatile int i = 0; i < 100000; i++) { } // give usb uart some time...
}
 8000f66:	bd38      	pop	{r3, r4, r5, pc}
}

void console_send_block(const uint8_t *buf, uint32_t len)
{
  if (!s_console_init_complete)
    console_init();
 8000f68:	f7ff ffb2 	bl	8000ed0 <console_init>
 8000f6c:	e7ea      	b.n	8000f44 <console_send_block+0xc>
 8000f6e:	bf00      	nop
 8000f70:	2000095c 	.word	0x2000095c
 8000f74:	40007c00 	.word	0x40007c00

08000f78 <_sbrk>:

caddr_t _sbrk(int incr)
{
  static unsigned char *heap = NULL ;
  unsigned char *prev_heap ;
  if ( heap == NULL )
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <_sbrk+0x14>)
 8000f7a:	4905      	ldr	r1, [pc, #20]	; (8000f90 <_sbrk+0x18>)
 8000f7c:	6813      	ldr	r3, [r2, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	bf08      	it	eq
 8000f82:	460b      	moveq	r3, r1
    heap = (unsigned char *)&_end ;
  prev_heap = heap;
  heap += incr ;
 8000f84:	4418      	add	r0, r3
 8000f86:	6010      	str	r0, [r2, #0]
  return (caddr_t) prev_heap ;
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	4770      	bx	lr
 8000f8c:	20000960 	.word	0x20000960
 8000f90:	20014660 	.word	0x20014660

08000f94 <_kill>:

int _kill(__attribute__((unused)) int pid, 
          __attribute__((unused)) int sig) { return -1; }
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <_exit>:
void _exit(__attribute__((unused)) int status) { while (1) {} } // spin...
 8000f9c:	e7fe      	b.n	8000f9c <_exit>
 8000f9e:	bf00      	nop

08000fa0 <_getpid>:
int _getpid() { return 1; }
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	4770      	bx	lr

08000fa4 <_write>:

int _write(__attribute__((unused)) int fd, const void *buf, size_t count)
{
 8000fa4:	b510      	push	{r4, lr}
  console_send_block((uint8_t *)buf, count);
 8000fa6:	4608      	mov	r0, r1
          __attribute__((unused)) int sig) { return -1; }
void _exit(__attribute__((unused)) int status) { while (1) {} } // spin...
int _getpid() { return 1; }

int _write(__attribute__((unused)) int fd, const void *buf, size_t count)
{
 8000fa8:	4614      	mov	r4, r2
  console_send_block((uint8_t *)buf, count);
 8000faa:	4611      	mov	r1, r2
 8000fac:	f7ff ffc4 	bl	8000f38 <console_send_block>
  return count;
}
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	bd10      	pop	{r4, pc}

08000fb4 <_close>:
int _close(__attribute__((unused)) int fd) { return -1; }
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <_fstat>:
int _fstat(__attribute__((unused)) int fd, 
           __attribute__((unused)) struct stat *st)
{
  st->st_mode = S_IFCHR;
 8000fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc0:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <_isatty>:
int _isatty(__attribute__((unused)) int fd) { return 1; }
 8000fc8:	2001      	movs	r0, #1
 8000fca:	4770      	bx	lr

08000fcc <_lseek>:
off_t _lseek(__attribute__((unused)) int fd, 
             __attribute__((unused)) off_t offset, 
             __attribute__((unused)) int whence) { return 0; }
 8000fcc:	2000      	movs	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <_read>:
ssize_t _read(__attribute__((unused)) int fd, 
              __attribute__((unused)) void *buf, 
              __attribute__((unused)) size_t count) { return 0; }
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	4770      	bx	lr

08000fd4 <fputc>:
FILE __stdout;
FILE __stderr;
int fputc(__attribute__((unused)) int ch, __attribute__((unused)) FILE *f)
{
  return 0;
}
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	4770      	bx	lr

08000fd8 <_ttywrch>:
void _ttywrch(__attribute__((unused)) int ch) { }
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <enet_read_phy_reg>:

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8000fdc:	4909      	ldr	r1, [pc, #36]	; (8001004 <enet_read_phy_reg+0x28>)
 8000fde:	690a      	ldr	r2, [r1, #16]
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <enet_read_phy_reg+0x28>)
 8000fe2:	07d2      	lsls	r2, r2, #31
 8000fe4:	d4fb      	bmi.n	8000fde <enet_read_phy_reg+0x2>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
                  ((reg_idx & 0x1f) << 6) |
 8000fe6:	f000 021f 	and.w	r2, r0, #31
 8000fea:	0192      	lsls	r2, r2, #6
                  ETH_MACMIIAR_CR_Div102  | // clock divider
 8000fec:	f442 6201 	orr.w	r2, r2, #2064	; 0x810
 8000ff0:	f042 0201 	orr.w	r2, r2, #1
///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 8000ff4:	611a      	str	r2, [r3, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	4902      	ldr	r1, [pc, #8]	; (8001004 <enet_read_phy_reg+0x28>)
 8000ffa:	07d2      	lsls	r2, r2, #31
 8000ffc:	d4fb      	bmi.n	8000ff6 <enet_read_phy_reg+0x1a>
  return ETH->MACMIIDR & 0xffff;
 8000ffe:	6948      	ldr	r0, [r1, #20]
}
 8001000:	b280      	uxth	r0, r0
 8001002:	4770      	bx	lr
 8001004:	40028000 	.word	0x40028000

08001008 <enet_write_phy_reg>:

void enet_write_phy_reg(const uint8_t reg_idx, const uint16_t reg_val)
{
 8001008:	b430      	push	{r4, r5}
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 800100a:	4d15      	ldr	r5, [pc, #84]	; (8001060 <enet_write_phy_reg+0x58>)
 800100c:	692b      	ldr	r3, [r5, #16]
 800100e:	4c14      	ldr	r4, [pc, #80]	; (8001060 <enet_write_phy_reg+0x58>)
 8001010:	07da      	lsls	r2, r3, #31
 8001012:	d4fb      	bmi.n	800100c <enet_write_phy_reg+0x4>
  ETH->MACMIIDR = reg_val; // set the outgoing data word
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11)   |
                  ((reg_idx & 0x1f) << 6) |
 8001014:	f000 021f 	and.w	r2, r0, #31
 8001018:	0192      	lsls	r2, r2, #6
                  ETH_MACMIIAR_CR_Div102  | // MDC clock divider
                  ETH_MACMIIAR_MW         | // set the write bit
 800101a:	f442 6301 	orr.w	r3, r2, #2064	; 0x810
 800101e:	f043 0303 	orr.w	r3, r3, #3
}

void enet_write_phy_reg(const uint8_t reg_idx, const uint16_t reg_val)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIDR = reg_val; // set the outgoing data word
 8001022:	6161      	str	r1, [r4, #20]
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11)   |
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // MDC clock divider
                  ETH_MACMIIAR_MW         | // set the write bit
                  ETH_MACMIIAR_MB; // start it up
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8001024:	4625      	mov	r5, r4

void enet_write_phy_reg(const uint8_t reg_idx, const uint16_t reg_val)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIDR = reg_val; // set the outgoing data word
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11)   |
 8001026:	6123      	str	r3, [r4, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // MDC clock divider
                  ETH_MACMIIAR_MW         | // set the write bit
                  ETH_MACMIIAR_MB; // start it up
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8001028:	692b      	ldr	r3, [r5, #16]
 800102a:	07db      	lsls	r3, r3, #31
 800102c:	d4fc      	bmi.n	8001028 <enet_write_phy_reg+0x20>

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 800102e:	4d0c      	ldr	r5, [pc, #48]	; (8001060 <enet_write_phy_reg+0x58>)
 8001030:	692c      	ldr	r4, [r5, #16]
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <enet_write_phy_reg+0x58>)
 8001034:	07e4      	lsls	r4, r4, #31
 8001036:	d4fb      	bmi.n	8001030 <enet_write_phy_reg+0x28>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
 8001038:	f442 6401 	orr.w	r4, r2, #2064	; 0x810
 800103c:	f044 0401 	orr.w	r4, r4, #1
///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 8001040:	611c      	str	r4, [r3, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8001042:	691c      	ldr	r4, [r3, #16]
 8001044:	4d06      	ldr	r5, [pc, #24]	; (8001060 <enet_write_phy_reg+0x58>)
 8001046:	07e2      	lsls	r2, r4, #31
 8001048:	d4fb      	bmi.n	8001042 <enet_write_phy_reg+0x3a>
  return ETH->MACMIIDR & 0xffff;
 800104a:	696b      	ldr	r3, [r5, #20]
                  ETH_MACMIIAR_CR_Div102  | // MDC clock divider
                  ETH_MACMIIAR_MW         | // set the write bit
                  ETH_MACMIIAR_MB; // start it up
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
  uint16_t readback_val = enet_read_phy_reg(reg_idx);
  if (readback_val != reg_val)
 800104c:	b29b      	uxth	r3, r3
 800104e:	4299      	cmp	r1, r3
 8001050:	d004      	beq.n	800105c <enet_write_phy_reg+0x54>
  {
    printf("woah there. tried to write 0x%04x to reg %02d but it read back %04x\r\n",
 8001052:	4602      	mov	r2, r0
           reg_val, reg_idx, readback_val);
  }
}
 8001054:	bc30      	pop	{r4, r5}
                  ETH_MACMIIAR_MB; // start it up
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
  uint16_t readback_val = enet_read_phy_reg(reg_idx);
  if (readback_val != reg_val)
  {
    printf("woah there. tried to write 0x%04x to reg %02d but it read back %04x\r\n",
 8001056:	4803      	ldr	r0, [pc, #12]	; (8001064 <enet_write_phy_reg+0x5c>)
 8001058:	f002 bdd0 	b.w	8003bfc <printf>
           reg_val, reg_idx, readback_val);
  }
}
 800105c:	bc30      	pop	{r4, r5}
 800105e:	4770      	bx	lr
 8001060:	40028000 	.word	0x40028000
 8001064:	0800a764 	.word	0x0800a764

08001068 <enet_init>:

void enet_init()
{
 8001068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  printf("enet_init()\r\n");
 800106c:	48a2      	ldr	r0, [pc, #648]	; (80012f8 <enet_init+0x290>)
  // set up the pins on port a
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN     |  // and all the i/o ports we
                  RCC_AHB1ENR_GPIOBEN     |  // will be using to talk to
                  RCC_AHB1ENR_GPIOCEN;       // the ethernet PHY

  GPIOA->MODER |= (2 << (PORTA_ETH_REFCLK * 2)) |
 800106e:	4ca3      	ldr	r4, [pc, #652]	; (80012fc <enet_init+0x294>)
           reg_val, reg_idx, readback_val);
  }
}

void enet_init()
{
 8001070:	b08e      	sub	sp, #56	; 0x38
  printf("enet_init()\r\n");
 8001072:	f002 fe09 	bl	8003c88 <puts>
  // set up the pins on port a
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN     |  // and all the i/o ports we
 8001076:	4aa2      	ldr	r2, [pc, #648]	; (8001300 <enet_init+0x298>)
  GPIOA->AFR[0] |= (11 << (PORTA_ETH_REFCLK * 4)) |
                   (11 << (PORTA_ETH_MDIO   * 4)) |
                   (11 << (PORTA_ETH_CRSDV  * 4));

  // set up the ethernet pins on port b
  GPIOB->MODER |= (2 << (PORTB_ETH_TXEN * 2)) |
 8001078:	4ba2      	ldr	r3, [pc, #648]	; (8001304 <enet_init+0x29c>)

void enet_init()
{
  printf("enet_init()\r\n");
  // set up the pins on port a
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN     |  // and all the i/o ports we
 800107a:	6b11      	ldr	r1, [r2, #48]	; 0x30
                    (3 << (PORTB_ETH_TXD0 * 2)) |
                    (3 << (PORTB_ETH_TXD1 * 2)); // make the tx pins go fast
  GPIOB->MODER |= (1 << (PORTB_PHY_RESET * 2)); // reset = gpio output pin

  // set up the ethernet pins on port c
  GPIOC->MODER  |= ( 2 << (PORTC_ETH_MDC  * 2)) |
 800107c:	48a2      	ldr	r0, [pc, #648]	; (8001308 <enet_init+0x2a0>)

void enet_init()
{
  printf("enet_init()\r\n");
  // set up the pins on port a
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN     |  // and all the i/o ports we
 800107e:	f041 0107 	orr.w	r1, r1, #7
 8001082:	6311      	str	r1, [r2, #48]	; 0x30
                  RCC_AHB1ENR_GPIOBEN     |  // will be using to talk to
                  RCC_AHB1ENR_GPIOCEN;       // the ethernet PHY

  GPIOA->MODER |= (2 << (PORTA_ETH_REFCLK * 2)) |
 8001084:	6821      	ldr	r1, [r4, #0]
 8001086:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800108a:	f041 0128 	orr.w	r1, r1, #40	; 0x28
 800108e:	6021      	str	r1, [r4, #0]
                  (2 << (PORTA_ETH_MDIO   * 2)) |
                  (2 << (PORTA_ETH_CRSDV  * 2)); // set these guys as AF pins
  GPIOA->AFR[0] |= (11 << (PORTA_ETH_REFCLK * 4)) |
 8001090:	6a21      	ldr	r1, [r4, #32]
 8001092:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 8001096:	f441 613b 	orr.w	r1, r1, #2992	; 0xbb0
 800109a:	6221      	str	r1, [r4, #32]
                   (11 << (PORTA_ETH_MDIO   * 4)) |
                   (11 << (PORTA_ETH_CRSDV  * 4));

  // set up the ethernet pins on port b
  GPIOB->MODER |= (2 << (PORTB_ETH_TXEN * 2)) |
 800109c:	6819      	ldr	r1, [r3, #0]
 800109e:	f041 6128 	orr.w	r1, r1, #176160768	; 0xa800000
 80010a2:	6019      	str	r1, [r3, #0]
                  (2 << (PORTB_ETH_TXD0 * 2)) |
                  (2 << (PORTB_ETH_TXD1 * 2));
  GPIOB->AFR[1] |= (11 << ((PORTB_ETH_TXEN - 8) * 4)) |
 80010a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80010a6:	f441 013b 	orr.w	r1, r1, #12255232	; 0xbb0000
 80010aa:	f441 4130 	orr.w	r1, r1, #45056	; 0xb000
 80010ae:	6259      	str	r1, [r3, #36]	; 0x24
                   (11 << ((PORTB_ETH_TXD0 - 8) * 4)) |
                   (11 << ((PORTB_ETH_TXD1 - 8) * 4));
  GPIOB->OSPEEDR |= (3 << (PORTB_ETH_TXEN * 2)) |
 80010b0:	6899      	ldr	r1, [r3, #8]
 80010b2:	f041 617c 	orr.w	r1, r1, #264241152	; 0xfc00000
 80010b6:	6099      	str	r1, [r3, #8]
                    (3 << (PORTB_ETH_TXD0 * 2)) |
                    (3 << (PORTB_ETH_TXD1 * 2)); // make the tx pins go fast
  GPIOB->MODER |= (1 << (PORTB_PHY_RESET * 2)); // reset = gpio output pin
 80010b8:	6819      	ldr	r1, [r3, #0]
 80010ba:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80010be:	6019      	str	r1, [r3, #0]

  // set up the ethernet pins on port c
  GPIOC->MODER  |= ( 2 << (PORTC_ETH_MDC  * 2)) |
 80010c0:	6803      	ldr	r3, [r0, #0]
 80010c2:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	6003      	str	r3, [r0, #0]
                   ( 2 << (PORTC_ETH_RXD0 * 2)) |
                   ( 2 << (PORTC_ETH_RXD1 * 2));
  GPIOC->AFR[0] |= (11 << (PORTC_ETH_MDC  * 4)) |
 80010cc:	6a03      	ldr	r3, [r0, #32]
 80010ce:	f443 033b 	orr.w	r3, r3, #12255232	; 0xbb0000
 80010d2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80010d6:	6203      	str	r3, [r0, #32]
                   (11 << (PORTC_ETH_RXD0 * 4)) |
                   (11 << (PORTC_ETH_RXD1 * 4));

  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable the sysconfig block
 80010d8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80010da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010de:	6453      	str	r3, [r2, #68]	; 0x44
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 80010e0:	6913      	ldr	r3, [r2, #16]
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
 80010e2:	2100      	movs	r1, #0
  GPIOC->AFR[0] |= (11 << (PORTC_ETH_MDC  * 4)) |
                   (11 << (PORTC_ETH_RXD0 * 4)) |
                   (11 << (PORTC_ETH_RXD1 * 4));

  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable the sysconfig block
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 80010e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010e8:	6113      	str	r3, [r2, #16]
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
 80010ea:	9101      	str	r1, [sp, #4]
 80010ec:	9b01      	ldr	r3, [sp, #4]
 80010ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010f2:	da06      	bge.n	8001102 <enet_init+0x9a>
 80010f4:	9b01      	ldr	r3, [sp, #4]
 80010f6:	3301      	adds	r3, #1
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	9b01      	ldr	r3, [sp, #4]
 80010fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001100:	dbf8      	blt.n	80010f4 <enet_init+0x8c>
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
 8001102:	2300      	movs	r3, #0
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	9b02      	ldr	r3, [sp, #8]
 8001108:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800110c:	da06      	bge.n	800111c <enet_init+0xb4>
 800110e:	9b02      	ldr	r3, [sp, #8]
 8001110:	3301      	adds	r3, #1
 8001112:	9302      	str	r3, [sp, #8]
 8001114:	9b02      	ldr	r3, [sp, #8]
 8001116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800111a:	dbf8      	blt.n	800110e <enet_init+0xa6>
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode
 800111c:	497b      	ldr	r1, [pc, #492]	; (800130c <enet_init+0x2a4>)
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
 800111e:	4a7c      	ldr	r2, [pc, #496]	; (8001310 <enet_init+0x2a8>)
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable the sysconfig block
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode
 8001120:	684b      	ldr	r3, [r1, #4]
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
 8001122:	2000      	movs	r0, #0
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable the sysconfig block
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode
 8001124:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001128:	604b      	str	r3, [r1, #4]
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
 800112a:	9003      	str	r0, [sp, #12]
 800112c:	9b03      	ldr	r3, [sp, #12]
 800112e:	4293      	cmp	r3, r2
 8001130:	dc05      	bgt.n	800113e <enet_init+0xd6>
 8001132:	9b03      	ldr	r3, [sp, #12]
 8001134:	3301      	adds	r3, #1
 8001136:	9303      	str	r3, [sp, #12]
 8001138:	9b03      	ldr	r3, [sp, #12]
 800113a:	4293      	cmp	r3, r2
 800113c:	ddf9      	ble.n	8001132 <enet_init+0xca>
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
 800113e:	4970      	ldr	r1, [pc, #448]	; (8001300 <enet_init+0x298>)
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8001140:	4a73      	ldr	r2, [pc, #460]	; (8001310 <enet_init+0x2a8>)
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
 8001142:	6b0b      	ldr	r3, [r1, #48]	; 0x30
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8001144:	2000      	movs	r0, #0
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
 8001146:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 800114a:	630b      	str	r3, [r1, #48]	; 0x30
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
 800114c:	9004      	str	r0, [sp, #16]
 800114e:	9b04      	ldr	r3, [sp, #16]
 8001150:	4293      	cmp	r3, r2
 8001152:	dc05      	bgt.n	8001160 <enet_init+0xf8>
 8001154:	9b04      	ldr	r3, [sp, #16]
 8001156:	3301      	adds	r3, #1
 8001158:	9304      	str	r3, [sp, #16]
 800115a:	9b04      	ldr	r3, [sp, #16]
 800115c:	4293      	cmp	r3, r2
 800115e:	ddf9      	ble.n	8001154 <enet_init+0xec>
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 8001160:	4967      	ldr	r1, [pc, #412]	; (8001300 <enet_init+0x298>)
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8001162:	4a6b      	ldr	r2, [pc, #428]	; (8001310 <enet_init+0x2a8>)
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 8001164:	690b      	ldr	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8001166:	2000      	movs	r0, #0
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 8001168:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800116c:	610b      	str	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait
 800116e:	9005      	str	r0, [sp, #20]
 8001170:	9b05      	ldr	r3, [sp, #20]
 8001172:	4293      	cmp	r3, r2
 8001174:	dc05      	bgt.n	8001182 <enet_init+0x11a>
 8001176:	9b05      	ldr	r3, [sp, #20]
 8001178:	3301      	adds	r3, #1
 800117a:	9305      	str	r3, [sp, #20]
 800117c:	9b05      	ldr	r3, [sp, #20]
 800117e:	4293      	cmp	r3, r2
 8001180:	ddf9      	ble.n	8001176 <enet_init+0x10e>
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 8001182:	495f      	ldr	r1, [pc, #380]	; (8001300 <enet_init+0x298>)
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8001184:	4a62      	ldr	r2, [pc, #392]	; (8001310 <enet_init+0x2a8>)
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 8001186:	690b      	ldr	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8001188:	2000      	movs	r0, #0
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 800118a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800118e:	610b      	str	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8001190:	9006      	str	r0, [sp, #24]
 8001192:	9b06      	ldr	r3, [sp, #24]
 8001194:	4293      	cmp	r3, r2
 8001196:	dc05      	bgt.n	80011a4 <enet_init+0x13c>
 8001198:	9b06      	ldr	r3, [sp, #24]
 800119a:	3301      	adds	r3, #1
 800119c:	9306      	str	r3, [sp, #24]
 800119e:	9b06      	ldr	r3, [sp, #24]
 80011a0:	4293      	cmp	r3, r2
 80011a2:	ddf9      	ble.n	8001198 <enet_init+0x130>
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 80011a4:	4956      	ldr	r1, [pc, #344]	; (8001300 <enet_init+0x298>)
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)
 80011a6:	4a5a      	ldr	r2, [pc, #360]	; (8001310 <enet_init+0x2a8>)
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 80011a8:	690b      	ldr	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)
 80011aa:	2000      	movs	r0, #0
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 80011ac:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80011b0:	610b      	str	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)
 80011b2:	9007      	str	r0, [sp, #28]
 80011b4:	9b07      	ldr	r3, [sp, #28]
 80011b6:	4293      	cmp	r3, r2
 80011b8:	dc05      	bgt.n	80011c6 <enet_init+0x15e>
 80011ba:	9b07      	ldr	r3, [sp, #28]
 80011bc:	3301      	adds	r3, #1
 80011be:	9307      	str	r3, [sp, #28]
 80011c0:	9b07      	ldr	r3, [sp, #28]
 80011c2:	4293      	cmp	r3, r2
 80011c4:	ddf9      	ble.n	80011ba <enet_init+0x152>

  ETH->DMABMR |= ETH_DMABMR_SR;
 80011c6:	4953      	ldr	r1, [pc, #332]	; (8001314 <enet_init+0x2ac>)
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 80011c8:	4a51      	ldr	r2, [pc, #324]	; (8001310 <enet_init+0x2a8>)
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)

  ETH->DMABMR |= ETH_DMABMR_SR;
 80011ca:	680b      	ldr	r3, [r1, #0]
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 80011cc:	2000      	movs	r0, #0
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)

  ETH->DMABMR |= ETH_DMABMR_SR;
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	600b      	str	r3, [r1, #0]
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 80011d4:	9008      	str	r0, [sp, #32]
 80011d6:	9b08      	ldr	r3, [sp, #32]
 80011d8:	4293      	cmp	r3, r2
 80011da:	d805      	bhi.n	80011e8 <enet_init+0x180>
 80011dc:	9b08      	ldr	r3, [sp, #32]
 80011de:	3301      	adds	r3, #1
 80011e0:	9308      	str	r3, [sp, #32]
 80011e2:	9b08      	ldr	r3, [sp, #32]
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d9f9      	bls.n	80011dc <enet_init+0x174>
  while (ETH->DMABMR & ETH_DMABMR_SR) { } // wait for it to reset
 80011e8:	4a4a      	ldr	r2, [pc, #296]	; (8001314 <enet_init+0x2ac>)
 80011ea:	6813      	ldr	r3, [r2, #0]
 80011ec:	f013 0301 	ands.w	r3, r3, #1
 80011f0:	d1fb      	bne.n	80011ea <enet_init+0x182>
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 80011f2:	9309      	str	r3, [sp, #36]	; 0x24
 80011f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011f6:	4a46      	ldr	r2, [pc, #280]	; (8001310 <enet_init+0x2a8>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d805      	bhi.n	8001208 <enet_init+0x1a0>
 80011fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011fe:	3301      	adds	r3, #1
 8001200:	9309      	str	r3, [sp, #36]	; 0x24
 8001202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001204:	4293      	cmp	r3, r2
 8001206:	d9f9      	bls.n	80011fc <enet_init+0x194>
  ETH->DMAOMR |= ETH_DMAOMR_FTF; // flush DMA
 8001208:	4843      	ldr	r0, [pc, #268]	; (8001318 <enet_init+0x2b0>)
  while (ETH->DMAOMR & ETH_DMAOMR_FTF) { } // wait for it to flush
 800120a:	4944      	ldr	r1, [pc, #272]	; (800131c <enet_init+0x2b4>)

  ETH->DMABMR |= ETH_DMABMR_SR;
  for (volatile uint32_t i = 0; i < 100000; i++) { }
  while (ETH->DMABMR & ETH_DMABMR_SR) { } // wait for it to reset
  for (volatile uint32_t i = 0; i < 100000; i++) { }
  ETH->DMAOMR |= ETH_DMAOMR_FTF; // flush DMA
 800120c:	f241 0218 	movw	r2, #4120	; 0x1018
 8001210:	5883      	ldr	r3, [r0, r2]
 8001212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001216:	5083      	str	r3, [r0, r2]
  while (ETH->DMAOMR & ETH_DMAOMR_FTF) { } // wait for it to flush
 8001218:	680b      	ldr	r3, [r1, #0]
 800121a:	4a3f      	ldr	r2, [pc, #252]	; (8001318 <enet_init+0x2b0>)
 800121c:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
 8001220:	d1fa      	bne.n	8001218 <enet_init+0x1b0>

  // now, configure the ethernet peripheral
  ETH->MACCR |= 0x02000000 | // CSTF = strip FCS. why isn't there a symbol ?
 8001222:	6810      	ldr	r0, [r2, #0]
                ETH_MACCR_DM   | // full duplex
                ETH_MACCR_IPCO | // ipv4 checksum auto-generation for RX
                ETH_MACCR_APCS;  // automatically remove pad+CRC from frames
  ETH->MACFFR |= ETH_MACFFR_RA; // for now, don't try to filter in hardware
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
 8001224:	4c37      	ldr	r4, [pc, #220]	; (8001304 <enet_init+0x29c>)
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 8001226:	493a      	ldr	r1, [pc, #232]	; (8001310 <enet_init+0x2a8>)
  for (volatile uint32_t i = 0; i < 100000; i++) { }
  ETH->DMAOMR |= ETH_DMAOMR_FTF; // flush DMA
  while (ETH->DMAOMR & ETH_DMAOMR_FTF) { } // wait for it to flush

  // now, configure the ethernet peripheral
  ETH->MACCR |= 0x02000000 | // CSTF = strip FCS. why isn't there a symbol ?
 8001228:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 800122c:	f440 4099 	orr.w	r0, r0, #19584	; 0x4c80
 8001230:	6010      	str	r0, [r2, #0]
                ETH_MACCR_FES  | // enable 100 mbit mode
                ETH_MACCR_DM   | // full duplex
                ETH_MACCR_IPCO | // ipv4 checksum auto-generation for RX
                ETH_MACCR_APCS;  // automatically remove pad+CRC from frames
  ETH->MACFFR |= ETH_MACFFR_RA; // for now, don't try to filter in hardware
 8001232:	6850      	ldr	r0, [r2, #4]
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
 8001234:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  ETH->MACCR |= 0x02000000 | // CSTF = strip FCS. why isn't there a symbol ?
                ETH_MACCR_FES  | // enable 100 mbit mode
                ETH_MACCR_DM   | // full duplex
                ETH_MACCR_IPCO | // ipv4 checksum auto-generation for RX
                ETH_MACCR_APCS;  // automatically remove pad+CRC from frames
  ETH->MACFFR |= ETH_MACFFR_RA; // for now, don't try to filter in hardware
 8001238:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800123c:	6050      	str	r0, [r2, #4]
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
 800123e:	8325      	strh	r5, [r4, #24]
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 8001240:	930a      	str	r3, [sp, #40]	; 0x28
 8001242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001244:	428b      	cmp	r3, r1
 8001246:	bf98      	it	ls
 8001248:	460a      	movls	r2, r1
 800124a:	d805      	bhi.n	8001258 <enet_init+0x1f0>
 800124c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800124e:	3301      	adds	r3, #1
 8001250:	930a      	str	r3, [sp, #40]	; 0x28
 8001252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001254:	4293      	cmp	r3, r2
 8001256:	d9f9      	bls.n	800124c <enet_init+0x1e4>
  GPIOB->BSRRH = 1 << PORTB_PHY_RESET; // assert reset (pull it low)
 8001258:	492a      	ldr	r1, [pc, #168]	; (8001304 <enet_init+0x29c>)
  for (volatile uint32_t i = 0; i < 100000; i++) { } // let some time pass
 800125a:	4a2d      	ldr	r2, [pc, #180]	; (8001310 <enet_init+0x2a8>)
 800125c:	2300      	movs	r3, #0
                ETH_MACCR_APCS;  // automatically remove pad+CRC from frames
  ETH->MACFFR |= ETH_MACFFR_RA; // for now, don't try to filter in hardware
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
  for (volatile uint32_t i = 0; i < 100000; i++) { }
  GPIOB->BSRRH = 1 << PORTB_PHY_RESET; // assert reset (pull it low)
 800125e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001262:	8348      	strh	r0, [r1, #26]
  for (volatile uint32_t i = 0; i < 100000; i++) { } // let some time pass
 8001264:	930b      	str	r3, [sp, #44]	; 0x2c
 8001266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001268:	4293      	cmp	r3, r2
 800126a:	d805      	bhi.n	8001278 <enet_init+0x210>
 800126c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800126e:	3301      	adds	r3, #1
 8001270:	930b      	str	r3, [sp, #44]	; 0x2c
 8001272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001274:	4293      	cmp	r3, r2
 8001276:	d9f9      	bls.n	800126c <enet_init+0x204>
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET; // de-assert reset (pull it high)
 8001278:	4922      	ldr	r1, [pc, #136]	; (8001304 <enet_init+0x29c>)
  // todo: only need to wait until registers read back something other
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
 800127a:	4a29      	ldr	r2, [pc, #164]	; (8001320 <enet_init+0x2b8>)
 800127c:	2300      	movs	r3, #0
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
  for (volatile uint32_t i = 0; i < 100000; i++) { }
  GPIOB->BSRRH = 1 << PORTB_PHY_RESET; // assert reset (pull it low)
  for (volatile uint32_t i = 0; i < 100000; i++) { } // let some time pass
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET; // de-assert reset (pull it high)
 800127e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001282:	8308      	strh	r0, [r1, #24]
  // todo: only need to wait until registers read back something other
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
 8001284:	930c      	str	r3, [sp, #48]	; 0x30
 8001286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001288:	4293      	cmp	r3, r2
 800128a:	d805      	bhi.n	8001298 <enet_init+0x230>
 800128c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800128e:	3301      	adds	r3, #1
 8001290:	930c      	str	r3, [sp, #48]	; 0x30
 8001292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001294:	4293      	cmp	r3, r2
 8001296:	d9f9      	bls.n	800128c <enet_init+0x224>
  printf("waiting for PHY to wake up...\r\n");
 8001298:	4822      	ldr	r0, [pc, #136]	; (8001324 <enet_init+0x2bc>)
 800129a:	f002 fcf5 	bl	8003c88 <puts>

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 800129e:	4a1e      	ldr	r2, [pc, #120]	; (8001318 <enet_init+0x2b0>)
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 80012a0:	f640 0511 	movw	r5, #2065	; 0x811

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 80012a4:	4610      	mov	r0, r2
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET; // de-assert reset (pull it high)
  // todo: only need to wait until registers read back something other
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
  printf("waiting for PHY to wake up...\r\n");
  while (enet_read_phy_reg(0) == 0xffff) { }
 80012a6:	f64f 74ff 	movw	r4, #65535	; 0xffff

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 80012aa:	6913      	ldr	r3, [r2, #16]
 80012ac:	07d9      	lsls	r1, r3, #31
 80012ae:	d4fc      	bmi.n	80012aa <enet_init+0x242>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 80012b0:	6105      	str	r5, [r0, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 80012b2:	6913      	ldr	r3, [r2, #16]
 80012b4:	f013 0301 	ands.w	r3, r3, #1
 80012b8:	d1fb      	bne.n	80012b2 <enet_init+0x24a>
  return ETH->MACMIIDR & 0xffff;
 80012ba:	6941      	ldr	r1, [r0, #20]
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET; // de-assert reset (pull it high)
  // todo: only need to wait until registers read back something other
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
  printf("waiting for PHY to wake up...\r\n");
  while (enet_read_phy_reg(0) == 0xffff) { }
 80012bc:	b289      	uxth	r1, r1
 80012be:	42a1      	cmp	r1, r4
 80012c0:	d0f3      	beq.n	80012aa <enet_init+0x242>
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
 80012c2:	930d      	str	r3, [sp, #52]	; 0x34
 80012c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80012c6:	4a16      	ldr	r2, [pc, #88]	; (8001320 <enet_init+0x2b8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d805      	bhi.n	80012d8 <enet_init+0x270>
 80012cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80012ce:	3301      	adds	r3, #1
 80012d0:	930d      	str	r3, [sp, #52]	; 0x34
 80012d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d9f9      	bls.n	80012cc <enet_init+0x264>
  printf("done with PHY reset.\r\n");
 80012d8:	4813      	ldr	r0, [pc, #76]	; (8001328 <enet_init+0x2c0>)

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 80012da:	4d0f      	ldr	r5, [pc, #60]	; (8001318 <enet_init+0x2b0>)
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
  printf("waiting for PHY to wake up...\r\n");
  while (enet_read_phy_reg(0) == 0xffff) { }
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
  printf("done with PHY reset.\r\n");
 80012dc:	f002 fcd4 	bl	8003c88 <puts>
  printf("setting software strap registers...\r\n");
 80012e0:	4812      	ldr	r0, [pc, #72]	; (800132c <enet_init+0x2c4>)
 80012e2:	f002 fcd1 	bl	8003c88 <puts>
  enet_write_phy_reg(0x09, 0x7821); // enable auto MDIX,
 80012e6:	2009      	movs	r0, #9
 80012e8:	f647 0121 	movw	r1, #30753	; 0x7821
 80012ec:	f7ff fe8c 	bl	8001008 <enet_write_phy_reg>
                                    // set INT/PWDN to be interrupt output
                                    // enable auto-negotiation
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
 80012f0:	2009      	movs	r0, #9
 80012f2:	f64f 0121 	movw	r1, #63521	; 0xf821
 80012f6:	e01b      	b.n	8001330 <enet_init+0x2c8>
 80012f8:	0800a7ac 	.word	0x0800a7ac
 80012fc:	40020000 	.word	0x40020000
 8001300:	40023800 	.word	0x40023800
 8001304:	40020400 	.word	0x40020400
 8001308:	40020800 	.word	0x40020800
 800130c:	40013800 	.word	0x40013800
 8001310:	0001869f 	.word	0x0001869f
 8001314:	40029000 	.word	0x40029000
 8001318:	40028000 	.word	0x40028000
 800131c:	40029018 	.word	0x40029018
 8001320:	000f423f 	.word	0x000f423f
 8001324:	0800a7bc 	.word	0x0800a7bc
 8001328:	0800a7dc 	.word	0x0800a7dc
 800132c:	0800a7f4 	.word	0x0800a7f4
 8001330:	f7ff fe6a 	bl	8001008 <enet_write_phy_reg>
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode
 8001334:	2004      	movs	r0, #4
 8001336:	f240 1101 	movw	r1, #257	; 0x101
 800133a:	f7ff fe65 	bl	8001008 <enet_write_phy_reg>

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 800133e:	462f      	mov	r7, r5
                                    // enable auto-negotiation
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode

  // cycle through and read a bunch of PHY registers to make sure it's alive
  for (int i = 0; i < 32; i++)
 8001340:	2600      	movs	r6, #0

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8001342:	692b      	ldr	r3, [r5, #16]
 8001344:	07db      	lsls	r3, r3, #31
 8001346:	d4fc      	bmi.n	8001342 <enet_init+0x2da>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
                  ((reg_idx & 0x1f) << 6) |
 8001348:	01b3      	lsls	r3, r6, #6
                  ETH_MACMIIAR_CR_Div102  | // clock divider
 800134a:	f443 6301 	orr.w	r3, r3, #2064	; 0x810
 800134e:	f043 0301 	orr.w	r3, r3, #1
///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 8001352:	613b      	str	r3, [r7, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8001354:	692b      	ldr	r3, [r5, #16]
 8001356:	f013 0401 	ands.w	r4, r3, #1
 800135a:	d1fb      	bne.n	8001354 <enet_init+0x2ec>
  return ETH->MACMIIDR & 0xffff;
 800135c:	697a      	ldr	r2, [r7, #20]
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode

  // cycle through and read a bunch of PHY registers to make sure it's alive
  for (int i = 0; i < 32; i++)
    printf("PHY reg %02d = 0x%04x\r\n", i, enet_read_phy_reg(i));
 800135e:	4842      	ldr	r0, [pc, #264]	; (8001468 <enet_init+0x400>)
 8001360:	4631      	mov	r1, r6
 8001362:	b292      	uxth	r2, r2
                                    // enable auto-negotiation
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode

  // cycle through and read a bunch of PHY registers to make sure it's alive
  for (int i = 0; i < 32; i++)
 8001364:	3601      	adds	r6, #1
    printf("PHY reg %02d = 0x%04x\r\n", i, enet_read_phy_reg(i));
 8001366:	f002 fc49 	bl	8003bfc <printf>
                                    // enable auto-negotiation
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode

  // cycle through and read a bunch of PHY registers to make sure it's alive
  for (int i = 0; i < 32; i++)
 800136a:	2e20      	cmp	r6, #32
 800136c:	d1e9      	bne.n	8001342 <enet_init+0x2da>

  ////////////////////////////////////////////////////////////////////////
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
 800136e:	4a3f      	ldr	r2, [pc, #252]	; (800146c <enet_init+0x404>)
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
 8001370:	f8df e124 	ldr.w	lr, [pc, #292]	; 8001498 <enet_init+0x430>

  ////////////////////////////////////////////////////////////////////////
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
 8001374:	f44f 0550 	mov.w	r5, #13631488	; 0xd00000
 8001378:	6015      	str	r5, [r2, #0]
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
 800137a:	4623      	mov	r3, r4
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
 800137c:	6054      	str	r4, [r2, #4]
 800137e:	46a4      	mov	ip, r4
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
 8001380:	f8c2 e008 	str.w	lr, [r2, #8]
    if (i < ETH_DMA_NTXD-1)
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[i+1]; // chain to next
 8001384:	1c58      	adds	r0, r3, #1
 8001386:	0104      	lsls	r4, r0, #4
 8001388:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800138c:	f103 0708 	add.w	r7, r3, #8
 8001390:	1911      	adds	r1, r2, r4
 8001392:	eb0e 26c0 	add.w	r6, lr, r0, lsl #11
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
    if (i < ETH_DMA_NTXD-1)
 8001396:	2803      	cmp	r0, #3
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[i+1]; // chain to next
 8001398:	6079      	str	r1, [r7, #4]
 800139a:	4603      	mov	r3, r0

  ////////////////////////////////////////////////////////////////////////
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
 800139c:	5115      	str	r5, [r2, r4]
 800139e:	4f33      	ldr	r7, [pc, #204]	; (800146c <enet_init+0x404>)
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
 80013a0:	f8c1 c004 	str.w	ip, [r1, #4]
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
 80013a4:	608e      	str	r6, [r1, #8]
    if (i < ETH_DMA_NTXD-1)
 80013a6:	d1ed      	bne.n	8001384 <enet_init+0x31c>
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 80013a8:	4a31      	ldr	r2, [pc, #196]	; (8001470 <enet_init+0x408>)
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
 80013aa:	4932      	ldr	r1, [pc, #200]	; (8001474 <enet_init+0x40c>)
    g_eth_dma_tx_desc[i].des1 = 0;
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
    if (i < ETH_DMA_NTXD-1)
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[i+1]; // chain to next
    else
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[0]; // loop to first
 80013ac:	63ff      	str	r7, [r7, #60]	; 0x3c
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 80013ae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
 80013b2:	f44f 4390 	mov.w	r3, #18432	; 0x4800
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 80013b6:	6010      	str	r0, [r2, #0]
 80013b8:	4680      	mov	r8, r0
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
 80013ba:	6053      	str	r3, [r2, #4]
 80013bc:	469c      	mov	ip, r3
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
 80013be:	6091      	str	r1, [r2, #8]
 80013c0:	f102 0010 	add.w	r0, r2, #16
 80013c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80013c8:	2300      	movs	r3, #0
    if (i < ETH_DMA_NRXD-1)
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
 80013ca:	1c5e      	adds	r6, r3, #1
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 80013cc:	0135      	lsls	r5, r6, #4
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
    if (i < ETH_DMA_NRXD-1)
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
 80013ce:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80013d2:	f103 0e08 	add.w	lr, r3, #8
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 80013d6:	1954      	adds	r4, r2, r5
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
    if (i < ETH_DMA_NRXD-1)
 80013d8:	2e0f      	cmp	r6, #15
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
 80013da:	f8ce 0004 	str.w	r0, [lr, #4]
 80013de:	4633      	mov	r3, r6
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 80013e0:	f842 8005 	str.w	r8, [r2, r5]
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
    if (i < ETH_DMA_NRXD-1)
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
 80013e4:	f8df e088 	ldr.w	lr, [pc, #136]	; 8001470 <enet_init+0x408>
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
 80013e8:	f8c4 c004 	str.w	ip, [r4, #4]
 80013ec:	f100 0010 	add.w	r0, r0, #16
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
 80013f0:	60a1      	str	r1, [r4, #8]
 80013f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
    if (i < ETH_DMA_NRXD-1)
 80013f6:	d1e8      	bne.n	80013ca <enet_init+0x362>
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
    else
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[0];
 80013f8:	2300      	movs	r3, #0
 80013fa:	491f      	ldr	r1, [pc, #124]	; (8001478 <enet_init+0x410>)
 80013fc:	4e1f      	ldr	r6, [pc, #124]	; (800147c <enet_init+0x414>)
 80013fe:	4d20      	ldr	r5, [pc, #128]	; (8001480 <enet_init+0x418>)
 8001400:	4c20      	ldr	r4, [pc, #128]	; (8001484 <enet_init+0x41c>)
 8001402:	4821      	ldr	r0, [pc, #132]	; (8001488 <enet_init+0x420>)
 8001404:	f8ce e0fc 	str.w	lr, [lr, #252]	; 0xfc
  ///////////////////////////////////////////////////////////////////////
  // set up the RAM pool for reception
  for (int i = 0; i < ETH_RAM_RXPOOL_NPTR; i++)
  {
    g_eth_rxpool_start[i] = &g_eth_rxpool[0];
    g_eth_rxpool_len[i] = 0;
 8001408:	461a      	mov	r2, r3
 800140a:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[0];
  }

  ///////////////////////////////////////////////////////////////////////
  // set up the RAM pool for reception
  for (int i = 0; i < ETH_RAM_RXPOOL_NPTR; i++)
 800140e:	3301      	adds	r3, #1
 8001410:	2b80      	cmp	r3, #128	; 0x80
  {
    g_eth_rxpool_start[i] = &g_eth_rxpool[0];
    g_eth_rxpool_len[i] = 0;
    g_eth_rxpool_ptrs_wpos = 0;
 8001412:	8022      	strh	r2, [r4, #0]

  ///////////////////////////////////////////////////////////////////////
  // set up the RAM pool for reception
  for (int i = 0; i < ETH_RAM_RXPOOL_NPTR; i++)
  {
    g_eth_rxpool_start[i] = &g_eth_rxpool[0];
 8001414:	f841 6f04 	str.w	r6, [r1, #4]!
    g_eth_rxpool_len[i] = 0;
    g_eth_rxpool_ptrs_wpos = 0;
    g_eth_rxpool_ptrs_rpos = 0;
 8001418:	8002      	strh	r2, [r0, #0]
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[0];
  }

  ///////////////////////////////////////////////////////////////////////
  // set up the RAM pool for reception
  for (int i = 0; i < ETH_RAM_RXPOOL_NPTR; i++)
 800141a:	d1f6      	bne.n	800140a <enet_init+0x3a2>
    g_eth_rxpool_ptrs_rpos = 0;
  }

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <enet_init+0x424>)
  /*
  ETH->DMABMR = ETH_DMABMR_AAB | ETH_DMABMR_USP |
                ETH_DMABMR_RDP_1Beat | ETH_DMABMR_RTPR_1_1 |
                ETH_DMABMR_PBL_1Beat | ETH_DMABMR_EDE;
  */
  ETH->DMAIER = ETH_DMAIER_NISE | ETH_DMAIER_RIE;
 800141e:	4c1c      	ldr	r4, [pc, #112]	; (8001490 <enet_init+0x428>)
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001420:	481c      	ldr	r0, [pc, #112]	; (8001494 <enet_init+0x42c>)

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
  ETH->DMARDLAR = (uint32_t)&g_eth_dma_rx_desc[0]; // point RX DMA to first desc
  ETH->DMAOMR = ETH_DMAOMR_TSF; // enable store-and-forward mode
 8001422:	f241 0118 	movw	r1, #4120	; 0x1018
    g_eth_rxpool_ptrs_rpos = 0;
  }

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
 8001426:	f241 0c10 	movw	ip, #4112	; 0x1010
  ETH->DMARDLAR = (uint32_t)&g_eth_dma_rx_desc[0]; // point RX DMA to first desc
 800142a:	f241 060c 	movw	r6, #4108	; 0x100c
  /*
  ETH->DMABMR = ETH_DMABMR_AAB | ETH_DMABMR_USP |
                ETH_DMABMR_RDP_1Beat | ETH_DMABMR_RTPR_1_1 |
                ETH_DMABMR_PBL_1Beat | ETH_DMABMR_EDE;
  */
  ETH->DMAIER = ETH_DMAIER_NISE | ETH_DMAIER_RIE;
 800142e:	f241 021c 	movw	r2, #4124	; 0x101c

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
  ETH->DMARDLAR = (uint32_t)&g_eth_dma_rx_desc[0]; // point RX DMA to first desc
  ETH->DMAOMR = ETH_DMAOMR_TSF; // enable store-and-forward mode
 8001432:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
    g_eth_rxpool_ptrs_rpos = 0;
  }

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
 8001436:	f843 700c 	str.w	r7, [r3, ip]
  ETH->DMARDLAR = (uint32_t)&g_eth_dma_rx_desc[0]; // point RX DMA to first desc
 800143a:	f843 e006 	str.w	lr, [r3, r6]
  ETH->DMAOMR = ETH_DMAOMR_TSF; // enable store-and-forward mode
 800143e:	505d      	str	r5, [r3, r1]
  /*
  ETH->DMABMR = ETH_DMABMR_AAB | ETH_DMABMR_USP |
                ETH_DMABMR_RDP_1Beat | ETH_DMABMR_RTPR_1_1 |
                ETH_DMABMR_PBL_1Beat | ETH_DMABMR_EDE;
  */
  ETH->DMAIER = ETH_DMAIER_NISE | ETH_DMAIER_RIE;
 8001440:	509c      	str	r4, [r3, r2]
  ETH->MACCR |= ETH_MACCR_TE | // enable transmitter
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	2530      	movs	r5, #48	; 0x30
 8001446:	f042 020c 	orr.w	r2, r2, #12
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800144a:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 800144e:	601a      	str	r2, [r3, #0]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001450:	f880 533d 	strb.w	r5, [r0, #829]	; 0x33d
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001454:	6044      	str	r4, [r0, #4]
                ETH_MACCR_RE;  // enable receiver
  NVIC_SetPriority(ETH_IRQn, 3);
  NVIC_EnableIRQ(ETH_IRQn);
  ETH->DMAOMR |= ETH_DMAOMR_ST | ETH_DMAOMR_SR; // enable ethernet DMA tx/rx
 8001456:	585a      	ldr	r2, [r3, r1]
 8001458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800145c:	f042 0202 	orr.w	r2, r2, #2
 8001460:	505a      	str	r2, [r3, r1]
}
 8001462:	b00e      	add	sp, #56	; 0x38
 8001464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001468:	0800a81c 	.word	0x0800a81c
 800146c:	20008f44 	.word	0x20008f44
 8001470:	2000928c 	.word	0x2000928c
 8001474:	20000f44 	.word	0x20000f44
 8001478:	20009088 	.word	0x20009088
 800147c:	2000938c 	.word	0x2000938c
 8001480:	20008f88 	.word	0x20008f88
 8001484:	20008f84 	.word	0x20008f84
 8001488:	20008f86 	.word	0x20008f86
 800148c:	40028000 	.word	0x40028000
 8001490:	00010040 	.word	0x00010040
 8001494:	e000e100 	.word	0xe000e100
 8001498:	2000d38c 	.word	0x2000d38c

0800149c <eth_vector>:

void eth_vector()
{
 800149c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  volatile uint32_t dmasr = ETH->DMASR;
 80014a0:	f241 0314 	movw	r3, #4116	; 0x1014
 80014a4:	4a2d      	ldr	r2, [pc, #180]	; (800155c <eth_vector+0xc0>)
  NVIC_EnableIRQ(ETH_IRQn);
  ETH->DMAOMR |= ETH_DMAOMR_ST | ETH_DMAOMR_SR; // enable ethernet DMA tx/rx
}

void eth_vector()
{
 80014a6:	b083      	sub	sp, #12
  volatile uint32_t dmasr = ETH->DMASR;
 80014a8:	58d1      	ldr	r1, [r2, r3]
 80014aa:	9101      	str	r1, [sp, #4]
  ETH->DMASR = dmasr; // clear pending bits in the status register
 80014ac:	9901      	ldr	r1, [sp, #4]
 80014ae:	50d1      	str	r1, [r2, r3]
  //printf("eth_vector()\r\n");
  if (dmasr & ETH_DMASR_RS)
 80014b0:	9b01      	ldr	r3, [sp, #4]
 80014b2:	065b      	lsls	r3, r3, #25
 80014b4:	d549      	bpl.n	800154a <eth_vector+0xae>
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
 80014b6:	4f2a      	ldr	r7, [pc, #168]	; (8001560 <eth_vector+0xc4>)
 80014b8:	683d      	ldr	r5, [r7, #0]
 80014ba:	682b      	ldr	r3, [r5, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db44      	blt.n	800154a <eth_vector+0xae>
 80014c0:	4e28      	ldr	r6, [pc, #160]	; (8001564 <eth_vector+0xc8>)
 80014c2:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 800156c <eth_vector+0xd0>
 80014c6:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8001570 <eth_vector+0xd4>
 80014ca:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001574 <eth_vector+0xd8>
    {
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
 80014ce:	f04f 0800 	mov.w	r8, #0
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
    {
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
 80014d2:	682c      	ldr	r4, [r5, #0]
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
 80014d4:	8833      	ldrh	r3, [r6, #0]
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
      g_eth_rxpool_len[wp] = rxn;
 80014d6:	4924      	ldr	r1, [pc, #144]	; (8001568 <eth_vector+0xcc>)
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
    {
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
 80014d8:	f3c4 440d 	ubfx	r4, r4, #16, #14
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
 80014dc:	fa14 f383 	uxtah	r3, r4, r3
 80014e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        g_eth_rxpool_wpos = 0;
 80014e4:	bfa4      	itt	ge
 80014e6:	4b1f      	ldrge	r3, [pc, #124]	; (8001564 <eth_vector+0xc8>)
 80014e8:	f8a3 8000 	strhge.w	r8, [r3]
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
 80014ec:	f8bb 3000 	ldrh.w	r3, [fp]
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
 80014f0:	8830      	ldrh	r0, [r6, #0]
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
 80014f2:	b29b      	uxth	r3, r3
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
      g_eth_rxpool_len[wp] = rxn;
      memcpy((uint8_t *)&g_eth_rxpool[g_eth_rxpool_wpos],
 80014f4:	4622      	mov	r2, r4
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
    {
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
 80014f6:	b2a4      	uxth	r4, r4
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
      g_eth_rxpool_len[wp] = rxn;
 80014f8:	f821 4013 	strh.w	r4, [r1, r3, lsl #1]
      memcpy((uint8_t *)&g_eth_rxpool[g_eth_rxpool_wpos],
 80014fc:	f8b6 e000 	ldrh.w	lr, [r6]
             (const uint8_t *)g_eth_dma_rx_next_desc->des2,
 8001500:	68a9      	ldr	r1, [r5, #8]
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
 8001502:	fa19 f080 	uxtah	r0, r9, r0
 8001506:	f84a 0023 	str.w	r0, [sl, r3, lsl #2]
      g_eth_rxpool_len[wp] = rxn;
      memcpy((uint8_t *)&g_eth_rxpool[g_eth_rxpool_wpos],
 800150a:	fa19 f08e 	uxtah	r0, r9, lr
 800150e:	f002 fa7d 	bl	8003a0c <memcpy>
             (const uint8_t *)g_eth_dma_rx_next_desc->des2,
             rxn);
      //printf("ethernet rx %d into rxpool ptr %d\r\n", rxn, wp);
      g_eth_rxpool_ptrs_wpos++;
 8001512:	f8bb 3000 	ldrh.w	r3, [fp]
 8001516:	3301      	adds	r3, #1
 8001518:	b29b      	uxth	r3, r3
 800151a:	f8ab 3000 	strh.w	r3, [fp]
      if (g_eth_rxpool_ptrs_wpos >= ETH_RAM_RXPOOL_NPTR)
 800151e:	f8bb 3000 	ldrh.w	r3, [fp]
 8001522:	b29b      	uxth	r3, r3
 8001524:	2b7f      	cmp	r3, #127	; 0x7f
        g_eth_rxpool_ptrs_wpos = 0;
 8001526:	bf84      	itt	hi
 8001528:	4b10      	ldrhi	r3, [pc, #64]	; (800156c <eth_vector+0xd0>)
 800152a:	f8a3 8000 	strhhi.w	r8, [r3]
      g_eth_rxpool_wpos += rxn;
 800152e:	8833      	ldrh	r3, [r6, #0]
 8001530:	fa14 f483 	uxtah	r4, r4, r3
 8001534:	b2a4      	uxth	r4, r4
 8001536:	8034      	strh	r4, [r6, #0]
      uint8_t *p = (uint8_t *)g_eth_rx_next_desc->des2;
      for (int i = 0; i < rxn; i++)
        printf("%02d: 0x%02x\r\n", i, p[i]);
*/

      g_eth_dma_rx_next_desc->des0 |= 0x80000000; // give it back to the DMA
 8001538:	682b      	ldr	r3, [r5, #0]
 800153a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800153e:	602b      	str	r3, [r5, #0]
      // advance the rx pointer for next time
      g_eth_dma_rx_next_desc = (eth_dma_desc_t *)g_eth_dma_rx_next_desc->des3;
 8001540:	68ed      	ldr	r5, [r5, #12]
 8001542:	603d      	str	r5, [r7, #0]
  ETH->DMASR = dmasr; // clear pending bits in the status register
  //printf("eth_vector()\r\n");
  if (dmasr & ETH_DMASR_RS)
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
 8001544:	682b      	ldr	r3, [r5, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	dac3      	bge.n	80014d2 <eth_vector+0x36>
      g_eth_dma_rx_next_desc->des0 |= 0x80000000; // give it back to the DMA
      // advance the rx pointer for next time
      g_eth_dma_rx_next_desc = (eth_dma_desc_t *)g_eth_dma_rx_next_desc->des3;
    }
  }
  dmasr = ETH->DMASR;
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <eth_vector+0xc0>)
 800154c:	f241 0314 	movw	r3, #4116	; 0x1014
 8001550:	58d3      	ldr	r3, [r2, r3]
 8001552:	9301      	str	r3, [sp, #4]
  //printf("dmasr = 0x%08x\r\n", (int)dmasr);
}
 8001554:	b003      	add	sp, #12
 8001556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800155a:	bf00      	nop
 800155c:	40028000 	.word	0x40028000
 8001560:	20000008 	.word	0x20000008
 8001564:	20009088 	.word	0x20009088
 8001568:	20008f88 	.word	0x20008f88
 800156c:	20008f84 	.word	0x20008f84
 8001570:	2000908c 	.word	0x2000908c
 8001574:	2000938c 	.word	0x2000938c

08001578 <enet_get_link_status>:

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8001578:	4914      	ldr	r1, [pc, #80]	; (80015cc <enet_get_link_status+0x54>)
 800157a:	690a      	ldr	r2, [r1, #16]
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <enet_get_link_status+0x54>)
 800157e:	07d2      	lsls	r2, r2, #31
 8001580:	d4fb      	bmi.n	800157a <enet_get_link_status+0x2>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 8001582:	f640 0251 	movw	r2, #2129	; 0x851
 8001586:	611a      	str	r2, [r3, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	4910      	ldr	r1, [pc, #64]	; (80015cc <enet_get_link_status+0x54>)
 800158c:	07d0      	lsls	r0, r2, #31
 800158e:	d4fb      	bmi.n	8001588 <enet_get_link_status+0x10>
  dmasr = ETH->DMASR;
  //printf("dmasr = 0x%08x\r\n", (int)dmasr);
}

enet_link_status_t enet_get_link_status()
{
 8001590:	b510      	push	{r4, lr}
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
  return ETH->MACMIIDR & 0xffff;
 8001592:	694c      	ldr	r4, [r1, #20]
 8001594:	b2a4      	uxth	r4, r4

enet_link_status_t enet_get_link_status()
{
  uint16_t status = enet_read_phy_reg(0x01);
  //printf("PHY status = 0x%02x\r\n", status);
  if (status & (1 << 4)) {
 8001596:	06e2      	lsls	r2, r4, #27
    err_set(ERR_ETH_REMOTE_FAULT);
 8001598:	f04f 0002 	mov.w	r0, #2

enet_link_status_t enet_get_link_status()
{
  uint16_t status = enet_read_phy_reg(0x01);
  //printf("PHY status = 0x%02x\r\n", status);
  if (status & (1 << 4)) {
 800159c:	d50a      	bpl.n	80015b4 <enet_get_link_status+0x3c>
    err_set(ERR_ETH_REMOTE_FAULT);
 800159e:	f002 f9f1 	bl	8003984 <err_set>
  } else {
    err_unset(ERR_ETH_REMOTE_FAULT);
  }
  if (status & (1 << 5)) {
 80015a2:	06a3      	lsls	r3, r4, #26
    err_unset(ERR_ETH_NEGOTIATING);
 80015a4:	f04f 0003 	mov.w	r0, #3
  if (status & (1 << 4)) {
    err_set(ERR_ETH_REMOTE_FAULT);
  } else {
    err_unset(ERR_ETH_REMOTE_FAULT);
  }
  if (status & (1 << 5)) {
 80015a8:	d50a      	bpl.n	80015c0 <enet_get_link_status+0x48>
    err_unset(ERR_ETH_NEGOTIATING);
 80015aa:	f002 f9f1 	bl	8003990 <err_unset>
    err_set(ERR_ETH_NEGOTIATING);
  }
  if (status & (1 << 2))
    return ENET_LINK_UP;
  return ENET_LINK_DOWN;
}
 80015ae:	f3c4 0080 	ubfx	r0, r4, #2, #1
 80015b2:	bd10      	pop	{r4, pc}
  uint16_t status = enet_read_phy_reg(0x01);
  //printf("PHY status = 0x%02x\r\n", status);
  if (status & (1 << 4)) {
    err_set(ERR_ETH_REMOTE_FAULT);
  } else {
    err_unset(ERR_ETH_REMOTE_FAULT);
 80015b4:	f002 f9ec 	bl	8003990 <err_unset>
  }
  if (status & (1 << 5)) {
 80015b8:	06a3      	lsls	r3, r4, #26
    err_unset(ERR_ETH_NEGOTIATING);
 80015ba:	f04f 0003 	mov.w	r0, #3
  if (status & (1 << 4)) {
    err_set(ERR_ETH_REMOTE_FAULT);
  } else {
    err_unset(ERR_ETH_REMOTE_FAULT);
  }
  if (status & (1 << 5)) {
 80015be:	d4f4      	bmi.n	80015aa <enet_get_link_status+0x32>
    err_unset(ERR_ETH_NEGOTIATING);
  } else {
    err_set(ERR_ETH_NEGOTIATING);
 80015c0:	f002 f9e0 	bl	8003984 <err_set>
  }
  if (status & (1 << 2))
    return ENET_LINK_UP;
  return ENET_LINK_DOWN;
}
 80015c4:	f3c4 0080 	ubfx	r0, r4, #2, #1
 80015c8:	bd10      	pop	{r4, pc}
 80015ca:	bf00      	nop
 80015cc:	40028000 	.word	0x40028000

080015d0 <eth_htons>:
  //printf(" rmii status = 0x%04x\r\n", (unsigned)r);
}

// todo: find ways for this to be overridden on CPU's with built-ins for this
uint16_t eth_htons(const uint16_t x)
{
 80015d0:	ba40      	rev16	r0, r0
  return ((x & 0xff) << 8) | ((x >> 8) & 0xff);
}
 80015d2:	b280      	uxth	r0, r0
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop

080015d8 <eth_htonl>:
{
  return ((x & 0x000000ff) << 24)  |
         ((x & 0x0000ff00) << 8)   |
         ((x & 0x00ff0000) >> 8)   |
         ((x & 0xff000000) >> 24);
}
 80015d8:	ba00      	rev	r0, r0
 80015da:	4770      	bx	lr

080015dc <enet_send_udp_ucast>:

void enet_send_udp_ucast(const uint8_t *dest_mac,
                         const uint32_t dest_ip, const uint16_t dest_port,
                         const uint32_t source_ip, const uint16_t source_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
 80015dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015e0:	b083      	sub	sp, #12
 80015e2:	4c4e      	ldr	r4, [pc, #312]	; (800171c <enet_send_udp_ucast+0x140>)
 80015e4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80015e6:	9501      	str	r5, [sp, #4]
 80015e8:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
 80015ec:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80015f0:	f8df e134 	ldr.w	lr, [pc, #308]	; 8001728 <enet_send_udp_ucast+0x14c>
 80015f4:	1e47      	subs	r7, r0, #1
 80015f6:	4626      	mov	r6, r4
 80015f8:	3005      	adds	r0, #5
  eth_udp_header_t *h = (eth_udp_header_t *)&g_eth_udpbuf[0];
  for (int i = 0; i < 6; i++)
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
 80015fa:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 80015fe:	f806 cb01 	strb.w	ip, [r6], #1
                         const uint32_t dest_ip, const uint16_t dest_port,
                         const uint32_t source_ip, const uint16_t source_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  eth_udp_header_t *h = (eth_udp_header_t *)&g_eth_udpbuf[0];
  for (int i = 0; i < 6; i++)
 8001602:	4287      	cmp	r7, r0
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
 8001604:	f81e cb01 	ldrb.w	ip, [lr], #1
 8001608:	f886 c005 	strb.w	ip, [r6, #5]
                         const uint32_t dest_ip, const uint16_t dest_port,
                         const uint32_t source_ip, const uint16_t source_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  eth_udp_header_t *h = (eth_udp_header_t *)&g_eth_udpbuf[0];
  for (int i = 0; i < 6; i++)
 800160c:	d1f5      	bne.n	80015fa <enet_send_udp_ucast+0x1e>
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
 800160e:	7ba6      	ldrb	r6, [r4, #14]
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
 8001610:	7be7      	ldrb	r7, [r4, #15]
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
 8001612:	f8b4 c012 	ldrh.w	ip, [r4, #18]
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
 8001616:	f8b4 e018 	ldrh.w	lr, [r4, #24]
}

void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
 800161a:	f8df 8110 	ldr.w	r8, [pc, #272]	; 800172c <enet_send_udp_ucast+0x150>
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
 800161e:	4840      	ldr	r0, [pc, #256]	; (8001720 <enet_send_udp_ucast+0x144>)
 8001620:	ba1b      	rev	r3, r3
 8001622:	fa91 fa81 	rev.w	sl, r1
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
 8001626:	f04f 0905 	mov.w	r9, #5
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
 800162a:	9901      	ldr	r1, [sp, #4]
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
 800162c:	f8c4 301a 	str.w	r3, [r4, #26]
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
 8001630:	f105 0308 	add.w	r3, r5, #8
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
 8001634:	f369 0603 	bfi	r6, r9, #0, #4
 8001638:	ba5b      	rev16	r3, r3
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
 800163a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
 800163e:	f04f 0904 	mov.w	r9, #4
 8001642:	fa9b fb9b 	rev16.w	fp, fp
 8001646:	f369 1607 	bfi	r6, r9, #4, #4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
 800164a:	f36f 0787 	bfc	r7, #2, #6
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
  h->ip.dest_addr = eth_htonl(dest_ip);
 800164e:	f8c4 a01e 	str.w	sl, [r4, #30]
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
 8001652:	84e3      	strh	r3, [r4, #38]	; 0x26
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
 8001654:	f105 0a1c 	add.w	sl, r5, #28
  for (int i = 0; i < 6; i++)
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
 8001658:	f04f 0308 	mov.w	r3, #8
 800165c:	ba52      	rev16	r2, r2
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
 800165e:	f36f 0c0f 	bfc	ip, #0, #16
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
 8001662:	f36f 0e0f 	bfc	lr, #0, #16
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
 8001666:	f8a4 b022 	strh.w	fp, [r4, #34]	; 0x22
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
 800166a:	73a6      	strb	r6, [r4, #14]
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
 800166c:	73e7      	strb	r7, [r4, #15]
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
 800166e:	2601      	movs	r6, #1
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
 8001670:	2700      	movs	r7, #0
  for (int i = 0; i < 6; i++)
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
 8001672:	81a3      	strh	r3, [r4, #12]
 8001674:	fa9a fa9a 	rev16.w	sl, sl
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
 8001678:	f04f 0311 	mov.w	r3, #17
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
 800167c:	f04f 0b40 	mov.w	fp, #64	; 0x40
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
 8001680:	84a2      	strh	r2, [r4, #36]	; 0x24
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
 8001682:	75e3      	strb	r3, [r4, #23]
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
 8001684:	462a      	mov	r2, r5
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
 8001686:	f8a4 c012 	strh.w	ip, [r4, #18]
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
 800168a:	f8a4 e018 	strh.w	lr, [r4, #24]
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
 800168e:	f8a4 a010 	strh.w	sl, [r4, #16]
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
 8001692:	f8a4 b014 	strh.w	fp, [r4, #20]
  h->ip.ttl = 1; // not sure here...
 8001696:	75a6      	strb	r6, [r4, #22]
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
 8001698:	8527      	strh	r7, [r4, #40]	; 0x28
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
 800169a:	f002 f9b7 	bl	8003a0c <memcpy>
}

void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
 800169e:	f8d8 3000 	ldr.w	r3, [r8]
 80016a2:	681b      	ldr	r3, [r3, #0]
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
  eth_send_raw_packet(g_eth_udpbuf, sizeof(eth_udp_header_t) + payload_len);
 80016a4:	352a      	adds	r5, #42	; 0x2a
}

void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
 80016a6:	42bb      	cmp	r3, r7
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
  eth_send_raw_packet(g_eth_udpbuf, sizeof(eth_udp_header_t) + payload_len);
 80016a8:	b2ad      	uxth	r5, r5
void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
  {
    err_set(ERR_ETH_BUFFER_FULL);
 80016aa:	4630      	mov	r0, r6
}

void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
 80016ac:	db30      	blt.n	8001710 <enet_send_udp_ucast+0x134>
  {
    err_set(ERR_ETH_BUFFER_FULL);
    return; // if it's set, then we have run out of ringbuffer room. can't tx.
  }
  err_unset(ERR_ETH_BUFFER_FULL);
 80016ae:	f002 f96f 	bl	8003990 <err_unset>
  /*
  printf("sending using TX descriptor %08x status 0x%08x\r\n",
         (unsigned)g_eth_tx_next_desc,
         (unsigned)g_eth_tx_next_desc->control);
 */
  uint8_t *buf = (uint8_t *)g_eth_dma_tx_next_desc->des2;
 80016b2:	f8d8 4000 	ldr.w	r4, [r8]
  if (pkt_len > ETH_NBUF)
    pkt_len = ETH_NBUF; // let's not blow through our packet buffer
  memcpy(buf, pkt, pkt_len);
 80016b6:	4919      	ldr	r1, [pc, #100]	; (800171c <enet_send_udp_ucast+0x140>)
  /*
  printf("sending using TX descriptor %08x status 0x%08x\r\n",
         (unsigned)g_eth_tx_next_desc,
         (unsigned)g_eth_tx_next_desc->control);
 */
  uint8_t *buf = (uint8_t *)g_eth_dma_tx_next_desc->des2;
 80016b8:	68a0      	ldr	r0, [r4, #8]
  if (pkt_len > ETH_NBUF)
    pkt_len = ETH_NBUF; // let's not blow through our packet buffer
  memcpy(buf, pkt, pkt_len);
 80016ba:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80016be:	bf28      	it	cs
 80016c0:	f44f 6500 	movcs.w	r5, #2048	; 0x800
 80016c4:	462a      	mov	r2, r5
 80016c6:	f002 f9a1 	bl	8003a0c <memcpy>
  g_eth_dma_tx_next_desc->des1 = pkt_len;
 80016ca:	6065      	str	r5, [r4, #4]
  g_eth_dma_tx_next_desc->des0 |= 0x30000000; // LS+FS = single-buffer packet
 80016cc:	6823      	ldr	r3, [r4, #0]
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
 80016ce:	4a15      	ldr	r2, [pc, #84]	; (8001724 <enet_send_udp_ucast+0x148>)
  uint8_t *buf = (uint8_t *)g_eth_dma_tx_next_desc->des2;
  if (pkt_len > ETH_NBUF)
    pkt_len = ETH_NBUF; // let's not blow through our packet buffer
  memcpy(buf, pkt, pkt_len);
  g_eth_dma_tx_next_desc->des1 = pkt_len;
  g_eth_dma_tx_next_desc->des0 |= 0x30000000; // LS+FS = single-buffer packet
 80016d0:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80016d4:	6023      	str	r3, [r4, #0]
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
 80016d6:	6823      	ldr	r3, [r4, #0]
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
 80016d8:	f241 0114 	movw	r1, #4116	; 0x1014
  if (pkt_len > ETH_NBUF)
    pkt_len = ETH_NBUF; // let's not blow through our packet buffer
  memcpy(buf, pkt, pkt_len);
  g_eth_dma_tx_next_desc->des1 = pkt_len;
  g_eth_dma_tx_next_desc->des0 |= 0x30000000; // LS+FS = single-buffer packet
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
 80016dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80016e0:	6023      	str	r3, [r4, #0]
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
 80016e2:	5853      	ldr	r3, [r2, r1]
 80016e4:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 80016e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80016ec:	d005      	beq.n	80016fa <enet_send_udp_ucast+0x11e>
  {
    ETH->DMASR = ETH_DMASR_TBUS; // clear the buffer-unavailable flag
    ETH->DMATPDR = 0; // transmit poll demand = kick it moving again
  }
  g_eth_dma_tx_next_desc = (eth_dma_desc_t *)g_eth_dma_tx_next_desc->des3;
 80016ee:	68e3      	ldr	r3, [r4, #12]
 80016f0:	f8c8 3000 	str.w	r3, [r8]
    0x08, 0xca, 0xfe, 0xbe, 0xef, 0x12, 0x34, 0x56,
    0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7b, 0x94, 0x60, 0x0f };
  eth_send_raw_packet(raw_test_pkt, 68); //sizeof(reg_idx) + payload_len);
  */
}
 80016f4:	b003      	add	sp, #12
 80016f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
  {
    ETH->DMASR = ETH_DMASR_TBUS; // clear the buffer-unavailable flag
    ETH->DMATPDR = 0; // transmit poll demand = kick it moving again
 80016fa:	f241 0304 	movw	r3, #4100	; 0x1004
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
  {
    ETH->DMASR = ETH_DMASR_TBUS; // clear the buffer-unavailable flag
 80016fe:	f842 9001 	str.w	r9, [r2, r1]
    ETH->DMATPDR = 0; // transmit poll demand = kick it moving again
 8001702:	50d7      	str	r7, [r2, r3]
  }
  g_eth_dma_tx_next_desc = (eth_dma_desc_t *)g_eth_dma_tx_next_desc->des3;
 8001704:	68e3      	ldr	r3, [r4, #12]
 8001706:	f8c8 3000 	str.w	r3, [r8]
    0x08, 0xca, 0xfe, 0xbe, 0xef, 0x12, 0x34, 0x56,
    0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7b, 0x94, 0x60, 0x0f };
  eth_send_raw_packet(raw_test_pkt, 68); //sizeof(reg_idx) + payload_len);
  */
}
 800170a:	b003      	add	sp, #12
 800170c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001710:	b003      	add	sp, #12
 8001712:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
  {
    err_set(ERR_ETH_BUFFER_FULL);
 8001716:	f002 b935 	b.w	8003984 <err_set>
 800171a:	bf00      	nop
 800171c:	20000968 	.word	0x20000968
 8001720:	20000992 	.word	0x20000992
 8001724:	40028000 	.word	0x40028000
 8001728:	0800a834 	.word	0x0800a834
 800172c:	20000004 	.word	0x20000004

08001730 <enet_send_udp_mcast>:
static uint8_t  g_eth_src_mac[6] = { 0xa4, 0xf3, 0xc1, 0x00, 0x01, 0x00 };
static uint32_t g_eth_src_ip = 0x0a636363; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
 8001730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001732:	b087      	sub	sp, #28
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 8001734:	e88d 000e 	stmia.w	sp, {r1, r2, r3}

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
 8001738:	f3c0 4c07 	ubfx	ip, r0, #16, #8
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
 800173c:	f3c0 2e07 	ubfx	lr, r0, #8, #8
static uint8_t  g_eth_src_mac[6] = { 0xa4, 0xf3, 0xc1, 0x00, 0x01, 0x00 };
static uint32_t g_eth_src_ip = 0x0a636363; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
 8001740:	4604      	mov	r4, r0
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 8001742:	460a      	mov	r2, r1
static uint32_t g_eth_src_ip = 0x0a636363; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
 8001744:	2701      	movs	r7, #1
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 8001746:	4601      	mov	r1, r0
static uint32_t g_eth_src_ip = 0x0a636363; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
 8001748:	2600      	movs	r6, #0
 800174a:	255e      	movs	r5, #94	; 0x5e
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 800174c:	a804      	add	r0, sp, #16
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <enet_send_udp_mcast+0x40>)
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
 8001750:	f88d 4015 	strb.w	r4, [sp, #21]

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
 8001754:	f88d c013 	strb.w	ip, [sp, #19]
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
 8001758:	f88d e014 	strb.w	lr, [sp, #20]
static uint32_t g_eth_src_ip = 0x0a636363; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
 800175c:	f88d 7010 	strb.w	r7, [sp, #16]
 8001760:	f88d 6011 	strb.w	r6, [sp, #17]
 8001764:	f88d 5012 	strb.w	r5, [sp, #18]
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 8001768:	f7ff ff38 	bl	80015dc <enet_send_udp_ucast>
                      g_eth_src_ip, mcast_port,
                      payload, payload_len);
}
 800176c:	b007      	add	sp, #28
 800176e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001770:	0a636363 	.word	0x0a636363

08001774 <enet_process_rx_ring>:
  eth_send_raw_packet(raw_test_pkt, 68); //sizeof(reg_idx) + payload_len);
  */
}

uint_fast8_t enet_process_rx_ring()
{
 8001774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001778:	4e55      	ldr	r6, [pc, #340]	; (80018d0 <enet_process_rx_ring+0x15c>)
 800177a:	f8df 9164 	ldr.w	r9, [pc, #356]	; 80018e0 <enet_process_rx_ring+0x16c>
  uint_fast8_t num_pkts_rx = 0;
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
  {
    const uint16_t rp = g_eth_rxpool_ptrs_rpos;
    const uint8_t *start = (const uint8_t *)g_eth_rxpool_start[rp];
 800177e:	f8df a164 	ldr.w	sl, [pc, #356]	; 80018e4 <enet_process_rx_ring+0x170>
  eth_send_raw_packet(raw_test_pkt, 68); //sizeof(reg_idx) + payload_len);
  */
}

uint_fast8_t enet_process_rx_ring()
{
 8001782:	b083      	sub	sp, #12
  uint_fast8_t num_pkts_rx = 0;
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
 8001784:	46b0      	mov	r8, r6
  */
}

uint_fast8_t enet_process_rx_ring()
{
  uint_fast8_t num_pkts_rx = 0;
 8001786:	2700      	movs	r7, #0
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
 8001788:	f8b9 2000 	ldrh.w	r2, [r9]
 800178c:	8833      	ldrh	r3, [r6, #0]
 800178e:	b292      	uxth	r2, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	429a      	cmp	r2, r3
 8001794:	f000 8082 	beq.w	800189c <enet_process_rx_ring+0x128>
  {
    const uint16_t rp = g_eth_rxpool_ptrs_rpos;
 8001798:	f8b8 3000 	ldrh.w	r3, [r8]
    const uint8_t *start = (const uint8_t *)g_eth_rxpool_start[rp];
    const uint16_t len = g_eth_rxpool_len[rp];
 800179c:	4a4d      	ldr	r2, [pc, #308]	; (80018d4 <enet_process_rx_ring+0x160>)
 800179e:	4c4e      	ldr	r4, [pc, #312]	; (80018d8 <enet_process_rx_ring+0x164>)
uint_fast8_t enet_process_rx_ring()
{
  uint_fast8_t num_pkts_rx = 0;
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
  {
    const uint16_t rp = g_eth_rxpool_ptrs_rpos;
 80017a0:	b29b      	uxth	r3, r3
    //printf("eth rxpool wpos = %d rpos = %d start %d len %d\r\n",
    //       g_eth_rxpool_ptrs_wpos,
    //       rp, start - g_eth_rxpool, len);
    // see if it's addressed to us
    const eth_eth_header_t *e = (const eth_eth_header_t *)start;
    uint8_t unicast_match = 1, multicast_match = 1, broadcast_match = 1;
 80017a2:	2101      	movs	r1, #1
{
  uint_fast8_t num_pkts_rx = 0;
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
  {
    const uint16_t rp = g_eth_rxpool_ptrs_rpos;
    const uint8_t *start = (const uint8_t *)g_eth_rxpool_start[rp];
 80017a4:	f85a c023 	ldr.w	ip, [sl, r3, lsl #2]
    const uint16_t len = g_eth_rxpool_len[rp];
 80017a8:	f832 b013 	ldrh.w	fp, [r2, r3, lsl #1]
 80017ac:	f10c 0e05 	add.w	lr, ip, #5
 80017b0:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80017b4:	fa1f fb8b 	uxth.w	fp, fp
    //printf("eth rxpool wpos = %d rpos = %d start %d len %d\r\n",
    //       g_eth_rxpool_ptrs_wpos,
    //       rp, start - g_eth_rxpool, len);
    // see if it's addressed to us
    const eth_eth_header_t *e = (const eth_eth_header_t *)start;
    uint8_t unicast_match = 1, multicast_match = 1, broadcast_match = 1;
 80017b8:	4608      	mov	r0, r1
           e->dest_addr[0], e->dest_addr[1], e->dest_addr[2],
           e->dest_addr[3], e->dest_addr[4], e->dest_addr[5]);
    */
    for (int i = 0; i < 6; i++)
    {
      if (e->dest_addr[i] != g_eth_src_mac[i])
 80017ba:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80017be:	f814 5b01 	ldrb.w	r5, [r4], #1
        unicast_match = 0;
 80017c2:	42aa      	cmp	r2, r5
 80017c4:	bf18      	it	ne
 80017c6:	2000      	movne	r0, #0
      if (e->dest_addr[i] != 0xff)
        broadcast_match = 0;
 80017c8:	2aff      	cmp	r2, #255	; 0xff
 80017ca:	bf18      	it	ne
 80017cc:	2100      	movne	r1, #0
    /*
    printf("rx mac: %02x:%02x:%02x:%02x:%02x:%02x\r\n",
           e->dest_addr[0], e->dest_addr[1], e->dest_addr[2],
           e->dest_addr[3], e->dest_addr[4], e->dest_addr[5]);
    */
    for (int i = 0; i < 6; i++)
 80017ce:	4573      	cmp	r3, lr
 80017d0:	d1f3      	bne.n	80017ba <enet_process_rx_ring+0x46>
      if (e->dest_addr[i] != g_eth_src_mac[i])
        unicast_match = 0;
      if (e->dest_addr[i] != 0xff)
        broadcast_match = 0;
    }
    if (e->dest_addr[0] != 0x01 ||
 80017d2:	f89c 2000 	ldrb.w	r2, [ip]
 80017d6:	2a01      	cmp	r2, #1
 80017d8:	d014      	beq.n	8001804 <enet_process_rx_ring+0x90>
        e->dest_addr[2] != 0x5e)
      multicast_match = 0;
    //printf("  ucast_match = %d, bcast_match = %d, mcast_match = %d\r\n",
    //       unicast_match, broadcast_match, multicast_match);
    //printf("dispatch @ %8u\r\n", (unsigned)SYSTIME);
    if (unicast_match || multicast_match || broadcast_match)
 80017da:	b900      	cbnz	r0, 80017de <enet_process_rx_ring+0x6a>
 80017dc:	b141      	cbz	r1, 80017f0 <enet_process_rx_ring+0x7c>

static bool eth_dispatch_eth(const uint8_t *data, const uint16_t len)
{
  // dispatch according to protocol
  const eth_eth_header_t *e = (const eth_eth_header_t *)data;
  switch (eth_htons(e->ethertype))
 80017de:	f8bc 300c 	ldrh.w	r3, [ip, #12]
 80017e2:	ba5b      	rev16	r3, r3
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017ea:	d01a      	beq.n	8001822 <enet_process_rx_ring+0xae>
      for (int i = 0; i < NUM_DMXL; i++)
        dmxl_set_control_mode(i, (dmxl_control_mode_t)payload[1+i]);
      delay_ms(1); // be sure they control mode messages get through
      return true;
    }
    else if (cmd == 2 && payload_len >= 9)
 80017ec:	2300      	movs	r3, #0
      multicast_match = 0;
    //printf("  ucast_match = %d, bcast_match = %d, mcast_match = %d\r\n",
    //       unicast_match, broadcast_match, multicast_match);
    //printf("dispatch @ %8u\r\n", (unsigned)SYSTIME);
    if (unicast_match || multicast_match || broadcast_match)
      num_pkts_rx += eth_dispatch_eth(start, len) ? 1 : 0;
 80017ee:	441f      	add	r7, r3
    if (++g_eth_rxpool_ptrs_rpos >= ETH_RAM_RXPOOL_NPTR)
 80017f0:	8833      	ldrh	r3, [r6, #0]
 80017f2:	3301      	adds	r3, #1
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	2b7f      	cmp	r3, #127	; 0x7f
 80017f8:	8033      	strh	r3, [r6, #0]
      g_eth_rxpool_ptrs_rpos = 0;
 80017fa:	bf84      	itt	hi
 80017fc:	2300      	movhi	r3, #0
 80017fe:	f8a8 3000 	strhhi.w	r3, [r8]
 8001802:	e7c1      	b.n	8001788 <enet_process_rx_ring+0x14>
      if (e->dest_addr[i] != g_eth_src_mac[i])
        unicast_match = 0;
      if (e->dest_addr[i] != 0xff)
        broadcast_match = 0;
    }
    if (e->dest_addr[0] != 0x01 ||
 8001804:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1e6      	bne.n	80017da <enet_process_rx_ring+0x66>
        e->dest_addr[1] != 0x00 ||
 800180c:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8001810:	2b5e      	cmp	r3, #94	; 0x5e
 8001812:	d1e2      	bne.n	80017da <enet_process_rx_ring+0x66>

static bool eth_dispatch_eth(const uint8_t *data, const uint16_t len)
{
  // dispatch according to protocol
  const eth_eth_header_t *e = (const eth_eth_header_t *)data;
  switch (eth_htons(e->ethertype))
 8001814:	f8bc 300c 	ldrh.w	r3, [ip, #12]
 8001818:	ba5b      	rev16	r3, r3
 800181a:	b29b      	uxth	r3, r3
 800181c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001820:	d1e4      	bne.n	80017ec <enet_process_rx_ring+0x78>
}

static bool eth_dispatch_ip(const uint8_t *data, const uint16_t len)
{
  const eth_ip_header_t *ip = (const eth_ip_header_t *)data;
  if (ip->version != 4) // we only handle ipv4 (for now...)
 8001822:	f89c 300e 	ldrb.w	r3, [ip, #14]
 8001826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800182a:	2b40      	cmp	r3, #64	; 0x40
 800182c:	d1de      	bne.n	80017ec <enet_process_rx_ring+0x78>
    return false;
  // if it's unicast, verify our IP address, otherwise ignore the packet
  if (ip->eth.dest_addr[0] == g_eth_src_mac[0])
 800182e:	2aa4      	cmp	r2, #164	; 0xa4
 8001830:	d038      	beq.n	80018a4 <enet_process_rx_ring+0x130>
    if (ip->source_addr != eth_htonl(g_eth_src_ip))
      return false;
  if (ip->proto == ETH_IP_PROTO_UDP)
 8001832:	f89c 3017 	ldrb.w	r3, [ip, #23]
 8001836:	2b11      	cmp	r3, #17
 8001838:	d1d8      	bne.n	80017ec <enet_process_rx_ring+0x78>

static bool eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
  const eth_udp_header_t *udp = (const eth_udp_header_t *)data;
  const uint16_t port = eth_htons(udp->dest_port);
  const uint16_t payload_len = eth_htons(udp->len) - 8;
 800183a:	f8bc 3026 	ldrh.w	r3, [ip, #38]	; 0x26
}

static bool eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
  const eth_udp_header_t *udp = (const eth_udp_header_t *)data;
  const uint16_t port = eth_htons(udp->dest_port);
 800183e:	f8bc 2024 	ldrh.w	r2, [ip, #36]	; 0x24
 8001842:	ba5b      	rev16	r3, r3
  const uint16_t payload_len = eth_htons(udp->len) - 8;
 8001844:	3b08      	subs	r3, #8
  const uint8_t *payload = data + sizeof(eth_udp_header_t);
  //printf("  udp len: %d\r\n", udp_payload_len);
  if (payload_len > len - sizeof(eth_udp_header_t))
 8001846:	f1ab 0b2a 	sub.w	fp, fp, #42	; 0x2a

static bool eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
  const eth_udp_header_t *udp = (const eth_udp_header_t *)data;
  const uint16_t port = eth_htons(udp->dest_port);
  const uint16_t payload_len = eth_htons(udp->len) - 8;
 800184a:	b29b      	uxth	r3, r3
 800184c:	ba52      	rev16	r2, r2
  const uint8_t *payload = data + sizeof(eth_udp_header_t);
  //printf("  udp len: %d\r\n", udp_payload_len);
  if (payload_len > len - sizeof(eth_udp_header_t))
 800184e:	455b      	cmp	r3, fp
 8001850:	b292      	uxth	r2, r2
 8001852:	d8cb      	bhi.n	80017ec <enet_process_rx_ring+0x78>
  for (int i = 0; i < payload_len; i++)
  {
    printf("  %02d: %02x\r\n", i, payload[i]);
  }
  */
  if (port == 11333 && payload_len > 0)
 8001854:	f642 4145 	movw	r1, #11333	; 0x2c45
 8001858:	428a      	cmp	r2, r1
 800185a:	d1c7      	bne.n	80017ec <enet_process_rx_ring+0x78>
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0c6      	beq.n	80017ee <enet_process_rx_ring+0x7a>
  {
    const uint8_t cmd = payload[0];
 8001860:	f89c 202a 	ldrb.w	r2, [ip, #42]	; 0x2a
    //printf("  enet rx cmd = 0x%02x\r\n", cmd);
    if (cmd == 1 && payload_len >= 5)
 8001864:	2a01      	cmp	r2, #1
static bool eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
  const eth_udp_header_t *udp = (const eth_udp_header_t *)data;
  const uint16_t port = eth_htons(udp->dest_port);
  const uint16_t payload_len = eth_htons(udp->len) - 8;
  const uint8_t *payload = data + sizeof(eth_udp_header_t);
 8001866:	f10c 052a 	add.w	r5, ip, #42	; 0x2a
  */
  if (port == 11333 && payload_len > 0)
  {
    const uint8_t cmd = payload[0];
    //printf("  enet rx cmd = 0x%02x\r\n", cmd);
    if (cmd == 1 && payload_len >= 5)
 800186a:	d021      	beq.n	80018b0 <enet_process_rx_ring+0x13c>
      for (int i = 0; i < NUM_DMXL; i++)
        dmxl_set_control_mode(i, (dmxl_control_mode_t)payload[1+i]);
      delay_ms(1); // be sure they control mode messages get through
      return true;
    }
    else if (cmd == 2 && payload_len >= 9)
 800186c:	2a02      	cmp	r2, #2
 800186e:	d1bd      	bne.n	80017ec <enet_process_rx_ring+0x78>
 8001870:	2b08      	cmp	r3, #8
 8001872:	d9bb      	bls.n	80017ec <enet_process_rx_ring+0x78>
 8001874:	f10c 0008 	add.w	r0, ip, #8
 8001878:	4669      	mov	r1, sp
    {
      uint16_t targets[NUM_DMXL];
      for (int i = 0; i < NUM_DMXL; i++)
        targets[i] = (payload[1+2*i] << 8) | payload[2+2*i];
 800187a:	f89c 202b 	ldrb.w	r2, [ip, #43]	; 0x2b
 800187e:	f89c 302c 	ldrb.w	r3, [ip, #44]	; 0x2c
 8001882:	f10c 0c02 	add.w	ip, ip, #2
 8001886:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      return true;
    }
    else if (cmd == 2 && payload_len >= 9)
    {
      uint16_t targets[NUM_DMXL];
      for (int i = 0; i < NUM_DMXL; i++)
 800188a:	4584      	cmp	ip, r0
        targets[i] = (payload[1+2*i] << 8) | payload[2+2*i];
 800188c:	f821 3b02 	strh.w	r3, [r1], #2
      return true;
    }
    else if (cmd == 2 && payload_len >= 9)
    {
      uint16_t targets[NUM_DMXL];
      for (int i = 0; i < NUM_DMXL; i++)
 8001890:	d1f3      	bne.n	800187a <enet_process_rx_ring+0x106>
      */
      /*
      for (int i = 0; i < NUM_DMXL; i++)
        dmxl_set_control_target(i, targets[i]);
      */
      dmxl_set_all_control_targets(targets);
 8001892:	4668      	mov	r0, sp
 8001894:	f000 fd32 	bl	80022fc <dmxl_set_all_control_targets>
 8001898:	2301      	movs	r3, #1
 800189a:	e7a8      	b.n	80017ee <enet_process_rx_ring+0x7a>
      num_pkts_rx += eth_dispatch_eth(start, len) ? 1 : 0;
    if (++g_eth_rxpool_ptrs_rpos >= ETH_RAM_RXPOOL_NPTR)
      g_eth_rxpool_ptrs_rpos = 0;
  }
  return num_pkts_rx;
}
 800189c:	4638      	mov	r0, r7
 800189e:	b003      	add	sp, #12
 80018a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const eth_ip_header_t *ip = (const eth_ip_header_t *)data;
  if (ip->version != 4) // we only handle ipv4 (for now...)
    return false;
  // if it's unicast, verify our IP address, otherwise ignore the packet
  if (ip->eth.dest_addr[0] == g_eth_src_mac[0])
    if (ip->source_addr != eth_htonl(g_eth_src_ip))
 80018a4:	f8dc 301a 	ldr.w	r3, [ip, #26]
 80018a8:	4a0c      	ldr	r2, [pc, #48]	; (80018dc <enet_process_rx_ring+0x168>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d19e      	bne.n	80017ec <enet_process_rx_ring+0x78>
 80018ae:	e7c0      	b.n	8001832 <enet_process_rx_ring+0xbe>
  */
  if (port == 11333 && payload_len > 0)
  {
    const uint8_t cmd = payload[0];
    //printf("  enet rx cmd = 0x%02x\r\n", cmd);
    if (cmd == 1 && payload_len >= 5)
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d99b      	bls.n	80017ec <enet_process_rx_ring+0x78>
 80018b4:	2400      	movs	r4, #0
      /*
      printf("    modes: %d %d %d %d\r\n",
             payload[1], payload[2], payload[3], payload[4]);
      */
      for (int i = 0; i < NUM_DMXL; i++)
        dmxl_set_control_mode(i, (dmxl_control_mode_t)payload[1+i]);
 80018b6:	b2e0      	uxtb	r0, r4
 80018b8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80018bc:	3401      	adds	r4, #1
 80018be:	f000 fc8d 	bl	80021dc <dmxl_set_control_mode>
    {
      /*
      printf("    modes: %d %d %d %d\r\n",
             payload[1], payload[2], payload[3], payload[4]);
      */
      for (int i = 0; i < NUM_DMXL; i++)
 80018c2:	2c04      	cmp	r4, #4
 80018c4:	d1f7      	bne.n	80018b6 <enet_process_rx_ring+0x142>
        dmxl_set_control_mode(i, (dmxl_control_mode_t)payload[1+i]);
      delay_ms(1); // be sure they control mode messages get through
 80018c6:	2001      	movs	r0, #1
 80018c8:	f001 ffcc 	bl	8003864 <delay_ms>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e78e      	b.n	80017ee <enet_process_rx_ring+0x7a>
 80018d0:	20008f86 	.word	0x20008f86
 80018d4:	20008f88 	.word	0x20008f88
 80018d8:	0800a834 	.word	0x0800a834
 80018dc:	6363630a 	.word	0x6363630a
 80018e0:	20008f84 	.word	0x20008f84
 80018e4:	2000908c 	.word	0x2000908c

080018e8 <enet_send_state>:

// todo: be smarter about multicast group choice
#define MCAST_IP 0xe000007c

void enet_send_state()
{
 80018e8:	b510      	push	{r4, lr}
  volatile state_t tx_state = g_state; // make a local copy to ensure coherence
 80018ea:	24ca      	movs	r4, #202	; 0xca

// todo: be smarter about multicast group choice
#define MCAST_IP 0xe000007c

void enet_send_state()
{
 80018ec:	b0b4      	sub	sp, #208	; 0xd0
  volatile state_t tx_state = g_state; // make a local copy to ensure coherence
 80018ee:	4622      	mov	r2, r4
 80018f0:	a801      	add	r0, sp, #4
 80018f2:	4906      	ldr	r1, [pc, #24]	; (800190c <enet_send_state+0x24>)
 80018f4:	f002 f88a 	bl	8003a0c <memcpy>
  enet_send_udp_mcast(MCAST_IP, 11333,
 80018f8:	aa01      	add	r2, sp, #4
 80018fa:	4623      	mov	r3, r4
 80018fc:	4804      	ldr	r0, [pc, #16]	; (8001910 <enet_send_state+0x28>)
 80018fe:	f642 4145 	movw	r1, #11333	; 0x2c45
 8001902:	f7ff ff15 	bl	8001730 <enet_send_udp_mcast>
                      (uint8_t *)&tx_state, sizeof(tx_state));
}
 8001906:	b034      	add	sp, #208	; 0xd0
 8001908:	bd10      	pop	{r4, pc}
 800190a:	bf00      	nop
 800190c:	2001058c 	.word	0x2001058c
 8001910:	e000007c 	.word	0xe000007c

08001914 <systime_init>:
#include "./stm32/stm32f4xx.h"

void systime_init()
{
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001914:	4a0f      	ldr	r2, [pc, #60]	; (8001954 <systime_init+0x40>)
 8001916:	6c13      	ldr	r3, [r2, #64]	; 0x40
#include "systime.h"
#include "./stm32/stm32f4xx.h"

void systime_init()
{
 8001918:	b082      	sub	sp, #8
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800191a:	f043 0301 	orr.w	r3, r3, #1
  for (volatile int i = 0; i < 1000; i++) { } // let tim2 spin up
 800191e:	2100      	movs	r1, #0
#include "./stm32/stm32f4xx.h"

void systime_init()
{
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001920:	6413      	str	r3, [r2, #64]	; 0x40
  for (volatile int i = 0; i < 1000; i++) { } // let tim2 spin up
 8001922:	9101      	str	r1, [sp, #4]
 8001924:	9b01      	ldr	r3, [sp, #4]
 8001926:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800192a:	da06      	bge.n	800193a <systime_init+0x26>
 800192c:	9b01      	ldr	r3, [sp, #4]
 800192e:	3301      	adds	r3, #1
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	9b01      	ldr	r3, [sp, #4]
 8001934:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001938:	dbf8      	blt.n	800192c <systime_init+0x18>
  TIM2->PSC = 168000000 / 2 / 1000000 - 1; // 83
 800193a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  TIM2->ARR = 0xffffffff; // count as long as possible
  TIM2->EGR = TIM_EGR_UG; // load the PSC register immediately
 800193e:	2201      	movs	r2, #1
void systime_init()
{
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
  for (volatile int i = 0; i < 1000; i++) { } // let tim2 spin up
  TIM2->PSC = 168000000 / 2 / 1000000 - 1; // 83
 8001940:	2053      	movs	r0, #83	; 0x53
  TIM2->ARR = 0xffffffff; // count as long as possible
 8001942:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
void systime_init()
{
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
  for (volatile int i = 0; i < 1000; i++) { } // let tim2 spin up
  TIM2->PSC = 168000000 / 2 / 1000000 - 1; // 83
 8001946:	8518      	strh	r0, [r3, #40]	; 0x28
  TIM2->ARR = 0xffffffff; // count as long as possible
 8001948:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIM2->EGR = TIM_EGR_UG; // load the PSC register immediately
 800194a:	829a      	strh	r2, [r3, #20]
  TIM2->CR1 = TIM_CR1_CEN; // start counter
 800194c:	801a      	strh	r2, [r3, #0]
}
 800194e:	b002      	add	sp, #8
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800

08001958 <dmxl_tx.part.1>:
      dmxl_set_usart_baud(i, 250000);
    }
  }
}

static void dmxl_tx(const uint8_t port_idx,
 8001958:	b5f0      	push	{r4, r5, r6, r7, lr}
                    const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
    return; // bogus port index
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
  USART_TypeDef *u = dp->uart;
 800195a:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <dmxl_tx.part.1+0x88>)
 800195c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001960:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
 8001964:	2700      	movs	r7, #0
                    const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
    return; // bogus port index
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
  USART_TypeDef *u = dp->uart;
 8001966:	68d8      	ldr	r0, [r3, #12]
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
 8001968:	8983      	ldrh	r3, [r0, #12]
 800196a:	f023 0304 	bic.w	r3, r3, #4
 800196e:	041b      	lsls	r3, r3, #16
 8001970:	0c1b      	lsrs	r3, r3, #16
 8001972:	8183      	strh	r3, [r0, #12]
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
 8001974:	8983      	ldrh	r3, [r0, #12]
 8001976:	b29b      	uxth	r3, r3
 8001978:	f043 0308 	orr.w	r3, r3, #8
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
 800197c:	3202      	adds	r2, #2
  if (port_idx >= NUM_DMXL)
    return; // bogus port index
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
  USART_TypeDef *u = dp->uart;
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
 800197e:	8183      	strh	r3, [r0, #12]
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
 8001980:	463e      	mov	r6, r7
 8001982:	463c      	mov	r4, r7
  {
    while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
    if (i <= 1)
      u->DR = 0xff; // preamble
 8001984:	f04f 0eff 	mov.w	lr, #255	; 0xff
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
  {
    while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
 8001988:	8803      	ldrh	r3, [r0, #0]
 800198a:	061d      	lsls	r5, r3, #24
 800198c:	d5fc      	bpl.n	8001988 <dmxl_tx.part.1+0x30>
    if (i <= 1)
 800198e:	2c01      	cmp	r4, #1
      // send checksum
      u->DR = ~csum;
    }
    else
    {
      u->DR = payload[i-2]; // send payload byte
 8001990:	f1a4 0502 	sub.w	r5, r4, #2
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
  {
    while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
    if (i <= 1)
 8001994:	d91a      	bls.n	80019cc <dmxl_tx.part.1+0x74>
      u->DR = 0xff; // preamble
    else if (i == payload_len + 2)
 8001996:	42b2      	cmp	r2, r6
 8001998:	d01b      	beq.n	80019d2 <dmxl_tx.part.1+0x7a>
      // send checksum
      u->DR = ~csum;
    }
    else
    {
      u->DR = payload[i-2]; // send payload byte
 800199a:	5d4b      	ldrb	r3, [r1, r5]
 800199c:	8083      	strh	r3, [r0, #4]
      csum += payload[i-2];
 800199e:	5d4d      	ldrb	r5, [r1, r5]
 80019a0:	197b      	adds	r3, r7, r5
 80019a2:	b2df      	uxtb	r7, r3
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
  USART_TypeDef *u = dp->uart;
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
 80019a4:	3401      	adds	r4, #1
 80019a6:	b2e4      	uxtb	r4, r4
 80019a8:	4294      	cmp	r4, r2
 80019aa:	4626      	mov	r6, r4
 80019ac:	ddec      	ble.n	8001988 <dmxl_tx.part.1+0x30>
    {
      u->DR = payload[i-2]; // send payload byte
      csum += payload[i-2];
    }
  }
  while (!(u->SR & USART_SR_TC)) { } // wait for TX to finish
 80019ae:	8803      	ldrh	r3, [r0, #0]
 80019b0:	065b      	lsls	r3, r3, #25
 80019b2:	d5fc      	bpl.n	80019ae <dmxl_tx.part.1+0x56>
  u->CR1 &= ~USART_CR1_TE; // disable the transmitter
 80019b4:	8983      	ldrh	r3, [r0, #12]
 80019b6:	f023 0308 	bic.w	r3, r3, #8
 80019ba:	041b      	lsls	r3, r3, #16
 80019bc:	0c1b      	lsrs	r3, r3, #16
 80019be:	8183      	strh	r3, [r0, #12]
  u->CR1 |=  USART_CR1_RE; // re-enable the receiver
 80019c0:	8983      	ldrh	r3, [r0, #12]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	8183      	strh	r3, [r0, #12]
 80019ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
  {
    while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
    if (i <= 1)
      u->DR = 0xff; // preamble
 80019cc:	f8a0 e004 	strh.w	lr, [r0, #4]
 80019d0:	e7e8      	b.n	80019a4 <dmxl_tx.part.1+0x4c>
    else if (i == payload_len + 2)
    {
      // send checksum
      u->DR = ~csum;
 80019d2:	f487 437f 	eor.w	r3, r7, #65280	; 0xff00
 80019d6:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80019da:	8083      	strh	r3, [r0, #4]
 80019dc:	e7e2      	b.n	80019a4 <dmxl_tx.part.1+0x4c>
 80019de:	bf00      	nop
 80019e0:	2000000c 	.word	0x2000000c

080019e4 <dmxl_write_data>:
}

static void dmxl_write_data(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t data_len, const uint8_t start_addr,
                            const uint8_t *data)
{
 80019e4:	b530      	push	{r4, r5, lr}
 80019e6:	b0c1      	sub	sp, #260	; 0x104
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = data_len + 3;
 80019e8:	1cd5      	adds	r5, r2, #3
  pkt[2] = 3; // instruction: "write data"
 80019ea:	2403      	movs	r4, #3
                            const uint8_t data_len, const uint8_t start_addr,
                            const uint8_t *data)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = data_len + 3;
 80019ec:	f88d 5001 	strb.w	r5, [sp, #1]
static void dmxl_write_data(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t data_len, const uint8_t start_addr,
                            const uint8_t *data)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
 80019f0:	f88d 1000 	strb.w	r1, [sp]
  pkt[1] = data_len + 3;
  pkt[2] = 3; // instruction: "write data"
  pkt[3] = start_addr;
 80019f4:	f88d 3003 	strb.w	r3, [sp, #3]
                            const uint8_t *data)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = data_len + 3;
  pkt[2] = 3; // instruction: "write data"
 80019f8:	f88d 4002 	strb.w	r4, [sp, #2]
  pkt[3] = start_addr;
  for (int i = 0; i < data_len; i++)
 80019fc:	b152      	cbz	r2, 8001a14 <dmxl_write_data+0x30>
 80019fe:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8001a00:	446d      	add	r5, sp
 8001a02:	1e59      	subs	r1, r3, #1
 8001a04:	f10d 0303 	add.w	r3, sp, #3
    pkt[4+i] = data[i];
 8001a08:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8001a0c:	f803 4f01 	strb.w	r4, [r3, #1]!
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = data_len + 3;
  pkt[2] = 3; // instruction: "write data"
  pkt[3] = start_addr;
  for (int i = 0; i < data_len; i++)
 8001a10:	42ab      	cmp	r3, r5
 8001a12:	d1f9      	bne.n	8001a08 <dmxl_write_data+0x24>
}

static void dmxl_tx(const uint8_t port_idx,
                    const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
 8001a14:	2803      	cmp	r0, #3
 8001a16:	d804      	bhi.n	8001a22 <dmxl_write_data+0x3e>
  pkt[1] = data_len + 3;
  pkt[2] = 3; // instruction: "write data"
  pkt[3] = start_addr;
  for (int i = 0; i < data_len; i++)
    pkt[4+i] = data[i];
  dmxl_tx(port_idx, pkt, data_len + 4);
 8001a18:	3204      	adds	r2, #4
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	4669      	mov	r1, sp
 8001a1e:	f7ff ff9b 	bl	8001958 <dmxl_tx.part.1>
}
 8001a22:	b041      	add	sp, #260	; 0x104
 8001a24:	bd30      	pop	{r4, r5, pc}
 8001a26:	bf00      	nop

08001a28 <dmxl_read_data.constprop.3>:

static void dmxl_read_data(const uint8_t port_idx, const uint8_t dmxl_id,
 8001a28:	b530      	push	{r4, r5, lr}
 8001a2a:	b0c1      	sub	sp, #260	; 0x104
                           const uint8_t data_len, const uint8_t start_addr)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
 8001a2c:	2501      	movs	r5, #1
  pkt[1] = 4; // this packet's "length" is 4
 8001a2e:	2404      	movs	r4, #4
  pkt[2] = 2; // instruction: "read data"
 8001a30:	2302      	movs	r3, #2
}

static void dmxl_tx(const uint8_t port_idx,
                    const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
 8001a32:	2803      	cmp	r0, #3
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = 4; // this packet's "length" is 4
  pkt[2] = 2; // instruction: "read data"
  pkt[3] = start_addr;
 8001a34:	f88d 2003 	strb.w	r2, [sp, #3]
  pkt[4] = data_len;
 8001a38:	f88d 1004 	strb.w	r1, [sp, #4]

static void dmxl_read_data(const uint8_t port_idx, const uint8_t dmxl_id,
                           const uint8_t data_len, const uint8_t start_addr)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
 8001a3c:	f88d 5000 	strb.w	r5, [sp]
  pkt[1] = 4; // this packet's "length" is 4
 8001a40:	f88d 4001 	strb.w	r4, [sp, #1]
  pkt[2] = 2; // instruction: "read data"
 8001a44:	f88d 3002 	strb.w	r3, [sp, #2]
}

static void dmxl_tx(const uint8_t port_idx,
                    const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
 8001a48:	d803      	bhi.n	8001a52 <dmxl_read_data.constprop.3+0x2a>
 8001a4a:	4669      	mov	r1, sp
 8001a4c:	2205      	movs	r2, #5
 8001a4e:	f7ff ff83 	bl	8001958 <dmxl_tx.part.1>
  pkt[1] = 4; // this packet's "length" is 4
  pkt[2] = 2; // instruction: "read data"
  pkt[3] = start_addr;
  pkt[4] = data_len;
  dmxl_tx(port_idx, pkt, 5);
}
 8001a52:	b041      	add	sp, #260	; 0x104
 8001a54:	bd30      	pop	{r4, r5, pc}
 8001a56:	bf00      	nop

08001a58 <usart3_vector>:
    g_dmxl_ring_wpos[dmxl_port] = 0;
}

void usart3_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
 8001a58:	490b      	ldr	r1, [pc, #44]	; (8001a88 <usart3_vector+0x30>)
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001a5a:	4a0c      	ldr	r2, [pc, #48]	; (8001a8c <usart3_vector+0x34>)
    g_dmxl_ring_wpos[dmxl_port] = 0;
}

void usart3_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
 8001a5c:	880b      	ldrh	r3, [r1, #0]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001a5e:	480c      	ldr	r0, [pc, #48]	; (8001a90 <usart3_vector+0x38>)
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
    g_dmxl_ring_wpos[dmxl_port] = 0;
}

void usart3_vector()
{
 8001a60:	b082      	sub	sp, #8
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f88d 3007 	strb.w	r3, [sp, #7]
  dmxl_push_byte(0, USART3->DR);
 8001a68:	8889      	ldrh	r1, [r1, #4]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001a6a:	8813      	ldrh	r3, [r2, #0]
 8001a6c:	b29b      	uxth	r3, r3
}

void usart3_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
  dmxl_push_byte(0, USART3->DR);
 8001a6e:	b2c9      	uxtb	r1, r1
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001a70:	54c1      	strb	r1, [r0, r3]
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
 8001a72:	8813      	ldrh	r3, [r2, #0]
 8001a74:	3301      	adds	r3, #1
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	2bff      	cmp	r3, #255	; 0xff
 8001a7a:	8013      	strh	r3, [r2, #0]
    g_dmxl_ring_wpos[dmxl_port] = 0;
 8001a7c:	bf84      	itt	hi
 8001a7e:	2300      	movhi	r3, #0
 8001a80:	8013      	strhhi	r3, [r2, #0]

void usart3_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
  dmxl_push_byte(0, USART3->DR);
}
 8001a82:	b002      	add	sp, #8
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40004800 	.word	0x40004800
 8001a8c:	2000f38c 	.word	0x2000f38c
 8001a90:	2000fbe4 	.word	0x2000fbe4

08001a94 <uart4_vector>:

void uart4_vector()
{
 8001a94:	b410      	push	{r4}
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
 8001a96:	480d      	ldr	r0, [pc, #52]	; (8001acc <uart4_vector+0x38>)
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001a98:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <uart4_vector+0x3c>)
  dmxl_push_byte(0, USART3->DR);
}

void uart4_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
 8001a9a:	8801      	ldrh	r1, [r0, #0]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001a9c:	4c0d      	ldr	r4, [pc, #52]	; (8001ad4 <uart4_vector+0x40>)
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
  dmxl_push_byte(0, USART3->DR);
}

void uart4_vector()
{
 8001a9e:	b083      	sub	sp, #12
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
 8001aa0:	b2c9      	uxtb	r1, r1
 8001aa2:	f88d 1007 	strb.w	r1, [sp, #7]
  dmxl_push_byte(1, UART4->DR);
 8001aa6:	8881      	ldrh	r1, [r0, #4]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001aa8:	8853      	ldrh	r3, [r2, #2]
 8001aaa:	fa14 f383 	uxtah	r3, r4, r3
}

void uart4_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
  dmxl_push_byte(1, UART4->DR);
 8001aae:	b2c9      	uxtb	r1, r1
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001ab0:	f883 1100 	strb.w	r1, [r3, #256]	; 0x100
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
 8001ab4:	8853      	ldrh	r3, [r2, #2]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	2bff      	cmp	r3, #255	; 0xff
 8001abc:	8053      	strh	r3, [r2, #2]
    g_dmxl_ring_wpos[dmxl_port] = 0;
 8001abe:	bf84      	itt	hi
 8001ac0:	2300      	movhi	r3, #0
 8001ac2:	8053      	strhhi	r3, [r2, #2]

void uart4_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
  dmxl_push_byte(1, UART4->DR);
}
 8001ac4:	b003      	add	sp, #12
 8001ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	40004c00 	.word	0x40004c00
 8001ad0:	2000f38c 	.word	0x2000f38c
 8001ad4:	2000fbe4 	.word	0x2000fbe4

08001ad8 <uart5_vector>:

void uart5_vector()
{
 8001ad8:	b410      	push	{r4}
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
 8001ada:	480d      	ldr	r0, [pc, #52]	; (8001b10 <uart5_vector+0x38>)
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001adc:	4a0d      	ldr	r2, [pc, #52]	; (8001b14 <uart5_vector+0x3c>)
  dmxl_push_byte(1, UART4->DR);
}

void uart5_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
 8001ade:	8801      	ldrh	r1, [r0, #0]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001ae0:	4c0d      	ldr	r4, [pc, #52]	; (8001b18 <uart5_vector+0x40>)
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
  dmxl_push_byte(1, UART4->DR);
}

void uart5_vector()
{
 8001ae2:	b083      	sub	sp, #12
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
 8001ae4:	b2c9      	uxtb	r1, r1
 8001ae6:	f88d 1007 	strb.w	r1, [sp, #7]
  dmxl_push_byte(3, UART5->DR);
 8001aea:	8881      	ldrh	r1, [r0, #4]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001aec:	88d3      	ldrh	r3, [r2, #6]
 8001aee:	fa14 f383 	uxtah	r3, r4, r3
}

void uart5_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
  dmxl_push_byte(3, UART5->DR);
 8001af2:	b2c9      	uxtb	r1, r1
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001af4:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
 8001af8:	88d3      	ldrh	r3, [r2, #6]
 8001afa:	3301      	adds	r3, #1
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	2bff      	cmp	r3, #255	; 0xff
 8001b00:	80d3      	strh	r3, [r2, #6]
    g_dmxl_ring_wpos[dmxl_port] = 0;
 8001b02:	bf84      	itt	hi
 8001b04:	2300      	movhi	r3, #0
 8001b06:	80d3      	strhhi	r3, [r2, #6]

void uart5_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
  dmxl_push_byte(3, UART5->DR);
}
 8001b08:	b003      	add	sp, #12
 8001b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	40005000 	.word	0x40005000
 8001b14:	2000f38c 	.word	0x2000f38c
 8001b18:	2000fbe4 	.word	0x2000fbe4

08001b1c <usart6_vector>:

void usart6_vector()
{
 8001b1c:	b410      	push	{r4}
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
 8001b1e:	480d      	ldr	r0, [pc, #52]	; (8001b54 <usart6_vector+0x38>)
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001b20:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <usart6_vector+0x3c>)
  dmxl_push_byte(3, UART5->DR);
}

void usart6_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
 8001b22:	8801      	ldrh	r1, [r0, #0]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001b24:	4c0d      	ldr	r4, [pc, #52]	; (8001b5c <usart6_vector+0x40>)
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
  dmxl_push_byte(3, UART5->DR);
}

void usart6_vector()
{
 8001b26:	b083      	sub	sp, #12
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
 8001b28:	b2c9      	uxtb	r1, r1
 8001b2a:	f88d 1007 	strb.w	r1, [sp, #7]
  dmxl_push_byte(2, USART6->DR);
 8001b2e:	8881      	ldrh	r1, [r0, #4]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001b30:	8893      	ldrh	r3, [r2, #4]
 8001b32:	fa14 f383 	uxtah	r3, r4, r3
}

void usart6_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
  dmxl_push_byte(2, USART6->DR);
 8001b36:	b2c9      	uxtb	r1, r1
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001b38:	f883 1200 	strb.w	r1, [r3, #512]	; 0x200
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
 8001b3c:	8893      	ldrh	r3, [r2, #4]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	2bff      	cmp	r3, #255	; 0xff
 8001b44:	8093      	strh	r3, [r2, #4]
    g_dmxl_ring_wpos[dmxl_port] = 0;
 8001b46:	bf84      	itt	hi
 8001b48:	2300      	movhi	r3, #0
 8001b4a:	8093      	strhhi	r3, [r2, #4]

void usart6_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
  dmxl_push_byte(2, USART6->DR);
}
 8001b4c:	b003      	add	sp, #12
 8001b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	40011400 	.word	0x40011400
 8001b58:	2000f38c 	.word	0x2000f38c
 8001b5c:	2000fbe4 	.word	0x2000fbe4

08001b60 <dmxl_set_usart_baud>:

void dmxl_set_usart_baud(const uint_fast8_t dmxl_idx, int baud)
{
  USART_TypeDef *u = g_dmxl_ports[dmxl_idx].uart;
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <dmxl_set_usart_baud+0x54>)
 8001b62:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001b66:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  if (baud == 57600)
 8001b6a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
  dmxl_push_byte(2, USART6->DR);
}

void dmxl_set_usart_baud(const uint_fast8_t dmxl_idx, int baud)
{
  USART_TypeDef *u = g_dmxl_ports[dmxl_idx].uart;
 8001b6e:	68db      	ldr	r3, [r3, #12]
  if (baud == 57600)
 8001b70:	d00f      	beq.n	8001b92 <dmxl_set_usart_baud+0x32>
    if (u == USART6)
      u->BRR = (((uint16_t)91) << 4) | 2;
    else
      u->BRR = (((uint16_t)45) << 4) | 9;
  }
  else if (baud == 250000)
 8001b72:	4811      	ldr	r0, [pc, #68]	; (8001bb8 <dmxl_set_usart_baud+0x58>)
 8001b74:	4281      	cmp	r1, r0
 8001b76:	d015      	beq.n	8001ba4 <dmxl_set_usart_baud+0x44>
    if (u == USART6)
      u->BRR = (((uint16_t)21) << 4);
    else
      u->BRR = (((uint16_t)10) << 4) | 8;
  }
  else if (baud == 1000000)
 8001b78:	4810      	ldr	r0, [pc, #64]	; (8001bbc <dmxl_set_usart_baud+0x5c>)
 8001b7a:	4281      	cmp	r1, r0
 8001b7c:	d002      	beq.n	8001b84 <dmxl_set_usart_baud+0x24>
      u->BRR = (((uint16_t)5) << 4) |  4;
    else
      u->BRR = (((uint16_t)2) << 4) | 10;
  }
  else
    printf("ahhh unhandled baud rate: %d\r\n", baud);
 8001b7e:	4810      	ldr	r0, [pc, #64]	; (8001bc0 <dmxl_set_usart_baud+0x60>)
 8001b80:	f002 b83c 	b.w	8003bfc <printf>
    else
      u->BRR = (((uint16_t)10) << 4) | 8;
  }
  else if (baud == 1000000)
  {
    if (u == USART6)
 8001b84:	4a0f      	ldr	r2, [pc, #60]	; (8001bc4 <dmxl_set_usart_baud+0x64>)
 8001b86:	4293      	cmp	r3, r2
      u->BRR = (((uint16_t)5) << 4) |  4;
 8001b88:	bf0c      	ite	eq
 8001b8a:	2254      	moveq	r2, #84	; 0x54
    else
      u->BRR = (((uint16_t)2) << 4) | 10;
 8001b8c:	222a      	movne	r2, #42	; 0x2a
 8001b8e:	811a      	strh	r2, [r3, #8]
 8001b90:	4770      	bx	lr
void dmxl_set_usart_baud(const uint_fast8_t dmxl_idx, int baud)
{
  USART_TypeDef *u = g_dmxl_ports[dmxl_idx].uart;
  if (baud == 57600)
  {
    if (u == USART6)
 8001b92:	4a0c      	ldr	r2, [pc, #48]	; (8001bc4 <dmxl_set_usart_baud+0x64>)
 8001b94:	4293      	cmp	r3, r2
      u->BRR = (((uint16_t)91) << 4) | 2;
 8001b96:	bf0c      	ite	eq
 8001b98:	f240 52b2 	movweq	r2, #1458	; 0x5b2
    else
      u->BRR = (((uint16_t)45) << 4) | 9;
 8001b9c:	f240 22d9 	movwne	r2, #729	; 0x2d9
 8001ba0:	811a      	strh	r2, [r3, #8]
 8001ba2:	4770      	bx	lr
  }
  else if (baud == 250000)
  {
    if (u == USART6)
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <dmxl_set_usart_baud+0x64>)
 8001ba6:	4293      	cmp	r3, r2
      u->BRR = (((uint16_t)21) << 4);
 8001ba8:	bf0c      	ite	eq
 8001baa:	f44f 72a8 	moveq.w	r2, #336	; 0x150
    else
      u->BRR = (((uint16_t)10) << 4) | 8;
 8001bae:	22a8      	movne	r2, #168	; 0xa8
 8001bb0:	811a      	strh	r2, [r3, #8]
 8001bb2:	4770      	bx	lr
 8001bb4:	2000000c 	.word	0x2000000c
 8001bb8:	0003d090 	.word	0x0003d090
 8001bbc:	000f4240 	.word	0x000f4240
 8001bc0:	0800a83c 	.word	0x0800a83c
 8001bc4:	40011400 	.word	0x40011400

08001bc8 <dmxl_init>:
  else
    printf("ahhh unhandled baud rate: %d\r\n", baud);
}

void dmxl_init()
{
 8001bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  printf("dmxl_init()\r\n");
 8001bcc:	4861      	ldr	r0, [pc, #388]	; (8001d54 <dmxl_init+0x18c>)
 8001bce:	4c62      	ldr	r4, [pc, #392]	; (8001d58 <dmxl_init+0x190>)
  else
    printf("ahhh unhandled baud rate: %d\r\n", baud);
}

void dmxl_init()
{
 8001bd0:	b085      	sub	sp, #20
  printf("dmxl_init()\r\n");
 8001bd2:	f002 f859 	bl	8003c88 <puts>
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 8001bd6:	4b61      	ldr	r3, [pc, #388]	; (8001d5c <dmxl_init+0x194>)
 8001bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bda:	f042 020d 	orr.w	r2, r2, #13
 8001bde:	631a      	str	r2, [r3, #48]	; 0x30
                  RCC_AHB1ENR_GPIOCEN |
                  RCC_AHB1ENR_GPIODEN;
  RCC->APB1ENR |= RCC_APB1ENR_USART3EN |
 8001be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001be2:	f442 12e0 	orr.w	r2, r2, #1835008	; 0x1c0000
 8001be6:	641a      	str	r2, [r3, #64]	; 0x40
                  RCC_APB1ENR_UART4EN  |
                  RCC_APB1ENR_UART5EN;
  RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8001be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bea:	f042 0220 	orr.w	r2, r2, #32
 8001bee:	645a      	str	r2, [r3, #68]	; 0x44

  for (int i = 0; i < NUM_DMXL; i++)
 8001bf0:	2500      	movs	r5, #0
 8001bf2:	f10d 070b 	add.w	r7, sp, #11
 8001bf6:	ae03      	add	r6, sp, #12
  {
    dmxl_port_t *dp = &g_dmxl_ports[i];
    dp->tx_gpio->MODER |= (uint32_t)2 << (dp->tx_pin * 2); // set as AF
 8001bf8:	f04f 0802 	mov.w	r8, #2
 8001bfc:	7922      	ldrb	r2, [r4, #4]
 8001bfe:	f854 cc04 	ldr.w	ip, [r4, #-4]
 8001c02:	0052      	lsls	r2, r2, #1
 8001c04:	f8dc 3000 	ldr.w	r3, [ip]
 8001c08:	fa08 f202 	lsl.w	r2, r8, r2
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	f8cc 3000 	str.w	r3, [ip]
    dp->rx_gpio->MODER |= (uint32_t)2 << (dp->rx_pin * 2); // set as AF
 8001c12:	f894 e005 	ldrb.w	lr, [r4, #5]
 8001c16:	6822      	ldr	r2, [r4, #0]
 8001c18:	fa0f f08e 	sxth.w	r0, lr
 8001c1c:	6813      	ldr	r3, [r2, #0]
 8001c1e:	0041      	lsls	r1, r0, #1
 8001c20:	fa08 f101 	lsl.w	r1, r8, r1
 8001c24:	430b      	orrs	r3, r1
 8001c26:	6013      	str	r3, [r2, #0]

    if (dp->tx_pin >= 8)
 8001c28:	7923      	ldrb	r3, [r4, #4]
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
 8001c2a:	f1a3 0108 	sub.w	r1, r3, #8
  {
    dmxl_port_t *dp = &g_dmxl_ports[i];
    dp->tx_gpio->MODER |= (uint32_t)2 << (dp->tx_pin * 2); // set as AF
    dp->rx_gpio->MODER |= (uint32_t)2 << (dp->rx_pin * 2); // set as AF

    if (dp->tx_pin >= 8)
 8001c2e:	2b07      	cmp	r3, #7
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
 8001c30:	ea4f 0981 	mov.w	r9, r1, lsl #2
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);
 8001c34:	ea4f 0383 	mov.w	r3, r3, lsl #2
  {
    dmxl_port_t *dp = &g_dmxl_ports[i];
    dp->tx_gpio->MODER |= (uint32_t)2 << (dp->tx_pin * 2); // set as AF
    dp->rx_gpio->MODER |= (uint32_t)2 << (dp->rx_pin * 2); // set as AF

    if (dp->tx_pin >= 8)
 8001c38:	d97f      	bls.n	8001d3a <dmxl_init+0x172>
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
 8001c3a:	79a1      	ldrb	r1, [r4, #6]
 8001c3c:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8001c40:	fa01 f909 	lsl.w	r9, r1, r9
 8001c44:	ea49 0303 	orr.w	r3, r9, r3
 8001c48:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);

    if (dp->rx_pin >= 8)
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
 8001c4c:	f1ae 0308 	sub.w	r3, lr, #8
 8001c50:	009b      	lsls	r3, r3, #2
    if (dp->tx_pin >= 8)
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);

    if (dp->rx_pin >= 8)
 8001c52:	f1be 0f07 	cmp.w	lr, #7
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
 8001c56:	fa01 fc03 	lsl.w	ip, r1, r3
    else
      dp->rx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->rx_pin * 4);
 8001c5a:	ea4f 0080 	mov.w	r0, r0, lsl #2
    if (dp->tx_pin >= 8)
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);

    if (dp->rx_pin >= 8)
 8001c5e:	d967      	bls.n	8001d30 <dmxl_init+0x168>
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
 8001c60:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001c62:	ea4c 0303 	orr.w	r3, ip, r3
 8001c66:	6253      	str	r3, [r2, #36]	; 0x24
    else
      dp->rx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->rx_pin * 4);

    USART_TypeDef *u = dp->uart;
 8001c68:	f8d4 9008 	ldr.w	r9, [r4, #8]
    u->CR1 &= ~USART_CR1_UE; // make sure it's off while we configure it
    u->CR1 |=  USART_CR1_RE; // don't enable the transmitter yet

    dmxl_set_usart_baud(i, 250000);
 8001c6c:	493c      	ldr	r1, [pc, #240]	; (8001d60 <dmxl_init+0x198>)
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
    else
      dp->rx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->rx_pin * 4);

    USART_TypeDef *u = dp->uart;
    u->CR1 &= ~USART_CR1_UE; // make sure it's off while we configure it
 8001c6e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8001c72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c76:	041b      	lsls	r3, r3, #16
 8001c78:	0c1b      	lsrs	r3, r3, #16
 8001c7a:	f8a9 300c 	strh.w	r3, [r9, #12]
    u->CR1 |=  USART_CR1_RE; // don't enable the transmitter yet
 8001c7e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	f043 0304 	orr.w	r3, r3, #4
 8001c88:	f8a9 300c 	strh.w	r3, [r9, #12]

    dmxl_set_usart_baud(i, 250000);
 8001c8c:	4628      	mov	r0, r5
 8001c8e:	f7ff ff67 	bl	8001b60 <dmxl_set_usart_baud>
    if (u == USART6) // running on APB2 = 84 MHz
      u->BRR = (((uint16_t)5) << 4) | 4; // 5.25 mantissa = 5, fraction =  4
    else // running on APB1 = 42 MHz
      u->BRR = (((uint16_t)2) << 4) | 10;// 2.625 mantissa = 2, fraction = 10
    */
    u->CR1 |=  USART_CR1_UE | USART_CR1_RXNEIE;
 8001c92:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c9c:	f043 0320 	orr.w	r3, r3, #32
 8001ca0:	f8a9 300c 	strh.w	r3, [r9, #12]

    delay_us(10);
 8001ca4:	200a      	movs	r0, #10
 8001ca6:	f001 fdcb 	bl	8003840 <delay_us>
    dmxl_set_res_divider(i, DMXL_DEFAULT_ID, 4);
 8001caa:	fa5f f985 	uxtb.w	r9, r5
}

void dmxl_set_res_divider(const uint8_t port_idx, const uint8_t dmxl_id,
                          const uint8_t res_divider)
{
  dmxl_write_data(port_idx, dmxl_id, 1, 22, &res_divider);
 8001cae:	2101      	movs	r1, #1
 8001cb0:	460a      	mov	r2, r1
 8001cb2:	f04f 0e04 	mov.w	lr, #4
 8001cb6:	2316      	movs	r3, #22
 8001cb8:	4648      	mov	r0, r9
 8001cba:	9700      	str	r7, [sp, #0]
 8001cbc:	f88d e00b 	strb.w	lr, [sp, #11]
 8001cc0:	f7ff fe90 	bl	80019e4 <dmxl_write_data>
    */
    u->CR1 |=  USART_CR1_UE | USART_CR1_RXNEIE;

    delay_us(10);
    dmxl_set_res_divider(i, DMXL_DEFAULT_ID, 4);
    delay_us(10);
 8001cc4:	200a      	movs	r0, #10
 8001cc6:	f001 fdbb 	bl	8003840 <delay_us>
  RCC->APB1ENR |= RCC_APB1ENR_USART3EN |
                  RCC_APB1ENR_UART4EN  |
                  RCC_APB1ENR_UART5EN;
  RCC->APB2ENR |= RCC_APB2ENR_USART6EN;

  for (int i = 0; i < NUM_DMXL; i++)
 8001cca:	3501      	adds	r5, #1

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
 8001ccc:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
  d[1] = (offset >> 8) & 0xff;
 8001cd0:	f04f 0e32 	mov.w	lr, #50	; 0x32
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 8001cd4:	4648      	mov	r0, r9
 8001cd6:	9600      	str	r6, [sp, #0]
 8001cd8:	2101      	movs	r1, #1
 8001cda:	2202      	movs	r2, #2
 8001cdc:	2314      	movs	r3, #20

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
 8001cde:	f88d c00c 	strb.w	ip, [sp, #12]
  d[1] = (offset >> 8) & 0xff;
 8001ce2:	f88d e00d 	strb.w	lr, [sp, #13]
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 8001ce6:	f7ff fe7d 	bl	80019e4 <dmxl_write_data>
  RCC->APB1ENR |= RCC_APB1ENR_USART3EN |
                  RCC_APB1ENR_UART4EN  |
                  RCC_APB1ENR_UART5EN;
  RCC->APB2ENR |= RCC_APB2ENR_USART6EN;

  for (int i = 0; i < NUM_DMXL; i++)
 8001cea:	2d04      	cmp	r5, #4
 8001cec:	f104 0418 	add.w	r4, r4, #24
 8001cf0:	d184      	bne.n	8001bfc <dmxl_init+0x34>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <dmxl_init+0x19c>)
  NVIC_EnableIRQ(UART5_IRQn);
  NVIC_EnableIRQ(USART6_IRQn);

  //GPIOD->MODER |= (1 << (8*2)); // | (1 << 9);
  // turn on the 3.3v <-> 5v translator chip now
  GPIOA->MODER |= 1 << (PORTA_DMXL_BUF_EN * 2);
 8001cf4:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <dmxl_init+0x1a0>)
 8001cf6:	2120      	movs	r1, #32
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001cf8:	2080      	movs	r0, #128	; 0x80
 8001cfa:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
 8001cfe:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001d02:	f883 1327 	strb.w	r1, [r3, #807]	; 0x327
 8001d06:	f883 1334 	strb.w	r1, [r3, #820]	; 0x334
 8001d0a:	f883 1335 	strb.w	r1, [r3, #821]	; 0x335
 8001d0e:	f883 1347 	strb.w	r1, [r3, #839]	; 0x347
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001d12:	6058      	str	r0, [r3, #4]
 8001d14:	605d      	str	r5, [r3, #4]
 8001d16:	605c      	str	r4, [r3, #4]
 8001d18:	6098      	str	r0, [r3, #8]
 8001d1a:	6813      	ldr	r3, [r2, #0]
 8001d1c:	432b      	orrs	r3, r5
 8001d1e:	6013      	str	r3, [r2, #0]
  GPIOA->BSRRL |= 1 << PORTA_DMXL_BUF_EN;
 8001d20:	8b13      	ldrh	r3, [r2, #24]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d28:	8313      	strh	r3, [r2, #24]
}
 8001d2a:	b005      	add	sp, #20
 8001d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);

    if (dp->rx_pin >= 8)
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
    else
      dp->rx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->rx_pin * 4);
 8001d30:	6a13      	ldr	r3, [r2, #32]
 8001d32:	4081      	lsls	r1, r0
 8001d34:	4319      	orrs	r1, r3
 8001d36:	6211      	str	r1, [r2, #32]
 8001d38:	e796      	b.n	8001c68 <dmxl_init+0xa0>
    dp->rx_gpio->MODER |= (uint32_t)2 << (dp->rx_pin * 2); // set as AF

    if (dp->tx_pin >= 8)
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);
 8001d3a:	f854 9c04 	ldr.w	r9, [r4, #-4]
 8001d3e:	79a1      	ldrb	r1, [r4, #6]
 8001d40:	f8d9 c020 	ldr.w	ip, [r9, #32]
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	ea43 030c 	orr.w	r3, r3, ip
 8001d4c:	f8c9 3020 	str.w	r3, [r9, #32]
 8001d50:	e77c      	b.n	8001c4c <dmxl_init+0x84>
 8001d52:	bf00      	nop
 8001d54:	0800a85c 	.word	0x0800a85c
 8001d58:	20000010 	.word	0x20000010
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	0003d090 	.word	0x0003d090
 8001d64:	e000e100 	.word	0xe000e100
 8001d68:	40020000 	.word	0x40020000

08001d6c <dmxl_process_ring>:
  pkt[4] = data_len;
  dmxl_tx(port_idx, pkt, 5);
}

void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
 8001d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
           */
          switch (port->comms_state)
          {
            case DMXL_CS_POLL_STATE:
              g_state.dynamixel_angles[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
 8001d70:	4b73      	ldr	r3, [pc, #460]	; (8001f40 <dmxl_process_ring+0x1d4>)
 8001d72:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8001f58 <dmxl_process_ring+0x1ec>
 8001d76:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8001f5c <dmxl_process_ring+0x1f0>
void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
  const uint_fast8_t i = dmxl_id; // save typing...
  while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
  {
    const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 8001d7a:	ea4f 2800 	mov.w	r8, r0, lsl #8
           */
          switch (port->comms_state)
          {
            case DMXL_CS_POLL_STATE:
              g_state.dynamixel_angles[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
 8001d7e:	eb03 0908 	add.w	r9, r3, r8
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
              g_state.dynamixel_loads[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
              g_state.dynamixel_voltages[i]     = g_dmxl_rx_pkt[i][6];
 8001d82:	4b70      	ldr	r3, [pc, #448]	; (8001f44 <dmxl_process_ring+0x1d8>)
  pkt[4] = data_len;
  dmxl_tx(port_idx, pkt, 5);
}

void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
 8001d84:	b083      	sub	sp, #12
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
              g_state.dynamixel_loads[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
              g_state.dynamixel_voltages[i]     = g_dmxl_rx_pkt[i][6];
 8001d86:	4403      	add	r3, r0
  pkt[4] = data_len;
  dmxl_tx(port_idx, pkt, 5);
}

void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
 8001d88:	4606      	mov	r6, r0
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
              g_state.dynamixel_loads[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
              g_state.dynamixel_voltages[i]     = g_dmxl_rx_pkt[i][6];
 8001d8a:	9301      	str	r3, [sp, #4]
}

void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
  const uint_fast8_t i = dmxl_id; // save typing...
  while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
 8001d8c:	465f      	mov	r7, fp
 8001d8e:	f83b 2016 	ldrh.w	r2, [fp, r6, lsl #1]
 8001d92:	f83a 3016 	ldrh.w	r3, [sl, r6, lsl #1]
 8001d96:	b292      	uxth	r2, r2
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	f000 80bd 	beq.w	8001f1a <dmxl_process_ring+0x1ae>
  {
    const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 8001da0:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
 8001da4:	4a68      	ldr	r2, [pc, #416]	; (8001f48 <dmxl_process_ring+0x1dc>)
    //printf("dmxl %d received 0x%02x\r\n", i, b);
    if (++g_dmxl_ring_rpos[i] >= DMXL_RING_LEN)
      g_dmxl_ring_rpos[i] = 0; // wrap around
    dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
    switch (port->parser_state)
 8001da6:	4d69      	ldr	r5, [pc, #420]	; (8001f4c <dmxl_process_ring+0x1e0>)
void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
  const uint_fast8_t i = dmxl_id; // save typing...
  while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
  {
    const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 8001da8:	fa18 f383 	uxtah	r3, r8, r3
    //printf("dmxl %d received 0x%02x\r\n", i, b);
    if (++g_dmxl_ring_rpos[i] >= DMXL_RING_LEN)
      g_dmxl_ring_rpos[i] = 0; // wrap around
    dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
    switch (port->parser_state)
 8001dac:	0074      	lsls	r4, r6, #1
void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
  const uint_fast8_t i = dmxl_id; // save typing...
  while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
  {
    const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 8001dae:	5cd2      	ldrb	r2, [r2, r3]
    //printf("dmxl %d received 0x%02x\r\n", i, b);
    if (++g_dmxl_ring_rpos[i] >= DMXL_RING_LEN)
 8001db0:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
 8001db4:	3301      	adds	r3, #1
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	2bff      	cmp	r3, #255	; 0xff
 8001dba:	f827 3016 	strh.w	r3, [r7, r6, lsl #1]
      g_dmxl_ring_rpos[i] = 0; // wrap around
 8001dbe:	bf84      	itt	hi
 8001dc0:	2300      	movhi	r3, #0
 8001dc2:	f827 3016 	strhhi.w	r3, [r7, r6, lsl #1]
    dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
    switch (port->parser_state)
 8001dc6:	19a3      	adds	r3, r4, r6
 8001dc8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
  const uint_fast8_t i = dmxl_id; // save typing...
  while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
  {
    const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 8001dcc:	b2d2      	uxtb	r2, r2
    //printf("dmxl %d received 0x%02x\r\n", i, b);
    if (++g_dmxl_ring_rpos[i] >= DMXL_RING_LEN)
      g_dmxl_ring_rpos[i] = 0; // wrap around
    dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
    switch (port->parser_state)
 8001dce:	7c5b      	ldrb	r3, [r3, #17]
 8001dd0:	2b06      	cmp	r3, #6
 8001dd2:	f200 809b 	bhi.w	8001f0c <dmxl_process_ring+0x1a0>
 8001dd6:	e8df f003 	tbb	[pc, r3]
 8001dda:	7690      	.short	0x7690
 8001ddc:	47657e89 	.word	0x47657e89
 8001de0:	04          	.byte	0x04
 8001de1:	00          	.byte	0x00
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
          port->parser_state = DMXL_PS_CHECKSUM;
        port->rx_pkt_writepos++;
        break;
      case DMXL_PS_CHECKSUM:
        if (((uint8_t)(~port->rx_checksum)) == b)
 8001de2:	19a3      	adds	r3, r4, r6
 8001de4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001de8:	7d19      	ldrb	r1, [r3, #20]
 8001dea:	43c9      	mvns	r1, r1
 8001dec:	b2c9      	uxtb	r1, r1
 8001dee:	4291      	cmp	r1, r2
 8001df0:	f040 8096 	bne.w	8001f20 <dmxl_process_ring+0x1b4>
          /*
             printf("checksum passed. received %d bytes\r\n", port->rx_pkt_len);
             for (int j = 0; j < port->rx_pkt_len; j++)
             printf("  0x%02x\r\n", g_dmxl_rx_pkt[i][j]);
           */
          switch (port->comms_state)
 8001df4:	7c1b      	ldrb	r3, [r3, #16]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d12f      	bne.n	8001e5a <dmxl_process_ring+0xee>
          {
            case DMXL_CS_POLL_STATE:
              g_state.dynamixel_angles[i] =
 8001dfa:	4852      	ldr	r0, [pc, #328]	; (8001f44 <dmxl_process_ring+0x1d8>)
                (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
 8001dfc:	f899 1001 	ldrb.w	r1, [r9, #1]
                (((uint16_t)g_dmxl_rx_pkt[i][0])     ) ;
 8001e00:	f899 2000 	ldrb.w	r2, [r9]
             printf("  0x%02x\r\n", g_dmxl_rx_pkt[i][j]);
           */
          switch (port->comms_state)
          {
            case DMXL_CS_POLL_STATE:
              g_state.dynamixel_angles[i] =
 8001e04:	f106 0354 	add.w	r3, r6, #84	; 0x54
 8001e08:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001e0c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e10:	8859      	ldrh	r1, [r3, #2]
 8001e12:	805a      	strh	r2, [r3, #2]
                (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][0])     ) ;
              //printf("dmxl %d angle = %d\r\n", (int)i, (int)g_state.dynamixel_angles[i]);
              g_state.dynamixel_speeds[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
 8001e14:	f899 1003 	ldrb.w	r1, [r9, #3]
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
 8001e18:	f899 2002 	ldrb.w	r2, [r9, #2]
            case DMXL_CS_POLL_STATE:
              g_state.dynamixel_angles[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][0])     ) ;
              //printf("dmxl %d angle = %d\r\n", (int)i, (int)g_state.dynamixel_angles[i]);
              g_state.dynamixel_speeds[i] =
 8001e1c:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8001e20:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001e24:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e28:	8859      	ldrh	r1, [r3, #2]
 8001e2a:	805a      	strh	r2, [r3, #2]
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
              g_state.dynamixel_loads[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
 8001e2c:	f899 1005 	ldrb.w	r1, [r9, #5]
                (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
 8001e30:	f899 2004 	ldrb.w	r2, [r9, #4]
                (((uint16_t)g_dmxl_rx_pkt[i][0])     ) ;
              //printf("dmxl %d angle = %d\r\n", (int)i, (int)g_state.dynamixel_angles[i]);
              g_state.dynamixel_speeds[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
              g_state.dynamixel_loads[i] =
 8001e34:	f106 035c 	add.w	r3, r6, #92	; 0x5c
 8001e38:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001e3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e40:	8859      	ldrh	r1, [r3, #2]
 8001e42:	805a      	strh	r2, [r3, #2]
                (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
              g_state.dynamixel_voltages[i]     = g_dmxl_rx_pkt[i][6];
 8001e44:	f899 3006 	ldrb.w	r3, [r9, #6]
 8001e48:	9901      	ldr	r1, [sp, #4]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f881 30c2 	strb.w	r3, [r1, #194]	; 0xc2
              g_state.dynamixel_temperatures[i] = g_dmxl_rx_pkt[i][7];
 8001e50:	f899 3007 	ldrb.w	r3, [r9, #7]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	f881 30c6 	strb.w	r3, [r1, #198]	; 0xc6
          }
        }
        else
          printf("checksum failed: local 0x%02x != received 0x%02x\r\n",
              (uint8_t)~port->rx_checksum, b);
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8001e5a:	4434      	add	r4, r6
 8001e5c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8001e60:	2300      	movs	r3, #0
 8001e62:	746b      	strb	r3, [r5, #17]
        port->comms_state = DMXL_CS_IDLE;
 8001e64:	742b      	strb	r3, [r5, #16]
        break;
 8001e66:	e792      	b.n	8001d8e <dmxl_process_ring+0x22>
          port->parser_state = DMXL_PS_PARAMETER;
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
 8001e68:	19a3      	adds	r3, r4, r6
 8001e6a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
          port->parser_state = DMXL_PS_CHECKSUM;
        port->rx_pkt_writepos++;
 8001e6e:	4434      	add	r4, r6
          port->parser_state = DMXL_PS_PARAMETER;
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
 8001e70:	f893 e014 	ldrb.w	lr, [r3, #20]
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
 8001e74:	7cd9      	ldrb	r1, [r3, #19]
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
 8001e76:	7c98      	ldrb	r0, [r3, #18]
          port->parser_state = DMXL_PS_PARAMETER;
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
 8001e78:	4496      	add	lr, r2
 8001e7a:	f883 e014 	strb.w	lr, [r3, #20]
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
 8001e7e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
 8001e82:	eb08 0e01 	add.w	lr, r8, r1
 8001e86:	482e      	ldr	r0, [pc, #184]	; (8001f40 <dmxl_process_ring+0x1d4>)
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
 8001e88:	4561      	cmp	r1, ip
          port->parser_state = DMXL_PS_PARAMETER;
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
 8001e8a:	f103 0310 	add.w	r3, r3, #16
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
          port->parser_state = DMXL_PS_CHECKSUM;
        port->rx_pkt_writepos++;
 8001e8e:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
 8001e92:	f800 200e 	strb.w	r2, [r0, lr]
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
          port->parser_state = DMXL_PS_CHECKSUM;
        port->rx_pkt_writepos++;
 8001e96:	f101 0101 	add.w	r1, r1, #1
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
          port->parser_state = DMXL_PS_CHECKSUM;
 8001e9a:	bf04      	itt	eq
 8001e9c:	2206      	moveq	r2, #6
 8001e9e:	705a      	strbeq	r2, [r3, #1]
        port->rx_pkt_writepos++;
 8001ea0:	74e9      	strb	r1, [r5, #19]
        break;
 8001ea2:	e774      	b.n	8001d8e <dmxl_process_ring+0x22>
        port->rx_checksum += b;
        port->parser_state = DMXL_PS_ERROR;
        break;
      case DMXL_PS_ERROR:
        g_state.dynamixel_error_status[i] = b; // save for global state
        port->rx_checksum += b;
 8001ea4:	4434      	add	r4, r6
 8001ea6:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8001eaa:	3510      	adds	r5, #16
        port->rx_pkt_len = b - 2;
        port->rx_checksum += b;
        port->parser_state = DMXL_PS_ERROR;
        break;
      case DMXL_PS_ERROR:
        g_state.dynamixel_error_status[i] = b; // save for global state
 8001eac:	9c01      	ldr	r4, [sp, #4]
        port->rx_checksum += b;
 8001eae:	792b      	ldrb	r3, [r5, #4]
        port->rx_pkt_writepos = 0;
        if (port->rx_pkt_len)
 8001eb0:	78a9      	ldrb	r1, [r5, #2]
        port->rx_pkt_len = b - 2;
        port->rx_checksum += b;
        port->parser_state = DMXL_PS_ERROR;
        break;
      case DMXL_PS_ERROR:
        g_state.dynamixel_error_status[i] = b; // save for global state
 8001eb2:	f884 20a6 	strb.w	r2, [r4, #166]	; 0xa6
        port->rx_checksum += b;
        port->rx_pkt_writepos = 0;
 8001eb6:	2000      	movs	r0, #0
        port->rx_checksum += b;
        port->parser_state = DMXL_PS_ERROR;
        break;
      case DMXL_PS_ERROR:
        g_state.dynamixel_error_status[i] = b; // save for global state
        port->rx_checksum += b;
 8001eb8:	441a      	add	r2, r3
 8001eba:	712a      	strb	r2, [r5, #4]
        port->rx_pkt_writepos = 0;
 8001ebc:	70e8      	strb	r0, [r5, #3]
        if (port->rx_pkt_len)
 8001ebe:	b3c9      	cbz	r1, 8001f34 <dmxl_process_ring+0x1c8>
          port->parser_state = DMXL_PS_PARAMETER;
 8001ec0:	2305      	movs	r3, #5
 8001ec2:	706b      	strb	r3, [r5, #1]
 8001ec4:	e763      	b.n	8001d8e <dmxl_process_ring+0x22>
        if (b == 0xff)
          port->parser_state = DMXL_PS_PREAMBLE_1;
        break;
      case DMXL_PS_PREAMBLE_1:
        if (b == 0xff)
          port->parser_state = DMXL_PS_ID;
 8001ec6:	4434      	add	r4, r6
      case DMXL_PS_PREAMBLE_0:
        if (b == 0xff)
          port->parser_state = DMXL_PS_PREAMBLE_1;
        break;
      case DMXL_PS_PREAMBLE_1:
        if (b == 0xff)
 8001ec8:	2aff      	cmp	r2, #255	; 0xff
          port->parser_state = DMXL_PS_ID;
 8001eca:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
      case DMXL_PS_PREAMBLE_0:
        if (b == 0xff)
          port->parser_state = DMXL_PS_PREAMBLE_1;
        break;
      case DMXL_PS_PREAMBLE_1:
        if (b == 0xff)
 8001ece:	d034      	beq.n	8001f3a <dmxl_process_ring+0x1ce>
        port->parser_state = DMXL_PS_PREAMBLE_0;
        port->comms_state = DMXL_CS_IDLE;
        break;
      default:
        printf("woah there partner. unexpected dmxl rx state!\r\n");
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	746b      	strb	r3, [r5, #17]
        break;
 8001ed4:	e75b      	b.n	8001d8e <dmxl_process_ring+0x22>
      case DMXL_PS_ID:
        port->rx_checksum = b;
        port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
        break;
      case DMXL_PS_LENGTH:
        port->rx_pkt_len = b - 2;
 8001ed6:	4434      	add	r4, r6
 8001ed8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8001edc:	1e91      	subs	r1, r2, #2
        port->rx_checksum += b;
 8001ede:	7d2b      	ldrb	r3, [r5, #20]
      case DMXL_PS_ID:
        port->rx_checksum = b;
        port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
        break;
      case DMXL_PS_LENGTH:
        port->rx_pkt_len = b - 2;
 8001ee0:	74a9      	strb	r1, [r5, #18]
        port->rx_checksum += b;
 8001ee2:	441a      	add	r2, r3
        port->parser_state = DMXL_PS_ERROR;
 8001ee4:	2304      	movs	r3, #4
        port->rx_checksum = b;
        port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
        break;
      case DMXL_PS_LENGTH:
        port->rx_pkt_len = b - 2;
        port->rx_checksum += b;
 8001ee6:	752a      	strb	r2, [r5, #20]
        port->parser_state = DMXL_PS_ERROR;
 8001ee8:	746b      	strb	r3, [r5, #17]
        break;
 8001eea:	e750      	b.n	8001d8e <dmxl_process_ring+0x22>
          port->parser_state = DMXL_PS_ID;
        else
          port->parser_state = DMXL_PS_PREAMBLE_0;
        break;
      case DMXL_PS_ID:
        port->rx_checksum = b;
 8001eec:	4434      	add	r4, r6
 8001eee:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
        port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
 8001ef2:	2303      	movs	r3, #3
          port->parser_state = DMXL_PS_ID;
        else
          port->parser_state = DMXL_PS_PREAMBLE_0;
        break;
      case DMXL_PS_ID:
        port->rx_checksum = b;
 8001ef4:	752a      	strb	r2, [r5, #20]
        port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
 8001ef6:	746b      	strb	r3, [r5, #17]
        break;
 8001ef8:	e749      	b.n	8001d8e <dmxl_process_ring+0x22>
      g_dmxl_ring_rpos[i] = 0; // wrap around
    dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
    switch (port->parser_state)
    {
      case DMXL_PS_PREAMBLE_0:
        if (b == 0xff)
 8001efa:	2aff      	cmp	r2, #255	; 0xff
 8001efc:	f47f af47 	bne.w	8001d8e <dmxl_process_ring+0x22>
          port->parser_state = DMXL_PS_PREAMBLE_1;
 8001f00:	4434      	add	r4, r6
 8001f02:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8001f06:	2301      	movs	r3, #1
 8001f08:	746b      	strb	r3, [r5, #17]
 8001f0a:	e740      	b.n	8001d8e <dmxl_process_ring+0x22>
              (uint8_t)~port->rx_checksum, b);
        port->parser_state = DMXL_PS_PREAMBLE_0;
        port->comms_state = DMXL_CS_IDLE;
        break;
      default:
        printf("woah there partner. unexpected dmxl rx state!\r\n");
 8001f0c:	4810      	ldr	r0, [pc, #64]	; (8001f50 <dmxl_process_ring+0x1e4>)
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8001f0e:	4434      	add	r4, r6
              (uint8_t)~port->rx_checksum, b);
        port->parser_state = DMXL_PS_PREAMBLE_0;
        port->comms_state = DMXL_CS_IDLE;
        break;
      default:
        printf("woah there partner. unexpected dmxl rx state!\r\n");
 8001f10:	f001 feba 	bl	8003c88 <puts>
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8001f14:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8001f18:	e7da      	b.n	8001ed0 <dmxl_process_ring+0x164>
        break;
    }
  }
}
 8001f1a:	b003      	add	sp, #12
 8001f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          }
        }
        else
          printf("checksum failed: local 0x%02x != received 0x%02x\r\n",
              (uint8_t)~port->rx_checksum, b);
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8001f20:	4434      	add	r4, r6
 8001f22:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
            default:
              break;
          }
        }
        else
          printf("checksum failed: local 0x%02x != received 0x%02x\r\n",
 8001f26:	480b      	ldr	r0, [pc, #44]	; (8001f54 <dmxl_process_ring+0x1e8>)
 8001f28:	f001 fe68 	bl	8003bfc <printf>
              (uint8_t)~port->rx_checksum, b);
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	746b      	strb	r3, [r5, #17]
        port->comms_state = DMXL_CS_IDLE;
 8001f30:	742b      	strb	r3, [r5, #16]
 8001f32:	e72c      	b.n	8001d8e <dmxl_process_ring+0x22>
        port->rx_checksum += b;
        port->rx_pkt_writepos = 0;
        if (port->rx_pkt_len)
          port->parser_state = DMXL_PS_PARAMETER;
        else
          port->parser_state = DMXL_PS_CHECKSUM;
 8001f34:	2306      	movs	r3, #6
 8001f36:	706b      	strb	r3, [r5, #1]
 8001f38:	e729      	b.n	8001d8e <dmxl_process_ring+0x22>
        if (b == 0xff)
          port->parser_state = DMXL_PS_PREAMBLE_1;
        break;
      case DMXL_PS_PREAMBLE_1:
        if (b == 0xff)
          port->parser_state = DMXL_PS_ID;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	746b      	strb	r3, [r5, #17]
 8001f3e:	e726      	b.n	8001d8e <dmxl_process_ring+0x22>
 8001f40:	2000f7dc 	.word	0x2000f7dc
 8001f44:	2001058c 	.word	0x2001058c
 8001f48:	2000fbe4 	.word	0x2000fbe4
 8001f4c:	2000000c 	.word	0x2000000c
 8001f50:	0800a8a0 	.word	0x0800a8a0
 8001f54:	0800a86c 	.word	0x0800a86c
 8001f58:	2000fbdc 	.word	0x2000fbdc
 8001f5c:	2000f38c 	.word	0x2000f38c

08001f60 <dmxl_set_status_return_levels>:
  GPIOA->MODER |= 1 << (PORTA_DMXL_BUF_EN * 2);
  GPIOA->BSRRL |= 1 << PORTA_DMXL_BUF_EN;
}

void dmxl_set_status_return_levels()
{
 8001f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f64:	4c26      	ldr	r4, [pc, #152]	; (8002000 <dmxl_set_status_return_levels+0xa0>)
    while (SYSTIME - t_start < 10000)
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_POLL_DEBRIS)
      {
        status_return_level = g_dmxl_rx_pkt[i][0];
 8001f66:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800200c <dmxl_set_status_return_levels+0xac>
  GPIOA->MODER |= 1 << (PORTA_DMXL_BUF_EN * 2);
  GPIOA->BSRRL |= 1 << PORTA_DMXL_BUF_EN;
}

void dmxl_set_status_return_levels()
{
 8001f6a:	b085      	sub	sp, #20
  // see what the Status Return Level is. If it's not 1, set it to one
  for (int i = 0; i < NUM_DMXL; i++)
 8001f6c:	2700      	movs	r7, #0
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
    volatile uint32_t t_start = SYSTIME;
 8001f6e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
{
  // see what the Status Return Level is. If it's not 1, set it to one
  for (int i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
 8001f72:	fa5f f887 	uxtb.w	r8, r7
void dmxl_set_status_return_levels()
{
  // see what the Status Return Level is. If it's not 1, set it to one
  for (int i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
 8001f76:	2303      	movs	r3, #3
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
 8001f78:	4640      	mov	r0, r8
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	2210      	movs	r2, #16
void dmxl_set_status_return_levels()
{
  // see what the Status Return Level is. If it's not 1, set it to one
  for (int i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
 8001f7e:	7423      	strb	r3, [r4, #16]
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
 8001f80:	f7ff fd52 	bl	8001a28 <dmxl_read_data.constprop.3>
    volatile uint32_t t_start = SYSTIME;
 8001f84:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001f86:	9303      	str	r3, [sp, #12]
    uint8_t status_return_level = 0xff;
    while (SYSTIME - t_start < 10000)
 8001f88:	f242 760f 	movw	r6, #9999	; 0x270f
 8001f8c:	e00d      	b.n	8001faa <dmxl_set_status_return_levels+0x4a>
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 8001f8e:	f7ff feed 	bl	8001d6c <dmxl_process_ring>
 8001f92:	2001      	movs	r0, #1
 8001f94:	f7ff feea 	bl	8001d6c <dmxl_process_ring>
 8001f98:	2002      	movs	r0, #2
 8001f9a:	f7ff fee7 	bl	8001d6c <dmxl_process_ring>
 8001f9e:	2003      	movs	r0, #3
 8001fa0:	f7ff fee4 	bl	8001d6c <dmxl_process_ring>
    volatile uint32_t t_start = SYSTIME;
    uint8_t status_return_level = 0xff;
    while (SYSTIME - t_start < 10000)
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_POLL_DEBRIS)
 8001fa4:	7c23      	ldrb	r3, [r4, #16]
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d112      	bne.n	8001fd0 <dmxl_set_status_return_levels+0x70>
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
    volatile uint32_t t_start = SYSTIME;
    uint8_t status_return_level = 0xff;
    while (SYSTIME - t_start < 10000)
 8001faa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001fac:	9a03      	ldr	r2, [sp, #12]
 8001fae:	1a9b      	subs	r3, r3, r2
 8001fb0:	42b3      	cmp	r3, r6
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 8001fb2:	f04f 0000 	mov.w	r0, #0
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
    volatile uint32_t t_start = SYSTIME;
    uint8_t status_return_level = 0xff;
    while (SYSTIME - t_start < 10000)
 8001fb6:	d9ea      	bls.n	8001f8e <dmxl_set_status_return_levels+0x2e>
        printf("dmxl %d status return level = %d\n", i, status_return_level);
        break;
      }
    }
    if (status_return_level == 0xff)
      printf("couldn't poll status return level for dmxl %d\r\n", i);
 8001fb8:	4812      	ldr	r0, [pc, #72]	; (8002004 <dmxl_set_status_return_levels+0xa4>)
 8001fba:	4639      	mov	r1, r7
 8001fbc:	f001 fe1e 	bl	8003bfc <printf>
}

void dmxl_set_status_return_levels()
{
  // see what the Status Return Level is. If it's not 1, set it to one
  for (int i = 0; i < NUM_DMXL; i++)
 8001fc0:	3701      	adds	r7, #1
 8001fc2:	2f04      	cmp	r7, #4
 8001fc4:	f104 0418 	add.w	r4, r4, #24
 8001fc8:	d1d3      	bne.n	8001f72 <dmxl_set_status_return_levels+0x12>
      // set it to 2
      uint8_t level = 1; // only respond to READ
      dmxl_write_data(i, DMXL_DEFAULT_ID, 1, 0x10, &level);
    }
  }
}
 8001fca:	b005      	add	sp, #20
 8001fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (SYSTIME - t_start < 10000)
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_POLL_DEBRIS)
      {
        status_return_level = g_dmxl_rx_pkt[i][0];
 8001fd0:	023b      	lsls	r3, r7, #8
        printf("dmxl %d status return level = %d\n", i, status_return_level);
 8001fd2:	480d      	ldr	r0, [pc, #52]	; (8002008 <dmxl_set_status_return_levels+0xa8>)
    while (SYSTIME - t_start < 10000)
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_POLL_DEBRIS)
      {
        status_return_level = g_dmxl_rx_pkt[i][0];
 8001fd4:	f819 6003 	ldrb.w	r6, [r9, r3]
 8001fd8:	b2f6      	uxtb	r6, r6
        printf("dmxl %d status return level = %d\n", i, status_return_level);
 8001fda:	4632      	mov	r2, r6
 8001fdc:	4639      	mov	r1, r7
 8001fde:	f001 fe0d 	bl	8003bfc <printf>
        break;
      }
    }
    if (status_return_level == 0xff)
 8001fe2:	2eff      	cmp	r6, #255	; 0xff
 8001fe4:	d0e8      	beq.n	8001fb8 <dmxl_set_status_return_levels+0x58>
      printf("couldn't poll status return level for dmxl %d\r\n", i);
    else if (status_return_level != 1)
 8001fe6:	2e01      	cmp	r6, #1
 8001fe8:	d0ea      	beq.n	8001fc0 <dmxl_set_status_return_levels+0x60>
    {
      // set it to 2
      uint8_t level = 1; // only respond to READ
 8001fea:	ab04      	add	r3, sp, #16
 8001fec:	2101      	movs	r1, #1
 8001fee:	f803 1d05 	strb.w	r1, [r3, #-5]!
      dmxl_write_data(i, DMXL_DEFAULT_ID, 1, 0x10, &level);
 8001ff2:	4640      	mov	r0, r8
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	460a      	mov	r2, r1
 8001ff8:	2310      	movs	r3, #16
 8001ffa:	f7ff fcf3 	bl	80019e4 <dmxl_write_data>
 8001ffe:	e7df      	b.n	8001fc0 <dmxl_set_status_return_levels+0x60>
 8002000:	2000000c 	.word	0x2000000c
 8002004:	0800a8f4 	.word	0x0800a8f4
 8002008:	0800a8d0 	.word	0x0800a8d0
 800200c:	2000f7dc 	.word	0x2000f7dc

08002010 <dmxl_set_baud_rates>:
    }
  }
}

void dmxl_set_baud_rates()
{
 8002010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002014:	4c31      	ldr	r4, [pc, #196]	; (80020dc <dmxl_set_baud_rates+0xcc>)
 8002016:	b084      	sub	sp, #16
  for (int i = 0; i < NUM_DMXL; i++)
 8002018:	2700      	movs	r7, #0
  {
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
    volatile uint32_t t_start = SYSTIME;
 800201a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000

void dmxl_set_baud_rates()
{
  for (int i = 0; i < NUM_DMXL; i++)
  {
    dmxl_set_usart_baud(i, 250000);
 800201e:	4638      	mov	r0, r7
 8002020:	492f      	ldr	r1, [pc, #188]	; (80020e0 <dmxl_set_baud_rates+0xd0>)
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
 8002022:	fa5f f887 	uxtb.w	r8, r7

void dmxl_set_baud_rates()
{
  for (int i = 0; i < NUM_DMXL; i++)
  {
    dmxl_set_usart_baud(i, 250000);
 8002026:	f7ff fd9b 	bl	8001b60 <dmxl_set_usart_baud>

uint8_t dmxl_send_ping(const uint8_t port_idx, const uint8_t dmxl_id)
{
  uint8_t pkt[3];
  pkt[0] = dmxl_id;
  pkt[1] = 2; // packet length
 800202a:	2602      	movs	r6, #2
}

uint8_t dmxl_send_ping(const uint8_t port_idx, const uint8_t dmxl_id)
{
  uint8_t pkt[3];
  pkt[0] = dmxl_id;
 800202c:	2301      	movs	r3, #1
void dmxl_set_baud_rates()
{
  for (int i = 0; i < NUM_DMXL; i++)
  {
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
 800202e:	f04f 0e04 	mov.w	lr, #4
 8002032:	4640      	mov	r0, r8
 8002034:	a902      	add	r1, sp, #8
 8002036:	2203      	movs	r2, #3
}

uint8_t dmxl_send_ping(const uint8_t port_idx, const uint8_t dmxl_id)
{
  uint8_t pkt[3];
  pkt[0] = dmxl_id;
 8002038:	f88d 3008 	strb.w	r3, [sp, #8]
  pkt[1] = 2; // packet length
  pkt[2] = 1; // instruction: ping
 800203c:	f88d 300a 	strb.w	r3, [sp, #10]

uint8_t dmxl_send_ping(const uint8_t port_idx, const uint8_t dmxl_id)
{
  uint8_t pkt[3];
  pkt[0] = dmxl_id;
  pkt[1] = 2; // packet length
 8002040:	f88d 6009 	strb.w	r6, [sp, #9]
void dmxl_set_baud_rates()
{
  for (int i = 0; i < NUM_DMXL; i++)
  {
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
 8002044:	f884 e010 	strb.w	lr, [r4, #16]
 8002048:	f7ff fc86 	bl	8001958 <dmxl_tx.part.1>
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
    volatile uint32_t t_start = SYSTIME;
 800204c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800204e:	9303      	str	r3, [sp, #12]
    bool pong_received = false;
    while (SYSTIME - t_start < 10000 && !pong_received)
 8002050:	f242 760f 	movw	r6, #9999	; 0x270f
  {
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
    volatile uint32_t t_start = SYSTIME;
    bool pong_received = false;
 8002054:	2300      	movs	r3, #0
    while (SYSTIME - t_start < 10000 && !pong_received)
 8002056:	e010      	b.n	800207a <dmxl_set_baud_rates+0x6a>
 8002058:	2b00      	cmp	r3, #0
 800205a:	d139      	bne.n	80020d0 <dmxl_set_baud_rates+0xc0>
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 800205c:	f7ff fe86 	bl	8001d6c <dmxl_process_ring>
 8002060:	2001      	movs	r0, #1
 8002062:	f7ff fe83 	bl	8001d6c <dmxl_process_ring>
 8002066:	2002      	movs	r0, #2
 8002068:	f7ff fe80 	bl	8001d6c <dmxl_process_ring>
 800206c:	2003      	movs	r0, #3
 800206e:	f7ff fe7d 	bl	8001d6c <dmxl_process_ring>
    volatile uint32_t t_start = SYSTIME;
    bool pong_received = false;
    while (SYSTIME - t_start < 10000 && !pong_received)
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_PING)
 8002072:	7c23      	ldrb	r3, [r4, #16]
 8002074:	3b04      	subs	r3, #4
 8002076:	bf18      	it	ne
 8002078:	2301      	movne	r3, #1
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
    volatile uint32_t t_start = SYSTIME;
    bool pong_received = false;
    while (SYSTIME - t_start < 10000 && !pong_received)
 800207a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800207c:	9903      	ldr	r1, [sp, #12]
 800207e:	1a52      	subs	r2, r2, r1
 8002080:	42b2      	cmp	r2, r6
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 8002082:	4618      	mov	r0, r3
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
    volatile uint32_t t_start = SYSTIME;
    bool pong_received = false;
    while (SYSTIME - t_start < 10000 && !pong_received)
 8002084:	d9e8      	bls.n	8002058 <dmxl_set_baud_rates+0x48>
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_PING)
        pong_received = true;
    }
    if (pong_received)
 8002086:	bb1b      	cbnz	r3, 80020d0 <dmxl_set_baud_rates+0xc0>
      printf("received rx @ 250 kbit from dmxl %d\r\n", i);
      continue; // hooray. it's already at the target baud rate
    }
    else
    {
      printf("no rx received from dmxl %d... trying 57600 baud...\r\n", i);
 8002088:	4639      	mov	r1, r7
 800208a:	4816      	ldr	r0, [pc, #88]	; (80020e4 <dmxl_set_baud_rates+0xd4>)
 800208c:	f001 fdb6 	bl	8003bfc <printf>
      // this is the default out-of-the-box setup
      dmxl_set_usart_baud(i, 57600);
 8002090:	4638      	mov	r0, r7
 8002092:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8002096:	f7ff fd63 	bl	8001b60 <dmxl_set_usart_baud>
      uint8_t baud_code = 7; // the dynamixel code for 250000 baud
      dmxl_write_data(i, DMXL_DEFAULT_ID, 1, 0x04, &baud_code);
 800209a:	2101      	movs	r1, #1
 800209c:	ab02      	add	r3, sp, #8
 800209e:	460a      	mov	r2, r1
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	4640      	mov	r0, r8
 80020a4:	2304      	movs	r3, #4
    else
    {
      printf("no rx received from dmxl %d... trying 57600 baud...\r\n", i);
      // this is the default out-of-the-box setup
      dmxl_set_usart_baud(i, 57600);
      uint8_t baud_code = 7; // the dynamixel code for 250000 baud
 80020a6:	2607      	movs	r6, #7
 80020a8:	f88d 6008 	strb.w	r6, [sp, #8]
      dmxl_write_data(i, DMXL_DEFAULT_ID, 1, 0x04, &baud_code);
 80020ac:	f7ff fc9a 	bl	80019e4 <dmxl_write_data>
      delay_ms(500);
 80020b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020b4:	f001 fbd6 	bl	8003864 <delay_ms>
      dmxl_set_usart_baud(i, 250000);
 80020b8:	4638      	mov	r0, r7
 80020ba:	4909      	ldr	r1, [pc, #36]	; (80020e0 <dmxl_set_baud_rates+0xd0>)
 80020bc:	f7ff fd50 	bl	8001b60 <dmxl_set_usart_baud>
  }
}

void dmxl_set_baud_rates()
{
  for (int i = 0; i < NUM_DMXL; i++)
 80020c0:	3701      	adds	r7, #1
 80020c2:	2f04      	cmp	r7, #4
 80020c4:	f104 0418 	add.w	r4, r4, #24
 80020c8:	d1a9      	bne.n	800201e <dmxl_set_baud_rates+0xe>
      dmxl_write_data(i, DMXL_DEFAULT_ID, 1, 0x04, &baud_code);
      delay_ms(500);
      dmxl_set_usart_baud(i, 250000);
    }
  }
}
 80020ca:	b004      	add	sp, #16
 80020cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (g_dmxl_ports[i].comms_state != DMXL_CS_PING)
        pong_received = true;
    }
    if (pong_received)
    {
      printf("received rx @ 250 kbit from dmxl %d\r\n", i);
 80020d0:	4639      	mov	r1, r7
 80020d2:	4805      	ldr	r0, [pc, #20]	; (80020e8 <dmxl_set_baud_rates+0xd8>)
 80020d4:	f001 fd92 	bl	8003bfc <printf>
      continue; // hooray. it's already at the target baud rate
 80020d8:	e7f2      	b.n	80020c0 <dmxl_set_baud_rates+0xb0>
 80020da:	bf00      	nop
 80020dc:	2000000c 	.word	0x2000000c
 80020e0:	0003d090 	.word	0x0003d090
 80020e4:	0800a94c 	.word	0x0800a94c
 80020e8:	0800a924 	.word	0x0800a924

080020ec <dmxl_process_rings>:
    }
  }
}

void dmxl_process_rings()
{
 80020ec:	b508      	push	{r3, lr}
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 80020ee:	2000      	movs	r0, #0
 80020f0:	f7ff fe3c 	bl	8001d6c <dmxl_process_ring>
 80020f4:	2001      	movs	r0, #1
 80020f6:	f7ff fe39 	bl	8001d6c <dmxl_process_ring>
 80020fa:	2002      	movs	r0, #2
 80020fc:	f7ff fe36 	bl	8001d6c <dmxl_process_ring>
 8002100:	2003      	movs	r0, #3
}
 8002102:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 8002106:	f7ff be31 	b.w	8001d6c <dmxl_process_ring>
 800210a:	bf00      	nop

0800210c <dmxl_set_led>:
}

// See Dynamixel addresses here: http://support.robotis.com/en/product/dynamixel/mx_series/mx-28.htm
void dmxl_set_led(const uint8_t port_idx, const uint8_t dmxl_id,
                  const uint8_t enable)
{
 800210c:	b500      	push	{lr}
 800210e:	b085      	sub	sp, #20
  uint8_t d = enable ? 1 : 0;
 8002110:	3200      	adds	r2, #0
 8002112:	ab04      	add	r3, sp, #16
 8002114:	bf18      	it	ne
 8002116:	2201      	movne	r2, #1
 8002118:	f803 2d01 	strb.w	r2, [r3, #-1]!
  dmxl_write_data(port_idx, dmxl_id, 1, 25, &d); // 25 = LED address
 800211c:	2201      	movs	r2, #1
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	2319      	movs	r3, #25
 8002122:	f7ff fc5f 	bl	80019e4 <dmxl_write_data>
}
 8002126:	b005      	add	sp, #20
 8002128:	f85d fb04 	ldr.w	pc, [sp], #4

0800212c <dmxl_set_torque_enable>:


void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
 800212c:	b500      	push	{lr}
 800212e:	b085      	sub	sp, #20
  uint8_t d = enable ? 1 : 0;
 8002130:	3200      	adds	r2, #0
 8002132:	ab04      	add	r3, sp, #16
 8002134:	bf18      	it	ne
 8002136:	2201      	movne	r2, #1
 8002138:	f803 2d01 	strb.w	r2, [r3, #-1]!
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 800213c:	2201      	movs	r2, #1
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2318      	movs	r3, #24
 8002142:	f7ff fc4f 	bl	80019e4 <dmxl_write_data>
}
 8002146:	b005      	add	sp, #20
 8002148:	f85d fb04 	ldr.w	pc, [sp], #4

0800214c <dmxl_set_angle_limits>:

void dmxl_set_angle_limits(const uint8_t port_idx, const uint8_t dmxl_id,
                           const uint16_t cw_limit, const uint16_t ccw_limit)
{
 800214c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800214e:	b085      	sub	sp, #20
 8002150:	461c      	mov	r4, r3
  uint8_t d[4];
  d[0] = cw_limit & 0xff;
  d[1] = (cw_limit >> 8) & 0xff;
  d[2] = ccw_limit & 0xff;
  d[3] = (ccw_limit >> 8) & 0xff;
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
 8002152:	ab03      	add	r3, sp, #12
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
}

void dmxl_set_angle_limits(const uint8_t port_idx, const uint8_t dmxl_id,
                           const uint16_t cw_limit, const uint16_t ccw_limit)
{
 8002154:	4615      	mov	r5, r2
  uint8_t d[4];
  d[0] = cw_limit & 0xff;
  d[1] = (cw_limit >> 8) & 0xff;
 8002156:	0a17      	lsrs	r7, r2, #8
  d[2] = ccw_limit & 0xff;
  d[3] = (ccw_limit >> 8) & 0xff;
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
 8002158:	9300      	str	r3, [sp, #0]
{
  uint8_t d[4];
  d[0] = cw_limit & 0xff;
  d[1] = (cw_limit >> 8) & 0xff;
  d[2] = ccw_limit & 0xff;
  d[3] = (ccw_limit >> 8) & 0xff;
 800215a:	0a26      	lsrs	r6, r4, #8
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
 800215c:	2204      	movs	r2, #4
 800215e:	2306      	movs	r3, #6

void dmxl_set_angle_limits(const uint8_t port_idx, const uint8_t dmxl_id,
                           const uint16_t cw_limit, const uint16_t ccw_limit)
{
  uint8_t d[4];
  d[0] = cw_limit & 0xff;
 8002160:	f88d 500c 	strb.w	r5, [sp, #12]
  d[1] = (cw_limit >> 8) & 0xff;
 8002164:	f88d 700d 	strb.w	r7, [sp, #13]
  d[2] = ccw_limit & 0xff;
 8002168:	f88d 400e 	strb.w	r4, [sp, #14]
  d[3] = (ccw_limit >> 8) & 0xff;
 800216c:	f88d 600f 	strb.w	r6, [sp, #15]
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
 8002170:	f7ff fc38 	bl	80019e4 <dmxl_write_data>
}
 8002174:	b005      	add	sp, #20
 8002176:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002178 <dmxl_set_res_divider>:

void dmxl_set_res_divider(const uint8_t port_idx, const uint8_t dmxl_id,
                          const uint8_t res_divider)
{
 8002178:	b510      	push	{r4, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	ac04      	add	r4, sp, #16
  dmxl_write_data(port_idx, dmxl_id, 1, 22, &res_divider);
 800217e:	2316      	movs	r3, #22
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
}

void dmxl_set_res_divider(const uint8_t port_idx, const uint8_t dmxl_id,
                          const uint8_t res_divider)
{
 8002180:	f804 2d01 	strb.w	r2, [r4, #-1]!
  dmxl_write_data(port_idx, dmxl_id, 1, 22, &res_divider);
 8002184:	2201      	movs	r2, #1
 8002186:	9400      	str	r4, [sp, #0]
 8002188:	f7ff fc2c 	bl	80019e4 <dmxl_write_data>
}
 800218c:	b004      	add	sp, #16
 800218e:	bd10      	pop	{r4, pc}

08002190 <dmxl_set_multiturn_offset>:

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
 8002190:	b530      	push	{r4, r5, lr}
 8002192:	b085      	sub	sp, #20
  uint8_t d[2];
  d[0] = offset & 0xff;
  d[1] = (offset >> 8) & 0xff;
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 8002194:	ab03      	add	r3, sp, #12
  dmxl_write_data(port_idx, dmxl_id, 1, 22, &res_divider);
}

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
 8002196:	4614      	mov	r4, r2
  uint8_t d[2];
  d[0] = offset & 0xff;
  d[1] = (offset >> 8) & 0xff;
 8002198:	0a15      	lsrs	r5, r2, #8
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	2202      	movs	r2, #2
 800219e:	2314      	movs	r3, #20

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
 80021a0:	f88d 400c 	strb.w	r4, [sp, #12]
  d[1] = (offset >> 8) & 0xff;
 80021a4:	f88d 500d 	strb.w	r5, [sp, #13]
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 80021a8:	f7ff fc1c 	bl	80019e4 <dmxl_write_data>
}
 80021ac:	b005      	add	sp, #20
 80021ae:	bd30      	pop	{r4, r5, pc}

080021b0 <dmxl_set_speed_dir>:

void dmxl_set_speed_dir(const uint8_t port_idx, const uint8_t dmxl_id,
                        const uint16_t speed, const uint8_t dir)
{
 80021b0:	b530      	push	{r4, r5, lr}
  uint8_t d[2];
  d[0] = speed & 0xff;
  d[1] = ((speed >> 8) & 0x03) | (dir ? 0x04 : 0);
 80021b2:	2b00      	cmp	r3, #0
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
}

void dmxl_set_speed_dir(const uint8_t port_idx, const uint8_t dmxl_id,
                        const uint16_t speed, const uint8_t dir)
{
 80021b4:	b085      	sub	sp, #20
 80021b6:	4615      	mov	r5, r2
  uint8_t d[2];
  d[0] = speed & 0xff;
  d[1] = ((speed >> 8) & 0x03) | (dir ? 0x04 : 0);
 80021b8:	f3c2 2301 	ubfx	r3, r2, #8, #2
 80021bc:	bf14      	ite	ne
 80021be:	2404      	movne	r4, #4
 80021c0:	2400      	moveq	r4, #0
  dmxl_write_data(port_idx, dmxl_id, 2, 32, d);
 80021c2:	aa03      	add	r2, sp, #12
void dmxl_set_speed_dir(const uint8_t port_idx, const uint8_t dmxl_id,
                        const uint16_t speed, const uint8_t dir)
{
  uint8_t d[2];
  d[0] = speed & 0xff;
  d[1] = ((speed >> 8) & 0x03) | (dir ? 0x04 : 0);
 80021c4:	431c      	orrs	r4, r3
  dmxl_write_data(port_idx, dmxl_id, 2, 32, d);
 80021c6:	9200      	str	r2, [sp, #0]
 80021c8:	2320      	movs	r3, #32
 80021ca:	2202      	movs	r2, #2

void dmxl_set_speed_dir(const uint8_t port_idx, const uint8_t dmxl_id,
                        const uint16_t speed, const uint8_t dir)
{
  uint8_t d[2];
  d[0] = speed & 0xff;
 80021cc:	f88d 500c 	strb.w	r5, [sp, #12]
  d[1] = ((speed >> 8) & 0x03) | (dir ? 0x04 : 0);
 80021d0:	f88d 400d 	strb.w	r4, [sp, #13]
  dmxl_write_data(port_idx, dmxl_id, 2, 32, d);
 80021d4:	f7ff fc06 	bl	80019e4 <dmxl_write_data>
}
 80021d8:	b005      	add	sp, #20
 80021da:	bd30      	pop	{r4, r5, pc}

080021dc <dmxl_set_control_mode>:

void dmxl_set_control_mode(const uint8_t port_idx,
                           const dmxl_control_mode_t control_mode)
{
 80021dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  //printf("dmxl_set_control_mode %d %d\r\n", port_idx, (int)control_mode);
  if (port_idx >= NUM_DMXL)
 80021e0:	2803      	cmp	r0, #3
  dmxl_write_data(port_idx, dmxl_id, 2, 32, d);
}

void dmxl_set_control_mode(const uint8_t port_idx,
                           const dmxl_control_mode_t control_mode)
{
 80021e2:	b084      	sub	sp, #16
 80021e4:	4605      	mov	r5, r0
  //printf("dmxl_set_control_mode %d %d\r\n", port_idx, (int)control_mode);
  if (port_idx >= NUM_DMXL)
 80021e6:	d806      	bhi.n	80021f6 <dmxl_set_control_mode+0x1a>
    return;
  if (control_mode == DMXL_CM_IDLE || control_mode == DMXL_CM_VELOCITY)
 80021e8:	2901      	cmp	r1, #1
 80021ea:	460c      	mov	r4, r1
 80021ec:	d94e      	bls.n	800228c <dmxl_set_control_mode+0xb0>
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 0);
    delay_us(1);
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 0);
  }
  else if (control_mode == DMXL_CM_POSITION)
 80021ee:	2902      	cmp	r1, #2
 80021f0:	d004      	beq.n	80021fc <dmxl_set_control_mode+0x20>
      delay_us(1);
      dmxl_set_multiturn_offset(port_idx, DMXL_DEFAULT_ID, 13000);  // Places motor close enough to middle of 0-28672 range
      divider_is_sent[port_idx] = 1;
    }
  }
  dmxl_control_mode = control_mode;
 80021f2:	4b32      	ldr	r3, [pc, #200]	; (80022bc <dmxl_set_control_mode+0xe0>)
 80021f4:	701c      	strb	r4, [r3, #0]
}
 80021f6:	b004      	add	sp, #16
 80021f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

// See Dynamixel addresses here: http://support.robotis.com/en/product/dynamixel/mx_series/mx-28.htm
void dmxl_set_led(const uint8_t port_idx, const uint8_t dmxl_id,
                  const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 80021fc:	af04      	add	r7, sp, #16
 80021fe:	2601      	movs	r6, #1
 8002200:	f807 6d04 	strb.w	r6, [r7, #-4]!
  dmxl_write_data(port_idx, dmxl_id, 1, 25, &d); // 25 = LED address
 8002204:	4631      	mov	r1, r6
 8002206:	4632      	mov	r2, r6
 8002208:	2319      	movs	r3, #25
 800220a:	9700      	str	r7, [sp, #0]
 800220c:	f7ff fbea 	bl	80019e4 <dmxl_write_data>
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 0);
  }
  else if (control_mode == DMXL_CM_POSITION)
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 1);
    delay_us(1);
 8002210:	4630      	mov	r0, r6
 8002212:	f001 fb15 	bl	8003840 <delay_us>

void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 8002216:	4631      	mov	r1, r6
 8002218:	4632      	mov	r2, r6
 800221a:	2318      	movs	r3, #24
 800221c:	4628      	mov	r0, r5
 800221e:	9700      	str	r7, [sp, #0]


void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 8002220:	f88d 600c 	strb.w	r6, [sp, #12]
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 8002224:	f7ff fbde 	bl	80019e4 <dmxl_write_data>
  else if (control_mode == DMXL_CM_POSITION)
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 1);
    delay_us(1);
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 1);
    delay_us(1);
 8002228:	4630      	mov	r0, r6
 800222a:	f001 fb09 	bl	8003840 <delay_us>
    dmxl_set_angle_limits(port_idx, DMXL_DEFAULT_ID, 4095, 4095);  // Enables multi-turn mode w/ position control
    // http://support.robotis.com/en/product/dynamixel/mx_series/mx-64.htm#Actuator_Address_0B1
    if (divider_is_sent[port_idx] == 0) {
 800222e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80022c0 <dmxl_set_control_mode+0xe4>
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 1);
    delay_us(1);
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 1);
    delay_us(1);
    dmxl_set_angle_limits(port_idx, DMXL_DEFAULT_ID, 4095, 4095);  // Enables multi-turn mode w/ position control
 8002232:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002236:	4613      	mov	r3, r2
 8002238:	4628      	mov	r0, r5
 800223a:	4631      	mov	r1, r6
 800223c:	f7ff ff86 	bl	800214c <dmxl_set_angle_limits>
    // http://support.robotis.com/en/product/dynamixel/mx_series/mx-64.htm#Actuator_Address_0B1
    if (divider_is_sent[port_idx] == 0) {
 8002240:	f818 3005 	ldrb.w	r3, [r8, r5]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1d4      	bne.n	80021f2 <dmxl_set_control_mode+0x16>
      delay_us(1);
 8002248:	4630      	mov	r0, r6
 800224a:	f001 faf9 	bl	8003840 <delay_us>
 800224e:	ab04      	add	r3, sp, #16
 8002250:	2204      	movs	r2, #4
 8002252:	f803 2d05 	strb.w	r2, [r3, #-5]!
}

void dmxl_set_res_divider(const uint8_t port_idx, const uint8_t dmxl_id,
                          const uint8_t res_divider)
{
  dmxl_write_data(port_idx, dmxl_id, 1, 22, &res_divider);
 8002256:	4631      	mov	r1, r6
 8002258:	4632      	mov	r2, r6
 800225a:	4628      	mov	r0, r5
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	2316      	movs	r3, #22
 8002260:	f7ff fbc0 	bl	80019e4 <dmxl_write_data>
    dmxl_set_angle_limits(port_idx, DMXL_DEFAULT_ID, 4095, 4095);  // Enables multi-turn mode w/ position control
    // http://support.robotis.com/en/product/dynamixel/mx_series/mx-64.htm#Actuator_Address_0B1
    if (divider_is_sent[port_idx] == 0) {
      delay_us(1);
      dmxl_set_res_divider(port_idx, DMXL_DEFAULT_ID, 4);
      delay_us(1);
 8002264:	4630      	mov	r0, r6
 8002266:	f001 faeb 	bl	8003840 <delay_us>
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
  d[1] = (offset >> 8) & 0xff;
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 800226a:	9700      	str	r7, [sp, #0]

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
 800226c:	f04f 0ec8 	mov.w	lr, #200	; 0xc8
  d[1] = (offset >> 8) & 0xff;
 8002270:	2732      	movs	r7, #50	; 0x32
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 8002272:	4628      	mov	r0, r5
 8002274:	4631      	mov	r1, r6
 8002276:	4622      	mov	r2, r4
 8002278:	2314      	movs	r3, #20

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
 800227a:	f88d e00c 	strb.w	lr, [sp, #12]
  d[1] = (offset >> 8) & 0xff;
 800227e:	f88d 700d 	strb.w	r7, [sp, #13]
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 8002282:	f7ff fbaf 	bl	80019e4 <dmxl_write_data>
    if (divider_is_sent[port_idx] == 0) {
      delay_us(1);
      dmxl_set_res_divider(port_idx, DMXL_DEFAULT_ID, 4);
      delay_us(1);
      dmxl_set_multiturn_offset(port_idx, DMXL_DEFAULT_ID, 13000);  // Places motor close enough to middle of 0-28672 range
      divider_is_sent[port_idx] = 1;
 8002286:	f808 6005 	strb.w	r6, [r8, r5]
 800228a:	e7b2      	b.n	80021f2 <dmxl_set_control_mode+0x16>

// See Dynamixel addresses here: http://support.robotis.com/en/product/dynamixel/mx_series/mx-28.htm
void dmxl_set_led(const uint8_t port_idx, const uint8_t dmxl_id,
                  const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 800228c:	ae04      	add	r6, sp, #16
 800228e:	2700      	movs	r7, #0
 8002290:	f806 7d04 	strb.w	r7, [r6, #-4]!
  dmxl_write_data(port_idx, dmxl_id, 1, 25, &d); // 25 = LED address
 8002294:	2101      	movs	r1, #1
 8002296:	460a      	mov	r2, r1
 8002298:	2319      	movs	r3, #25
 800229a:	9600      	str	r6, [sp, #0]
 800229c:	f7ff fba2 	bl	80019e4 <dmxl_write_data>
  if (port_idx >= NUM_DMXL)
    return;
  if (control_mode == DMXL_CM_IDLE || control_mode == DMXL_CM_VELOCITY)
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 0);
    delay_us(1);
 80022a0:	2001      	movs	r0, #1
 80022a2:	f001 facd 	bl	8003840 <delay_us>

void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 80022a6:	2101      	movs	r1, #1
 80022a8:	9600      	str	r6, [sp, #0]
 80022aa:	4628      	mov	r0, r5
 80022ac:	460a      	mov	r2, r1
 80022ae:	2318      	movs	r3, #24


void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 80022b0:	f88d 700c 	strb.w	r7, [sp, #12]
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 80022b4:	f7ff fb96 	bl	80019e4 <dmxl_write_data>
 80022b8:	e79b      	b.n	80021f2 <dmxl_set_control_mode+0x16>
 80022ba:	bf00      	nop
 80022bc:	2000ffe4 	.word	0x2000ffe4
 80022c0:	2000f394 	.word	0x2000f394

080022c4 <dmxl_set_control_target>:

void dmxl_set_control_target(const uint8_t port_idx,
                             const uint16_t target)
{
  //printf("dmxl_set_control_target %d %d\r\n", port_idx, (int)target);
  if (port_idx >= NUM_DMXL)
 80022c4:	2803      	cmp	r0, #3
 80022c6:	d815      	bhi.n	80022f4 <dmxl_set_control_target+0x30>
  dmxl_control_mode = control_mode;
}

void dmxl_set_control_target(const uint8_t port_idx,
                             const uint16_t target)
{
 80022c8:	b510      	push	{r4, lr}
    return;
  uint8_t d[2];
  d[0] = target & 0xff;
  d[1] = (target >> 8) & 0xff;
  uint8_t start_addr = 30;  // position control
  if (dmxl_control_mode == DMXL_CM_VELOCITY) {
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <dmxl_set_control_target+0x34>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
  dmxl_control_mode = control_mode;
}

void dmxl_set_control_target(const uint8_t port_idx,
                             const uint16_t target)
{
 80022ce:	b084      	sub	sp, #16
    return;
  uint8_t d[2];
  d[0] = target & 0xff;
  d[1] = (target >> 8) & 0xff;
  uint8_t start_addr = 30;  // position control
  if (dmxl_control_mode == DMXL_CM_VELOCITY) {
 80022d0:	2b01      	cmp	r3, #1
    start_addr = 32; // velocity control
  }
  dmxl_write_data(port_idx, DMXL_DEFAULT_ID, 2, start_addr, d);
 80022d2:	aa03      	add	r2, sp, #12
{
  //printf("dmxl_set_control_target %d %d\r\n", port_idx, (int)target);
  if (port_idx >= NUM_DMXL)
    return;
  uint8_t d[2];
  d[0] = target & 0xff;
 80022d4:	f88d 100c 	strb.w	r1, [sp, #12]
  d[1] = (target >> 8) & 0xff;
 80022d8:	ea4f 2411 	mov.w	r4, r1, lsr #8
  uint8_t start_addr = 30;  // position control
  if (dmxl_control_mode == DMXL_CM_VELOCITY) {
    start_addr = 32; // velocity control
  }
  dmxl_write_data(port_idx, DMXL_DEFAULT_ID, 2, start_addr, d);
 80022dc:	9200      	str	r2, [sp, #0]
 80022de:	bf14      	ite	ne
 80022e0:	231e      	movne	r3, #30
 80022e2:	2320      	moveq	r3, #32
 80022e4:	2101      	movs	r1, #1
 80022e6:	2202      	movs	r2, #2
  //printf("dmxl_set_control_target %d %d\r\n", port_idx, (int)target);
  if (port_idx >= NUM_DMXL)
    return;
  uint8_t d[2];
  d[0] = target & 0xff;
  d[1] = (target >> 8) & 0xff;
 80022e8:	f88d 400d 	strb.w	r4, [sp, #13]
  uint8_t start_addr = 30;  // position control
  if (dmxl_control_mode == DMXL_CM_VELOCITY) {
    start_addr = 32; // velocity control
  }
  dmxl_write_data(port_idx, DMXL_DEFAULT_ID, 2, start_addr, d);
 80022ec:	f7ff fb7a 	bl	80019e4 <dmxl_write_data>
}
 80022f0:	b004      	add	sp, #16
 80022f2:	bd10      	pop	{r4, pc}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	2000ffe4 	.word	0x2000ffe4

080022fc <dmxl_set_all_control_targets>:

void dmxl_set_all_control_targets(const uint16_t *targets)
{
 80022fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002300:	4d36      	ldr	r5, [pc, #216]	; (80023dc <dmxl_set_all_control_targets+0xe0>)
 8002302:	4937      	ldr	r1, [pc, #220]	; (80023e0 <dmxl_set_all_control_targets+0xe4>)
 8002304:	1e87      	subs	r7, r0, #2
 8002306:	f100 0c06 	add.w	ip, r0, #6
 800230a:	462e      	mov	r6, r5
  for (int i = 0; i < NUM_DMXL; i++)
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
    u->CR1 |=  USART_CR1_TE; // enable the transmitter
    pkts[i][0] = 0xff;
 800230c:	f04f 0eff 	mov.w	lr, #255	; 0xff
    pkts[i][1] = 0xff;
    pkts[i][2] = DMXL_DEFAULT_ID;
 8002310:	f04f 0b01 	mov.w	fp, #1
    pkts[i][3] = 5; // write 2 bytes + 3 byte overhead
 8002314:	f04f 0905 	mov.w	r9, #5
    pkts[i][4] = 3; // instruction: "write data"
 8002318:	f04f 0803 	mov.w	r8, #3
    } else {
      pkts[i][5] = 30; // start address: control target (position)
    }
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
    pkts[i][8] = 0; // checksum
 800231c:	f04f 0a00 	mov.w	sl, #0
{
  // set all control targets simultaneously
  static uint8_t pkts[NUM_DMXL][12];
  for (int i = 0; i < NUM_DMXL; i++)
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
 8002320:	68f2      	ldr	r2, [r6, #12]
    u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
 8002322:	8993      	ldrh	r3, [r2, #12]
 8002324:	f023 0304 	bic.w	r3, r3, #4
 8002328:	041b      	lsls	r3, r3, #16
 800232a:	0c1b      	lsrs	r3, r3, #16
 800232c:	8193      	strh	r3, [r2, #12]
    u->CR1 |=  USART_CR1_TE; // enable the transmitter
 800232e:	8993      	ldrh	r3, [r2, #12]
 8002330:	b29b      	uxth	r3, r3
 8002332:	f043 0308 	orr.w	r3, r3, #8
 8002336:	8193      	strh	r3, [r2, #12]
    pkts[i][0] = 0xff;
    pkts[i][1] = 0xff;
    pkts[i][2] = DMXL_DEFAULT_ID;
    pkts[i][3] = 5; // write 2 bytes + 3 byte overhead
    pkts[i][4] = 3; // instruction: "write data"
    if (dmxl_control_mode == DMXL_CM_VELOCITY) {
 8002338:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <dmxl_set_all_control_targets+0xe8>)
  for (int i = 0; i < NUM_DMXL; i++)
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
    u->CR1 |=  USART_CR1_TE; // enable the transmitter
    pkts[i][0] = 0xff;
 800233a:	f801 ec01 	strb.w	lr, [r1, #-1]
    pkts[i][1] = 0xff;
    pkts[i][2] = DMXL_DEFAULT_ID;
    pkts[i][3] = 5; // write 2 bytes + 3 byte overhead
    pkts[i][4] = 3; // instruction: "write data"
    if (dmxl_control_mode == DMXL_CM_VELOCITY) {
 800233e:	781b      	ldrb	r3, [r3, #0]
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
    u->CR1 |=  USART_CR1_TE; // enable the transmitter
    pkts[i][0] = 0xff;
    pkts[i][1] = 0xff;
 8002340:	f881 e000 	strb.w	lr, [r1]
    pkts[i][2] = DMXL_DEFAULT_ID;
    pkts[i][3] = 5; // write 2 bytes + 3 byte overhead
    pkts[i][4] = 3; // instruction: "write data"
    if (dmxl_control_mode == DMXL_CM_VELOCITY) {
      pkts[i][5] = 32; // start address: control target (velocity)
 8002344:	2b01      	cmp	r3, #1
 8002346:	bf14      	ite	ne
 8002348:	231e      	movne	r3, #30
 800234a:	2320      	moveq	r3, #32
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
    u->CR1 |=  USART_CR1_TE; // enable the transmitter
    pkts[i][0] = 0xff;
    pkts[i][1] = 0xff;
    pkts[i][2] = DMXL_DEFAULT_ID;
 800234c:	f881 b001 	strb.w	fp, [r1, #1]
    pkts[i][3] = 5; // write 2 bytes + 3 byte overhead
 8002350:	f881 9002 	strb.w	r9, [r1, #2]
    pkts[i][4] = 3; // instruction: "write data"
 8002354:	f881 8003 	strb.w	r8, [r1, #3]
    if (dmxl_control_mode == DMXL_CM_VELOCITY) {
      pkts[i][5] = 32; // start address: control target (velocity)
 8002358:	710b      	strb	r3, [r1, #4]
    } else {
      pkts[i][5] = 30; // start address: control target (position)
    }
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
 800235a:	f837 3f02 	ldrh.w	r3, [r7, #2]!
 800235e:	714b      	strb	r3, [r1, #5]
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	718b      	strb	r3, [r1, #6]
    pkts[i][8] = 0; // checksum
 8002364:	f881 a007 	strb.w	sl, [r1, #7]
 8002368:	1d88      	adds	r0, r1, #6
 800236a:	460a      	mov	r2, r1
 800236c:	2300      	movs	r3, #0
    for (int j = 2; j < 8; j++)
      pkts[i][8] += pkts[i][j];
 800236e:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8002372:	4423      	add	r3, r4
 8002374:	b2db      	uxtb	r3, r3
      pkts[i][5] = 30; // start address: control target (position)
    }
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
    pkts[i][8] = 0; // checksum
    for (int j = 2; j < 8; j++)
 8002376:	4282      	cmp	r2, r0
      pkts[i][8] += pkts[i][j];
 8002378:	71cb      	strb	r3, [r1, #7]
      pkts[i][5] = 30; // start address: control target (position)
    }
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
    pkts[i][8] = 0; // checksum
    for (int j = 2; j < 8; j++)
 800237a:	d1f8      	bne.n	800236e <dmxl_set_all_control_targets+0x72>
      pkts[i][8] += pkts[i][j];
    pkts[i][8] = ~pkts[i][8]; // invert checksum
 800237c:	43db      	mvns	r3, r3

void dmxl_set_all_control_targets(const uint16_t *targets)
{
  // set all control targets simultaneously
  static uint8_t pkts[NUM_DMXL][12];
  for (int i = 0; i < NUM_DMXL; i++)
 800237e:	4567      	cmp	r7, ip
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
    pkts[i][8] = 0; // checksum
    for (int j = 2; j < 8; j++)
      pkts[i][8] += pkts[i][j];
    pkts[i][8] = ~pkts[i][8]; // invert checksum
 8002380:	71cb      	strb	r3, [r1, #7]
 8002382:	f106 0618 	add.w	r6, r6, #24
 8002386:	f101 010c 	add.w	r1, r1, #12

void dmxl_set_all_control_targets(const uint16_t *targets)
{
  // set all control targets simultaneously
  static uint8_t pkts[NUM_DMXL][12];
  for (int i = 0; i < NUM_DMXL; i++)
 800238a:	d1c9      	bne.n	8002320 <dmxl_set_all_control_targets+0x24>
 800238c:	4c16      	ldr	r4, [pc, #88]	; (80023e8 <dmxl_set_all_control_targets+0xec>)
 800238e:	f104 0609 	add.w	r6, r4, #9
    } else {
      pkts[i][5] = 30; // start address: control target (position)
    }
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
    pkts[i][8] = 0; // checksum
 8002392:	4812      	ldr	r0, [pc, #72]	; (80023dc <dmxl_set_all_control_targets+0xe0>)
 8002394:	2100      	movs	r1, #0
  }
  for (int j = 0; j < 9; j++)
  {
    for (int i = 0; i < NUM_DMXL; i++)
    {
      USART_TypeDef *u = g_dmxl_ports[i].uart;
 8002396:	68c2      	ldr	r2, [r0, #12]
      while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
 8002398:	8813      	ldrh	r3, [r2, #0]
 800239a:	061f      	lsls	r7, r3, #24
 800239c:	d5fc      	bpl.n	8002398 <dmxl_set_all_control_targets+0x9c>
      u->DR = pkts[i][j];
 800239e:	5c63      	ldrb	r3, [r4, r1]
 80023a0:	8093      	strh	r3, [r2, #4]
 80023a2:	310c      	adds	r1, #12
      pkts[i][8] += pkts[i][j];
    pkts[i][8] = ~pkts[i][8]; // invert checksum
  }
  for (int j = 0; j < 9; j++)
  {
    for (int i = 0; i < NUM_DMXL; i++)
 80023a4:	2930      	cmp	r1, #48	; 0x30
 80023a6:	f100 0018 	add.w	r0, r0, #24
 80023aa:	d1f4      	bne.n	8002396 <dmxl_set_all_control_targets+0x9a>
 80023ac:	3401      	adds	r4, #1
    pkts[i][8] = 0; // checksum
    for (int j = 2; j < 8; j++)
      pkts[i][8] += pkts[i][j];
    pkts[i][8] = ~pkts[i][8]; // invert checksum
  }
  for (int j = 0; j < 9; j++)
 80023ae:	42b4      	cmp	r4, r6
 80023b0:	d1ef      	bne.n	8002392 <dmxl_set_all_control_targets+0x96>
 80023b2:	490e      	ldr	r1, [pc, #56]	; (80023ec <dmxl_set_all_control_targets+0xf0>)
      u->DR = pkts[i][j];
    }
  }
  for (int i = 0; i < NUM_DMXL; i++)
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
 80023b4:	68ea      	ldr	r2, [r5, #12]
    while (!(u->SR & USART_SR_TC)) { } // wait for last TX to finish
 80023b6:	8813      	ldrh	r3, [r2, #0]
 80023b8:	065b      	lsls	r3, r3, #25
 80023ba:	d5fc      	bpl.n	80023b6 <dmxl_set_all_control_targets+0xba>
    u->CR1 &= ~USART_CR1_TE; // disable the transmitter
 80023bc:	8993      	ldrh	r3, [r2, #12]
 80023be:	f023 0308 	bic.w	r3, r3, #8
 80023c2:	041b      	lsls	r3, r3, #16
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	8193      	strh	r3, [r2, #12]
    u->CR1 |=  USART_CR1_RE; // re-enable the receiver
 80023c8:	8993      	ldrh	r3, [r2, #12]
 80023ca:	3518      	adds	r5, #24
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f043 0304 	orr.w	r3, r3, #4
      USART_TypeDef *u = g_dmxl_ports[i].uart;
      while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
      u->DR = pkts[i][j];
    }
  }
  for (int i = 0; i < NUM_DMXL; i++)
 80023d2:	428d      	cmp	r5, r1
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    while (!(u->SR & USART_SR_TC)) { } // wait for last TX to finish
    u->CR1 &= ~USART_CR1_TE; // disable the transmitter
    u->CR1 |=  USART_CR1_RE; // re-enable the receiver
 80023d4:	8193      	strh	r3, [r2, #12]
      USART_TypeDef *u = g_dmxl_ports[i].uart;
      while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
      u->DR = pkts[i][j];
    }
  }
  for (int i = 0; i < NUM_DMXL; i++)
 80023d6:	d1ed      	bne.n	80023b4 <dmxl_set_all_control_targets+0xb8>
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    while (!(u->SR & USART_SR_TC)) { } // wait for last TX to finish
    u->CR1 &= ~USART_CR1_TE; // disable the transmitter
    u->CR1 |=  USART_CR1_RE; // re-enable the receiver
  }
}
 80023d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023dc:	2000000c 	.word	0x2000000c
 80023e0:	2000f7a9 	.word	0x2000f7a9
 80023e4:	2000ffe4 	.word	0x2000ffe4
 80023e8:	2000f7a8 	.word	0x2000f7a8
 80023ec:	2000006c 	.word	0x2000006c

080023f0 <dmxl_poll>:

void dmxl_poll()
{
 80023f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f2:	4e1f      	ldr	r6, [pc, #124]	; (8002470 <dmxl_poll+0x80>)
 80023f4:	b083      	sub	sp, #12
  // spin through and poll all their angles, velocities, currents,
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
 80023f6:	2400      	movs	r4, #0
    u->CR1 |=  USART_CR1_RE; // re-enable the receiver
  }
}

void dmxl_poll()
{
 80023f8:	4635      	mov	r5, r6
  // spin through and poll all their angles, velocities, currents,
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
 80023fa:	2702      	movs	r7, #2
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
 80023fc:	b2e0      	uxtb	r0, r4
{
  // spin through and poll all their angles, velocities, currents,
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
 80023fe:	742f      	strb	r7, [r5, #16]
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
 8002400:	2108      	movs	r1, #8

void dmxl_poll()
{
  // spin through and poll all their angles, velocities, currents,
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
 8002402:	3401      	adds	r4, #1
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
 8002404:	2224      	movs	r2, #36	; 0x24
 8002406:	f7ff fb0f 	bl	8001a28 <dmxl_read_data.constprop.3>

void dmxl_poll()
{
  // spin through and poll all their angles, velocities, currents,
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
 800240a:	2c04      	cmp	r4, #4
 800240c:	f105 0518 	add.w	r5, r5, #24
 8002410:	d1f4      	bne.n	80023fc <dmxl_poll+0xc>
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
  }
  volatile uint32_t t_start = SYSTIME;
 8002412:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  while (SYSTIME - t_start < 10000)
 8002416:	461d      	mov	r5, r3
 8002418:	4f16      	ldr	r7, [pc, #88]	; (8002474 <dmxl_poll+0x84>)
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
  }
  volatile uint32_t t_start = SYSTIME;
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	9301      	str	r3, [sp, #4]
  while (SYSTIME - t_start < 10000)
 800241e:	f242 740f 	movw	r4, #9999	; 0x270f
 8002422:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002424:	9a01      	ldr	r2, [sp, #4]
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	42a3      	cmp	r3, r4
 800242a:	d816      	bhi.n	800245a <dmxl_poll+0x6a>
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 800242c:	2000      	movs	r0, #0
 800242e:	f7ff fc9d 	bl	8001d6c <dmxl_process_ring>
 8002432:	2001      	movs	r0, #1
 8002434:	f7ff fc9a 	bl	8001d6c <dmxl_process_ring>
 8002438:	2002      	movs	r0, #2
 800243a:	f7ff fc97 	bl	8001d6c <dmxl_process_ring>
 800243e:	2003      	movs	r0, #3
 8002440:	f7ff fc94 	bl	8001d6c <dmxl_process_ring>
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <dmxl_poll+0x88>)
 8002446:	2201      	movs	r2, #1
  {
    dmxl_process_rings();
    // also spin around the ethernet rings here? probably not.
    int all_done = 1;
    for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
      if (g_dmxl_ports[i].comms_state == DMXL_CS_POLL_STATE)
 8002448:	7c19      	ldrb	r1, [r3, #16]
 800244a:	3318      	adds	r3, #24
        all_done = 0;
 800244c:	2902      	cmp	r1, #2
 800244e:	bf08      	it	eq
 8002450:	2200      	moveq	r2, #0
  while (SYSTIME - t_start < 10000)
  {
    dmxl_process_rings();
    // also spin around the ethernet rings here? probably not.
    int all_done = 1;
    for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
 8002452:	42bb      	cmp	r3, r7
 8002454:	d1f8      	bne.n	8002448 <dmxl_poll+0x58>
      if (g_dmxl_ports[i].comms_state == DMXL_CS_POLL_STATE)
        all_done = 0;
    if (all_done)
 8002456:	2a00      	cmp	r2, #0
 8002458:	d0e3      	beq.n	8002422 <dmxl_poll+0x32>
      break;
  }
  // set the comms state to "idle" even if we didn't hear back from it by now
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    g_dmxl_ports[i].comms_state = DMXL_CS_IDLE;
 800245a:	2300      	movs	r3, #0
 800245c:	7433      	strb	r3, [r6, #16]
 800245e:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 8002462:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
 8002466:	f886 3058 	strb.w	r3, [r6, #88]	; 0x58
}
 800246a:	b003      	add	sp, #12
 800246c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800246e:	bf00      	nop
 8002470:	2000000c 	.word	0x2000000c
 8002474:	2000006c 	.word	0x2000006c
 8002478:	2000000c 	.word	0x2000000c

0800247c <dmxl_poll_nonblocking_tick>:

void dmxl_poll_nonblocking_tick(const uint8_t dmxl_port)
{
  if (dmxl_port >= NUM_DMXL)
 800247c:	2803      	cmp	r0, #3
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    g_dmxl_ports[i].comms_state = DMXL_CS_IDLE;
}

void dmxl_poll_nonblocking_tick(const uint8_t dmxl_port)
{
 800247e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002482:	4603      	mov	r3, r0
  if (dmxl_port >= NUM_DMXL)
 8002484:	d81e      	bhi.n	80024c4 <dmxl_poll_nonblocking_tick+0x48>
    return; // let's not corrupt memory.
  dmxl_async_poll_state_t *ps = &dmxl_poll_states[dmxl_port]; // save typing
  dmxl_port_t *dp = &g_dmxl_ports[dmxl_port];
  USART_TypeDef *u = dp->uart;
 8002486:	4a5b      	ldr	r2, [pc, #364]	; (80025f4 <dmxl_poll_nonblocking_tick+0x178>)
  static uint8_t dmxl_txbuf[NUM_DMXL][256];
  static uint8_t dmxl_txbuf_readpos[NUM_DMXL] = {0};
  static uint32_t dmxl_rx_start_time[NUM_DMXL] = {0};
  switch (*ps)
 8002488:	4d5b      	ldr	r5, [pc, #364]	; (80025f8 <dmxl_poll_nonblocking_tick+0x17c>)
{
  if (dmxl_port >= NUM_DMXL)
    return; // let's not corrupt memory.
  dmxl_async_poll_state_t *ps = &dmxl_poll_states[dmxl_port]; // save typing
  dmxl_port_t *dp = &g_dmxl_ports[dmxl_port];
  USART_TypeDef *u = dp->uart;
 800248a:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 800248e:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
  static uint8_t dmxl_txbuf[NUM_DMXL][256];
  static uint8_t dmxl_txbuf_readpos[NUM_DMXL] = {0};
  static uint32_t dmxl_rx_start_time[NUM_DMXL] = {0};
  switch (*ps)
 8002492:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
{
  if (dmxl_port >= NUM_DMXL)
    return; // let's not corrupt memory.
  dmxl_async_poll_state_t *ps = &dmxl_poll_states[dmxl_port]; // save typing
  dmxl_port_t *dp = &g_dmxl_ports[dmxl_port];
  USART_TypeDef *u = dp->uart;
 8002496:	68e1      	ldr	r1, [r4, #12]
  static uint8_t dmxl_txbuf[NUM_DMXL][256];
  static uint8_t dmxl_txbuf_readpos[NUM_DMXL] = {0};
  static uint32_t dmxl_rx_start_time[NUM_DMXL] = {0};
  switch (*ps)
 8002498:	2a01      	cmp	r2, #1
 800249a:	d015      	beq.n	80024c8 <dmxl_poll_nonblocking_tick+0x4c>
 800249c:	d351      	bcc.n	8002542 <dmxl_poll_nonblocking_tick+0xc6>
 800249e:	2a02      	cmp	r2, #2
 80024a0:	d034      	beq.n	800250c <dmxl_poll_nonblocking_tick+0x90>
 80024a2:	3201      	adds	r2, #1
 80024a4:	d10a      	bne.n	80024bc <dmxl_poll_nonblocking_tick+0x40>
  {
    case DPS_DONE: // poll start
      dmxl_rx_start_time[dmxl_port] = SYSTIME;
 80024a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80024aa:	4a54      	ldr	r2, [pc, #336]	; (80025fc <dmxl_poll_nonblocking_tick+0x180>)
 80024ac:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80024ae:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
      *ps = DPS_WAIT; // give any outbound command some time to be processed
 80024b2:	2200      	movs	r2, #0
 80024b4:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
      break;
 80024b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *ps = DPS_DONE; // hooray, we received a full state message
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 10000) // wait at most 10ms
        *ps = DPS_DONE; // time to give up. gotta know when to fold em
      break;
    default:
      *ps = DPS_DONE; // shouldn't get here
 80024bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024c0:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
 80024c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dmxl_txbuf_readpos[dmxl_port] = 0;
        *ps = DPS_POLL_TX;
      }
      break;
    case DPS_POLL_TX:
      if (u->SR & USART_SR_TXE) // is there room in the TX buffer ?
 80024c8:	880a      	ldrh	r2, [r1, #0]
 80024ca:	0610      	lsls	r0, r2, #24
 80024cc:	d5fa      	bpl.n	80024c4 <dmxl_poll_nonblocking_tick+0x48>
      {
        if (dmxl_txbuf_readpos[dmxl_port] < 7)
 80024ce:	484c      	ldr	r0, [pc, #304]	; (8002600 <dmxl_poll_nonblocking_tick+0x184>)
 80024d0:	5cc2      	ldrb	r2, [r0, r3]
 80024d2:	2a06      	cmp	r2, #6
 80024d4:	f240 8084 	bls.w	80025e0 <dmxl_poll_nonblocking_tick+0x164>
        {
          dmxl_txbuf_readpos[dmxl_port]++;
          u->DR = dmxl_txbuf[dmxl_port][dmxl_txbuf_readpos[dmxl_port]];
        }
        else if (u->SR & USART_SR_TC) // last byte must fully complete
 80024d8:	880a      	ldrh	r2, [r1, #0]
 80024da:	0652      	lsls	r2, r2, #25
 80024dc:	d5f2      	bpl.n	80024c4 <dmxl_poll_nonblocking_tick+0x48>
        {
          u->CR1 &= ~USART_CR1_TE; // disable the transmitter
 80024de:	898a      	ldrh	r2, [r1, #12]
          u->CR1 |=  USART_CR1_RE; // re-enable the transmitter
          dmxl_rx_start_time[dmxl_port] = SYSTIME;
 80024e0:	4846      	ldr	r0, [pc, #280]	; (80025fc <dmxl_poll_nonblocking_tick+0x180>)
          dmxl_txbuf_readpos[dmxl_port]++;
          u->DR = dmxl_txbuf[dmxl_port][dmxl_txbuf_readpos[dmxl_port]];
        }
        else if (u->SR & USART_SR_TC) // last byte must fully complete
        {
          u->CR1 &= ~USART_CR1_TE; // disable the transmitter
 80024e2:	f022 0208 	bic.w	r2, r2, #8
 80024e6:	0412      	lsls	r2, r2, #16
 80024e8:	0c12      	lsrs	r2, r2, #16
 80024ea:	818a      	strh	r2, [r1, #12]
          u->CR1 |=  USART_CR1_RE; // re-enable the transmitter
 80024ec:	898a      	ldrh	r2, [r1, #12]
 80024ee:	b292      	uxth	r2, r2
 80024f0:	f042 0204 	orr.w	r2, r2, #4
          dmxl_rx_start_time[dmxl_port] = SYSTIME;
 80024f4:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
          u->DR = dmxl_txbuf[dmxl_port][dmxl_txbuf_readpos[dmxl_port]];
        }
        else if (u->SR & USART_SR_TC) // last byte must fully complete
        {
          u->CR1 &= ~USART_CR1_TE; // disable the transmitter
          u->CR1 |=  USART_CR1_RE; // re-enable the transmitter
 80024f8:	818a      	strh	r2, [r1, #12]
          dmxl_rx_start_time[dmxl_port] = SYSTIME;
 80024fa:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80024fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          g_dmxl_ports[dmxl_port].comms_state = DMXL_CS_POLL_STATE;
 8002500:	2202      	movs	r2, #2
 8002502:	7422      	strb	r2, [r4, #16]
          *ps = DPS_POLL_RX;
 8002504:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
 8002508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800250c:	4606      	mov	r6, r0
        }
      }
      break;
    case DPS_POLL_RX:
      dmxl_process_ring(dmxl_port);
 800250e:	f7ff fc2d 	bl	8001d6c <dmxl_process_ring>
      if (g_dmxl_ports[dmxl_port].comms_state != DMXL_CS_POLL_STATE)
 8002512:	7c23      	ldrb	r3, [r4, #16]
 8002514:	2b02      	cmp	r3, #2
        *ps = DPS_DONE; // hooray, we received a full state message
 8002516:	bf1c      	itt	ne
 8002518:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800251c:	f845 3026 	strne.w	r3, [r5, r6, lsl #2]
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 10000) // wait at most 10ms
 8002520:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002524:	4b35      	ldr	r3, [pc, #212]	; (80025fc <dmxl_poll_nonblocking_tick+0x180>)
 8002526:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002528:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800252c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002530:	1a52      	subs	r2, r2, r1
 8002532:	429a      	cmp	r2, r3
 8002534:	d9c6      	bls.n	80024c4 <dmxl_poll_nonblocking_tick+0x48>
        *ps = DPS_DONE; // time to give up. gotta know when to fold em
 8002536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800253a:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
 800253e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    case DPS_DONE: // poll start
      dmxl_rx_start_time[dmxl_port] = SYSTIME;
      *ps = DPS_WAIT; // give any outbound command some time to be processed
      break;
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
 8002542:	482e      	ldr	r0, [pc, #184]	; (80025fc <dmxl_poll_nonblocking_tick+0x180>)
 8002544:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002548:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800254c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800254e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002552:	1b12      	subs	r2, r2, r4
 8002554:	4282      	cmp	r2, r0
 8002556:	d9b5      	bls.n	80024c4 <dmxl_poll_nonblocking_tick+0x48>
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
 8002558:	898a      	ldrh	r2, [r1, #12]
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
 800255a:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 8002604 <dmxl_poll_nonblocking_tick+0x188>
      *ps = DPS_WAIT; // give any outbound command some time to be processed
      break;
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
 800255e:	f022 0204 	bic.w	r2, r2, #4
 8002562:	0412      	lsls	r2, r2, #16
 8002564:	0c12      	lsrs	r2, r2, #16
 8002566:	818a      	strh	r2, [r1, #12]
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
 8002568:	898e      	ldrh	r6, [r1, #12]
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
 800256a:	021f      	lsls	r7, r3, #8
      break;
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
 800256c:	b2b6      	uxth	r6, r6
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
 800256e:	eb0e 0207 	add.w	r2, lr, r7
      break;
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
 8002572:	f046 0608 	orr.w	r6, r6, #8
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
        dmxl_txbuf[dmxl_port][1] = 0xff; // more header
        dmxl_txbuf[dmxl_port][2] = DMXL_DEFAULT_ID;
 8002576:	f04f 0b01 	mov.w	fp, #1
      break;
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
 800257a:	818e      	strh	r6, [r1, #12]
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
 800257c:	24ff      	movs	r4, #255	; 0xff
        dmxl_txbuf[dmxl_port][1] = 0xff; // more header
        dmxl_txbuf[dmxl_port][2] = DMXL_DEFAULT_ID;
        dmxl_txbuf[dmxl_port][3] = 4;  // packet length = 4
 800257e:	f04f 0a04 	mov.w	sl, #4
        dmxl_txbuf[dmxl_port][4] = 2;  // instruction: "read data"
 8002582:	f04f 0902 	mov.w	r9, #2
        dmxl_txbuf[dmxl_port][5] = 36; // start address
 8002586:	f04f 0824 	mov.w	r8, #36	; 0x24
        dmxl_txbuf[dmxl_port][6] = 8;  // number of bytes to read
 800258a:	f04f 0c08 	mov.w	ip, #8
 800258e:	eb07 000b 	add.w	r0, r7, fp
 8002592:	1dbe      	adds	r6, r7, #6
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
 8002594:	f80e 4007 	strb.w	r4, [lr, r7]
 8002598:	4470      	add	r0, lr
        dmxl_txbuf[dmxl_port][1] = 0xff; // more header
 800259a:	7054      	strb	r4, [r2, #1]
        dmxl_txbuf[dmxl_port][2] = DMXL_DEFAULT_ID;
 800259c:	f882 b002 	strb.w	fp, [r2, #2]
        dmxl_txbuf[dmxl_port][3] = 4;  // packet length = 4
 80025a0:	f882 a003 	strb.w	sl, [r2, #3]
        dmxl_txbuf[dmxl_port][4] = 2;  // instruction: "read data"
 80025a4:	f882 9004 	strb.w	r9, [r2, #4]
        dmxl_txbuf[dmxl_port][5] = 36; // start address
 80025a8:	f882 8005 	strb.w	r8, [r2, #5]
        dmxl_txbuf[dmxl_port][6] = 8;  // number of bytes to read
 80025ac:	f882 c006 	strb.w	ip, [r2, #6]
 80025b0:	4476      	add	r6, lr
        uint8_t csum = 0;
 80025b2:	2200      	movs	r2, #0
        for (int i = 2; i < 7; i++)
          csum += dmxl_txbuf[dmxl_port][i];
 80025b4:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80025b8:	4422      	add	r2, r4
        dmxl_txbuf[dmxl_port][3] = 4;  // packet length = 4
        dmxl_txbuf[dmxl_port][4] = 2;  // instruction: "read data"
        dmxl_txbuf[dmxl_port][5] = 36; // start address
        dmxl_txbuf[dmxl_port][6] = 8;  // number of bytes to read
        uint8_t csum = 0;
        for (int i = 2; i < 7; i++)
 80025ba:	42b0      	cmp	r0, r6
          csum += dmxl_txbuf[dmxl_port][i];
 80025bc:	b2d2      	uxtb	r2, r2
        dmxl_txbuf[dmxl_port][3] = 4;  // packet length = 4
        dmxl_txbuf[dmxl_port][4] = 2;  // instruction: "read data"
        dmxl_txbuf[dmxl_port][5] = 36; // start address
        dmxl_txbuf[dmxl_port][6] = 8;  // number of bytes to read
        uint8_t csum = 0;
        for (int i = 2; i < 7; i++)
 80025be:	d1f9      	bne.n	80025b4 <dmxl_poll_nonblocking_tick+0x138>
          csum += dmxl_txbuf[dmxl_port][i];
        dmxl_txbuf[dmxl_port][7] = ~csum;
 80025c0:	eb0e 0007 	add.w	r0, lr, r7
 80025c4:	43d2      	mvns	r2, r2
 80025c6:	71c2      	strb	r2, [r0, #7]
        u->DR; // read any garbage on the RX register
        u->DR = dmxl_txbuf[dmxl_port][0]; // kick it off
 80025c8:	f81e 2007 	ldrb.w	r2, [lr, r7]
        dmxl_txbuf_readpos[dmxl_port] = 0;
 80025cc:	480c      	ldr	r0, [pc, #48]	; (8002600 <dmxl_poll_nonblocking_tick+0x184>)
        dmxl_txbuf[dmxl_port][6] = 8;  // number of bytes to read
        uint8_t csum = 0;
        for (int i = 2; i < 7; i++)
          csum += dmxl_txbuf[dmxl_port][i];
        dmxl_txbuf[dmxl_port][7] = ~csum;
        u->DR; // read any garbage on the RX register
 80025ce:	888c      	ldrh	r4, [r1, #4]
        u->DR = dmxl_txbuf[dmxl_port][0]; // kick it off
 80025d0:	808a      	strh	r2, [r1, #4]
        dmxl_txbuf_readpos[dmxl_port] = 0;
 80025d2:	2100      	movs	r1, #0
 80025d4:	54c1      	strb	r1, [r0, r3]
        *ps = DPS_POLL_TX;
 80025d6:	2201      	movs	r2, #1
 80025d8:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
 80025dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    case DPS_POLL_TX:
      if (u->SR & USART_SR_TXE) // is there room in the TX buffer ?
      {
        if (dmxl_txbuf_readpos[dmxl_port] < 7)
        {
          dmxl_txbuf_readpos[dmxl_port]++;
 80025e0:	3201      	adds	r2, #1
 80025e2:	b2d2      	uxtb	r2, r2
          u->DR = dmxl_txbuf[dmxl_port][dmxl_txbuf_readpos[dmxl_port]];
 80025e4:	eb02 2403 	add.w	r4, r2, r3, lsl #8
 80025e8:	4d06      	ldr	r5, [pc, #24]	; (8002604 <dmxl_poll_nonblocking_tick+0x188>)
    case DPS_POLL_TX:
      if (u->SR & USART_SR_TXE) // is there room in the TX buffer ?
      {
        if (dmxl_txbuf_readpos[dmxl_port] < 7)
        {
          dmxl_txbuf_readpos[dmxl_port]++;
 80025ea:	54c2      	strb	r2, [r0, r3]
          u->DR = dmxl_txbuf[dmxl_port][dmxl_txbuf_readpos[dmxl_port]];
 80025ec:	5d2b      	ldrb	r3, [r5, r4]
 80025ee:	808b      	strh	r3, [r1, #4]
 80025f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025f4:	2000000c 	.word	0x2000000c
 80025f8:	2000006c 	.word	0x2000006c
 80025fc:	2000f398 	.word	0x2000f398
 8002600:	2000f7d8 	.word	0x2000f7d8
 8002604:	2000f3a8 	.word	0x2000f3a8

08002608 <dmxl_all_available>:
      break;
  }
}

bool dmxl_all_available()
{
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <dmxl_all_available+0x1c>)
 800260a:	f103 0110 	add.w	r1, r3, #16
  for (int i = 0; i < NUM_DMXL; i++)
    if (dmxl_poll_states[i] != DPS_DONE)
 800260e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002612:	3201      	adds	r2, #1
 8002614:	d103      	bne.n	800261e <dmxl_all_available+0x16>
  }
}

bool dmxl_all_available()
{
  for (int i = 0; i < NUM_DMXL; i++)
 8002616:	428b      	cmp	r3, r1
 8002618:	d1f9      	bne.n	800260e <dmxl_all_available+0x6>
    if (dmxl_poll_states[i] != DPS_DONE)
      return false;
  return true;
 800261a:	2001      	movs	r0, #1
 800261c:	4770      	bx	lr

bool dmxl_all_available()
{
  for (int i = 0; i < NUM_DMXL; i++)
    if (dmxl_poll_states[i] != DPS_DONE)
      return false;
 800261e:	2000      	movs	r0, #0
  return true;
}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	2000006c 	.word	0x2000006c

08002628 <fan_init>:

#define PORTD_FAN_EN 15

void fan_init()
{
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8002628:	4905      	ldr	r1, [pc, #20]	; (8002640 <fan_init+0x18>)
  GPIOD->MODER |= 1 << (PORTD_FAN_EN * 2); // set as output pin
 800262a:	4a06      	ldr	r2, [pc, #24]	; (8002644 <fan_init+0x1c>)

#define PORTD_FAN_EN 15

void fan_init()
{
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800262c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800262e:	f043 0308 	orr.w	r3, r3, #8
 8002632:	630b      	str	r3, [r1, #48]	; 0x30
  GPIOD->MODER |= 1 << (PORTD_FAN_EN * 2); // set as output pin
 8002634:	6813      	ldr	r3, [r2, #0]
 8002636:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800
 8002644:	40020c00 	.word	0x40020c00

08002648 <fan_on>:
}

void fan_on()
{
  GPIOD->BSRRL |= 1 << PORTD_FAN_EN;
 8002648:	4a04      	ldr	r2, [pc, #16]	; (800265c <fan_on+0x14>)
 800264a:	8b13      	ldrh	r3, [r2, #24]
 800264c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002654:	b29b      	uxth	r3, r3
 8002656:	8313      	strh	r3, [r2, #24]
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40020c00 	.word	0x40020c00

08002660 <fan_off>:
}

void fan_off()
{
  GPIOD->BSRRH |= 1 << PORTD_FAN_EN;
 8002660:	4a04      	ldr	r2, [pc, #16]	; (8002674 <fan_off+0x14>)
 8002662:	8b53      	ldrh	r3, [r2, #26]
 8002664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800266c:	b29b      	uxth	r3, r3
 800266e:	8353      	strh	r3, [r2, #26]
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40020c00 	.word	0x40020c00

08002678 <tactile_bridge_spi_txrx.part.0>:
  const uint8_t reg_val = rxd[2];
  //printf("spi reg 0x%02x = 0x%02x\r\n", reg_idx, reg_val);
  return reg_val;
}

static void tactile_bridge_spi_txrx(const uint8_t bridge_idx,
 8002678:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (bridge_idx > 1)
    return;
  SPI_TypeDef *spi;
  GPIO_TypeDef *cs_gpio;
  uint32_t cs_pin_mask;
  if (bridge_idx == 0)
 800267a:	4d2e      	ldr	r5, [pc, #184]	; (8002734 <tactile_bridge_spi_txrx.part.0+0xbc>)
 800267c:	4c2e      	ldr	r4, [pc, #184]	; (8002738 <tactile_bridge_spi_txrx.part.0+0xc0>)
 800267e:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 8002740 <tactile_bridge_spi_txrx.part.0+0xc8>
 8002682:	4f2e      	ldr	r7, [pc, #184]	; (800273c <tactile_bridge_spi_txrx.part.0+0xc4>)
 8002684:	2800      	cmp	r0, #0
 8002686:	bf08      	it	eq
 8002688:	462c      	moveq	r4, r5
  const uint8_t reg_val = rxd[2];
  //printf("spi reg 0x%02x = 0x%02x\r\n", reg_idx, reg_val);
  return reg_val;
}

static void tactile_bridge_spi_txrx(const uint8_t bridge_idx,
 800268a:	b085      	sub	sp, #20
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
  }
  // assert CS
  cs_gpio->BSRRH = cs_pin_mask;
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
 800268c:	f04f 0000 	mov.w	r0, #0
  if (bridge_idx > 1)
    return;
  SPI_TypeDef *spi;
  GPIO_TypeDef *cs_gpio;
  uint32_t cs_pin_mask;
  if (bridge_idx == 0)
 8002690:	bf0c      	ite	eq
 8002692:	2510      	moveq	r5, #16
 8002694:	f44f 7500 	movne.w	r5, #512	; 0x200
    spi = SPI2;
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
  }
  // assert CS
  cs_gpio->BSRRH = cs_pin_mask;
 8002698:	8365      	strh	r5, [r4, #26]
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
 800269a:	9000      	str	r0, [sp, #0]
 800269c:	9e00      	ldr	r6, [sp, #0]
  if (bridge_idx > 1)
    return;
  SPI_TypeDef *spi;
  GPIO_TypeDef *cs_gpio;
  uint32_t cs_pin_mask;
  if (bridge_idx == 0)
 800269e:	bf0c      	ite	eq
 80026a0:	4670      	moveq	r0, lr
 80026a2:	4638      	movne	r0, r7
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
  }
  // assert CS
  cs_gpio->BSRRH = cs_pin_mask;
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
 80026a4:	2e09      	cmp	r6, #9
 80026a6:	dc05      	bgt.n	80026b4 <tactile_bridge_spi_txrx.part.0+0x3c>
 80026a8:	9e00      	ldr	r6, [sp, #0]
 80026aa:	3601      	adds	r6, #1
 80026ac:	9600      	str	r6, [sp, #0]
 80026ae:	9e00      	ldr	r6, [sp, #0]
 80026b0:	2e09      	cmp	r6, #9
 80026b2:	ddf9      	ble.n	80026a8 <tactile_bridge_spi_txrx.part.0+0x30>
  spi->DR; // clear rx buffer
 80026b4:	8986      	ldrh	r6, [r0, #12]
  for (uint8_t i = 0; i < txrx_len; i++)
 80026b6:	b321      	cbz	r1, 8002702 <tactile_bridge_spi_txrx.part.0+0x8a>
 80026b8:	1e4f      	subs	r7, r1, #1
 80026ba:	fa52 f787 	uxtab	r7, r2, r7
 80026be:	1e51      	subs	r1, r2, #1
 80026c0:	461e      	mov	r6, r3
    while (spi->SR & SPI_SR_BSY) { }
    if (rxd)
      rxd[i] = spi->DR;
    else
      spi->DR;
    for (volatile int i = 0; i < 150; i++) { } // wait between SPI bytes
 80026c2:	f04f 0e00 	mov.w	lr, #0
  cs_gpio->BSRRH = cs_pin_mask;
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
  spi->DR; // clear rx buffer
  for (uint8_t i = 0; i < txrx_len; i++)
  {
    spi->DR = txd[i]; // read internal register command
 80026c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80026ca:	8182      	strh	r2, [r0, #12]
    while (!(spi->SR & SPI_SR_TXE)) { } // wait for buffer room
 80026cc:	8902      	ldrh	r2, [r0, #8]
 80026ce:	0792      	lsls	r2, r2, #30
 80026d0:	d5fc      	bpl.n	80026cc <tactile_bridge_spi_txrx.part.0+0x54>
    while (!(spi->SR & SPI_SR_RXNE)) { }
 80026d2:	8902      	ldrh	r2, [r0, #8]
 80026d4:	07d2      	lsls	r2, r2, #31
 80026d6:	d5fc      	bpl.n	80026d2 <tactile_bridge_spi_txrx.part.0+0x5a>
    while (spi->SR & SPI_SR_BSY) { }
 80026d8:	8902      	ldrh	r2, [r0, #8]
 80026da:	0612      	lsls	r2, r2, #24
 80026dc:	d4fc      	bmi.n	80026d8 <tactile_bridge_spi_txrx.part.0+0x60>
    if (rxd)
      rxd[i] = spi->DR;
 80026de:	8982      	ldrh	r2, [r0, #12]
  {
    spi->DR = txd[i]; // read internal register command
    while (!(spi->SR & SPI_SR_TXE)) { } // wait for buffer room
    while (!(spi->SR & SPI_SR_RXNE)) { }
    while (spi->SR & SPI_SR_BSY) { }
    if (rxd)
 80026e0:	b103      	cbz	r3, 80026e4 <tactile_bridge_spi_txrx.part.0+0x6c>
      rxd[i] = spi->DR;
 80026e2:	7032      	strb	r2, [r6, #0]
    else
      spi->DR;
    for (volatile int i = 0; i < 150; i++) { } // wait between SPI bytes
 80026e4:	f8cd e004 	str.w	lr, [sp, #4]
 80026e8:	9a01      	ldr	r2, [sp, #4]
 80026ea:	2a95      	cmp	r2, #149	; 0x95
 80026ec:	dc05      	bgt.n	80026fa <tactile_bridge_spi_txrx.part.0+0x82>
 80026ee:	9a01      	ldr	r2, [sp, #4]
 80026f0:	3201      	adds	r2, #1
 80026f2:	9201      	str	r2, [sp, #4]
 80026f4:	9a01      	ldr	r2, [sp, #4]
 80026f6:	2a95      	cmp	r2, #149	; 0x95
 80026f8:	ddf9      	ble.n	80026ee <tactile_bridge_spi_txrx.part.0+0x76>
  }
  // assert CS
  cs_gpio->BSRRH = cs_pin_mask;
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
  spi->DR; // clear rx buffer
  for (uint8_t i = 0; i < txrx_len; i++)
 80026fa:	42b9      	cmp	r1, r7
 80026fc:	f106 0601 	add.w	r6, r6, #1
 8002700:	d1e1      	bne.n	80026c6 <tactile_bridge_spi_txrx.part.0+0x4e>
      rxd[i] = spi->DR;
    else
      spi->DR;
    for (volatile int i = 0; i < 150; i++) { } // wait between SPI bytes
  }
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
 8002702:	2300      	movs	r3, #0
 8002704:	9302      	str	r3, [sp, #8]
 8002706:	9b02      	ldr	r3, [sp, #8]
 8002708:	2b09      	cmp	r3, #9
 800270a:	dc05      	bgt.n	8002718 <tactile_bridge_spi_txrx.part.0+0xa0>
 800270c:	9b02      	ldr	r3, [sp, #8]
 800270e:	3301      	adds	r3, #1
 8002710:	9302      	str	r3, [sp, #8]
 8002712:	9b02      	ldr	r3, [sp, #8]
 8002714:	2b09      	cmp	r3, #9
 8002716:	ddf9      	ble.n	800270c <tactile_bridge_spi_txrx.part.0+0x94>
  cs_gpio->BSRRL = cs_pin_mask;
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
 8002718:	2300      	movs	r3, #0
    else
      spi->DR;
    for (volatile int i = 0; i < 150; i++) { } // wait between SPI bytes
  }
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
  cs_gpio->BSRRL = cs_pin_mask;
 800271a:	8325      	strh	r5, [r4, #24]
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
 800271c:	9303      	str	r3, [sp, #12]
 800271e:	9b03      	ldr	r3, [sp, #12]
 8002720:	2b09      	cmp	r3, #9
 8002722:	dc05      	bgt.n	8002730 <tactile_bridge_spi_txrx.part.0+0xb8>
 8002724:	9b03      	ldr	r3, [sp, #12]
 8002726:	3301      	adds	r3, #1
 8002728:	9303      	str	r3, [sp, #12]
 800272a:	9b03      	ldr	r3, [sp, #12]
 800272c:	2b09      	cmp	r3, #9
 800272e:	ddf9      	ble.n	8002724 <tactile_bridge_spi_txrx.part.0+0xac>
}
 8002730:	b005      	add	sp, #20
 8002732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002734:	40020000 	.word	0x40020000
 8002738:	40020400 	.word	0x40020400
 800273c:	40003800 	.word	0x40003800
 8002740:	40013000 	.word	0x40013000

08002744 <tactile_bridge_read_reg>:
  tactile_bridge_spi_txrx(bridge_idx, 3, txd, NULL);
}

static uint8_t tactile_bridge_read_reg(const uint8_t bridge_idx,
                                       const uint8_t reg_idx)
{
 8002744:	b500      	push	{lr}
 8002746:	b083      	sub	sp, #12
  uint8_t rxd[3] = {0};
 8002748:	2300      	movs	r3, #0
  uint8_t txd[3] = {0x21, reg_idx, 0};
 800274a:	2221      	movs	r2, #33	; 0x21
static void tactile_bridge_spi_txrx(const uint8_t bridge_idx,
                                    const uint8_t txrx_len,
                                    const uint8_t *txd,
                                    uint8_t *rxd)
{
  if (bridge_idx > 1)
 800274c:	2801      	cmp	r0, #1

static uint8_t tactile_bridge_read_reg(const uint8_t bridge_idx,
                                       const uint8_t reg_idx)
{
  uint8_t rxd[3] = {0};
  uint8_t txd[3] = {0x21, reg_idx, 0};
 800274e:	f88d 1005 	strb.w	r1, [sp, #5]
}

static uint8_t tactile_bridge_read_reg(const uint8_t bridge_idx,
                                       const uint8_t reg_idx)
{
  uint8_t rxd[3] = {0};
 8002752:	f8ad 3000 	strh.w	r3, [sp]
 8002756:	f88d 3002 	strb.w	r3, [sp, #2]
  uint8_t txd[3] = {0x21, reg_idx, 0};
 800275a:	f88d 3006 	strb.w	r3, [sp, #6]
 800275e:	f88d 2004 	strb.w	r2, [sp, #4]
static void tactile_bridge_spi_txrx(const uint8_t bridge_idx,
                                    const uint8_t txrx_len,
                                    const uint8_t *txd,
                                    uint8_t *rxd)
{
  if (bridge_idx > 1)
 8002762:	d903      	bls.n	800276c <tactile_bridge_read_reg+0x28>
 8002764:	4618      	mov	r0, r3
  uint8_t txd[3] = {0x21, reg_idx, 0};
  tactile_bridge_spi_txrx(bridge_idx, 3, txd, rxd);
  const uint8_t reg_val = rxd[2];
  //printf("spi reg 0x%02x = 0x%02x\r\n", reg_idx, reg_val);
  return reg_val;
}
 8002766:	b003      	add	sp, #12
 8002768:	f85d fb04 	ldr.w	pc, [sp], #4
 800276c:	2103      	movs	r1, #3
 800276e:	aa01      	add	r2, sp, #4
 8002770:	466b      	mov	r3, sp
 8002772:	f7ff ff81 	bl	8002678 <tactile_bridge_spi_txrx.part.0>
 8002776:	f89d 0002 	ldrb.w	r0, [sp, #2]
 800277a:	b003      	add	sp, #12
 800277c:	f85d fb04 	ldr.w	pc, [sp], #4

08002780 <tactile_i2c_async_start.part.1>:

tactile_bridged_i2c_status_t
g_tactile_bridged_i2c_status[NUM_BRIDGED_I2C] =
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void tactile_i2c_async_start(const uint8_t port, const uint8_t address,
 8002780:	b538      	push	{r3, r4, r5, lr}
 8002782:	4604      	mov	r4, r0
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
    return; // bogus

  g_tactile_i2c_async_address[port]  = address;
 8002784:	4d21      	ldr	r5, [pc, #132]	; (800280c <tactile_i2c_async_start.part.1+0x8c>)
  g_tactile_i2c_async_data_len[port] = data_len;
 8002786:	4822      	ldr	r0, [pc, #136]	; (8002810 <tactile_i2c_async_start.part.1+0x90>)
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
    return; // bogus

  g_tactile_i2c_async_address[port]  = address;
 8002788:	5529      	strb	r1, [r5, r4]
  g_tactile_i2c_async_data_len[port] = data_len;
 800278a:	5503      	strb	r3, [r0, r4]
  if (data)
    memcpy(g_tactile_i2c_async_data[port], data, data_len);
 800278c:	4611      	mov	r1, r2
 800278e:	4821      	ldr	r0, [pc, #132]	; (8002814 <tactile_i2c_async_start.part.1+0x94>)
  if (port >= NUM_TACTILE_PORTS - 1)
    return; // bogus

  g_tactile_i2c_async_address[port]  = address;
  g_tactile_i2c_async_data_len[port] = data_len;
  if (data)
 8002790:	2a00      	cmp	r2, #0
 8002792:	d035      	beq.n	8002800 <tactile_i2c_async_start.part.1+0x80>
    memcpy(g_tactile_i2c_async_data[port], data, data_len);
 8002794:	461a      	mov	r2, r3
 8002796:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 800279a:	f001 f937 	bl	8003a0c <memcpy>
  else
    memset(g_tactile_i2c_async_data[port], 0, data_len);
  g_tactile_i2c_async_data_txrx_idx[port] = 0;
 800279e:	4a1e      	ldr	r2, [pc, #120]	; (8002818 <tactile_i2c_async_start.part.1+0x98>)
 80027a0:	2300      	movs	r3, #0
/*
  if (port == 2)
    printf("i2c port %d addr 0x%02x len %d\r\n", port, address, data_len);
*/

  if (port == 0 || port == 1)
 80027a2:	2c01      	cmp	r4, #1
  g_tactile_i2c_async_data_len[port] = data_len;
  if (data)
    memcpy(g_tactile_i2c_async_data[port], data, data_len);
  else
    memset(g_tactile_i2c_async_data[port], 0, data_len);
  g_tactile_i2c_async_data_txrx_idx[port] = 0;
 80027a4:	5513      	strb	r3, [r2, r4]
/*
  if (port == 2)
    printf("i2c port %d addr 0x%02x len %d\r\n", port, address, data_len);
*/

  if (port == 0 || port == 1)
 80027a6:	d90a      	bls.n	80027be <tactile_i2c_async_start.part.1+0x3e>
      i2c->SR1 &= ~I2C_SR1_AF;
    // }

    g_tactile_internal_i2c_status[port] = TATS_START;
  }
  else if (port == 2 || port == 3) // use a bridge
 80027a8:	1ea2      	subs	r2, r4, #2
 80027aa:	b2d1      	uxtb	r1, r2
 80027ac:	2901      	cmp	r1, #1
 80027ae:	d91a      	bls.n	80027e6 <tactile_i2c_async_start.part.1+0x66>
    }
    // assert CS
    cs_gpio->BSRRH = cs_pin_mask;
    g_tactile_bridged_i2c_status[bridge] = TBPS_REQUEST_CS_LOW;
  }
  g_tactile_i2c_async_start_us[port] = SYSTIME;
 80027b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <tactile_i2c_async_start.part.1+0x9c>)
 80027b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027b8:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80027bc:	bd38      	pop	{r3, r4, r5, pc}
  {
    I2C_TypeDef *i2c;
    if (port == 0)
      i2c = I2C1;
    else
      i2c = I2C3;
 80027be:	4a18      	ldr	r2, [pc, #96]	; (8002820 <tactile_i2c_async_start.part.1+0xa0>)
 80027c0:	4918      	ldr	r1, [pc, #96]	; (8002824 <tactile_i2c_async_start.part.1+0xa4>)
    // {
      i2c->CR1 |=  I2C_CR1_START;
      i2c->SR1 &= ~I2C_SR1_AF;
    // }

    g_tactile_internal_i2c_status[port] = TATS_START;
 80027c2:	4819      	ldr	r0, [pc, #100]	; (8002828 <tactile_i2c_async_start.part.1+0xa8>)
  {
    I2C_TypeDef *i2c;
    if (port == 0)
      i2c = I2C1;
    else
      i2c = I2C3;
 80027c4:	429c      	cmp	r4, r3
 80027c6:	bf08      	it	eq
 80027c8:	4611      	moveq	r1, r2
    // if (port != 0)
    // {
      i2c->CR1 |=  I2C_CR1_START;
 80027ca:	880a      	ldrh	r2, [r1, #0]
 80027cc:	b292      	uxth	r2, r2
 80027ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027d2:	800a      	strh	r2, [r1, #0]
      i2c->SR1 &= ~I2C_SR1_AF;
 80027d4:	8a8a      	ldrh	r2, [r1, #20]
    // }

    g_tactile_internal_i2c_status[port] = TATS_START;
 80027d6:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
    else
      i2c = I2C3;
    // if (port != 0)
    // {
      i2c->CR1 |=  I2C_CR1_START;
      i2c->SR1 &= ~I2C_SR1_AF;
 80027da:	f422 6380 	bic.w	r3, r2, #1024	; 0x400
 80027de:	041b      	lsls	r3, r3, #16
 80027e0:	0c1b      	lsrs	r3, r3, #16
 80027e2:	828b      	strh	r3, [r1, #20]
 80027e4:	e7e4      	b.n	80027b0 <tactile_i2c_async_start.part.1+0x30>
  else if (port == 2 || port == 3) // use a bridge
  {
    const uint_fast8_t bridge = port - 2;
    GPIO_TypeDef *cs_gpio = NULL;
    uint32_t cs_pin_mask = 0;
    if (bridge == 0)
 80027e6:	4811      	ldr	r0, [pc, #68]	; (800282c <tactile_i2c_async_start.part.1+0xac>)
 80027e8:	4911      	ldr	r1, [pc, #68]	; (8002830 <tactile_i2c_async_start.part.1+0xb0>)
      cs_gpio = GPIOB;
      cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
    }
    // assert CS
    cs_gpio->BSRRH = cs_pin_mask;
    g_tactile_bridged_i2c_status[bridge] = TBPS_REQUEST_CS_LOW;
 80027ea:	4d12      	ldr	r5, [pc, #72]	; (8002834 <tactile_i2c_async_start.part.1+0xb4>)
  else if (port == 2 || port == 3) // use a bridge
  {
    const uint_fast8_t bridge = port - 2;
    GPIO_TypeDef *cs_gpio = NULL;
    uint32_t cs_pin_mask = 0;
    if (bridge == 0)
 80027ec:	2a00      	cmp	r2, #0
 80027ee:	bf16      	itet	ne
 80027f0:	4601      	movne	r1, r0
 80027f2:	2010      	moveq	r0, #16
 80027f4:	f44f 7000 	movne.w	r0, #512	; 0x200
      cs_gpio = GPIOB;
      cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
    }
    // assert CS
    cs_gpio->BSRRH = cs_pin_mask;
    g_tactile_bridged_i2c_status[bridge] = TBPS_REQUEST_CS_LOW;
 80027f8:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    {
      cs_gpio = GPIOB;
      cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
    }
    // assert CS
    cs_gpio->BSRRH = cs_pin_mask;
 80027fc:	8348      	strh	r0, [r1, #26]
 80027fe:	e7d7      	b.n	80027b0 <tactile_i2c_async_start.part.1+0x30>
  g_tactile_i2c_async_address[port]  = address;
  g_tactile_i2c_async_data_len[port] = data_len;
  if (data)
    memcpy(g_tactile_i2c_async_data[port], data, data_len);
  else
    memset(g_tactile_i2c_async_data[port], 0, data_len);
 8002800:	461a      	mov	r2, r3
 8002802:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 8002806:	f001 f99b 	bl	8003b40 <memset>
 800280a:	e7c8      	b.n	800279e <tactile_i2c_async_start.part.1+0x1e>
 800280c:	20010440 	.word	0x20010440
 8002810:	20010454 	.word	0x20010454
 8002814:	2000ffe8 	.word	0x2000ffe8
 8002818:	2001041c 	.word	0x2001041c
 800281c:	20010444 	.word	0x20010444
 8002820:	40005400 	.word	0x40005400
 8002824:	40005c00 	.word	0x40005c00
 8002828:	200103f8 	.word	0x200103f8
 800282c:	40020400 	.word	0x40020400
 8002830:	40020000 	.word	0x40020000
 8002834:	20010410 	.word	0x20010410

08002838 <tactile_internal_i2c_async_tick.part.2>:
    g_tactile_bridged_i2c_status[bridge] = TBPS_REQUEST_CS_LOW;
  }
  g_tactile_i2c_async_start_us[port] = SYSTIME;
}

void tactile_internal_i2c_async_tick(const uint_fast8_t port)
 8002838:	b5f0      	push	{r4, r5, r6, r7, lr}
     if (port == 0 && ++tat_cnt % 50000 == 0)
     printf("i2c async tick port %d tats %d sr = 0x%08x\r\n",
     port, (int)*tats, (unsigned)i2c->SR1);
   */

  switch (*status)
 800283a:	4c61      	ldr	r4, [pc, #388]	; (80029c0 <tactile_internal_i2c_async_tick.part.2+0x188>)
  //static int tat_cnt = 0;
  I2C_TypeDef *i2c;
  if (port == 0)
    i2c = I2C1;
  else
    i2c = I2C3;
 800283c:	4961      	ldr	r1, [pc, #388]	; (80029c4 <tactile_internal_i2c_async_tick.part.2+0x18c>)
 800283e:	4b62      	ldr	r3, [pc, #392]	; (80029c8 <tactile_internal_i2c_async_tick.part.2+0x190>)
     if (port == 0 && ++tat_cnt % 50000 == 0)
     printf("i2c async tick port %d tats %d sr = 0x%08x\r\n",
     port, (int)*tats, (unsigned)i2c->SR1);
   */

  switch (*status)
 8002840:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
  //static int tat_cnt = 0;
  I2C_TypeDef *i2c;
  if (port == 0)
    i2c = I2C1;
  else
    i2c = I2C3;
 8002844:	2800      	cmp	r0, #0
 8002846:	bf08      	it	eq
 8002848:	460b      	moveq	r3, r1
     if (port == 0 && ++tat_cnt % 50000 == 0)
     printf("i2c async tick port %d tats %d sr = 0x%08x\r\n",
     port, (int)*tats, (unsigned)i2c->SR1);
   */

  switch (*status)
 800284a:	2a05      	cmp	r2, #5
 800284c:	f200 808f 	bhi.w	800296e <tactile_internal_i2c_async_tick.part.2+0x136>
 8002850:	e8df f002 	tbb	[pc, r2]
 8002854:	64462016 	.word	0x64462016
 8002858:	0380      	.short	0x0380
        *status = TATS_STOP_WAIT; // wait a bit for the line to clear
        g_tactile_i2c_async_start_us[port] = SYSTIME;
      }
      break;
    case TATS_STOP_WAIT:
      if (SYSTIME - g_tactile_i2c_async_start_us[port] > 10) // rmelo19
 800285a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800285e:	4a5b      	ldr	r2, [pc, #364]	; (80029cc <tactile_internal_i2c_async_tick.part.2+0x194>)
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8002866:	1a9b      	subs	r3, r3, r2
 8002868:	2b0a      	cmp	r3, #10
 800286a:	f240 8085 	bls.w	8002978 <tactile_internal_i2c_async_tick.part.2+0x140>
      {
        if (g_tactile_i2c_async_address_fail[port])
 800286e:	4b58      	ldr	r3, [pc, #352]	; (80029d0 <tactile_internal_i2c_async_tick.part.2+0x198>)
 8002870:	5c1b      	ldrb	r3, [r3, r0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d07b      	beq.n	800296e <tactile_internal_i2c_async_tick.part.2+0x136>
          *status = TATS_DONE_FAIL;
 8002876:	f06f 0301 	mvn.w	r3, #1
 800287a:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 800287e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   */

  switch (*status)
  {
    case TATS_START:
      if (i2c->SR1 & I2C_SR1_SB)
 8002880:	8a9a      	ldrh	r2, [r3, #20]
 8002882:	07d5      	lsls	r5, r2, #31
 8002884:	d578      	bpl.n	8002978 <tactile_internal_i2c_async_tick.part.2+0x140>
      {
        i2c->DR = g_tactile_i2c_async_address[port];
 8002886:	4953      	ldr	r1, [pc, #332]	; (80029d4 <tactile_internal_i2c_async_tick.part.2+0x19c>)
        *status = TATS_ADDR;
 8002888:	2201      	movs	r2, #1
  switch (*status)
  {
    case TATS_START:
      if (i2c->SR1 & I2C_SR1_SB)
      {
        i2c->DR = g_tactile_i2c_async_address[port];
 800288a:	5c09      	ldrb	r1, [r1, r0]
 800288c:	8219      	strh	r1, [r3, #16]
        *status = TATS_ADDR;
 800288e:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
 8002892:	bdf0      	pop	{r4, r5, r6, r7, pc}
      }
      break;
    case TATS_ADDR:
      if (i2c->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF))
 8002894:	8a9a      	ldrh	r2, [r3, #20]
 8002896:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 800289a:	f022 0201 	bic.w	r2, r2, #1
 800289e:	0552      	lsls	r2, r2, #21
 80028a0:	0d52      	lsrs	r2, r2, #21
 80028a2:	2a00      	cmp	r2, #0
 80028a4:	d068      	beq.n	8002978 <tactile_internal_i2c_async_tick.part.2+0x140>
      {
        bool address_fail = (i2c->SR1 & I2C_SR1_AF) ? true : false;
        g_tactile_i2c_async_address_fail[port] = address_fail;
        int no_payload = (0 == g_tactile_i2c_async_data_len[port]);
 80028a6:	494c      	ldr	r1, [pc, #304]	; (80029d8 <tactile_internal_i2c_async_tick.part.2+0x1a0>)
      }
      break;
    case TATS_ADDR:
      if (i2c->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF))
      {
        bool address_fail = (i2c->SR1 & I2C_SR1_AF) ? true : false;
 80028a8:	8a9a      	ldrh	r2, [r3, #20]
        g_tactile_i2c_async_address_fail[port] = address_fail;
 80028aa:	4d49      	ldr	r5, [pc, #292]	; (80029d0 <tactile_internal_i2c_async_tick.part.2+0x198>)
        int no_payload = (0 == g_tactile_i2c_async_data_len[port]);
 80028ac:	5c09      	ldrb	r1, [r1, r0]
      }
      break;
    case TATS_ADDR:
      if (i2c->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF))
      {
        bool address_fail = (i2c->SR1 & I2C_SR1_AF) ? true : false;
 80028ae:	f3c2 2280 	ubfx	r2, r2, #10, #1
        g_tactile_i2c_async_address_fail[port] = address_fail;
 80028b2:	542a      	strb	r2, [r5, r0]
        int no_payload = (0 == g_tactile_i2c_async_data_len[port]);
        if (no_payload)
 80028b4:	2900      	cmp	r1, #0
 80028b6:	d060      	beq.n	800297a <tactile_internal_i2c_async_tick.part.2+0x142>
          i2c->CR1 |= I2C_CR1_STOP; // this seemed needed... not sure why now.
        i2c->SR2; // un-stretch clock by reading here (?)
 80028b8:	8b1d      	ldrh	r5, [r3, #24]
        if (!address_fail && !no_payload)
 80028ba:	bb32      	cbnz	r2, 800290a <tactile_internal_i2c_async_tick.part.2+0xd2>
        {
          if (!(g_tactile_i2c_async_address[port] & 0x1))
 80028bc:	4d45      	ldr	r5, [pc, #276]	; (80029d4 <tactile_internal_i2c_async_tick.part.2+0x19c>)
 80028be:	5c2d      	ldrb	r5, [r5, r0]
 80028c0:	f015 0501 	ands.w	r5, r5, #1
 80028c4:	d06c      	beq.n	80029a0 <tactile_internal_i2c_async_tick.part.2+0x168>
            *status = TATS_WRITE;
          }
          else
          {
            // it's a read transaction
            g_tactile_i2c_async_data_txrx_idx[port] = 0;
 80028c6:	4d45      	ldr	r5, [pc, #276]	; (80029dc <tactile_internal_i2c_async_tick.part.2+0x1a4>)
 80028c8:	542a      	strb	r2, [r5, r0]
            if (g_tactile_i2c_async_data_len[port] == 1)
 80028ca:	2901      	cmp	r1, #1
              i2c->CR1 &= ~I2C_CR1_ACK; // single-byte read
 80028cc:	881a      	ldrh	r2, [r3, #0]
          }
          else
          {
            // it's a read transaction
            g_tactile_i2c_async_data_txrx_idx[port] = 0;
            if (g_tactile_i2c_async_data_len[port] == 1)
 80028ce:	d071      	beq.n	80029b4 <tactile_internal_i2c_async_tick.part.2+0x17c>
              i2c->CR1 &= ~I2C_CR1_ACK; // single-byte read
            else
              i2c->CR1 |=  I2C_CR1_ACK; // multi-byte read. ack this one.
 80028d0:	b292      	uxth	r2, r2
 80028d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028d6:	801a      	strh	r2, [r3, #0]
            *status = TATS_READ;
 80028d8:	2303      	movs	r3, #3
 80028da:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 80028de:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *status = TATS_STOP;
        }
      }
      break;
    case TATS_WRITE:
      if (i2c->SR1 & (I2C_SR1_BTF | I2C_SR1_AF))
 80028e0:	8a9a      	ldrh	r2, [r3, #20]
 80028e2:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
 80028e6:	f022 0203 	bic.w	r2, r2, #3
 80028ea:	0552      	lsls	r2, r2, #21
 80028ec:	0d52      	lsrs	r2, r2, #21
 80028ee:	2a00      	cmp	r2, #0
 80028f0:	d042      	beq.n	8002978 <tactile_internal_i2c_async_tick.part.2+0x140>
      {
        if (i2c->SR1 & I2C_SR1_AF)
 80028f2:	8a9a      	ldrh	r2, [r3, #20]
 80028f4:	0551      	lsls	r1, r2, #21
 80028f6:	d408      	bmi.n	800290a <tactile_internal_i2c_async_tick.part.2+0xd2>
          i2c->CR1 |= I2C_CR1_STOP;
          *status = TATS_STOP;
        }
        else
        {
          g_tactile_i2c_async_data_txrx_idx[port]++;
 80028f8:	4938      	ldr	r1, [pc, #224]	; (80029dc <tactile_internal_i2c_async_tick.part.2+0x1a4>)
          if (g_tactile_i2c_async_data_txrx_idx[port] >=
              g_tactile_i2c_async_data_len[port])
 80028fa:	4d37      	ldr	r5, [pc, #220]	; (80029d8 <tactile_internal_i2c_async_tick.part.2+0x1a0>)
          i2c->CR1 |= I2C_CR1_STOP;
          *status = TATS_STOP;
        }
        else
        {
          g_tactile_i2c_async_data_txrx_idx[port]++;
 80028fc:	5c0a      	ldrb	r2, [r1, r0]
          if (g_tactile_i2c_async_data_txrx_idx[port] >=
 80028fe:	5c2d      	ldrb	r5, [r5, r0]
          i2c->CR1 |= I2C_CR1_STOP;
          *status = TATS_STOP;
        }
        else
        {
          g_tactile_i2c_async_data_txrx_idx[port]++;
 8002900:	3201      	adds	r2, #1
 8002902:	b2d2      	uxtb	r2, r2
          if (g_tactile_i2c_async_data_txrx_idx[port] >=
 8002904:	4295      	cmp	r5, r2
          i2c->CR1 |= I2C_CR1_STOP;
          *status = TATS_STOP;
        }
        else
        {
          g_tactile_i2c_async_data_txrx_idx[port]++;
 8002906:	540a      	strb	r2, [r1, r0]
          if (g_tactile_i2c_async_data_txrx_idx[port] >=
 8002908:	d83e      	bhi.n	8002988 <tactile_internal_i2c_async_tick.part.2+0x150>
        g_tactile_i2c_async_data[port][txrx_idx] = i2c->DR;
        g_tactile_i2c_async_data_txrx_idx[port]++;
        if (g_tactile_i2c_async_data_txrx_idx[port] >=
            g_tactile_i2c_async_data_len[port])
        {
          i2c->CR1 |= I2C_CR1_STOP;
 800290a:	881a      	ldrh	r2, [r3, #0]
 800290c:	b292      	uxth	r2, r2
 800290e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
          *status = TATS_STOP;
 8002912:	2104      	movs	r1, #4
        g_tactile_i2c_async_data[port][txrx_idx] = i2c->DR;
        g_tactile_i2c_async_data_txrx_idx[port]++;
        if (g_tactile_i2c_async_data_txrx_idx[port] >=
            g_tactile_i2c_async_data_len[port])
        {
          i2c->CR1 |= I2C_CR1_STOP;
 8002914:	801a      	strh	r2, [r3, #0]
          *status = TATS_STOP;
 8002916:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
 800291a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          }
        }
      }
      break;
    case TATS_READ:
      if (i2c->SR1 & I2C_SR1_RXNE)
 800291c:	8a9a      	ldrh	r2, [r3, #20]
 800291e:	0652      	lsls	r2, r2, #25
 8002920:	d52a      	bpl.n	8002978 <tactile_internal_i2c_async_tick.part.2+0x140>
      {
        const uint8_t txrx_idx = g_tactile_i2c_async_data_txrx_idx[port];
 8002922:	4e2e      	ldr	r6, [pc, #184]	; (80029dc <tactile_internal_i2c_async_tick.part.2+0x1a4>)
        g_tactile_i2c_async_data[port][txrx_idx] = i2c->DR;
        g_tactile_i2c_async_data_txrx_idx[port]++;
        if (g_tactile_i2c_async_data_txrx_idx[port] >=
            g_tactile_i2c_async_data_len[port])
 8002924:	4a2c      	ldr	r2, [pc, #176]	; (80029d8 <tactile_internal_i2c_async_tick.part.2+0x1a0>)
      }
      break;
    case TATS_READ:
      if (i2c->SR1 & I2C_SR1_RXNE)
      {
        const uint8_t txrx_idx = g_tactile_i2c_async_data_txrx_idx[port];
 8002926:	5c31      	ldrb	r1, [r6, r0]
        g_tactile_i2c_async_data[port][txrx_idx] = i2c->DR;
        g_tactile_i2c_async_data_txrx_idx[port]++;
        if (g_tactile_i2c_async_data_txrx_idx[port] >=
            g_tactile_i2c_async_data_len[port])
 8002928:	5c15      	ldrb	r5, [r2, r0]
      break;
    case TATS_READ:
      if (i2c->SR1 & I2C_SR1_RXNE)
      {
        const uint8_t txrx_idx = g_tactile_i2c_async_data_txrx_idx[port];
        g_tactile_i2c_async_data[port][txrx_idx] = i2c->DR;
 800292a:	4f2d      	ldr	r7, [pc, #180]	; (80029e0 <tactile_internal_i2c_async_tick.part.2+0x1a8>)
 800292c:	f8b3 e010 	ldrh.w	lr, [r3, #16]
        g_tactile_i2c_async_data_txrx_idx[port]++;
 8002930:	1c4a      	adds	r2, r1, #1
 8002932:	b2d2      	uxtb	r2, r2
      break;
    case TATS_READ:
      if (i2c->SR1 & I2C_SR1_RXNE)
      {
        const uint8_t txrx_idx = g_tactile_i2c_async_data_txrx_idx[port];
        g_tactile_i2c_async_data[port][txrx_idx] = i2c->DR;
 8002934:	eb01 2100 	add.w	r1, r1, r0, lsl #8
        g_tactile_i2c_async_data_txrx_idx[port]++;
        if (g_tactile_i2c_async_data_txrx_idx[port] >=
 8002938:	42aa      	cmp	r2, r5
    case TATS_READ:
      if (i2c->SR1 & I2C_SR1_RXNE)
      {
        const uint8_t txrx_idx = g_tactile_i2c_async_data_txrx_idx[port];
        g_tactile_i2c_async_data[port][txrx_idx] = i2c->DR;
        g_tactile_i2c_async_data_txrx_idx[port]++;
 800293a:	5432      	strb	r2, [r6, r0]
      break;
    case TATS_READ:
      if (i2c->SR1 & I2C_SR1_RXNE)
      {
        const uint8_t txrx_idx = g_tactile_i2c_async_data_txrx_idx[port];
        g_tactile_i2c_async_data[port][txrx_idx] = i2c->DR;
 800293c:	f807 e001 	strb.w	lr, [r7, r1]
        g_tactile_i2c_async_data_txrx_idx[port]++;
        if (g_tactile_i2c_async_data_txrx_idx[port] >=
 8002940:	d2e3      	bcs.n	800290a <tactile_internal_i2c_async_tick.part.2+0xd2>
          i2c->CR1 |= I2C_CR1_STOP;
          *status = TATS_STOP;
        }
        else
        {
          if (g_tactile_i2c_async_data_len[port] - 1 ==
 8002942:	3d01      	subs	r5, #1
 8002944:	4295      	cmp	r5, r2
              g_tactile_i2c_async_data_txrx_idx[port])
            i2c->CR1 &= ~I2C_CR1_ACK; // last read
 8002946:	881a      	ldrh	r2, [r3, #0]
          i2c->CR1 |= I2C_CR1_STOP;
          *status = TATS_STOP;
        }
        else
        {
          if (g_tactile_i2c_async_data_len[port] - 1 ==
 8002948:	d024      	beq.n	8002994 <tactile_internal_i2c_async_tick.part.2+0x15c>
              g_tactile_i2c_async_data_txrx_idx[port])
            i2c->CR1 &= ~I2C_CR1_ACK; // last read
          else
            i2c->CR1 |=  I2C_CR1_ACK; // more reads to come. ack it.
 800294a:	b292      	uxth	r2, r2
 800294c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002950:	801a      	strh	r2, [r3, #0]
 8002952:	bdf0      	pop	{r4, r5, r6, r7, pc}
        }
      }
      break;
    case TATS_STOP:
      if (!(i2c->SR2 & I2C_SR2_BUSY))
 8002954:	8b1b      	ldrh	r3, [r3, #24]
 8002956:	079b      	lsls	r3, r3, #30
 8002958:	d40e      	bmi.n	8002978 <tactile_internal_i2c_async_tick.part.2+0x140>
      {
        *status = TATS_STOP_WAIT; // wait a bit for the line to clear
        g_tactile_i2c_async_start_us[port] = SYSTIME;
 800295a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800295e:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <tactile_internal_i2c_async_tick.part.2+0x194>)
 8002960:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002962:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
      }
      break;
    case TATS_STOP:
      if (!(i2c->SR2 & I2C_SR2_BUSY))
      {
        *status = TATS_STOP_WAIT; // wait a bit for the line to clear
 8002966:	2305      	movs	r3, #5
 8002968:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 800296c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else
          *status = TATS_DONE_SUCCESS;
      }
      break;
    default:
      *status = TATS_DONE_SUCCESS;
 800296e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002972:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 8002976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002978:	bdf0      	pop	{r4, r5, r6, r7, pc}
      {
        bool address_fail = (i2c->SR1 & I2C_SR1_AF) ? true : false;
        g_tactile_i2c_async_address_fail[port] = address_fail;
        int no_payload = (0 == g_tactile_i2c_async_data_len[port]);
        if (no_payload)
          i2c->CR1 |= I2C_CR1_STOP; // this seemed needed... not sure why now.
 800297a:	881a      	ldrh	r2, [r3, #0]
 800297c:	b292      	uxth	r2, r2
 800297e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002982:	801a      	strh	r2, [r3, #0]
        i2c->SR2; // un-stretch clock by reading here (?)
 8002984:	8b1a      	ldrh	r2, [r3, #24]
 8002986:	e7c0      	b.n	800290a <tactile_internal_i2c_async_tick.part.2+0xd2>
            *status = TATS_STOP;
          }
          else
          {
            const uint8_t txrx_idx = g_tactile_i2c_async_data_txrx_idx[port];
            i2c->DR = g_tactile_i2c_async_data[port][txrx_idx];
 8002988:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800298c:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <tactile_internal_i2c_async_tick.part.2+0x1a8>)
 800298e:	5c12      	ldrb	r2, [r2, r0]
 8002990:	821a      	strh	r2, [r3, #16]
 8002992:	bdf0      	pop	{r4, r5, r6, r7, pc}
        }
        else
        {
          if (g_tactile_i2c_async_data_len[port] - 1 ==
              g_tactile_i2c_async_data_txrx_idx[port])
            i2c->CR1 &= ~I2C_CR1_ACK; // last read
 8002994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002998:	0412      	lsls	r2, r2, #16
 800299a:	0c12      	lsrs	r2, r2, #16
 800299c:	801a      	strh	r2, [r3, #0]
 800299e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!address_fail && !no_payload)
        {
          if (!(g_tactile_i2c_async_address[port] & 0x1))
          {
            // it's a write transaction
            g_tactile_i2c_async_data_txrx_idx[port] = 0;
 80029a0:	490e      	ldr	r1, [pc, #56]	; (80029dc <tactile_internal_i2c_async_tick.part.2+0x1a4>)
            i2c->DR = g_tactile_i2c_async_data[port][0];
 80029a2:	4f0f      	ldr	r7, [pc, #60]	; (80029e0 <tactile_internal_i2c_async_tick.part.2+0x1a8>)
        if (!address_fail && !no_payload)
        {
          if (!(g_tactile_i2c_async_address[port] & 0x1))
          {
            // it's a write transaction
            g_tactile_i2c_async_data_txrx_idx[port] = 0;
 80029a4:	540d      	strb	r5, [r1, r0]
            i2c->DR = g_tactile_i2c_async_data[port][0];
 80029a6:	0206      	lsls	r6, r0, #8
            *status = TATS_WRITE;
 80029a8:	2202      	movs	r2, #2
        {
          if (!(g_tactile_i2c_async_address[port] & 0x1))
          {
            // it's a write transaction
            g_tactile_i2c_async_data_txrx_idx[port] = 0;
            i2c->DR = g_tactile_i2c_async_data[port][0];
 80029aa:	5dbe      	ldrb	r6, [r7, r6]
 80029ac:	821e      	strh	r6, [r3, #16]
            *status = TATS_WRITE;
 80029ae:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
 80029b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else
          {
            // it's a read transaction
            g_tactile_i2c_async_data_txrx_idx[port] = 0;
            if (g_tactile_i2c_async_data_len[port] == 1)
              i2c->CR1 &= ~I2C_CR1_ACK; // single-byte read
 80029b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b8:	0412      	lsls	r2, r2, #16
 80029ba:	0c12      	lsrs	r2, r2, #16
 80029bc:	801a      	strh	r2, [r3, #0]
 80029be:	e78b      	b.n	80028d8 <tactile_internal_i2c_async_tick.part.2+0xa0>
 80029c0:	200103f8 	.word	0x200103f8
 80029c4:	40005400 	.word	0x40005400
 80029c8:	40005c00 	.word	0x40005c00
 80029cc:	20010444 	.word	0x20010444
 80029d0:	20010418 	.word	0x20010418
 80029d4:	20010440 	.word	0x20010440
 80029d8:	20010454 	.word	0x20010454
 80029dc:	2001041c 	.word	0x2001041c
 80029e0:	2000ffe8 	.word	0x2000ffe8

080029e4 <tactile_i2c_async_start>:
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void tactile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 80029e4:	2802      	cmp	r0, #2
 80029e6:	d801      	bhi.n	80029ec <tactile_i2c_async_start+0x8>
 80029e8:	f7ff beca 	b.w	8002780 <tactile_i2c_async_start.part.1>
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop

080029f0 <tactile_internal_i2c_async_tick>:
  g_tactile_i2c_async_start_us[port] = SYSTIME;
}

void tactile_internal_i2c_async_tick(const uint_fast8_t port)
{
  if (port >= NUM_INTERNAL_I2C)
 80029f0:	2801      	cmp	r0, #1
 80029f2:	d900      	bls.n	80029f6 <tactile_internal_i2c_async_tick+0x6>
 80029f4:	4770      	bx	lr
 80029f6:	f7ff bf1f 	b.w	8002838 <tactile_internal_i2c_async_tick.part.2>
 80029fa:	bf00      	nop

080029fc <tactile_bridged_i2c_async_tick>:
  }
}

void tactile_bridged_i2c_async_tick(const uint_fast8_t tactile_port)
{
  if (tactile_port != 2 && tactile_port != 3)
 80029fc:	1e83      	subs	r3, r0, #2
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d900      	bls.n	8002a04 <tactile_bridged_i2c_async_tick+0x8>
 8002a02:	4770      	bx	lr
      break;
  }
}

void tactile_bridged_i2c_async_tick(const uint_fast8_t tactile_port)
{
 8002a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    spi = SPI2;
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
  }

  switch (*status)
 8002a08:	4f92      	ldr	r7, [pc, #584]	; (8002c54 <tactile_bridged_i2c_async_tick+0x258>)
  }
  else // bridge == 1
  {
    spi = SPI2;
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
 8002a0a:	4993      	ldr	r1, [pc, #588]	; (8002c58 <tactile_bridged_i2c_async_tick+0x25c>)
 8002a0c:	4d93      	ldr	r5, [pc, #588]	; (8002c5c <tactile_bridged_i2c_async_tick+0x260>)
  }

  switch (*status)
 8002a0e:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
  }
  else // bridge == 1
  {
    spi = SPI2;
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
 8002a12:	4c93      	ldr	r4, [pc, #588]	; (8002c60 <tactile_bridged_i2c_async_tick+0x264>)
 8002a14:	4a93      	ldr	r2, [pc, #588]	; (8002c64 <tactile_bridged_i2c_async_tick+0x268>)
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bf08      	it	eq
 8002a1a:	460a      	moveq	r2, r1
      break;
  }
}

void tactile_bridged_i2c_async_tick(const uint_fast8_t tactile_port)
{
 8002a1c:	b083      	sub	sp, #12
  }
  else // bridge == 1
  {
    spi = SPI2;
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
 8002a1e:	bf06      	itte	eq
 8002a20:	462c      	moveq	r4, r5
 8002a22:	2110      	moveq	r1, #16
 8002a24:	f44f 7100 	movne.w	r1, #512	; 0x200
  }

  switch (*status)
 8002a28:	2e08      	cmp	r6, #8
 8002a2a:	d813      	bhi.n	8002a54 <tactile_bridged_i2c_async_tick+0x58>
 8002a2c:	e8df f016 	tbh	[pc, r6, lsl #1]
 8002a30:	002e0019 	.word	0x002e0019
 8002a34:	00540041 	.word	0x00540041
 8002a38:	00e2007f 	.word	0x00e2007f
 8002a3c:	00b4009d 	.word	0x00b4009d
 8002a40:	0009      	.short	0x0009
          spi->DR = 0x0;
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
      }
      break;
    case TBPS_READ_TXRX_WAIT:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 30)
 8002a42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a46:	4988      	ldr	r1, [pc, #544]	; (8002c68 <tactile_bridged_i2c_async_tick+0x26c>)
 8002a48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a4a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002a4e:	1a52      	subs	r2, r2, r1
 8002a50:	2a1e      	cmp	r2, #30
 8002a52:	d903      	bls.n	8002a5c <tactile_bridged_i2c_async_tick+0x60>
        *status = TBPS_DONE_SUCCESS;
      break;
    default:
      *status = TBPS_DONE_SUCCESS; // spin here after it's done
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a58:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
      break;
  }
}
 8002a5c:	b003      	add	sp, #12
 8002a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  }

  switch (*status)
  {
    case TBPS_REQUEST_CS_LOW:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 4)
 8002a62:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8002a66:	4c80      	ldr	r4, [pc, #512]	; (8002c68 <tactile_bridged_i2c_async_tick+0x26c>)
 8002a68:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002a6a:	f854 6020 	ldr.w	r6, [r4, r0, lsl #2]
 8002a6e:	1b89      	subs	r1, r1, r6
 8002a70:	2904      	cmp	r1, #4
 8002a72:	d9f3      	bls.n	8002a5c <tactile_bridged_i2c_async_tick+0x60>
      {
        spi->DR = g_tactile_i2c_async_address[tactile_port] & 0x1; // send CMD, read or write
 8002a74:	497d      	ldr	r1, [pc, #500]	; (8002c6c <tactile_bridged_i2c_async_tick+0x270>)
 8002a76:	5c09      	ldrb	r1, [r1, r0]
 8002a78:	f001 0101 	and.w	r1, r1, #1
 8002a7c:	8191      	strh	r1, [r2, #12]
        *status = TBPS_REQUEST_TX_CMD;
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
 8002a7e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002a80:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
  {
    case TBPS_REQUEST_CS_LOW:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 4)
      {
        spi->DR = g_tactile_i2c_async_address[tactile_port] & 0x1; // send CMD, read or write
        *status = TBPS_REQUEST_TX_CMD;
 8002a84:	2201      	movs	r2, #1
 8002a86:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8002a8a:	e7e7      	b.n	8002a5c <tactile_bridged_i2c_async_tick+0x60>
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
      }
      break;
    case TBPS_REQUEST_TX_CMD:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
 8002a8c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8002a90:	4c75      	ldr	r4, [pc, #468]	; (8002c68 <tactile_bridged_i2c_async_tick+0x26c>)
 8002a92:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002a94:	f854 6020 	ldr.w	r6, [r4, r0, lsl #2]
 8002a98:	1b89      	subs	r1, r1, r6
 8002a9a:	290f      	cmp	r1, #15
 8002a9c:	d9de      	bls.n	8002a5c <tactile_bridged_i2c_async_tick+0x60>
      {
        spi->DR = g_tactile_i2c_async_data_len[tactile_port]; // send data len
 8002a9e:	4974      	ldr	r1, [pc, #464]	; (8002c70 <tactile_bridged_i2c_async_tick+0x274>)
 8002aa0:	5c09      	ldrb	r1, [r1, r0]
 8002aa2:	8191      	strh	r1, [r2, #12]
        *status = TBPS_REQUEST_TX_LEN;
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
 8002aa4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002aa6:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
      break;
    case TBPS_REQUEST_TX_CMD:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
      {
        spi->DR = g_tactile_i2c_async_data_len[tactile_port]; // send data len
        *status = TBPS_REQUEST_TX_LEN;
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8002ab0:	e7d4      	b.n	8002a5c <tactile_bridged_i2c_async_tick+0x60>
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
      }
      break;
    case TBPS_REQUEST_TX_LEN:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
 8002ab2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8002ab6:	4c6c      	ldr	r4, [pc, #432]	; (8002c68 <tactile_bridged_i2c_async_tick+0x26c>)
 8002ab8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002aba:	f854 6020 	ldr.w	r6, [r4, r0, lsl #2]
 8002abe:	1b89      	subs	r1, r1, r6
 8002ac0:	290f      	cmp	r1, #15
 8002ac2:	d9cb      	bls.n	8002a5c <tactile_bridged_i2c_async_tick+0x60>
      {
        spi->DR = g_tactile_i2c_async_address[tactile_port]; // send addr
 8002ac4:	4969      	ldr	r1, [pc, #420]	; (8002c6c <tactile_bridged_i2c_async_tick+0x270>)
 8002ac6:	5c09      	ldrb	r1, [r1, r0]
 8002ac8:	8191      	strh	r1, [r2, #12]
        *status = TBPS_REQUEST_TX_ADDR;
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
 8002aca:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002acc:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
      break;
    case TBPS_REQUEST_TX_LEN:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
      {
        spi->DR = g_tactile_i2c_async_address[tactile_port]; // send addr
        *status = TBPS_REQUEST_TX_ADDR;
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8002ad6:	e7c1      	b.n	8002a5c <tactile_bridged_i2c_async_tick+0x60>
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
      }
      break;
    case TBPS_REQUEST_TX_ADDR:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
 8002ad8:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8002adc:	4d62      	ldr	r5, [pc, #392]	; (8002c68 <tactile_bridged_i2c_async_tick+0x26c>)
 8002ade:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8002ae0:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
 8002ae4:	ebce 0606 	rsb	r6, lr, r6
 8002ae8:	2e0f      	cmp	r6, #15
 8002aea:	d9b7      	bls.n	8002a5c <tactile_bridged_i2c_async_tick+0x60>
      {
        if ((g_tactile_i2c_async_address[tactile_port] & 0x1) || // it's a read
 8002aec:	4e5f      	ldr	r6, [pc, #380]	; (8002c6c <tactile_bridged_i2c_async_tick+0x270>)
 8002aee:	5c36      	ldrb	r6, [r6, r0]
 8002af0:	f016 0601 	ands.w	r6, r6, #1
 8002af4:	f040 80a1 	bne.w	8002c3a <tactile_bridged_i2c_async_tick+0x23e>
            g_tactile_i2c_async_data_len[tactile_port] == 0)     // or, no data
 8002af8:	f8df e174 	ldr.w	lr, [pc, #372]	; 8002c70 <tactile_bridged_i2c_async_tick+0x274>
      }
      break;
    case TBPS_REQUEST_TX_ADDR:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
      {
        if ((g_tactile_i2c_async_address[tactile_port] & 0x1) || // it's a read
 8002afc:	f81e e000 	ldrb.w	lr, [lr, r0]
 8002b00:	f1be 0f00 	cmp.w	lr, #0
 8002b04:	f000 8099 	beq.w	8002c3a <tactile_bridged_i2c_async_tick+0x23e>
        }
        else
        {
          *status = TBPS_TX_DATA;
          g_tactile_i2c_async_data_txrx_idx[tactile_port] = 0;
          spi->DR = g_tactile_i2c_async_data[tactile_port][0];
 8002b08:	f8df c168 	ldr.w	ip, [pc, #360]	; 8002c74 <tactile_bridged_i2c_async_tick+0x278>
          *status = TBPS_WAIT_FOR_COMPLETION;
        }
        else
        {
          *status = TBPS_TX_DATA;
          g_tactile_i2c_async_data_txrx_idx[tactile_port] = 0;
 8002b0c:	f8df e168 	ldr.w	lr, [pc, #360]	; 8002c78 <tactile_bridged_i2c_async_tick+0x27c>
          spi->DR = g_tactile_i2c_async_data[tactile_port][0];
 8002b10:	0201      	lsls	r1, r0, #8
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
          *status = TBPS_WAIT_FOR_COMPLETION;
        }
        else
        {
          *status = TBPS_TX_DATA;
 8002b12:	2404      	movs	r4, #4
          g_tactile_i2c_async_data_txrx_idx[tactile_port] = 0;
          spi->DR = g_tactile_i2c_async_data[tactile_port][0];
 8002b14:	f81c 1001 	ldrb.w	r1, [ip, r1]
          *status = TBPS_WAIT_FOR_COMPLETION;
        }
        else
        {
          *status = TBPS_TX_DATA;
          g_tactile_i2c_async_data_txrx_idx[tactile_port] = 0;
 8002b18:	f80e 6000 	strb.w	r6, [lr, r0]
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
          *status = TBPS_WAIT_FOR_COMPLETION;
        }
        else
        {
          *status = TBPS_TX_DATA;
 8002b1c:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
          g_tactile_i2c_async_data_txrx_idx[tactile_port] = 0;
          spi->DR = g_tactile_i2c_async_data[tactile_port][0];
 8002b20:	8191      	strh	r1, [r2, #12]
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
          *status = TBPS_READ_TXRX_WAIT;
        }
        else
          spi->DR = 0x0;
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
 8002b22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
 8002b2c:	e796      	b.n	8002a5c <tactile_bridged_i2c_async_tick+0x60>
        }
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
      }
      break;
    case TBPS_TX_DATA:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
 8002b2e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8002b32:	4d4d      	ldr	r5, [pc, #308]	; (8002c68 <tactile_bridged_i2c_async_tick+0x26c>)
 8002b34:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8002b36:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
 8002b3a:	ebce 0606 	rsb	r6, lr, r6
 8002b3e:	2e0f      	cmp	r6, #15
 8002b40:	d98c      	bls.n	8002a5c <tactile_bridged_i2c_async_tick+0x60>
      {
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] + 1 ==
 8002b42:	f8df e134 	ldr.w	lr, [pc, #308]	; 8002c78 <tactile_bridged_i2c_async_tick+0x27c>
            g_tactile_i2c_async_data_len[tactile_port])
 8002b46:	f8df c128 	ldr.w	ip, [pc, #296]	; 8002c70 <tactile_bridged_i2c_async_tick+0x274>
      }
      break;
    case TBPS_TX_DATA:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
      {
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] + 1 ==
 8002b4a:	f81e 6000 	ldrb.w	r6, [lr, r0]
 8002b4e:	f81c c000 	ldrb.w	ip, [ip, r0]
 8002b52:	3601      	adds	r6, #1
 8002b54:	4566      	cmp	r6, ip
 8002b56:	d070      	beq.n	8002c3a <tactile_bridged_i2c_async_tick+0x23e>
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
          *status = TBPS_WAIT_FOR_COMPLETION;
        }
        else
        {
          g_tactile_i2c_async_data_txrx_idx[tactile_port]++;
 8002b58:	b2f6      	uxtb	r6, r6
          spi->DR = g_tactile_i2c_async_data[tactile_port][
 8002b5a:	eb06 2300 	add.w	r3, r6, r0, lsl #8
 8002b5e:	4945      	ldr	r1, [pc, #276]	; (8002c74 <tactile_bridged_i2c_async_tick+0x278>)
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
          *status = TBPS_WAIT_FOR_COMPLETION;
        }
        else
        {
          g_tactile_i2c_async_data_txrx_idx[tactile_port]++;
 8002b60:	f80e 6000 	strb.w	r6, [lr, r0]
          spi->DR = g_tactile_i2c_async_data[tactile_port][
 8002b64:	5ccb      	ldrb	r3, [r1, r3]
 8002b66:	8193      	strh	r3, [r2, #12]
 8002b68:	e7db      	b.n	8002b22 <tactile_bridged_i2c_async_tick+0x126>
            *status = TBPS_DONE_SUCCESS; // faster if we don't check...
        }
      }
      break;
    case TBPS_READ_CS_LOW:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 4)
 8002b6a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8002b6e:	4c3e      	ldr	r4, [pc, #248]	; (8002c68 <tactile_bridged_i2c_async_tick+0x26c>)
 8002b70:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002b72:	f854 6020 	ldr.w	r6, [r4, r0, lsl #2]
 8002b76:	1b89      	subs	r1, r1, r6
 8002b78:	2904      	cmp	r1, #4
 8002b7a:	f67f af6f 	bls.w	8002a5c <tactile_bridged_i2c_async_tick+0x60>
      {
        spi->DR = 0x06; // read buffer command
 8002b7e:	2106      	movs	r1, #6
 8002b80:	8191      	strh	r1, [r2, #12]
        spi->DR;
 8002b82:	8992      	ldrh	r2, [r2, #12]
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
        *status = TBPS_READ_TXRX;
        g_tactile_i2c_async_data_txrx_idx[tactile_port] = 0;
 8002b84:	493c      	ldr	r1, [pc, #240]	; (8002c78 <tactile_bridged_i2c_async_tick+0x27c>)
    case TBPS_READ_CS_LOW:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 4)
      {
        spi->DR = 0x06; // read buffer command
        spi->DR;
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
 8002b86:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002b88:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
        *status = TBPS_READ_TXRX;
        g_tactile_i2c_async_data_txrx_idx[tactile_port] = 0;
 8002b8c:	2400      	movs	r4, #0
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 4)
      {
        spi->DR = 0x06; // read buffer command
        spi->DR;
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
        *status = TBPS_READ_TXRX;
 8002b8e:	2207      	movs	r2, #7
        g_tactile_i2c_async_data_txrx_idx[tactile_port] = 0;
 8002b90:	540c      	strb	r4, [r1, r0]
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 4)
      {
        spi->DR = 0x06; // read buffer command
        spi->DR;
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
        *status = TBPS_READ_TXRX;
 8002b92:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8002b96:	e761      	b.n	8002a5c <tactile_bridged_i2c_async_tick+0x60>
        g_tactile_i2c_async_data_txrx_idx[tactile_port] = 0;
      }
      break;
    case TBPS_READ_TXRX:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
 8002b98:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8002b9c:	4d32      	ldr	r5, [pc, #200]	; (8002c68 <tactile_bridged_i2c_async_tick+0x26c>)
 8002b9e:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8002ba0:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
 8002ba4:	ebce 0606 	rsb	r6, lr, r6
 8002ba8:	2e0f      	cmp	r6, #15
 8002baa:	f67f af57 	bls.w	8002a5c <tactile_bridged_i2c_async_tick+0x60>
      {
        volatile uint8_t dr = (uint8_t)spi->DR;
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] > 0)
 8002bae:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 8002c78 <tactile_bridged_i2c_async_tick+0x27c>
      }
      break;
    case TBPS_READ_TXRX:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
      {
        volatile uint8_t dr = (uint8_t)spi->DR;
 8002bb2:	f8b2 e00c 	ldrh.w	lr, [r2, #12]
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] > 0)
 8002bb6:	f81c 6000 	ldrb.w	r6, [ip, r0]
      }
      break;
    case TBPS_READ_TXRX:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
      {
        volatile uint8_t dr = (uint8_t)spi->DR;
 8002bba:	fa5f fe8e 	uxtb.w	lr, lr
 8002bbe:	f88d e007 	strb.w	lr, [sp, #7]
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] > 0)
 8002bc2:	b146      	cbz	r6, 8002bd6 <tactile_bridged_i2c_async_tick+0x1da>
        {
          g_tactile_i2c_async_data[tactile_port][
            g_tactile_i2c_async_data_txrx_idx[tactile_port]-1] = dr;
 8002bc4:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 8002c74 <tactile_bridged_i2c_async_tick+0x278>
 8002bc8:	f89d 8007 	ldrb.w	r8, [sp, #7]
 8002bcc:	eb0e 2e00 	add.w	lr, lr, r0, lsl #8
 8002bd0:	44b6      	add	lr, r6
 8002bd2:	f80e 8c01 	strb.w	r8, [lr, #-1]
        } 
        g_tactile_i2c_async_data_txrx_idx[tactile_port]++;
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] ==
            g_tactile_i2c_async_data_len[tactile_port] + 1)
 8002bd6:	f8df e098 	ldr.w	lr, [pc, #152]	; 8002c70 <tactile_bridged_i2c_async_tick+0x274>
 8002bda:	f81e e000 	ldrb.w	lr, [lr, r0]
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] > 0)
        {
          g_tactile_i2c_async_data[tactile_port][
            g_tactile_i2c_async_data_txrx_idx[tactile_port]-1] = dr;
        } 
        g_tactile_i2c_async_data_txrx_idx[tactile_port]++;
 8002bde:	3601      	adds	r6, #1
 8002be0:	b2f6      	uxtb	r6, r6
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] ==
            g_tactile_i2c_async_data_len[tactile_port] + 1)
 8002be2:	f10e 0e01 	add.w	lr, lr, #1
        {
          g_tactile_i2c_async_data[tactile_port][
            g_tactile_i2c_async_data_txrx_idx[tactile_port]-1] = dr;
        } 
        g_tactile_i2c_async_data_txrx_idx[tactile_port]++;
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] ==
 8002be6:	4576      	cmp	r6, lr
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] > 0)
        {
          g_tactile_i2c_async_data[tactile_port][
            g_tactile_i2c_async_data_txrx_idx[tactile_port]-1] = dr;
        } 
        g_tactile_i2c_async_data_txrx_idx[tactile_port]++;
 8002be8:	f80c 6000 	strb.w	r6, [ip, r0]
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] ==
 8002bec:	d02b      	beq.n	8002c46 <tactile_bridged_i2c_async_tick+0x24a>
        {
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
          *status = TBPS_READ_TXRX_WAIT;
        }
        else
          spi->DR = 0x0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	8193      	strh	r3, [r2, #12]
 8002bf2:	e796      	b.n	8002b22 <tactile_bridged_i2c_async_tick+0x126>
      }
      break;
    case TBPS_WAIT_FOR_COMPLETION:
      {
        const uint32_t us_to_wait = 180 + 110 *
                                    g_tactile_i2c_async_data_len[tactile_port];
 8002bf4:	4d1e      	ldr	r5, [pc, #120]	; (8002c70 <tactile_bridged_i2c_async_tick+0x274>)
        if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > us_to_wait)
 8002bf6:	f8df e070 	ldr.w	lr, [pc, #112]	; 8002c68 <tactile_bridged_i2c_async_tick+0x26c>
      }
      break;
    case TBPS_WAIT_FOR_COMPLETION:
      {
        const uint32_t us_to_wait = 180 + 110 *
                                    g_tactile_i2c_async_data_len[tactile_port];
 8002bfa:	f815 8000 	ldrb.w	r8, [r5, r0]
        if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > us_to_wait)
 8002bfe:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
      }
      break;
    case TBPS_WAIT_FOR_COMPLETION:
      {
        const uint32_t us_to_wait = 180 + 110 *
 8002c02:	266e      	movs	r6, #110	; 0x6e
                                    g_tactile_i2c_async_data_len[tactile_port];
        if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > us_to_wait)
 8002c04:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
 8002c08:	f85e 9020 	ldr.w	r9, [lr, r0, lsl #2]
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
      }
      break;
    case TBPS_WAIT_FOR_COMPLETION:
      {
        const uint32_t us_to_wait = 180 + 110 *
 8002c0c:	25b4      	movs	r5, #180	; 0xb4
                                    g_tactile_i2c_async_data_len[tactile_port];
        if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > us_to_wait)
 8002c0e:	ebc9 0202 	rsb	r2, r9, r2
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
      }
      break;
    case TBPS_WAIT_FOR_COMPLETION:
      {
        const uint32_t us_to_wait = 180 + 110 *
 8002c12:	fb16 5508 	smlabb	r5, r6, r8, r5
                                    g_tactile_i2c_async_data_len[tactile_port];
        if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > us_to_wait)
 8002c16:	4295      	cmp	r5, r2
 8002c18:	f4bf af20 	bcs.w	8002a5c <tactile_bridged_i2c_async_tick+0x60>
        {
          if (g_tactile_i2c_async_address[tactile_port] & 0x1)
 8002c1c:	4a13      	ldr	r2, [pc, #76]	; (8002c6c <tactile_bridged_i2c_async_tick+0x270>)
 8002c1e:	5c12      	ldrb	r2, [r2, r0]
 8002c20:	07d2      	lsls	r2, r2, #31
 8002c22:	f57f af17 	bpl.w	8002a54 <tactile_bridged_i2c_async_tick+0x58>
          {
            // it's a read. we need to harvest the data now.
            *status = TBPS_READ_CS_LOW;
            cs_gpio->BSRRH = cs_pin_mask;
 8002c26:	b289      	uxth	r1, r1
 8002c28:	8361      	strh	r1, [r4, #26]
            g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
 8002c2a:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
 8002c2e:	f84e 2020 	str.w	r2, [lr, r0, lsl #2]
        if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > us_to_wait)
        {
          if (g_tactile_i2c_async_address[tactile_port] & 0x1)
          {
            // it's a read. we need to harvest the data now.
            *status = TBPS_READ_CS_LOW;
 8002c32:	2206      	movs	r2, #6
 8002c34:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8002c38:	e710      	b.n	8002a5c <tactile_bridged_i2c_async_tick+0x60>
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
      {
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] + 1 ==
            g_tactile_i2c_async_data_len[tactile_port])
        {
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
 8002c3a:	b289      	uxth	r1, r1
          *status = TBPS_WAIT_FOR_COMPLETION;
 8002c3c:	2205      	movs	r2, #5
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
      {
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] + 1 ==
            g_tactile_i2c_async_data_len[tactile_port])
        {
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
 8002c3e:	8321      	strh	r1, [r4, #24]
          *status = TBPS_WAIT_FOR_COMPLETION;
 8002c40:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8002c44:	e76d      	b.n	8002b22 <tactile_bridged_i2c_async_tick+0x126>
        } 
        g_tactile_i2c_async_data_txrx_idx[tactile_port]++;
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] ==
            g_tactile_i2c_async_data_len[tactile_port] + 1)
        {
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
 8002c46:	b289      	uxth	r1, r1
          *status = TBPS_READ_TXRX_WAIT;
 8002c48:	2208      	movs	r2, #8
        } 
        g_tactile_i2c_async_data_txrx_idx[tactile_port]++;
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] ==
            g_tactile_i2c_async_data_len[tactile_port] + 1)
        {
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
 8002c4a:	8321      	strh	r1, [r4, #24]
          *status = TBPS_READ_TXRX_WAIT;
 8002c4c:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8002c50:	e767      	b.n	8002b22 <tactile_bridged_i2c_async_tick+0x126>
 8002c52:	bf00      	nop
 8002c54:	20010410 	.word	0x20010410
 8002c58:	40013000 	.word	0x40013000
 8002c5c:	40020000 	.word	0x40020000
 8002c60:	40020400 	.word	0x40020400
 8002c64:	40003800 	.word	0x40003800
 8002c68:	20010444 	.word	0x20010444
 8002c6c:	20010440 	.word	0x20010440
 8002c70:	20010454 	.word	0x20010454
 8002c74:	2000ffe8 	.word	0x2000ffe8
 8002c78:	2001041c 	.word	0x2001041c

08002c7c <tactile_i2c_async_tick>:
  }
}

void tactile_i2c_async_tick(const uint_fast8_t port)
{
  if (port >= NUM_TACTILE_PORTS)
 8002c7c:	2803      	cmp	r0, #3
 8002c7e:	d803      	bhi.n	8002c88 <tactile_i2c_async_tick+0xc>
    return; // let's not corrupt memory.
  if (port == 0 || port == 1) // on-chip i2c transceiver
 8002c80:	2801      	cmp	r0, #1
 8002c82:	d902      	bls.n	8002c8a <tactile_i2c_async_tick+0xe>
    tactile_internal_i2c_async_tick(port);
  else
    tactile_bridged_i2c_async_tick(port);
 8002c84:	f7ff beba 	b.w	80029fc <tactile_bridged_i2c_async_tick>
 8002c88:	4770      	bx	lr
 8002c8a:	f7ff bdd5 	b.w	8002838 <tactile_internal_i2c_async_tick.part.2>
 8002c8e:	bf00      	nop

08002c90 <tactile_bridge_reset>:
  */
  printf("done with tactile_init()\r\n");
}

void tactile_bridge_reset()
{
 8002c90:	b500      	push	{lr}
  // the two SPI-I2C bridges have their RESETs tied to a common MCU pin,
  // so this function will reset both of them
  printf("tactile_bridge_reset()\r\n");
 8002c92:	4814      	ldr	r0, [pc, #80]	; (8002ce4 <tactile_bridge_reset+0x54>)
  */
  printf("done with tactile_init()\r\n");
}

void tactile_bridge_reset()
{
 8002c94:	b083      	sub	sp, #12
  // the two SPI-I2C bridges have their RESETs tied to a common MCU pin,
  // so this function will reset both of them
  printf("tactile_bridge_reset()\r\n");
 8002c96:	f000 fff7 	bl	8003c88 <puts>
  GPIOC->BSRRH = 1 << PORTC_I2C_BRIDGE_RESET;
 8002c9a:	4a13      	ldr	r2, [pc, #76]	; (8002ce8 <tactile_bridge_reset+0x58>)
  for (volatile int i = 0; i < 10000; i++) { } // assert RESET
 8002c9c:	2300      	movs	r3, #0
void tactile_bridge_reset()
{
  // the two SPI-I2C bridges have their RESETs tied to a common MCU pin,
  // so this function will reset both of them
  printf("tactile_bridge_reset()\r\n");
  GPIOC->BSRRH = 1 << PORTC_I2C_BRIDGE_RESET;
 8002c9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ca2:	8351      	strh	r1, [r2, #26]
  for (volatile int i = 0; i < 10000; i++) { } // assert RESET
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	9b00      	ldr	r3, [sp, #0]
 8002ca8:	f242 720f 	movw	r2, #9999	; 0x270f
 8002cac:	4293      	cmp	r3, r2
 8002cae:	dc05      	bgt.n	8002cbc <tactile_bridge_reset+0x2c>
 8002cb0:	9b00      	ldr	r3, [sp, #0]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	9b00      	ldr	r3, [sp, #0]
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	ddf9      	ble.n	8002cb0 <tactile_bridge_reset+0x20>
  GPIOC->BSRRL = 1 << PORTC_I2C_BRIDGE_RESET;
 8002cbc:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <tactile_bridge_reset+0x58>)
  for (volatile int i = 0; i < 10000; i++) { } // then let them boot up
 8002cbe:	2300      	movs	r3, #0
  // the two SPI-I2C bridges have their RESETs tied to a common MCU pin,
  // so this function will reset both of them
  printf("tactile_bridge_reset()\r\n");
  GPIOC->BSRRH = 1 << PORTC_I2C_BRIDGE_RESET;
  for (volatile int i = 0; i < 10000; i++) { } // assert RESET
  GPIOC->BSRRL = 1 << PORTC_I2C_BRIDGE_RESET;
 8002cc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cc4:	8311      	strh	r1, [r2, #24]
  for (volatile int i = 0; i < 10000; i++) { } // then let them boot up
 8002cc6:	9301      	str	r3, [sp, #4]
 8002cc8:	9b01      	ldr	r3, [sp, #4]
 8002cca:	f242 720f 	movw	r2, #9999	; 0x270f
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	dc05      	bgt.n	8002cde <tactile_bridge_reset+0x4e>
 8002cd2:	9b01      	ldr	r3, [sp, #4]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	9b01      	ldr	r3, [sp, #4]
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	ddf9      	ble.n	8002cd2 <tactile_bridge_reset+0x42>
}
 8002cde:	b003      	add	sp, #12
 8002ce0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ce4:	0800a99c 	.word	0x0800a99c
 8002ce8:	40020800 	.word	0x40020800

08002cec <tactile_init>:
}

//////////////////////////////////////////////////////////////////////////////

void tactile_init()
{
 8002cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cee:	b083      	sub	sp, #12
  tactile_bridge_reset();
 8002cf0:	f7ff ffce 	bl	8002c90 <tactile_bridge_reset>
  for (int i = 0; i < 2; i++)
 8002cf4:	2500      	movs	r5, #0
 8002cf6:	b2ee      	uxtb	r6, r5
}

//////////////////////////////////////////////////////////////////////////////

void tactile_init()
{
 8002cf8:	2400      	movs	r4, #0
  tactile_bridge_reset();
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 6; j++)
      printf("tactile bridge %d reg %d: 0x%02x\r\n",
             i, j, tactile_bridge_read_reg(i, j));
 8002cfa:	b2e1      	uxtb	r1, r4
 8002cfc:	4630      	mov	r0, r6
 8002cfe:	f7ff fd21 	bl	8002744 <tactile_bridge_read_reg>
void tactile_init()
{
  tactile_bridge_reset();
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 6; j++)
      printf("tactile bridge %d reg %d: 0x%02x\r\n",
 8002d02:	4622      	mov	r2, r4
             i, j, tactile_bridge_read_reg(i, j));
 8002d04:	4603      	mov	r3, r0
void tactile_init()
{
  tactile_bridge_reset();
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 6; j++)
      printf("tactile bridge %d reg %d: 0x%02x\r\n",
 8002d06:	4629      	mov	r1, r5
 8002d08:	4814      	ldr	r0, [pc, #80]	; (8002d5c <tactile_init+0x70>)

void tactile_init()
{
  tactile_bridge_reset();
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 6; j++)
 8002d0a:	3401      	adds	r4, #1
      printf("tactile bridge %d reg %d: 0x%02x\r\n",
 8002d0c:	f000 ff76 	bl	8003bfc <printf>

void tactile_init()
{
  tactile_bridge_reset();
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 6; j++)
 8002d10:	2c06      	cmp	r4, #6
 8002d12:	d1f2      	bne.n	8002cfa <tactile_init+0xe>
//////////////////////////////////////////////////////////////////////////////

void tactile_init()
{
  tactile_bridge_reset();
  for (int i = 0; i < 2; i++)
 8002d14:	b90d      	cbnz	r5, 8002d1a <tactile_init+0x2e>
 8002d16:	2501      	movs	r5, #1
 8002d18:	e7ed      	b.n	8002cf6 <tactile_init+0xa>
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	aa01      	add	r2, sp, #4
 8002d1e:	4603      	mov	r3, r0

static void tactile_bridge_write_reg(const uint8_t bridge_idx,
                                     const uint8_t reg_idx,
                                     const uint8_t reg_val)
{
  uint8_t txd[3] = {0x20, reg_idx, reg_val};
 8002d20:	2720      	movs	r7, #32
 8002d22:	2602      	movs	r6, #2
 8002d24:	2405      	movs	r4, #5
 8002d26:	2103      	movs	r1, #3
 8002d28:	f88d 7004 	strb.w	r7, [sp, #4]
 8002d2c:	f88d 6005 	strb.w	r6, [sp, #5]
 8002d30:	f88d 4006 	strb.w	r4, [sp, #6]
 8002d34:	f7ff fca0 	bl	8002678 <tactile_bridge_spi_txrx.part.0>
 8002d38:	aa01      	add	r2, sp, #4
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	2103      	movs	r1, #3
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f88d 7004 	strb.w	r7, [sp, #4]
 8002d44:	f88d 6005 	strb.w	r6, [sp, #5]
 8002d48:	f88d 4006 	strb.w	r4, [sp, #6]
 8002d4c:	f7ff fc94 	bl	8002678 <tactile_bridge_spi_txrx.part.0>
             result == I2C_SUCCESS ? "SUCCESS" : "FAIL",
             port, sensor, mcu_addr);
    }
  }
  */
  printf("done with tactile_init()\r\n");
 8002d50:	4803      	ldr	r0, [pc, #12]	; (8002d60 <tactile_init+0x74>)
 8002d52:	f000 ff99 	bl	8003c88 <puts>
}
 8002d56:	b003      	add	sp, #12
 8002d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	0800a9b4 	.word	0x0800a9b4
 8002d60:	0800a9d8 	.word	0x0800a9d8

08002d64 <tactile_bridge_wait_for_completion>:

tactile_i2c_result_t
tactile_bridge_wait_for_completion
  (const uint_fast8_t bridge_idx,
   const uint32_t wait_time)
{
 8002d64:	b570      	push	{r4, r5, r6, lr}
 8002d66:	b082      	sub	sp, #8
  for (volatile int i = 0; i < wait_time; i++) { } // la di dah...
 8002d68:	2300      	movs	r3, #0
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	9b00      	ldr	r3, [sp, #0]
 8002d6e:	4299      	cmp	r1, r3
 8002d70:	d905      	bls.n	8002d7e <tactile_bridge_wait_for_completion+0x1a>
 8002d72:	9b00      	ldr	r3, [sp, #0]
 8002d74:	3301      	adds	r3, #1
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	9b00      	ldr	r3, [sp, #0]
 8002d7a:	428b      	cmp	r3, r1
 8002d7c:	d3f9      	bcc.n	8002d72 <tactile_bridge_wait_for_completion+0xe>
 8002d7e:	b2c5      	uxtb	r5, r0

tactile_i2c_result_t
tactile_bridge_wait_for_completion
  (const uint_fast8_t bridge_idx,
   const uint32_t wait_time)
{
 8002d80:	f240 34e9 	movw	r4, #1001	; 0x3e9
  for (volatile int i = 0; i < wait_time; i++) { } // la di dah...
  uint8_t bridge_state = 0xf3;
  int wait_count = 0;
  while (bridge_state == 0xf3)
  {
    for (volatile int i = 0; i < 1000; i++) { } // la di dah...
 8002d84:	2600      	movs	r6, #0
 8002d86:	9601      	str	r6, [sp, #4]
 8002d88:	9b01      	ldr	r3, [sp, #4]
 8002d8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d8e:	da06      	bge.n	8002d9e <tactile_bridge_wait_for_completion+0x3a>
 8002d90:	9b01      	ldr	r3, [sp, #4]
 8002d92:	3301      	adds	r3, #1
 8002d94:	9301      	str	r3, [sp, #4]
 8002d96:	9b01      	ldr	r3, [sp, #4]
 8002d98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d9c:	dbf8      	blt.n	8002d90 <tactile_bridge_wait_for_completion+0x2c>
    bridge_state = tactile_bridge_read_reg(bridge_idx, 0x4);
 8002d9e:	4628      	mov	r0, r5
 8002da0:	2104      	movs	r1, #4
 8002da2:	f7ff fccf 	bl	8002744 <tactile_bridge_read_reg>
    if (++wait_count > 1000)
 8002da6:	3c01      	subs	r4, #1
 8002da8:	d008      	beq.n	8002dbc <tactile_bridge_wait_for_completion+0x58>
   const uint32_t wait_time)
{
  for (volatile int i = 0; i < wait_time; i++) { } // la di dah...
  uint8_t bridge_state = 0xf3;
  int wait_count = 0;
  while (bridge_state == 0xf3)
 8002daa:	28f3      	cmp	r0, #243	; 0xf3
 8002dac:	d0eb      	beq.n	8002d86 <tactile_bridge_wait_for_completion+0x22>
    bridge_state = tactile_bridge_read_reg(bridge_idx, 0x4);
    if (++wait_count > 1000)
    {
      // a SPI-I2C bridge locked up. try to reset them.
      tactile_bridge_reset();
      return I2C_FAIL;
 8002dae:	f1a0 00f0 	sub.w	r0, r0, #240	; 0xf0
 8002db2:	fab0 f080 	clz	r0, r0
 8002db6:	0940      	lsrs	r0, r0, #5
  }
  if (bridge_state == 0xf0)
    return I2C_SUCCESS;
  else
    return I2C_FAIL;
}
 8002db8:	b002      	add	sp, #8
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
    for (volatile int i = 0; i < 1000; i++) { } // la di dah...
    bridge_state = tactile_bridge_read_reg(bridge_idx, 0x4);
    if (++wait_count > 1000)
    {
      // a SPI-I2C bridge locked up. try to reset them.
      tactile_bridge_reset();
 8002dbc:	f7ff ff68 	bl	8002c90 <tactile_bridge_reset>
      return I2C_FAIL;
 8002dc0:	4620      	mov	r0, r4
  }
  if (bridge_state == 0xf0)
    return I2C_SUCCESS;
  else
    return I2C_FAIL;
}
 8002dc2:	b002      	add	sp, #8
 8002dc4:	bd70      	pop	{r4, r5, r6, pc}
 8002dc6:	bf00      	nop

08002dc8 <tactile_i2c>:

tactile_i2c_result_t tactile_i2c(uint8_t port,
                                 uint8_t address,
                                 uint8_t *data,
                                 uint8_t data_len)
{
 8002dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (port == 0 || port == 1) // these ports are MCU on-chip I2C interfaces
 8002dcc:	2801      	cmp	r0, #1

tactile_i2c_result_t tactile_i2c(uint8_t port,
                                 uint8_t address,
                                 uint8_t *data,
                                 uint8_t data_len)
{
 8002dce:	b0c3      	sub	sp, #268	; 0x10c
 8002dd0:	468e      	mov	lr, r1
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	4614      	mov	r4, r2
 8002dd6:	461d      	mov	r5, r3
  if (port == 0 || port == 1) // these ports are MCU on-chip I2C interfaces
 8002dd8:	d93b      	bls.n	8002e52 <tactile_i2c+0x8a>
    i2c->CR1 |= I2C_CR1_STOP;
    while (i2c->SR2 & I2C_SR2_BUSY) { }
    for (volatile int i = 0; i < 3000; i++) { } // wait a bit
    return address_fail ? I2C_FAIL : I2C_SUCCESS;
  }
  else if (port == 2 || port == 3) // these ports are via SPI-I2C bridge chips
 8002dda:	1e82      	subs	r2, r0, #2
 8002ddc:	b2d6      	uxtb	r6, r2
 8002dde:	2e01      	cmp	r6, #1
 8002de0:	d905      	bls.n	8002dee <tactile_i2c+0x26>
      return tactile_bridge_i2c_read(bridge_idx, address, data_len, data);
    else
      return tactile_bridge_i2c_write(bridge_idx, address, data_len, data);
  }
  else
    return I2C_FAIL;
 8002de2:	2000      	movs	r0, #0
}
 8002de4:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8002de8:	46bd      	mov	sp, r7
 8002dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return address_fail ? I2C_FAIL : I2C_SUCCESS;
  }
  else if (port == 2 || port == 3) // these ports are via SPI-I2C bridge chips
  {
    const uint8_t bridge_idx = port - 2;
    if (address & 0x1) // is it a read transaction?
 8002dee:	f011 0301 	ands.w	r3, r1, #1
 8002df2:	f040 808f 	bne.w	8002f14 <tactile_i2c+0x14c>
{
  uint8_t trimmed_tx_len = tx_len;
  if (trimmed_tx_len > 250)
    trimmed_tx_len = 250;
  uint8_t msg[256];
  msg[0] = 0x00; // write i2c command
 8002df6:	f107 0208 	add.w	r2, r7, #8
 8002dfa:	2dfa      	cmp	r5, #250	; 0xfa
 8002dfc:	46ac      	mov	ip, r5
 8002dfe:	bf28      	it	cs
 8002e00:	f04f 0cfa 	movcs.w	ip, #250	; 0xfa
 8002e04:	7013      	strb	r3, [r2, #0]
  msg[1] = trimmed_tx_len;
  msg[2] = i2c_addr; // will always perform a write... ignores the LSB
 8002e06:	7091      	strb	r1, [r2, #2]
  uint8_t trimmed_tx_len = tx_len;
  if (trimmed_tx_len > 250)
    trimmed_tx_len = 250;
  uint8_t msg[256];
  msg[0] = 0x00; // write i2c command
  msg[1] = trimmed_tx_len;
 8002e08:	f882 c001 	strb.w	ip, [r2, #1]
  msg[2] = i2c_addr; // will always perform a write... ignores the LSB

  for (int i = 0; i < trimmed_tx_len; i++)
 8002e0c:	f1bc 0f00 	cmp.w	ip, #0
 8002e10:	d00c      	beq.n	8002e2c <tactile_i2c+0x64>
 8002e12:	f10c 0302 	add.w	r3, ip, #2
 8002e16:	1e61      	subs	r1, r4, #1
 8002e18:	461c      	mov	r4, r3
 8002e1a:	4414      	add	r4, r2
 8002e1c:	f107 030a 	add.w	r3, r7, #10
    msg[i+3] = txd[i];
 8002e20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8002e24:	f803 0f01 	strb.w	r0, [r3, #1]!
  uint8_t msg[256];
  msg[0] = 0x00; // write i2c command
  msg[1] = trimmed_tx_len;
  msg[2] = i2c_addr; // will always perform a write... ignores the LSB

  for (int i = 0; i < trimmed_tx_len; i++)
 8002e28:	42a3      	cmp	r3, r4
 8002e2a:	d1f9      	bne.n	8002e20 <tactile_i2c+0x58>
    msg[i+3] = txd[i];
  tactile_bridge_spi_txrx(bridge_idx, trimmed_tx_len + 3, msg, NULL);
 8002e2c:	f10c 0103 	add.w	r1, ip, #3
 8002e30:	4630      	mov	r0, r6
 8002e32:	2300      	movs	r3, #0
 8002e34:	b2c9      	uxtb	r1, r1
 8002e36:	f7ff fc1f 	bl	8002678 <tactile_bridge_spi_txrx.part.0>
  return tactile_bridge_wait_for_completion(bridge_idx, tx_len*3000);
 8002e3a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002e3e:	4630      	mov	r0, r6
 8002e40:	fb01 f105 	mul.w	r1, r1, r5
 8002e44:	f7ff ff8e 	bl	8002d64 <tactile_bridge_wait_for_completion>
    else
      return tactile_bridge_i2c_write(bridge_idx, address, data_len, data);
  }
  else
    return I2C_FAIL;
}
 8002e48:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    */
    I2C_TypeDef *i2c;
    if (port == 0)
      i2c = I2C1;
    else
      i2c = I2C3;
 8002e52:	4b6e      	ldr	r3, [pc, #440]	; (800300c <tactile_i2c+0x244>)
 8002e54:	4a6e      	ldr	r2, [pc, #440]	; (8003010 <tactile_i2c+0x248>)
 8002e56:	2800      	cmp	r0, #0
 8002e58:	bf18      	it	ne
 8002e5a:	461a      	movne	r2, r3
    i2c->CR1 |=  I2C_CR1_START;
 8002e5c:	8813      	ldrh	r3, [r2, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e64:	8013      	strh	r3, [r2, #0]
    i2c->SR1 &= ~I2C_SR1_AF;
 8002e66:	8a93      	ldrh	r3, [r2, #20]
 8002e68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e6c:	041b      	lsls	r3, r3, #16
 8002e6e:	0c1b      	lsrs	r3, r3, #16
 8002e70:	8293      	strh	r3, [r2, #20]
    while (!(i2c->SR1 & I2C_SR1_SB)) { }
 8002e72:	8a93      	ldrh	r3, [r2, #20]
 8002e74:	07de      	lsls	r6, r3, #31
 8002e76:	d5fc      	bpl.n	8002e72 <tactile_i2c+0xaa>
    i2c->DR = address;
 8002e78:	fa1f f38e 	uxth.w	r3, lr
 8002e7c:	8213      	strh	r3, [r2, #16]
    while (!(i2c->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF))) { }
 8002e7e:	8a93      	ldrh	r3, [r2, #20]
 8002e80:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	055b      	lsls	r3, r3, #21
 8002e8a:	0d5b      	lsrs	r3, r3, #21
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f6      	beq.n	8002e7e <tactile_i2c+0xb6>
    int address_fail = (i2c->SR1 & I2C_SR1_AF) ? 1 : 0;
 8002e90:	8a90      	ldrh	r0, [r2, #20]
 8002e92:	f3c0 2080 	ubfx	r0, r0, #10, #1
    if (!data_len)
 8002e96:	bb1d      	cbnz	r5, 8002ee0 <tactile_i2c+0x118>
      i2c->CR1 |= I2C_CR1_STOP;
 8002e98:	8813      	ldrh	r3, [r2, #0]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea0:	8013      	strh	r3, [r2, #0]
    i2c->SR2; // un-stretch clock by reading here (?)
 8002ea2:	8b13      	ldrh	r3, [r2, #24]
          while (!(i2c->SR1 & I2C_SR1_RXNE)) { } // wait for it...
          data[i] = i2c->DR;
        }
      }
    }
    i2c->CR1 |= I2C_CR1_STOP;
 8002ea4:	8813      	ldrh	r3, [r2, #0]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eac:	8013      	strh	r3, [r2, #0]
    while (i2c->SR2 & I2C_SR2_BUSY) { }
 8002eae:	8b13      	ldrh	r3, [r2, #24]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f9      	bne.n	8002eae <tactile_i2c+0xe6>
    for (volatile int i = 0; i < 3000; i++) { } // wait a bit
 8002eba:	607b      	str	r3, [r7, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	dc05      	bgt.n	8002ed2 <tactile_i2c+0x10a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	607b      	str	r3, [r7, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	ddf9      	ble.n	8002ec6 <tactile_i2c+0xfe>
    return address_fail ? I2C_FAIL : I2C_SUCCESS;
 8002ed2:	f080 0001 	eor.w	r0, r0, #1
    else
      return tactile_bridge_i2c_write(bridge_idx, address, data_len, data);
  }
  else
    return I2C_FAIL;
}
 8002ed6:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8002eda:	46bd      	mov	sp, r7
 8002edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    i2c->DR = address;
    while (!(i2c->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF))) { }
    int address_fail = (i2c->SR1 & I2C_SR1_AF) ? 1 : 0;
    if (!data_len)
      i2c->CR1 |= I2C_CR1_STOP;
    i2c->SR2; // un-stretch clock by reading here (?)
 8002ee0:	8b13      	ldrh	r3, [r2, #24]
    if (!address_fail && data_len)
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	d1de      	bne.n	8002ea4 <tactile_i2c+0xdc>
    {
      if (!(address & 0x1))
 8002ee6:	f01e 0f01 	tst.w	lr, #1
 8002eea:	d06e      	beq.n	8002fca <tactile_i2c+0x202>
 8002eec:	1e61      	subs	r1, r4, #1
      else
      {
        // it's a read transaction
        //if (!data_len)
        //  i2c->CR1 &= ~I2C_CR1_ACK;
        for (int i = 0; i < data_len; i++)
 8002eee:	4606      	mov	r6, r0
 8002ef0:	1e6c      	subs	r4, r5, #1
        {
          if (i != data_len - 1)
 8002ef2:	42a6      	cmp	r6, r4
            i2c->CR1 |= I2C_CR1_ACK;
 8002ef4:	8813      	ldrh	r3, [r2, #0]
        // it's a read transaction
        //if (!data_len)
        //  i2c->CR1 &= ~I2C_CR1_ACK;
        for (int i = 0; i < data_len; i++)
        {
          if (i != data_len - 1)
 8002ef6:	d07d      	beq.n	8002ff4 <tactile_i2c+0x22c>
            i2c->CR1 |= I2C_CR1_ACK;
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002efe:	8013      	strh	r3, [r2, #0]
          else
            i2c->CR1 &= ~I2C_CR1_ACK;
          while (!(i2c->SR1 & I2C_SR1_RXNE)) { } // wait for it...
 8002f00:	8a93      	ldrh	r3, [r2, #20]
 8002f02:	065b      	lsls	r3, r3, #25
 8002f04:	d5fc      	bpl.n	8002f00 <tactile_i2c+0x138>
      else
      {
        // it's a read transaction
        //if (!data_len)
        //  i2c->CR1 &= ~I2C_CR1_ACK;
        for (int i = 0; i < data_len; i++)
 8002f06:	3601      	adds	r6, #1
          if (i != data_len - 1)
            i2c->CR1 |= I2C_CR1_ACK;
          else
            i2c->CR1 &= ~I2C_CR1_ACK;
          while (!(i2c->SR1 & I2C_SR1_RXNE)) { } // wait for it...
          data[i] = i2c->DR;
 8002f08:	8a13      	ldrh	r3, [r2, #16]
 8002f0a:	f801 3f01 	strb.w	r3, [r1, #1]!
      else
      {
        // it's a read transaction
        //if (!data_len)
        //  i2c->CR1 &= ~I2C_CR1_ACK;
        for (int i = 0; i < data_len; i++)
 8002f0e:	42ae      	cmp	r6, r5
 8002f10:	d1ef      	bne.n	8002ef2 <tactile_i2c+0x12a>
 8002f12:	e7c7      	b.n	8002ea4 <tactile_i2c+0xdc>
   const uint8_t i2c_addr,
   const uint8_t rx_len,
   uint8_t *rxd)
{
  uint8_t msg[3];
  msg[0] = 0x01; // read i2c command
 8002f14:	f04f 0c01 	mov.w	ip, #1
 8002f18:	1d3a      	adds	r2, r7, #4
 8002f1a:	4630      	mov	r0, r6
 8002f1c:	2103      	movs	r1, #3
 8002f1e:	2300      	movs	r3, #0
  msg[1] = rx_len;
  msg[2] = i2c_addr; // will always performa a read... ignores the LSB
 8002f20:	f887 e006 	strb.w	lr, [r7, #6]
   const uint8_t i2c_addr,
   const uint8_t rx_len,
   uint8_t *rxd)
{
  uint8_t msg[3];
  msg[0] = 0x01; // read i2c command
 8002f24:	f887 c004 	strb.w	ip, [r7, #4]
  msg[1] = rx_len;
 8002f28:	717d      	strb	r5, [r7, #5]
 8002f2a:	f7ff fba5 	bl	8002678 <tactile_bridge_spi_txrx.part.0>
  msg[2] = i2c_addr; // will always performa a read... ignores the LSB
  tactile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (tactile_bridge_wait_for_completion(bridge_idx, rx_len*2300) == I2C_FAIL)
 8002f2e:	f640 01fc 	movw	r1, #2300	; 0x8fc
 8002f32:	fb01 f105 	mul.w	r1, r1, r5
 8002f36:	4630      	mov	r0, r6
 8002f38:	f7ff ff14 	bl	8002d64 <tactile_bridge_wait_for_completion>
 8002f3c:	46e8      	mov	r8, sp
 8002f3e:	b928      	cbnz	r0, 8002f4c <tactile_i2c+0x184>
 8002f40:	46c5      	mov	sp, r8
    else
      return tactile_bridge_i2c_write(bridge_idx, address, data_len, data);
  }
  else
    return I2C_FAIL;
}
 8002f42:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8002f46:	46bd      	mov	sp, r7
 8002f48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  msg[1] = rx_len;
  msg[2] = i2c_addr; // will always performa a read... ignores the LSB
  tactile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (tactile_bridge_wait_for_completion(bridge_idx, rx_len*2300) == I2C_FAIL)
    return I2C_FAIL;
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
 8002f4c:	f105 0308 	add.w	r3, r5, #8
 8002f50:	f023 0307 	bic.w	r3, r3, #7
 8002f54:	ebad 0d03 	sub.w	sp, sp, r3
 8002f58:	466a      	mov	r2, sp
  read_msg[0] = 0x06; // read buffer command
 8002f5a:	2106      	movs	r1, #6
  msg[1] = rx_len;
  msg[2] = i2c_addr; // will always performa a read... ignores the LSB
  tactile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (tactile_bridge_wait_for_completion(bridge_idx, rx_len*2300) == I2C_FAIL)
    return I2C_FAIL;
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
 8002f5c:	ebad 0d03 	sub.w	sp, sp, r3
  read_msg[0] = 0x06; // read buffer command
 8002f60:	7011      	strb	r1, [r2, #0]
  msg[1] = rx_len;
  msg[2] = i2c_addr; // will always performa a read... ignores the LSB
  tactile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (tactile_bridge_wait_for_completion(bridge_idx, rx_len*2300) == I2C_FAIL)
    return I2C_FAIL;
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
 8002f62:	46e9      	mov	r9, sp
 8002f64:	1c69      	adds	r1, r5, #1
  read_msg[0] = 0x06; // read buffer command
  for (int i = 1; i < rx_len+1; i++)
 8002f66:	2d00      	cmp	r5, #0
 8002f68:	d04a      	beq.n	8003000 <tactile_i2c+0x238>
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	eb02 0e05 	add.w	lr, r2, r5
    read_msg[i] = 0;
 8002f70:	2000      	movs	r0, #0
 8002f72:	f803 0f01 	strb.w	r0, [r3, #1]!
  tactile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (tactile_bridge_wait_for_completion(bridge_idx, rx_len*2300) == I2C_FAIL)
    return I2C_FAIL;
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
  read_msg[0] = 0x06; // read buffer command
  for (int i = 1; i < rx_len+1; i++)
 8002f76:	4573      	cmp	r3, lr
 8002f78:	d1fb      	bne.n	8002f72 <tactile_i2c+0x1aa>
 8002f7a:	b2c9      	uxtb	r1, r1
 8002f7c:	464b      	mov	r3, r9
 8002f7e:	4630      	mov	r0, r6
 8002f80:	f7ff fb7a 	bl	8002678 <tactile_bridge_spi_txrx.part.0>
 8002f84:	4425      	add	r5, r4
 8002f86:	4621      	mov	r1, r4
 8002f88:	464b      	mov	r3, r9
    read_msg[i] = 0;
  tactile_bridge_spi_txrx(bridge_idx, rx_len+1, read_msg, rx_msg);
  for (int i = 1; i < rx_len+1; i++)
    rxd[i-1] = rx_msg[i];
 8002f8a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002f8e:	f801 2b01 	strb.w	r2, [r1], #1
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
  read_msg[0] = 0x06; // read buffer command
  for (int i = 1; i < rx_len+1; i++)
    read_msg[i] = 0;
  tactile_bridge_spi_txrx(bridge_idx, rx_len+1, read_msg, rx_msg);
  for (int i = 1; i < rx_len+1; i++)
 8002f92:	42a9      	cmp	r1, r5
 8002f94:	d1f9      	bne.n	8002f8a <tactile_i2c+0x1c2>
    rxd[i-1] = rx_msg[i];
  for (volatile int i = 0; i < 1000; i++) { } // la di dah...
 8002f96:	f107 0208 	add.w	r2, r7, #8
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	6813      	ldr	r3, [r2, #0]
 8002fa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fa4:	da06      	bge.n	8002fb4 <tactile_i2c+0x1ec>
 8002fa6:	6813      	ldr	r3, [r2, #0]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	6813      	ldr	r3, [r2, #0]
 8002fae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fb2:	dbf8      	blt.n	8002fa6 <tactile_i2c+0x1de>
  uint8_t bridge_state = tactile_bridge_read_reg(bridge_idx, 0x4);
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	2104      	movs	r1, #4
 8002fb8:	f7ff fbc4 	bl	8002744 <tactile_bridge_read_reg>
  return (bridge_state == 0xf0 ? I2C_SUCCESS : I2C_FAIL);
 8002fbc:	f1a0 00f0 	sub.w	r0, r0, #240	; 0xf0
 8002fc0:	46c5      	mov	sp, r8
 8002fc2:	fab0 f080 	clz	r0, r0
 8002fc6:	0940      	lsrs	r0, r0, #5
 8002fc8:	e7bb      	b.n	8002f42 <tactile_i2c+0x17a>
 8002fca:	4621      	mov	r1, r4
 8002fcc:	4425      	add	r5, r4
      if (!(address & 0x1))
      {
        // it's a write transaction
        for (int i = 0; i < data_len; i++)
        {
          i2c->DR = data[i];
 8002fce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fd2:	8213      	strh	r3, [r2, #16]
          while (!(i2c->SR1 & (I2C_SR1_BTF | I2C_SR1_AF))) { }
 8002fd4:	8a93      	ldrh	r3, [r2, #20]
 8002fd6:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8002fda:	f023 0303 	bic.w	r3, r3, #3
 8002fde:	055b      	lsls	r3, r3, #21
 8002fe0:	0d5b      	lsrs	r3, r3, #21
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f6      	beq.n	8002fd4 <tactile_i2c+0x20c>
          if (i2c->SR1 & I2C_SR1_AF)
 8002fe6:	8a93      	ldrh	r3, [r2, #20]
 8002fe8:	055c      	lsls	r4, r3, #21
 8002fea:	f53f af5b 	bmi.w	8002ea4 <tactile_i2c+0xdc>
    if (!address_fail && data_len)
    {
      if (!(address & 0x1))
      {
        // it's a write transaction
        for (int i = 0; i < data_len; i++)
 8002fee:	42a9      	cmp	r1, r5
 8002ff0:	d1ed      	bne.n	8002fce <tactile_i2c+0x206>
 8002ff2:	e757      	b.n	8002ea4 <tactile_i2c+0xdc>
        for (int i = 0; i < data_len; i++)
        {
          if (i != data_len - 1)
            i2c->CR1 |= I2C_CR1_ACK;
          else
            i2c->CR1 &= ~I2C_CR1_ACK;
 8002ff4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ff8:	041b      	lsls	r3, r3, #16
 8002ffa:	0c1b      	lsrs	r3, r3, #16
 8002ffc:	8013      	strh	r3, [r2, #0]
 8002ffe:	e77f      	b.n	8002f00 <tactile_i2c+0x138>
 8003000:	b2c9      	uxtb	r1, r1
 8003002:	4630      	mov	r0, r6
 8003004:	466b      	mov	r3, sp
 8003006:	f7ff fb37 	bl	8002678 <tactile_bridge_spi_txrx.part.0>
 800300a:	e7c4      	b.n	8002f96 <tactile_i2c+0x1ce>
 800300c:	40005c00 	.word	0x40005c00
 8003010:	40005400 	.word	0x40005400

08003014 <tactile_poll>:
  else
    return I2C_FAIL;
}

void tactile_poll(const uint_fast8_t port)
{
 8003014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (port >= NUM_TACTILE_PORTS)
 8003018:	2803      	cmp	r0, #3
  else
    return I2C_FAIL;
}

void tactile_poll(const uint_fast8_t port)
{
 800301a:	b085      	sub	sp, #20
 800301c:	4604      	mov	r4, r0
  if (port >= NUM_TACTILE_PORTS)
 800301e:	d902      	bls.n	8003026 <tactile_poll+0x12>
    // de-activate this sensor
    if (tactile_i2c(port, sensor_addr | I2C_READ, msg, 1) != I2C_SUCCESS)
        continue;
  }
  //printf("\r\n");
}
 8003020:	b005      	add	sp, #20
 8003022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
  if (port >= NUM_TACTILE_PORTS)
    return;

  // tell the MCU we want to broadcast to everybody
  if (tactile_i2c(port, BCAST_ENABLE_ADDR, NULL, 0) != I2C_SUCCESS)
 8003026:	2200      	movs	r2, #0
 8003028:	b2c5      	uxtb	r5, r0
 800302a:	4628      	mov	r0, r5
 800302c:	4613      	mov	r3, r2
 800302e:	210c      	movs	r1, #12
 8003030:	f7ff feca 	bl	8002dc8 <tactile_i2c>
 8003034:	2801      	cmp	r0, #1
 8003036:	d1f3      	bne.n	8003020 <tactile_poll+0xc>
    return;
  // tell everybody we want them to start their sampling process
  uint8_t msg[4] = { 0x12, 0x01, 0x00, 0x00};
 8003038:	4b3d      	ldr	r3, [pc, #244]	; (8003130 <tactile_poll+0x11c>)
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	9002      	str	r0, [sp, #8]
  if (tactile_i2c(port, BAROM_ADDR, msg, 2) != I2C_SUCCESS)
 800303e:	aa02      	add	r2, sp, #8
 8003040:	4628      	mov	r0, r5
 8003042:	21c0      	movs	r1, #192	; 0xc0
 8003044:	2302      	movs	r3, #2
 8003046:	f7ff febf 	bl	8002dc8 <tactile_i2c>
 800304a:	2801      	cmp	r0, #1
 800304c:	d1e8      	bne.n	8003020 <tactile_poll+0xc>
    return;
  // disable everybody by reading one byte...
  if (tactile_i2c(port, BCAST_DISABLE_ADDR, msg, 1) != I2C_SUCCESS)
 800304e:	4603      	mov	r3, r0
 8003050:	210d      	movs	r1, #13
 8003052:	4628      	mov	r0, r5
 8003054:	aa02      	add	r2, sp, #8
 8003056:	f7ff feb7 	bl	8002dc8 <tactile_i2c>
 800305a:	2801      	cmp	r0, #1
 800305c:	d1e0      	bne.n	8003020 <tactile_poll+0xc>
    return;

  for (volatile uint32_t i = 0; i < 10000; i++) { } // kill some time... SO BAD
 800305e:	2300      	movs	r3, #0
 8003060:	9303      	str	r3, [sp, #12]
 8003062:	9b03      	ldr	r3, [sp, #12]
 8003064:	f242 720f 	movw	r2, #9999	; 0x270f
 8003068:	4293      	cmp	r3, r2
 800306a:	d805      	bhi.n	8003078 <tactile_poll+0x64>
 800306c:	9b03      	ldr	r3, [sp, #12]
 800306e:	3301      	adds	r3, #1
 8003070:	9303      	str	r3, [sp, #12]
 8003072:	9b03      	ldr	r3, [sp, #12]
 8003074:	4293      	cmp	r3, r2
 8003076:	d9f9      	bls.n	800306c <tactile_poll+0x58>

  for (uint_fast8_t sensor_idx = 0;
       sensor_idx < g_tactile_sensors_per_port[port];
 8003078:	4b2e      	ldr	r3, [pc, #184]	; (8003134 <tactile_poll+0x120>)
 800307a:	f813 8004 	ldrb.w	r8, [r3, r4]
  if (tactile_i2c(port, BCAST_DISABLE_ADDR, msg, 1) != I2C_SUCCESS)
    return;

  for (volatile uint32_t i = 0; i < 10000; i++) { } // kill some time... SO BAD

  for (uint_fast8_t sensor_idx = 0;
 800307e:	f1b8 0f00 	cmp.w	r8, #0
 8003082:	d0cd      	beq.n	8003020 <tactile_poll+0xc>
    const uint16_t pressure = ((uint16_t)msg[0] << 2) | (msg[1] >> 6);
    const uint16_t temperature = ((uint16_t)msg[2] << 2) | (msg[3] >> 6);
    //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
    //       port, sensor_addr, pressure, temperature);

    const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER +
 8003084:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  {
    uint8_t sensor_addr; // look up the sensor address
    if (port < NUM_FINGERS)
      sensor_addr = g_tactile_finger_addrs[sensor_idx];
    else
      sensor_addr = g_tactile_palm_addrs[sensor_idx];
 8003088:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8003138 <tactile_poll+0x124>
       sensor_idx < g_tactile_sensors_per_port[port];
       sensor_idx++)
  {
    uint8_t sensor_addr; // look up the sensor address
    if (port < NUM_FINGERS)
      sensor_addr = g_tactile_finger_addrs[sensor_idx];
 800308c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800313c <tactile_poll+0x128>
    //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
    //       port, sensor_addr, pressure, temperature);

    const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER +
                                          sensor_idx;
    g_state.tactile_pressures   [state_sensor_idx] = pressure;
 8003090:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8003140 <tactile_poll+0x12c>
    const uint16_t pressure = ((uint16_t)msg[0] << 2) | (msg[1] >> 6);
    const uint16_t temperature = ((uint16_t)msg[2] << 2) | (msg[3] >> 6);
    //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
    //       port, sensor_addr, pressure, temperature);

    const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER +
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	2600      	movs	r6, #0
 8003098:	e002      	b.n	80030a0 <tactile_poll+0x8c>

  for (volatile uint32_t i = 0; i < 10000; i++) { } // kill some time... SO BAD

  for (uint_fast8_t sensor_idx = 0;
       sensor_idx < g_tactile_sensors_per_port[port];
       sensor_idx++)
 800309a:	3601      	adds	r6, #1
  if (tactile_i2c(port, BCAST_DISABLE_ADDR, msg, 1) != I2C_SUCCESS)
    return;

  for (volatile uint32_t i = 0; i < 10000; i++) { } // kill some time... SO BAD

  for (uint_fast8_t sensor_idx = 0;
 800309c:	4546      	cmp	r6, r8
 800309e:	d0bf      	beq.n	8003020 <tactile_poll+0xc>
       sensor_idx < g_tactile_sensors_per_port[port];
       sensor_idx++)
  {
    uint8_t sensor_addr; // look up the sensor address
    if (port < NUM_FINGERS)
 80030a0:	2c03      	cmp	r4, #3
      sensor_addr = g_tactile_finger_addrs[sensor_idx];
 80030a2:	bf14      	ite	ne
 80030a4:	f816 7009 	ldrbne.w	r7, [r6, r9]
    else
      sensor_addr = g_tactile_palm_addrs[sensor_idx];
 80030a8:	f816 700a 	ldrbeq.w	r7, [r6, sl]
    // activate this sensor
    if (tactile_i2c(port, sensor_addr, NULL, 0) != I2C_SUCCESS)
 80030ac:	2200      	movs	r2, #0
 80030ae:	4613      	mov	r3, r2
 80030b0:	4628      	mov	r0, r5
 80030b2:	4639      	mov	r1, r7
 80030b4:	f7ff fe88 	bl	8002dc8 <tactile_i2c>
 80030b8:	2801      	cmp	r0, #1
 80030ba:	d1ee      	bne.n	800309a <tactile_poll+0x86>
      continue;
    msg[0] = 0;
    // tell it we want to read the data
    if (tactile_i2c(port, BAROM_ADDR, msg, 1) != I2C_SUCCESS)
 80030bc:	4603      	mov	r3, r0
    else
      sensor_addr = g_tactile_palm_addrs[sensor_idx];
    // activate this sensor
    if (tactile_i2c(port, sensor_addr, NULL, 0) != I2C_SUCCESS)
      continue;
    msg[0] = 0;
 80030be:	f04f 0e00 	mov.w	lr, #0
    // tell it we want to read the data
    if (tactile_i2c(port, BAROM_ADDR, msg, 1) != I2C_SUCCESS)
 80030c2:	4628      	mov	r0, r5
 80030c4:	21c0      	movs	r1, #192	; 0xc0
 80030c6:	aa02      	add	r2, sp, #8
    else
      sensor_addr = g_tactile_palm_addrs[sensor_idx];
    // activate this sensor
    if (tactile_i2c(port, sensor_addr, NULL, 0) != I2C_SUCCESS)
      continue;
    msg[0] = 0;
 80030c8:	f88d e008 	strb.w	lr, [sp, #8]
    // tell it we want to read the data
    if (tactile_i2c(port, BAROM_ADDR, msg, 1) != I2C_SUCCESS)
 80030cc:	f7ff fe7c 	bl	8002dc8 <tactile_i2c>
 80030d0:	2801      	cmp	r0, #1
 80030d2:	d1e2      	bne.n	800309a <tactile_poll+0x86>
      continue;
    // now, actually read the data
    if (tactile_i2c(port, BAROM_ADDR | I2C_READ, msg, 4) != I2C_SUCCESS)
 80030d4:	2304      	movs	r3, #4
 80030d6:	4628      	mov	r0, r5
 80030d8:	21c1      	movs	r1, #193	; 0xc1
 80030da:	aa02      	add	r2, sp, #8
 80030dc:	f7ff fe74 	bl	8002dc8 <tactile_i2c>
 80030e0:	2801      	cmp	r0, #1
 80030e2:	4603      	mov	r3, r0
 80030e4:	d1d9      	bne.n	800309a <tactile_poll+0x86>
      continue;
    //printf("port %d mcu %d sensor %d rx 4 bytes: 0x%02x  0x%02x  0x%02x  0x%02x\r\n",
    //       port, mcu, sensor, msg[0], msg[1], msg[2], msg[3]);
    const uint16_t pressure = ((uint16_t)msg[0] << 2) | (msg[1] >> 6);
 80030e6:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80030ea:	9901      	ldr	r1, [sp, #4]
 80030ec:	f89d e008 	ldrb.w	lr, [sp, #8]
    const uint16_t temperature = ((uint16_t)msg[2] << 2) | (msg[3] >> 6);
 80030f0:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80030f4:	1871      	adds	r1, r6, r1
    // now, actually read the data
    if (tactile_i2c(port, BAROM_ADDR | I2C_READ, msg, 4) != I2C_SUCCESS)
      continue;
    //printf("port %d mcu %d sensor %d rx 4 bytes: 0x%02x  0x%02x  0x%02x  0x%02x\r\n",
    //       port, mcu, sensor, msg[0], msg[1], msg[2], msg[3]);
    const uint16_t pressure = ((uint16_t)msg[0] << 2) | (msg[1] >> 6);
 80030f6:	0980      	lsrs	r0, r0, #6
 80030f8:	ea40 008e 	orr.w	r0, r0, lr, lsl #2
    //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
    //       port, sensor_addr, pressure, temperature);

    const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER +
                                          sensor_idx;
    g_state.tactile_pressures   [state_sensor_idx] = pressure;
 80030fc:	f101 0e04 	add.w	lr, r1, #4
    g_state.tactile_temperatures[state_sensor_idx] = temperature;
 8003100:	3128      	adds	r1, #40	; 0x28
    //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
    //       port, sensor_addr, pressure, temperature);

    const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER +
                                          sensor_idx;
    g_state.tactile_pressures   [state_sensor_idx] = pressure;
 8003102:	f83b c01e 	ldrh.w	ip, [fp, lr, lsl #1]
 8003106:	f82b 001e 	strh.w	r0, [fp, lr, lsl #1]
    if (tactile_i2c(port, BAROM_ADDR | I2C_READ, msg, 4) != I2C_SUCCESS)
      continue;
    //printf("port %d mcu %d sensor %d rx 4 bytes: 0x%02x  0x%02x  0x%02x  0x%02x\r\n",
    //       port, mcu, sensor, msg[0], msg[1], msg[2], msg[3]);
    const uint16_t pressure = ((uint16_t)msg[0] << 2) | (msg[1] >> 6);
    const uint16_t temperature = ((uint16_t)msg[2] << 2) | (msg[3] >> 6);
 800310a:	f89d 000a 	ldrb.w	r0, [sp, #10]
    //       port, sensor_addr, pressure, temperature);

    const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER +
                                          sensor_idx;
    g_state.tactile_pressures   [state_sensor_idx] = pressure;
    g_state.tactile_temperatures[state_sensor_idx] = temperature;
 800310e:	eb0b 0e41 	add.w	lr, fp, r1, lsl #1
    if (tactile_i2c(port, BAROM_ADDR | I2C_READ, msg, 4) != I2C_SUCCESS)
      continue;
    //printf("port %d mcu %d sensor %d rx 4 bytes: 0x%02x  0x%02x  0x%02x  0x%02x\r\n",
    //       port, mcu, sensor, msg[0], msg[1], msg[2], msg[3]);
    const uint16_t pressure = ((uint16_t)msg[0] << 2) | (msg[1] >> 6);
    const uint16_t temperature = ((uint16_t)msg[2] << 2) | (msg[3] >> 6);
 8003112:	0992      	lsrs	r2, r2, #6
                                          sensor_idx;
    g_state.tactile_pressures   [state_sensor_idx] = pressure;
    g_state.tactile_temperatures[state_sensor_idx] = temperature;

    // de-activate this sensor
    if (tactile_i2c(port, sensor_addr | I2C_READ, msg, 1) != I2C_SUCCESS)
 8003114:	f047 0101 	orr.w	r1, r7, #1
    if (tactile_i2c(port, BAROM_ADDR | I2C_READ, msg, 4) != I2C_SUCCESS)
      continue;
    //printf("port %d mcu %d sensor %d rx 4 bytes: 0x%02x  0x%02x  0x%02x  0x%02x\r\n",
    //       port, mcu, sensor, msg[0], msg[1], msg[2], msg[3]);
    const uint16_t pressure = ((uint16_t)msg[0] << 2) | (msg[1] >> 6);
    const uint16_t temperature = ((uint16_t)msg[2] << 2) | (msg[3] >> 6);
 8003118:	ea42 0780 	orr.w	r7, r2, r0, lsl #2
    //       port, sensor_addr, pressure, temperature);

    const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER +
                                          sensor_idx;
    g_state.tactile_pressures   [state_sensor_idx] = pressure;
    g_state.tactile_temperatures[state_sensor_idx] = temperature;
 800311c:	f8be c004 	ldrh.w	ip, [lr, #4]
 8003120:	f8ae 7004 	strh.w	r7, [lr, #4]

    // de-activate this sensor
    if (tactile_i2c(port, sensor_addr | I2C_READ, msg, 1) != I2C_SUCCESS)
 8003124:	4628      	mov	r0, r5
 8003126:	aa02      	add	r2, sp, #8
 8003128:	f7ff fe4e 	bl	8002dc8 <tactile_i2c>
 800312c:	e7b5      	b.n	800309a <tactile_poll+0x86>
 800312e:	bf00      	nop
 8003130:	0800a984 	.word	0x0800a984
 8003134:	0800a98c 	.word	0x0800a98c
 8003138:	0800a990 	.word	0x0800a990
 800313c:	0800a9f4 	.word	0x0800a9f4
 8003140:	2001058c 	.word	0x2001058c

08003144 <tactile_poll_nonblocking_tick>:
  uint8_t bridge_state = tactile_bridge_read_reg(bridge_idx, 0x4);
  return (bridge_state == 0xf0 ? I2C_SUCCESS : I2C_FAIL);
}

void tactile_poll_nonblocking_tick(const uint8_t tactile_port)
{
 8003144:	b5f0      	push	{r4, r5, r6, r7, lr}
  static uint_fast8_t errCount[NUM_TACTILE_PORTS] = {0};
  const uint_fast8_t tp = tactile_port; // save typing
  if (tp >= NUM_TACTILE_PORTS)
 8003146:	2803      	cmp	r0, #3
  uint8_t bridge_state = tactile_bridge_read_reg(bridge_idx, 0x4);
  return (bridge_state == 0xf0 ? I2C_SUCCESS : I2C_FAIL);
}

void tactile_poll_nonblocking_tick(const uint8_t tactile_port)
{
 8003148:	b087      	sub	sp, #28
 800314a:	4604      	mov	r4, r0
  static uint_fast8_t errCount[NUM_TACTILE_PORTS] = {0};
  const uint_fast8_t tp = tactile_port; // save typing
  if (tp >= NUM_TACTILE_PORTS)
 800314c:	d805      	bhi.n	800315a <tactile_poll_nonblocking_tick+0x16>
    return; // let's not corrupt memory.
  tactile_async_poll_state_t *tps = &tactile_poll_states[tp]; // save typing  

  static uint_fast8_t active_sensor_idx[NUM_TACTILE_PORTS] = {0};
  int *i2c_status = NULL;
  if (tactile_port == 0 || tactile_port == 1)
 800314e:	2801      	cmp	r0, #1
 8003150:	d905      	bls.n	800315e <tactile_poll_nonblocking_tick+0x1a>
    i2c_status = (int *)&g_tactile_internal_i2c_status[tactile_port];
  else if (tactile_port == 2 || tactile_port == 3)
 8003152:	1e83      	subs	r3, r0, #2
 8003154:	b2da      	uxtb	r2, r3
 8003156:	2a01      	cmp	r2, #1
 8003158:	d93d      	bls.n	80031d6 <tactile_poll_nonblocking_tick+0x92>
      break;
    default:
      *tps = TPS_DONE;
      break;
  }
}
 800315a:	b007      	add	sp, #28
 800315c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tactile_async_poll_state_t *tps = &tactile_poll_states[tp]; // save typing  

  static uint_fast8_t active_sensor_idx[NUM_TACTILE_PORTS] = {0};
  int *i2c_status = NULL;
  if (tactile_port == 0 || tactile_port == 1)
    i2c_status = (int *)&g_tactile_internal_i2c_status[tactile_port];
 800315e:	4ba1      	ldr	r3, [pc, #644]	; (80033e4 <tactile_poll_nonblocking_tick+0x2a0>)
 8003160:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8003164:	eb03 0580 	add.w	r5, r3, r0, lsl #2
  else if (tactile_port == 2 || tactile_port == 3)
    i2c_status = (int *)&g_tactile_bridged_i2c_status[tactile_port-2];
  else
    return; // shouldn't get here... but if somehow we do, it's time to bail

  if (*i2c_status == TACTILE_I2C_SUCCESS) {
 8003168:	1c51      	adds	r1, r2, #1
 800316a:	f000 8089 	beq.w	8003280 <tactile_poll_nonblocking_tick+0x13c>
    errCount[tactile_port] = 0;
    err_unset(ERR_TAC_0_PROBLEM + tactile_port);
  } else if (*i2c_status == TACTILE_I2C_FAIL) {
 800316e:	3202      	adds	r2, #2
 8003170:	d04f      	beq.n	8003212 <tactile_poll_nonblocking_tick+0xce>
  const uint8_t sensor_count = (tp < NUM_FINGERS ?
                                SENSORS_PER_FINGER :
                                NUM_PALM_SENSORS);
 #define SLEEP_TIME 0
  static uint32_t state_start_time_us[NUM_TACTILE_PORTS] = {0};
  switch (*tps)
 8003172:	4e9d      	ldr	r6, [pc, #628]	; (80033e8 <tactile_poll_nonblocking_tick+0x2a4>)
 8003174:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
      errCount[tactile_port]++;
    }
  }

  //const tactile_async_txrx_status *tats = &g_tactile_async_txrx_status[tp];
  const uint8_t sensor_count = (tp < NUM_FINGERS ?
 8003178:	2c03      	cmp	r4, #3
 800317a:	bf14      	ite	ne
 800317c:	2709      	movne	r7, #9
 800317e:	270b      	moveq	r7, #11
                                SENSORS_PER_FINGER :
                                NUM_PALM_SENSORS);
 #define SLEEP_TIME 0
  static uint32_t state_start_time_us[NUM_TACTILE_PORTS] = {0};
  switch (*tps)
 8003180:	2b05      	cmp	r3, #5
 8003182:	f000 80cf 	beq.w	8003324 <tactile_poll_nonblocking_tick+0x1e0>
 8003186:	d82c      	bhi.n	80031e2 <tactile_poll_nonblocking_tick+0x9e>
 8003188:	2b02      	cmp	r3, #2
 800318a:	f000 80b8 	beq.w	80032fe <tactile_poll_nonblocking_tick+0x1ba>
 800318e:	f240 8081 	bls.w	8003294 <tactile_poll_nonblocking_tick+0x150>
 8003192:	2b03      	cmp	r3, #3
 8003194:	d065      	beq.n	8003262 <tactile_poll_nonblocking_tick+0x11e>
 8003196:	2b04      	cmp	r3, #4
 8003198:	d16d      	bne.n	8003276 <tactile_poll_nonblocking_tick+0x132>
        *tps = TPS_DONE;
      }
      break;
    case TPS_SENSOR_SAMPLING:
      // wait 3 ms
      if (SYSTIME - state_start_time_us[tp] > 3000) { // CORRECT
 800319a:	4a94      	ldr	r2, [pc, #592]	; (80033ec <tactile_poll_nonblocking_tick+0x2a8>)
 800319c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031a0:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80031aa:	1a5b      	subs	r3, r3, r1
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d9d4      	bls.n	800315a <tactile_poll_nonblocking_tick+0x16>
        active_sensor_idx[tp] = 0;
 80031b0:	4b8f      	ldr	r3, [pc, #572]	; (80033f0 <tactile_poll_nonblocking_tick+0x2ac>)
 80031b2:	2100      	movs	r1, #0
static uint_fast8_t tactile_sensor_addr(const uint_fast8_t tactile_port,
                                        const uint_fast8_t sensor_idx)
{
  if (tactile_port >= NUM_TACTILE_PORTS)
    return 0; // bogus
  if (tactile_port < NUM_FINGERS)
 80031b4:	2c03      	cmp	r4, #3
      }
      break;
    case TPS_SENSOR_SAMPLING:
      // wait 3 ms
      if (SYSTIME - state_start_time_us[tp] > 3000) { // CORRECT
        active_sensor_idx[tp] = 0;
 80031b6:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
        const uint8_t sensor_addr = tactile_sensor_addr(tp, 0);
        *tps = TPS_SELECT_SENSOR;
 80031ba:	f04f 0305 	mov.w	r3, #5
static uint_fast8_t tactile_sensor_addr(const uint_fast8_t tactile_port,
                                        const uint_fast8_t sensor_idx)
{
  if (tactile_port >= NUM_TACTILE_PORTS)
    return 0; // bogus
  if (tactile_port < NUM_FINGERS)
 80031be:	f000 80cd 	beq.w	800335c <tactile_poll_nonblocking_tick+0x218>
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void tactile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 80031c2:	2c02      	cmp	r4, #2
    case TPS_SENSOR_SAMPLING:
      // wait 3 ms
      if (SYSTIME - state_start_time_us[tp] > 3000) { // CORRECT
        active_sensor_idx[tp] = 0;
        const uint8_t sensor_addr = tactile_sensor_addr(tp, 0);
        *tps = TPS_SELECT_SENSOR;
 80031c4:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void tactile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 80031c8:	d8c7      	bhi.n	800315a <tactile_poll_nonblocking_tick+0x16>
 80031ca:	4620      	mov	r0, r4
 80031cc:	460a      	mov	r2, r1
 80031ce:	460b      	mov	r3, r1
 80031d0:	f7ff fad6 	bl	8002780 <tactile_i2c_async_start.part.1>
 80031d4:	e7c1      	b.n	800315a <tactile_poll_nonblocking_tick+0x16>
  static uint_fast8_t active_sensor_idx[NUM_TACTILE_PORTS] = {0};
  int *i2c_status = NULL;
  if (tactile_port == 0 || tactile_port == 1)
    i2c_status = (int *)&g_tactile_internal_i2c_status[tactile_port];
  else if (tactile_port == 2 || tactile_port == 3)
    i2c_status = (int *)&g_tactile_bridged_i2c_status[tactile_port-2];
 80031d6:	4d87      	ldr	r5, [pc, #540]	; (80033f4 <tactile_poll_nonblocking_tick+0x2b0>)
 80031d8:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80031dc:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80031e0:	e7c2      	b.n	8003168 <tactile_poll_nonblocking_tick+0x24>
  const uint8_t sensor_count = (tp < NUM_FINGERS ?
                                SENSORS_PER_FINGER :
                                NUM_PALM_SENSORS);
 #define SLEEP_TIME 0
  static uint32_t state_start_time_us[NUM_TACTILE_PORTS] = {0};
  switch (*tps)
 80031e2:	2b07      	cmp	r3, #7
 80031e4:	d06e      	beq.n	80032c4 <tactile_poll_nonblocking_tick+0x180>
 80031e6:	d377      	bcc.n	80032d8 <tactile_poll_nonblocking_tick+0x194>
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d01c      	beq.n	8003226 <tactile_poll_nonblocking_tick+0xe2>
 80031ec:	3301      	adds	r3, #1
 80031ee:	d142      	bne.n	8003276 <tactile_poll_nonblocking_tick+0x132>
  {
    case TPS_DONE: // initial state. kick things off.
      if (tactile_port == 2)
 80031f0:	2c02      	cmp	r4, #2
 80031f2:	f000 810d 	beq.w	8003410 <tactile_poll_nonblocking_tick+0x2cc>
            // writeBytesSPI(SPI1, tactile_sensor_addr(tp, i) + 1, NULL, 0, 1); // disable sensor i
            readBytesSPI(SPI1, tactile_sensor_addr(tp, i)>>1, 0, NULL);
            // udelay(SLEEP_TIME); // test
          }
      }
      else if (tactile_port == 3)
 80031f6:	2c03      	cmp	r4, #3
 80031f8:	d0af      	beq.n	800315a <tactile_poll_nonblocking_tick+0x16>
      {

      }
      else
      {
        *tps = TPS_BCAST_ENABLE;
 80031fa:	2301      	movs	r3, #1
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void tactile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 80031fc:	2c02      	cmp	r4, #2
      {

      }
      else
      {
        *tps = TPS_BCAST_ENABLE;
 80031fe:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void tactile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 8003202:	d8aa      	bhi.n	800315a <tactile_poll_nonblocking_tick+0x16>
 8003204:	2200      	movs	r2, #0
 8003206:	4620      	mov	r0, r4
 8003208:	4613      	mov	r3, r2
 800320a:	210c      	movs	r1, #12
 800320c:	f7ff fab8 	bl	8002780 <tactile_i2c_async_start.part.1>
 8003210:	e7a3      	b.n	800315a <tactile_poll_nonblocking_tick+0x16>

  if (*i2c_status == TACTILE_I2C_SUCCESS) {
    errCount[tactile_port] = 0;
    err_unset(ERR_TAC_0_PROBLEM + tactile_port);
  } else if (*i2c_status == TACTILE_I2C_FAIL) {
    if (errCount[tactile_port] > 100) {
 8003212:	4a79      	ldr	r2, [pc, #484]	; (80033f8 <tactile_poll_nonblocking_tick+0x2b4>)
 8003214:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8003218:	2b64      	cmp	r3, #100	; 0x64
 800321a:	f200 8099 	bhi.w	8003350 <tactile_poll_nonblocking_tick+0x20c>
      err_set(ERR_TAC_0_PROBLEM + tactile_port);
    } else {
      errCount[tactile_port]++;
 800321e:	3301      	adds	r3, #1
 8003220:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8003224:	e7a5      	b.n	8003172 <tactile_poll_nonblocking_tick+0x2e>
          tactile_i2c_async_start(tp, sensor_addr, NULL, 0);
        }
      }
      break;
    case TPS_DESELECT_SENSOR:
      tactile_i2c_async_tick(tp);
 8003226:	4620      	mov	r0, r4
 8003228:	f7ff fd28 	bl	8002c7c <tactile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS ||
 800322c:	682b      	ldr	r3, [r5, #0]
 800322e:	3302      	adds	r3, #2
 8003230:	2b01      	cmp	r3, #1
 8003232:	d892      	bhi.n	800315a <tactile_poll_nonblocking_tick+0x16>
          *i2c_status == TACTILE_I2C_FAIL) {
        active_sensor_idx[tp]++;
 8003234:	4a6e      	ldr	r2, [pc, #440]	; (80033f0 <tactile_poll_nonblocking_tick+0x2ac>)
 8003236:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800323a:	3301      	adds	r3, #1
        if (active_sensor_idx[tp] >= sensor_count) {
 800323c:	42bb      	cmp	r3, r7
      break;
    case TPS_DESELECT_SENSOR:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS ||
          *i2c_status == TACTILE_I2C_FAIL) {
        active_sensor_idx[tp]++;
 800323e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        if (active_sensor_idx[tp] >= sensor_count) {
 8003242:	d218      	bcs.n	8003276 <tactile_poll_nonblocking_tick+0x132>
          *tps = TPS_DONE;
        } else {
          *tps = TPS_SELECT_SENSOR;
 8003244:	2205      	movs	r2, #5
static uint_fast8_t tactile_sensor_addr(const uint_fast8_t tactile_port,
                                        const uint_fast8_t sensor_idx)
{
  if (tactile_port >= NUM_TACTILE_PORTS)
    return 0; // bogus
  if (tactile_port < NUM_FINGERS)
 8003246:	2c03      	cmp	r4, #3
          *i2c_status == TACTILE_I2C_FAIL) {
        active_sensor_idx[tp]++;
        if (active_sensor_idx[tp] >= sensor_count) {
          *tps = TPS_DONE;
        } else {
          *tps = TPS_SELECT_SENSOR;
 8003248:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
static uint_fast8_t tactile_sensor_addr(const uint_fast8_t tactile_port,
                                        const uint_fast8_t sensor_idx)
{
  if (tactile_port >= NUM_TACTILE_PORTS)
    return 0; // bogus
  if (tactile_port < NUM_FINGERS)
 800324c:	d085      	beq.n	800315a <tactile_poll_nonblocking_tick+0x16>
    return g_tactile_finger_addrs[sensor_idx];
 800324e:	4a6b      	ldr	r2, [pc, #428]	; (80033fc <tactile_poll_nonblocking_tick+0x2b8>)
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void tactile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 8003250:	2c02      	cmp	r4, #2
                                        const uint_fast8_t sensor_idx)
{
  if (tactile_port >= NUM_TACTILE_PORTS)
    return 0; // bogus
  if (tactile_port < NUM_FINGERS)
    return g_tactile_finger_addrs[sensor_idx];
 8003252:	5cd1      	ldrb	r1, [r2, r3]
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void tactile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 8003254:	d881      	bhi.n	800315a <tactile_poll_nonblocking_tick+0x16>
 8003256:	2200      	movs	r2, #0
 8003258:	4620      	mov	r0, r4
 800325a:	4613      	mov	r3, r2
 800325c:	f7ff fa90 	bl	8002780 <tactile_i2c_async_start.part.1>
 8003260:	e77b      	b.n	800315a <tactile_poll_nonblocking_tick+0x16>
      } else if (*i2c_status == TACTILE_I2C_FAIL) {
        *tps = TPS_DONE;
      }
      break;
    case TPS_BCAST_DISABLE:
      tactile_i2c_async_tick(tp);
 8003262:	4620      	mov	r0, r4
 8003264:	f7ff fd0a 	bl	8002c7c <tactile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
 8003268:	682b      	ldr	r3, [r5, #0]
 800326a:	1c5d      	adds	r5, r3, #1
 800326c:	f000 80af 	beq.w	80033ce <tactile_poll_nonblocking_tick+0x28a>
    case TPS_TX_READ_DATA_CMD:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        *tps = TPS_READ_DATA;
        tactile_i2c_async_start(tp, BAROM_ADDR | I2C_READ, NULL, 4);
      } else if (*i2c_status == TACTILE_I2C_FAIL) {
 8003270:	3302      	adds	r3, #2
 8003272:	f47f af72 	bne.w	800315a <tactile_poll_nonblocking_tick+0x16>
          tactile_i2c_async_start(tp, sensor_addr, NULL, 0);
        }
      }
      break;
    default:
      *tps = TPS_DONE;
 8003276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800327a:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
      break;
 800327e:	e76c      	b.n	800315a <tactile_poll_nonblocking_tick+0x16>
    i2c_status = (int *)&g_tactile_bridged_i2c_status[tactile_port-2];
  else
    return; // shouldn't get here... but if somehow we do, it's time to bail

  if (*i2c_status == TACTILE_I2C_SUCCESS) {
    errCount[tactile_port] = 0;
 8003280:	4b5d      	ldr	r3, [pc, #372]	; (80033f8 <tactile_poll_nonblocking_tick+0x2b4>)
    err_unset(ERR_TAC_0_PROBLEM + tactile_port);
 8003282:	f104 0008 	add.w	r0, r4, #8
    i2c_status = (int *)&g_tactile_bridged_i2c_status[tactile_port-2];
  else
    return; // shouldn't get here... but if somehow we do, it's time to bail

  if (*i2c_status == TACTILE_I2C_SUCCESS) {
    errCount[tactile_port] = 0;
 8003286:	2200      	movs	r2, #0
    err_unset(ERR_TAC_0_PROBLEM + tactile_port);
 8003288:	b2c0      	uxtb	r0, r0
    i2c_status = (int *)&g_tactile_bridged_i2c_status[tactile_port-2];
  else
    return; // shouldn't get here... but if somehow we do, it's time to bail

  if (*i2c_status == TACTILE_I2C_SUCCESS) {
    errCount[tactile_port] = 0;
 800328a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    err_unset(ERR_TAC_0_PROBLEM + tactile_port);
 800328e:	f000 fb7f 	bl	8003990 <err_unset>
 8003292:	e76e      	b.n	8003172 <tactile_poll_nonblocking_tick+0x2e>
  const uint8_t sensor_count = (tp < NUM_FINGERS ?
                                SENSORS_PER_FINGER :
                                NUM_PALM_SENSORS);
 #define SLEEP_TIME 0
  static uint32_t state_start_time_us[NUM_TACTILE_PORTS] = {0};
  switch (*tps)
 8003294:	2b01      	cmp	r3, #1
 8003296:	d1ee      	bne.n	8003276 <tactile_poll_nonblocking_tick+0x132>
        *tps = TPS_BCAST_ENABLE;
        tactile_i2c_async_start(tp, BCAST_ENABLE_ADDR, NULL, 0);  
      }
      break;
    case TPS_BCAST_ENABLE:
      tactile_i2c_async_tick(tp);
 8003298:	4620      	mov	r0, r4
 800329a:	f7ff fcef 	bl	8002c7c <tactile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
 800329e:	682b      	ldr	r3, [r5, #0]
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	d1e5      	bne.n	8003270 <tactile_poll_nonblocking_tick+0x12c>
        //*tps = TPS_DONE;
        uint8_t msg[2] = { 0x12, 0x01 };
 80032a4:	4a56      	ldr	r2, [pc, #344]	; (8003400 <tactile_poll_nonblocking_tick+0x2bc>)
        *tps = TPS_BCAST_START_SAMPLING;
 80032a6:	2302      	movs	r3, #2
      break;
    case TPS_BCAST_ENABLE:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        //*tps = TPS_DONE;
        uint8_t msg[2] = { 0x12, 0x01 };
 80032a8:	8812      	ldrh	r2, [r2, #0]
 80032aa:	f8ad 2014 	strh.w	r2, [sp, #20]
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void tactile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 80032ae:	429c      	cmp	r4, r3
    case TPS_BCAST_ENABLE:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        //*tps = TPS_DONE;
        uint8_t msg[2] = { 0x12, 0x01 };
        *tps = TPS_BCAST_START_SAMPLING;
 80032b0:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void tactile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 80032b4:	f63f af51 	bhi.w	800315a <tactile_poll_nonblocking_tick+0x16>
 80032b8:	4620      	mov	r0, r4
 80032ba:	aa05      	add	r2, sp, #20
 80032bc:	21c0      	movs	r1, #192	; 0xc0
 80032be:	f7ff fa5f 	bl	8002780 <tactile_i2c_async_start.part.1>
 80032c2:	e74a      	b.n	800315a <tactile_poll_nonblocking_tick+0x16>
      } else if (*i2c_status == TACTILE_I2C_FAIL) {
        *tps = TPS_DONE;
      }
      break;
    case TPS_READ_DATA:
      tactile_i2c_async_tick(tp);
 80032c4:	4620      	mov	r0, r4
 80032c6:	f7ff fcd9 	bl	8002c7c <tactile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
 80032ca:	682b      	ldr	r3, [r5, #0]
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	d047      	beq.n	8003360 <tactile_poll_nonblocking_tick+0x21c>
        g_state.tactile_temperatures[state_sensor_idx] = temperature;
        //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
        //       tp, sensor_addr, pressure, temperature);
        *tps = TPS_DESELECT_SENSOR;
        tactile_i2c_async_start(tp, sensor_addr | I2C_READ, NULL, 1);
      } else if (*i2c_status == TACTILE_I2C_FAIL) {
 80032d0:	3302      	adds	r3, #2
 80032d2:	f47f af42 	bne.w	800315a <tactile_poll_nonblocking_tick+0x16>
 80032d6:	e7ad      	b.n	8003234 <tactile_poll_nonblocking_tick+0xf0>
      } else if (*i2c_status == TACTILE_I2C_FAIL) {
        *tps = TPS_DONE;
      }
      break;
    case TPS_TX_READ_DATA_CMD:
      tactile_i2c_async_tick(tp);
 80032d8:	4620      	mov	r0, r4
 80032da:	f7ff fccf 	bl	8002c7c <tactile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
 80032de:	682b      	ldr	r3, [r5, #0]
 80032e0:	1c59      	adds	r1, r3, #1
 80032e2:	d1c5      	bne.n	8003270 <tactile_poll_nonblocking_tick+0x12c>
        *tps = TPS_READ_DATA;
 80032e4:	2307      	movs	r3, #7
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void tactile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 80032e6:	2c02      	cmp	r4, #2
      }
      break;
    case TPS_TX_READ_DATA_CMD:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        *tps = TPS_READ_DATA;
 80032e8:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void tactile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 80032ec:	f63f af35 	bhi.w	800315a <tactile_poll_nonblocking_tick+0x16>
 80032f0:	4620      	mov	r0, r4
 80032f2:	21c1      	movs	r1, #193	; 0xc1
 80032f4:	2200      	movs	r2, #0
 80032f6:	2304      	movs	r3, #4
 80032f8:	f7ff fa42 	bl	8002780 <tactile_i2c_async_start.part.1>
 80032fc:	e72d      	b.n	800315a <tactile_poll_nonblocking_tick+0x16>
      } else if (*i2c_status == TACTILE_I2C_FAIL) {
        *tps = TPS_DONE;
      }
      break;
    case TPS_BCAST_START_SAMPLING:
      tactile_i2c_async_tick(tp);
 80032fe:	4620      	mov	r0, r4
 8003300:	f7ff fcbc 	bl	8002c7c <tactile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
 8003304:	682b      	ldr	r3, [r5, #0]
 8003306:	1c5f      	adds	r7, r3, #1
 8003308:	d1b2      	bne.n	8003270 <tactile_poll_nonblocking_tick+0x12c>
        *tps = TPS_BCAST_DISABLE;
 800330a:	2303      	movs	r3, #3
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void tactile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 800330c:	2c02      	cmp	r4, #2
      }
      break;
    case TPS_BCAST_START_SAMPLING:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        *tps = TPS_BCAST_DISABLE;
 800330e:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void tactile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 8003312:	f63f af22 	bhi.w	800315a <tactile_poll_nonblocking_tick+0x16>
 8003316:	4620      	mov	r0, r4
 8003318:	210d      	movs	r1, #13
 800331a:	2200      	movs	r2, #0
 800331c:	2301      	movs	r3, #1
 800331e:	f7ff fa2f 	bl	8002780 <tactile_i2c_async_start.part.1>
 8003322:	e71a      	b.n	800315a <tactile_poll_nonblocking_tick+0x16>
        *tps = TPS_SELECT_SENSOR;
        tactile_i2c_async_start(tp, sensor_addr, NULL, 0);
      }
      break;
    case TPS_SELECT_SENSOR:
      tactile_i2c_async_tick(tp);
 8003324:	4620      	mov	r0, r4
 8003326:	f7ff fca9 	bl	8002c7c <tactile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
 800332a:	682b      	ldr	r3, [r5, #0]
 800332c:	1c58      	adds	r0, r3, #1
 800332e:	d19f      	bne.n	8003270 <tactile_poll_nonblocking_tick+0x12c>
        uint8_t msg = 0;
 8003330:	2200      	movs	r2, #0
        *tps = TPS_TX_READ_DATA_CMD;
 8003332:	2306      	movs	r3, #6
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void tactile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 8003334:	2c02      	cmp	r4, #2
      }
      break;
    case TPS_SELECT_SENSOR:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        uint8_t msg = 0;
 8003336:	f88d 2014 	strb.w	r2, [sp, #20]
        *tps = TPS_TX_READ_DATA_CMD;
 800333a:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void tactile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 800333e:	f63f af0c 	bhi.w	800315a <tactile_poll_nonblocking_tick+0x16>
 8003342:	4620      	mov	r0, r4
 8003344:	21c0      	movs	r1, #192	; 0xc0
 8003346:	aa05      	add	r2, sp, #20
 8003348:	2301      	movs	r3, #1
 800334a:	f7ff fa19 	bl	8002780 <tactile_i2c_async_start.part.1>
 800334e:	e704      	b.n	800315a <tactile_poll_nonblocking_tick+0x16>
  if (*i2c_status == TACTILE_I2C_SUCCESS) {
    errCount[tactile_port] = 0;
    err_unset(ERR_TAC_0_PROBLEM + tactile_port);
  } else if (*i2c_status == TACTILE_I2C_FAIL) {
    if (errCount[tactile_port] > 100) {
      err_set(ERR_TAC_0_PROBLEM + tactile_port);
 8003350:	f104 0008 	add.w	r0, r4, #8
 8003354:	b2c0      	uxtb	r0, r0
 8003356:	f000 fb15 	bl	8003984 <err_set>
 800335a:	e70a      	b.n	8003172 <tactile_poll_nonblocking_tick+0x2e>
    case TPS_SENSOR_SAMPLING:
      // wait 3 ms
      if (SYSTIME - state_start_time_us[tp] > 3000) { // CORRECT
        active_sensor_idx[tp] = 0;
        const uint8_t sensor_addr = tactile_sensor_addr(tp, 0);
        *tps = TPS_SELECT_SENSOR;
 800335c:	60f3      	str	r3, [r6, #12]
 800335e:	e6fc      	b.n	800315a <tactile_poll_nonblocking_tick+0x16>
      }
      break;
    case TPS_READ_DATA:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        uint8_t sensor_addr = tactile_sensor_addr(tp, active_sensor_idx[tp]);
 8003360:	4b23      	ldr	r3, [pc, #140]	; (80033f0 <tactile_poll_nonblocking_tick+0x2ac>)
        const uint8_t *p = g_tactile_i2c_async_data[tp];
 8003362:	4828      	ldr	r0, [pc, #160]	; (8003404 <tactile_poll_nonblocking_tick+0x2c0>)
      }
      break;
    case TPS_READ_DATA:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        uint8_t sensor_addr = tactile_sensor_addr(tp, active_sensor_idx[tp]);
 8003364:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
static uint_fast8_t tactile_sensor_addr(const uint_fast8_t tactile_port,
                                        const uint_fast8_t sensor_idx)
{
  if (tactile_port >= NUM_TACTILE_PORTS)
    return 0; // bogus
  if (tactile_port < NUM_FINGERS)
 8003368:	2c03      	cmp	r4, #3
    return g_tactile_finger_addrs[sensor_idx];
 800336a:	bf14      	ite	ne
 800336c:	4b23      	ldrne	r3, [pc, #140]	; (80033fc <tactile_poll_nonblocking_tick+0x2b8>)
  else
    return g_tactile_palm_addrs[sensor_idx];
 800336e:	4b26      	ldreq	r3, [pc, #152]	; (8003408 <tactile_poll_nonblocking_tick+0x2c4>)
 8003370:	5c99      	ldrb	r1, [r3, r2]
      break;
    case TPS_READ_DATA:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        uint8_t sensor_addr = tactile_sensor_addr(tp, active_sensor_idx[tp]);
        const uint8_t *p = g_tactile_i2c_async_data[tp];
 8003372:	0223      	lsls	r3, r4, #8
 8003374:	eb00 0e03 	add.w	lr, r0, r3
        // Addition deals with small wraps
        const uint16_t pressure = 510 - (p[0]<200 ? ((uint16_t)p[0] + 255) : ((uint16_t)p[0]));
 8003378:	5cc3      	ldrb	r3, [r0, r3]
        const uint16_t temperature = ((uint16_t)p[2] << 2) | (p[3] >> 6);
 800337a:	f89e 5003 	ldrb.w	r5, [lr, #3]
 800337e:	f89e e002 	ldrb.w	lr, [lr, #2]
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        uint8_t sensor_addr = tactile_sensor_addr(tp, active_sensor_idx[tp]);
        const uint8_t *p = g_tactile_i2c_async_data[tp];
        // Addition deals with small wraps
        const uint16_t pressure = 510 - (p[0]<200 ? ((uint16_t)p[0] + 255) : ((uint16_t)p[0]));
 8003382:	2bc7      	cmp	r3, #199	; 0xc7
 8003384:	bf94      	ite	ls
 8003386:	f1c3 03ff 	rsbls	r3, r3, #255	; 0xff
 800338a:	f5c3 73ff 	rsbhi	r3, r3, #510	; 0x1fe
 800338e:	b298      	uxth	r0, r3
        const uint16_t temperature = ((uint16_t)p[2] << 2) | (p[3] >> 6);
        const uint_fast8_t state_sensor_idx = tp * SENSORS_PER_FINGER +
 8003390:	2309      	movs	r3, #9
 8003392:	fb13 2204 	smlabb	r2, r3, r4, r2
                                              active_sensor_idx[tp];
        g_state.tactile_pressures   [state_sensor_idx] = pressure;
 8003396:	1d17      	adds	r7, r2, #4
 8003398:	4b1c      	ldr	r3, [pc, #112]	; (800340c <tactile_poll_nonblocking_tick+0x2c8>)
        g_state.tactile_temperatures[state_sensor_idx] = temperature;
 800339a:	3228      	adds	r2, #40	; 0x28
        // Addition deals with small wraps
        const uint16_t pressure = 510 - (p[0]<200 ? ((uint16_t)p[0] + 255) : ((uint16_t)p[0]));
        const uint16_t temperature = ((uint16_t)p[2] << 2) | (p[3] >> 6);
        const uint_fast8_t state_sensor_idx = tp * SENSORS_PER_FINGER +
                                              active_sensor_idx[tp];
        g_state.tactile_pressures   [state_sensor_idx] = pressure;
 800339c:	f833 c017 	ldrh.w	ip, [r3, r7, lsl #1]
 80033a0:	f823 0017 	strh.w	r0, [r3, r7, lsl #1]
        g_state.tactile_temperatures[state_sensor_idx] = temperature;
 80033a4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        uint8_t sensor_addr = tactile_sensor_addr(tp, active_sensor_idx[tp]);
        const uint8_t *p = g_tactile_i2c_async_data[tp];
        // Addition deals with small wraps
        const uint16_t pressure = 510 - (p[0]<200 ? ((uint16_t)p[0] + 255) : ((uint16_t)p[0]));
        const uint16_t temperature = ((uint16_t)p[2] << 2) | (p[3] >> 6);
 80033a8:	09aa      	lsrs	r2, r5, #6
 80033aa:	ea42 028e 	orr.w	r2, r2, lr, lsl #2
                                              active_sensor_idx[tp];
        g_state.tactile_pressures   [state_sensor_idx] = pressure;
        g_state.tactile_temperatures[state_sensor_idx] = temperature;
        //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
        //       tp, sensor_addr, pressure, temperature);
        *tps = TPS_DESELECT_SENSOR;
 80033ae:	2008      	movs	r0, #8
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void tactile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 80033b0:	2c02      	cmp	r4, #2
        const uint16_t pressure = 510 - (p[0]<200 ? ((uint16_t)p[0] + 255) : ((uint16_t)p[0]));
        const uint16_t temperature = ((uint16_t)p[2] << 2) | (p[3] >> 6);
        const uint_fast8_t state_sensor_idx = tp * SENSORS_PER_FINGER +
                                              active_sensor_idx[tp];
        g_state.tactile_pressures   [state_sensor_idx] = pressure;
        g_state.tactile_temperatures[state_sensor_idx] = temperature;
 80033b2:	889d      	ldrh	r5, [r3, #4]
        //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
        //       tp, sensor_addr, pressure, temperature);
        *tps = TPS_DESELECT_SENSOR;
 80033b4:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
        const uint16_t pressure = 510 - (p[0]<200 ? ((uint16_t)p[0] + 255) : ((uint16_t)p[0]));
        const uint16_t temperature = ((uint16_t)p[2] << 2) | (p[3] >> 6);
        const uint_fast8_t state_sensor_idx = tp * SENSORS_PER_FINGER +
                                              active_sensor_idx[tp];
        g_state.tactile_pressures   [state_sensor_idx] = pressure;
        g_state.tactile_temperatures[state_sensor_idx] = temperature;
 80033b8:	809a      	strh	r2, [r3, #4]
{ TBPS_REQUEST_CS_LOW, TBPS_REQUEST_CS_LOW };

void tactile_i2c_async_start(const uint8_t port, const uint8_t address,
                             uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS - 1)
 80033ba:	f63f aece 	bhi.w	800315a <tactile_poll_nonblocking_tick+0x16>
 80033be:	4620      	mov	r0, r4
 80033c0:	f041 0101 	orr.w	r1, r1, #1
 80033c4:	2200      	movs	r2, #0
 80033c6:	2301      	movs	r3, #1
 80033c8:	f7ff f9da 	bl	8002780 <tactile_i2c_async_start.part.1>
 80033cc:	e6c5      	b.n	800315a <tactile_poll_nonblocking_tick+0x16>
      break;
    case TPS_BCAST_DISABLE:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        *tps = TPS_SENSOR_SAMPLING;
        state_start_time_us[tp] = SYSTIME;
 80033ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033d2:	4b06      	ldr	r3, [pc, #24]	; (80033ec <tactile_poll_nonblocking_tick+0x2a8>)
 80033d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033d6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
      }
      break;
    case TPS_BCAST_DISABLE:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        *tps = TPS_SENSOR_SAMPLING;
 80033da:	2304      	movs	r3, #4
 80033dc:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 80033e0:	e6bb      	b.n	800315a <tactile_poll_nonblocking_tick+0x16>
 80033e2:	bf00      	nop
 80033e4:	200103f8 	.word	0x200103f8
 80033e8:	20010420 	.word	0x20010420
 80033ec:	20010400 	.word	0x20010400
 80033f0:	20010430 	.word	0x20010430
 80033f4:	20010410 	.word	0x20010410
 80033f8:	200103e8 	.word	0x200103e8
 80033fc:	0800a9f4 	.word	0x0800a9f4
 8003400:	0800a988 	.word	0x0800a988
 8003404:	2000ffe8 	.word	0x2000ffe8
 8003408:	0800a990 	.word	0x0800a990
 800340c:	2001058c 	.word	0x2001058c
    case TPS_DONE: // initial state. kick things off.
      if (tactile_port == 2)
      {
          uint_fast8_t index;

          uint8_t data[2] = {0x12, 0x01};
 8003410:	4b2e      	ldr	r3, [pc, #184]	; (80034cc <tactile_poll_nonblocking_tick+0x388>)
          writeBytesSPI(SPI1, BCAST_ENABLE_ADDR, NULL, 0, 1);  // enable all sensors    
 8003412:	482f      	ldr	r0, [pc, #188]	; (80034d0 <tactile_poll_nonblocking_tick+0x38c>)
    case TPS_DONE: // initial state. kick things off.
      if (tactile_port == 2)
      {
          uint_fast8_t index;

          uint8_t data[2] = {0x12, 0x01};
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	f8ad 3010 	strh.w	r3, [sp, #16]
          writeBytesSPI(SPI1, BCAST_ENABLE_ADDR, NULL, 0, 1);  // enable all sensors    
 800341a:	2501      	movs	r5, #1
 800341c:	2200      	movs	r2, #0
 800341e:	9500      	str	r5, [sp, #0]
 8003420:	4613      	mov	r3, r2
 8003422:	210c      	movs	r1, #12
 8003424:	f7fd fa90 	bl	8000948 <writeBytesSPI>
          // udelay(SLEEP_TIME);
          writeBytesSPI(SPI1, BAROM_ADDR, data, 2, 1);         // send Start Conversion Sequence
 8003428:	9500      	str	r5, [sp, #0]
 800342a:	4623      	mov	r3, r4
 800342c:	aa04      	add	r2, sp, #16
 800342e:	21c0      	movs	r1, #192	; 0xc0
 8003430:	4827      	ldr	r0, [pc, #156]	; (80034d0 <tactile_poll_nonblocking_tick+0x38c>)
 8003432:	f7fd fa89 	bl	8000948 <writeBytesSPI>
          // udelay(SLEEP_TIME); // test
          // writeBytesSPI(SPI1, BCAST_DISABLE_ADDR, NULL, 0, 1); // disable all sensors
          readBytesSPI(SPI1, BCAST_DISABLE_ADDR>>1, 0, NULL);
 8003436:	2200      	movs	r2, #0
 8003438:	4613      	mov	r3, r2
 800343a:	2106      	movs	r1, #6
 800343c:	4824      	ldr	r0, [pc, #144]	; (80034d0 <tactile_poll_nonblocking_tick+0x38c>)
          udelay(3000);                                     // wait 3ms
          for (int i = 7; i < 8; i++)
          {
            volatile uint8_t values[4] = {0, 0, 0, 0};
 800343e:	2400      	movs	r4, #0
          writeBytesSPI(SPI1, BCAST_ENABLE_ADDR, NULL, 0, 1);  // enable all sensors    
          // udelay(SLEEP_TIME);
          writeBytesSPI(SPI1, BAROM_ADDR, data, 2, 1);         // send Start Conversion Sequence
          // udelay(SLEEP_TIME); // test
          // writeBytesSPI(SPI1, BCAST_DISABLE_ADDR, NULL, 0, 1); // disable all sensors
          readBytesSPI(SPI1, BCAST_DISABLE_ADDR>>1, 0, NULL);
 8003440:	f7fd fbd6 	bl	8000bf0 <readBytesSPI>
          udelay(3000);                                     // wait 3ms
 8003444:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003448:	f7fd fa76 	bl	8000938 <udelay>
          for (int i = 7; i < 8; i++)
          {
            volatile uint8_t values[4] = {0, 0, 0, 0};
            writeBytesSPI(SPI1, tactile_sensor_addr(tp, i), NULL, 0, 1); // enable sensor i
 800344c:	4622      	mov	r2, r4
 800344e:	4623      	mov	r3, r4
 8003450:	9500      	str	r5, [sp, #0]
 8003452:	2114      	movs	r1, #20
 8003454:	481e      	ldr	r0, [pc, #120]	; (80034d0 <tactile_poll_nonblocking_tick+0x38c>)
          // writeBytesSPI(SPI1, BCAST_DISABLE_ADDR, NULL, 0, 1); // disable all sensors
          readBytesSPI(SPI1, BCAST_DISABLE_ADDR>>1, 0, NULL);
          udelay(3000);                                     // wait 3ms
          for (int i = 7; i < 8; i++)
          {
            volatile uint8_t values[4] = {0, 0, 0, 0};
 8003456:	f88d 4014 	strb.w	r4, [sp, #20]
 800345a:	f88d 4015 	strb.w	r4, [sp, #21]
 800345e:	f88d 4016 	strb.w	r4, [sp, #22]
 8003462:	f88d 4017 	strb.w	r4, [sp, #23]
            writeBytesSPI(SPI1, tactile_sensor_addr(tp, i), NULL, 0, 1); // enable sensor i
 8003466:	f7fd fa6f 	bl	8000948 <writeBytesSPI>
            // udelay(SLEEP_TIME); // test
            uint8_t msg[1] = {0};
 800346a:	aa06      	add	r2, sp, #24
            writeBytesSPI(SPI1, BAROM_ADDR, msg, 1, 1);       // choose register 0x00
 800346c:	9500      	str	r5, [sp, #0]
 800346e:	462b      	mov	r3, r5
          for (int i = 7; i < 8; i++)
          {
            volatile uint8_t values[4] = {0, 0, 0, 0};
            writeBytesSPI(SPI1, tactile_sensor_addr(tp, i), NULL, 0, 1); // enable sensor i
            // udelay(SLEEP_TIME); // test
            uint8_t msg[1] = {0};
 8003470:	f802 4d0c 	strb.w	r4, [r2, #-12]!
            writeBytesSPI(SPI1, BAROM_ADDR, msg, 1, 1);       // choose register 0x00
 8003474:	21c0      	movs	r1, #192	; 0xc0
 8003476:	4816      	ldr	r0, [pc, #88]	; (80034d0 <tactile_poll_nonblocking_tick+0x38c>)
 8003478:	f7fd fa66 	bl	8000948 <writeBytesSPI>
            // udelay(SLEEP_TIME); // test
            readBytesSPI(SPI1, BAROM_ADDR >> 1, 1, values);      // read 4 bytes
 800347c:	462a      	mov	r2, r5
 800347e:	ab05      	add	r3, sp, #20
 8003480:	2160      	movs	r1, #96	; 0x60
 8003482:	4813      	ldr	r0, [pc, #76]	; (80034d0 <tactile_poll_nonblocking_tick+0x38c>)
 8003484:	f7fd fbb4 	bl	8000bf0 <readBytesSPI>
            // udelay(SLEEP_TIME); // test
            index = tp * SENSORS_PER_FINGER + i;
            g_state.tactile_pressures   [index] = 510 - (values[0]<200 ? ((uint16_t)values[0] + 255) : ((uint16_t)values[0]));
 8003488:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800348c:	f89d 2014 	ldrb.w	r2, [sp, #20]
            g_state.tactile_temperatures[index] = ((uint16_t)values[2] << 2) | (values[3] >> 6);;
            // writeBytesSPI(SPI1, tactile_sensor_addr(tp, i) + 1, NULL, 0, 1); // disable sensor i
            readBytesSPI(SPI1, tactile_sensor_addr(tp, i)>>1, 0, NULL);
 8003490:	480f      	ldr	r0, [pc, #60]	; (80034d0 <tactile_poll_nonblocking_tick+0x38c>)
            writeBytesSPI(SPI1, BAROM_ADDR, msg, 1, 1);       // choose register 0x00
            // udelay(SLEEP_TIME); // test
            readBytesSPI(SPI1, BAROM_ADDR >> 1, 1, values);      // read 4 bytes
            // udelay(SLEEP_TIME); // test
            index = tp * SENSORS_PER_FINGER + i;
            g_state.tactile_pressures   [index] = 510 - (values[0]<200 ? ((uint16_t)values[0] + 255) : ((uint16_t)values[0]));
 8003492:	2bc7      	cmp	r3, #199	; 0xc7
 8003494:	bf88      	it	hi
 8003496:	f5c2 72ff 	rsbhi	r2, r2, #510	; 0x1fe
 800349a:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <tactile_poll_nonblocking_tick+0x390>)
 800349c:	bf98      	it	ls
 800349e:	f1c2 02ff 	rsbls	r2, r2, #255	; 0xff
 80034a2:	b292      	uxth	r2, r2
 80034a4:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 80034a6:	875a      	strh	r2, [r3, #58]	; 0x3a
            g_state.tactile_temperatures[index] = ((uint16_t)values[2] << 2) | (values[3] >> 6);;
 80034a8:	f89d 5016 	ldrb.w	r5, [sp, #22]
 80034ac:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80034b0:	f8b3 6086 	ldrh.w	r6, [r3, #134]	; 0x86
 80034b4:	f103 0482 	add.w	r4, r3, #130	; 0x82
 80034b8:	0993      	lsrs	r3, r2, #6
 80034ba:	ea43 0585 	orr.w	r5, r3, r5, lsl #2
            // writeBytesSPI(SPI1, tactile_sensor_addr(tp, i) + 1, NULL, 0, 1); // disable sensor i
            readBytesSPI(SPI1, tactile_sensor_addr(tp, i)>>1, 0, NULL);
 80034be:	2200      	movs	r2, #0
 80034c0:	4613      	mov	r3, r2
 80034c2:	210a      	movs	r1, #10
            // udelay(SLEEP_TIME); // test
            readBytesSPI(SPI1, BAROM_ADDR >> 1, 1, values);      // read 4 bytes
            // udelay(SLEEP_TIME); // test
            index = tp * SENSORS_PER_FINGER + i;
            g_state.tactile_pressures   [index] = 510 - (values[0]<200 ? ((uint16_t)values[0] + 255) : ((uint16_t)values[0]));
            g_state.tactile_temperatures[index] = ((uint16_t)values[2] << 2) | (values[3] >> 6);;
 80034c4:	80a5      	strh	r5, [r4, #4]
            // writeBytesSPI(SPI1, tactile_sensor_addr(tp, i) + 1, NULL, 0, 1); // disable sensor i
            readBytesSPI(SPI1, tactile_sensor_addr(tp, i)>>1, 0, NULL);
 80034c6:	f7fd fb93 	bl	8000bf0 <readBytesSPI>
 80034ca:	e646      	b.n	800315a <tactile_poll_nonblocking_tick+0x16>
 80034cc:	0800a988 	.word	0x0800a988
 80034d0:	40013000 	.word	0x40013000
 80034d4:	2001058c 	.word	0x2001058c

080034d8 <pin_set_output_type>:

void pin_set_output_type(GPIO_TypeDef *gpio, 
                         const uint8_t pin_idx,
                         const uint8_t output_type)
{
  if (output_type == PIN_OUTPUT_TYPE_OPEN_DRAIN)
 80034d8:	2a01      	cmp	r2, #1
 80034da:	d006      	beq.n	80034ea <pin_set_output_type+0x12>
    gpio->OTYPER |= (1 << pin_idx);
  }
  else
  {
    //printf("setting pin %d to push-pull\r\n", pin_idx);
    gpio->OTYPER &= ~(1 << pin_idx);
 80034dc:	6842      	ldr	r2, [r0, #4]
 80034de:	2301      	movs	r3, #1
 80034e0:	408b      	lsls	r3, r1
 80034e2:	ea22 0303 	bic.w	r3, r2, r3
 80034e6:	6043      	str	r3, [r0, #4]
 80034e8:	4770      	bx	lr
                         const uint8_t output_type)
{
  if (output_type == PIN_OUTPUT_TYPE_OPEN_DRAIN)
  {
    //printf("setting pin %d to open-drain\r\n", pin_idx);
    gpio->OTYPER |= (1 << pin_idx);
 80034ea:	6843      	ldr	r3, [r0, #4]
 80034ec:	408a      	lsls	r2, r1
 80034ee:	431a      	orrs	r2, r3
 80034f0:	6042      	str	r2, [r0, #4]
 80034f2:	4770      	bx	lr

080034f4 <pin_set_alternate_function>:

void pin_set_alternate_function(GPIO_TypeDef *gpio,
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
 80034f4:	290f      	cmp	r1, #15
 80034f6:	d822      	bhi.n	800353e <pin_set_alternate_function+0x4a>
 80034f8:	2a0f      	cmp	r2, #15
 80034fa:	d820      	bhi.n	800353e <pin_set_alternate_function+0x4a>
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 80034fc:	2907      	cmp	r1, #7
}

void pin_set_alternate_function(GPIO_TypeDef *gpio,
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
 80034fe:	b470      	push	{r4, r5, r6}
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 8003500:	d91e      	bls.n	8003540 <pin_set_alternate_function+0x4c>
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
 8003502:	f1a1 0308 	sub.w	r3, r1, #8
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 8003506:	6a44      	ldr	r4, [r0, #36]	; 0x24
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	b2db      	uxtb	r3, r3
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 800350c:	4625      	mov	r5, r4
 800350e:	f100 0624 	add.w	r6, r0, #36	; 0x24
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
  *af_reg &= ~(0xf << reg_ofs); // zero out whatever was there before
 8003512:	240f      	movs	r4, #15
 8003514:	409c      	lsls	r4, r3
 8003516:	ea25 0404 	bic.w	r4, r5, r4
 800351a:	6034      	str	r4, [r6, #0]
  *af_reg |= function_idx << reg_ofs; // set the alternate function register
 800351c:	6834      	ldr	r4, [r6, #0]
 800351e:	409a      	lsls	r2, r3
 8003520:	4322      	orrs	r2, r4
 8003522:	6032      	str	r2, [r6, #0]
  gpio->MODER &= ~(3 << (pin_idx * 2)); // zero out whatever was there before
 8003524:	6802      	ldr	r2, [r0, #0]
 8003526:	0049      	lsls	r1, r1, #1
 8003528:	2303      	movs	r3, #3
 800352a:	408b      	lsls	r3, r1
 800352c:	ea22 0303 	bic.w	r3, r2, r3
 8003530:	6003      	str	r3, [r0, #0]
  gpio->MODER |= 2 << (pin_idx * 2); // put the GPIO in alternate-function mode
}
 8003532:	bc70      	pop	{r4, r5, r6}
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
  *af_reg &= ~(0xf << reg_ofs); // zero out whatever was there before
  *af_reg |= function_idx << reg_ofs; // set the alternate function register
  gpio->MODER &= ~(3 << (pin_idx * 2)); // zero out whatever was there before
  gpio->MODER |= 2 << (pin_idx * 2); // put the GPIO in alternate-function mode
 8003534:	6802      	ldr	r2, [r0, #0]
 8003536:	2302      	movs	r3, #2
 8003538:	408b      	lsls	r3, r1
 800353a:	4313      	orrs	r3, r2
 800353c:	6003      	str	r3, [r0, #0]
}
 800353e:	4770      	bx	lr
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 8003540:	6a04      	ldr	r4, [r0, #32]
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
 8003542:	008b      	lsls	r3, r1, #2
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 8003544:	4625      	mov	r5, r4
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
 8003546:	b2db      	uxtb	r3, r3
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 8003548:	f100 0620 	add.w	r6, r0, #32
 800354c:	e7e1      	b.n	8003512 <pin_set_alternate_function+0x1e>
 800354e:	bf00      	nop

08003550 <pin_set_output>:
  gpio->MODER |= 2 << (pin_idx * 2); // put the GPIO in alternate-function mode
}

void pin_set_output(GPIO_TypeDef *gpio, const uint8_t pin_idx)
{
  if (pin_idx > 15)
 8003550:	290f      	cmp	r1, #15
 8003552:	d80b      	bhi.n	800356c <pin_set_output+0x1c>
    return; // adios amigo
  gpio->MODER &= ~(3 << (pin_idx * 2));
 8003554:	6802      	ldr	r2, [r0, #0]
 8003556:	0049      	lsls	r1, r1, #1
 8003558:	2303      	movs	r3, #3
 800355a:	408b      	lsls	r3, r1
 800355c:	ea22 0303 	bic.w	r3, r2, r3
 8003560:	6003      	str	r3, [r0, #0]
  gpio->MODER |= 1 << (pin_idx * 2);
 8003562:	6802      	ldr	r2, [r0, #0]
 8003564:	2301      	movs	r3, #1
 8003566:	408b      	lsls	r3, r1
 8003568:	4313      	orrs	r3, r2
 800356a:	6003      	str	r3, [r0, #0]
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop

08003570 <pin_set_output_level>:

void pin_set_output_level(GPIO_TypeDef *gpio, 
                          const uint8_t pin_idx, 
                          const uint8_t pin_level)
{
  if (pin_idx > 15)
 8003570:	290f      	cmp	r1, #15
 8003572:	d804      	bhi.n	800357e <pin_set_output_level+0xe>
    return;
  if (pin_level)
    gpio->BSRRL = 1 << pin_idx;
 8003574:	2301      	movs	r3, #1
 8003576:	408b      	lsls	r3, r1
 8003578:	b29b      	uxth	r3, r3
                          const uint8_t pin_idx, 
                          const uint8_t pin_level)
{
  if (pin_idx > 15)
    return;
  if (pin_level)
 800357a:	b90a      	cbnz	r2, 8003580 <pin_set_output_level+0x10>
    gpio->BSRRL = 1 << pin_idx;
  else
    gpio->BSRRH = 1 << pin_idx;
 800357c:	8343      	strh	r3, [r0, #26]
 800357e:	4770      	bx	lr
                          const uint8_t pin_level)
{
  if (pin_idx > 15)
    return;
  if (pin_level)
    gpio->BSRRL = 1 << pin_idx;
 8003580:	8303      	strh	r3, [r0, #24]
 8003582:	4770      	bx	lr

08003584 <enc_init>:
  // writeBytesSPI(SPI1, AS5048_7BIT_ADDRESS, data, 2, 0);

  // initializing encoders state
  for (int i = 0; i < NUM_ENC; i++)
  {
    g_state.encoders[i] = 0;
 8003584:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <enc_init+0x20>)
 8003586:	2200      	movs	r2, #0
 8003588:	f8b3 10a0 	ldrh.w	r1, [r3, #160]	; 0xa0
 800358c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8003590:	f8b3 10a2 	ldrh.w	r1, [r3, #162]	; 0xa2
 8003594:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8003598:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	; 0xa4
 800359c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	2001058c 	.word	0x2001058c

080035a8 <checkTimeout>:
  }
}

int checkTimeout(int utime, int initialTime)
{
 return (SYSTIME - initialTime > utime);
 80035a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	1a59      	subs	r1, r3, r1
}
 80035b0:	4281      	cmp	r1, r0
 80035b2:	bf94      	ite	ls
 80035b4:	2000      	movls	r0, #0
 80035b6:	2001      	movhi	r0, #1
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop

080035bc <readEncoderI2C>:

int readEncoderI2C(I2C_TypeDef* i2cPort, uint8_t encoderNumber, int timeout)
{
 80035bc:	b530      	push	{r4, r5, lr}
  writeRegisterI2C(i2cPort, AS5048_7BIT_ADDRESS, AS5048B_ANGLLSB_REG);
 80035be:	22ff      	movs	r2, #255	; 0xff
{
 return (SYSTIME - initialTime > utime);
}

int readEncoderI2C(I2C_TypeDef* i2cPort, uint8_t encoderNumber, int timeout)
{
 80035c0:	b083      	sub	sp, #12
 80035c2:	460c      	mov	r4, r1
 80035c4:	4605      	mov	r5, r0
  writeRegisterI2C(i2cPort, AS5048_7BIT_ADDRESS, AS5048B_ANGLLSB_REG);
 80035c6:	2140      	movs	r1, #64	; 0x40
 80035c8:	f7fd f93e 	bl	8000848 <writeRegisterI2C>
  uint8_t valueRead[2];
  readBytesI2C(i2cPort, AS5048_7BIT_ADDRESS, 2, valueRead);
 80035cc:	ab01      	add	r3, sp, #4
 80035ce:	4628      	mov	r0, r5
 80035d0:	2140      	movs	r1, #64	; 0x40
 80035d2:	2202      	movs	r2, #2
 80035d4:	f7fd f964 	bl	80008a0 <readBytesI2C>
  g_state.encoders[encoderNumber] = (((uint16_t) valueRead[0] << 6) + ((uint16_t) (valueRead[1] & 0x3F))); 
 80035d8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80035dc:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80035e0:	4a06      	ldr	r2, [pc, #24]	; (80035fc <readEncoderI2C+0x40>)
 80035e2:	f104 0150 	add.w	r1, r4, #80	; 0x50
 80035e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035ea:	eb03 1380 	add.w	r3, r3, r0, lsl #6
 80035ee:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 80035f2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

  return 0;
}
 80035f6:	2000      	movs	r0, #0
 80035f8:	b003      	add	sp, #12
 80035fa:	bd30      	pop	{r4, r5, pc}
 80035fc:	2001058c 	.word	0x2001058c

08003600 <enc_poll_nonblocking_tick>:
    0 -> Port I2C1
    1 -> Port SPI
    2 -> Port I2C3
*/
void enc_poll_nonblocking_tick(const uint8_t bogus __attribute__((unused)))
{
 8003600:	b538      	push	{r3, r4, r5, lr}
  static uint8_t i2cPort1Updated = 0;
  static uint8_t i2cPort3Updated = 0;
  int result;

  switch(enc_poll_state)
 8003602:	4c37      	ldr	r4, [pc, #220]	; (80036e0 <enc_poll_nonblocking_tick+0xe0>)
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d030      	beq.n	800366c <enc_poll_nonblocking_tick+0x6c>
 800360a:	3301      	adds	r3, #1
 800360c:	d003      	beq.n	8003616 <enc_poll_nonblocking_tick+0x16>
          if (i2cPort1Updated == 1)
            enc_poll_state = EPS_DONE;
        }
      break;
    default:
      enc_poll_state = EPS_DONE; // shouldn't get here
 800360e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003612:	6023      	str	r3, [r4, #0]
 8003614:	bd38      	pop	{r3, r4, r5, pc}
  switch(enc_poll_state)
  {
    case EPS_DONE:
        // result = readEncoderSPI(SPI1, 1, SPI_TIMEOUT); // (spiPort, encoderNumber, timeout)
        
        if (isBusyI2CPort(I2C3) && isBusyI2CPort(I2C1))
 8003616:	4833      	ldr	r0, [pc, #204]	; (80036e4 <enc_poll_nonblocking_tick+0xe4>)
 8003618:	f7fd f98a 	bl	8000930 <isBusyI2CPort>
 800361c:	b150      	cbz	r0, 8003634 <enc_poll_nonblocking_tick+0x34>
 800361e:	4832      	ldr	r0, [pc, #200]	; (80036e8 <enc_poll_nonblocking_tick+0xe8>)
 8003620:	f7fd f986 	bl	8000930 <isBusyI2CPort>
 8003624:	b130      	cbz	r0, 8003634 <enc_poll_nonblocking_tick+0x34>
        {
          enc_poll_state = EPS_I2C;
          i2cPort1Updated = 0;
 8003626:	4931      	ldr	r1, [pc, #196]	; (80036ec <enc_poll_nonblocking_tick+0xec>)
          i2cPort3Updated = 0;
 8003628:	4a31      	ldr	r2, [pc, #196]	; (80036f0 <enc_poll_nonblocking_tick+0xf0>)
    case EPS_DONE:
        // result = readEncoderSPI(SPI1, 1, SPI_TIMEOUT); // (spiPort, encoderNumber, timeout)
        
        if (isBusyI2CPort(I2C3) && isBusyI2CPort(I2C1))
        {
          enc_poll_state = EPS_I2C;
 800362a:	2300      	movs	r3, #0
          i2cPort1Updated = 0;
 800362c:	700b      	strb	r3, [r1, #0]
          i2cPort3Updated = 0;
 800362e:	7013      	strb	r3, [r2, #0]
    case EPS_DONE:
        // result = readEncoderSPI(SPI1, 1, SPI_TIMEOUT); // (spiPort, encoderNumber, timeout)
        
        if (isBusyI2CPort(I2C3) && isBusyI2CPort(I2C1))
        {
          enc_poll_state = EPS_I2C;
 8003630:	6023      	str	r3, [r4, #0]
          i2cPort1Updated = 0;
          i2cPort3Updated = 0;
 8003632:	bd38      	pop	{r3, r4, r5, pc}
        }
        else if (!isBusyI2CPort(I2C3) && !isBusyI2CPort(I2C1))
 8003634:	482b      	ldr	r0, [pc, #172]	; (80036e4 <enc_poll_nonblocking_tick+0xe4>)
 8003636:	f7fd f97b 	bl	8000930 <isBusyI2CPort>
 800363a:	b920      	cbnz	r0, 8003646 <enc_poll_nonblocking_tick+0x46>
 800363c:	482a      	ldr	r0, [pc, #168]	; (80036e8 <enc_poll_nonblocking_tick+0xe8>)
 800363e:	f7fd f977 	bl	8000930 <isBusyI2CPort>
 8003642:	2800      	cmp	r0, #0
 8003644:	d037      	beq.n	80036b6 <enc_poll_nonblocking_tick+0xb6>
        {
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          result = readEncoderI2C(I2C3, 2, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          enc_poll_state = EPS_DONE;
        } 
        else if (!isBusyI2CPort(I2C1))
 8003646:	4828      	ldr	r0, [pc, #160]	; (80036e8 <enc_poll_nonblocking_tick+0xe8>)
 8003648:	f7fd f972 	bl	8000930 <isBusyI2CPort>
 800364c:	2800      	cmp	r0, #0
 800364e:	d038      	beq.n	80036c2 <enc_poll_nonblocking_tick+0xc2>
        {
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          enc_poll_state = EPS_DONE;
        }
        else if (!isBusyI2CPort(I2C3))
 8003650:	4824      	ldr	r0, [pc, #144]	; (80036e4 <enc_poll_nonblocking_tick+0xe4>)
 8003652:	f7fd f96d 	bl	8000930 <isBusyI2CPort>
 8003656:	2800      	cmp	r0, #0
 8003658:	d1dc      	bne.n	8003614 <enc_poll_nonblocking_tick+0x14>
        {
          result = readEncoderI2C(I2C3, 2, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
 800365a:	4822      	ldr	r0, [pc, #136]	; (80036e4 <enc_poll_nonblocking_tick+0xe4>)
 800365c:	2102      	movs	r1, #2
 800365e:	2264      	movs	r2, #100	; 0x64
 8003660:	f7ff ffac 	bl	80035bc <readEncoderI2C>
          enc_poll_state = EPS_DONE;
 8003664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003668:	6023      	str	r3, [r4, #0]
 800366a:	bd38      	pop	{r3, r4, r5, pc}
        }      
      break;
    case EPS_I2C:
        if (!isBusyI2CPort(I2C3) && !isBusyI2CPort(I2C1))
 800366c:	481d      	ldr	r0, [pc, #116]	; (80036e4 <enc_poll_nonblocking_tick+0xe4>)
 800366e:	f7fd f95f 	bl	8000930 <isBusyI2CPort>
 8003672:	b1d8      	cbz	r0, 80036ac <enc_poll_nonblocking_tick+0xac>
        {
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          result = readEncoderI2C(I2C3, 2, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          enc_poll_state = EPS_DONE;
        } 
        else if (!isBusyI2CPort(I2C1) && i2cPort1Updated == 0)
 8003674:	481c      	ldr	r0, [pc, #112]	; (80036e8 <enc_poll_nonblocking_tick+0xe8>)
 8003676:	f7fd f95b 	bl	8000930 <isBusyI2CPort>
 800367a:	b910      	cbnz	r0, 8003682 <enc_poll_nonblocking_tick+0x82>
 800367c:	4d1b      	ldr	r5, [pc, #108]	; (80036ec <enc_poll_nonblocking_tick+0xec>)
 800367e:	7829      	ldrb	r1, [r5, #0]
 8003680:	b341      	cbz	r1, 80036d4 <enc_poll_nonblocking_tick+0xd4>
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          i2cPort1Updated = 1;
          if (i2cPort3Updated == 1)
            enc_poll_state = EPS_DONE;
        }
        else if (!isBusyI2CPort(I2C3) && i2cPort3Updated == 0)
 8003682:	4818      	ldr	r0, [pc, #96]	; (80036e4 <enc_poll_nonblocking_tick+0xe4>)
 8003684:	f7fd f954 	bl	8000930 <isBusyI2CPort>
 8003688:	2800      	cmp	r0, #0
 800368a:	d1c3      	bne.n	8003614 <enc_poll_nonblocking_tick+0x14>
 800368c:	4d18      	ldr	r5, [pc, #96]	; (80036f0 <enc_poll_nonblocking_tick+0xf0>)
 800368e:	782b      	ldrb	r3, [r5, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1bf      	bne.n	8003614 <enc_poll_nonblocking_tick+0x14>
        {
          result = readEncoderI2C(I2C3, 2, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
 8003694:	4813      	ldr	r0, [pc, #76]	; (80036e4 <enc_poll_nonblocking_tick+0xe4>)
 8003696:	2102      	movs	r1, #2
 8003698:	2264      	movs	r2, #100	; 0x64
 800369a:	f7ff ff8f 	bl	80035bc <readEncoderI2C>
          i2cPort3Updated = 1;
          if (i2cPort1Updated == 1)
 800369e:	4b13      	ldr	r3, [pc, #76]	; (80036ec <enc_poll_nonblocking_tick+0xec>)
        } 
        else if (!isBusyI2CPort(I2C1) && i2cPort1Updated == 0)
        {
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          i2cPort1Updated = 1;
          if (i2cPort3Updated == 1)
 80036a0:	781b      	ldrb	r3, [r3, #0]
          enc_poll_state = EPS_DONE;
        } 
        else if (!isBusyI2CPort(I2C1) && i2cPort1Updated == 0)
        {
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          i2cPort1Updated = 1;
 80036a2:	2201      	movs	r2, #1
          if (i2cPort3Updated == 1)
 80036a4:	4293      	cmp	r3, r2
          enc_poll_state = EPS_DONE;
        } 
        else if (!isBusyI2CPort(I2C1) && i2cPort1Updated == 0)
        {
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          i2cPort1Updated = 1;
 80036a6:	702a      	strb	r2, [r5, #0]
          if (i2cPort3Updated == 1)
 80036a8:	d1b4      	bne.n	8003614 <enc_poll_nonblocking_tick+0x14>
 80036aa:	e7b0      	b.n	800360e <enc_poll_nonblocking_tick+0xe>
          result = readEncoderI2C(I2C3, 2, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          enc_poll_state = EPS_DONE;
        }      
      break;
    case EPS_I2C:
        if (!isBusyI2CPort(I2C3) && !isBusyI2CPort(I2C1))
 80036ac:	480e      	ldr	r0, [pc, #56]	; (80036e8 <enc_poll_nonblocking_tick+0xe8>)
 80036ae:	f7fd f93f 	bl	8000930 <isBusyI2CPort>
 80036b2:	2800      	cmp	r0, #0
 80036b4:	d1de      	bne.n	8003674 <enc_poll_nonblocking_tick+0x74>
          i2cPort1Updated = 0;
          i2cPort3Updated = 0;
        }
        else if (!isBusyI2CPort(I2C3) && !isBusyI2CPort(I2C1))
        {
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
 80036b6:	2100      	movs	r1, #0
 80036b8:	2264      	movs	r2, #100	; 0x64
 80036ba:	480b      	ldr	r0, [pc, #44]	; (80036e8 <enc_poll_nonblocking_tick+0xe8>)
 80036bc:	f7ff ff7e 	bl	80035bc <readEncoderI2C>
 80036c0:	e7cb      	b.n	800365a <enc_poll_nonblocking_tick+0x5a>
          result = readEncoderI2C(I2C3, 2, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          enc_poll_state = EPS_DONE;
        } 
        else if (!isBusyI2CPort(I2C1))
        {
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
 80036c2:	4601      	mov	r1, r0
 80036c4:	2264      	movs	r2, #100	; 0x64
 80036c6:	4808      	ldr	r0, [pc, #32]	; (80036e8 <enc_poll_nonblocking_tick+0xe8>)
 80036c8:	f7ff ff78 	bl	80035bc <readEncoderI2C>
          enc_poll_state = EPS_DONE;
 80036cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036d0:	6023      	str	r3, [r4, #0]
 80036d2:	bd38      	pop	{r3, r4, r5, pc}
          result = readEncoderI2C(I2C3, 2, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
          enc_poll_state = EPS_DONE;
        } 
        else if (!isBusyI2CPort(I2C1) && i2cPort1Updated == 0)
        {
          result = readEncoderI2C(I2C1, 0, I2C_TIMEOUT);  // (i2cPort, encoderNumber, timeout)
 80036d4:	4804      	ldr	r0, [pc, #16]	; (80036e8 <enc_poll_nonblocking_tick+0xe8>)
 80036d6:	2264      	movs	r2, #100	; 0x64
 80036d8:	f7ff ff70 	bl	80035bc <readEncoderI2C>
          i2cPort1Updated = 1;
          if (i2cPort3Updated == 1)
 80036dc:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <enc_poll_nonblocking_tick+0xf0>)
 80036de:	e7df      	b.n	80036a0 <enc_poll_nonblocking_tick+0xa0>
 80036e0:	2000007c 	.word	0x2000007c
 80036e4:	40005c00 	.word	0x40005c00
 80036e8:	40005400 	.word	0x40005400
 80036ec:	20010459 	.word	0x20010459
 80036f0:	20010458 	.word	0x20010458

080036f4 <readEncoderSPI>:

  return 0;
}

int readEncoderSPI(SPI_TypeDef* spiPort, uint8_t encoderNumber, int timeout)
{
 80036f4:	b530      	push	{r4, r5, lr}
  writeRegisterSPI(spiPort, AS5048_7BIT_ADDRESS_SPI, AS5048B_ANGLLSB_REG);
 80036f6:	22ff      	movs	r2, #255	; 0xff

  return 0;
}

int readEncoderSPI(SPI_TypeDef* spiPort, uint8_t encoderNumber, int timeout)
{
 80036f8:	b083      	sub	sp, #12
 80036fa:	460c      	mov	r4, r1
 80036fc:	4605      	mov	r5, r0
  writeRegisterSPI(spiPort, AS5048_7BIT_ADDRESS_SPI, AS5048B_ANGLLSB_REG);
 80036fe:	2140      	movs	r1, #64	; 0x40
 8003700:	f7fd f97a 	bl	80009f8 <writeRegisterSPI>
  uint8_t valueRead[2];
  readBytesSPI(spiPort, AS5048_7BIT_ADDRESS_SPI, 2, valueRead);
 8003704:	ab01      	add	r3, sp, #4
 8003706:	4628      	mov	r0, r5
 8003708:	2140      	movs	r1, #64	; 0x40
 800370a:	2202      	movs	r2, #2
 800370c:	f7fd fa70 	bl	8000bf0 <readBytesSPI>
  g_state.encoders[encoderNumber] = (((uint16_t) valueRead[0] << 6) + ((uint16_t) (valueRead[1] & 0x3F)));
 8003710:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003714:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003718:	4a06      	ldr	r2, [pc, #24]	; (8003734 <readEncoderSPI+0x40>)
 800371a:	f104 0150 	add.w	r1, r4, #80	; 0x50
 800371e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003722:	eb03 1380 	add.w	r3, r3, r0, lsl #6
 8003726:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 800372a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

  return 0;
 800372e:	2000      	movs	r0, #0
 8003730:	b003      	add	sp, #12
 8003732:	bd30      	pop	{r4, r5, pc}
 8003734:	2001058c 	.word	0x2001058c

08003738 <state_init>:

volatile state_t g_state;

void state_init()
{
  g_state.header[0] = 0x01; // version number of this state format
 8003738:	4915      	ldr	r1, [pc, #84]	; (8003790 <state_init+0x58>)
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
 800373a:	2200      	movs	r2, #0

volatile state_t g_state;

void state_init()
{
  g_state.header[0] = 0x01; // version number of this state format
 800373c:	2301      	movs	r3, #1
#include "state.h"

volatile state_t g_state;

void state_init()
{
 800373e:	b430      	push	{r4, r5}
  g_state.header[0] = 0x01; // version number of this state format
 8003740:	700b      	strb	r3, [r1, #0]
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
 8003742:	704a      	strb	r2, [r1, #1]
  g_state.header[2] = 0x00; // ditto
 8003744:	708a      	strb	r2, [r1, #2]
  g_state.header[3] = 0x00; // ditto
 8003746:	70ca      	strb	r2, [r1, #3]
  g_state.systime = 0;
 8003748:	6848      	ldr	r0, [r1, #4]
 800374a:	604a      	str	r2, [r1, #4]
  for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 800374c:	4613      	mov	r3, r2
    g_state.tactile_pressures[i] = g_state.tactile_temperatures[i] = 0;
 800374e:	4614      	mov	r4, r2
 8003750:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003754:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8003758:	1d18      	adds	r0, r3, #4
  g_state.header[0] = 0x01; // version number of this state format
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
  g_state.header[2] = 0x00; // ditto
  g_state.header[3] = 0x00; // ditto
  g_state.systime = 0;
  for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 800375a:	3301      	adds	r3, #1
    g_state.tactile_pressures[i] = g_state.tactile_temperatures[i] = 0;
 800375c:	8895      	ldrh	r5, [r2, #4]
 800375e:	8094      	strh	r4, [r2, #4]
  g_state.header[0] = 0x01; // version number of this state format
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
  g_state.header[2] = 0x00; // ditto
  g_state.header[3] = 0x00; // ditto
  g_state.systime = 0;
  for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 8003760:	2b26      	cmp	r3, #38	; 0x26
    g_state.tactile_pressures[i] = g_state.tactile_temperatures[i] = 0;
 8003762:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
 8003766:	f821 4010 	strh.w	r4, [r1, r0, lsl #1]
 800376a:	4a09      	ldr	r2, [pc, #36]	; (8003790 <state_init+0x58>)
 800376c:	f04f 0000 	mov.w	r0, #0
  g_state.header[0] = 0x01; // version number of this state format
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
  g_state.header[2] = 0x00; // ditto
  g_state.header[3] = 0x00; // ditto
  g_state.systime = 0;
  for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 8003770:	d1ee      	bne.n	8003750 <state_init+0x18>
    g_state.tactile_pressures[i] = g_state.tactile_temperatures[i] = 0;
  for (uint_fast8_t i = 0; i < NUM_ENC; i++)
    g_state.encoders[i] = 0;
 8003772:	f8b2 30a0 	ldrh.w	r3, [r2, #160]	; 0xa0
 8003776:	f8a2 00a0 	strh.w	r0, [r2, #160]	; 0xa0
 800377a:	f8b2 30a2 	ldrh.w	r3, [r2, #162]	; 0xa2
 800377e:	f8a2 00a2 	strh.w	r0, [r2, #162]	; 0xa2
 8003782:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8003786:	f8a2 00a4 	strh.w	r0, [r2, #164]	; 0xa4
}
 800378a:	bc30      	pop	{r4, r5}
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	2001058c 	.word	0x2001058c

08003794 <async_poll_init>:
  { dmxl_poll_nonblocking_tick   , 3, (int *)(&dmxl_poll_states[3])    },
  { enc_poll_nonblocking_tick    , 0, (int *)(&enc_poll_state)         }
};

void async_poll_init()
{
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop

08003798 <async_poll_tick>:
}

async_poll_tick_result_t async_poll_tick()
{
 8003798:	b570      	push	{r4, r5, r6, lr}
  if (async_poll_complete)
 800379a:	4e0d      	ldr	r6, [pc, #52]	; (80037d0 <async_poll_tick+0x38>)
 800379c:	6833      	ldr	r3, [r6, #0]
 800379e:	b10b      	cbz	r3, 80037a4 <async_poll_tick+0xc>
    return APT_COMPLETE;
 80037a0:	2002      	movs	r0, #2
  {
    async_poll_complete = 1;
    return APT_JUST_FINISHED;
  }
  return APT_BUSY;
}
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	4c0b      	ldr	r4, [pc, #44]	; (80037d4 <async_poll_tick+0x3c>)
{
}

async_poll_tick_result_t async_poll_tick()
{
  if (async_poll_complete)
 80037a6:	2001      	movs	r0, #1
 80037a8:	f104 056c 	add.w	r5, r4, #108	; 0x6c
    return APT_COMPLETE;
  bool all_done = true;
  for (uint_fast8_t i = 0; i < ASYNC_POLL_NUM_PORTS; i++)
  {
    if (*(poll_targets[i].poll_state) == (int)ASYNC_POLL_DONE)
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3301      	adds	r3, #1
 80037b2:	d005      	beq.n	80037c0 <async_poll_tick+0x28>
      continue;
    all_done = false;
    poll_targets[i].fptr(poll_targets[i].arg);
 80037b4:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 80037b8:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80037bc:	4798      	blx	r3
  bool all_done = true;
  for (uint_fast8_t i = 0; i < ASYNC_POLL_NUM_PORTS; i++)
  {
    if (*(poll_targets[i].poll_state) == (int)ASYNC_POLL_DONE)
      continue;
    all_done = false;
 80037be:	2000      	movs	r0, #0
 80037c0:	340c      	adds	r4, #12
async_poll_tick_result_t async_poll_tick()
{
  if (async_poll_complete)
    return APT_COMPLETE;
  bool all_done = true;
  for (uint_fast8_t i = 0; i < ASYNC_POLL_NUM_PORTS; i++)
 80037c2:	42ac      	cmp	r4, r5
 80037c4:	d1f2      	bne.n	80037ac <async_poll_tick+0x14>
    if (*(poll_targets[i].poll_state) == (int)ASYNC_POLL_DONE)
      continue;
    all_done = false;
    poll_targets[i].fptr(poll_targets[i].arg);
  }
  if (all_done)
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d0eb      	beq.n	80037a2 <async_poll_tick+0xa>
  {
    async_poll_complete = 1;
 80037ca:	2001      	movs	r0, #1
 80037cc:	6030      	str	r0, [r6, #0]
    return APT_JUST_FINISHED;
 80037ce:	bd70      	pop	{r4, r5, r6, pc}
 80037d0:	2001045c 	.word	0x2001045c
 80037d4:	0800aa08 	.word	0x0800aa08

080037d8 <async_poll_start>:
  }
  return APT_BUSY;
}

void async_poll_start()
{
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	4c0c      	ldr	r4, [pc, #48]	; (800380c <async_poll_start+0x34>)
  for (uint_fast8_t i = 0; i < ASYNC_POLL_NUM_PORTS; i++)
  {
    // force them all to the DONE state, in case somebody was stuck,
    // so their state machines get the DONE -> IDLE transition on the next tick
    *poll_targets[i].poll_state = ASYNC_POLL_DONE;
 80037dc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80037e0:	f104 056c 	add.w	r5, r4, #108	; 0x6c
 80037e4:	6822      	ldr	r2, [r4, #0]
    poll_targets[i].fptr(poll_targets[i].arg); // get it started
 80037e6:	f854 3c08 	ldr.w	r3, [r4, #-8]
{
  for (uint_fast8_t i = 0; i < ASYNC_POLL_NUM_PORTS; i++)
  {
    // force them all to the DONE state, in case somebody was stuck,
    // so their state machines get the DONE -> IDLE transition on the next tick
    *poll_targets[i].poll_state = ASYNC_POLL_DONE;
 80037ea:	6016      	str	r6, [r2, #0]
    poll_targets[i].fptr(poll_targets[i].arg); // get it started
 80037ec:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 80037f0:	340c      	adds	r4, #12
 80037f2:	4798      	blx	r3
  return APT_BUSY;
}

void async_poll_start()
{
  for (uint_fast8_t i = 0; i < ASYNC_POLL_NUM_PORTS; i++)
 80037f4:	42ac      	cmp	r4, r5
 80037f6:	d1f5      	bne.n	80037e4 <async_poll_start+0xc>
    // so their state machines get the DONE -> IDLE transition on the next tick
    *poll_targets[i].poll_state = ASYNC_POLL_DONE;
    poll_targets[i].fptr(poll_targets[i].arg); // get it started
  }
  async_poll_complete = 0;
  async_poll_start_time_us = SYSTIME;
 80037f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    // force them all to the DONE state, in case somebody was stuck,
    // so their state machines get the DONE -> IDLE transition on the next tick
    *poll_targets[i].poll_state = ASYNC_POLL_DONE;
    poll_targets[i].fptr(poll_targets[i].arg); // get it started
  }
  async_poll_complete = 0;
 80037fc:	4904      	ldr	r1, [pc, #16]	; (8003810 <async_poll_start+0x38>)
  async_poll_start_time_us = SYSTIME;
 80037fe:	4b05      	ldr	r3, [pc, #20]	; (8003814 <async_poll_start+0x3c>)
 8003800:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003802:	601a      	str	r2, [r3, #0]
    // force them all to the DONE state, in case somebody was stuck,
    // so their state machines get the DONE -> IDLE transition on the next tick
    *poll_targets[i].poll_state = ASYNC_POLL_DONE;
    poll_targets[i].fptr(poll_targets[i].arg); // get it started
  }
  async_poll_complete = 0;
 8003804:	2000      	movs	r0, #0
 8003806:	6008      	str	r0, [r1, #0]
  async_poll_start_time_us = SYSTIME;
 8003808:	bd70      	pop	{r4, r5, r6, pc}
 800380a:	bf00      	nop
 800380c:	0800aa08 	.word	0x0800aa08
 8003810:	2001045c 	.word	0x2001045c
 8003814:	20010460 	.word	0x20010460

08003818 <delay_ns>:
#include <stdint.h>

// TODO: tune this better on an oscilloscope

void delay_ns(uint32_t ns)
{
 8003818:	b082      	sub	sp, #8
  for (volatile uint32_t i = 0; i < ns/10; i++) { }
 800381a:	4b08      	ldr	r3, [pc, #32]	; (800383c <delay_ns+0x24>)
 800381c:	2200      	movs	r2, #0
 800381e:	9201      	str	r2, [sp, #4]
 8003820:	fba3 3000 	umull	r3, r0, r3, r0
 8003824:	9b01      	ldr	r3, [sp, #4]
 8003826:	08c0      	lsrs	r0, r0, #3
 8003828:	4298      	cmp	r0, r3
 800382a:	d905      	bls.n	8003838 <delay_ns+0x20>
 800382c:	9b01      	ldr	r3, [sp, #4]
 800382e:	3301      	adds	r3, #1
 8003830:	9301      	str	r3, [sp, #4]
 8003832:	9b01      	ldr	r3, [sp, #4]
 8003834:	4283      	cmp	r3, r0
 8003836:	d3f9      	bcc.n	800382c <delay_ns+0x14>
}
 8003838:	b002      	add	sp, #8
 800383a:	4770      	bx	lr
 800383c:	cccccccd 	.word	0xcccccccd

08003840 <delay_us>:

void delay_us(uint32_t us)
{
 8003840:	b082      	sub	sp, #8
  for (volatile int i = 0; i < us*10; i++) { }
 8003842:	2300      	movs	r3, #0
 8003844:	9301      	str	r3, [sp, #4]
 8003846:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800384a:	9b01      	ldr	r3, [sp, #4]
 800384c:	0040      	lsls	r0, r0, #1
 800384e:	4283      	cmp	r3, r0
 8003850:	d205      	bcs.n	800385e <delay_us+0x1e>
 8003852:	9b01      	ldr	r3, [sp, #4]
 8003854:	3301      	adds	r3, #1
 8003856:	9301      	str	r3, [sp, #4]
 8003858:	9b01      	ldr	r3, [sp, #4]
 800385a:	4283      	cmp	r3, r0
 800385c:	d3f9      	bcc.n	8003852 <delay_us+0x12>
}
 800385e:	b002      	add	sp, #8
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop

08003864 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8003864:	b082      	sub	sp, #8
  for (volatile int i = 0; i < ms; i++)
 8003866:	2100      	movs	r1, #0
 8003868:	9100      	str	r1, [sp, #0]
 800386a:	9b00      	ldr	r3, [sp, #0]
 800386c:	4298      	cmp	r0, r3
 800386e:	d911      	bls.n	8003894 <delay_ms+0x30>
  for (volatile uint32_t i = 0; i < ns/10; i++) { }
}

void delay_us(uint32_t us)
{
  for (volatile int i = 0; i < us*10; i++) { }
 8003870:	f242 720f 	movw	r2, #9999	; 0x270f
 8003874:	9101      	str	r1, [sp, #4]
 8003876:	9b01      	ldr	r3, [sp, #4]
 8003878:	4293      	cmp	r3, r2
 800387a:	d805      	bhi.n	8003888 <delay_ms+0x24>
 800387c:	9b01      	ldr	r3, [sp, #4]
 800387e:	3301      	adds	r3, #1
 8003880:	9301      	str	r3, [sp, #4]
 8003882:	9b01      	ldr	r3, [sp, #4]
 8003884:	4293      	cmp	r3, r2
 8003886:	d9f9      	bls.n	800387c <delay_ms+0x18>
}

void delay_ms(uint32_t ms)
{
  for (volatile int i = 0; i < ms; i++)
 8003888:	9b00      	ldr	r3, [sp, #0]
 800388a:	3301      	adds	r3, #1
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	9b00      	ldr	r3, [sp, #0]
 8003890:	4283      	cmp	r3, r0
 8003892:	d3ef      	bcc.n	8003874 <delay_ms+0x10>
    delay_us(1000);
}
 8003894:	b002      	add	sp, #8
 8003896:	4770      	bx	lr

08003898 <setLEDs>:
static uint8_t errDetected[ERR_NUMBER] = {0};


// Displays the appropriate LED pattern for a given error at a point in its
// sequence
void setLEDs(uint8_t errorIndex, uint8_t flashIndex) {
 8003898:	b538      	push	{r3, r4, r5, lr}
  uint8_t pattern = errSequence[errorIndex][flashIndex];
 800389a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800389e:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <setLEDs+0x2c>)
 80038a0:	5c5d      	ldrb	r5, [r3, r1]
  for (int i = 0; i < NUM_LEDs; i++) {
 80038a2:	2400      	movs	r4, #0
    if (pattern & (1 << i)) {
 80038a4:	fa45 f304 	asr.w	r3, r5, r4
 80038a8:	f013 0f01 	tst.w	r3, #1
      leds_on(i);
 80038ac:	b2e0      	uxtb	r0, r4
// Displays the appropriate LED pattern for a given error at a point in its
// sequence
void setLEDs(uint8_t errorIndex, uint8_t flashIndex) {
  uint8_t pattern = errSequence[errorIndex][flashIndex];
  for (int i = 0; i < NUM_LEDs; i++) {
    if (pattern & (1 << i)) {
 80038ae:	d005      	beq.n	80038bc <setLEDs+0x24>
      leds_on(i);
 80038b0:	f7fd fa9c 	bl	8000dec <leds_on>

// Displays the appropriate LED pattern for a given error at a point in its
// sequence
void setLEDs(uint8_t errorIndex, uint8_t flashIndex) {
  uint8_t pattern = errSequence[errorIndex][flashIndex];
  for (int i = 0; i < NUM_LEDs; i++) {
 80038b4:	3401      	adds	r4, #1
 80038b6:	2c04      	cmp	r4, #4
 80038b8:	d1f4      	bne.n	80038a4 <setLEDs+0xc>
      leds_on(i);
    } else {
      leds_off(i);
    }
  }
}
 80038ba:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t pattern = errSequence[errorIndex][flashIndex];
  for (int i = 0; i < NUM_LEDs; i++) {
    if (pattern & (1 << i)) {
      leds_on(i);
    } else {
      leds_off(i);
 80038bc:	b2e0      	uxtb	r0, r4
 80038be:	f7fd fab9 	bl	8000e34 <leds_off>
 80038c2:	e7f7      	b.n	80038b4 <setLEDs+0x1c>
 80038c4:	0800aa6c 	.word	0x0800aa6c

080038c8 <err_service>:
  // The time (in uS) when the current flash started.
  static uint32_t flashStartTime = 0;


  // We should continue with our current display
  if (displaying)
 80038c8:	4a27      	ldr	r2, [pc, #156]	; (8003968 <err_service+0xa0>)
 80038ca:	7811      	ldrb	r1, [r2, #0]
}

// This displays the error codes one by one. Each dispay is made up of four
// "flashes" of LED patterns over the first second of the display with no LEDs
// in the second second of the display
void err_service() {
 80038cc:	b430      	push	{r4, r5}
  // The time (in uS) when the current flash started.
  static uint32_t flashStartTime = 0;


  // We should continue with our current display
  if (displaying)
 80038ce:	b329      	cbz	r1, 800391c <err_service+0x54>
  {
    if (SYSTIME - flashStartTime < FLASH_INTERVAL_US)
 80038d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80038d4:	4825      	ldr	r0, [pc, #148]	; (800396c <err_service+0xa4>)
 80038d6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80038d8:	6805      	ldr	r5, [r0, #0]
 80038da:	4c25      	ldr	r4, [pc, #148]	; (8003970 <err_service+0xa8>)
 80038dc:	1b5b      	subs	r3, r3, r5
 80038de:	42a3      	cmp	r3, r4
 80038e0:	d91a      	bls.n	8003918 <err_service+0x50>
    {
      return;
    }

    flashStartTime = SYSTIME;
    flashIndex++;
 80038e2:	4b24      	ldr	r3, [pc, #144]	; (8003974 <err_service+0xac>)
    if (SYSTIME - flashStartTime < FLASH_INTERVAL_US)
    {
      return;
    }

    flashStartTime = SYSTIME;
 80038e4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    flashIndex++;
 80038e6:	7819      	ldrb	r1, [r3, #0]
    if (SYSTIME - flashStartTime < FLASH_INTERVAL_US)
    {
      return;
    }

    flashStartTime = SYSTIME;
 80038e8:	6004      	str	r4, [r0, #0]
    flashIndex++;
 80038ea:	3101      	adds	r1, #1
 80038ec:	b2c9      	uxtb	r1, r1
    if (flashIndex < NUM_FLASHES)
 80038ee:	2907      	cmp	r1, #7
    {
      return;
    }

    flashStartTime = SYSTIME;
    flashIndex++;
 80038f0:	7019      	strb	r1, [r3, #0]
    if (flashIndex < NUM_FLASHES)
 80038f2:	d933      	bls.n	800395c <err_service+0x94>
      setLEDs(errorIndex, flashIndex);
      return;
    }

    // If all are stuck we don't need to then display each individual stuck encoder
    if (errorIndex == ERR_ENC_ALL_STUCK)
 80038f4:	4820      	ldr	r0, [pc, #128]	; (8003978 <err_service+0xb0>)
 80038f6:	7803      	ldrb	r3, [r0, #0]
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d02d      	beq.n	8003958 <err_service+0x90>
    {
      errorIndex += 4;
    }
    else
    {
      errorIndex++;
 80038fc:	3301      	adds	r3, #1
 80038fe:	491f      	ldr	r1, [pc, #124]	; (800397c <err_service+0xb4>)
 8003900:	b2db      	uxtb	r3, r3
 8003902:	fba1 4103 	umull	r4, r1, r1, r3
 8003906:	08c9      	lsrs	r1, r1, #3
 8003908:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800390c:	eba3 0381 	sub.w	r3, r3, r1, lsl #2
 8003910:	b2db      	uxtb	r3, r3
    }
    errorIndex %= ERR_NUMBER;
    displaying = false;
 8003912:	2100      	movs	r1, #0
    }
    else
    {
      errorIndex++;
    }
    errorIndex %= ERR_NUMBER;
 8003914:	7003      	strb	r3, [r0, #0]
    displaying = false;
 8003916:	7011      	strb	r1, [r2, #0]

  // Otherwise keep cycling and looking for an error
  errorIndex++;
  errorIndex %= ERR_NUMBER;
  return;
}
 8003918:	bc30      	pop	{r4, r5}
 800391a:	4770      	bx	lr
    displaying = false;
    return;
  }

  // If we've found a new error start displaying it
  if (errDetected[errorIndex])
 800391c:	4c16      	ldr	r4, [pc, #88]	; (8003978 <err_service+0xb0>)
 800391e:	4b18      	ldr	r3, [pc, #96]	; (8003980 <err_service+0xb8>)
 8003920:	7820      	ldrb	r0, [r4, #0]
 8003922:	5c1b      	ldrb	r3, [r3, r0]
 8003924:	b963      	cbnz	r3, 8003940 <err_service+0x78>
    setLEDs(errorIndex, flashIndex);
    return;
  }

  // Otherwise keep cycling and looking for an error
  errorIndex++;
 8003926:	3001      	adds	r0, #1
  errorIndex %= ERR_NUMBER;
 8003928:	4b14      	ldr	r3, [pc, #80]	; (800397c <err_service+0xb4>)
 800392a:	b2c0      	uxtb	r0, r0
 800392c:	fba3 2300 	umull	r2, r3, r3, r0
 8003930:	08db      	lsrs	r3, r3, #3
 8003932:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003936:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 800393a:	7020      	strb	r0, [r4, #0]
  return;
}
 800393c:	bc30      	pop	{r4, r5}
 800393e:	4770      	bx	lr

  // If we've found a new error start displaying it
  if (errDetected[errorIndex])
  {
    displaying = true;
    flashIndex = 0;
 8003940:	4c0c      	ldr	r4, [pc, #48]	; (8003974 <err_service+0xac>)
    flashStartTime = SYSTIME;
 8003942:	4b0a      	ldr	r3, [pc, #40]	; (800396c <err_service+0xa4>)

  // If we've found a new error start displaying it
  if (errDetected[errorIndex])
  {
    displaying = true;
    flashIndex = 0;
 8003944:	7021      	strb	r1, [r4, #0]
    flashStartTime = SYSTIME;
 8003946:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  }

  // If we've found a new error start displaying it
  if (errDetected[errorIndex])
  {
    displaying = true;
 800394a:	2501      	movs	r5, #1
 800394c:	7015      	strb	r5, [r2, #0]
    flashIndex = 0;
    flashStartTime = SYSTIME;
 800394e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003950:	601a      	str	r2, [r3, #0]

  // Otherwise keep cycling and looking for an error
  errorIndex++;
  errorIndex %= ERR_NUMBER;
  return;
}
 8003952:	bc30      	pop	{r4, r5}
  if (errDetected[errorIndex])
  {
    displaying = true;
    flashIndex = 0;
    flashStartTime = SYSTIME;
    setLEDs(errorIndex, flashIndex);
 8003954:	f7ff bfa0 	b.w	8003898 <setLEDs>
 8003958:	2308      	movs	r3, #8
 800395a:	e7da      	b.n	8003912 <err_service+0x4a>

    flashStartTime = SYSTIME;
    flashIndex++;
    if (flashIndex < NUM_FLASHES)
    {
      setLEDs(errorIndex, flashIndex);
 800395c:	4b06      	ldr	r3, [pc, #24]	; (8003978 <err_service+0xb0>)

  // Otherwise keep cycling and looking for an error
  errorIndex++;
  errorIndex %= ERR_NUMBER;
  return;
}
 800395e:	bc30      	pop	{r4, r5}

    flashStartTime = SYSTIME;
    flashIndex++;
    if (flashIndex < NUM_FLASHES)
    {
      setLEDs(errorIndex, flashIndex);
 8003960:	7818      	ldrb	r0, [r3, #0]
 8003962:	f7ff bf99 	b.w	8003898 <setLEDs>
 8003966:	bf00      	nop
 8003968:	20010478 	.word	0x20010478
 800396c:	20010464 	.word	0x20010464
 8003970:	0003d08f 	.word	0x0003d08f
 8003974:	20010479 	.word	0x20010479
 8003978:	20010468 	.word	0x20010468
 800397c:	aaaaaaab 	.word	0xaaaaaaab
 8003980:	2001046c 	.word	0x2001046c

08003984 <err_set>:
  errorIndex %= ERR_NUMBER;
  return;
}

void err_set(error_type_t err) {
  errDetected[err] = 1;
 8003984:	4b01      	ldr	r3, [pc, #4]	; (800398c <err_set+0x8>)
 8003986:	2201      	movs	r2, #1
 8003988:	541a      	strb	r2, [r3, r0]
 800398a:	4770      	bx	lr
 800398c:	2001046c 	.word	0x2001046c

08003990 <err_unset>:
}

void err_unset(error_type_t err) {
  errDetected[err] = 0;
 8003990:	4b01      	ldr	r3, [pc, #4]	; (8003998 <err_unset+0x8>)
 8003992:	2200      	movs	r2, #0
 8003994:	541a      	strb	r2, [r3, r0]
 8003996:	4770      	bx	lr
 8003998:	2001046c 	.word	0x2001046c

0800399c <exit>:
 800399c:	b508      	push	{r3, lr}
 800399e:	2100      	movs	r1, #0
 80039a0:	4604      	mov	r4, r0
 80039a2:	f001 fc6f 	bl	8005284 <__call_exitprocs>
 80039a6:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <exit+0x1c>)
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80039ac:	b103      	cbz	r3, 80039b0 <exit+0x14>
 80039ae:	4798      	blx	r3
 80039b0:	4620      	mov	r0, r4
 80039b2:	f7fd faf3 	bl	8000f9c <_exit>
 80039b6:	bf00      	nop
 80039b8:	0800aad0 	.word	0x0800aad0

080039bc <__libc_init_array>:
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	4e0f      	ldr	r6, [pc, #60]	; (80039fc <__libc_init_array+0x40>)
 80039c0:	4d0f      	ldr	r5, [pc, #60]	; (8003a00 <__libc_init_array+0x44>)
 80039c2:	1b76      	subs	r6, r6, r5
 80039c4:	10b6      	asrs	r6, r6, #2
 80039c6:	bf18      	it	ne
 80039c8:	2400      	movne	r4, #0
 80039ca:	d005      	beq.n	80039d8 <__libc_init_array+0x1c>
 80039cc:	3401      	adds	r4, #1
 80039ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d2:	4798      	blx	r3
 80039d4:	42a6      	cmp	r6, r4
 80039d6:	d1f9      	bne.n	80039cc <__libc_init_array+0x10>
 80039d8:	4e0a      	ldr	r6, [pc, #40]	; (8003a04 <__libc_init_array+0x48>)
 80039da:	4d0b      	ldr	r5, [pc, #44]	; (8003a08 <__libc_init_array+0x4c>)
 80039dc:	1b76      	subs	r6, r6, r5
 80039de:	f007 f95f 	bl	800aca0 <_init>
 80039e2:	10b6      	asrs	r6, r6, #2
 80039e4:	bf18      	it	ne
 80039e6:	2400      	movne	r4, #0
 80039e8:	d006      	beq.n	80039f8 <__libc_init_array+0x3c>
 80039ea:	3401      	adds	r4, #1
 80039ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f0:	4798      	blx	r3
 80039f2:	42a6      	cmp	r6, r4
 80039f4:	d1f9      	bne.n	80039ea <__libc_init_array+0x2e>
 80039f6:	bd70      	pop	{r4, r5, r6, pc}
 80039f8:	bd70      	pop	{r4, r5, r6, pc}
 80039fa:	bf00      	nop
 80039fc:	0800acac 	.word	0x0800acac
 8003a00:	0800acac 	.word	0x0800acac
 8003a04:	0800acb4 	.word	0x0800acb4
 8003a08:	0800acac 	.word	0x0800acac

08003a0c <memcpy>:
 8003a0c:	4684      	mov	ip, r0
 8003a0e:	ea41 0300 	orr.w	r3, r1, r0
 8003a12:	f013 0303 	ands.w	r3, r3, #3
 8003a16:	d16d      	bne.n	8003af4 <memcpy+0xe8>
 8003a18:	3a40      	subs	r2, #64	; 0x40
 8003a1a:	d341      	bcc.n	8003aa0 <memcpy+0x94>
 8003a1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a20:	f840 3b04 	str.w	r3, [r0], #4
 8003a24:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a28:	f840 3b04 	str.w	r3, [r0], #4
 8003a2c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a30:	f840 3b04 	str.w	r3, [r0], #4
 8003a34:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a38:	f840 3b04 	str.w	r3, [r0], #4
 8003a3c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a40:	f840 3b04 	str.w	r3, [r0], #4
 8003a44:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a48:	f840 3b04 	str.w	r3, [r0], #4
 8003a4c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a50:	f840 3b04 	str.w	r3, [r0], #4
 8003a54:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a58:	f840 3b04 	str.w	r3, [r0], #4
 8003a5c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a60:	f840 3b04 	str.w	r3, [r0], #4
 8003a64:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a68:	f840 3b04 	str.w	r3, [r0], #4
 8003a6c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a70:	f840 3b04 	str.w	r3, [r0], #4
 8003a74:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a78:	f840 3b04 	str.w	r3, [r0], #4
 8003a7c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a80:	f840 3b04 	str.w	r3, [r0], #4
 8003a84:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a88:	f840 3b04 	str.w	r3, [r0], #4
 8003a8c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a90:	f840 3b04 	str.w	r3, [r0], #4
 8003a94:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a98:	f840 3b04 	str.w	r3, [r0], #4
 8003a9c:	3a40      	subs	r2, #64	; 0x40
 8003a9e:	d2bd      	bcs.n	8003a1c <memcpy+0x10>
 8003aa0:	3230      	adds	r2, #48	; 0x30
 8003aa2:	d311      	bcc.n	8003ac8 <memcpy+0xbc>
 8003aa4:	f851 3b04 	ldr.w	r3, [r1], #4
 8003aa8:	f840 3b04 	str.w	r3, [r0], #4
 8003aac:	f851 3b04 	ldr.w	r3, [r1], #4
 8003ab0:	f840 3b04 	str.w	r3, [r0], #4
 8003ab4:	f851 3b04 	ldr.w	r3, [r1], #4
 8003ab8:	f840 3b04 	str.w	r3, [r0], #4
 8003abc:	f851 3b04 	ldr.w	r3, [r1], #4
 8003ac0:	f840 3b04 	str.w	r3, [r0], #4
 8003ac4:	3a10      	subs	r2, #16
 8003ac6:	d2ed      	bcs.n	8003aa4 <memcpy+0x98>
 8003ac8:	320c      	adds	r2, #12
 8003aca:	d305      	bcc.n	8003ad8 <memcpy+0xcc>
 8003acc:	f851 3b04 	ldr.w	r3, [r1], #4
 8003ad0:	f840 3b04 	str.w	r3, [r0], #4
 8003ad4:	3a04      	subs	r2, #4
 8003ad6:	d2f9      	bcs.n	8003acc <memcpy+0xc0>
 8003ad8:	3204      	adds	r2, #4
 8003ada:	d008      	beq.n	8003aee <memcpy+0xe2>
 8003adc:	07d2      	lsls	r2, r2, #31
 8003ade:	bf1c      	itt	ne
 8003ae0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003ae4:	f800 3b01 	strbne.w	r3, [r0], #1
 8003ae8:	d301      	bcc.n	8003aee <memcpy+0xe2>
 8003aea:	880b      	ldrh	r3, [r1, #0]
 8003aec:	8003      	strh	r3, [r0, #0]
 8003aee:	4660      	mov	r0, ip
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	2a08      	cmp	r2, #8
 8003af6:	d313      	bcc.n	8003b20 <memcpy+0x114>
 8003af8:	078b      	lsls	r3, r1, #30
 8003afa:	d08d      	beq.n	8003a18 <memcpy+0xc>
 8003afc:	f010 0303 	ands.w	r3, r0, #3
 8003b00:	d08a      	beq.n	8003a18 <memcpy+0xc>
 8003b02:	f1c3 0304 	rsb	r3, r3, #4
 8003b06:	1ad2      	subs	r2, r2, r3
 8003b08:	07db      	lsls	r3, r3, #31
 8003b0a:	bf1c      	itt	ne
 8003b0c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003b10:	f800 3b01 	strbne.w	r3, [r0], #1
 8003b14:	d380      	bcc.n	8003a18 <memcpy+0xc>
 8003b16:	f831 3b02 	ldrh.w	r3, [r1], #2
 8003b1a:	f820 3b02 	strh.w	r3, [r0], #2
 8003b1e:	e77b      	b.n	8003a18 <memcpy+0xc>
 8003b20:	3a04      	subs	r2, #4
 8003b22:	d3d9      	bcc.n	8003ad8 <memcpy+0xcc>
 8003b24:	3a01      	subs	r2, #1
 8003b26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b2a:	f800 3b01 	strb.w	r3, [r0], #1
 8003b2e:	d2f9      	bcs.n	8003b24 <memcpy+0x118>
 8003b30:	780b      	ldrb	r3, [r1, #0]
 8003b32:	7003      	strb	r3, [r0, #0]
 8003b34:	784b      	ldrb	r3, [r1, #1]
 8003b36:	7043      	strb	r3, [r0, #1]
 8003b38:	788b      	ldrb	r3, [r1, #2]
 8003b3a:	7083      	strb	r3, [r0, #2]
 8003b3c:	4660      	mov	r0, ip
 8003b3e:	4770      	bx	lr

08003b40 <memset>:
 8003b40:	b470      	push	{r4, r5, r6}
 8003b42:	0784      	lsls	r4, r0, #30
 8003b44:	d046      	beq.n	8003bd4 <memset+0x94>
 8003b46:	1e54      	subs	r4, r2, #1
 8003b48:	2a00      	cmp	r2, #0
 8003b4a:	d041      	beq.n	8003bd0 <memset+0x90>
 8003b4c:	b2cd      	uxtb	r5, r1
 8003b4e:	4603      	mov	r3, r0
 8003b50:	e002      	b.n	8003b58 <memset+0x18>
 8003b52:	1e62      	subs	r2, r4, #1
 8003b54:	b3e4      	cbz	r4, 8003bd0 <memset+0x90>
 8003b56:	4614      	mov	r4, r2
 8003b58:	f803 5b01 	strb.w	r5, [r3], #1
 8003b5c:	079a      	lsls	r2, r3, #30
 8003b5e:	d1f8      	bne.n	8003b52 <memset+0x12>
 8003b60:	2c03      	cmp	r4, #3
 8003b62:	d92e      	bls.n	8003bc2 <memset+0x82>
 8003b64:	b2cd      	uxtb	r5, r1
 8003b66:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003b6a:	2c0f      	cmp	r4, #15
 8003b6c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003b70:	d919      	bls.n	8003ba6 <memset+0x66>
 8003b72:	f103 0210 	add.w	r2, r3, #16
 8003b76:	4626      	mov	r6, r4
 8003b78:	3e10      	subs	r6, #16
 8003b7a:	2e0f      	cmp	r6, #15
 8003b7c:	f842 5c10 	str.w	r5, [r2, #-16]
 8003b80:	f842 5c0c 	str.w	r5, [r2, #-12]
 8003b84:	f842 5c08 	str.w	r5, [r2, #-8]
 8003b88:	f842 5c04 	str.w	r5, [r2, #-4]
 8003b8c:	f102 0210 	add.w	r2, r2, #16
 8003b90:	d8f2      	bhi.n	8003b78 <memset+0x38>
 8003b92:	f1a4 0210 	sub.w	r2, r4, #16
 8003b96:	f022 020f 	bic.w	r2, r2, #15
 8003b9a:	f004 040f 	and.w	r4, r4, #15
 8003b9e:	3210      	adds	r2, #16
 8003ba0:	2c03      	cmp	r4, #3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	d90d      	bls.n	8003bc2 <memset+0x82>
 8003ba6:	461e      	mov	r6, r3
 8003ba8:	4622      	mov	r2, r4
 8003baa:	3a04      	subs	r2, #4
 8003bac:	2a03      	cmp	r2, #3
 8003bae:	f846 5b04 	str.w	r5, [r6], #4
 8003bb2:	d8fa      	bhi.n	8003baa <memset+0x6a>
 8003bb4:	1f22      	subs	r2, r4, #4
 8003bb6:	f022 0203 	bic.w	r2, r2, #3
 8003bba:	3204      	adds	r2, #4
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f004 0403 	and.w	r4, r4, #3
 8003bc2:	b12c      	cbz	r4, 8003bd0 <memset+0x90>
 8003bc4:	b2c9      	uxtb	r1, r1
 8003bc6:	441c      	add	r4, r3
 8003bc8:	f803 1b01 	strb.w	r1, [r3], #1
 8003bcc:	42a3      	cmp	r3, r4
 8003bce:	d1fb      	bne.n	8003bc8 <memset+0x88>
 8003bd0:	bc70      	pop	{r4, r5, r6}
 8003bd2:	4770      	bx	lr
 8003bd4:	4614      	mov	r4, r2
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	e7c2      	b.n	8003b60 <memset+0x20>
 8003bda:	bf00      	nop

08003bdc <_printf_r>:
 8003bdc:	b40e      	push	{r1, r2, r3}
 8003bde:	b500      	push	{lr}
 8003be0:	b082      	sub	sp, #8
 8003be2:	ab03      	add	r3, sp, #12
 8003be4:	6881      	ldr	r1, [r0, #8]
 8003be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	f000 f884 	bl	8003cf8 <_vfprintf_r>
 8003bf0:	b002      	add	sp, #8
 8003bf2:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bf6:	b003      	add	sp, #12
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop

08003bfc <printf>:
 8003bfc:	b40f      	push	{r0, r1, r2, r3}
 8003bfe:	b500      	push	{lr}
 8003c00:	4907      	ldr	r1, [pc, #28]	; (8003c20 <printf+0x24>)
 8003c02:	b083      	sub	sp, #12
 8003c04:	ab04      	add	r3, sp, #16
 8003c06:	6808      	ldr	r0, [r1, #0]
 8003c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c0c:	6881      	ldr	r1, [r0, #8]
 8003c0e:	9301      	str	r3, [sp, #4]
 8003c10:	f000 f872 	bl	8003cf8 <_vfprintf_r>
 8003c14:	b003      	add	sp, #12
 8003c16:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c1a:	b004      	add	sp, #16
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	200004a8 	.word	0x200004a8

08003c24 <_puts_r>:
 8003c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c26:	4605      	mov	r5, r0
 8003c28:	b089      	sub	sp, #36	; 0x24
 8003c2a:	4608      	mov	r0, r1
 8003c2c:	460c      	mov	r4, r1
 8003c2e:	f000 f833 	bl	8003c98 <strlen>
 8003c32:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003c34:	4f13      	ldr	r7, [pc, #76]	; (8003c84 <_puts_r+0x60>)
 8003c36:	9404      	str	r4, [sp, #16]
 8003c38:	2601      	movs	r6, #1
 8003c3a:	1c44      	adds	r4, r0, #1
 8003c3c:	a904      	add	r1, sp, #16
 8003c3e:	2202      	movs	r2, #2
 8003c40:	9403      	str	r4, [sp, #12]
 8003c42:	9005      	str	r0, [sp, #20]
 8003c44:	68ac      	ldr	r4, [r5, #8]
 8003c46:	9706      	str	r7, [sp, #24]
 8003c48:	9607      	str	r6, [sp, #28]
 8003c4a:	9101      	str	r1, [sp, #4]
 8003c4c:	9202      	str	r2, [sp, #8]
 8003c4e:	b1ab      	cbz	r3, 8003c7c <_puts_r+0x58>
 8003c50:	89a3      	ldrh	r3, [r4, #12]
 8003c52:	049a      	lsls	r2, r3, #18
 8003c54:	d406      	bmi.n	8003c64 <_puts_r+0x40>
 8003c56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c60:	81a3      	strh	r3, [r4, #12]
 8003c62:	6662      	str	r2, [r4, #100]	; 0x64
 8003c64:	4628      	mov	r0, r5
 8003c66:	4621      	mov	r1, r4
 8003c68:	aa01      	add	r2, sp, #4
 8003c6a:	f002 fe7b 	bl	8006964 <__sfvwrite_r>
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	bf14      	ite	ne
 8003c72:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8003c76:	200a      	moveq	r0, #10
 8003c78:	b009      	add	sp, #36	; 0x24
 8003c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	f002 fd13 	bl	80066a8 <__sinit>
 8003c82:	e7e5      	b.n	8003c50 <_puts_r+0x2c>
 8003c84:	0800a980 	.word	0x0800a980

08003c88 <puts>:
 8003c88:	4b02      	ldr	r3, [pc, #8]	; (8003c94 <puts+0xc>)
 8003c8a:	4601      	mov	r1, r0
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	f7ff bfc9 	b.w	8003c24 <_puts_r>
 8003c92:	bf00      	nop
 8003c94:	200004a8 	.word	0x200004a8

08003c98 <strlen>:
 8003c98:	f020 0103 	bic.w	r1, r0, #3
 8003c9c:	f010 0003 	ands.w	r0, r0, #3
 8003ca0:	f1c0 0000 	rsb	r0, r0, #0
 8003ca4:	f851 3b04 	ldr.w	r3, [r1], #4
 8003ca8:	f100 0c04 	add.w	ip, r0, #4
 8003cac:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8003cb0:	f06f 0200 	mvn.w	r2, #0
 8003cb4:	bf1c      	itt	ne
 8003cb6:	fa22 f20c 	lsrne.w	r2, r2, ip
 8003cba:	4313      	orrne	r3, r2
 8003cbc:	f04f 0c01 	mov.w	ip, #1
 8003cc0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8003cc4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8003cc8:	eba3 020c 	sub.w	r2, r3, ip
 8003ccc:	ea22 0203 	bic.w	r2, r2, r3
 8003cd0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8003cd4:	bf04      	itt	eq
 8003cd6:	f851 3b04 	ldreq.w	r3, [r1], #4
 8003cda:	3004      	addeq	r0, #4
 8003cdc:	d0f4      	beq.n	8003cc8 <strlen+0x30>
 8003cde:	f1c2 0100 	rsb	r1, r2, #0
 8003ce2:	ea02 0201 	and.w	r2, r2, r1
 8003ce6:	fab2 f282 	clz	r2, r2
 8003cea:	f1c2 021f 	rsb	r2, r2, #31
 8003cee:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8003cf2:	4770      	bx	lr
 8003cf4:	0000      	movs	r0, r0
	...

08003cf8 <_vfprintf_r>:
 8003cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cfc:	b0bd      	sub	sp, #244	; 0xf4
 8003cfe:	461c      	mov	r4, r3
 8003d00:	4689      	mov	r9, r1
 8003d02:	9204      	str	r2, [sp, #16]
 8003d04:	4607      	mov	r7, r0
 8003d06:	f003 f83b 	bl	8006d80 <_localeconv_r>
 8003d0a:	6803      	ldr	r3, [r0, #0]
 8003d0c:	9311      	str	r3, [sp, #68]	; 0x44
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff ffc2 	bl	8003c98 <strlen>
 8003d14:	9408      	str	r4, [sp, #32]
 8003d16:	9012      	str	r0, [sp, #72]	; 0x48
 8003d18:	b11f      	cbz	r7, 8003d22 <_vfprintf_r+0x2a>
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 80f3 	beq.w	8003f08 <_vfprintf_r+0x210>
 8003d22:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8003d26:	b293      	uxth	r3, r2
 8003d28:	049e      	lsls	r6, r3, #18
 8003d2a:	d40a      	bmi.n	8003d42 <_vfprintf_r+0x4a>
 8003d2c:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 8003d30:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8003d34:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8003d38:	f8a9 300c 	strh.w	r3, [r9, #12]
 8003d3c:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	071d      	lsls	r5, r3, #28
 8003d44:	f140 80aa 	bpl.w	8003e9c <_vfprintf_r+0x1a4>
 8003d48:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8003d4c:	2a00      	cmp	r2, #0
 8003d4e:	f000 80a5 	beq.w	8003e9c <_vfprintf_r+0x1a4>
 8003d52:	f003 031a 	and.w	r3, r3, #26
 8003d56:	2b0a      	cmp	r3, #10
 8003d58:	f000 80ac 	beq.w	8003eb4 <_vfprintf_r+0x1bc>
 8003d5c:	ed9f 7b6e 	vldr	d7, [pc, #440]	; 8003f18 <_vfprintf_r+0x220>
 8003d60:	2300      	movs	r3, #0
 8003d62:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003d66:	930d      	str	r3, [sp, #52]	; 0x34
 8003d68:	9321      	str	r3, [sp, #132]	; 0x84
 8003d6a:	9320      	str	r3, [sp, #128]	; 0x80
 8003d6c:	9310      	str	r3, [sp, #64]	; 0x40
 8003d6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8003d70:	9305      	str	r3, [sp, #20]
 8003d72:	ab2c      	add	r3, sp, #176	; 0xb0
 8003d74:	931f      	str	r3, [sp, #124]	; 0x7c
 8003d76:	461c      	mov	r4, r3
 8003d78:	46b8      	mov	r8, r7
 8003d7a:	9d04      	ldr	r5, [sp, #16]
 8003d7c:	782b      	ldrb	r3, [r5, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 80c6 	beq.w	8003f10 <_vfprintf_r+0x218>
 8003d84:	2b25      	cmp	r3, #37	; 0x25
 8003d86:	d102      	bne.n	8003d8e <_vfprintf_r+0x96>
 8003d88:	e0c2      	b.n	8003f10 <_vfprintf_r+0x218>
 8003d8a:	2b25      	cmp	r3, #37	; 0x25
 8003d8c:	d003      	beq.n	8003d96 <_vfprintf_r+0x9e>
 8003d8e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f9      	bne.n	8003d8a <_vfprintf_r+0x92>
 8003d96:	9b04      	ldr	r3, [sp, #16]
 8003d98:	1aee      	subs	r6, r5, r3
 8003d9a:	b17e      	cbz	r6, 8003dbc <_vfprintf_r+0xc4>
 8003d9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003d9e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003da0:	9904      	ldr	r1, [sp, #16]
 8003da2:	6021      	str	r1, [r4, #0]
 8003da4:	3301      	adds	r3, #1
 8003da6:	4432      	add	r2, r6
 8003da8:	2b07      	cmp	r3, #7
 8003daa:	6066      	str	r6, [r4, #4]
 8003dac:	9221      	str	r2, [sp, #132]	; 0x84
 8003dae:	9320      	str	r3, [sp, #128]	; 0x80
 8003db0:	f300 8093 	bgt.w	8003eda <_vfprintf_r+0x1e2>
 8003db4:	3408      	adds	r4, #8
 8003db6:	9b05      	ldr	r3, [sp, #20]
 8003db8:	4433      	add	r3, r6
 8003dba:	9305      	str	r3, [sp, #20]
 8003dbc:	782b      	ldrb	r3, [r5, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 8093 	beq.w	8003eea <_vfprintf_r+0x1f2>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	1c69      	adds	r1, r5, #1
 8003dc8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003dcc:	786d      	ldrb	r5, [r5, #1]
 8003dce:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	9306      	str	r3, [sp, #24]
 8003dd6:	9302      	str	r3, [sp, #8]
 8003dd8:	4656      	mov	r6, sl
 8003dda:	1c4b      	adds	r3, r1, #1
 8003ddc:	f1a5 0120 	sub.w	r1, r5, #32
 8003de0:	2958      	cmp	r1, #88	; 0x58
 8003de2:	f200 83cd 	bhi.w	8004580 <_vfprintf_r+0x888>
 8003de6:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003dea:	025c      	.short	0x025c
 8003dec:	03cb03cb 	.word	0x03cb03cb
 8003df0:	03cb0302 	.word	0x03cb0302
 8003df4:	03cb03cb 	.word	0x03cb03cb
 8003df8:	03cb03cb 	.word	0x03cb03cb
 8003dfc:	030903cb 	.word	0x030903cb
 8003e00:	03cb02d2 	.word	0x03cb02d2
 8003e04:	035301f8 	.word	0x035301f8
 8003e08:	02d603cb 	.word	0x02d603cb
 8003e0c:	02dd02dd 	.word	0x02dd02dd
 8003e10:	02dd02dd 	.word	0x02dd02dd
 8003e14:	02dd02dd 	.word	0x02dd02dd
 8003e18:	02dd02dd 	.word	0x02dd02dd
 8003e1c:	03cb02dd 	.word	0x03cb02dd
 8003e20:	03cb03cb 	.word	0x03cb03cb
 8003e24:	03cb03cb 	.word	0x03cb03cb
 8003e28:	03cb03cb 	.word	0x03cb03cb
 8003e2c:	03cb03cb 	.word	0x03cb03cb
 8003e30:	027103cb 	.word	0x027103cb
 8003e34:	03cb0293 	.word	0x03cb0293
 8003e38:	03cb0293 	.word	0x03cb0293
 8003e3c:	03cb03cb 	.word	0x03cb03cb
 8003e40:	02cb03cb 	.word	0x02cb03cb
 8003e44:	03cb03cb 	.word	0x03cb03cb
 8003e48:	03cb036e 	.word	0x03cb036e
 8003e4c:	03cb03cb 	.word	0x03cb03cb
 8003e50:	03cb03cb 	.word	0x03cb03cb
 8003e54:	03cb03b5 	.word	0x03cb03b5
 8003e58:	038b03cb 	.word	0x038b03cb
 8003e5c:	03cb03cb 	.word	0x03cb03cb
 8003e60:	03cb03cb 	.word	0x03cb03cb
 8003e64:	03cb03cb 	.word	0x03cb03cb
 8003e68:	03cb03cb 	.word	0x03cb03cb
 8003e6c:	03cb03cb 	.word	0x03cb03cb
 8003e70:	031703a0 	.word	0x031703a0
 8003e74:	02930293 	.word	0x02930293
 8003e78:	03300293 	.word	0x03300293
 8003e7c:	03cb0317 	.word	0x03cb0317
 8003e80:	033703cb 	.word	0x033703cb
 8003e84:	034103cb 	.word	0x034103cb
 8003e88:	02ec01ff 	.word	0x02ec01ff
 8003e8c:	03cb0263 	.word	0x03cb0263
 8003e90:	03cb0211 	.word	0x03cb0211
 8003e94:	03cb009b 	.word	0x03cb009b
 8003e98:	023603cb 	.word	0x023603cb
 8003e9c:	4638      	mov	r0, r7
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	f001 f984 	bl	80051ac <__swsetup_r>
 8003ea4:	b9a0      	cbnz	r0, 8003ed0 <_vfprintf_r+0x1d8>
 8003ea6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003eaa:	f003 031a 	and.w	r3, r3, #26
 8003eae:	2b0a      	cmp	r3, #10
 8003eb0:	f47f af54 	bne.w	8003d5c <_vfprintf_r+0x64>
 8003eb4:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f6ff af4f 	blt.w	8003d5c <_vfprintf_r+0x64>
 8003ebe:	4638      	mov	r0, r7
 8003ec0:	4649      	mov	r1, r9
 8003ec2:	9a04      	ldr	r2, [sp, #16]
 8003ec4:	4623      	mov	r3, r4
 8003ec6:	f001 f935 	bl	8005134 <__sbprintf>
 8003eca:	b03d      	add	sp, #244	; 0xf4
 8003ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ed4:	b03d      	add	sp, #244	; 0xf4
 8003ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eda:	4640      	mov	r0, r8
 8003edc:	4649      	mov	r1, r9
 8003ede:	aa1f      	add	r2, sp, #124	; 0x7c
 8003ee0:	f004 fba8 	bl	8008634 <__sprint_r>
 8003ee4:	b940      	cbnz	r0, 8003ef8 <_vfprintf_r+0x200>
 8003ee6:	ac2c      	add	r4, sp, #176	; 0xb0
 8003ee8:	e765      	b.n	8003db6 <_vfprintf_r+0xbe>
 8003eea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003eec:	b123      	cbz	r3, 8003ef8 <_vfprintf_r+0x200>
 8003eee:	4640      	mov	r0, r8
 8003ef0:	4649      	mov	r1, r9
 8003ef2:	aa1f      	add	r2, sp, #124	; 0x7c
 8003ef4:	f004 fb9e 	bl	8008634 <__sprint_r>
 8003ef8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003efc:	065a      	lsls	r2, r3, #25
 8003efe:	d4e7      	bmi.n	8003ed0 <_vfprintf_r+0x1d8>
 8003f00:	9805      	ldr	r0, [sp, #20]
 8003f02:	b03d      	add	sp, #244	; 0xf4
 8003f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f08:	4638      	mov	r0, r7
 8003f0a:	f002 fbcd 	bl	80066a8 <__sinit>
 8003f0e:	e708      	b.n	8003d22 <_vfprintf_r+0x2a>
 8003f10:	9d04      	ldr	r5, [sp, #16]
 8003f12:	e753      	b.n	8003dbc <_vfprintf_r+0xc4>
 8003f14:	f3af 8000 	nop.w
	...
 8003f20:	9304      	str	r3, [sp, #16]
 8003f22:	9b02      	ldr	r3, [sp, #8]
 8003f24:	46b2      	mov	sl, r6
 8003f26:	069e      	lsls	r6, r3, #26
 8003f28:	f140 831e 	bpl.w	8004568 <_vfprintf_r+0x870>
 8003f2c:	9f08      	ldr	r7, [sp, #32]
 8003f2e:	3707      	adds	r7, #7
 8003f30:	f027 0307 	bic.w	r3, r7, #7
 8003f34:	f103 0208 	add.w	r2, r3, #8
 8003f38:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003f3c:	9208      	str	r2, [sp, #32]
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f04f 0c00 	mov.w	ip, #0
 8003f44:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 8003f48:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8003f4c:	f1ba 0f00 	cmp.w	sl, #0
 8003f50:	db03      	blt.n	8003f5a <_vfprintf_r+0x262>
 8003f52:	9a02      	ldr	r2, [sp, #8]
 8003f54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f58:	9202      	str	r2, [sp, #8]
 8003f5a:	ea56 0207 	orrs.w	r2, r6, r7
 8003f5e:	f040 831f 	bne.w	80045a0 <_vfprintf_r+0x8a8>
 8003f62:	f1ba 0f00 	cmp.w	sl, #0
 8003f66:	f000 841c 	beq.w	80047a2 <_vfprintf_r+0xaaa>
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	f000 8320 	beq.w	80045b0 <_vfprintf_r+0x8b8>
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	f000 8452 	beq.w	800481a <_vfprintf_r+0xb22>
 8003f76:	a92c      	add	r1, sp, #176	; 0xb0
 8003f78:	08f2      	lsrs	r2, r6, #3
 8003f7a:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8003f7e:	08f8      	lsrs	r0, r7, #3
 8003f80:	f006 0307 	and.w	r3, r6, #7
 8003f84:	4607      	mov	r7, r0
 8003f86:	4616      	mov	r6, r2
 8003f88:	3330      	adds	r3, #48	; 0x30
 8003f8a:	ea56 0207 	orrs.w	r2, r6, r7
 8003f8e:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8003f92:	d1f1      	bne.n	8003f78 <_vfprintf_r+0x280>
 8003f94:	9a02      	ldr	r2, [sp, #8]
 8003f96:	910a      	str	r1, [sp, #40]	; 0x28
 8003f98:	07d0      	lsls	r0, r2, #31
 8003f9a:	f100 84f9 	bmi.w	8004990 <_vfprintf_r+0xc98>
 8003f9e:	ab2c      	add	r3, sp, #176	; 0xb0
 8003fa0:	1a5b      	subs	r3, r3, r1
 8003fa2:	9307      	str	r3, [sp, #28]
 8003fa4:	9a07      	ldr	r2, [sp, #28]
 8003fa6:	4592      	cmp	sl, r2
 8003fa8:	4653      	mov	r3, sl
 8003faa:	bfb8      	it	lt
 8003fac:	4613      	movlt	r3, r2
 8003fae:	9303      	str	r3, [sp, #12]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	930c      	str	r3, [sp, #48]	; 0x30
 8003fb4:	f1bc 0f00 	cmp.w	ip, #0
 8003fb8:	d002      	beq.n	8003fc0 <_vfprintf_r+0x2c8>
 8003fba:	9b03      	ldr	r3, [sp, #12]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	9303      	str	r3, [sp, #12]
 8003fc0:	9b02      	ldr	r3, [sp, #8]
 8003fc2:	f013 0302 	ands.w	r3, r3, #2
 8003fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc8:	d002      	beq.n	8003fd0 <_vfprintf_r+0x2d8>
 8003fca:	9b03      	ldr	r3, [sp, #12]
 8003fcc:	3302      	adds	r3, #2
 8003fce:	9303      	str	r3, [sp, #12]
 8003fd0:	9b02      	ldr	r3, [sp, #8]
 8003fd2:	f013 0684 	ands.w	r6, r3, #132	; 0x84
 8003fd6:	f040 82e0 	bne.w	800459a <_vfprintf_r+0x8a2>
 8003fda:	9b06      	ldr	r3, [sp, #24]
 8003fdc:	9a03      	ldr	r2, [sp, #12]
 8003fde:	ebc2 0a03 	rsb	sl, r2, r3
 8003fe2:	f1ba 0f00 	cmp.w	sl, #0
 8003fe6:	f340 82d8 	ble.w	800459a <_vfprintf_r+0x8a2>
 8003fea:	f1ba 0f10 	cmp.w	sl, #16
 8003fee:	9921      	ldr	r1, [sp, #132]	; 0x84
 8003ff0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003ff2:	4fb3      	ldr	r7, [pc, #716]	; (80042c0 <_vfprintf_r+0x5c8>)
 8003ff4:	bfc8      	it	gt
 8003ff6:	f04f 0b10 	movgt.w	fp, #16
 8003ffa:	dc07      	bgt.n	800400c <_vfprintf_r+0x314>
 8003ffc:	e01e      	b.n	800403c <_vfprintf_r+0x344>
 8003ffe:	f1aa 0a10 	sub.w	sl, sl, #16
 8004002:	f1ba 0f10 	cmp.w	sl, #16
 8004006:	f104 0408 	add.w	r4, r4, #8
 800400a:	dd17      	ble.n	800403c <_vfprintf_r+0x344>
 800400c:	3201      	adds	r2, #1
 800400e:	3110      	adds	r1, #16
 8004010:	2a07      	cmp	r2, #7
 8004012:	9121      	str	r1, [sp, #132]	; 0x84
 8004014:	9220      	str	r2, [sp, #128]	; 0x80
 8004016:	e884 0880 	stmia.w	r4, {r7, fp}
 800401a:	ddf0      	ble.n	8003ffe <_vfprintf_r+0x306>
 800401c:	4640      	mov	r0, r8
 800401e:	4649      	mov	r1, r9
 8004020:	aa1f      	add	r2, sp, #124	; 0x7c
 8004022:	f004 fb07 	bl	8008634 <__sprint_r>
 8004026:	2800      	cmp	r0, #0
 8004028:	f47f af66 	bne.w	8003ef8 <_vfprintf_r+0x200>
 800402c:	f1aa 0a10 	sub.w	sl, sl, #16
 8004030:	f1ba 0f10 	cmp.w	sl, #16
 8004034:	9921      	ldr	r1, [sp, #132]	; 0x84
 8004036:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004038:	ac2c      	add	r4, sp, #176	; 0xb0
 800403a:	dce7      	bgt.n	800400c <_vfprintf_r+0x314>
 800403c:	3201      	adds	r2, #1
 800403e:	eb0a 0b01 	add.w	fp, sl, r1
 8004042:	2a07      	cmp	r2, #7
 8004044:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004048:	9220      	str	r2, [sp, #128]	; 0x80
 800404a:	e884 0480 	stmia.w	r4, {r7, sl}
 800404e:	f300 844a 	bgt.w	80048e6 <_vfprintf_r+0xbee>
 8004052:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8004056:	3408      	adds	r4, #8
 8004058:	f1bc 0f00 	cmp.w	ip, #0
 800405c:	d00f      	beq.n	800407e <_vfprintf_r+0x386>
 800405e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004060:	3301      	adds	r3, #1
 8004062:	f10b 0b01 	add.w	fp, fp, #1
 8004066:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
 800406a:	2201      	movs	r2, #1
 800406c:	2b07      	cmp	r3, #7
 800406e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004072:	9320      	str	r3, [sp, #128]	; 0x80
 8004074:	e884 0006 	stmia.w	r4, {r1, r2}
 8004078:	f300 83b1 	bgt.w	80047de <_vfprintf_r+0xae6>
 800407c:	3408      	adds	r4, #8
 800407e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004080:	b173      	cbz	r3, 80040a0 <_vfprintf_r+0x3a8>
 8004082:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004084:	3301      	adds	r3, #1
 8004086:	f10b 0b02 	add.w	fp, fp, #2
 800408a:	a918      	add	r1, sp, #96	; 0x60
 800408c:	2202      	movs	r2, #2
 800408e:	2b07      	cmp	r3, #7
 8004090:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004094:	9320      	str	r3, [sp, #128]	; 0x80
 8004096:	e884 0006 	stmia.w	r4, {r1, r2}
 800409a:	f300 83ac 	bgt.w	80047f6 <_vfprintf_r+0xafe>
 800409e:	3408      	adds	r4, #8
 80040a0:	2e80      	cmp	r6, #128	; 0x80
 80040a2:	f000 82f0 	beq.w	8004686 <_vfprintf_r+0x98e>
 80040a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040a8:	9a07      	ldr	r2, [sp, #28]
 80040aa:	ebc2 0a03 	rsb	sl, r2, r3
 80040ae:	f1ba 0f00 	cmp.w	sl, #0
 80040b2:	dd32      	ble.n	800411a <_vfprintf_r+0x422>
 80040b4:	f1ba 0f10 	cmp.w	sl, #16
 80040b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80040ba:	4f82      	ldr	r7, [pc, #520]	; (80042c4 <_vfprintf_r+0x5cc>)
 80040bc:	dd22      	ble.n	8004104 <_vfprintf_r+0x40c>
 80040be:	2610      	movs	r6, #16
 80040c0:	465b      	mov	r3, fp
 80040c2:	e006      	b.n	80040d2 <_vfprintf_r+0x3da>
 80040c4:	f1aa 0a10 	sub.w	sl, sl, #16
 80040c8:	f1ba 0f10 	cmp.w	sl, #16
 80040cc:	f104 0408 	add.w	r4, r4, #8
 80040d0:	dd17      	ble.n	8004102 <_vfprintf_r+0x40a>
 80040d2:	3201      	adds	r2, #1
 80040d4:	3310      	adds	r3, #16
 80040d6:	2a07      	cmp	r2, #7
 80040d8:	9321      	str	r3, [sp, #132]	; 0x84
 80040da:	9220      	str	r2, [sp, #128]	; 0x80
 80040dc:	6027      	str	r7, [r4, #0]
 80040de:	6066      	str	r6, [r4, #4]
 80040e0:	ddf0      	ble.n	80040c4 <_vfprintf_r+0x3cc>
 80040e2:	4640      	mov	r0, r8
 80040e4:	4649      	mov	r1, r9
 80040e6:	aa1f      	add	r2, sp, #124	; 0x7c
 80040e8:	f004 faa4 	bl	8008634 <__sprint_r>
 80040ec:	2800      	cmp	r0, #0
 80040ee:	f47f af03 	bne.w	8003ef8 <_vfprintf_r+0x200>
 80040f2:	f1aa 0a10 	sub.w	sl, sl, #16
 80040f6:	f1ba 0f10 	cmp.w	sl, #16
 80040fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80040fe:	ac2c      	add	r4, sp, #176	; 0xb0
 8004100:	dce7      	bgt.n	80040d2 <_vfprintf_r+0x3da>
 8004102:	469b      	mov	fp, r3
 8004104:	3201      	adds	r2, #1
 8004106:	44d3      	add	fp, sl
 8004108:	2a07      	cmp	r2, #7
 800410a:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800410e:	9220      	str	r2, [sp, #128]	; 0x80
 8004110:	e884 0480 	stmia.w	r4, {r7, sl}
 8004114:	f300 8357 	bgt.w	80047c6 <_vfprintf_r+0xace>
 8004118:	3408      	adds	r4, #8
 800411a:	9b02      	ldr	r3, [sp, #8]
 800411c:	05db      	lsls	r3, r3, #23
 800411e:	f100 825b 	bmi.w	80045d8 <_vfprintf_r+0x8e0>
 8004122:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004124:	9907      	ldr	r1, [sp, #28]
 8004126:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004128:	6022      	str	r2, [r4, #0]
 800412a:	3301      	adds	r3, #1
 800412c:	448b      	add	fp, r1
 800412e:	2b07      	cmp	r3, #7
 8004130:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004134:	6061      	str	r1, [r4, #4]
 8004136:	9320      	str	r3, [sp, #128]	; 0x80
 8004138:	f300 831d 	bgt.w	8004776 <_vfprintf_r+0xa7e>
 800413c:	3408      	adds	r4, #8
 800413e:	9b02      	ldr	r3, [sp, #8]
 8004140:	0759      	lsls	r1, r3, #29
 8004142:	d53a      	bpl.n	80041ba <_vfprintf_r+0x4c2>
 8004144:	9b06      	ldr	r3, [sp, #24]
 8004146:	9a03      	ldr	r2, [sp, #12]
 8004148:	1a9d      	subs	r5, r3, r2
 800414a:	2d00      	cmp	r5, #0
 800414c:	dd35      	ble.n	80041ba <_vfprintf_r+0x4c2>
 800414e:	2d10      	cmp	r5, #16
 8004150:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004152:	4f5b      	ldr	r7, [pc, #364]	; (80042c0 <_vfprintf_r+0x5c8>)
 8004154:	dd1e      	ble.n	8004194 <_vfprintf_r+0x49c>
 8004156:	2610      	movs	r6, #16
 8004158:	465a      	mov	r2, fp
 800415a:	e004      	b.n	8004166 <_vfprintf_r+0x46e>
 800415c:	3d10      	subs	r5, #16
 800415e:	2d10      	cmp	r5, #16
 8004160:	f104 0408 	add.w	r4, r4, #8
 8004164:	dd15      	ble.n	8004192 <_vfprintf_r+0x49a>
 8004166:	3301      	adds	r3, #1
 8004168:	3210      	adds	r2, #16
 800416a:	2b07      	cmp	r3, #7
 800416c:	9221      	str	r2, [sp, #132]	; 0x84
 800416e:	9320      	str	r3, [sp, #128]	; 0x80
 8004170:	6027      	str	r7, [r4, #0]
 8004172:	6066      	str	r6, [r4, #4]
 8004174:	ddf2      	ble.n	800415c <_vfprintf_r+0x464>
 8004176:	4640      	mov	r0, r8
 8004178:	4649      	mov	r1, r9
 800417a:	aa1f      	add	r2, sp, #124	; 0x7c
 800417c:	f004 fa5a 	bl	8008634 <__sprint_r>
 8004180:	2800      	cmp	r0, #0
 8004182:	f47f aeb9 	bne.w	8003ef8 <_vfprintf_r+0x200>
 8004186:	3d10      	subs	r5, #16
 8004188:	2d10      	cmp	r5, #16
 800418a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800418c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800418e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004190:	dce9      	bgt.n	8004166 <_vfprintf_r+0x46e>
 8004192:	4693      	mov	fp, r2
 8004194:	3301      	adds	r3, #1
 8004196:	44ab      	add	fp, r5
 8004198:	2b07      	cmp	r3, #7
 800419a:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800419e:	9320      	str	r3, [sp, #128]	; 0x80
 80041a0:	6027      	str	r7, [r4, #0]
 80041a2:	6065      	str	r5, [r4, #4]
 80041a4:	dd09      	ble.n	80041ba <_vfprintf_r+0x4c2>
 80041a6:	4640      	mov	r0, r8
 80041a8:	4649      	mov	r1, r9
 80041aa:	aa1f      	add	r2, sp, #124	; 0x7c
 80041ac:	f004 fa42 	bl	8008634 <__sprint_r>
 80041b0:	2800      	cmp	r0, #0
 80041b2:	f47f aea1 	bne.w	8003ef8 <_vfprintf_r+0x200>
 80041b6:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80041ba:	9b05      	ldr	r3, [sp, #20]
 80041bc:	9a03      	ldr	r2, [sp, #12]
 80041be:	9906      	ldr	r1, [sp, #24]
 80041c0:	428a      	cmp	r2, r1
 80041c2:	bfac      	ite	ge
 80041c4:	189b      	addge	r3, r3, r2
 80041c6:	185b      	addlt	r3, r3, r1
 80041c8:	9305      	str	r3, [sp, #20]
 80041ca:	f1bb 0f00 	cmp.w	fp, #0
 80041ce:	f040 82de 	bne.w	800478e <_vfprintf_r+0xa96>
 80041d2:	2300      	movs	r3, #0
 80041d4:	9320      	str	r3, [sp, #128]	; 0x80
 80041d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80041d8:	e5cf      	b.n	8003d7a <_vfprintf_r+0x82>
 80041da:	4619      	mov	r1, r3
 80041dc:	9802      	ldr	r0, [sp, #8]
 80041de:	781d      	ldrb	r5, [r3, #0]
 80041e0:	f040 0004 	orr.w	r0, r0, #4
 80041e4:	9002      	str	r0, [sp, #8]
 80041e6:	e5f8      	b.n	8003dda <_vfprintf_r+0xe2>
 80041e8:	9304      	str	r3, [sp, #16]
 80041ea:	9b02      	ldr	r3, [sp, #8]
 80041ec:	f013 0320 	ands.w	r3, r3, #32
 80041f0:	46b2      	mov	sl, r6
 80041f2:	f000 8173 	beq.w	80044dc <_vfprintf_r+0x7e4>
 80041f6:	9f08      	ldr	r7, [sp, #32]
 80041f8:	3707      	adds	r7, #7
 80041fa:	f027 0307 	bic.w	r3, r7, #7
 80041fe:	f103 0208 	add.w	r2, r3, #8
 8004202:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004206:	9208      	str	r2, [sp, #32]
 8004208:	2300      	movs	r3, #0
 800420a:	e699      	b.n	8003f40 <_vfprintf_r+0x248>
 800420c:	9a08      	ldr	r2, [sp, #32]
 800420e:	9304      	str	r3, [sp, #16]
 8004210:	6813      	ldr	r3, [r2, #0]
 8004212:	930a      	str	r3, [sp, #40]	; 0x28
 8004214:	f04f 0b00 	mov.w	fp, #0
 8004218:	f88d b05f 	strb.w	fp, [sp, #95]	; 0x5f
 800421c:	1d17      	adds	r7, r2, #4
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 865e 	beq.w	8004ee0 <_vfprintf_r+0x11e8>
 8004224:	2e00      	cmp	r6, #0
 8004226:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004228:	f2c0 8612 	blt.w	8004e50 <_vfprintf_r+0x1158>
 800422c:	4659      	mov	r1, fp
 800422e:	4632      	mov	r2, r6
 8004230:	f003 f8b8 	bl	80073a4 <memchr>
 8004234:	2800      	cmp	r0, #0
 8004236:	f000 868f 	beq.w	8004f58 <_vfprintf_r+0x1260>
 800423a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800423c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004240:	1ac3      	subs	r3, r0, r3
 8004242:	9307      	str	r3, [sp, #28]
 8004244:	9708      	str	r7, [sp, #32]
 8004246:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800424a:	9303      	str	r3, [sp, #12]
 800424c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8004250:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8004254:	e6ae      	b.n	8003fb4 <_vfprintf_r+0x2bc>
 8004256:	9304      	str	r3, [sp, #16]
 8004258:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <_vfprintf_r+0x5d0>)
 800425a:	9310      	str	r3, [sp, #64]	; 0x40
 800425c:	9b02      	ldr	r3, [sp, #8]
 800425e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004262:	0699      	lsls	r1, r3, #26
 8004264:	46b2      	mov	sl, r6
 8004266:	f140 8155 	bpl.w	8004514 <_vfprintf_r+0x81c>
 800426a:	9f08      	ldr	r7, [sp, #32]
 800426c:	3707      	adds	r7, #7
 800426e:	f027 0307 	bic.w	r3, r7, #7
 8004272:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004276:	f103 0208 	add.w	r2, r3, #8
 800427a:	9208      	str	r2, [sp, #32]
 800427c:	9b02      	ldr	r3, [sp, #8]
 800427e:	07db      	lsls	r3, r3, #31
 8004280:	f140 82e4 	bpl.w	800484c <_vfprintf_r+0xb54>
 8004284:	ea56 0307 	orrs.w	r3, r6, r7
 8004288:	f000 82e0 	beq.w	800484c <_vfprintf_r+0xb54>
 800428c:	9a02      	ldr	r2, [sp, #8]
 800428e:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
 8004292:	2330      	movs	r3, #48	; 0x30
 8004294:	f042 0202 	orr.w	r2, r2, #2
 8004298:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800429c:	9202      	str	r2, [sp, #8]
 800429e:	2302      	movs	r3, #2
 80042a0:	e64e      	b.n	8003f40 <_vfprintf_r+0x248>
 80042a2:	781d      	ldrb	r5, [r3, #0]
 80042a4:	4619      	mov	r1, r3
 80042a6:	2a00      	cmp	r2, #0
 80042a8:	f47f ad97 	bne.w	8003dda <_vfprintf_r+0xe2>
 80042ac:	2220      	movs	r2, #32
 80042ae:	e594      	b.n	8003dda <_vfprintf_r+0xe2>
 80042b0:	9902      	ldr	r1, [sp, #8]
 80042b2:	f041 0120 	orr.w	r1, r1, #32
 80042b6:	9102      	str	r1, [sp, #8]
 80042b8:	781d      	ldrb	r5, [r3, #0]
 80042ba:	4619      	mov	r1, r3
 80042bc:	e58d      	b.n	8003dda <_vfprintf_r+0xe2>
 80042be:	bf00      	nop
 80042c0:	0800ab28 	.word	0x0800ab28
 80042c4:	0800aad4 	.word	0x0800aad4
 80042c8:	0800ab08 	.word	0x0800ab08
 80042cc:	9304      	str	r3, [sp, #16]
 80042ce:	9b02      	ldr	r3, [sp, #8]
 80042d0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80042d4:	f043 0310 	orr.w	r3, r3, #16
 80042d8:	9302      	str	r3, [sp, #8]
 80042da:	9b02      	ldr	r3, [sp, #8]
 80042dc:	0698      	lsls	r0, r3, #26
 80042de:	46b2      	mov	sl, r6
 80042e0:	f140 80a2 	bpl.w	8004428 <_vfprintf_r+0x730>
 80042e4:	9f08      	ldr	r7, [sp, #32]
 80042e6:	3707      	adds	r7, #7
 80042e8:	f027 0707 	bic.w	r7, r7, #7
 80042ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042f0:	f107 0108 	add.w	r1, r7, #8
 80042f4:	9108      	str	r1, [sp, #32]
 80042f6:	4616      	mov	r6, r2
 80042f8:	461f      	mov	r7, r3
 80042fa:	2a00      	cmp	r2, #0
 80042fc:	f173 0300 	sbcs.w	r3, r3, #0
 8004300:	f2c0 841c 	blt.w	8004b3c <_vfprintf_r+0xe44>
 8004304:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8004308:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800430c:	2301      	movs	r3, #1
 800430e:	e61d      	b.n	8003f4c <_vfprintf_r+0x254>
 8004310:	9304      	str	r3, [sp, #16]
 8004312:	9b02      	ldr	r3, [sp, #8]
 8004314:	9f08      	ldr	r7, [sp, #32]
 8004316:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800431a:	071b      	lsls	r3, r3, #28
 800431c:	46b2      	mov	sl, r6
 800431e:	46b3      	mov	fp, r6
 8004320:	f107 0707 	add.w	r7, r7, #7
 8004324:	f140 849b 	bpl.w	8004c5e <_vfprintf_r+0xf66>
 8004328:	f027 0307 	bic.w	r3, r7, #7
 800432c:	ed93 7b00 	vldr	d7, [r3]
 8004330:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004334:	f103 0208 	add.w	r2, r3, #8
 8004338:	9208      	str	r2, [sp, #32]
 800433a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800433e:	f003 ff45 	bl	80081cc <__fpclassifyd>
 8004342:	2801      	cmp	r0, #1
 8004344:	f040 8408 	bne.w	8004b58 <_vfprintf_r+0xe60>
 8004348:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800434c:	2200      	movs	r2, #0
 800434e:	2300      	movs	r3, #0
 8004350:	f005 fede 	bl	800a110 <__aeabi_dcmplt>
 8004354:	2800      	cmp	r0, #0
 8004356:	f040 85ec 	bne.w	8004f32 <_vfprintf_r+0x123a>
 800435a:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 800435e:	9e02      	ldr	r6, [sp, #8]
 8004360:	4a99      	ldr	r2, [pc, #612]	; (80045c8 <_vfprintf_r+0x8d0>)
 8004362:	4b9a      	ldr	r3, [pc, #616]	; (80045cc <_vfprintf_r+0x8d4>)
 8004364:	2103      	movs	r1, #3
 8004366:	2000      	movs	r0, #0
 8004368:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 800436c:	2d47      	cmp	r5, #71	; 0x47
 800436e:	bfd8      	it	le
 8004370:	461a      	movle	r2, r3
 8004372:	9103      	str	r1, [sp, #12]
 8004374:	900b      	str	r0, [sp, #44]	; 0x2c
 8004376:	9602      	str	r6, [sp, #8]
 8004378:	920a      	str	r2, [sp, #40]	; 0x28
 800437a:	9107      	str	r1, [sp, #28]
 800437c:	900c      	str	r0, [sp, #48]	; 0x30
 800437e:	e619      	b.n	8003fb4 <_vfprintf_r+0x2bc>
 8004380:	9902      	ldr	r1, [sp, #8]
 8004382:	f041 0108 	orr.w	r1, r1, #8
 8004386:	9102      	str	r1, [sp, #8]
 8004388:	781d      	ldrb	r5, [r3, #0]
 800438a:	4619      	mov	r1, r3
 800438c:	e525      	b.n	8003dda <_vfprintf_r+0xe2>
 800438e:	781d      	ldrb	r5, [r3, #0]
 8004390:	4619      	mov	r1, r3
 8004392:	222b      	movs	r2, #43	; 0x2b
 8004394:	e521      	b.n	8003dda <_vfprintf_r+0xe2>
 8004396:	9902      	ldr	r1, [sp, #8]
 8004398:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800439c:	9102      	str	r1, [sp, #8]
 800439e:	781d      	ldrb	r5, [r3, #0]
 80043a0:	4619      	mov	r1, r3
 80043a2:	e51a      	b.n	8003dda <_vfprintf_r+0xe2>
 80043a4:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80043a8:	2100      	movs	r1, #0
 80043aa:	f813 5b01 	ldrb.w	r5, [r3], #1
 80043ae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80043b2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80043b6:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80043ba:	2809      	cmp	r0, #9
 80043bc:	d9f5      	bls.n	80043aa <_vfprintf_r+0x6b2>
 80043be:	9106      	str	r1, [sp, #24]
 80043c0:	e50c      	b.n	8003ddc <_vfprintf_r+0xe4>
 80043c2:	9908      	ldr	r1, [sp, #32]
 80043c4:	9304      	str	r3, [sp, #16]
 80043c6:	2330      	movs	r3, #48	; 0x30
 80043c8:	9a02      	ldr	r2, [sp, #8]
 80043ca:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80043ce:	460b      	mov	r3, r1
 80043d0:	3304      	adds	r3, #4
 80043d2:	2578      	movs	r5, #120	; 0x78
 80043d4:	f042 0202 	orr.w	r2, r2, #2
 80043d8:	9308      	str	r3, [sp, #32]
 80043da:	4b7d      	ldr	r3, [pc, #500]	; (80045d0 <_vfprintf_r+0x8d8>)
 80043dc:	9310      	str	r3, [sp, #64]	; 0x40
 80043de:	46b2      	mov	sl, r6
 80043e0:	9202      	str	r2, [sp, #8]
 80043e2:	680e      	ldr	r6, [r1, #0]
 80043e4:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
 80043e8:	2700      	movs	r7, #0
 80043ea:	2302      	movs	r3, #2
 80043ec:	e5a8      	b.n	8003f40 <_vfprintf_r+0x248>
 80043ee:	9902      	ldr	r1, [sp, #8]
 80043f0:	f041 0101 	orr.w	r1, r1, #1
 80043f4:	9102      	str	r1, [sp, #8]
 80043f6:	781d      	ldrb	r5, [r3, #0]
 80043f8:	4619      	mov	r1, r3
 80043fa:	e4ee      	b.n	8003dda <_vfprintf_r+0xe2>
 80043fc:	9d08      	ldr	r5, [sp, #32]
 80043fe:	6829      	ldr	r1, [r5, #0]
 8004400:	9106      	str	r1, [sp, #24]
 8004402:	4608      	mov	r0, r1
 8004404:	2800      	cmp	r0, #0
 8004406:	4629      	mov	r1, r5
 8004408:	f101 0104 	add.w	r1, r1, #4
 800440c:	f2c0 84ee 	blt.w	8004dec <_vfprintf_r+0x10f4>
 8004410:	9108      	str	r1, [sp, #32]
 8004412:	781d      	ldrb	r5, [r3, #0]
 8004414:	4619      	mov	r1, r3
 8004416:	e4e0      	b.n	8003dda <_vfprintf_r+0xe2>
 8004418:	9304      	str	r3, [sp, #16]
 800441a:	9b02      	ldr	r3, [sp, #8]
 800441c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004420:	0698      	lsls	r0, r3, #26
 8004422:	46b2      	mov	sl, r6
 8004424:	f53f af5e 	bmi.w	80042e4 <_vfprintf_r+0x5ec>
 8004428:	9b02      	ldr	r3, [sp, #8]
 800442a:	06d9      	lsls	r1, r3, #27
 800442c:	f100 829b 	bmi.w	8004966 <_vfprintf_r+0xc6e>
 8004430:	9b02      	ldr	r3, [sp, #8]
 8004432:	065a      	lsls	r2, r3, #25
 8004434:	f140 8297 	bpl.w	8004966 <_vfprintf_r+0xc6e>
 8004438:	9908      	ldr	r1, [sp, #32]
 800443a:	f9b1 6000 	ldrsh.w	r6, [r1]
 800443e:	3104      	adds	r1, #4
 8004440:	17f7      	asrs	r7, r6, #31
 8004442:	4632      	mov	r2, r6
 8004444:	463b      	mov	r3, r7
 8004446:	9108      	str	r1, [sp, #32]
 8004448:	e757      	b.n	80042fa <_vfprintf_r+0x602>
 800444a:	9902      	ldr	r1, [sp, #8]
 800444c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004450:	9102      	str	r1, [sp, #8]
 8004452:	781d      	ldrb	r5, [r3, #0]
 8004454:	4619      	mov	r1, r3
 8004456:	e4c0      	b.n	8003dda <_vfprintf_r+0xe2>
 8004458:	781d      	ldrb	r5, [r3, #0]
 800445a:	9902      	ldr	r1, [sp, #8]
 800445c:	2d6c      	cmp	r5, #108	; 0x6c
 800445e:	f000 84be 	beq.w	8004dde <_vfprintf_r+0x10e6>
 8004462:	f041 0110 	orr.w	r1, r1, #16
 8004466:	9102      	str	r1, [sp, #8]
 8004468:	4619      	mov	r1, r3
 800446a:	e4b6      	b.n	8003dda <_vfprintf_r+0xe2>
 800446c:	9304      	str	r3, [sp, #16]
 800446e:	9b02      	ldr	r3, [sp, #8]
 8004470:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004474:	069a      	lsls	r2, r3, #26
 8004476:	f140 83fd 	bpl.w	8004c74 <_vfprintf_r+0xf7c>
 800447a:	9a08      	ldr	r2, [sp, #32]
 800447c:	9905      	ldr	r1, [sp, #20]
 800447e:	6813      	ldr	r3, [r2, #0]
 8004480:	17cf      	asrs	r7, r1, #31
 8004482:	4608      	mov	r0, r1
 8004484:	3204      	adds	r2, #4
 8004486:	4639      	mov	r1, r7
 8004488:	9208      	str	r2, [sp, #32]
 800448a:	e9c3 0100 	strd	r0, r1, [r3]
 800448e:	e474      	b.n	8003d7a <_vfprintf_r+0x82>
 8004490:	781d      	ldrb	r5, [r3, #0]
 8004492:	2d2a      	cmp	r5, #42	; 0x2a
 8004494:	f103 0101 	add.w	r1, r3, #1
 8004498:	f000 862a 	beq.w	80050f0 <_vfprintf_r+0x13f8>
 800449c:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80044a0:	2809      	cmp	r0, #9
 80044a2:	460b      	mov	r3, r1
 80044a4:	f04f 0600 	mov.w	r6, #0
 80044a8:	f63f ac98 	bhi.w	8003ddc <_vfprintf_r+0xe4>
 80044ac:	f813 5b01 	ldrb.w	r5, [r3], #1
 80044b0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80044b4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80044b8:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80044bc:	2809      	cmp	r0, #9
 80044be:	d9f5      	bls.n	80044ac <_vfprintf_r+0x7b4>
 80044c0:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 80044c4:	e48a      	b.n	8003ddc <_vfprintf_r+0xe4>
 80044c6:	9304      	str	r3, [sp, #16]
 80044c8:	9b02      	ldr	r3, [sp, #8]
 80044ca:	f043 0310 	orr.w	r3, r3, #16
 80044ce:	9302      	str	r3, [sp, #8]
 80044d0:	9b02      	ldr	r3, [sp, #8]
 80044d2:	f013 0320 	ands.w	r3, r3, #32
 80044d6:	46b2      	mov	sl, r6
 80044d8:	f47f ae8d 	bne.w	80041f6 <_vfprintf_r+0x4fe>
 80044dc:	9a02      	ldr	r2, [sp, #8]
 80044de:	f012 0210 	ands.w	r2, r2, #16
 80044e2:	f040 8238 	bne.w	8004956 <_vfprintf_r+0xc5e>
 80044e6:	9b02      	ldr	r3, [sp, #8]
 80044e8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80044ec:	f000 8233 	beq.w	8004956 <_vfprintf_r+0xc5e>
 80044f0:	9908      	ldr	r1, [sp, #32]
 80044f2:	4613      	mov	r3, r2
 80044f4:	460a      	mov	r2, r1
 80044f6:	3204      	adds	r2, #4
 80044f8:	880e      	ldrh	r6, [r1, #0]
 80044fa:	9208      	str	r2, [sp, #32]
 80044fc:	2700      	movs	r7, #0
 80044fe:	e51f      	b.n	8003f40 <_vfprintf_r+0x248>
 8004500:	9304      	str	r3, [sp, #16]
 8004502:	4b34      	ldr	r3, [pc, #208]	; (80045d4 <_vfprintf_r+0x8dc>)
 8004504:	9310      	str	r3, [sp, #64]	; 0x40
 8004506:	9b02      	ldr	r3, [sp, #8]
 8004508:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800450c:	0699      	lsls	r1, r3, #26
 800450e:	46b2      	mov	sl, r6
 8004510:	f53f aeab 	bmi.w	800426a <_vfprintf_r+0x572>
 8004514:	9b02      	ldr	r3, [sp, #8]
 8004516:	06da      	lsls	r2, r3, #27
 8004518:	f140 83d1 	bpl.w	8004cbe <_vfprintf_r+0xfc6>
 800451c:	9a08      	ldr	r2, [sp, #32]
 800451e:	4613      	mov	r3, r2
 8004520:	3304      	adds	r3, #4
 8004522:	6816      	ldr	r6, [r2, #0]
 8004524:	9308      	str	r3, [sp, #32]
 8004526:	2700      	movs	r7, #0
 8004528:	e6a8      	b.n	800427c <_vfprintf_r+0x584>
 800452a:	9908      	ldr	r1, [sp, #32]
 800452c:	9304      	str	r3, [sp, #16]
 800452e:	680a      	ldr	r2, [r1, #0]
 8004530:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8004534:	2300      	movs	r3, #0
 8004536:	2201      	movs	r2, #1
 8004538:	3104      	adds	r1, #4
 800453a:	469c      	mov	ip, r3
 800453c:	9203      	str	r2, [sp, #12]
 800453e:	9108      	str	r1, [sp, #32]
 8004540:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004544:	ab22      	add	r3, sp, #136	; 0x88
 8004546:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800454a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 800454e:	9207      	str	r2, [sp, #28]
 8004550:	930a      	str	r3, [sp, #40]	; 0x28
 8004552:	e535      	b.n	8003fc0 <_vfprintf_r+0x2c8>
 8004554:	9304      	str	r3, [sp, #16]
 8004556:	9b02      	ldr	r3, [sp, #8]
 8004558:	f043 0310 	orr.w	r3, r3, #16
 800455c:	9302      	str	r3, [sp, #8]
 800455e:	9b02      	ldr	r3, [sp, #8]
 8004560:	46b2      	mov	sl, r6
 8004562:	069e      	lsls	r6, r3, #26
 8004564:	f53f ace2 	bmi.w	8003f2c <_vfprintf_r+0x234>
 8004568:	9b02      	ldr	r3, [sp, #8]
 800456a:	06d8      	lsls	r0, r3, #27
 800456c:	f140 8399 	bpl.w	8004ca2 <_vfprintf_r+0xfaa>
 8004570:	9a08      	ldr	r2, [sp, #32]
 8004572:	4613      	mov	r3, r2
 8004574:	3204      	adds	r2, #4
 8004576:	681e      	ldr	r6, [r3, #0]
 8004578:	9208      	str	r2, [sp, #32]
 800457a:	2301      	movs	r3, #1
 800457c:	2700      	movs	r7, #0
 800457e:	e4df      	b.n	8003f40 <_vfprintf_r+0x248>
 8004580:	9304      	str	r3, [sp, #16]
 8004582:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004586:	2d00      	cmp	r5, #0
 8004588:	f43f acaf 	beq.w	8003eea <_vfprintf_r+0x1f2>
 800458c:	2300      	movs	r3, #0
 800458e:	2201      	movs	r2, #1
 8004590:	469c      	mov	ip, r3
 8004592:	9203      	str	r2, [sp, #12]
 8004594:	f88d 5088 	strb.w	r5, [sp, #136]	; 0x88
 8004598:	e7d2      	b.n	8004540 <_vfprintf_r+0x848>
 800459a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800459e:	e55b      	b.n	8004058 <_vfprintf_r+0x360>
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	f47f ace5 	bne.w	8003f70 <_vfprintf_r+0x278>
 80045a6:	2f00      	cmp	r7, #0
 80045a8:	bf08      	it	eq
 80045aa:	2e0a      	cmpeq	r6, #10
 80045ac:	f080 81ff 	bcs.w	80049ae <_vfprintf_r+0xcb6>
 80045b0:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 80045b4:	3630      	adds	r6, #48	; 0x30
 80045b6:	f80b 6d41 	strb.w	r6, [fp, #-65]!
 80045ba:	ab2c      	add	r3, sp, #176	; 0xb0
 80045bc:	ebcb 0303 	rsb	r3, fp, r3
 80045c0:	9307      	str	r3, [sp, #28]
 80045c2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80045c6:	e4ed      	b.n	8003fa4 <_vfprintf_r+0x2ac>
 80045c8:	0800aae8 	.word	0x0800aae8
 80045cc:	0800aae4 	.word	0x0800aae4
 80045d0:	0800ab08 	.word	0x0800ab08
 80045d4:	0800aaf4 	.word	0x0800aaf4
 80045d8:	2d65      	cmp	r5, #101	; 0x65
 80045da:	f340 808a 	ble.w	80046f2 <_vfprintf_r+0x9fa>
 80045de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80045e2:	2200      	movs	r2, #0
 80045e4:	2300      	movs	r3, #0
 80045e6:	f005 fd89 	bl	800a0fc <__aeabi_dcmpeq>
 80045ea:	2800      	cmp	r0, #0
 80045ec:	f000 8131 	beq.w	8004852 <_vfprintf_r+0xb5a>
 80045f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80045f2:	4aae      	ldr	r2, [pc, #696]	; (80048ac <_vfprintf_r+0xbb4>)
 80045f4:	6022      	str	r2, [r4, #0]
 80045f6:	3301      	adds	r3, #1
 80045f8:	f10b 0b01 	add.w	fp, fp, #1
 80045fc:	2201      	movs	r2, #1
 80045fe:	2b07      	cmp	r3, #7
 8004600:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004604:	9320      	str	r3, [sp, #128]	; 0x80
 8004606:	6062      	str	r2, [r4, #4]
 8004608:	f300 8372 	bgt.w	8004cf0 <_vfprintf_r+0xff8>
 800460c:	3408      	adds	r4, #8
 800460e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004610:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004612:	4293      	cmp	r3, r2
 8004614:	db03      	blt.n	800461e <_vfprintf_r+0x926>
 8004616:	9b02      	ldr	r3, [sp, #8]
 8004618:	07df      	lsls	r7, r3, #31
 800461a:	f57f ad90 	bpl.w	800413e <_vfprintf_r+0x446>
 800461e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004620:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004622:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004624:	6022      	str	r2, [r4, #0]
 8004626:	3301      	adds	r3, #1
 8004628:	448b      	add	fp, r1
 800462a:	2b07      	cmp	r3, #7
 800462c:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004630:	6061      	str	r1, [r4, #4]
 8004632:	9320      	str	r3, [sp, #128]	; 0x80
 8004634:	f300 83e1 	bgt.w	8004dfa <_vfprintf_r+0x1102>
 8004638:	3408      	adds	r4, #8
 800463a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800463c:	1e5d      	subs	r5, r3, #1
 800463e:	2d00      	cmp	r5, #0
 8004640:	f77f ad7d 	ble.w	800413e <_vfprintf_r+0x446>
 8004644:	2d10      	cmp	r5, #16
 8004646:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004648:	4f99      	ldr	r7, [pc, #612]	; (80048b0 <_vfprintf_r+0xbb8>)
 800464a:	f340 8196 	ble.w	800497a <_vfprintf_r+0xc82>
 800464e:	2610      	movs	r6, #16
 8004650:	465a      	mov	r2, fp
 8004652:	e004      	b.n	800465e <_vfprintf_r+0x966>
 8004654:	3408      	adds	r4, #8
 8004656:	3d10      	subs	r5, #16
 8004658:	2d10      	cmp	r5, #16
 800465a:	f340 818d 	ble.w	8004978 <_vfprintf_r+0xc80>
 800465e:	3301      	adds	r3, #1
 8004660:	3210      	adds	r2, #16
 8004662:	2b07      	cmp	r3, #7
 8004664:	9221      	str	r2, [sp, #132]	; 0x84
 8004666:	9320      	str	r3, [sp, #128]	; 0x80
 8004668:	6027      	str	r7, [r4, #0]
 800466a:	6066      	str	r6, [r4, #4]
 800466c:	ddf2      	ble.n	8004654 <_vfprintf_r+0x95c>
 800466e:	4640      	mov	r0, r8
 8004670:	4649      	mov	r1, r9
 8004672:	aa1f      	add	r2, sp, #124	; 0x7c
 8004674:	f003 ffde 	bl	8008634 <__sprint_r>
 8004678:	2800      	cmp	r0, #0
 800467a:	f47f ac3d 	bne.w	8003ef8 <_vfprintf_r+0x200>
 800467e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004680:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004682:	ac2c      	add	r4, sp, #176	; 0xb0
 8004684:	e7e7      	b.n	8004656 <_vfprintf_r+0x95e>
 8004686:	9b06      	ldr	r3, [sp, #24]
 8004688:	9a03      	ldr	r2, [sp, #12]
 800468a:	1a9e      	subs	r6, r3, r2
 800468c:	2e00      	cmp	r6, #0
 800468e:	f77f ad0a 	ble.w	80040a6 <_vfprintf_r+0x3ae>
 8004692:	2e10      	cmp	r6, #16
 8004694:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004696:	4f86      	ldr	r7, [pc, #536]	; (80048b0 <_vfprintf_r+0xbb8>)
 8004698:	dd1f      	ble.n	80046da <_vfprintf_r+0x9e2>
 800469a:	f04f 0a10 	mov.w	sl, #16
 800469e:	465b      	mov	r3, fp
 80046a0:	e004      	b.n	80046ac <_vfprintf_r+0x9b4>
 80046a2:	3e10      	subs	r6, #16
 80046a4:	2e10      	cmp	r6, #16
 80046a6:	f104 0408 	add.w	r4, r4, #8
 80046aa:	dd15      	ble.n	80046d8 <_vfprintf_r+0x9e0>
 80046ac:	3201      	adds	r2, #1
 80046ae:	3310      	adds	r3, #16
 80046b0:	2a07      	cmp	r2, #7
 80046b2:	9321      	str	r3, [sp, #132]	; 0x84
 80046b4:	9220      	str	r2, [sp, #128]	; 0x80
 80046b6:	e884 0480 	stmia.w	r4, {r7, sl}
 80046ba:	ddf2      	ble.n	80046a2 <_vfprintf_r+0x9aa>
 80046bc:	4640      	mov	r0, r8
 80046be:	4649      	mov	r1, r9
 80046c0:	aa1f      	add	r2, sp, #124	; 0x7c
 80046c2:	f003 ffb7 	bl	8008634 <__sprint_r>
 80046c6:	2800      	cmp	r0, #0
 80046c8:	f47f ac16 	bne.w	8003ef8 <_vfprintf_r+0x200>
 80046cc:	3e10      	subs	r6, #16
 80046ce:	2e10      	cmp	r6, #16
 80046d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80046d2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80046d4:	ac2c      	add	r4, sp, #176	; 0xb0
 80046d6:	dce9      	bgt.n	80046ac <_vfprintf_r+0x9b4>
 80046d8:	469b      	mov	fp, r3
 80046da:	3201      	adds	r2, #1
 80046dc:	44b3      	add	fp, r6
 80046de:	2a07      	cmp	r2, #7
 80046e0:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80046e4:	9220      	str	r2, [sp, #128]	; 0x80
 80046e6:	6027      	str	r7, [r4, #0]
 80046e8:	6066      	str	r6, [r4, #4]
 80046ea:	f300 821a 	bgt.w	8004b22 <_vfprintf_r+0xe2a>
 80046ee:	3408      	adds	r4, #8
 80046f0:	e4d9      	b.n	80040a6 <_vfprintf_r+0x3ae>
 80046f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046f4:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	f340 81d5 	ble.w	8004aa6 <_vfprintf_r+0xdae>
 80046fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046fe:	6023      	str	r3, [r4, #0]
 8004700:	3501      	adds	r5, #1
 8004702:	f10b 0601 	add.w	r6, fp, #1
 8004706:	2301      	movs	r3, #1
 8004708:	2d07      	cmp	r5, #7
 800470a:	9621      	str	r6, [sp, #132]	; 0x84
 800470c:	9520      	str	r5, [sp, #128]	; 0x80
 800470e:	6063      	str	r3, [r4, #4]
 8004710:	f300 81e5 	bgt.w	8004ade <_vfprintf_r+0xde6>
 8004714:	3408      	adds	r4, #8
 8004716:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004718:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800471a:	6023      	str	r3, [r4, #0]
 800471c:	3501      	adds	r5, #1
 800471e:	4416      	add	r6, r2
 8004720:	2d07      	cmp	r5, #7
 8004722:	9621      	str	r6, [sp, #132]	; 0x84
 8004724:	9520      	str	r5, [sp, #128]	; 0x80
 8004726:	6062      	str	r2, [r4, #4]
 8004728:	f300 81ef 	bgt.w	8004b0a <_vfprintf_r+0xe12>
 800472c:	3408      	adds	r4, #8
 800472e:	2300      	movs	r3, #0
 8004730:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004734:	2200      	movs	r2, #0
 8004736:	f005 fce1 	bl	800a0fc <__aeabi_dcmpeq>
 800473a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800473c:	2800      	cmp	r0, #0
 800473e:	f040 80e1 	bne.w	8004904 <_vfprintf_r+0xc0c>
 8004742:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004744:	3b01      	subs	r3, #1
 8004746:	3501      	adds	r5, #1
 8004748:	3201      	adds	r2, #1
 800474a:	441e      	add	r6, r3
 800474c:	2d07      	cmp	r5, #7
 800474e:	9520      	str	r5, [sp, #128]	; 0x80
 8004750:	9621      	str	r6, [sp, #132]	; 0x84
 8004752:	6022      	str	r2, [r4, #0]
 8004754:	6063      	str	r3, [r4, #4]
 8004756:	f300 81b6 	bgt.w	8004ac6 <_vfprintf_r+0xdce>
 800475a:	3408      	adds	r4, #8
 800475c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800475e:	6062      	str	r2, [r4, #4]
 8004760:	3501      	adds	r5, #1
 8004762:	eb06 0b02 	add.w	fp, r6, r2
 8004766:	ab1b      	add	r3, sp, #108	; 0x6c
 8004768:	2d07      	cmp	r5, #7
 800476a:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800476e:	9520      	str	r5, [sp, #128]	; 0x80
 8004770:	6023      	str	r3, [r4, #0]
 8004772:	f77f ace3 	ble.w	800413c <_vfprintf_r+0x444>
 8004776:	4640      	mov	r0, r8
 8004778:	4649      	mov	r1, r9
 800477a:	aa1f      	add	r2, sp, #124	; 0x7c
 800477c:	f003 ff5a 	bl	8008634 <__sprint_r>
 8004780:	2800      	cmp	r0, #0
 8004782:	f47f abb9 	bne.w	8003ef8 <_vfprintf_r+0x200>
 8004786:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800478a:	ac2c      	add	r4, sp, #176	; 0xb0
 800478c:	e4d7      	b.n	800413e <_vfprintf_r+0x446>
 800478e:	4640      	mov	r0, r8
 8004790:	4649      	mov	r1, r9
 8004792:	aa1f      	add	r2, sp, #124	; 0x7c
 8004794:	f003 ff4e 	bl	8008634 <__sprint_r>
 8004798:	2800      	cmp	r0, #0
 800479a:	f43f ad1a 	beq.w	80041d2 <_vfprintf_r+0x4da>
 800479e:	f7ff bbab 	b.w	8003ef8 <_vfprintf_r+0x200>
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d133      	bne.n	800480e <_vfprintf_r+0xb16>
 80047a6:	9b02      	ldr	r3, [sp, #8]
 80047a8:	07da      	lsls	r2, r3, #31
 80047aa:	d530      	bpl.n	800480e <_vfprintf_r+0xb16>
 80047ac:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 80047b0:	2330      	movs	r3, #48	; 0x30
 80047b2:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 80047b6:	ab2c      	add	r3, sp, #176	; 0xb0
 80047b8:	ebcb 0303 	rsb	r3, fp, r3
 80047bc:	9307      	str	r3, [sp, #28]
 80047be:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80047c2:	f7ff bbef 	b.w	8003fa4 <_vfprintf_r+0x2ac>
 80047c6:	4640      	mov	r0, r8
 80047c8:	4649      	mov	r1, r9
 80047ca:	aa1f      	add	r2, sp, #124	; 0x7c
 80047cc:	f003 ff32 	bl	8008634 <__sprint_r>
 80047d0:	2800      	cmp	r0, #0
 80047d2:	f47f ab91 	bne.w	8003ef8 <_vfprintf_r+0x200>
 80047d6:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80047da:	ac2c      	add	r4, sp, #176	; 0xb0
 80047dc:	e49d      	b.n	800411a <_vfprintf_r+0x422>
 80047de:	4640      	mov	r0, r8
 80047e0:	4649      	mov	r1, r9
 80047e2:	aa1f      	add	r2, sp, #124	; 0x7c
 80047e4:	f003 ff26 	bl	8008634 <__sprint_r>
 80047e8:	2800      	cmp	r0, #0
 80047ea:	f47f ab85 	bne.w	8003ef8 <_vfprintf_r+0x200>
 80047ee:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80047f2:	ac2c      	add	r4, sp, #176	; 0xb0
 80047f4:	e443      	b.n	800407e <_vfprintf_r+0x386>
 80047f6:	4640      	mov	r0, r8
 80047f8:	4649      	mov	r1, r9
 80047fa:	aa1f      	add	r2, sp, #124	; 0x7c
 80047fc:	f003 ff1a 	bl	8008634 <__sprint_r>
 8004800:	2800      	cmp	r0, #0
 8004802:	f47f ab79 	bne.w	8003ef8 <_vfprintf_r+0x200>
 8004806:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800480a:	ac2c      	add	r4, sp, #176	; 0xb0
 800480c:	e448      	b.n	80040a0 <_vfprintf_r+0x3a8>
 800480e:	ab2c      	add	r3, sp, #176	; 0xb0
 8004810:	f8cd a01c 	str.w	sl, [sp, #28]
 8004814:	930a      	str	r3, [sp, #40]	; 0x28
 8004816:	f7ff bbc5 	b.w	8003fa4 <_vfprintf_r+0x2ac>
 800481a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800481c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
 8004820:	0933      	lsrs	r3, r6, #4
 8004822:	f006 010f 	and.w	r1, r6, #15
 8004826:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800482a:	093a      	lsrs	r2, r7, #4
 800482c:	461e      	mov	r6, r3
 800482e:	4617      	mov	r7, r2
 8004830:	5c43      	ldrb	r3, [r0, r1]
 8004832:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8004836:	ea56 0307 	orrs.w	r3, r6, r7
 800483a:	d1f1      	bne.n	8004820 <_vfprintf_r+0xb28>
 800483c:	465a      	mov	r2, fp
 800483e:	ab2c      	add	r3, sp, #176	; 0xb0
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004846:	9307      	str	r3, [sp, #28]
 8004848:	f7ff bbac 	b.w	8003fa4 <_vfprintf_r+0x2ac>
 800484c:	2302      	movs	r3, #2
 800484e:	f7ff bb77 	b.w	8003f40 <_vfprintf_r+0x248>
 8004852:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004854:	2d00      	cmp	r5, #0
 8004856:	f340 8257 	ble.w	8004d08 <_vfprintf_r+0x1010>
 800485a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800485c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800485e:	428a      	cmp	r2, r1
 8004860:	4613      	mov	r3, r2
 8004862:	bfa8      	it	ge
 8004864:	460b      	movge	r3, r1
 8004866:	461d      	mov	r5, r3
 8004868:	990a      	ldr	r1, [sp, #40]	; 0x28
 800486a:	2d00      	cmp	r5, #0
 800486c:	eb01 0a02 	add.w	sl, r1, r2
 8004870:	dd0b      	ble.n	800488a <_vfprintf_r+0xb92>
 8004872:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004874:	6021      	str	r1, [r4, #0]
 8004876:	3301      	adds	r3, #1
 8004878:	44ab      	add	fp, r5
 800487a:	2b07      	cmp	r3, #7
 800487c:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004880:	6065      	str	r5, [r4, #4]
 8004882:	9320      	str	r3, [sp, #128]	; 0x80
 8004884:	f300 8309 	bgt.w	8004e9a <_vfprintf_r+0x11a2>
 8004888:	3408      	adds	r4, #8
 800488a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800488c:	2d00      	cmp	r5, #0
 800488e:	bfa8      	it	ge
 8004890:	1b5b      	subge	r3, r3, r5
 8004892:	2b00      	cmp	r3, #0
 8004894:	461d      	mov	r5, r3
 8004896:	f340 80b0 	ble.w	80049fa <_vfprintf_r+0xd02>
 800489a:	2d10      	cmp	r5, #16
 800489c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800489e:	4f04      	ldr	r7, [pc, #16]	; (80048b0 <_vfprintf_r+0xbb8>)
 80048a0:	f340 821a 	ble.w	8004cd8 <_vfprintf_r+0xfe0>
 80048a4:	2610      	movs	r6, #16
 80048a6:	465a      	mov	r2, fp
 80048a8:	e009      	b.n	80048be <_vfprintf_r+0xbc6>
 80048aa:	bf00      	nop
 80048ac:	0800ab24 	.word	0x0800ab24
 80048b0:	0800aad4 	.word	0x0800aad4
 80048b4:	3408      	adds	r4, #8
 80048b6:	3d10      	subs	r5, #16
 80048b8:	2d10      	cmp	r5, #16
 80048ba:	f340 820c 	ble.w	8004cd6 <_vfprintf_r+0xfde>
 80048be:	3301      	adds	r3, #1
 80048c0:	3210      	adds	r2, #16
 80048c2:	2b07      	cmp	r3, #7
 80048c4:	9221      	str	r2, [sp, #132]	; 0x84
 80048c6:	9320      	str	r3, [sp, #128]	; 0x80
 80048c8:	6027      	str	r7, [r4, #0]
 80048ca:	6066      	str	r6, [r4, #4]
 80048cc:	ddf2      	ble.n	80048b4 <_vfprintf_r+0xbbc>
 80048ce:	4640      	mov	r0, r8
 80048d0:	4649      	mov	r1, r9
 80048d2:	aa1f      	add	r2, sp, #124	; 0x7c
 80048d4:	f003 feae 	bl	8008634 <__sprint_r>
 80048d8:	2800      	cmp	r0, #0
 80048da:	f47f ab0d 	bne.w	8003ef8 <_vfprintf_r+0x200>
 80048de:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80048e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80048e2:	ac2c      	add	r4, sp, #176	; 0xb0
 80048e4:	e7e7      	b.n	80048b6 <_vfprintf_r+0xbbe>
 80048e6:	4640      	mov	r0, r8
 80048e8:	4649      	mov	r1, r9
 80048ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80048ec:	f003 fea2 	bl	8008634 <__sprint_r>
 80048f0:	2800      	cmp	r0, #0
 80048f2:	f47f ab01 	bne.w	8003ef8 <_vfprintf_r+0x200>
 80048f6:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80048fa:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80048fe:	ac2c      	add	r4, sp, #176	; 0xb0
 8004900:	f7ff bbaa 	b.w	8004058 <_vfprintf_r+0x360>
 8004904:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8004908:	f1ba 0f00 	cmp.w	sl, #0
 800490c:	f77f af26 	ble.w	800475c <_vfprintf_r+0xa64>
 8004910:	f1ba 0f10 	cmp.w	sl, #16
 8004914:	4f8f      	ldr	r7, [pc, #572]	; (8004b54 <_vfprintf_r+0xe5c>)
 8004916:	bfc8      	it	gt
 8004918:	f04f 0b10 	movgt.w	fp, #16
 800491c:	dc07      	bgt.n	800492e <_vfprintf_r+0xc36>
 800491e:	e0ea      	b.n	8004af6 <_vfprintf_r+0xdfe>
 8004920:	3408      	adds	r4, #8
 8004922:	f1aa 0a10 	sub.w	sl, sl, #16
 8004926:	f1ba 0f10 	cmp.w	sl, #16
 800492a:	f340 80e4 	ble.w	8004af6 <_vfprintf_r+0xdfe>
 800492e:	3501      	adds	r5, #1
 8004930:	3610      	adds	r6, #16
 8004932:	2d07      	cmp	r5, #7
 8004934:	9621      	str	r6, [sp, #132]	; 0x84
 8004936:	9520      	str	r5, [sp, #128]	; 0x80
 8004938:	e884 0880 	stmia.w	r4, {r7, fp}
 800493c:	ddf0      	ble.n	8004920 <_vfprintf_r+0xc28>
 800493e:	4640      	mov	r0, r8
 8004940:	4649      	mov	r1, r9
 8004942:	aa1f      	add	r2, sp, #124	; 0x7c
 8004944:	f003 fe76 	bl	8008634 <__sprint_r>
 8004948:	2800      	cmp	r0, #0
 800494a:	f47f aad5 	bne.w	8003ef8 <_vfprintf_r+0x200>
 800494e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8004950:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004952:	ac2c      	add	r4, sp, #176	; 0xb0
 8004954:	e7e5      	b.n	8004922 <_vfprintf_r+0xc2a>
 8004956:	9908      	ldr	r1, [sp, #32]
 8004958:	460a      	mov	r2, r1
 800495a:	3204      	adds	r2, #4
 800495c:	680e      	ldr	r6, [r1, #0]
 800495e:	9208      	str	r2, [sp, #32]
 8004960:	2700      	movs	r7, #0
 8004962:	f7ff baed 	b.w	8003f40 <_vfprintf_r+0x248>
 8004966:	9a08      	ldr	r2, [sp, #32]
 8004968:	6816      	ldr	r6, [r2, #0]
 800496a:	4613      	mov	r3, r2
 800496c:	3304      	adds	r3, #4
 800496e:	17f7      	asrs	r7, r6, #31
 8004970:	9308      	str	r3, [sp, #32]
 8004972:	4632      	mov	r2, r6
 8004974:	463b      	mov	r3, r7
 8004976:	e4c0      	b.n	80042fa <_vfprintf_r+0x602>
 8004978:	4693      	mov	fp, r2
 800497a:	3301      	adds	r3, #1
 800497c:	44ab      	add	fp, r5
 800497e:	2b07      	cmp	r3, #7
 8004980:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004984:	9320      	str	r3, [sp, #128]	; 0x80
 8004986:	6027      	str	r7, [r4, #0]
 8004988:	6065      	str	r5, [r4, #4]
 800498a:	f77f abd7 	ble.w	800413c <_vfprintf_r+0x444>
 800498e:	e6f2      	b.n	8004776 <_vfprintf_r+0xa7e>
 8004990:	2b30      	cmp	r3, #48	; 0x30
 8004992:	f000 823e 	beq.w	8004e12 <_vfprintf_r+0x111a>
 8004996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004998:	3b01      	subs	r3, #1
 800499a:	461a      	mov	r2, r3
 800499c:	a82c      	add	r0, sp, #176	; 0xb0
 800499e:	930a      	str	r3, [sp, #40]	; 0x28
 80049a0:	1a82      	subs	r2, r0, r2
 80049a2:	2330      	movs	r3, #48	; 0x30
 80049a4:	9207      	str	r2, [sp, #28]
 80049a6:	f801 3c01 	strb.w	r3, [r1, #-1]
 80049aa:	f7ff bafb 	b.w	8003fa4 <_vfprintf_r+0x2ac>
 80049ae:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
 80049b2:	f8cd c00c 	str.w	ip, [sp, #12]
 80049b6:	4630      	mov	r0, r6
 80049b8:	4639      	mov	r1, r7
 80049ba:	220a      	movs	r2, #10
 80049bc:	2300      	movs	r3, #0
 80049be:	f005 fbf7 	bl	800a1b0 <__aeabi_uldivmod>
 80049c2:	3230      	adds	r2, #48	; 0x30
 80049c4:	4630      	mov	r0, r6
 80049c6:	4639      	mov	r1, r7
 80049c8:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 80049cc:	2300      	movs	r3, #0
 80049ce:	220a      	movs	r2, #10
 80049d0:	f005 fbee 	bl	800a1b0 <__aeabi_uldivmod>
 80049d4:	4606      	mov	r6, r0
 80049d6:	460f      	mov	r7, r1
 80049d8:	ea56 0307 	orrs.w	r3, r6, r7
 80049dc:	d1eb      	bne.n	80049b6 <_vfprintf_r+0xcbe>
 80049de:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80049e2:	e72b      	b.n	800483c <_vfprintf_r+0xb44>
 80049e4:	4640      	mov	r0, r8
 80049e6:	4649      	mov	r1, r9
 80049e8:	aa1f      	add	r2, sp, #124	; 0x7c
 80049ea:	f003 fe23 	bl	8008634 <__sprint_r>
 80049ee:	2800      	cmp	r0, #0
 80049f0:	f47f aa82 	bne.w	8003ef8 <_vfprintf_r+0x200>
 80049f4:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80049f8:	ac2c      	add	r4, sp, #176	; 0xb0
 80049fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80049fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a00:	440a      	add	r2, r1
 8004a02:	4616      	mov	r6, r2
 8004a04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004a06:	4293      	cmp	r3, r2
 8004a08:	db3e      	blt.n	8004a88 <_vfprintf_r+0xd90>
 8004a0a:	9a02      	ldr	r2, [sp, #8]
 8004a0c:	07d5      	lsls	r5, r2, #31
 8004a0e:	d43b      	bmi.n	8004a88 <_vfprintf_r+0xd90>
 8004a10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004a12:	ebc6 050a 	rsb	r5, r6, sl
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	429d      	cmp	r5, r3
 8004a1a:	bfa8      	it	ge
 8004a1c:	461d      	movge	r5, r3
 8004a1e:	2d00      	cmp	r5, #0
 8004a20:	462f      	mov	r7, r5
 8004a22:	dd0b      	ble.n	8004a3c <_vfprintf_r+0xd44>
 8004a24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004a26:	6026      	str	r6, [r4, #0]
 8004a28:	3201      	adds	r2, #1
 8004a2a:	44ab      	add	fp, r5
 8004a2c:	2a07      	cmp	r2, #7
 8004a2e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004a32:	6065      	str	r5, [r4, #4]
 8004a34:	9220      	str	r2, [sp, #128]	; 0x80
 8004a36:	f300 8266 	bgt.w	8004f06 <_vfprintf_r+0x120e>
 8004a3a:	3408      	adds	r4, #8
 8004a3c:	2f00      	cmp	r7, #0
 8004a3e:	bfac      	ite	ge
 8004a40:	1bdd      	subge	r5, r3, r7
 8004a42:	461d      	movlt	r5, r3
 8004a44:	2d00      	cmp	r5, #0
 8004a46:	f77f ab7a 	ble.w	800413e <_vfprintf_r+0x446>
 8004a4a:	2d10      	cmp	r5, #16
 8004a4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a4e:	4f41      	ldr	r7, [pc, #260]	; (8004b54 <_vfprintf_r+0xe5c>)
 8004a50:	dd93      	ble.n	800497a <_vfprintf_r+0xc82>
 8004a52:	2610      	movs	r6, #16
 8004a54:	465a      	mov	r2, fp
 8004a56:	e003      	b.n	8004a60 <_vfprintf_r+0xd68>
 8004a58:	3408      	adds	r4, #8
 8004a5a:	3d10      	subs	r5, #16
 8004a5c:	2d10      	cmp	r5, #16
 8004a5e:	dd8b      	ble.n	8004978 <_vfprintf_r+0xc80>
 8004a60:	3301      	adds	r3, #1
 8004a62:	3210      	adds	r2, #16
 8004a64:	2b07      	cmp	r3, #7
 8004a66:	9221      	str	r2, [sp, #132]	; 0x84
 8004a68:	9320      	str	r3, [sp, #128]	; 0x80
 8004a6a:	6027      	str	r7, [r4, #0]
 8004a6c:	6066      	str	r6, [r4, #4]
 8004a6e:	ddf3      	ble.n	8004a58 <_vfprintf_r+0xd60>
 8004a70:	4640      	mov	r0, r8
 8004a72:	4649      	mov	r1, r9
 8004a74:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a76:	f003 fddd 	bl	8008634 <__sprint_r>
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	f47f aa3c 	bne.w	8003ef8 <_vfprintf_r+0x200>
 8004a80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004a82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a84:	ac2c      	add	r4, sp, #176	; 0xb0
 8004a86:	e7e8      	b.n	8004a5a <_vfprintf_r+0xd62>
 8004a88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004a8a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004a8c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004a8e:	6021      	str	r1, [r4, #0]
 8004a90:	3201      	adds	r2, #1
 8004a92:	4483      	add	fp, r0
 8004a94:	2a07      	cmp	r2, #7
 8004a96:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004a9a:	6060      	str	r0, [r4, #4]
 8004a9c:	9220      	str	r2, [sp, #128]	; 0x80
 8004a9e:	f300 8208 	bgt.w	8004eb2 <_vfprintf_r+0x11ba>
 8004aa2:	3408      	adds	r4, #8
 8004aa4:	e7b4      	b.n	8004a10 <_vfprintf_r+0xd18>
 8004aa6:	9b02      	ldr	r3, [sp, #8]
 8004aa8:	07d8      	lsls	r0, r3, #31
 8004aaa:	f53f ae27 	bmi.w	80046fc <_vfprintf_r+0xa04>
 8004aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ab0:	6023      	str	r3, [r4, #0]
 8004ab2:	3501      	adds	r5, #1
 8004ab4:	f10b 0601 	add.w	r6, fp, #1
 8004ab8:	2301      	movs	r3, #1
 8004aba:	2d07      	cmp	r5, #7
 8004abc:	9621      	str	r6, [sp, #132]	; 0x84
 8004abe:	9520      	str	r5, [sp, #128]	; 0x80
 8004ac0:	6063      	str	r3, [r4, #4]
 8004ac2:	f77f ae4a 	ble.w	800475a <_vfprintf_r+0xa62>
 8004ac6:	4640      	mov	r0, r8
 8004ac8:	4649      	mov	r1, r9
 8004aca:	aa1f      	add	r2, sp, #124	; 0x7c
 8004acc:	f003 fdb2 	bl	8008634 <__sprint_r>
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	f47f aa11 	bne.w	8003ef8 <_vfprintf_r+0x200>
 8004ad6:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8004ad8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004ada:	ac2c      	add	r4, sp, #176	; 0xb0
 8004adc:	e63e      	b.n	800475c <_vfprintf_r+0xa64>
 8004ade:	4640      	mov	r0, r8
 8004ae0:	4649      	mov	r1, r9
 8004ae2:	aa1f      	add	r2, sp, #124	; 0x7c
 8004ae4:	f003 fda6 	bl	8008634 <__sprint_r>
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	f47f aa05 	bne.w	8003ef8 <_vfprintf_r+0x200>
 8004aee:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8004af0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004af2:	ac2c      	add	r4, sp, #176	; 0xb0
 8004af4:	e60f      	b.n	8004716 <_vfprintf_r+0xa1e>
 8004af6:	3501      	adds	r5, #1
 8004af8:	4456      	add	r6, sl
 8004afa:	2d07      	cmp	r5, #7
 8004afc:	9621      	str	r6, [sp, #132]	; 0x84
 8004afe:	9520      	str	r5, [sp, #128]	; 0x80
 8004b00:	e884 0480 	stmia.w	r4, {r7, sl}
 8004b04:	f77f ae29 	ble.w	800475a <_vfprintf_r+0xa62>
 8004b08:	e7dd      	b.n	8004ac6 <_vfprintf_r+0xdce>
 8004b0a:	4640      	mov	r0, r8
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b10:	f003 fd90 	bl	8008634 <__sprint_r>
 8004b14:	2800      	cmp	r0, #0
 8004b16:	f47f a9ef 	bne.w	8003ef8 <_vfprintf_r+0x200>
 8004b1a:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8004b1c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004b1e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004b20:	e605      	b.n	800472e <_vfprintf_r+0xa36>
 8004b22:	4640      	mov	r0, r8
 8004b24:	4649      	mov	r1, r9
 8004b26:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b28:	f003 fd84 	bl	8008634 <__sprint_r>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	f47f a9e3 	bne.w	8003ef8 <_vfprintf_r+0x200>
 8004b32:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004b36:	ac2c      	add	r4, sp, #176	; 0xb0
 8004b38:	f7ff bab5 	b.w	80040a6 <_vfprintf_r+0x3ae>
 8004b3c:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8004b40:	4276      	negs	r6, r6
 8004b42:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004b46:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 8004b4a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f7ff b9fc 	b.w	8003f4c <_vfprintf_r+0x254>
 8004b54:	0800aad4 	.word	0x0800aad4
 8004b58:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8004b5c:	f003 fb36 	bl	80081cc <__fpclassifyd>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	f000 8116 	beq.w	8004d92 <_vfprintf_r+0x109a>
 8004b66:	f025 0320 	bic.w	r3, r5, #32
 8004b6a:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8004b6e:	9303      	str	r3, [sp, #12]
 8004b70:	f000 8260 	beq.w	8005034 <_vfprintf_r+0x133c>
 8004b74:	2b47      	cmp	r3, #71	; 0x47
 8004b76:	d105      	bne.n	8004b84 <_vfprintf_r+0xe8c>
 8004b78:	f1ba 0f00 	cmp.w	sl, #0
 8004b7c:	bf14      	ite	ne
 8004b7e:	46d3      	movne	fp, sl
 8004b80:	f04f 0b01 	moveq.w	fp, #1
 8004b84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b86:	9a02      	ldr	r2, [sp, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b8e:	9209      	str	r2, [sp, #36]	; 0x24
 8004b90:	f2c0 8260 	blt.w	8005054 <_vfprintf_r+0x135c>
 8004b94:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8004b98:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004b9c:	f04f 0a00 	mov.w	sl, #0
 8004ba0:	2d66      	cmp	r5, #102	; 0x66
 8004ba2:	f000 815e 	beq.w	8004e62 <_vfprintf_r+0x116a>
 8004ba6:	2d46      	cmp	r5, #70	; 0x46
 8004ba8:	f000 815b 	beq.w	8004e62 <_vfprintf_r+0x116a>
 8004bac:	9b03      	ldr	r3, [sp, #12]
 8004bae:	2b45      	cmp	r3, #69	; 0x45
 8004bb0:	bf0c      	ite	eq
 8004bb2:	f10b 0701 	addeq.w	r7, fp, #1
 8004bb6:	465f      	movne	r7, fp
 8004bb8:	aa1a      	add	r2, sp, #104	; 0x68
 8004bba:	ab1d      	add	r3, sp, #116	; 0x74
 8004bbc:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004bc0:	4640      	mov	r0, r8
 8004bc2:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8004bc6:	2102      	movs	r1, #2
 8004bc8:	463a      	mov	r2, r7
 8004bca:	ab19      	add	r3, sp, #100	; 0x64
 8004bcc:	f000 fc60 	bl	8005490 <_dtoa_r>
 8004bd0:	2d67      	cmp	r5, #103	; 0x67
 8004bd2:	900a      	str	r0, [sp, #40]	; 0x28
 8004bd4:	d002      	beq.n	8004bdc <_vfprintf_r+0xee4>
 8004bd6:	2d47      	cmp	r5, #71	; 0x47
 8004bd8:	f040 8151 	bne.w	8004e7e <_vfprintf_r+0x1186>
 8004bdc:	9b02      	ldr	r3, [sp, #8]
 8004bde:	07db      	lsls	r3, r3, #31
 8004be0:	f140 8241 	bpl.w	8005066 <_vfprintf_r+0x136e>
 8004be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004be6:	19de      	adds	r6, r3, r7
 8004be8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004bec:	2200      	movs	r2, #0
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f005 fa84 	bl	800a0fc <__aeabi_dcmpeq>
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	f040 81ad 	bne.w	8004f54 <_vfprintf_r+0x125c>
 8004bfa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004bfc:	429e      	cmp	r6, r3
 8004bfe:	d906      	bls.n	8004c0e <_vfprintf_r+0xf16>
 8004c00:	2130      	movs	r1, #48	; 0x30
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	921d      	str	r2, [sp, #116]	; 0x74
 8004c06:	7019      	strb	r1, [r3, #0]
 8004c08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c0a:	429e      	cmp	r6, r3
 8004c0c:	d8f9      	bhi.n	8004c02 <_vfprintf_r+0xf0a>
 8004c0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c10:	1a9b      	subs	r3, r3, r2
 8004c12:	930d      	str	r3, [sp, #52]	; 0x34
 8004c14:	9b03      	ldr	r3, [sp, #12]
 8004c16:	2b47      	cmp	r3, #71	; 0x47
 8004c18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c1a:	f000 8183 	beq.w	8004f24 <_vfprintf_r+0x122c>
 8004c1e:	2d65      	cmp	r5, #101	; 0x65
 8004c20:	f340 81a6 	ble.w	8004f70 <_vfprintf_r+0x1278>
 8004c24:	2d66      	cmp	r5, #102	; 0x66
 8004c26:	930c      	str	r3, [sp, #48]	; 0x30
 8004c28:	f000 821f 	beq.w	800506a <_vfprintf_r+0x1372>
 8004c2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c30:	4293      	cmp	r3, r2
 8004c32:	f300 8202 	bgt.w	800503a <_vfprintf_r+0x1342>
 8004c36:	9b02      	ldr	r3, [sp, #8]
 8004c38:	07d9      	lsls	r1, r3, #31
 8004c3a:	f100 8239 	bmi.w	80050b0 <_vfprintf_r+0x13b8>
 8004c3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004c42:	9207      	str	r2, [sp, #28]
 8004c44:	f1ba 0f00 	cmp.w	sl, #0
 8004c48:	f040 8179 	bne.w	8004f3e <_vfprintf_r+0x1246>
 8004c4c:	9303      	str	r3, [sp, #12]
 8004c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c50:	9302      	str	r3, [sp, #8]
 8004c52:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8004c56:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8004c5a:	f7ff b9ab 	b.w	8003fb4 <_vfprintf_r+0x2bc>
 8004c5e:	f027 0707 	bic.w	r7, r7, #7
 8004c62:	ed97 7b00 	vldr	d7, [r7]
 8004c66:	f107 0308 	add.w	r3, r7, #8
 8004c6a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004c6e:	9308      	str	r3, [sp, #32]
 8004c70:	f7ff bb63 	b.w	800433a <_vfprintf_r+0x642>
 8004c74:	9b02      	ldr	r3, [sp, #8]
 8004c76:	06db      	lsls	r3, r3, #27
 8004c78:	d40b      	bmi.n	8004c92 <_vfprintf_r+0xf9a>
 8004c7a:	9b02      	ldr	r3, [sp, #8]
 8004c7c:	065f      	lsls	r7, r3, #25
 8004c7e:	d508      	bpl.n	8004c92 <_vfprintf_r+0xf9a>
 8004c80:	9a08      	ldr	r2, [sp, #32]
 8004c82:	6813      	ldr	r3, [r2, #0]
 8004c84:	3204      	adds	r2, #4
 8004c86:	9208      	str	r2, [sp, #32]
 8004c88:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8004c8c:	801a      	strh	r2, [r3, #0]
 8004c8e:	f7ff b874 	b.w	8003d7a <_vfprintf_r+0x82>
 8004c92:	9a08      	ldr	r2, [sp, #32]
 8004c94:	6813      	ldr	r3, [r2, #0]
 8004c96:	3204      	adds	r2, #4
 8004c98:	9208      	str	r2, [sp, #32]
 8004c9a:	9a05      	ldr	r2, [sp, #20]
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	f7ff b86c 	b.w	8003d7a <_vfprintf_r+0x82>
 8004ca2:	9b02      	ldr	r3, [sp, #8]
 8004ca4:	9a08      	ldr	r2, [sp, #32]
 8004ca6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004caa:	4613      	mov	r3, r2
 8004cac:	f43f ac62 	beq.w	8004574 <_vfprintf_r+0x87c>
 8004cb0:	8816      	ldrh	r6, [r2, #0]
 8004cb2:	3204      	adds	r2, #4
 8004cb4:	2700      	movs	r7, #0
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	9208      	str	r2, [sp, #32]
 8004cba:	f7ff b941 	b.w	8003f40 <_vfprintf_r+0x248>
 8004cbe:	9b02      	ldr	r3, [sp, #8]
 8004cc0:	9a08      	ldr	r2, [sp, #32]
 8004cc2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	d076      	beq.n	8004db8 <_vfprintf_r+0x10c0>
 8004cca:	3304      	adds	r3, #4
 8004ccc:	8816      	ldrh	r6, [r2, #0]
 8004cce:	9308      	str	r3, [sp, #32]
 8004cd0:	2700      	movs	r7, #0
 8004cd2:	f7ff bad3 	b.w	800427c <_vfprintf_r+0x584>
 8004cd6:	4693      	mov	fp, r2
 8004cd8:	3301      	adds	r3, #1
 8004cda:	44ab      	add	fp, r5
 8004cdc:	2b07      	cmp	r3, #7
 8004cde:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004ce2:	9320      	str	r3, [sp, #128]	; 0x80
 8004ce4:	6027      	str	r7, [r4, #0]
 8004ce6:	6065      	str	r5, [r4, #4]
 8004ce8:	f73f ae7c 	bgt.w	80049e4 <_vfprintf_r+0xcec>
 8004cec:	3408      	adds	r4, #8
 8004cee:	e684      	b.n	80049fa <_vfprintf_r+0xd02>
 8004cf0:	4640      	mov	r0, r8
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	aa1f      	add	r2, sp, #124	; 0x7c
 8004cf6:	f003 fc9d 	bl	8008634 <__sprint_r>
 8004cfa:	2800      	cmp	r0, #0
 8004cfc:	f47f a8fc 	bne.w	8003ef8 <_vfprintf_r+0x200>
 8004d00:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004d04:	ac2c      	add	r4, sp, #176	; 0xb0
 8004d06:	e482      	b.n	800460e <_vfprintf_r+0x916>
 8004d08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004d0a:	4ab0      	ldr	r2, [pc, #704]	; (8004fcc <_vfprintf_r+0x12d4>)
 8004d0c:	6022      	str	r2, [r4, #0]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	f10b 0b01 	add.w	fp, fp, #1
 8004d14:	2201      	movs	r2, #1
 8004d16:	2b07      	cmp	r3, #7
 8004d18:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004d1c:	9320      	str	r3, [sp, #128]	; 0x80
 8004d1e:	6062      	str	r2, [r4, #4]
 8004d20:	dc50      	bgt.n	8004dc4 <_vfprintf_r+0x10cc>
 8004d22:	3408      	adds	r4, #8
 8004d24:	b92d      	cbnz	r5, 8004d32 <_vfprintf_r+0x103a>
 8004d26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d28:	b91b      	cbnz	r3, 8004d32 <_vfprintf_r+0x103a>
 8004d2a:	9b02      	ldr	r3, [sp, #8]
 8004d2c:	07de      	lsls	r6, r3, #31
 8004d2e:	f57f aa06 	bpl.w	800413e <_vfprintf_r+0x446>
 8004d32:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004d34:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004d36:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004d38:	6022      	str	r2, [r4, #0]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	eb0b 0201 	add.w	r2, fp, r1
 8004d40:	2b07      	cmp	r3, #7
 8004d42:	9221      	str	r2, [sp, #132]	; 0x84
 8004d44:	6061      	str	r1, [r4, #4]
 8004d46:	9320      	str	r3, [sp, #128]	; 0x80
 8004d48:	f300 8167 	bgt.w	800501a <_vfprintf_r+0x1322>
 8004d4c:	3408      	adds	r4, #8
 8004d4e:	426d      	negs	r5, r5
 8004d50:	2d00      	cmp	r5, #0
 8004d52:	dd6f      	ble.n	8004e34 <_vfprintf_r+0x113c>
 8004d54:	2d10      	cmp	r5, #16
 8004d56:	4f9e      	ldr	r7, [pc, #632]	; (8004fd0 <_vfprintf_r+0x12d8>)
 8004d58:	bfc8      	it	gt
 8004d5a:	2610      	movgt	r6, #16
 8004d5c:	dc05      	bgt.n	8004d6a <_vfprintf_r+0x1072>
 8004d5e:	e0b5      	b.n	8004ecc <_vfprintf_r+0x11d4>
 8004d60:	3408      	adds	r4, #8
 8004d62:	3d10      	subs	r5, #16
 8004d64:	2d10      	cmp	r5, #16
 8004d66:	f340 80b1 	ble.w	8004ecc <_vfprintf_r+0x11d4>
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	3210      	adds	r2, #16
 8004d6e:	2b07      	cmp	r3, #7
 8004d70:	9221      	str	r2, [sp, #132]	; 0x84
 8004d72:	9320      	str	r3, [sp, #128]	; 0x80
 8004d74:	6027      	str	r7, [r4, #0]
 8004d76:	6066      	str	r6, [r4, #4]
 8004d78:	ddf2      	ble.n	8004d60 <_vfprintf_r+0x1068>
 8004d7a:	4640      	mov	r0, r8
 8004d7c:	4649      	mov	r1, r9
 8004d7e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d80:	f003 fc58 	bl	8008634 <__sprint_r>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	f47f a8b7 	bne.w	8003ef8 <_vfprintf_r+0x200>
 8004d8a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004d8e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004d90:	e7e7      	b.n	8004d62 <_vfprintf_r+0x106a>
 8004d92:	9e02      	ldr	r6, [sp, #8]
 8004d94:	4a8f      	ldr	r2, [pc, #572]	; (8004fd4 <_vfprintf_r+0x12dc>)
 8004d96:	4b90      	ldr	r3, [pc, #576]	; (8004fd8 <_vfprintf_r+0x12e0>)
 8004d98:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8004d9c:	900b      	str	r0, [sp, #44]	; 0x2c
 8004d9e:	2103      	movs	r1, #3
 8004da0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8004da4:	2d47      	cmp	r5, #71	; 0x47
 8004da6:	bfd8      	it	le
 8004da8:	461a      	movle	r2, r3
 8004daa:	9103      	str	r1, [sp, #12]
 8004dac:	9602      	str	r6, [sp, #8]
 8004dae:	900c      	str	r0, [sp, #48]	; 0x30
 8004db0:	920a      	str	r2, [sp, #40]	; 0x28
 8004db2:	9107      	str	r1, [sp, #28]
 8004db4:	f7ff b8fe 	b.w	8003fb4 <_vfprintf_r+0x2bc>
 8004db8:	3304      	adds	r3, #4
 8004dba:	6816      	ldr	r6, [r2, #0]
 8004dbc:	9308      	str	r3, [sp, #32]
 8004dbe:	2700      	movs	r7, #0
 8004dc0:	f7ff ba5c 	b.w	800427c <_vfprintf_r+0x584>
 8004dc4:	4640      	mov	r0, r8
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	aa1f      	add	r2, sp, #124	; 0x7c
 8004dca:	f003 fc33 	bl	8008634 <__sprint_r>
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	f47f a892 	bne.w	8003ef8 <_vfprintf_r+0x200>
 8004dd4:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004dd6:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004dda:	ac2c      	add	r4, sp, #176	; 0xb0
 8004ddc:	e7a2      	b.n	8004d24 <_vfprintf_r+0x102c>
 8004dde:	f041 0120 	orr.w	r1, r1, #32
 8004de2:	9102      	str	r1, [sp, #8]
 8004de4:	785d      	ldrb	r5, [r3, #1]
 8004de6:	1c59      	adds	r1, r3, #1
 8004de8:	f7fe bff7 	b.w	8003dda <_vfprintf_r+0xe2>
 8004dec:	9806      	ldr	r0, [sp, #24]
 8004dee:	9108      	str	r1, [sp, #32]
 8004df0:	4240      	negs	r0, r0
 8004df2:	9006      	str	r0, [sp, #24]
 8004df4:	4619      	mov	r1, r3
 8004df6:	f7ff b9f1 	b.w	80041dc <_vfprintf_r+0x4e4>
 8004dfa:	4640      	mov	r0, r8
 8004dfc:	4649      	mov	r1, r9
 8004dfe:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e00:	f003 fc18 	bl	8008634 <__sprint_r>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	f47f a877 	bne.w	8003ef8 <_vfprintf_r+0x200>
 8004e0a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004e0e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004e10:	e413      	b.n	800463a <_vfprintf_r+0x942>
 8004e12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e14:	ab2c      	add	r3, sp, #176	; 0xb0
 8004e16:	1a9b      	subs	r3, r3, r2
 8004e18:	9307      	str	r3, [sp, #28]
 8004e1a:	f7ff b8c3 	b.w	8003fa4 <_vfprintf_r+0x2ac>
 8004e1e:	4640      	mov	r0, r8
 8004e20:	4649      	mov	r1, r9
 8004e22:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e24:	f003 fc06 	bl	8008634 <__sprint_r>
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	f47f a865 	bne.w	8003ef8 <_vfprintf_r+0x200>
 8004e2e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004e30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004e32:	ac2c      	add	r4, sp, #176	; 0xb0
 8004e34:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004e36:	6060      	str	r0, [r4, #4]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	eb02 0b00 	add.w	fp, r2, r0
 8004e3e:	2b07      	cmp	r3, #7
 8004e40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e42:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8004e46:	9320      	str	r3, [sp, #128]	; 0x80
 8004e48:	6022      	str	r2, [r4, #0]
 8004e4a:	f77f a977 	ble.w	800413c <_vfprintf_r+0x444>
 8004e4e:	e492      	b.n	8004776 <_vfprintf_r+0xa7e>
 8004e50:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004e54:	f7fe ff20 	bl	8003c98 <strlen>
 8004e58:	9708      	str	r7, [sp, #32]
 8004e5a:	9007      	str	r0, [sp, #28]
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	f7ff b9f2 	b.w	8004246 <_vfprintf_r+0x54e>
 8004e62:	aa1a      	add	r2, sp, #104	; 0x68
 8004e64:	ab1d      	add	r3, sp, #116	; 0x74
 8004e66:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004e6a:	4640      	mov	r0, r8
 8004e6c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8004e70:	2103      	movs	r1, #3
 8004e72:	465a      	mov	r2, fp
 8004e74:	ab19      	add	r3, sp, #100	; 0x64
 8004e76:	f000 fb0b 	bl	8005490 <_dtoa_r>
 8004e7a:	465f      	mov	r7, fp
 8004e7c:	900a      	str	r0, [sp, #40]	; 0x28
 8004e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e80:	19de      	adds	r6, r3, r7
 8004e82:	9b03      	ldr	r3, [sp, #12]
 8004e84:	2b46      	cmp	r3, #70	; 0x46
 8004e86:	f47f aeaf 	bne.w	8004be8 <_vfprintf_r+0xef0>
 8004e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	2b30      	cmp	r3, #48	; 0x30
 8004e90:	f000 8100 	beq.w	8005094 <_vfprintf_r+0x139c>
 8004e94:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8004e96:	443e      	add	r6, r7
 8004e98:	e6a6      	b.n	8004be8 <_vfprintf_r+0xef0>
 8004e9a:	4640      	mov	r0, r8
 8004e9c:	4649      	mov	r1, r9
 8004e9e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004ea0:	f003 fbc8 	bl	8008634 <__sprint_r>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	f47f a827 	bne.w	8003ef8 <_vfprintf_r+0x200>
 8004eaa:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004eae:	ac2c      	add	r4, sp, #176	; 0xb0
 8004eb0:	e4eb      	b.n	800488a <_vfprintf_r+0xb92>
 8004eb2:	4640      	mov	r0, r8
 8004eb4:	4649      	mov	r1, r9
 8004eb6:	aa1f      	add	r2, sp, #124	; 0x7c
 8004eb8:	f003 fbbc 	bl	8008634 <__sprint_r>
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	f47f a81b 	bne.w	8003ef8 <_vfprintf_r+0x200>
 8004ec2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ec4:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004ec8:	ac2c      	add	r4, sp, #176	; 0xb0
 8004eca:	e5a1      	b.n	8004a10 <_vfprintf_r+0xd18>
 8004ecc:	3301      	adds	r3, #1
 8004ece:	442a      	add	r2, r5
 8004ed0:	2b07      	cmp	r3, #7
 8004ed2:	9221      	str	r2, [sp, #132]	; 0x84
 8004ed4:	9320      	str	r3, [sp, #128]	; 0x80
 8004ed6:	6027      	str	r7, [r4, #0]
 8004ed8:	6065      	str	r5, [r4, #4]
 8004eda:	dca0      	bgt.n	8004e1e <_vfprintf_r+0x1126>
 8004edc:	3408      	adds	r4, #8
 8004ede:	e7a9      	b.n	8004e34 <_vfprintf_r+0x113c>
 8004ee0:	2e06      	cmp	r6, #6
 8004ee2:	4633      	mov	r3, r6
 8004ee4:	bf28      	it	cs
 8004ee6:	2306      	movcs	r3, #6
 8004ee8:	9307      	str	r3, [sp, #28]
 8004eea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004eee:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8004ef2:	9303      	str	r3, [sp, #12]
 8004ef4:	4b39      	ldr	r3, [pc, #228]	; (8004fdc <_vfprintf_r+0x12e4>)
 8004ef6:	9708      	str	r7, [sp, #32]
 8004ef8:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8004efc:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8004f00:	930a      	str	r3, [sp, #40]	; 0x28
 8004f02:	f7ff b857 	b.w	8003fb4 <_vfprintf_r+0x2bc>
 8004f06:	4640      	mov	r0, r8
 8004f08:	4649      	mov	r1, r9
 8004f0a:	aa1f      	add	r2, sp, #124	; 0x7c
 8004f0c:	f003 fb92 	bl	8008634 <__sprint_r>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	f47e aff1 	bne.w	8003ef8 <_vfprintf_r+0x200>
 8004f16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f1a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	ac2c      	add	r4, sp, #176	; 0xb0
 8004f22:	e58b      	b.n	8004a3c <_vfprintf_r+0xd44>
 8004f24:	1cdf      	adds	r7, r3, #3
 8004f26:	db22      	blt.n	8004f6e <_vfprintf_r+0x1276>
 8004f28:	459b      	cmp	fp, r3
 8004f2a:	db20      	blt.n	8004f6e <_vfprintf_r+0x1276>
 8004f2c:	930c      	str	r3, [sp, #48]	; 0x30
 8004f2e:	2567      	movs	r5, #103	; 0x67
 8004f30:	e67c      	b.n	8004c2c <_vfprintf_r+0xf34>
 8004f32:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8004f36:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 8004f3a:	f7ff ba10 	b.w	800435e <_vfprintf_r+0x666>
 8004f3e:	9303      	str	r3, [sp, #12]
 8004f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f42:	9302      	str	r3, [sp, #8]
 8004f44:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 8004f4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f50:	f7ff b833 	b.w	8003fba <_vfprintf_r+0x2c2>
 8004f54:	4633      	mov	r3, r6
 8004f56:	e65a      	b.n	8004c0e <_vfprintf_r+0xf16>
 8004f58:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8004f5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8004f5e:	9708      	str	r7, [sp, #32]
 8004f60:	900c      	str	r0, [sp, #48]	; 0x30
 8004f62:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8004f66:	9303      	str	r3, [sp, #12]
 8004f68:	9607      	str	r6, [sp, #28]
 8004f6a:	f7ff b823 	b.w	8003fb4 <_vfprintf_r+0x2bc>
 8004f6e:	3d02      	subs	r5, #2
 8004f70:	3b01      	subs	r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	9319      	str	r3, [sp, #100]	; 0x64
 8004f76:	bfba      	itte	lt
 8004f78:	425b      	neglt	r3, r3
 8004f7a:	222d      	movlt	r2, #45	; 0x2d
 8004f7c:	222b      	movge	r2, #43	; 0x2b
 8004f7e:	2b09      	cmp	r3, #9
 8004f80:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
 8004f84:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8004f88:	f340 8098 	ble.w	80050bc <_vfprintf_r+0x13c4>
 8004f8c:	f10d 067b 	add.w	r6, sp, #123	; 0x7b
 8004f90:	4630      	mov	r0, r6
 8004f92:	4a13      	ldr	r2, [pc, #76]	; (8004fe0 <_vfprintf_r+0x12e8>)
 8004f94:	fb82 2103 	smull	r2, r1, r2, r3
 8004f98:	17da      	asrs	r2, r3, #31
 8004f9a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8004f9e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004fa2:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8004fa6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004faa:	2a09      	cmp	r2, #9
 8004fac:	4613      	mov	r3, r2
 8004fae:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8004fb2:	dcee      	bgt.n	8004f92 <_vfprintf_r+0x129a>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	3330      	adds	r3, #48	; 0x30
 8004fb8:	b2d9      	uxtb	r1, r3
 8004fba:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8004fbe:	4296      	cmp	r6, r2
 8004fc0:	f240 80a9 	bls.w	8005116 <_vfprintf_r+0x141e>
 8004fc4:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8004fc8:	4603      	mov	r3, r0
 8004fca:	e00d      	b.n	8004fe8 <_vfprintf_r+0x12f0>
 8004fcc:	0800ab24 	.word	0x0800ab24
 8004fd0:	0800aad4 	.word	0x0800aad4
 8004fd4:	0800aaf0 	.word	0x0800aaf0
 8004fd8:	0800aaec 	.word	0x0800aaec
 8004fdc:	0800ab1c 	.word	0x0800ab1c
 8004fe0:	66666667 	.word	0x66666667
 8004fe4:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004fe8:	f802 1b01 	strb.w	r1, [r2], #1
 8004fec:	42b3      	cmp	r3, r6
 8004fee:	d1f9      	bne.n	8004fe4 <_vfprintf_r+0x12ec>
 8004ff0:	ab1f      	add	r3, sp, #124	; 0x7c
 8004ff2:	1a1b      	subs	r3, r3, r0
 8004ff4:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8004ff8:	4413      	add	r3, r2
 8004ffa:	aa1b      	add	r2, sp, #108	; 0x6c
 8004ffc:	1a9b      	subs	r3, r3, r2
 8004ffe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005000:	9313      	str	r3, [sp, #76]	; 0x4c
 8005002:	2a01      	cmp	r2, #1
 8005004:	4413      	add	r3, r2
 8005006:	9307      	str	r3, [sp, #28]
 8005008:	dd69      	ble.n	80050de <_vfprintf_r+0x13e6>
 800500a:	9b07      	ldr	r3, [sp, #28]
 800500c:	2200      	movs	r2, #0
 800500e:	3301      	adds	r3, #1
 8005010:	9307      	str	r3, [sp, #28]
 8005012:	920c      	str	r2, [sp, #48]	; 0x30
 8005014:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005018:	e614      	b.n	8004c44 <_vfprintf_r+0xf4c>
 800501a:	4640      	mov	r0, r8
 800501c:	4649      	mov	r1, r9
 800501e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005020:	f003 fb08 	bl	8008634 <__sprint_r>
 8005024:	2800      	cmp	r0, #0
 8005026:	f47e af67 	bne.w	8003ef8 <_vfprintf_r+0x200>
 800502a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800502c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800502e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005030:	ac2c      	add	r4, sp, #176	; 0xb0
 8005032:	e68c      	b.n	8004d4e <_vfprintf_r+0x1056>
 8005034:	f04f 0b06 	mov.w	fp, #6
 8005038:	e5a4      	b.n	8004b84 <_vfprintf_r+0xe8c>
 800503a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800503c:	2b00      	cmp	r3, #0
 800503e:	bfd8      	it	le
 8005040:	f1c3 0602 	rsble	r6, r3, #2
 8005044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005046:	bfc8      	it	gt
 8005048:	2601      	movgt	r6, #1
 800504a:	18f3      	adds	r3, r6, r3
 800504c:	9307      	str	r3, [sp, #28]
 800504e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005052:	e5f7      	b.n	8004c44 <_vfprintf_r+0xf4c>
 8005054:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005058:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800505c:	9014      	str	r0, [sp, #80]	; 0x50
 800505e:	9315      	str	r3, [sp, #84]	; 0x54
 8005060:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8005064:	e59c      	b.n	8004ba0 <_vfprintf_r+0xea8>
 8005066:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005068:	e5d1      	b.n	8004c0e <_vfprintf_r+0xf16>
 800506a:	2b00      	cmp	r3, #0
 800506c:	dd2e      	ble.n	80050cc <_vfprintf_r+0x13d4>
 800506e:	f1bb 0f00 	cmp.w	fp, #0
 8005072:	d107      	bne.n	8005084 <_vfprintf_r+0x138c>
 8005074:	9b02      	ldr	r3, [sp, #8]
 8005076:	07de      	lsls	r6, r3, #31
 8005078:	d404      	bmi.n	8005084 <_vfprintf_r+0x138c>
 800507a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800507c:	9207      	str	r2, [sp, #28]
 800507e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005082:	e5df      	b.n	8004c44 <_vfprintf_r+0xf4c>
 8005084:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005086:	f10b 0601 	add.w	r6, fp, #1
 800508a:	4433      	add	r3, r6
 800508c:	9307      	str	r3, [sp, #28]
 800508e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005092:	e5d7      	b.n	8004c44 <_vfprintf_r+0xf4c>
 8005094:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8005098:	2200      	movs	r2, #0
 800509a:	2300      	movs	r3, #0
 800509c:	f005 f82e 	bl	800a0fc <__aeabi_dcmpeq>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	f47f aef7 	bne.w	8004e94 <_vfprintf_r+0x119c>
 80050a6:	f1c7 0701 	rsb	r7, r7, #1
 80050aa:	9719      	str	r7, [sp, #100]	; 0x64
 80050ac:	443e      	add	r6, r7
 80050ae:	e59b      	b.n	8004be8 <_vfprintf_r+0xef0>
 80050b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050b2:	3301      	adds	r3, #1
 80050b4:	9307      	str	r3, [sp, #28]
 80050b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80050ba:	e5c3      	b.n	8004c44 <_vfprintf_r+0xf4c>
 80050bc:	3330      	adds	r3, #48	; 0x30
 80050be:	2230      	movs	r2, #48	; 0x30
 80050c0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80050c4:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80050c8:	ab1c      	add	r3, sp, #112	; 0x70
 80050ca:	e796      	b.n	8004ffa <_vfprintf_r+0x1302>
 80050cc:	f1bb 0f00 	cmp.w	fp, #0
 80050d0:	d11b      	bne.n	800510a <_vfprintf_r+0x1412>
 80050d2:	9b02      	ldr	r3, [sp, #8]
 80050d4:	07d8      	lsls	r0, r3, #31
 80050d6:	d418      	bmi.n	800510a <_vfprintf_r+0x1412>
 80050d8:	2301      	movs	r3, #1
 80050da:	9307      	str	r3, [sp, #28]
 80050dc:	e5b2      	b.n	8004c44 <_vfprintf_r+0xf4c>
 80050de:	9b02      	ldr	r3, [sp, #8]
 80050e0:	f013 0301 	ands.w	r3, r3, #1
 80050e4:	d191      	bne.n	800500a <_vfprintf_r+0x1312>
 80050e6:	930c      	str	r3, [sp, #48]	; 0x30
 80050e8:	9b07      	ldr	r3, [sp, #28]
 80050ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80050ee:	e5a9      	b.n	8004c44 <_vfprintf_r+0xf4c>
 80050f0:	9d08      	ldr	r5, [sp, #32]
 80050f2:	682e      	ldr	r6, [r5, #0]
 80050f4:	4628      	mov	r0, r5
 80050f6:	3004      	adds	r0, #4
 80050f8:	2e00      	cmp	r6, #0
 80050fa:	785d      	ldrb	r5, [r3, #1]
 80050fc:	9008      	str	r0, [sp, #32]
 80050fe:	f6be ae6c 	bge.w	8003dda <_vfprintf_r+0xe2>
 8005102:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005106:	f7fe be68 	b.w	8003dda <_vfprintf_r+0xe2>
 800510a:	f10b 0302 	add.w	r3, fp, #2
 800510e:	9307      	str	r3, [sp, #28]
 8005110:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005114:	e596      	b.n	8004c44 <_vfprintf_r+0xf4c>
 8005116:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800511a:	e76e      	b.n	8004ffa <_vfprintf_r+0x1302>

0800511c <vfprintf>:
 800511c:	b430      	push	{r4, r5}
 800511e:	4c04      	ldr	r4, [pc, #16]	; (8005130 <vfprintf+0x14>)
 8005120:	460d      	mov	r5, r1
 8005122:	4613      	mov	r3, r2
 8005124:	4601      	mov	r1, r0
 8005126:	462a      	mov	r2, r5
 8005128:	6820      	ldr	r0, [r4, #0]
 800512a:	bc30      	pop	{r4, r5}
 800512c:	f7fe bde4 	b.w	8003cf8 <_vfprintf_r>
 8005130:	200004a8 	.word	0x200004a8

08005134 <__sbprintf>:
 8005134:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8005138:	460c      	mov	r4, r1
 800513a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 800513e:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8005142:	69e7      	ldr	r7, [r4, #28]
 8005144:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8005146:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 800514a:	9119      	str	r1, [sp, #100]	; 0x64
 800514c:	ad1a      	add	r5, sp, #104	; 0x68
 800514e:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8005152:	f02e 0e02 	bic.w	lr, lr, #2
 8005156:	f04f 0c00 	mov.w	ip, #0
 800515a:	9707      	str	r7, [sp, #28]
 800515c:	4669      	mov	r1, sp
 800515e:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8005160:	9500      	str	r5, [sp, #0]
 8005162:	9504      	str	r5, [sp, #16]
 8005164:	9602      	str	r6, [sp, #8]
 8005166:	9605      	str	r6, [sp, #20]
 8005168:	f8ad e00c 	strh.w	lr, [sp, #12]
 800516c:	f8ad 900e 	strh.w	r9, [sp, #14]
 8005170:	9709      	str	r7, [sp, #36]	; 0x24
 8005172:	f8cd c018 	str.w	ip, [sp, #24]
 8005176:	4606      	mov	r6, r0
 8005178:	f7fe fdbe 	bl	8003cf8 <_vfprintf_r>
 800517c:	1e05      	subs	r5, r0, #0
 800517e:	db07      	blt.n	8005190 <__sbprintf+0x5c>
 8005180:	4630      	mov	r0, r6
 8005182:	4669      	mov	r1, sp
 8005184:	f001 f980 	bl	8006488 <_fflush_r>
 8005188:	2800      	cmp	r0, #0
 800518a:	bf18      	it	ne
 800518c:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8005190:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005194:	065b      	lsls	r3, r3, #25
 8005196:	d503      	bpl.n	80051a0 <__sbprintf+0x6c>
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800519e:	81a3      	strh	r3, [r4, #12]
 80051a0:	4628      	mov	r0, r5
 80051a2:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 80051a6:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 80051aa:	bf00      	nop

080051ac <__swsetup_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	4b2f      	ldr	r3, [pc, #188]	; (800526c <__swsetup_r+0xc0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4605      	mov	r5, r0
 80051b4:	460c      	mov	r4, r1
 80051b6:	b113      	cbz	r3, 80051be <__swsetup_r+0x12>
 80051b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ba:	2a00      	cmp	r2, #0
 80051bc:	d036      	beq.n	800522c <__swsetup_r+0x80>
 80051be:	89a2      	ldrh	r2, [r4, #12]
 80051c0:	b293      	uxth	r3, r2
 80051c2:	0718      	lsls	r0, r3, #28
 80051c4:	d50c      	bpl.n	80051e0 <__swsetup_r+0x34>
 80051c6:	6920      	ldr	r0, [r4, #16]
 80051c8:	b1a8      	cbz	r0, 80051f6 <__swsetup_r+0x4a>
 80051ca:	f013 0201 	ands.w	r2, r3, #1
 80051ce:	d01e      	beq.n	800520e <__swsetup_r+0x62>
 80051d0:	6963      	ldr	r3, [r4, #20]
 80051d2:	2200      	movs	r2, #0
 80051d4:	425b      	negs	r3, r3
 80051d6:	61a3      	str	r3, [r4, #24]
 80051d8:	60a2      	str	r2, [r4, #8]
 80051da:	b1f0      	cbz	r0, 800521a <__swsetup_r+0x6e>
 80051dc:	2000      	movs	r0, #0
 80051de:	bd38      	pop	{r3, r4, r5, pc}
 80051e0:	06d9      	lsls	r1, r3, #27
 80051e2:	d53b      	bpl.n	800525c <__swsetup_r+0xb0>
 80051e4:	0758      	lsls	r0, r3, #29
 80051e6:	d425      	bmi.n	8005234 <__swsetup_r+0x88>
 80051e8:	6920      	ldr	r0, [r4, #16]
 80051ea:	f042 0308 	orr.w	r3, r2, #8
 80051ee:	81a3      	strh	r3, [r4, #12]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2800      	cmp	r0, #0
 80051f4:	d1e9      	bne.n	80051ca <__swsetup_r+0x1e>
 80051f6:	f403 7220 	and.w	r2, r3, #640	; 0x280
 80051fa:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80051fe:	d0e4      	beq.n	80051ca <__swsetup_r+0x1e>
 8005200:	4628      	mov	r0, r5
 8005202:	4621      	mov	r1, r4
 8005204:	f001 fdcc 	bl	8006da0 <__smakebuf_r>
 8005208:	89a3      	ldrh	r3, [r4, #12]
 800520a:	6920      	ldr	r0, [r4, #16]
 800520c:	e7dd      	b.n	80051ca <__swsetup_r+0x1e>
 800520e:	0799      	lsls	r1, r3, #30
 8005210:	bf58      	it	pl
 8005212:	6962      	ldrpl	r2, [r4, #20]
 8005214:	60a2      	str	r2, [r4, #8]
 8005216:	2800      	cmp	r0, #0
 8005218:	d1e0      	bne.n	80051dc <__swsetup_r+0x30>
 800521a:	89a3      	ldrh	r3, [r4, #12]
 800521c:	061a      	lsls	r2, r3, #24
 800521e:	d5de      	bpl.n	80051de <__swsetup_r+0x32>
 8005220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005224:	81a3      	strh	r3, [r4, #12]
 8005226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800522a:	bd38      	pop	{r3, r4, r5, pc}
 800522c:	4618      	mov	r0, r3
 800522e:	f001 fa3b 	bl	80066a8 <__sinit>
 8005232:	e7c4      	b.n	80051be <__swsetup_r+0x12>
 8005234:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005236:	b149      	cbz	r1, 800524c <__swsetup_r+0xa0>
 8005238:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800523c:	4299      	cmp	r1, r3
 800523e:	d003      	beq.n	8005248 <__swsetup_r+0x9c>
 8005240:	4628      	mov	r0, r5
 8005242:	f001 fab7 	bl	80067b4 <_free_r>
 8005246:	89a2      	ldrh	r2, [r4, #12]
 8005248:	2300      	movs	r3, #0
 800524a:	6323      	str	r3, [r4, #48]	; 0x30
 800524c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8005250:	2300      	movs	r3, #0
 8005252:	6920      	ldr	r0, [r4, #16]
 8005254:	6063      	str	r3, [r4, #4]
 8005256:	b292      	uxth	r2, r2
 8005258:	6020      	str	r0, [r4, #0]
 800525a:	e7c6      	b.n	80051ea <__swsetup_r+0x3e>
 800525c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005260:	2309      	movs	r3, #9
 8005262:	602b      	str	r3, [r5, #0]
 8005264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005268:	81a2      	strh	r2, [r4, #12]
 800526a:	bd38      	pop	{r3, r4, r5, pc}
 800526c:	200004a8 	.word	0x200004a8

08005270 <register_fini>:
 8005270:	4b02      	ldr	r3, [pc, #8]	; (800527c <register_fini+0xc>)
 8005272:	b113      	cbz	r3, 800527a <register_fini+0xa>
 8005274:	4802      	ldr	r0, [pc, #8]	; (8005280 <register_fini+0x10>)
 8005276:	f000 b86f 	b.w	8005358 <atexit>
 800527a:	4770      	bx	lr
 800527c:	00000000 	.word	0x00000000
 8005280:	080066ed 	.word	0x080066ed

08005284 <__call_exitprocs>:
 8005284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005288:	4b31      	ldr	r3, [pc, #196]	; (8005350 <__call_exitprocs+0xcc>)
 800528a:	b083      	sub	sp, #12
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8005294:	4681      	mov	r9, r0
 8005296:	460e      	mov	r6, r1
 8005298:	9301      	str	r3, [sp, #4]
 800529a:	9b00      	ldr	r3, [sp, #0]
 800529c:	f8d3 7148 	ldr.w	r7, [r3, #328]	; 0x148
 80052a0:	b327      	cbz	r7, 80052ec <__call_exitprocs+0x68>
 80052a2:	f8dd a004 	ldr.w	sl, [sp, #4]
 80052a6:	687c      	ldr	r4, [r7, #4]
 80052a8:	1e65      	subs	r5, r4, #1
 80052aa:	d40e      	bmi.n	80052ca <__call_exitprocs+0x46>
 80052ac:	3401      	adds	r4, #1
 80052ae:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80052b2:	f04f 0800 	mov.w	r8, #0
 80052b6:	b1e6      	cbz	r6, 80052f2 <__call_exitprocs+0x6e>
 80052b8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80052bc:	42b3      	cmp	r3, r6
 80052be:	d018      	beq.n	80052f2 <__call_exitprocs+0x6e>
 80052c0:	3d01      	subs	r5, #1
 80052c2:	1c6b      	adds	r3, r5, #1
 80052c4:	f1a4 0404 	sub.w	r4, r4, #4
 80052c8:	d1f5      	bne.n	80052b6 <__call_exitprocs+0x32>
 80052ca:	4b22      	ldr	r3, [pc, #136]	; (8005354 <__call_exitprocs+0xd0>)
 80052cc:	b173      	cbz	r3, 80052ec <__call_exitprocs+0x68>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d136      	bne.n	8005342 <__call_exitprocs+0xbe>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d034      	beq.n	8005344 <__call_exitprocs+0xc0>
 80052da:	4638      	mov	r0, r7
 80052dc:	f8ca 3000 	str.w	r3, [sl]
 80052e0:	f3af 8000 	nop.w
 80052e4:	f8da 7000 	ldr.w	r7, [sl]
 80052e8:	2f00      	cmp	r7, #0
 80052ea:	d1dc      	bne.n	80052a6 <__call_exitprocs+0x22>
 80052ec:	b003      	add	sp, #12
 80052ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6822      	ldr	r2, [r4, #0]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	42ab      	cmp	r3, r5
 80052fa:	bf0c      	ite	eq
 80052fc:	607d      	streq	r5, [r7, #4]
 80052fe:	f8c4 8000 	strne.w	r8, [r4]
 8005302:	2a00      	cmp	r2, #0
 8005304:	d0dc      	beq.n	80052c0 <__call_exitprocs+0x3c>
 8005306:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800530a:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800530e:	2101      	movs	r1, #1
 8005310:	40a9      	lsls	r1, r5
 8005312:	4219      	tst	r1, r3
 8005314:	d108      	bne.n	8005328 <__call_exitprocs+0xa4>
 8005316:	4790      	blx	r2
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	455b      	cmp	r3, fp
 800531c:	d1bd      	bne.n	800529a <__call_exitprocs+0x16>
 800531e:	f8da 3000 	ldr.w	r3, [sl]
 8005322:	42bb      	cmp	r3, r7
 8005324:	d0cc      	beq.n	80052c0 <__call_exitprocs+0x3c>
 8005326:	e7b8      	b.n	800529a <__call_exitprocs+0x16>
 8005328:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800532c:	4219      	tst	r1, r3
 800532e:	d104      	bne.n	800533a <__call_exitprocs+0xb6>
 8005330:	4648      	mov	r0, r9
 8005332:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8005336:	4790      	blx	r2
 8005338:	e7ee      	b.n	8005318 <__call_exitprocs+0x94>
 800533a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800533e:	4790      	blx	r2
 8005340:	e7ea      	b.n	8005318 <__call_exitprocs+0x94>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	46ba      	mov	sl, r7
 8005346:	461f      	mov	r7, r3
 8005348:	2f00      	cmp	r7, #0
 800534a:	d1ac      	bne.n	80052a6 <__call_exitprocs+0x22>
 800534c:	e7ce      	b.n	80052ec <__call_exitprocs+0x68>
 800534e:	bf00      	nop
 8005350:	0800aad0 	.word	0x0800aad0
 8005354:	00000000 	.word	0x00000000

08005358 <atexit>:
 8005358:	4601      	mov	r1, r0
 800535a:	2000      	movs	r0, #0
 800535c:	4602      	mov	r2, r0
 800535e:	4603      	mov	r3, r0
 8005360:	f003 bfd8 	b.w	8009314 <__register_exitproc>

08005364 <quorem>:
 8005364:	6902      	ldr	r2, [r0, #16]
 8005366:	690b      	ldr	r3, [r1, #16]
 8005368:	4293      	cmp	r3, r2
 800536a:	f300 808f 	bgt.w	800548c <quorem+0x128>
 800536e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005372:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8005376:	f101 0714 	add.w	r7, r1, #20
 800537a:	f100 0b14 	add.w	fp, r0, #20
 800537e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8005382:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8005386:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800538a:	b083      	sub	sp, #12
 800538c:	3201      	adds	r2, #1
 800538e:	fbb3 f9f2 	udiv	r9, r3, r2
 8005392:	eb0b 0304 	add.w	r3, fp, r4
 8005396:	9400      	str	r4, [sp, #0]
 8005398:	eb07 0a04 	add.w	sl, r7, r4
 800539c:	9301      	str	r3, [sp, #4]
 800539e:	f1b9 0f00 	cmp.w	r9, #0
 80053a2:	d03b      	beq.n	800541c <quorem+0xb8>
 80053a4:	2600      	movs	r6, #0
 80053a6:	4632      	mov	r2, r6
 80053a8:	46bc      	mov	ip, r7
 80053aa:	46de      	mov	lr, fp
 80053ac:	4634      	mov	r4, r6
 80053ae:	f85c 6b04 	ldr.w	r6, [ip], #4
 80053b2:	f8de 5000 	ldr.w	r5, [lr]
 80053b6:	b2b3      	uxth	r3, r6
 80053b8:	0c36      	lsrs	r6, r6, #16
 80053ba:	fb03 4409 	mla	r4, r3, r9, r4
 80053be:	fb06 f609 	mul.w	r6, r6, r9
 80053c2:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 80053c6:	b2a3      	uxth	r3, r4
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	b2b4      	uxth	r4, r6
 80053cc:	fa13 f385 	uxtah	r3, r3, r5
 80053d0:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 80053d4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80053d8:	b29b      	uxth	r3, r3
 80053da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80053de:	45e2      	cmp	sl, ip
 80053e0:	ea4f 4224 	mov.w	r2, r4, asr #16
 80053e4:	f84e 3b04 	str.w	r3, [lr], #4
 80053e8:	ea4f 4416 	mov.w	r4, r6, lsr #16
 80053ec:	d2df      	bcs.n	80053ae <quorem+0x4a>
 80053ee:	9b00      	ldr	r3, [sp, #0]
 80053f0:	f85b 3003 	ldr.w	r3, [fp, r3]
 80053f4:	b993      	cbnz	r3, 800541c <quorem+0xb8>
 80053f6:	9c01      	ldr	r4, [sp, #4]
 80053f8:	1f23      	subs	r3, r4, #4
 80053fa:	459b      	cmp	fp, r3
 80053fc:	d20c      	bcs.n	8005418 <quorem+0xb4>
 80053fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005402:	b94b      	cbnz	r3, 8005418 <quorem+0xb4>
 8005404:	f1a4 0308 	sub.w	r3, r4, #8
 8005408:	e002      	b.n	8005410 <quorem+0xac>
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	3b04      	subs	r3, #4
 800540e:	b91a      	cbnz	r2, 8005418 <quorem+0xb4>
 8005410:	459b      	cmp	fp, r3
 8005412:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005416:	d3f8      	bcc.n	800540a <quorem+0xa6>
 8005418:	f8c0 8010 	str.w	r8, [r0, #16]
 800541c:	4604      	mov	r4, r0
 800541e:	f002 fac9 	bl	80079b4 <__mcmp>
 8005422:	2800      	cmp	r0, #0
 8005424:	db2e      	blt.n	8005484 <quorem+0x120>
 8005426:	f109 0901 	add.w	r9, r9, #1
 800542a:	465d      	mov	r5, fp
 800542c:	2300      	movs	r3, #0
 800542e:	f857 1b04 	ldr.w	r1, [r7], #4
 8005432:	6828      	ldr	r0, [r5, #0]
 8005434:	b28a      	uxth	r2, r1
 8005436:	1a9a      	subs	r2, r3, r2
 8005438:	0c09      	lsrs	r1, r1, #16
 800543a:	fa12 f280 	uxtah	r2, r2, r0
 800543e:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 8005442:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8005446:	b291      	uxth	r1, r2
 8005448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800544c:	45ba      	cmp	sl, r7
 800544e:	f845 1b04 	str.w	r1, [r5], #4
 8005452:	ea4f 4323 	mov.w	r3, r3, asr #16
 8005456:	d2ea      	bcs.n	800542e <quorem+0xca>
 8005458:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 800545c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8005460:	b982      	cbnz	r2, 8005484 <quorem+0x120>
 8005462:	1f1a      	subs	r2, r3, #4
 8005464:	4593      	cmp	fp, r2
 8005466:	d20b      	bcs.n	8005480 <quorem+0x11c>
 8005468:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800546c:	b942      	cbnz	r2, 8005480 <quorem+0x11c>
 800546e:	3b08      	subs	r3, #8
 8005470:	e002      	b.n	8005478 <quorem+0x114>
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	3b04      	subs	r3, #4
 8005476:	b91a      	cbnz	r2, 8005480 <quorem+0x11c>
 8005478:	459b      	cmp	fp, r3
 800547a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800547e:	d3f8      	bcc.n	8005472 <quorem+0x10e>
 8005480:	f8c4 8010 	str.w	r8, [r4, #16]
 8005484:	4648      	mov	r0, r9
 8005486:	b003      	add	sp, #12
 8005488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800548c:	2000      	movs	r0, #0
 800548e:	4770      	bx	lr

08005490 <_dtoa_r>:
 8005490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005494:	b099      	sub	sp, #100	; 0x64
 8005496:	4604      	mov	r4, r0
 8005498:	9103      	str	r1, [sp, #12]
 800549a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800549c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800549e:	9304      	str	r3, [sp, #16]
 80054a0:	4692      	mov	sl, r2
 80054a2:	ed8d 0b00 	vstr	d0, [sp]
 80054a6:	b141      	cbz	r1, 80054ba <_dtoa_r+0x2a>
 80054a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80054aa:	604a      	str	r2, [r1, #4]
 80054ac:	2301      	movs	r3, #1
 80054ae:	4093      	lsls	r3, r2
 80054b0:	608b      	str	r3, [r1, #8]
 80054b2:	f002 f84f 	bl	8007554 <_Bfree>
 80054b6:	2300      	movs	r3, #0
 80054b8:	6423      	str	r3, [r4, #64]	; 0x40
 80054ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	4699      	mov	r9, r3
 80054c2:	db36      	blt.n	8005532 <_dtoa_r+0xa2>
 80054c4:	2300      	movs	r3, #0
 80054c6:	602b      	str	r3, [r5, #0]
 80054c8:	4ba5      	ldr	r3, [pc, #660]	; (8005760 <_dtoa_r+0x2d0>)
 80054ca:	461a      	mov	r2, r3
 80054cc:	ea09 0303 	and.w	r3, r9, r3
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d017      	beq.n	8005504 <_dtoa_r+0x74>
 80054d4:	e9dd 6700 	ldrd	r6, r7, [sp]
 80054d8:	2200      	movs	r2, #0
 80054da:	2300      	movs	r3, #0
 80054dc:	4630      	mov	r0, r6
 80054de:	4639      	mov	r1, r7
 80054e0:	f004 fe0c 	bl	800a0fc <__aeabi_dcmpeq>
 80054e4:	4680      	mov	r8, r0
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d02b      	beq.n	8005542 <_dtoa_r+0xb2>
 80054ea:	9a04      	ldr	r2, [sp, #16]
 80054ec:	2301      	movs	r3, #1
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 80cc 	beq.w	8005690 <_dtoa_r+0x200>
 80054f8:	489a      	ldr	r0, [pc, #616]	; (8005764 <_dtoa_r+0x2d4>)
 80054fa:	6018      	str	r0, [r3, #0]
 80054fc:	3801      	subs	r0, #1
 80054fe:	b019      	add	sp, #100	; 0x64
 8005500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005504:	9a04      	ldr	r2, [sp, #16]
 8005506:	f242 730f 	movw	r3, #9999	; 0x270f
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	9b00      	ldr	r3, [sp, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 80a7 	beq.w	8005662 <_dtoa_r+0x1d2>
 8005514:	4894      	ldr	r0, [pc, #592]	; (8005768 <_dtoa_r+0x2d8>)
 8005516:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f0      	beq.n	80054fe <_dtoa_r+0x6e>
 800551c:	78c3      	ldrb	r3, [r0, #3]
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 80b8 	beq.w	8005694 <_dtoa_r+0x204>
 8005524:	f100 0308 	add.w	r3, r0, #8
 8005528:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800552a:	6013      	str	r3, [r2, #0]
 800552c:	b019      	add	sp, #100	; 0x64
 800552e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005532:	9a01      	ldr	r2, [sp, #4]
 8005534:	2301      	movs	r3, #1
 8005536:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 800553a:	602b      	str	r3, [r5, #0]
 800553c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005540:	e7c2      	b.n	80054c8 <_dtoa_r+0x38>
 8005542:	4620      	mov	r0, r4
 8005544:	ec47 6b10 	vmov	d0, r6, r7
 8005548:	a917      	add	r1, sp, #92	; 0x5c
 800554a:	aa16      	add	r2, sp, #88	; 0x58
 800554c:	f002 fb4a 	bl	8007be4 <__d2b>
 8005550:	ea5f 5519 	movs.w	r5, r9, lsr #20
 8005554:	4683      	mov	fp, r0
 8005556:	f040 808d 	bne.w	8005674 <_dtoa_r+0x1e4>
 800555a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800555e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8005560:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8005564:	4445      	add	r5, r8
 8005566:	429d      	cmp	r5, r3
 8005568:	f2c0 829e 	blt.w	8005aa8 <_dtoa_r+0x618>
 800556c:	4a7f      	ldr	r2, [pc, #508]	; (800576c <_dtoa_r+0x2dc>)
 800556e:	1b52      	subs	r2, r2, r5
 8005570:	fa09 f902 	lsl.w	r9, r9, r2
 8005574:	9a00      	ldr	r2, [sp, #0]
 8005576:	f205 4312 	addw	r3, r5, #1042	; 0x412
 800557a:	fa22 f003 	lsr.w	r0, r2, r3
 800557e:	ea49 0000 	orr.w	r0, r9, r0
 8005582:	f004 fadd 	bl	8009b40 <__aeabi_ui2d>
 8005586:	2301      	movs	r3, #1
 8005588:	3d01      	subs	r5, #1
 800558a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800558e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005590:	2200      	movs	r2, #0
 8005592:	4b77      	ldr	r3, [pc, #476]	; (8005770 <_dtoa_r+0x2e0>)
 8005594:	f004 f996 	bl	80098c4 <__aeabi_dsub>
 8005598:	a36b      	add	r3, pc, #428	; (adr r3, 8005748 <_dtoa_r+0x2b8>)
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f004 fb45 	bl	8009c2c <__aeabi_dmul>
 80055a2:	a36b      	add	r3, pc, #428	; (adr r3, 8005750 <_dtoa_r+0x2c0>)
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	f004 f98e 	bl	80098c8 <__adddf3>
 80055ac:	4606      	mov	r6, r0
 80055ae:	4628      	mov	r0, r5
 80055b0:	460f      	mov	r7, r1
 80055b2:	f004 fad5 	bl	8009b60 <__aeabi_i2d>
 80055b6:	a368      	add	r3, pc, #416	; (adr r3, 8005758 <_dtoa_r+0x2c8>)
 80055b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055bc:	f004 fb36 	bl	8009c2c <__aeabi_dmul>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4630      	mov	r0, r6
 80055c6:	4639      	mov	r1, r7
 80055c8:	f004 f97e 	bl	80098c8 <__adddf3>
 80055cc:	4606      	mov	r6, r0
 80055ce:	460f      	mov	r7, r1
 80055d0:	f004 fdc6 	bl	800a160 <__aeabi_d2iz>
 80055d4:	4639      	mov	r1, r7
 80055d6:	9005      	str	r0, [sp, #20]
 80055d8:	2200      	movs	r2, #0
 80055da:	4630      	mov	r0, r6
 80055dc:	2300      	movs	r3, #0
 80055de:	f004 fd97 	bl	800a110 <__aeabi_dcmplt>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	f040 81ab 	bne.w	800593e <_dtoa_r+0x4ae>
 80055e8:	9b05      	ldr	r3, [sp, #20]
 80055ea:	2b16      	cmp	r3, #22
 80055ec:	f200 81a4 	bhi.w	8005938 <_dtoa_r+0x4a8>
 80055f0:	9a05      	ldr	r2, [sp, #20]
 80055f2:	4b60      	ldr	r3, [pc, #384]	; (8005774 <_dtoa_r+0x2e4>)
 80055f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005600:	f004 fda4 	bl	800a14c <__aeabi_dcmpgt>
 8005604:	2800      	cmp	r0, #0
 8005606:	f000 8255 	beq.w	8005ab4 <_dtoa_r+0x624>
 800560a:	9b05      	ldr	r3, [sp, #20]
 800560c:	3b01      	subs	r3, #1
 800560e:	9305      	str	r3, [sp, #20]
 8005610:	2300      	movs	r3, #0
 8005612:	930d      	str	r3, [sp, #52]	; 0x34
 8005614:	ebc5 0508 	rsb	r5, r5, r8
 8005618:	1e6b      	subs	r3, r5, #1
 800561a:	9306      	str	r3, [sp, #24]
 800561c:	f100 81a6 	bmi.w	800596c <_dtoa_r+0x4dc>
 8005620:	2300      	movs	r3, #0
 8005622:	9307      	str	r3, [sp, #28]
 8005624:	9b05      	ldr	r3, [sp, #20]
 8005626:	2b00      	cmp	r3, #0
 8005628:	f2c0 8197 	blt.w	800595a <_dtoa_r+0x4ca>
 800562c:	9a06      	ldr	r2, [sp, #24]
 800562e:	930c      	str	r3, [sp, #48]	; 0x30
 8005630:	4611      	mov	r1, r2
 8005632:	4419      	add	r1, r3
 8005634:	2300      	movs	r3, #0
 8005636:	9106      	str	r1, [sp, #24]
 8005638:	930a      	str	r3, [sp, #40]	; 0x28
 800563a:	9b03      	ldr	r3, [sp, #12]
 800563c:	2b09      	cmp	r3, #9
 800563e:	d82b      	bhi.n	8005698 <_dtoa_r+0x208>
 8005640:	2b05      	cmp	r3, #5
 8005642:	f340 8673 	ble.w	800632c <_dtoa_r+0xe9c>
 8005646:	3b04      	subs	r3, #4
 8005648:	9303      	str	r3, [sp, #12]
 800564a:	2700      	movs	r7, #0
 800564c:	9b03      	ldr	r3, [sp, #12]
 800564e:	3b02      	subs	r3, #2
 8005650:	2b03      	cmp	r3, #3
 8005652:	f200 8651 	bhi.w	80062f8 <_dtoa_r+0xe68>
 8005656:	e8df f013 	tbh	[pc, r3, lsl #1]
 800565a:	03d1      	.short	0x03d1
 800565c:	02b603c4 	.word	0x02b603c4
 8005660:	0666      	.short	0x0666
 8005662:	4b41      	ldr	r3, [pc, #260]	; (8005768 <_dtoa_r+0x2d8>)
 8005664:	4a44      	ldr	r2, [pc, #272]	; (8005778 <_dtoa_r+0x2e8>)
 8005666:	f3c9 0013 	ubfx	r0, r9, #0, #20
 800566a:	2800      	cmp	r0, #0
 800566c:	bf14      	ite	ne
 800566e:	4618      	movne	r0, r3
 8005670:	4610      	moveq	r0, r2
 8005672:	e750      	b.n	8005516 <_dtoa_r+0x86>
 8005674:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005678:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800567c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8005680:	4630      	mov	r0, r6
 8005682:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005686:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800568a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800568e:	e77f      	b.n	8005590 <_dtoa_r+0x100>
 8005690:	483a      	ldr	r0, [pc, #232]	; (800577c <_dtoa_r+0x2ec>)
 8005692:	e734      	b.n	80054fe <_dtoa_r+0x6e>
 8005694:	1cc3      	adds	r3, r0, #3
 8005696:	e747      	b.n	8005528 <_dtoa_r+0x98>
 8005698:	2100      	movs	r1, #0
 800569a:	6461      	str	r1, [r4, #68]	; 0x44
 800569c:	4620      	mov	r0, r4
 800569e:	468a      	mov	sl, r1
 80056a0:	9103      	str	r1, [sp, #12]
 80056a2:	f001 ff31 	bl	8007508 <_Balloc>
 80056a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056aa:	9308      	str	r3, [sp, #32]
 80056ac:	930e      	str	r3, [sp, #56]	; 0x38
 80056ae:	2301      	movs	r3, #1
 80056b0:	9009      	str	r0, [sp, #36]	; 0x24
 80056b2:	6420      	str	r0, [r4, #64]	; 0x40
 80056b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80056b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f2c0 80d3 	blt.w	8005864 <_dtoa_r+0x3d4>
 80056be:	9a05      	ldr	r2, [sp, #20]
 80056c0:	2a0e      	cmp	r2, #14
 80056c2:	f300 80cf 	bgt.w	8005864 <_dtoa_r+0x3d4>
 80056c6:	4b2b      	ldr	r3, [pc, #172]	; (8005774 <_dtoa_r+0x2e4>)
 80056c8:	f1ba 0f00 	cmp.w	sl, #0
 80056cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80056d4:	f2c0 8395 	blt.w	8005e02 <_dtoa_r+0x972>
 80056d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80056dc:	4642      	mov	r2, r8
 80056de:	464b      	mov	r3, r9
 80056e0:	4630      	mov	r0, r6
 80056e2:	4639      	mov	r1, r7
 80056e4:	f004 fbcc 	bl	8009e80 <__aeabi_ddiv>
 80056e8:	f004 fd3a 	bl	800a160 <__aeabi_d2iz>
 80056ec:	4682      	mov	sl, r0
 80056ee:	f004 fa37 	bl	8009b60 <__aeabi_i2d>
 80056f2:	4642      	mov	r2, r8
 80056f4:	464b      	mov	r3, r9
 80056f6:	f004 fa99 	bl	8009c2c <__aeabi_dmul>
 80056fa:	460b      	mov	r3, r1
 80056fc:	4602      	mov	r2, r0
 80056fe:	4639      	mov	r1, r7
 8005700:	4630      	mov	r0, r6
 8005702:	f004 f8df 	bl	80098c4 <__aeabi_dsub>
 8005706:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005708:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 800570c:	702b      	strb	r3, [r5, #0]
 800570e:	9b08      	ldr	r3, [sp, #32]
 8005710:	2b01      	cmp	r3, #1
 8005712:	4606      	mov	r6, r0
 8005714:	460f      	mov	r7, r1
 8005716:	f105 0501 	add.w	r5, r5, #1
 800571a:	d063      	beq.n	80057e4 <_dtoa_r+0x354>
 800571c:	2200      	movs	r2, #0
 800571e:	4b18      	ldr	r3, [pc, #96]	; (8005780 <_dtoa_r+0x2f0>)
 8005720:	f004 fa84 	bl	8009c2c <__aeabi_dmul>
 8005724:	2200      	movs	r2, #0
 8005726:	2300      	movs	r3, #0
 8005728:	4606      	mov	r6, r0
 800572a:	460f      	mov	r7, r1
 800572c:	f004 fce6 	bl	800a0fc <__aeabi_dcmpeq>
 8005730:	2800      	cmp	r0, #0
 8005732:	f040 8084 	bne.w	800583e <_dtoa_r+0x3ae>
 8005736:	f8cd b000 	str.w	fp, [sp]
 800573a:	9403      	str	r4, [sp, #12]
 800573c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8005740:	9c08      	ldr	r4, [sp, #32]
 8005742:	e02a      	b.n	800579a <_dtoa_r+0x30a>
 8005744:	f3af 8000 	nop.w
 8005748:	636f4361 	.word	0x636f4361
 800574c:	3fd287a7 	.word	0x3fd287a7
 8005750:	8b60c8b3 	.word	0x8b60c8b3
 8005754:	3fc68a28 	.word	0x3fc68a28
 8005758:	509f79fb 	.word	0x509f79fb
 800575c:	3fd34413 	.word	0x3fd34413
 8005760:	7ff00000 	.word	0x7ff00000
 8005764:	0800ab25 	.word	0x0800ab25
 8005768:	0800ab44 	.word	0x0800ab44
 800576c:	fffffc0e 	.word	0xfffffc0e
 8005770:	3ff80000 	.word	0x3ff80000
 8005774:	0800ab58 	.word	0x0800ab58
 8005778:	0800ab38 	.word	0x0800ab38
 800577c:	0800ab24 	.word	0x0800ab24
 8005780:	40240000 	.word	0x40240000
 8005784:	f004 fa52 	bl	8009c2c <__aeabi_dmul>
 8005788:	2200      	movs	r2, #0
 800578a:	2300      	movs	r3, #0
 800578c:	4606      	mov	r6, r0
 800578e:	460f      	mov	r7, r1
 8005790:	f004 fcb4 	bl	800a0fc <__aeabi_dcmpeq>
 8005794:	2800      	cmp	r0, #0
 8005796:	f040 83e4 	bne.w	8005f62 <_dtoa_r+0xad2>
 800579a:	4642      	mov	r2, r8
 800579c:	464b      	mov	r3, r9
 800579e:	4630      	mov	r0, r6
 80057a0:	4639      	mov	r1, r7
 80057a2:	f004 fb6d 	bl	8009e80 <__aeabi_ddiv>
 80057a6:	f004 fcdb 	bl	800a160 <__aeabi_d2iz>
 80057aa:	4682      	mov	sl, r0
 80057ac:	f004 f9d8 	bl	8009b60 <__aeabi_i2d>
 80057b0:	4642      	mov	r2, r8
 80057b2:	464b      	mov	r3, r9
 80057b4:	f004 fa3a 	bl	8009c2c <__aeabi_dmul>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4630      	mov	r0, r6
 80057be:	4639      	mov	r1, r7
 80057c0:	f004 f880 	bl	80098c4 <__aeabi_dsub>
 80057c4:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 80057c8:	f805 eb01 	strb.w	lr, [r5], #1
 80057cc:	ebcb 0e05 	rsb	lr, fp, r5
 80057d0:	4574      	cmp	r4, lr
 80057d2:	4606      	mov	r6, r0
 80057d4:	460f      	mov	r7, r1
 80057d6:	f04f 0200 	mov.w	r2, #0
 80057da:	4bb7      	ldr	r3, [pc, #732]	; (8005ab8 <_dtoa_r+0x628>)
 80057dc:	d1d2      	bne.n	8005784 <_dtoa_r+0x2f4>
 80057de:	f8dd b000 	ldr.w	fp, [sp]
 80057e2:	9c03      	ldr	r4, [sp, #12]
 80057e4:	4632      	mov	r2, r6
 80057e6:	463b      	mov	r3, r7
 80057e8:	4630      	mov	r0, r6
 80057ea:	4639      	mov	r1, r7
 80057ec:	f004 f86c 	bl	80098c8 <__adddf3>
 80057f0:	4606      	mov	r6, r0
 80057f2:	460f      	mov	r7, r1
 80057f4:	4640      	mov	r0, r8
 80057f6:	4649      	mov	r1, r9
 80057f8:	4632      	mov	r2, r6
 80057fa:	463b      	mov	r3, r7
 80057fc:	f004 fc88 	bl	800a110 <__aeabi_dcmplt>
 8005800:	b948      	cbnz	r0, 8005816 <_dtoa_r+0x386>
 8005802:	4640      	mov	r0, r8
 8005804:	4649      	mov	r1, r9
 8005806:	4632      	mov	r2, r6
 8005808:	463b      	mov	r3, r7
 800580a:	f004 fc77 	bl	800a0fc <__aeabi_dcmpeq>
 800580e:	b1b0      	cbz	r0, 800583e <_dtoa_r+0x3ae>
 8005810:	f01a 0f01 	tst.w	sl, #1
 8005814:	d013      	beq.n	800583e <_dtoa_r+0x3ae>
 8005816:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 800581a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800581c:	1e6b      	subs	r3, r5, #1
 800581e:	e004      	b.n	800582a <_dtoa_r+0x39a>
 8005820:	428b      	cmp	r3, r1
 8005822:	f000 8448 	beq.w	80060b6 <_dtoa_r+0xc26>
 8005826:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 800582a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800582e:	f103 0501 	add.w	r5, r3, #1
 8005832:	461a      	mov	r2, r3
 8005834:	d0f4      	beq.n	8005820 <_dtoa_r+0x390>
 8005836:	f108 0301 	add.w	r3, r8, #1
 800583a:	b2db      	uxtb	r3, r3
 800583c:	7013      	strb	r3, [r2, #0]
 800583e:	4620      	mov	r0, r4
 8005840:	4659      	mov	r1, fp
 8005842:	f001 fe87 	bl	8007554 <_Bfree>
 8005846:	2200      	movs	r2, #0
 8005848:	9b05      	ldr	r3, [sp, #20]
 800584a:	702a      	strb	r2, [r5, #0]
 800584c:	9a04      	ldr	r2, [sp, #16]
 800584e:	3301      	adds	r3, #1
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 834b 	beq.w	8005ef0 <_dtoa_r+0xa60>
 800585a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800585c:	601d      	str	r5, [r3, #0]
 800585e:	b019      	add	sp, #100	; 0x64
 8005860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005864:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005866:	2a00      	cmp	r2, #0
 8005868:	f000 8085 	beq.w	8005976 <_dtoa_r+0x4e6>
 800586c:	9a03      	ldr	r2, [sp, #12]
 800586e:	2a01      	cmp	r2, #1
 8005870:	f340 830a 	ble.w	8005e88 <_dtoa_r+0x9f8>
 8005874:	9b08      	ldr	r3, [sp, #32]
 8005876:	1e5f      	subs	r7, r3, #1
 8005878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800587a:	42bb      	cmp	r3, r7
 800587c:	f2c0 83a6 	blt.w	8005fcc <_dtoa_r+0xb3c>
 8005880:	1bdf      	subs	r7, r3, r7
 8005882:	9b08      	ldr	r3, [sp, #32]
 8005884:	2b00      	cmp	r3, #0
 8005886:	f2c0 84a4 	blt.w	80061d2 <_dtoa_r+0xd42>
 800588a:	9d07      	ldr	r5, [sp, #28]
 800588c:	9b08      	ldr	r3, [sp, #32]
 800588e:	9a07      	ldr	r2, [sp, #28]
 8005890:	441a      	add	r2, r3
 8005892:	9207      	str	r2, [sp, #28]
 8005894:	9a06      	ldr	r2, [sp, #24]
 8005896:	4620      	mov	r0, r4
 8005898:	441a      	add	r2, r3
 800589a:	2101      	movs	r1, #1
 800589c:	9206      	str	r2, [sp, #24]
 800589e:	f001 ff3f 	bl	8007720 <__i2b>
 80058a2:	4606      	mov	r6, r0
 80058a4:	b165      	cbz	r5, 80058c0 <_dtoa_r+0x430>
 80058a6:	9906      	ldr	r1, [sp, #24]
 80058a8:	2900      	cmp	r1, #0
 80058aa:	460b      	mov	r3, r1
 80058ac:	dd08      	ble.n	80058c0 <_dtoa_r+0x430>
 80058ae:	42a9      	cmp	r1, r5
 80058b0:	9a07      	ldr	r2, [sp, #28]
 80058b2:	bfa8      	it	ge
 80058b4:	462b      	movge	r3, r5
 80058b6:	1ad2      	subs	r2, r2, r3
 80058b8:	1aed      	subs	r5, r5, r3
 80058ba:	1acb      	subs	r3, r1, r3
 80058bc:	9207      	str	r2, [sp, #28]
 80058be:	9306      	str	r3, [sp, #24]
 80058c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	dd1a      	ble.n	80058fc <_dtoa_r+0x46c>
 80058c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 8378 	beq.w	8005fbe <_dtoa_r+0xb2e>
 80058ce:	2f00      	cmp	r7, #0
 80058d0:	dd10      	ble.n	80058f4 <_dtoa_r+0x464>
 80058d2:	4631      	mov	r1, r6
 80058d4:	463a      	mov	r2, r7
 80058d6:	4620      	mov	r0, r4
 80058d8:	f001 ffc6 	bl	8007868 <__pow5mult>
 80058dc:	4606      	mov	r6, r0
 80058de:	465a      	mov	r2, fp
 80058e0:	4631      	mov	r1, r6
 80058e2:	4620      	mov	r0, r4
 80058e4:	f001 ff26 	bl	8007734 <__multiply>
 80058e8:	4659      	mov	r1, fp
 80058ea:	4680      	mov	r8, r0
 80058ec:	4620      	mov	r0, r4
 80058ee:	f001 fe31 	bl	8007554 <_Bfree>
 80058f2:	46c3      	mov	fp, r8
 80058f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058f6:	1bda      	subs	r2, r3, r7
 80058f8:	f040 82a5 	bne.w	8005e46 <_dtoa_r+0x9b6>
 80058fc:	4620      	mov	r0, r4
 80058fe:	2101      	movs	r1, #1
 8005900:	f001 ff0e 	bl	8007720 <__i2b>
 8005904:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005906:	2b00      	cmp	r3, #0
 8005908:	4680      	mov	r8, r0
 800590a:	dd38      	ble.n	800597e <_dtoa_r+0x4ee>
 800590c:	4601      	mov	r1, r0
 800590e:	461a      	mov	r2, r3
 8005910:	4620      	mov	r0, r4
 8005912:	f001 ffa9 	bl	8007868 <__pow5mult>
 8005916:	9b03      	ldr	r3, [sp, #12]
 8005918:	2b01      	cmp	r3, #1
 800591a:	4680      	mov	r8, r0
 800591c:	f340 8299 	ble.w	8005e52 <_dtoa_r+0x9c2>
 8005920:	f04f 0900 	mov.w	r9, #0
 8005924:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005928:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800592c:	6918      	ldr	r0, [r3, #16]
 800592e:	f001 fea9 	bl	8007684 <__hi0bits>
 8005932:	f1c0 0020 	rsb	r0, r0, #32
 8005936:	e02c      	b.n	8005992 <_dtoa_r+0x502>
 8005938:	2301      	movs	r3, #1
 800593a:	930d      	str	r3, [sp, #52]	; 0x34
 800593c:	e66a      	b.n	8005614 <_dtoa_r+0x184>
 800593e:	9805      	ldr	r0, [sp, #20]
 8005940:	f004 f90e 	bl	8009b60 <__aeabi_i2d>
 8005944:	4632      	mov	r2, r6
 8005946:	463b      	mov	r3, r7
 8005948:	f004 fbd8 	bl	800a0fc <__aeabi_dcmpeq>
 800594c:	2800      	cmp	r0, #0
 800594e:	f47f ae4b 	bne.w	80055e8 <_dtoa_r+0x158>
 8005952:	9b05      	ldr	r3, [sp, #20]
 8005954:	3b01      	subs	r3, #1
 8005956:	9305      	str	r3, [sp, #20]
 8005958:	e646      	b.n	80055e8 <_dtoa_r+0x158>
 800595a:	9a07      	ldr	r2, [sp, #28]
 800595c:	9b05      	ldr	r3, [sp, #20]
 800595e:	1ad2      	subs	r2, r2, r3
 8005960:	425b      	negs	r3, r3
 8005962:	930a      	str	r3, [sp, #40]	; 0x28
 8005964:	2300      	movs	r3, #0
 8005966:	9207      	str	r2, [sp, #28]
 8005968:	930c      	str	r3, [sp, #48]	; 0x30
 800596a:	e666      	b.n	800563a <_dtoa_r+0x1aa>
 800596c:	425b      	negs	r3, r3
 800596e:	9307      	str	r3, [sp, #28]
 8005970:	2300      	movs	r3, #0
 8005972:	9306      	str	r3, [sp, #24]
 8005974:	e656      	b.n	8005624 <_dtoa_r+0x194>
 8005976:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005978:	9d07      	ldr	r5, [sp, #28]
 800597a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800597c:	e792      	b.n	80058a4 <_dtoa_r+0x414>
 800597e:	9b03      	ldr	r3, [sp, #12]
 8005980:	2b01      	cmp	r3, #1
 8005982:	f340 82b8 	ble.w	8005ef6 <_dtoa_r+0xa66>
 8005986:	f04f 0900 	mov.w	r9, #0
 800598a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1c9      	bne.n	8005924 <_dtoa_r+0x494>
 8005990:	2001      	movs	r0, #1
 8005992:	9b06      	ldr	r3, [sp, #24]
 8005994:	4418      	add	r0, r3
 8005996:	f010 001f 	ands.w	r0, r0, #31
 800599a:	f000 8083 	beq.w	8005aa4 <_dtoa_r+0x614>
 800599e:	f1c0 0320 	rsb	r3, r0, #32
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	f340 84b9 	ble.w	800631a <_dtoa_r+0xe8a>
 80059a8:	f1c0 001c 	rsb	r0, r0, #28
 80059ac:	9b07      	ldr	r3, [sp, #28]
 80059ae:	4403      	add	r3, r0
 80059b0:	9307      	str	r3, [sp, #28]
 80059b2:	9b06      	ldr	r3, [sp, #24]
 80059b4:	4403      	add	r3, r0
 80059b6:	4405      	add	r5, r0
 80059b8:	9306      	str	r3, [sp, #24]
 80059ba:	9b07      	ldr	r3, [sp, #28]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	dd05      	ble.n	80059cc <_dtoa_r+0x53c>
 80059c0:	4659      	mov	r1, fp
 80059c2:	461a      	mov	r2, r3
 80059c4:	4620      	mov	r0, r4
 80059c6:	f001 ff9f 	bl	8007908 <__lshift>
 80059ca:	4683      	mov	fp, r0
 80059cc:	9b06      	ldr	r3, [sp, #24]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	dd05      	ble.n	80059de <_dtoa_r+0x54e>
 80059d2:	4641      	mov	r1, r8
 80059d4:	461a      	mov	r2, r3
 80059d6:	4620      	mov	r0, r4
 80059d8:	f001 ff96 	bl	8007908 <__lshift>
 80059dc:	4680      	mov	r8, r0
 80059de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f040 826a 	bne.w	8005eba <_dtoa_r+0xa2a>
 80059e6:	9b08      	ldr	r3, [sp, #32]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f340 8297 	ble.w	8005f1c <_dtoa_r+0xa8c>
 80059ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d171      	bne.n	8005ad8 <_dtoa_r+0x648>
 80059f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80059f8:	9f08      	ldr	r7, [sp, #32]
 80059fa:	464d      	mov	r5, r9
 80059fc:	e002      	b.n	8005a04 <_dtoa_r+0x574>
 80059fe:	f001 fdb3 	bl	8007568 <__multadd>
 8005a02:	4683      	mov	fp, r0
 8005a04:	4641      	mov	r1, r8
 8005a06:	4658      	mov	r0, fp
 8005a08:	f7ff fcac 	bl	8005364 <quorem>
 8005a0c:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8005a10:	f805 cb01 	strb.w	ip, [r5], #1
 8005a14:	ebc9 0305 	rsb	r3, r9, r5
 8005a18:	42bb      	cmp	r3, r7
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	4659      	mov	r1, fp
 8005a1e:	f04f 020a 	mov.w	r2, #10
 8005a22:	f04f 0300 	mov.w	r3, #0
 8005a26:	dbea      	blt.n	80059fe <_dtoa_r+0x56e>
 8005a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a2a:	9a08      	ldr	r2, [sp, #32]
 8005a2c:	2a01      	cmp	r2, #1
 8005a2e:	bfac      	ite	ge
 8005a30:	189b      	addge	r3, r3, r2
 8005a32:	3301      	addlt	r3, #1
 8005a34:	461d      	mov	r5, r3
 8005a36:	f04f 0a00 	mov.w	sl, #0
 8005a3a:	4659      	mov	r1, fp
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f8cd c000 	str.w	ip, [sp]
 8005a44:	f001 ff60 	bl	8007908 <__lshift>
 8005a48:	4641      	mov	r1, r8
 8005a4a:	4683      	mov	fp, r0
 8005a4c:	f001 ffb2 	bl	80079b4 <__mcmp>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	f8dd c000 	ldr.w	ip, [sp]
 8005a56:	f340 82ef 	ble.w	8006038 <_dtoa_r+0xba8>
 8005a5a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a60:	1e6b      	subs	r3, r5, #1
 8005a62:	e004      	b.n	8005a6e <_dtoa_r+0x5de>
 8005a64:	428b      	cmp	r3, r1
 8005a66:	f000 8275 	beq.w	8005f54 <_dtoa_r+0xac4>
 8005a6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a6e:	2a39      	cmp	r2, #57	; 0x39
 8005a70:	f103 0501 	add.w	r5, r3, #1
 8005a74:	d0f6      	beq.n	8005a64 <_dtoa_r+0x5d4>
 8005a76:	3201      	adds	r2, #1
 8005a78:	701a      	strb	r2, [r3, #0]
 8005a7a:	4641      	mov	r1, r8
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f001 fd69 	bl	8007554 <_Bfree>
 8005a82:	2e00      	cmp	r6, #0
 8005a84:	f43f aedb 	beq.w	800583e <_dtoa_r+0x3ae>
 8005a88:	f1ba 0f00 	cmp.w	sl, #0
 8005a8c:	d005      	beq.n	8005a9a <_dtoa_r+0x60a>
 8005a8e:	45b2      	cmp	sl, r6
 8005a90:	d003      	beq.n	8005a9a <_dtoa_r+0x60a>
 8005a92:	4651      	mov	r1, sl
 8005a94:	4620      	mov	r0, r4
 8005a96:	f001 fd5d 	bl	8007554 <_Bfree>
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f001 fd59 	bl	8007554 <_Bfree>
 8005aa2:	e6cc      	b.n	800583e <_dtoa_r+0x3ae>
 8005aa4:	201c      	movs	r0, #28
 8005aa6:	e781      	b.n	80059ac <_dtoa_r+0x51c>
 8005aa8:	4b04      	ldr	r3, [pc, #16]	; (8005abc <_dtoa_r+0x62c>)
 8005aaa:	9a00      	ldr	r2, [sp, #0]
 8005aac:	1b5b      	subs	r3, r3, r5
 8005aae:	fa02 f003 	lsl.w	r0, r2, r3
 8005ab2:	e566      	b.n	8005582 <_dtoa_r+0xf2>
 8005ab4:	900d      	str	r0, [sp, #52]	; 0x34
 8005ab6:	e5ad      	b.n	8005614 <_dtoa_r+0x184>
 8005ab8:	40240000 	.word	0x40240000
 8005abc:	fffffbee 	.word	0xfffffbee
 8005ac0:	4631      	mov	r1, r6
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	220a      	movs	r2, #10
 8005ac8:	f001 fd4e 	bl	8007568 <__multadd>
 8005acc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	4606      	mov	r6, r0
 8005ad2:	f340 840b 	ble.w	80062ec <_dtoa_r+0xe5c>
 8005ad6:	9308      	str	r3, [sp, #32]
 8005ad8:	2d00      	cmp	r5, #0
 8005ada:	dd05      	ble.n	8005ae8 <_dtoa_r+0x658>
 8005adc:	4631      	mov	r1, r6
 8005ade:	462a      	mov	r2, r5
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f001 ff11 	bl	8007908 <__lshift>
 8005ae6:	4606      	mov	r6, r0
 8005ae8:	f1b9 0f00 	cmp.w	r9, #0
 8005aec:	f040 82ed 	bne.w	80060ca <_dtoa_r+0xc3a>
 8005af0:	46b1      	mov	r9, r6
 8005af2:	9b08      	ldr	r3, [sp, #32]
 8005af4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005af6:	3b01      	subs	r3, #1
 8005af8:	18d3      	adds	r3, r2, r3
 8005afa:	9308      	str	r3, [sp, #32]
 8005afc:	9b00      	ldr	r3, [sp, #0]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	930a      	str	r3, [sp, #40]	; 0x28
 8005b04:	4617      	mov	r7, r2
 8005b06:	4641      	mov	r1, r8
 8005b08:	4658      	mov	r0, fp
 8005b0a:	f7ff fc2b 	bl	8005364 <quorem>
 8005b0e:	4631      	mov	r1, r6
 8005b10:	4605      	mov	r5, r0
 8005b12:	4658      	mov	r0, fp
 8005b14:	f001 ff4e 	bl	80079b4 <__mcmp>
 8005b18:	464a      	mov	r2, r9
 8005b1a:	4682      	mov	sl, r0
 8005b1c:	4641      	mov	r1, r8
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f001 ff6c 	bl	80079fc <__mdiff>
 8005b24:	68c2      	ldr	r2, [r0, #12]
 8005b26:	4603      	mov	r3, r0
 8005b28:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8005b2c:	2a00      	cmp	r2, #0
 8005b2e:	f040 81ba 	bne.w	8005ea6 <_dtoa_r+0xa16>
 8005b32:	4619      	mov	r1, r3
 8005b34:	4658      	mov	r0, fp
 8005b36:	f8cd c01c 	str.w	ip, [sp, #28]
 8005b3a:	9306      	str	r3, [sp, #24]
 8005b3c:	f001 ff3a 	bl	80079b4 <__mcmp>
 8005b40:	9b06      	ldr	r3, [sp, #24]
 8005b42:	9000      	str	r0, [sp, #0]
 8005b44:	4619      	mov	r1, r3
 8005b46:	4620      	mov	r0, r4
 8005b48:	f001 fd04 	bl	8007554 <_Bfree>
 8005b4c:	9a00      	ldr	r2, [sp, #0]
 8005b4e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8005b52:	b92a      	cbnz	r2, 8005b60 <_dtoa_r+0x6d0>
 8005b54:	9b03      	ldr	r3, [sp, #12]
 8005b56:	b91b      	cbnz	r3, 8005b60 <_dtoa_r+0x6d0>
 8005b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 83aa 	beq.w	80062b4 <_dtoa_r+0xe24>
 8005b60:	f1ba 0f00 	cmp.w	sl, #0
 8005b64:	f2c0 824a 	blt.w	8005ffc <_dtoa_r+0xb6c>
 8005b68:	d105      	bne.n	8005b76 <_dtoa_r+0x6e6>
 8005b6a:	9b03      	ldr	r3, [sp, #12]
 8005b6c:	b91b      	cbnz	r3, 8005b76 <_dtoa_r+0x6e6>
 8005b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 8243 	beq.w	8005ffc <_dtoa_r+0xb6c>
 8005b76:	2a00      	cmp	r2, #0
 8005b78:	f300 82bb 	bgt.w	80060f2 <_dtoa_r+0xc62>
 8005b7c:	9b08      	ldr	r3, [sp, #32]
 8005b7e:	f887 c000 	strb.w	ip, [r7]
 8005b82:	f107 0a01 	add.w	sl, r7, #1
 8005b86:	429f      	cmp	r7, r3
 8005b88:	4655      	mov	r5, sl
 8005b8a:	f000 82be 	beq.w	800610a <_dtoa_r+0xc7a>
 8005b8e:	4659      	mov	r1, fp
 8005b90:	220a      	movs	r2, #10
 8005b92:	2300      	movs	r3, #0
 8005b94:	4620      	mov	r0, r4
 8005b96:	f001 fce7 	bl	8007568 <__multadd>
 8005b9a:	454e      	cmp	r6, r9
 8005b9c:	4683      	mov	fp, r0
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	f04f 020a 	mov.w	r2, #10
 8005ba6:	f04f 0300 	mov.w	r3, #0
 8005baa:	f000 8176 	beq.w	8005e9a <_dtoa_r+0xa0a>
 8005bae:	f001 fcdb 	bl	8007568 <__multadd>
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	4606      	mov	r6, r0
 8005bb6:	220a      	movs	r2, #10
 8005bb8:	4620      	mov	r0, r4
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f001 fcd4 	bl	8007568 <__multadd>
 8005bc0:	4657      	mov	r7, sl
 8005bc2:	4681      	mov	r9, r0
 8005bc4:	e79f      	b.n	8005b06 <_dtoa_r+0x676>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bca:	f1ba 0f00 	cmp.w	sl, #0
 8005bce:	f340 820c 	ble.w	8005fea <_dtoa_r+0xb5a>
 8005bd2:	4656      	mov	r6, sl
 8005bd4:	4655      	mov	r5, sl
 8005bd6:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005bda:	f8cd a020 	str.w	sl, [sp, #32]
 8005bde:	2100      	movs	r1, #0
 8005be0:	2e17      	cmp	r6, #23
 8005be2:	6461      	str	r1, [r4, #68]	; 0x44
 8005be4:	d90a      	bls.n	8005bfc <_dtoa_r+0x76c>
 8005be6:	2201      	movs	r2, #1
 8005be8:	2304      	movs	r3, #4
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	f103 0014 	add.w	r0, r3, #20
 8005bf0:	4286      	cmp	r6, r0
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	f102 0201 	add.w	r2, r2, #1
 8005bf8:	d2f7      	bcs.n	8005bea <_dtoa_r+0x75a>
 8005bfa:	6461      	str	r1, [r4, #68]	; 0x44
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	f001 fc83 	bl	8007508 <_Balloc>
 8005c02:	2d0e      	cmp	r5, #14
 8005c04:	9009      	str	r0, [sp, #36]	; 0x24
 8005c06:	6420      	str	r0, [r4, #64]	; 0x40
 8005c08:	f63f ad55 	bhi.w	80056b6 <_dtoa_r+0x226>
 8005c0c:	2f00      	cmp	r7, #0
 8005c0e:	f43f ad52 	beq.w	80056b6 <_dtoa_r+0x226>
 8005c12:	ed9d 7b00 	vldr	d7, [sp]
 8005c16:	9905      	ldr	r1, [sp, #20]
 8005c18:	2900      	cmp	r1, #0
 8005c1a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005c1e:	f340 8223 	ble.w	8006068 <_dtoa_r+0xbd8>
 8005c22:	4bb7      	ldr	r3, [pc, #732]	; (8005f00 <_dtoa_r+0xa70>)
 8005c24:	f001 020f 	and.w	r2, r1, #15
 8005c28:	110d      	asrs	r5, r1, #4
 8005c2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c2e:	06e9      	lsls	r1, r5, #27
 8005c30:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005c34:	f140 81d2 	bpl.w	8005fdc <_dtoa_r+0xb4c>
 8005c38:	4bb2      	ldr	r3, [pc, #712]	; (8005f04 <_dtoa_r+0xa74>)
 8005c3a:	ec51 0b17 	vmov	r0, r1, d7
 8005c3e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c42:	f004 f91d 	bl	8009e80 <__aeabi_ddiv>
 8005c46:	e9cd 0100 	strd	r0, r1, [sp]
 8005c4a:	f005 050f 	and.w	r5, r5, #15
 8005c4e:	f04f 0803 	mov.w	r8, #3
 8005c52:	b18d      	cbz	r5, 8005c78 <_dtoa_r+0x7e8>
 8005c54:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8005f04 <_dtoa_r+0xa74>
 8005c58:	4630      	mov	r0, r6
 8005c5a:	4639      	mov	r1, r7
 8005c5c:	07ea      	lsls	r2, r5, #31
 8005c5e:	d505      	bpl.n	8005c6c <_dtoa_r+0x7dc>
 8005c60:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005c64:	f003 ffe2 	bl	8009c2c <__aeabi_dmul>
 8005c68:	f108 0801 	add.w	r8, r8, #1
 8005c6c:	106d      	asrs	r5, r5, #1
 8005c6e:	f109 0908 	add.w	r9, r9, #8
 8005c72:	d1f3      	bne.n	8005c5c <_dtoa_r+0x7cc>
 8005c74:	4606      	mov	r6, r0
 8005c76:	460f      	mov	r7, r1
 8005c78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c7c:	4632      	mov	r2, r6
 8005c7e:	463b      	mov	r3, r7
 8005c80:	f004 f8fe 	bl	8009e80 <__aeabi_ddiv>
 8005c84:	e9cd 0100 	strd	r0, r1, [sp]
 8005c88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c8a:	b143      	cbz	r3, 8005c9e <_dtoa_r+0x80e>
 8005c8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c90:	2200      	movs	r2, #0
 8005c92:	4b9d      	ldr	r3, [pc, #628]	; (8005f08 <_dtoa_r+0xa78>)
 8005c94:	f004 fa3c 	bl	800a110 <__aeabi_dcmplt>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	f040 82ae 	bne.w	80061fa <_dtoa_r+0xd6a>
 8005c9e:	4640      	mov	r0, r8
 8005ca0:	f003 ff5e 	bl	8009b60 <__aeabi_i2d>
 8005ca4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ca8:	f003 ffc0 	bl	8009c2c <__aeabi_dmul>
 8005cac:	4b97      	ldr	r3, [pc, #604]	; (8005f0c <_dtoa_r+0xa7c>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f003 fe0a 	bl	80098c8 <__adddf3>
 8005cb4:	9b08      	ldr	r3, [sp, #32]
 8005cb6:	4606      	mov	r6, r0
 8005cb8:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 8162 	beq.w	8005f86 <_dtoa_r+0xaf6>
 8005cc2:	9b05      	ldr	r3, [sp, #20]
 8005cc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cc8:	9314      	str	r3, [sp, #80]	; 0x50
 8005cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 8223 	beq.w	8006118 <_dtoa_r+0xc88>
 8005cd2:	4b8b      	ldr	r3, [pc, #556]	; (8005f00 <_dtoa_r+0xa70>)
 8005cd4:	498e      	ldr	r1, [pc, #568]	; (8005f10 <_dtoa_r+0xa80>)
 8005cd6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005cda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cde:	2000      	movs	r0, #0
 8005ce0:	f004 f8ce 	bl	8009e80 <__aeabi_ddiv>
 8005ce4:	4632      	mov	r2, r6
 8005ce6:	463b      	mov	r3, r7
 8005ce8:	f003 fdec 	bl	80098c4 <__aeabi_dsub>
 8005cec:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005cf0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8005cf4:	4639      	mov	r1, r7
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	f004 fa32 	bl	800a160 <__aeabi_d2iz>
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	f003 ff2f 	bl	8009b60 <__aeabi_i2d>
 8005d02:	3530      	adds	r5, #48	; 0x30
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	4630      	mov	r0, r6
 8005d0a:	4639      	mov	r1, r7
 8005d0c:	f003 fdda 	bl	80098c4 <__aeabi_dsub>
 8005d10:	fa5f f885 	uxtb.w	r8, r5
 8005d14:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d16:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005d1a:	f885 8000 	strb.w	r8, [r5]
 8005d1e:	4606      	mov	r6, r0
 8005d20:	460f      	mov	r7, r1
 8005d22:	3501      	adds	r5, #1
 8005d24:	f004 f9f4 	bl	800a110 <__aeabi_dcmplt>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	f040 82a7 	bne.w	800627c <_dtoa_r+0xdec>
 8005d2e:	4632      	mov	r2, r6
 8005d30:	463b      	mov	r3, r7
 8005d32:	2000      	movs	r0, #0
 8005d34:	4974      	ldr	r1, [pc, #464]	; (8005f08 <_dtoa_r+0xa78>)
 8005d36:	f003 fdc5 	bl	80098c4 <__aeabi_dsub>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005d42:	f004 fa03 	bl	800a14c <__aeabi_dcmpgt>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	f040 82ad 	bne.w	80062a6 <_dtoa_r+0xe16>
 8005d4c:	f1b9 0f01 	cmp.w	r9, #1
 8005d50:	f340 8184 	ble.w	800605c <_dtoa_r+0xbcc>
 8005d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d56:	f8cd b000 	str.w	fp, [sp]
 8005d5a:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 8005d5e:	4499      	add	r9, r3
 8005d60:	46a0      	mov	r8, r4
 8005d62:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8005d66:	e00d      	b.n	8005d84 <_dtoa_r+0x8f4>
 8005d68:	2000      	movs	r0, #0
 8005d6a:	4967      	ldr	r1, [pc, #412]	; (8005f08 <_dtoa_r+0xa78>)
 8005d6c:	f003 fdaa 	bl	80098c4 <__aeabi_dsub>
 8005d70:	4652      	mov	r2, sl
 8005d72:	465b      	mov	r3, fp
 8005d74:	f004 f9cc 	bl	800a110 <__aeabi_dcmplt>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	f040 828f 	bne.w	800629c <_dtoa_r+0xe0c>
 8005d7e:	454d      	cmp	r5, r9
 8005d80:	f000 8167 	beq.w	8006052 <_dtoa_r+0xbc2>
 8005d84:	4650      	mov	r0, sl
 8005d86:	4659      	mov	r1, fp
 8005d88:	2200      	movs	r2, #0
 8005d8a:	4b62      	ldr	r3, [pc, #392]	; (8005f14 <_dtoa_r+0xa84>)
 8005d8c:	f003 ff4e 	bl	8009c2c <__aeabi_dmul>
 8005d90:	2200      	movs	r2, #0
 8005d92:	4b60      	ldr	r3, [pc, #384]	; (8005f14 <_dtoa_r+0xa84>)
 8005d94:	4682      	mov	sl, r0
 8005d96:	468b      	mov	fp, r1
 8005d98:	4630      	mov	r0, r6
 8005d9a:	4639      	mov	r1, r7
 8005d9c:	f003 ff46 	bl	8009c2c <__aeabi_dmul>
 8005da0:	460f      	mov	r7, r1
 8005da2:	4606      	mov	r6, r0
 8005da4:	f004 f9dc 	bl	800a160 <__aeabi_d2iz>
 8005da8:	4604      	mov	r4, r0
 8005daa:	f003 fed9 	bl	8009b60 <__aeabi_i2d>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4630      	mov	r0, r6
 8005db4:	4639      	mov	r1, r7
 8005db6:	f003 fd85 	bl	80098c4 <__aeabi_dsub>
 8005dba:	3430      	adds	r4, #48	; 0x30
 8005dbc:	b2e4      	uxtb	r4, r4
 8005dbe:	4652      	mov	r2, sl
 8005dc0:	465b      	mov	r3, fp
 8005dc2:	f805 4b01 	strb.w	r4, [r5], #1
 8005dc6:	4606      	mov	r6, r0
 8005dc8:	460f      	mov	r7, r1
 8005dca:	f004 f9a1 	bl	800a110 <__aeabi_dcmplt>
 8005dce:	4632      	mov	r2, r6
 8005dd0:	463b      	mov	r3, r7
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d0c8      	beq.n	8005d68 <_dtoa_r+0x8d8>
 8005dd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005dd8:	f8dd b000 	ldr.w	fp, [sp]
 8005ddc:	9305      	str	r3, [sp, #20]
 8005dde:	4644      	mov	r4, r8
 8005de0:	e52d      	b.n	800583e <_dtoa_r+0x3ae>
 8005de2:	2300      	movs	r3, #0
 8005de4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005de6:	9b05      	ldr	r3, [sp, #20]
 8005de8:	4453      	add	r3, sl
 8005dea:	930e      	str	r3, [sp, #56]	; 0x38
 8005dec:	3301      	adds	r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	9308      	str	r3, [sp, #32]
 8005df2:	f340 8101 	ble.w	8005ff8 <_dtoa_r+0xb68>
 8005df6:	9d08      	ldr	r5, [sp, #32]
 8005df8:	462e      	mov	r6, r5
 8005dfa:	e6f0      	b.n	8005bde <_dtoa_r+0x74e>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e00:	e6e3      	b.n	8005bca <_dtoa_r+0x73a>
 8005e02:	9b08      	ldr	r3, [sp, #32]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f73f ac67 	bgt.w	80056d8 <_dtoa_r+0x248>
 8005e0a:	f040 80d4 	bne.w	8005fb6 <_dtoa_r+0xb26>
 8005e0e:	4640      	mov	r0, r8
 8005e10:	2200      	movs	r2, #0
 8005e12:	4b41      	ldr	r3, [pc, #260]	; (8005f18 <_dtoa_r+0xa88>)
 8005e14:	4649      	mov	r1, r9
 8005e16:	f003 ff09 	bl	8009c2c <__aeabi_dmul>
 8005e1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e1e:	f004 f98b 	bl	800a138 <__aeabi_dcmpge>
 8005e22:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e26:	4646      	mov	r6, r8
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	f000 808b 	beq.w	8005f44 <_dtoa_r+0xab4>
 8005e2e:	ea6f 030a 	mvn.w	r3, sl
 8005e32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e34:	9305      	str	r3, [sp, #20]
 8005e36:	4641      	mov	r1, r8
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f001 fb8b 	bl	8007554 <_Bfree>
 8005e3e:	2e00      	cmp	r6, #0
 8005e40:	f47f ae2b 	bne.w	8005a9a <_dtoa_r+0x60a>
 8005e44:	e4fb      	b.n	800583e <_dtoa_r+0x3ae>
 8005e46:	4659      	mov	r1, fp
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f001 fd0d 	bl	8007868 <__pow5mult>
 8005e4e:	4683      	mov	fp, r0
 8005e50:	e554      	b.n	80058fc <_dtoa_r+0x46c>
 8005e52:	9b00      	ldr	r3, [sp, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f47f ad63 	bne.w	8005920 <_dtoa_r+0x490>
 8005e5a:	9b01      	ldr	r3, [sp, #4]
 8005e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f47f ad90 	bne.w	8005986 <_dtoa_r+0x4f6>
 8005e66:	9b01      	ldr	r3, [sp, #4]
 8005e68:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8005e6c:	0d3f      	lsrs	r7, r7, #20
 8005e6e:	053f      	lsls	r7, r7, #20
 8005e70:	2f00      	cmp	r7, #0
 8005e72:	f000 821c 	beq.w	80062ae <_dtoa_r+0xe1e>
 8005e76:	9b07      	ldr	r3, [sp, #28]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	9307      	str	r3, [sp, #28]
 8005e7c:	9b06      	ldr	r3, [sp, #24]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	9306      	str	r3, [sp, #24]
 8005e82:	f04f 0901 	mov.w	r9, #1
 8005e86:	e580      	b.n	800598a <_dtoa_r+0x4fa>
 8005e88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e8a:	2a00      	cmp	r2, #0
 8005e8c:	f000 81a7 	beq.w	80061de <_dtoa_r+0xd4e>
 8005e90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e94:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005e96:	9d07      	ldr	r5, [sp, #28]
 8005e98:	e4f9      	b.n	800588e <_dtoa_r+0x3fe>
 8005e9a:	f001 fb65 	bl	8007568 <__multadd>
 8005e9e:	4657      	mov	r7, sl
 8005ea0:	4606      	mov	r6, r0
 8005ea2:	4681      	mov	r9, r0
 8005ea4:	e62f      	b.n	8005b06 <_dtoa_r+0x676>
 8005ea6:	4601      	mov	r1, r0
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f8cd c000 	str.w	ip, [sp]
 8005eae:	f001 fb51 	bl	8007554 <_Bfree>
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f8dd c000 	ldr.w	ip, [sp]
 8005eb8:	e652      	b.n	8005b60 <_dtoa_r+0x6d0>
 8005eba:	4658      	mov	r0, fp
 8005ebc:	4641      	mov	r1, r8
 8005ebe:	f001 fd79 	bl	80079b4 <__mcmp>
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	f6bf ad8f 	bge.w	80059e6 <_dtoa_r+0x556>
 8005ec8:	9f05      	ldr	r7, [sp, #20]
 8005eca:	4659      	mov	r1, fp
 8005ecc:	2300      	movs	r3, #0
 8005ece:	4620      	mov	r0, r4
 8005ed0:	220a      	movs	r2, #10
 8005ed2:	3f01      	subs	r7, #1
 8005ed4:	9705      	str	r7, [sp, #20]
 8005ed6:	f001 fb47 	bl	8007568 <__multadd>
 8005eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005edc:	4683      	mov	fp, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f47f adee 	bne.w	8005ac0 <_dtoa_r+0x630>
 8005ee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f340 81f5 	ble.w	80062d6 <_dtoa_r+0xe46>
 8005eec:	9308      	str	r3, [sp, #32]
 8005eee:	e581      	b.n	80059f4 <_dtoa_r+0x564>
 8005ef0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ef2:	f7ff bb04 	b.w	80054fe <_dtoa_r+0x6e>
 8005ef6:	9b00      	ldr	r3, [sp, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f47f ad44 	bne.w	8005986 <_dtoa_r+0x4f6>
 8005efe:	e7ac      	b.n	8005e5a <_dtoa_r+0x9ca>
 8005f00:	0800ab58 	.word	0x0800ab58
 8005f04:	0800ac30 	.word	0x0800ac30
 8005f08:	3ff00000 	.word	0x3ff00000
 8005f0c:	401c0000 	.word	0x401c0000
 8005f10:	3fe00000 	.word	0x3fe00000
 8005f14:	40240000 	.word	0x40240000
 8005f18:	40140000 	.word	0x40140000
 8005f1c:	9b03      	ldr	r3, [sp, #12]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	f77f ad65 	ble.w	80059ee <_dtoa_r+0x55e>
 8005f24:	9b08      	ldr	r3, [sp, #32]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d181      	bne.n	8005e2e <_dtoa_r+0x99e>
 8005f2a:	4641      	mov	r1, r8
 8005f2c:	2205      	movs	r2, #5
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f001 fb1a 	bl	8007568 <__multadd>
 8005f34:	4680      	mov	r8, r0
 8005f36:	4641      	mov	r1, r8
 8005f38:	4658      	mov	r0, fp
 8005f3a:	f001 fd3b 	bl	80079b4 <__mcmp>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	f77f af75 	ble.w	8005e2e <_dtoa_r+0x99e>
 8005f44:	9a05      	ldr	r2, [sp, #20]
 8005f46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f48:	2331      	movs	r3, #49	; 0x31
 8005f4a:	3201      	adds	r2, #1
 8005f4c:	9205      	str	r2, [sp, #20]
 8005f4e:	700b      	strb	r3, [r1, #0]
 8005f50:	1c4d      	adds	r5, r1, #1
 8005f52:	e770      	b.n	8005e36 <_dtoa_r+0x9a6>
 8005f54:	9a05      	ldr	r2, [sp, #20]
 8005f56:	3201      	adds	r2, #1
 8005f58:	9205      	str	r2, [sp, #20]
 8005f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f5c:	2331      	movs	r3, #49	; 0x31
 8005f5e:	7013      	strb	r3, [r2, #0]
 8005f60:	e58b      	b.n	8005a7a <_dtoa_r+0x5ea>
 8005f62:	f8dd b000 	ldr.w	fp, [sp]
 8005f66:	9c03      	ldr	r4, [sp, #12]
 8005f68:	e469      	b.n	800583e <_dtoa_r+0x3ae>
 8005f6a:	4640      	mov	r0, r8
 8005f6c:	f003 fdf8 	bl	8009b60 <__aeabi_i2d>
 8005f70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f74:	f003 fe5a 	bl	8009c2c <__aeabi_dmul>
 8005f78:	2200      	movs	r2, #0
 8005f7a:	4bc2      	ldr	r3, [pc, #776]	; (8006284 <_dtoa_r+0xdf4>)
 8005f7c:	f003 fca4 	bl	80098c8 <__adddf3>
 8005f80:	4606      	mov	r6, r0
 8005f82:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8005f86:	2200      	movs	r2, #0
 8005f88:	4bbf      	ldr	r3, [pc, #764]	; (8006288 <_dtoa_r+0xdf8>)
 8005f8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f8e:	f003 fc99 	bl	80098c4 <__aeabi_dsub>
 8005f92:	4632      	mov	r2, r6
 8005f94:	463b      	mov	r3, r7
 8005f96:	4680      	mov	r8, r0
 8005f98:	4689      	mov	r9, r1
 8005f9a:	f004 f8d7 	bl	800a14c <__aeabi_dcmpgt>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	f040 80b6 	bne.w	8006110 <_dtoa_r+0xc80>
 8005fa4:	4632      	mov	r2, r6
 8005fa6:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005faa:	4640      	mov	r0, r8
 8005fac:	4649      	mov	r1, r9
 8005fae:	f004 f8af 	bl	800a110 <__aeabi_dcmplt>
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	d052      	beq.n	800605c <_dtoa_r+0xbcc>
 8005fb6:	f04f 0800 	mov.w	r8, #0
 8005fba:	4646      	mov	r6, r8
 8005fbc:	e737      	b.n	8005e2e <_dtoa_r+0x99e>
 8005fbe:	4659      	mov	r1, fp
 8005fc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f001 fc50 	bl	8007868 <__pow5mult>
 8005fc8:	4683      	mov	fp, r0
 8005fca:	e497      	b.n	80058fc <_dtoa_r+0x46c>
 8005fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fd0:	970a      	str	r7, [sp, #40]	; 0x28
 8005fd2:	1afb      	subs	r3, r7, r3
 8005fd4:	441a      	add	r2, r3
 8005fd6:	920c      	str	r2, [sp, #48]	; 0x30
 8005fd8:	2700      	movs	r7, #0
 8005fda:	e452      	b.n	8005882 <_dtoa_r+0x3f2>
 8005fdc:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8005fe0:	f04f 0802 	mov.w	r8, #2
 8005fe4:	ed8d 7b00 	vstr	d7, [sp]
 8005fe8:	e633      	b.n	8005c52 <_dtoa_r+0x7c2>
 8005fea:	2501      	movs	r5, #1
 8005fec:	950e      	str	r5, [sp, #56]	; 0x38
 8005fee:	9508      	str	r5, [sp, #32]
 8005ff0:	46aa      	mov	sl, r5
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	6461      	str	r1, [r4, #68]	; 0x44
 8005ff6:	e601      	b.n	8005bfc <_dtoa_r+0x76c>
 8005ff8:	461d      	mov	r5, r3
 8005ffa:	e7fa      	b.n	8005ff2 <_dtoa_r+0xb62>
 8005ffc:	2a00      	cmp	r2, #0
 8005ffe:	dd15      	ble.n	800602c <_dtoa_r+0xb9c>
 8006000:	4659      	mov	r1, fp
 8006002:	2201      	movs	r2, #1
 8006004:	4620      	mov	r0, r4
 8006006:	f8cd c000 	str.w	ip, [sp]
 800600a:	f001 fc7d 	bl	8007908 <__lshift>
 800600e:	4641      	mov	r1, r8
 8006010:	4683      	mov	fp, r0
 8006012:	f001 fccf 	bl	80079b4 <__mcmp>
 8006016:	2800      	cmp	r0, #0
 8006018:	f8dd c000 	ldr.w	ip, [sp]
 800601c:	f340 8154 	ble.w	80062c8 <_dtoa_r+0xe38>
 8006020:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8006024:	f000 8111 	beq.w	800624a <_dtoa_r+0xdba>
 8006028:	f10c 0c01 	add.w	ip, ip, #1
 800602c:	46b2      	mov	sl, r6
 800602e:	f887 c000 	strb.w	ip, [r7]
 8006032:	1c7d      	adds	r5, r7, #1
 8006034:	464e      	mov	r6, r9
 8006036:	e520      	b.n	8005a7a <_dtoa_r+0x5ea>
 8006038:	d104      	bne.n	8006044 <_dtoa_r+0xbb4>
 800603a:	f01c 0f01 	tst.w	ip, #1
 800603e:	d001      	beq.n	8006044 <_dtoa_r+0xbb4>
 8006040:	e50b      	b.n	8005a5a <_dtoa_r+0x5ca>
 8006042:	4615      	mov	r5, r2
 8006044:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006048:	2b30      	cmp	r3, #48	; 0x30
 800604a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800604e:	d0f8      	beq.n	8006042 <_dtoa_r+0xbb2>
 8006050:	e513      	b.n	8005a7a <_dtoa_r+0x5ea>
 8006052:	f8dd b000 	ldr.w	fp, [sp]
 8006056:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 800605a:	4644      	mov	r4, r8
 800605c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006060:	e9cd 2300 	strd	r2, r3, [sp]
 8006064:	f7ff bb27 	b.w	80056b6 <_dtoa_r+0x226>
 8006068:	9b05      	ldr	r3, [sp, #20]
 800606a:	425d      	negs	r5, r3
 800606c:	2d00      	cmp	r5, #0
 800606e:	f000 80bd 	beq.w	80061ec <_dtoa_r+0xd5c>
 8006072:	4b86      	ldr	r3, [pc, #536]	; (800628c <_dtoa_r+0xdfc>)
 8006074:	f005 020f 	and.w	r2, r5, #15
 8006078:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006084:	f003 fdd2 	bl	8009c2c <__aeabi_dmul>
 8006088:	112d      	asrs	r5, r5, #4
 800608a:	e9cd 0100 	strd	r0, r1, [sp]
 800608e:	f000 8127 	beq.w	80062e0 <_dtoa_r+0xe50>
 8006092:	4e7f      	ldr	r6, [pc, #508]	; (8006290 <_dtoa_r+0xe00>)
 8006094:	f04f 0802 	mov.w	r8, #2
 8006098:	07eb      	lsls	r3, r5, #31
 800609a:	d505      	bpl.n	80060a8 <_dtoa_r+0xc18>
 800609c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060a0:	f003 fdc4 	bl	8009c2c <__aeabi_dmul>
 80060a4:	f108 0801 	add.w	r8, r8, #1
 80060a8:	106d      	asrs	r5, r5, #1
 80060aa:	f106 0608 	add.w	r6, r6, #8
 80060ae:	d1f3      	bne.n	8006098 <_dtoa_r+0xc08>
 80060b0:	e9cd 0100 	strd	r0, r1, [sp]
 80060b4:	e5e8      	b.n	8005c88 <_dtoa_r+0x7f8>
 80060b6:	9a05      	ldr	r2, [sp, #20]
 80060b8:	3201      	adds	r2, #1
 80060ba:	9205      	str	r2, [sp, #20]
 80060bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060be:	2330      	movs	r3, #48	; 0x30
 80060c0:	7013      	strb	r3, [r2, #0]
 80060c2:	2331      	movs	r3, #49	; 0x31
 80060c4:	7013      	strb	r3, [r2, #0]
 80060c6:	f7ff bbba 	b.w	800583e <_dtoa_r+0x3ae>
 80060ca:	6871      	ldr	r1, [r6, #4]
 80060cc:	4620      	mov	r0, r4
 80060ce:	f001 fa1b 	bl	8007508 <_Balloc>
 80060d2:	6933      	ldr	r3, [r6, #16]
 80060d4:	1c9a      	adds	r2, r3, #2
 80060d6:	4605      	mov	r5, r0
 80060d8:	0092      	lsls	r2, r2, #2
 80060da:	f106 010c 	add.w	r1, r6, #12
 80060de:	300c      	adds	r0, #12
 80060e0:	f7fd fc94 	bl	8003a0c <memcpy>
 80060e4:	4620      	mov	r0, r4
 80060e6:	4629      	mov	r1, r5
 80060e8:	2201      	movs	r2, #1
 80060ea:	f001 fc0d 	bl	8007908 <__lshift>
 80060ee:	4681      	mov	r9, r0
 80060f0:	e4ff      	b.n	8005af2 <_dtoa_r+0x662>
 80060f2:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80060f6:	f000 80a8 	beq.w	800624a <_dtoa_r+0xdba>
 80060fa:	f10c 0c01 	add.w	ip, ip, #1
 80060fe:	46b2      	mov	sl, r6
 8006100:	f887 c000 	strb.w	ip, [r7]
 8006104:	1c7d      	adds	r5, r7, #1
 8006106:	464e      	mov	r6, r9
 8006108:	e4b7      	b.n	8005a7a <_dtoa_r+0x5ea>
 800610a:	46b2      	mov	sl, r6
 800610c:	464e      	mov	r6, r9
 800610e:	e494      	b.n	8005a3a <_dtoa_r+0x5aa>
 8006110:	f04f 0800 	mov.w	r8, #0
 8006114:	4646      	mov	r6, r8
 8006116:	e715      	b.n	8005f44 <_dtoa_r+0xab4>
 8006118:	495c      	ldr	r1, [pc, #368]	; (800628c <_dtoa_r+0xdfc>)
 800611a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800611e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006122:	4632      	mov	r2, r6
 8006124:	9315      	str	r3, [sp, #84]	; 0x54
 8006126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800612a:	463b      	mov	r3, r7
 800612c:	f003 fd7e 	bl	8009c2c <__aeabi_dmul>
 8006130:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006134:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8006138:	4639      	mov	r1, r7
 800613a:	4630      	mov	r0, r6
 800613c:	f004 f810 	bl	800a160 <__aeabi_d2iz>
 8006140:	4605      	mov	r5, r0
 8006142:	f003 fd0d 	bl	8009b60 <__aeabi_i2d>
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	4630      	mov	r0, r6
 800614c:	4639      	mov	r1, r7
 800614e:	f003 fbb9 	bl	80098c4 <__aeabi_dsub>
 8006152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006154:	3530      	adds	r5, #48	; 0x30
 8006156:	f1b9 0f01 	cmp.w	r9, #1
 800615a:	7015      	strb	r5, [r2, #0]
 800615c:	4606      	mov	r6, r0
 800615e:	460f      	mov	r7, r1
 8006160:	f102 0501 	add.w	r5, r2, #1
 8006164:	d023      	beq.n	80061ae <_dtoa_r+0xd1e>
 8006166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006168:	f8cd b000 	str.w	fp, [sp]
 800616c:	444b      	add	r3, r9
 800616e:	4698      	mov	r8, r3
 8006170:	46a9      	mov	r9, r5
 8006172:	46ab      	mov	fp, r5
 8006174:	2200      	movs	r2, #0
 8006176:	4b47      	ldr	r3, [pc, #284]	; (8006294 <_dtoa_r+0xe04>)
 8006178:	f003 fd58 	bl	8009c2c <__aeabi_dmul>
 800617c:	460f      	mov	r7, r1
 800617e:	4606      	mov	r6, r0
 8006180:	f003 ffee 	bl	800a160 <__aeabi_d2iz>
 8006184:	4605      	mov	r5, r0
 8006186:	f003 fceb 	bl	8009b60 <__aeabi_i2d>
 800618a:	3530      	adds	r5, #48	; 0x30
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4630      	mov	r0, r6
 8006192:	4639      	mov	r1, r7
 8006194:	f003 fb96 	bl	80098c4 <__aeabi_dsub>
 8006198:	f809 5b01 	strb.w	r5, [r9], #1
 800619c:	45c1      	cmp	r9, r8
 800619e:	d1e9      	bne.n	8006174 <_dtoa_r+0xce4>
 80061a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061a2:	465d      	mov	r5, fp
 80061a4:	f8dd b000 	ldr.w	fp, [sp]
 80061a8:	4606      	mov	r6, r0
 80061aa:	460f      	mov	r7, r1
 80061ac:	441d      	add	r5, r3
 80061ae:	2200      	movs	r2, #0
 80061b0:	4b39      	ldr	r3, [pc, #228]	; (8006298 <_dtoa_r+0xe08>)
 80061b2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80061b6:	f003 fb87 	bl	80098c8 <__adddf3>
 80061ba:	4632      	mov	r2, r6
 80061bc:	463b      	mov	r3, r7
 80061be:	f003 ffa7 	bl	800a110 <__aeabi_dcmplt>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d047      	beq.n	8006256 <_dtoa_r+0xdc6>
 80061c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061c8:	9305      	str	r3, [sp, #20]
 80061ca:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 80061ce:	f7ff bb24 	b.w	800581a <_dtoa_r+0x38a>
 80061d2:	9b07      	ldr	r3, [sp, #28]
 80061d4:	9a08      	ldr	r2, [sp, #32]
 80061d6:	1a9d      	subs	r5, r3, r2
 80061d8:	2300      	movs	r3, #0
 80061da:	f7ff bb58 	b.w	800588e <_dtoa_r+0x3fe>
 80061de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80061e0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80061e2:	9d07      	ldr	r5, [sp, #28]
 80061e4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061e8:	f7ff bb51 	b.w	800588e <_dtoa_r+0x3fe>
 80061ec:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 80061f0:	f04f 0802 	mov.w	r8, #2
 80061f4:	ed8d 7b00 	vstr	d7, [sp]
 80061f8:	e546      	b.n	8005c88 <_dtoa_r+0x7f8>
 80061fa:	9b08      	ldr	r3, [sp, #32]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f43f aeb4 	beq.w	8005f6a <_dtoa_r+0xada>
 8006202:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006204:	2d00      	cmp	r5, #0
 8006206:	f77f af29 	ble.w	800605c <_dtoa_r+0xbcc>
 800620a:	2200      	movs	r2, #0
 800620c:	4b21      	ldr	r3, [pc, #132]	; (8006294 <_dtoa_r+0xe04>)
 800620e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006212:	f003 fd0b 	bl	8009c2c <__aeabi_dmul>
 8006216:	4606      	mov	r6, r0
 8006218:	460f      	mov	r7, r1
 800621a:	f108 0001 	add.w	r0, r8, #1
 800621e:	e9cd 6700 	strd	r6, r7, [sp]
 8006222:	f003 fc9d 	bl	8009b60 <__aeabi_i2d>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4630      	mov	r0, r6
 800622c:	4639      	mov	r1, r7
 800622e:	f003 fcfd 	bl	8009c2c <__aeabi_dmul>
 8006232:	4b14      	ldr	r3, [pc, #80]	; (8006284 <_dtoa_r+0xdf4>)
 8006234:	2200      	movs	r2, #0
 8006236:	f003 fb47 	bl	80098c8 <__adddf3>
 800623a:	9b05      	ldr	r3, [sp, #20]
 800623c:	3b01      	subs	r3, #1
 800623e:	4606      	mov	r6, r0
 8006240:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8006244:	9314      	str	r3, [sp, #80]	; 0x50
 8006246:	46a9      	mov	r9, r5
 8006248:	e53f      	b.n	8005cca <_dtoa_r+0x83a>
 800624a:	2239      	movs	r2, #57	; 0x39
 800624c:	46b2      	mov	sl, r6
 800624e:	703a      	strb	r2, [r7, #0]
 8006250:	464e      	mov	r6, r9
 8006252:	1c7d      	adds	r5, r7, #1
 8006254:	e403      	b.n	8005a5e <_dtoa_r+0x5ce>
 8006256:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800625a:	2000      	movs	r0, #0
 800625c:	490e      	ldr	r1, [pc, #56]	; (8006298 <_dtoa_r+0xe08>)
 800625e:	f003 fb31 	bl	80098c4 <__aeabi_dsub>
 8006262:	4632      	mov	r2, r6
 8006264:	463b      	mov	r3, r7
 8006266:	f003 ff71 	bl	800a14c <__aeabi_dcmpgt>
 800626a:	b908      	cbnz	r0, 8006270 <_dtoa_r+0xde0>
 800626c:	e6f6      	b.n	800605c <_dtoa_r+0xbcc>
 800626e:	4615      	mov	r5, r2
 8006270:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006274:	2b30      	cmp	r3, #48	; 0x30
 8006276:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800627a:	d0f8      	beq.n	800626e <_dtoa_r+0xdde>
 800627c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800627e:	9305      	str	r3, [sp, #20]
 8006280:	f7ff badd 	b.w	800583e <_dtoa_r+0x3ae>
 8006284:	401c0000 	.word	0x401c0000
 8006288:	40140000 	.word	0x40140000
 800628c:	0800ab58 	.word	0x0800ab58
 8006290:	0800ac30 	.word	0x0800ac30
 8006294:	40240000 	.word	0x40240000
 8006298:	3fe00000 	.word	0x3fe00000
 800629c:	4643      	mov	r3, r8
 800629e:	f8dd b000 	ldr.w	fp, [sp]
 80062a2:	46a0      	mov	r8, r4
 80062a4:	461c      	mov	r4, r3
 80062a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062a8:	9305      	str	r3, [sp, #20]
 80062aa:	f7ff bab6 	b.w	800581a <_dtoa_r+0x38a>
 80062ae:	46b9      	mov	r9, r7
 80062b0:	f7ff bb6b 	b.w	800598a <_dtoa_r+0x4fa>
 80062b4:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80062b8:	d0c7      	beq.n	800624a <_dtoa_r+0xdba>
 80062ba:	f1ba 0f00 	cmp.w	sl, #0
 80062be:	f77f aeb5 	ble.w	800602c <_dtoa_r+0xb9c>
 80062c2:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 80062c6:	e6b1      	b.n	800602c <_dtoa_r+0xb9c>
 80062c8:	f47f aeb0 	bne.w	800602c <_dtoa_r+0xb9c>
 80062cc:	f01c 0f01 	tst.w	ip, #1
 80062d0:	f43f aeac 	beq.w	800602c <_dtoa_r+0xb9c>
 80062d4:	e6a4      	b.n	8006020 <_dtoa_r+0xb90>
 80062d6:	9b03      	ldr	r3, [sp, #12]
 80062d8:	2b02      	cmp	r3, #2
 80062da:	dc04      	bgt.n	80062e6 <_dtoa_r+0xe56>
 80062dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062de:	e605      	b.n	8005eec <_dtoa_r+0xa5c>
 80062e0:	f04f 0802 	mov.w	r8, #2
 80062e4:	e4d0      	b.n	8005c88 <_dtoa_r+0x7f8>
 80062e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062e8:	9308      	str	r3, [sp, #32]
 80062ea:	e61b      	b.n	8005f24 <_dtoa_r+0xa94>
 80062ec:	9b03      	ldr	r3, [sp, #12]
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	dcf9      	bgt.n	80062e6 <_dtoa_r+0xe56>
 80062f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062f4:	f7ff bbef 	b.w	8005ad6 <_dtoa_r+0x646>
 80062f8:	2500      	movs	r5, #0
 80062fa:	6465      	str	r5, [r4, #68]	; 0x44
 80062fc:	4629      	mov	r1, r5
 80062fe:	4620      	mov	r0, r4
 8006300:	f001 f902 	bl	8007508 <_Balloc>
 8006304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006308:	9308      	str	r3, [sp, #32]
 800630a:	930e      	str	r3, [sp, #56]	; 0x38
 800630c:	2301      	movs	r3, #1
 800630e:	9009      	str	r0, [sp, #36]	; 0x24
 8006310:	46aa      	mov	sl, r5
 8006312:	6420      	str	r0, [r4, #64]	; 0x40
 8006314:	930b      	str	r3, [sp, #44]	; 0x2c
 8006316:	f7ff b9ce 	b.w	80056b6 <_dtoa_r+0x226>
 800631a:	f43f ab4e 	beq.w	80059ba <_dtoa_r+0x52a>
 800631e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8006322:	f7ff bb43 	b.w	80059ac <_dtoa_r+0x51c>
 8006326:	2301      	movs	r3, #1
 8006328:	930b      	str	r3, [sp, #44]	; 0x2c
 800632a:	e55c      	b.n	8005de6 <_dtoa_r+0x956>
 800632c:	2701      	movs	r7, #1
 800632e:	f7ff b98d 	b.w	800564c <_dtoa_r+0x1bc>
 8006332:	bf00      	nop

08006334 <__sflush_r>:
 8006334:	898b      	ldrh	r3, [r1, #12]
 8006336:	b29a      	uxth	r2, r3
 8006338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800633c:	460d      	mov	r5, r1
 800633e:	0711      	lsls	r1, r2, #28
 8006340:	4680      	mov	r8, r0
 8006342:	d43c      	bmi.n	80063be <__sflush_r+0x8a>
 8006344:	686a      	ldr	r2, [r5, #4]
 8006346:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800634a:	2a00      	cmp	r2, #0
 800634c:	81ab      	strh	r3, [r5, #12]
 800634e:	dd65      	ble.n	800641c <__sflush_r+0xe8>
 8006350:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8006352:	2e00      	cmp	r6, #0
 8006354:	d04b      	beq.n	80063ee <__sflush_r+0xba>
 8006356:	b29b      	uxth	r3, r3
 8006358:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800635c:	2100      	movs	r1, #0
 800635e:	b292      	uxth	r2, r2
 8006360:	f8d8 4000 	ldr.w	r4, [r8]
 8006364:	f8c8 1000 	str.w	r1, [r8]
 8006368:	2a00      	cmp	r2, #0
 800636a:	d05b      	beq.n	8006424 <__sflush_r+0xf0>
 800636c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800636e:	075f      	lsls	r7, r3, #29
 8006370:	d505      	bpl.n	800637e <__sflush_r+0x4a>
 8006372:	6869      	ldr	r1, [r5, #4]
 8006374:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006376:	1a52      	subs	r2, r2, r1
 8006378:	b10b      	cbz	r3, 800637e <__sflush_r+0x4a>
 800637a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800637c:	1ad2      	subs	r2, r2, r3
 800637e:	4640      	mov	r0, r8
 8006380:	69e9      	ldr	r1, [r5, #28]
 8006382:	2300      	movs	r3, #0
 8006384:	47b0      	blx	r6
 8006386:	1c46      	adds	r6, r0, #1
 8006388:	d056      	beq.n	8006438 <__sflush_r+0x104>
 800638a:	89ab      	ldrh	r3, [r5, #12]
 800638c:	692a      	ldr	r2, [r5, #16]
 800638e:	602a      	str	r2, [r5, #0]
 8006390:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006394:	b29b      	uxth	r3, r3
 8006396:	2200      	movs	r2, #0
 8006398:	606a      	str	r2, [r5, #4]
 800639a:	04da      	lsls	r2, r3, #19
 800639c:	81ab      	strh	r3, [r5, #12]
 800639e:	d43b      	bmi.n	8006418 <__sflush_r+0xe4>
 80063a0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80063a2:	f8c8 4000 	str.w	r4, [r8]
 80063a6:	b311      	cbz	r1, 80063ee <__sflush_r+0xba>
 80063a8:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80063ac:	4299      	cmp	r1, r3
 80063ae:	d002      	beq.n	80063b6 <__sflush_r+0x82>
 80063b0:	4640      	mov	r0, r8
 80063b2:	f000 f9ff 	bl	80067b4 <_free_r>
 80063b6:	2000      	movs	r0, #0
 80063b8:	6328      	str	r0, [r5, #48]	; 0x30
 80063ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063be:	692e      	ldr	r6, [r5, #16]
 80063c0:	b1ae      	cbz	r6, 80063ee <__sflush_r+0xba>
 80063c2:	682c      	ldr	r4, [r5, #0]
 80063c4:	602e      	str	r6, [r5, #0]
 80063c6:	0791      	lsls	r1, r2, #30
 80063c8:	bf0c      	ite	eq
 80063ca:	696b      	ldreq	r3, [r5, #20]
 80063cc:	2300      	movne	r3, #0
 80063ce:	1ba4      	subs	r4, r4, r6
 80063d0:	60ab      	str	r3, [r5, #8]
 80063d2:	e00a      	b.n	80063ea <__sflush_r+0xb6>
 80063d4:	4632      	mov	r2, r6
 80063d6:	4623      	mov	r3, r4
 80063d8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80063da:	69e9      	ldr	r1, [r5, #28]
 80063dc:	4640      	mov	r0, r8
 80063de:	47b8      	blx	r7
 80063e0:	2800      	cmp	r0, #0
 80063e2:	eba4 0400 	sub.w	r4, r4, r0
 80063e6:	4406      	add	r6, r0
 80063e8:	dd04      	ble.n	80063f4 <__sflush_r+0xc0>
 80063ea:	2c00      	cmp	r4, #0
 80063ec:	dcf2      	bgt.n	80063d4 <__sflush_r+0xa0>
 80063ee:	2000      	movs	r0, #0
 80063f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063f4:	89ab      	ldrh	r3, [r5, #12]
 80063f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063fa:	81ab      	strh	r3, [r5, #12]
 80063fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006404:	89ab      	ldrh	r3, [r5, #12]
 8006406:	692a      	ldr	r2, [r5, #16]
 8006408:	6069      	str	r1, [r5, #4]
 800640a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800640e:	b29b      	uxth	r3, r3
 8006410:	81ab      	strh	r3, [r5, #12]
 8006412:	04db      	lsls	r3, r3, #19
 8006414:	602a      	str	r2, [r5, #0]
 8006416:	d5c3      	bpl.n	80063a0 <__sflush_r+0x6c>
 8006418:	6528      	str	r0, [r5, #80]	; 0x50
 800641a:	e7c1      	b.n	80063a0 <__sflush_r+0x6c>
 800641c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800641e:	2a00      	cmp	r2, #0
 8006420:	dc96      	bgt.n	8006350 <__sflush_r+0x1c>
 8006422:	e7e4      	b.n	80063ee <__sflush_r+0xba>
 8006424:	2301      	movs	r3, #1
 8006426:	4640      	mov	r0, r8
 8006428:	69e9      	ldr	r1, [r5, #28]
 800642a:	47b0      	blx	r6
 800642c:	1c43      	adds	r3, r0, #1
 800642e:	4602      	mov	r2, r0
 8006430:	d019      	beq.n	8006466 <__sflush_r+0x132>
 8006432:	89ab      	ldrh	r3, [r5, #12]
 8006434:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8006436:	e79a      	b.n	800636e <__sflush_r+0x3a>
 8006438:	f8d8 1000 	ldr.w	r1, [r8]
 800643c:	2900      	cmp	r1, #0
 800643e:	d0e1      	beq.n	8006404 <__sflush_r+0xd0>
 8006440:	291d      	cmp	r1, #29
 8006442:	d007      	beq.n	8006454 <__sflush_r+0x120>
 8006444:	2916      	cmp	r1, #22
 8006446:	d005      	beq.n	8006454 <__sflush_r+0x120>
 8006448:	89ab      	ldrh	r3, [r5, #12]
 800644a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800644e:	81ab      	strh	r3, [r5, #12]
 8006450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006454:	89ab      	ldrh	r3, [r5, #12]
 8006456:	692a      	ldr	r2, [r5, #16]
 8006458:	602a      	str	r2, [r5, #0]
 800645a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800645e:	2200      	movs	r2, #0
 8006460:	81ab      	strh	r3, [r5, #12]
 8006462:	606a      	str	r2, [r5, #4]
 8006464:	e79c      	b.n	80063a0 <__sflush_r+0x6c>
 8006466:	f8d8 3000 	ldr.w	r3, [r8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0e1      	beq.n	8006432 <__sflush_r+0xfe>
 800646e:	2b1d      	cmp	r3, #29
 8006470:	d007      	beq.n	8006482 <__sflush_r+0x14e>
 8006472:	2b16      	cmp	r3, #22
 8006474:	d005      	beq.n	8006482 <__sflush_r+0x14e>
 8006476:	89ab      	ldrh	r3, [r5, #12]
 8006478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800647c:	81ab      	strh	r3, [r5, #12]
 800647e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006482:	f8c8 4000 	str.w	r4, [r8]
 8006486:	e7b2      	b.n	80063ee <__sflush_r+0xba>

08006488 <_fflush_r>:
 8006488:	b510      	push	{r4, lr}
 800648a:	4604      	mov	r4, r0
 800648c:	b082      	sub	sp, #8
 800648e:	b108      	cbz	r0, 8006494 <_fflush_r+0xc>
 8006490:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006492:	b153      	cbz	r3, 80064aa <_fflush_r+0x22>
 8006494:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8006498:	b908      	cbnz	r0, 800649e <_fflush_r+0x16>
 800649a:	b002      	add	sp, #8
 800649c:	bd10      	pop	{r4, pc}
 800649e:	4620      	mov	r0, r4
 80064a0:	b002      	add	sp, #8
 80064a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064a6:	f7ff bf45 	b.w	8006334 <__sflush_r>
 80064aa:	9101      	str	r1, [sp, #4]
 80064ac:	f000 f8fc 	bl	80066a8 <__sinit>
 80064b0:	9901      	ldr	r1, [sp, #4]
 80064b2:	e7ef      	b.n	8006494 <_fflush_r+0xc>

080064b4 <fflush>:
 80064b4:	b120      	cbz	r0, 80064c0 <fflush+0xc>
 80064b6:	4b05      	ldr	r3, [pc, #20]	; (80064cc <fflush+0x18>)
 80064b8:	4601      	mov	r1, r0
 80064ba:	6818      	ldr	r0, [r3, #0]
 80064bc:	f7ff bfe4 	b.w	8006488 <_fflush_r>
 80064c0:	4b03      	ldr	r3, [pc, #12]	; (80064d0 <fflush+0x1c>)
 80064c2:	4904      	ldr	r1, [pc, #16]	; (80064d4 <fflush+0x20>)
 80064c4:	6818      	ldr	r0, [r3, #0]
 80064c6:	f000 bbff 	b.w	8006cc8 <_fwalk_reent>
 80064ca:	bf00      	nop
 80064cc:	200004a8 	.word	0x200004a8
 80064d0:	0800aad0 	.word	0x0800aad0
 80064d4:	08006489 	.word	0x08006489

080064d8 <__fp_lock>:
 80064d8:	2000      	movs	r0, #0
 80064da:	4770      	bx	lr

080064dc <__fp_unlock>:
 80064dc:	2000      	movs	r0, #0
 80064de:	4770      	bx	lr

080064e0 <_cleanup_r>:
 80064e0:	4901      	ldr	r1, [pc, #4]	; (80064e8 <_cleanup_r+0x8>)
 80064e2:	f000 bbf1 	b.w	8006cc8 <_fwalk_reent>
 80064e6:	bf00      	nop
 80064e8:	0800943d 	.word	0x0800943d

080064ec <__sinit.part.1>:
 80064ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f0:	4b35      	ldr	r3, [pc, #212]	; (80065c8 <__sinit.part.1+0xdc>)
 80064f2:	6845      	ldr	r5, [r0, #4]
 80064f4:	63c3      	str	r3, [r0, #60]	; 0x3c
 80064f6:	2400      	movs	r4, #0
 80064f8:	4607      	mov	r7, r0
 80064fa:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 80064fe:	2304      	movs	r3, #4
 8006500:	2103      	movs	r1, #3
 8006502:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8006506:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 800650a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 800650e:	b083      	sub	sp, #12
 8006510:	602c      	str	r4, [r5, #0]
 8006512:	606c      	str	r4, [r5, #4]
 8006514:	60ac      	str	r4, [r5, #8]
 8006516:	666c      	str	r4, [r5, #100]	; 0x64
 8006518:	81ec      	strh	r4, [r5, #14]
 800651a:	612c      	str	r4, [r5, #16]
 800651c:	616c      	str	r4, [r5, #20]
 800651e:	61ac      	str	r4, [r5, #24]
 8006520:	81ab      	strh	r3, [r5, #12]
 8006522:	4621      	mov	r1, r4
 8006524:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8006528:	2208      	movs	r2, #8
 800652a:	f7fd fb09 	bl	8003b40 <memset>
 800652e:	68be      	ldr	r6, [r7, #8]
 8006530:	f8df b098 	ldr.w	fp, [pc, #152]	; 80065cc <__sinit.part.1+0xe0>
 8006534:	f8df a098 	ldr.w	sl, [pc, #152]	; 80065d0 <__sinit.part.1+0xe4>
 8006538:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80065d4 <__sinit.part.1+0xe8>
 800653c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80065d8 <__sinit.part.1+0xec>
 8006540:	f8c5 b020 	str.w	fp, [r5, #32]
 8006544:	2301      	movs	r3, #1
 8006546:	2209      	movs	r2, #9
 8006548:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 800654c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8006550:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8006554:	61ed      	str	r5, [r5, #28]
 8006556:	4621      	mov	r1, r4
 8006558:	81f3      	strh	r3, [r6, #14]
 800655a:	81b2      	strh	r2, [r6, #12]
 800655c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8006560:	6034      	str	r4, [r6, #0]
 8006562:	6074      	str	r4, [r6, #4]
 8006564:	60b4      	str	r4, [r6, #8]
 8006566:	6674      	str	r4, [r6, #100]	; 0x64
 8006568:	6134      	str	r4, [r6, #16]
 800656a:	6174      	str	r4, [r6, #20]
 800656c:	61b4      	str	r4, [r6, #24]
 800656e:	2208      	movs	r2, #8
 8006570:	9301      	str	r3, [sp, #4]
 8006572:	f7fd fae5 	bl	8003b40 <memset>
 8006576:	68fd      	ldr	r5, [r7, #12]
 8006578:	61f6      	str	r6, [r6, #28]
 800657a:	2012      	movs	r0, #18
 800657c:	2202      	movs	r2, #2
 800657e:	f8c6 b020 	str.w	fp, [r6, #32]
 8006582:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8006586:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 800658a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 800658e:	4621      	mov	r1, r4
 8006590:	81a8      	strh	r0, [r5, #12]
 8006592:	81ea      	strh	r2, [r5, #14]
 8006594:	602c      	str	r4, [r5, #0]
 8006596:	606c      	str	r4, [r5, #4]
 8006598:	60ac      	str	r4, [r5, #8]
 800659a:	666c      	str	r4, [r5, #100]	; 0x64
 800659c:	612c      	str	r4, [r5, #16]
 800659e:	616c      	str	r4, [r5, #20]
 80065a0:	61ac      	str	r4, [r5, #24]
 80065a2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80065a6:	2208      	movs	r2, #8
 80065a8:	f7fd faca 	bl	8003b40 <memset>
 80065ac:	9b01      	ldr	r3, [sp, #4]
 80065ae:	61ed      	str	r5, [r5, #28]
 80065b0:	f8c5 b020 	str.w	fp, [r5, #32]
 80065b4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80065b8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80065bc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80065c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80065c2:	b003      	add	sp, #12
 80065c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c8:	080064e1 	.word	0x080064e1
 80065cc:	0800824d 	.word	0x0800824d
 80065d0:	08008275 	.word	0x08008275
 80065d4:	080082ad 	.word	0x080082ad
 80065d8:	080082cd 	.word	0x080082cd

080065dc <__sfmoreglue>:
 80065dc:	b570      	push	{r4, r5, r6, lr}
 80065de:	2368      	movs	r3, #104	; 0x68
 80065e0:	1e4d      	subs	r5, r1, #1
 80065e2:	fb03 f505 	mul.w	r5, r3, r5
 80065e6:	460e      	mov	r6, r1
 80065e8:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80065ec:	f000 fc48 	bl	8006e80 <_malloc_r>
 80065f0:	4604      	mov	r4, r0
 80065f2:	b140      	cbz	r0, 8006606 <__sfmoreglue+0x2a>
 80065f4:	2100      	movs	r1, #0
 80065f6:	300c      	adds	r0, #12
 80065f8:	6066      	str	r6, [r4, #4]
 80065fa:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80065fe:	6021      	str	r1, [r4, #0]
 8006600:	60a0      	str	r0, [r4, #8]
 8006602:	f7fd fa9d 	bl	8003b40 <memset>
 8006606:	4620      	mov	r0, r4
 8006608:	bd70      	pop	{r4, r5, r6, pc}
 800660a:	bf00      	nop

0800660c <__sfp>:
 800660c:	4b20      	ldr	r3, [pc, #128]	; (8006690 <__sfp+0x84>)
 800660e:	b570      	push	{r4, r5, r6, lr}
 8006610:	681d      	ldr	r5, [r3, #0]
 8006612:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006614:	4606      	mov	r6, r0
 8006616:	b913      	cbnz	r3, 800661e <__sfp+0x12>
 8006618:	4628      	mov	r0, r5
 800661a:	f7ff ff67 	bl	80064ec <__sinit.part.1>
 800661e:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 8006622:	686b      	ldr	r3, [r5, #4]
 8006624:	68ac      	ldr	r4, [r5, #8]
 8006626:	3b01      	subs	r3, #1
 8006628:	d505      	bpl.n	8006636 <__sfp+0x2a>
 800662a:	e021      	b.n	8006670 <__sfp+0x64>
 800662c:	3b01      	subs	r3, #1
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8006634:	d01c      	beq.n	8006670 <__sfp+0x64>
 8006636:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800663a:	2a00      	cmp	r2, #0
 800663c:	d1f6      	bne.n	800662c <__sfp+0x20>
 800663e:	2500      	movs	r5, #0
 8006640:	2301      	movs	r3, #1
 8006642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006646:	81e2      	strh	r2, [r4, #14]
 8006648:	81a3      	strh	r3, [r4, #12]
 800664a:	6665      	str	r5, [r4, #100]	; 0x64
 800664c:	6025      	str	r5, [r4, #0]
 800664e:	60a5      	str	r5, [r4, #8]
 8006650:	6065      	str	r5, [r4, #4]
 8006652:	6125      	str	r5, [r4, #16]
 8006654:	6165      	str	r5, [r4, #20]
 8006656:	61a5      	str	r5, [r4, #24]
 8006658:	4629      	mov	r1, r5
 800665a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800665e:	2208      	movs	r2, #8
 8006660:	f7fd fa6e 	bl	8003b40 <memset>
 8006664:	6325      	str	r5, [r4, #48]	; 0x30
 8006666:	6365      	str	r5, [r4, #52]	; 0x34
 8006668:	6465      	str	r5, [r4, #68]	; 0x44
 800666a:	64a5      	str	r5, [r4, #72]	; 0x48
 800666c:	4620      	mov	r0, r4
 800666e:	bd70      	pop	{r4, r5, r6, pc}
 8006670:	682b      	ldr	r3, [r5, #0]
 8006672:	b10b      	cbz	r3, 8006678 <__sfp+0x6c>
 8006674:	461d      	mov	r5, r3
 8006676:	e7d4      	b.n	8006622 <__sfp+0x16>
 8006678:	4630      	mov	r0, r6
 800667a:	2104      	movs	r1, #4
 800667c:	f7ff ffae 	bl	80065dc <__sfmoreglue>
 8006680:	6028      	str	r0, [r5, #0]
 8006682:	b108      	cbz	r0, 8006688 <__sfp+0x7c>
 8006684:	4605      	mov	r5, r0
 8006686:	e7cc      	b.n	8006622 <__sfp+0x16>
 8006688:	230c      	movs	r3, #12
 800668a:	6033      	str	r3, [r6, #0]
 800668c:	bd70      	pop	{r4, r5, r6, pc}
 800668e:	bf00      	nop
 8006690:	0800aad0 	.word	0x0800aad0

08006694 <_cleanup>:
 8006694:	4b02      	ldr	r3, [pc, #8]	; (80066a0 <_cleanup+0xc>)
 8006696:	4903      	ldr	r1, [pc, #12]	; (80066a4 <_cleanup+0x10>)
 8006698:	6818      	ldr	r0, [r3, #0]
 800669a:	f000 bb15 	b.w	8006cc8 <_fwalk_reent>
 800669e:	bf00      	nop
 80066a0:	0800aad0 	.word	0x0800aad0
 80066a4:	0800943d 	.word	0x0800943d

080066a8 <__sinit>:
 80066a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80066aa:	b103      	cbz	r3, 80066ae <__sinit+0x6>
 80066ac:	4770      	bx	lr
 80066ae:	f7ff bf1d 	b.w	80064ec <__sinit.part.1>
 80066b2:	bf00      	nop

080066b4 <__sfp_lock_acquire>:
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop

080066b8 <__sfp_lock_release>:
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop

080066bc <__sinit_lock_acquire>:
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop

080066c0 <__sinit_lock_release>:
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop

080066c4 <__fp_lock_all>:
 80066c4:	4b02      	ldr	r3, [pc, #8]	; (80066d0 <__fp_lock_all+0xc>)
 80066c6:	4903      	ldr	r1, [pc, #12]	; (80066d4 <__fp_lock_all+0x10>)
 80066c8:	6818      	ldr	r0, [r3, #0]
 80066ca:	f000 bad7 	b.w	8006c7c <_fwalk>
 80066ce:	bf00      	nop
 80066d0:	200004a8 	.word	0x200004a8
 80066d4:	080064d9 	.word	0x080064d9

080066d8 <__fp_unlock_all>:
 80066d8:	4b02      	ldr	r3, [pc, #8]	; (80066e4 <__fp_unlock_all+0xc>)
 80066da:	4903      	ldr	r1, [pc, #12]	; (80066e8 <__fp_unlock_all+0x10>)
 80066dc:	6818      	ldr	r0, [r3, #0]
 80066de:	f000 bacd 	b.w	8006c7c <_fwalk>
 80066e2:	bf00      	nop
 80066e4:	200004a8 	.word	0x200004a8
 80066e8:	080064dd 	.word	0x080064dd

080066ec <__libc_fini_array>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	4b08      	ldr	r3, [pc, #32]	; (8006710 <__libc_fini_array+0x24>)
 80066f0:	4d08      	ldr	r5, [pc, #32]	; (8006714 <__libc_fini_array+0x28>)
 80066f2:	1aed      	subs	r5, r5, r3
 80066f4:	10ac      	asrs	r4, r5, #2
 80066f6:	bf18      	it	ne
 80066f8:	18ed      	addne	r5, r5, r3
 80066fa:	d005      	beq.n	8006708 <__libc_fini_array+0x1c>
 80066fc:	3c01      	subs	r4, #1
 80066fe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006702:	4798      	blx	r3
 8006704:	2c00      	cmp	r4, #0
 8006706:	d1f9      	bne.n	80066fc <__libc_fini_array+0x10>
 8006708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800670c:	f004 bad2 	b.w	800acb4 <_fini>
 8006710:	0800acc0 	.word	0x0800acc0
 8006714:	0800acc4 	.word	0x0800acc4

08006718 <_malloc_trim_r>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	4f23      	ldr	r7, [pc, #140]	; (80067a8 <_malloc_trim_r+0x90>)
 800671c:	460c      	mov	r4, r1
 800671e:	4606      	mov	r6, r0
 8006720:	f000 feee 	bl	8007500 <__malloc_lock>
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	685d      	ldr	r5, [r3, #4]
 8006728:	f025 0503 	bic.w	r5, r5, #3
 800672c:	1b29      	subs	r1, r5, r4
 800672e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8006732:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8006736:	f021 010f 	bic.w	r1, r1, #15
 800673a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800673e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8006742:	db07      	blt.n	8006754 <_malloc_trim_r+0x3c>
 8006744:	4630      	mov	r0, r6
 8006746:	2100      	movs	r1, #0
 8006748:	f001 fd6e 	bl	8008228 <_sbrk_r>
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	442b      	add	r3, r5
 8006750:	4298      	cmp	r0, r3
 8006752:	d004      	beq.n	800675e <_malloc_trim_r+0x46>
 8006754:	4630      	mov	r0, r6
 8006756:	f000 fed5 	bl	8007504 <__malloc_unlock>
 800675a:	2000      	movs	r0, #0
 800675c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800675e:	4630      	mov	r0, r6
 8006760:	4261      	negs	r1, r4
 8006762:	f001 fd61 	bl	8008228 <_sbrk_r>
 8006766:	3001      	adds	r0, #1
 8006768:	d00d      	beq.n	8006786 <_malloc_trim_r+0x6e>
 800676a:	4b10      	ldr	r3, [pc, #64]	; (80067ac <_malloc_trim_r+0x94>)
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	6819      	ldr	r1, [r3, #0]
 8006770:	1b2d      	subs	r5, r5, r4
 8006772:	f045 0501 	orr.w	r5, r5, #1
 8006776:	4630      	mov	r0, r6
 8006778:	1b09      	subs	r1, r1, r4
 800677a:	6055      	str	r5, [r2, #4]
 800677c:	6019      	str	r1, [r3, #0]
 800677e:	f000 fec1 	bl	8007504 <__malloc_unlock>
 8006782:	2001      	movs	r0, #1
 8006784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006786:	4630      	mov	r0, r6
 8006788:	2100      	movs	r1, #0
 800678a:	f001 fd4d 	bl	8008228 <_sbrk_r>
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	1a83      	subs	r3, r0, r2
 8006792:	2b0f      	cmp	r3, #15
 8006794:	ddde      	ble.n	8006754 <_malloc_trim_r+0x3c>
 8006796:	4c06      	ldr	r4, [pc, #24]	; (80067b0 <_malloc_trim_r+0x98>)
 8006798:	4904      	ldr	r1, [pc, #16]	; (80067ac <_malloc_trim_r+0x94>)
 800679a:	6824      	ldr	r4, [r4, #0]
 800679c:	f043 0301 	orr.w	r3, r3, #1
 80067a0:	1b00      	subs	r0, r0, r4
 80067a2:	6053      	str	r3, [r2, #4]
 80067a4:	6008      	str	r0, [r1, #0]
 80067a6:	e7d5      	b.n	8006754 <_malloc_trim_r+0x3c>
 80067a8:	20000528 	.word	0x20000528
 80067ac:	20010494 	.word	0x20010494
 80067b0:	20000934 	.word	0x20000934

080067b4 <_free_r>:
 80067b4:	2900      	cmp	r1, #0
 80067b6:	d04e      	beq.n	8006856 <_free_r+0xa2>
 80067b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067bc:	460c      	mov	r4, r1
 80067be:	4680      	mov	r8, r0
 80067c0:	f000 fe9e 	bl	8007500 <__malloc_lock>
 80067c4:	f854 7c04 	ldr.w	r7, [r4, #-4]
 80067c8:	4962      	ldr	r1, [pc, #392]	; (8006954 <_free_r+0x1a0>)
 80067ca:	f027 0201 	bic.w	r2, r7, #1
 80067ce:	f1a4 0508 	sub.w	r5, r4, #8
 80067d2:	18ab      	adds	r3, r5, r2
 80067d4:	688e      	ldr	r6, [r1, #8]
 80067d6:	6858      	ldr	r0, [r3, #4]
 80067d8:	429e      	cmp	r6, r3
 80067da:	f020 0003 	bic.w	r0, r0, #3
 80067de:	d05a      	beq.n	8006896 <_free_r+0xe2>
 80067e0:	07fe      	lsls	r6, r7, #31
 80067e2:	6058      	str	r0, [r3, #4]
 80067e4:	d40b      	bmi.n	80067fe <_free_r+0x4a>
 80067e6:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80067ea:	1bed      	subs	r5, r5, r7
 80067ec:	f101 0e08 	add.w	lr, r1, #8
 80067f0:	68ac      	ldr	r4, [r5, #8]
 80067f2:	4574      	cmp	r4, lr
 80067f4:	443a      	add	r2, r7
 80067f6:	d067      	beq.n	80068c8 <_free_r+0x114>
 80067f8:	68ef      	ldr	r7, [r5, #12]
 80067fa:	60e7      	str	r7, [r4, #12]
 80067fc:	60bc      	str	r4, [r7, #8]
 80067fe:	181c      	adds	r4, r3, r0
 8006800:	6864      	ldr	r4, [r4, #4]
 8006802:	07e4      	lsls	r4, r4, #31
 8006804:	d40c      	bmi.n	8006820 <_free_r+0x6c>
 8006806:	4f54      	ldr	r7, [pc, #336]	; (8006958 <_free_r+0x1a4>)
 8006808:	689c      	ldr	r4, [r3, #8]
 800680a:	42bc      	cmp	r4, r7
 800680c:	4402      	add	r2, r0
 800680e:	d07c      	beq.n	800690a <_free_r+0x156>
 8006810:	68d8      	ldr	r0, [r3, #12]
 8006812:	60e0      	str	r0, [r4, #12]
 8006814:	f042 0301 	orr.w	r3, r2, #1
 8006818:	6084      	str	r4, [r0, #8]
 800681a:	606b      	str	r3, [r5, #4]
 800681c:	50aa      	str	r2, [r5, r2]
 800681e:	e003      	b.n	8006828 <_free_r+0x74>
 8006820:	f042 0301 	orr.w	r3, r2, #1
 8006824:	606b      	str	r3, [r5, #4]
 8006826:	50aa      	str	r2, [r5, r2]
 8006828:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800682c:	d214      	bcs.n	8006858 <_free_r+0xa4>
 800682e:	08d2      	lsrs	r2, r2, #3
 8006830:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8006834:	6848      	ldr	r0, [r1, #4]
 8006836:	689f      	ldr	r7, [r3, #8]
 8006838:	60af      	str	r7, [r5, #8]
 800683a:	1092      	asrs	r2, r2, #2
 800683c:	2401      	movs	r4, #1
 800683e:	fa04 f202 	lsl.w	r2, r4, r2
 8006842:	4310      	orrs	r0, r2
 8006844:	60eb      	str	r3, [r5, #12]
 8006846:	6048      	str	r0, [r1, #4]
 8006848:	609d      	str	r5, [r3, #8]
 800684a:	60fd      	str	r5, [r7, #12]
 800684c:	4640      	mov	r0, r8
 800684e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006852:	f000 be57 	b.w	8007504 <__malloc_unlock>
 8006856:	4770      	bx	lr
 8006858:	0a53      	lsrs	r3, r2, #9
 800685a:	2b04      	cmp	r3, #4
 800685c:	d847      	bhi.n	80068ee <_free_r+0x13a>
 800685e:	0993      	lsrs	r3, r2, #6
 8006860:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8006864:	0060      	lsls	r0, r4, #1
 8006866:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800686a:	493a      	ldr	r1, [pc, #232]	; (8006954 <_free_r+0x1a0>)
 800686c:	6883      	ldr	r3, [r0, #8]
 800686e:	4283      	cmp	r3, r0
 8006870:	d043      	beq.n	80068fa <_free_r+0x146>
 8006872:	6859      	ldr	r1, [r3, #4]
 8006874:	f021 0103 	bic.w	r1, r1, #3
 8006878:	4291      	cmp	r1, r2
 800687a:	d902      	bls.n	8006882 <_free_r+0xce>
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	4298      	cmp	r0, r3
 8006880:	d1f7      	bne.n	8006872 <_free_r+0xbe>
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	60ea      	str	r2, [r5, #12]
 8006886:	60ab      	str	r3, [r5, #8]
 8006888:	4640      	mov	r0, r8
 800688a:	6095      	str	r5, [r2, #8]
 800688c:	60dd      	str	r5, [r3, #12]
 800688e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006892:	f000 be37 	b.w	8007504 <__malloc_unlock>
 8006896:	07ff      	lsls	r7, r7, #31
 8006898:	4402      	add	r2, r0
 800689a:	d407      	bmi.n	80068ac <_free_r+0xf8>
 800689c:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80068a0:	1aed      	subs	r5, r5, r3
 80068a2:	441a      	add	r2, r3
 80068a4:	68a8      	ldr	r0, [r5, #8]
 80068a6:	68eb      	ldr	r3, [r5, #12]
 80068a8:	60c3      	str	r3, [r0, #12]
 80068aa:	6098      	str	r0, [r3, #8]
 80068ac:	4b2b      	ldr	r3, [pc, #172]	; (800695c <_free_r+0x1a8>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f042 0001 	orr.w	r0, r2, #1
 80068b4:	429a      	cmp	r2, r3
 80068b6:	6068      	str	r0, [r5, #4]
 80068b8:	608d      	str	r5, [r1, #8]
 80068ba:	d3c7      	bcc.n	800684c <_free_r+0x98>
 80068bc:	4b28      	ldr	r3, [pc, #160]	; (8006960 <_free_r+0x1ac>)
 80068be:	4640      	mov	r0, r8
 80068c0:	6819      	ldr	r1, [r3, #0]
 80068c2:	f7ff ff29 	bl	8006718 <_malloc_trim_r>
 80068c6:	e7c1      	b.n	800684c <_free_r+0x98>
 80068c8:	1819      	adds	r1, r3, r0
 80068ca:	6849      	ldr	r1, [r1, #4]
 80068cc:	07c9      	lsls	r1, r1, #31
 80068ce:	d409      	bmi.n	80068e4 <_free_r+0x130>
 80068d0:	68d9      	ldr	r1, [r3, #12]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	4402      	add	r2, r0
 80068d6:	f042 0001 	orr.w	r0, r2, #1
 80068da:	60d9      	str	r1, [r3, #12]
 80068dc:	608b      	str	r3, [r1, #8]
 80068de:	6068      	str	r0, [r5, #4]
 80068e0:	50aa      	str	r2, [r5, r2]
 80068e2:	e7b3      	b.n	800684c <_free_r+0x98>
 80068e4:	f042 0301 	orr.w	r3, r2, #1
 80068e8:	606b      	str	r3, [r5, #4]
 80068ea:	50aa      	str	r2, [r5, r2]
 80068ec:	e7ae      	b.n	800684c <_free_r+0x98>
 80068ee:	2b14      	cmp	r3, #20
 80068f0:	d814      	bhi.n	800691c <_free_r+0x168>
 80068f2:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 80068f6:	0060      	lsls	r0, r4, #1
 80068f8:	e7b5      	b.n	8006866 <_free_r+0xb2>
 80068fa:	684a      	ldr	r2, [r1, #4]
 80068fc:	10a4      	asrs	r4, r4, #2
 80068fe:	2001      	movs	r0, #1
 8006900:	40a0      	lsls	r0, r4
 8006902:	4302      	orrs	r2, r0
 8006904:	604a      	str	r2, [r1, #4]
 8006906:	461a      	mov	r2, r3
 8006908:	e7bc      	b.n	8006884 <_free_r+0xd0>
 800690a:	f042 0301 	orr.w	r3, r2, #1
 800690e:	614d      	str	r5, [r1, #20]
 8006910:	610d      	str	r5, [r1, #16]
 8006912:	60ec      	str	r4, [r5, #12]
 8006914:	60ac      	str	r4, [r5, #8]
 8006916:	606b      	str	r3, [r5, #4]
 8006918:	50aa      	str	r2, [r5, r2]
 800691a:	e797      	b.n	800684c <_free_r+0x98>
 800691c:	2b54      	cmp	r3, #84	; 0x54
 800691e:	d804      	bhi.n	800692a <_free_r+0x176>
 8006920:	0b13      	lsrs	r3, r2, #12
 8006922:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8006926:	0060      	lsls	r0, r4, #1
 8006928:	e79d      	b.n	8006866 <_free_r+0xb2>
 800692a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800692e:	d804      	bhi.n	800693a <_free_r+0x186>
 8006930:	0bd3      	lsrs	r3, r2, #15
 8006932:	f103 0477 	add.w	r4, r3, #119	; 0x77
 8006936:	0060      	lsls	r0, r4, #1
 8006938:	e795      	b.n	8006866 <_free_r+0xb2>
 800693a:	f240 5054 	movw	r0, #1364	; 0x554
 800693e:	4283      	cmp	r3, r0
 8006940:	d804      	bhi.n	800694c <_free_r+0x198>
 8006942:	0c93      	lsrs	r3, r2, #18
 8006944:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8006948:	0060      	lsls	r0, r4, #1
 800694a:	e78c      	b.n	8006866 <_free_r+0xb2>
 800694c:	20fc      	movs	r0, #252	; 0xfc
 800694e:	247e      	movs	r4, #126	; 0x7e
 8006950:	e789      	b.n	8006866 <_free_r+0xb2>
 8006952:	bf00      	nop
 8006954:	20000528 	.word	0x20000528
 8006958:	20000530 	.word	0x20000530
 800695c:	20000930 	.word	0x20000930
 8006960:	20010490 	.word	0x20010490

08006964 <__sfvwrite_r>:
 8006964:	6893      	ldr	r3, [r2, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d07a      	beq.n	8006a60 <__sfvwrite_r+0xfc>
 800696a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800696e:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8006972:	f01e 0f08 	tst.w	lr, #8
 8006976:	b083      	sub	sp, #12
 8006978:	460c      	mov	r4, r1
 800697a:	4681      	mov	r9, r0
 800697c:	4616      	mov	r6, r2
 800697e:	d026      	beq.n	80069ce <__sfvwrite_r+0x6a>
 8006980:	690b      	ldr	r3, [r1, #16]
 8006982:	b323      	cbz	r3, 80069ce <__sfvwrite_r+0x6a>
 8006984:	f00e 0802 	and.w	r8, lr, #2
 8006988:	fa1f f088 	uxth.w	r0, r8
 800698c:	6835      	ldr	r5, [r6, #0]
 800698e:	b370      	cbz	r0, 80069ee <__sfvwrite_r+0x8a>
 8006990:	f04f 0a00 	mov.w	sl, #0
 8006994:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 8006c78 <__sfvwrite_r+0x314>
 8006998:	46d0      	mov	r8, sl
 800699a:	45d8      	cmp	r8, fp
 800699c:	4643      	mov	r3, r8
 800699e:	4652      	mov	r2, sl
 80069a0:	bf28      	it	cs
 80069a2:	465b      	movcs	r3, fp
 80069a4:	4648      	mov	r0, r9
 80069a6:	f1b8 0f00 	cmp.w	r8, #0
 80069aa:	d053      	beq.n	8006a54 <__sfvwrite_r+0xf0>
 80069ac:	69e1      	ldr	r1, [r4, #28]
 80069ae:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80069b0:	47b8      	blx	r7
 80069b2:	2800      	cmp	r0, #0
 80069b4:	dd73      	ble.n	8006a9e <__sfvwrite_r+0x13a>
 80069b6:	68b3      	ldr	r3, [r6, #8]
 80069b8:	1a1b      	subs	r3, r3, r0
 80069ba:	4482      	add	sl, r0
 80069bc:	ebc0 0808 	rsb	r8, r0, r8
 80069c0:	60b3      	str	r3, [r6, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1e9      	bne.n	800699a <__sfvwrite_r+0x36>
 80069c6:	2000      	movs	r0, #0
 80069c8:	b003      	add	sp, #12
 80069ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ce:	4648      	mov	r0, r9
 80069d0:	4621      	mov	r1, r4
 80069d2:	f7fe fbeb 	bl	80051ac <__swsetup_r>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	f040 8145 	bne.w	8006c66 <__sfvwrite_r+0x302>
 80069dc:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 80069e0:	6835      	ldr	r5, [r6, #0]
 80069e2:	f00e 0802 	and.w	r8, lr, #2
 80069e6:	fa1f f088 	uxth.w	r0, r8
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d1d0      	bne.n	8006990 <__sfvwrite_r+0x2c>
 80069ee:	f01e 0b01 	ands.w	fp, lr, #1
 80069f2:	d15d      	bne.n	8006ab0 <__sfvwrite_r+0x14c>
 80069f4:	46d8      	mov	r8, fp
 80069f6:	f1b8 0f00 	cmp.w	r8, #0
 80069fa:	d025      	beq.n	8006a48 <__sfvwrite_r+0xe4>
 80069fc:	f41e 7f00 	tst.w	lr, #512	; 0x200
 8006a00:	68a7      	ldr	r7, [r4, #8]
 8006a02:	d02f      	beq.n	8006a64 <__sfvwrite_r+0x100>
 8006a04:	45b8      	cmp	r8, r7
 8006a06:	46ba      	mov	sl, r7
 8006a08:	f0c0 80a9 	bcc.w	8006b5e <__sfvwrite_r+0x1fa>
 8006a0c:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 8006a10:	f040 80b6 	bne.w	8006b80 <__sfvwrite_r+0x21c>
 8006a14:	6820      	ldr	r0, [r4, #0]
 8006a16:	4652      	mov	r2, sl
 8006a18:	4659      	mov	r1, fp
 8006a1a:	f000 fd0d 	bl	8007438 <memmove>
 8006a1e:	68a0      	ldr	r0, [r4, #8]
 8006a20:	6822      	ldr	r2, [r4, #0]
 8006a22:	1bc0      	subs	r0, r0, r7
 8006a24:	eb02 030a 	add.w	r3, r2, sl
 8006a28:	60a0      	str	r0, [r4, #8]
 8006a2a:	6023      	str	r3, [r4, #0]
 8006a2c:	4640      	mov	r0, r8
 8006a2e:	68b3      	ldr	r3, [r6, #8]
 8006a30:	1a1b      	subs	r3, r3, r0
 8006a32:	4483      	add	fp, r0
 8006a34:	ebc0 0808 	rsb	r8, r0, r8
 8006a38:	60b3      	str	r3, [r6, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0c3      	beq.n	80069c6 <__sfvwrite_r+0x62>
 8006a3e:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8006a42:	f1b8 0f00 	cmp.w	r8, #0
 8006a46:	d1d9      	bne.n	80069fc <__sfvwrite_r+0x98>
 8006a48:	f8d5 b000 	ldr.w	fp, [r5]
 8006a4c:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8006a50:	3508      	adds	r5, #8
 8006a52:	e7d0      	b.n	80069f6 <__sfvwrite_r+0x92>
 8006a54:	f8d5 a000 	ldr.w	sl, [r5]
 8006a58:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8006a5c:	3508      	adds	r5, #8
 8006a5e:	e79c      	b.n	800699a <__sfvwrite_r+0x36>
 8006a60:	2000      	movs	r0, #0
 8006a62:	4770      	bx	lr
 8006a64:	6820      	ldr	r0, [r4, #0]
 8006a66:	6923      	ldr	r3, [r4, #16]
 8006a68:	4298      	cmp	r0, r3
 8006a6a:	d803      	bhi.n	8006a74 <__sfvwrite_r+0x110>
 8006a6c:	6962      	ldr	r2, [r4, #20]
 8006a6e:	4590      	cmp	r8, r2
 8006a70:	f080 80b9 	bcs.w	8006be6 <__sfvwrite_r+0x282>
 8006a74:	4547      	cmp	r7, r8
 8006a76:	bf28      	it	cs
 8006a78:	4647      	movcs	r7, r8
 8006a7a:	463a      	mov	r2, r7
 8006a7c:	4659      	mov	r1, fp
 8006a7e:	f000 fcdb 	bl	8007438 <memmove>
 8006a82:	68a3      	ldr	r3, [r4, #8]
 8006a84:	6822      	ldr	r2, [r4, #0]
 8006a86:	1bdb      	subs	r3, r3, r7
 8006a88:	443a      	add	r2, r7
 8006a8a:	60a3      	str	r3, [r4, #8]
 8006a8c:	6022      	str	r2, [r4, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d14a      	bne.n	8006b28 <__sfvwrite_r+0x1c4>
 8006a92:	4648      	mov	r0, r9
 8006a94:	4621      	mov	r1, r4
 8006a96:	f7ff fcf7 	bl	8006488 <_fflush_r>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d044      	beq.n	8006b28 <__sfvwrite_r+0x1c4>
 8006a9e:	89a3      	ldrh	r3, [r4, #12]
 8006aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006aa8:	81a3      	strh	r3, [r4, #12]
 8006aaa:	b003      	add	sp, #12
 8006aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab0:	4680      	mov	r8, r0
 8006ab2:	9000      	str	r0, [sp, #0]
 8006ab4:	4683      	mov	fp, r0
 8006ab6:	4682      	mov	sl, r0
 8006ab8:	f1ba 0f00 	cmp.w	sl, #0
 8006abc:	d02c      	beq.n	8006b18 <__sfvwrite_r+0x1b4>
 8006abe:	9b00      	ldr	r3, [sp, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d050      	beq.n	8006b66 <__sfvwrite_r+0x202>
 8006ac4:	6820      	ldr	r0, [r4, #0]
 8006ac6:	6921      	ldr	r1, [r4, #16]
 8006ac8:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8006acc:	6962      	ldr	r2, [r4, #20]
 8006ace:	45d0      	cmp	r8, sl
 8006ad0:	4643      	mov	r3, r8
 8006ad2:	bf28      	it	cs
 8006ad4:	4653      	movcs	r3, sl
 8006ad6:	4288      	cmp	r0, r1
 8006ad8:	461f      	mov	r7, r3
 8006ada:	d904      	bls.n	8006ae6 <__sfvwrite_r+0x182>
 8006adc:	eb0e 0c02 	add.w	ip, lr, r2
 8006ae0:	4563      	cmp	r3, ip
 8006ae2:	f300 8092 	bgt.w	8006c0a <__sfvwrite_r+0x2a6>
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	db20      	blt.n	8006b2c <__sfvwrite_r+0x1c8>
 8006aea:	4613      	mov	r3, r2
 8006aec:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006aee:	69e1      	ldr	r1, [r4, #28]
 8006af0:	4648      	mov	r0, r9
 8006af2:	465a      	mov	r2, fp
 8006af4:	47b8      	blx	r7
 8006af6:	1e07      	subs	r7, r0, #0
 8006af8:	ddd1      	ble.n	8006a9e <__sfvwrite_r+0x13a>
 8006afa:	ebb8 0807 	subs.w	r8, r8, r7
 8006afe:	d025      	beq.n	8006b4c <__sfvwrite_r+0x1e8>
 8006b00:	68b3      	ldr	r3, [r6, #8]
 8006b02:	1bdb      	subs	r3, r3, r7
 8006b04:	44bb      	add	fp, r7
 8006b06:	ebc7 0a0a 	rsb	sl, r7, sl
 8006b0a:	60b3      	str	r3, [r6, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f43f af5a 	beq.w	80069c6 <__sfvwrite_r+0x62>
 8006b12:	f1ba 0f00 	cmp.w	sl, #0
 8006b16:	d1d2      	bne.n	8006abe <__sfvwrite_r+0x15a>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f8d5 b000 	ldr.w	fp, [r5]
 8006b1e:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	3508      	adds	r5, #8
 8006b26:	e7c7      	b.n	8006ab8 <__sfvwrite_r+0x154>
 8006b28:	4638      	mov	r0, r7
 8006b2a:	e780      	b.n	8006a2e <__sfvwrite_r+0xca>
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	4659      	mov	r1, fp
 8006b30:	9301      	str	r3, [sp, #4]
 8006b32:	f000 fc81 	bl	8007438 <memmove>
 8006b36:	68a2      	ldr	r2, [r4, #8]
 8006b38:	6821      	ldr	r1, [r4, #0]
 8006b3a:	9b01      	ldr	r3, [sp, #4]
 8006b3c:	ebb8 0807 	subs.w	r8, r8, r7
 8006b40:	eba2 0203 	sub.w	r2, r2, r3
 8006b44:	440b      	add	r3, r1
 8006b46:	60a2      	str	r2, [r4, #8]
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	d1d9      	bne.n	8006b00 <__sfvwrite_r+0x19c>
 8006b4c:	4648      	mov	r0, r9
 8006b4e:	4621      	mov	r1, r4
 8006b50:	f7ff fc9a 	bl	8006488 <_fflush_r>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d1a2      	bne.n	8006a9e <__sfvwrite_r+0x13a>
 8006b58:	f8cd 8000 	str.w	r8, [sp]
 8006b5c:	e7d0      	b.n	8006b00 <__sfvwrite_r+0x19c>
 8006b5e:	6820      	ldr	r0, [r4, #0]
 8006b60:	4647      	mov	r7, r8
 8006b62:	46c2      	mov	sl, r8
 8006b64:	e757      	b.n	8006a16 <__sfvwrite_r+0xb2>
 8006b66:	4658      	mov	r0, fp
 8006b68:	210a      	movs	r1, #10
 8006b6a:	4652      	mov	r2, sl
 8006b6c:	f000 fc1a 	bl	80073a4 <memchr>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	d073      	beq.n	8006c5c <__sfvwrite_r+0x2f8>
 8006b74:	3001      	adds	r0, #1
 8006b76:	2301      	movs	r3, #1
 8006b78:	ebcb 0800 	rsb	r8, fp, r0
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	e7a1      	b.n	8006ac4 <__sfvwrite_r+0x160>
 8006b80:	6967      	ldr	r7, [r4, #20]
 8006b82:	6921      	ldr	r1, [r4, #16]
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8006b8a:	1a5b      	subs	r3, r3, r1
 8006b8c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8006b90:	1c58      	adds	r0, r3, #1
 8006b92:	107f      	asrs	r7, r7, #1
 8006b94:	4440      	add	r0, r8
 8006b96:	4287      	cmp	r7, r0
 8006b98:	463a      	mov	r2, r7
 8006b9a:	bf3c      	itt	cc
 8006b9c:	4607      	movcc	r7, r0
 8006b9e:	463a      	movcc	r2, r7
 8006ba0:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	d046      	beq.n	8006c36 <__sfvwrite_r+0x2d2>
 8006ba8:	4611      	mov	r1, r2
 8006baa:	4648      	mov	r0, r9
 8006bac:	f000 f968 	bl	8006e80 <_malloc_r>
 8006bb0:	9b00      	ldr	r3, [sp, #0]
 8006bb2:	4682      	mov	sl, r0
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d059      	beq.n	8006c6c <__sfvwrite_r+0x308>
 8006bb8:	461a      	mov	r2, r3
 8006bba:	6921      	ldr	r1, [r4, #16]
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	f7fc ff25 	bl	8003a0c <memcpy>
 8006bc2:	89a2      	ldrh	r2, [r4, #12]
 8006bc4:	9b00      	ldr	r3, [sp, #0]
 8006bc6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8006bca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bce:	81a2      	strh	r2, [r4, #12]
 8006bd0:	eb0a 0003 	add.w	r0, sl, r3
 8006bd4:	1afb      	subs	r3, r7, r3
 8006bd6:	f8c4 a010 	str.w	sl, [r4, #16]
 8006bda:	6167      	str	r7, [r4, #20]
 8006bdc:	6020      	str	r0, [r4, #0]
 8006bde:	60a3      	str	r3, [r4, #8]
 8006be0:	4647      	mov	r7, r8
 8006be2:	46c2      	mov	sl, r8
 8006be4:	e717      	b.n	8006a16 <__sfvwrite_r+0xb2>
 8006be6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006bea:	4543      	cmp	r3, r8
 8006bec:	bf28      	it	cs
 8006bee:	4643      	movcs	r3, r8
 8006bf0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006bf2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bf6:	4648      	mov	r0, r9
 8006bf8:	fb03 f302 	mul.w	r3, r3, r2
 8006bfc:	69e1      	ldr	r1, [r4, #28]
 8006bfe:	465a      	mov	r2, fp
 8006c00:	47b8      	blx	r7
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f73f af13 	bgt.w	8006a2e <__sfvwrite_r+0xca>
 8006c08:	e749      	b.n	8006a9e <__sfvwrite_r+0x13a>
 8006c0a:	4662      	mov	r2, ip
 8006c0c:	4659      	mov	r1, fp
 8006c0e:	f8cd c004 	str.w	ip, [sp, #4]
 8006c12:	f000 fc11 	bl	8007438 <memmove>
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006c1c:	4463      	add	r3, ip
 8006c1e:	6023      	str	r3, [r4, #0]
 8006c20:	4648      	mov	r0, r9
 8006c22:	4621      	mov	r1, r4
 8006c24:	f7ff fc30 	bl	8006488 <_fflush_r>
 8006c28:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	f47f af36 	bne.w	8006a9e <__sfvwrite_r+0x13a>
 8006c32:	4667      	mov	r7, ip
 8006c34:	e761      	b.n	8006afa <__sfvwrite_r+0x196>
 8006c36:	4648      	mov	r0, r9
 8006c38:	f001 f8d2 	bl	8007de0 <_realloc_r>
 8006c3c:	9b00      	ldr	r3, [sp, #0]
 8006c3e:	4682      	mov	sl, r0
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d1c5      	bne.n	8006bd0 <__sfvwrite_r+0x26c>
 8006c44:	4648      	mov	r0, r9
 8006c46:	6921      	ldr	r1, [r4, #16]
 8006c48:	f7ff fdb4 	bl	80067b4 <_free_r>
 8006c4c:	89a3      	ldrh	r3, [r4, #12]
 8006c4e:	220c      	movs	r2, #12
 8006c50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	f8c9 2000 	str.w	r2, [r9]
 8006c5a:	e721      	b.n	8006aa0 <__sfvwrite_r+0x13c>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	f10a 0801 	add.w	r8, sl, #1
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	e72e      	b.n	8006ac4 <__sfvwrite_r+0x160>
 8006c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c6a:	e6ad      	b.n	80069c8 <__sfvwrite_r+0x64>
 8006c6c:	230c      	movs	r3, #12
 8006c6e:	f8c9 3000 	str.w	r3, [r9]
 8006c72:	89a3      	ldrh	r3, [r4, #12]
 8006c74:	e714      	b.n	8006aa0 <__sfvwrite_r+0x13c>
 8006c76:	bf00      	nop
 8006c78:	7ffffc00 	.word	0x7ffffc00

08006c7c <_fwalk>:
 8006c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c80:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8006c84:	d01b      	beq.n	8006cbe <_fwalk+0x42>
 8006c86:	4688      	mov	r8, r1
 8006c88:	2600      	movs	r6, #0
 8006c8a:	687d      	ldr	r5, [r7, #4]
 8006c8c:	68bc      	ldr	r4, [r7, #8]
 8006c8e:	3d01      	subs	r5, #1
 8006c90:	d40f      	bmi.n	8006cb2 <_fwalk+0x36>
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8006c9a:	d906      	bls.n	8006caa <_fwalk+0x2e>
 8006c9c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	d001      	beq.n	8006caa <_fwalk+0x2e>
 8006ca6:	47c0      	blx	r8
 8006ca8:	4306      	orrs	r6, r0
 8006caa:	1c6b      	adds	r3, r5, #1
 8006cac:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8006cb0:	d1ef      	bne.n	8006c92 <_fwalk+0x16>
 8006cb2:	683f      	ldr	r7, [r7, #0]
 8006cb4:	2f00      	cmp	r7, #0
 8006cb6:	d1e8      	bne.n	8006c8a <_fwalk+0xe>
 8006cb8:	4630      	mov	r0, r6
 8006cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cbe:	463e      	mov	r6, r7
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc6:	bf00      	nop

08006cc8 <_fwalk_reent>:
 8006cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ccc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8006cd0:	d01f      	beq.n	8006d12 <_fwalk_reent+0x4a>
 8006cd2:	4688      	mov	r8, r1
 8006cd4:	4606      	mov	r6, r0
 8006cd6:	f04f 0900 	mov.w	r9, #0
 8006cda:	687d      	ldr	r5, [r7, #4]
 8006cdc:	68bc      	ldr	r4, [r7, #8]
 8006cde:	3d01      	subs	r5, #1
 8006ce0:	d411      	bmi.n	8006d06 <_fwalk_reent+0x3e>
 8006ce2:	89a3      	ldrh	r3, [r4, #12]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8006cea:	d908      	bls.n	8006cfe <_fwalk_reent+0x36>
 8006cec:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	d002      	beq.n	8006cfe <_fwalk_reent+0x36>
 8006cf8:	47c0      	blx	r8
 8006cfa:	ea49 0900 	orr.w	r9, r9, r0
 8006cfe:	1c6b      	adds	r3, r5, #1
 8006d00:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8006d04:	d1ed      	bne.n	8006ce2 <_fwalk_reent+0x1a>
 8006d06:	683f      	ldr	r7, [r7, #0]
 8006d08:	2f00      	cmp	r7, #0
 8006d0a:	d1e6      	bne.n	8006cda <_fwalk_reent+0x12>
 8006d0c:	4648      	mov	r0, r9
 8006d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d12:	46b9      	mov	r9, r7
 8006d14:	4648      	mov	r0, r9
 8006d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d1a:	bf00      	nop

08006d1c <_setlocale_r>:
 8006d1c:	b1c2      	cbz	r2, 8006d50 <_setlocale_r+0x34>
 8006d1e:	b510      	push	{r4, lr}
 8006d20:	4610      	mov	r0, r2
 8006d22:	490c      	ldr	r1, [pc, #48]	; (8006d54 <_setlocale_r+0x38>)
 8006d24:	4614      	mov	r4, r2
 8006d26:	f001 fadf 	bl	80082e8 <strcmp>
 8006d2a:	b908      	cbnz	r0, 8006d30 <_setlocale_r+0x14>
 8006d2c:	480a      	ldr	r0, [pc, #40]	; (8006d58 <_setlocale_r+0x3c>)
 8006d2e:	bd10      	pop	{r4, pc}
 8006d30:	4620      	mov	r0, r4
 8006d32:	4909      	ldr	r1, [pc, #36]	; (8006d58 <_setlocale_r+0x3c>)
 8006d34:	f001 fad8 	bl	80082e8 <strcmp>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	d0f7      	beq.n	8006d2c <_setlocale_r+0x10>
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	4907      	ldr	r1, [pc, #28]	; (8006d5c <_setlocale_r+0x40>)
 8006d40:	f001 fad2 	bl	80082e8 <strcmp>
 8006d44:	4b04      	ldr	r3, [pc, #16]	; (8006d58 <_setlocale_r+0x3c>)
 8006d46:	2800      	cmp	r0, #0
 8006d48:	bf0c      	ite	eq
 8006d4a:	4618      	moveq	r0, r3
 8006d4c:	2000      	movne	r0, #0
 8006d4e:	bd10      	pop	{r4, pc}
 8006d50:	4801      	ldr	r0, [pc, #4]	; (8006d58 <_setlocale_r+0x3c>)
 8006d52:	4770      	bx	lr
 8006d54:	0800ab48 	.word	0x0800ab48
 8006d58:	0800aacc 	.word	0x0800aacc
 8006d5c:	0800a868 	.word	0x0800a868

08006d60 <__locale_charset>:
 8006d60:	4800      	ldr	r0, [pc, #0]	; (8006d64 <__locale_charset+0x4>)
 8006d62:	4770      	bx	lr
 8006d64:	20000504 	.word	0x20000504

08006d68 <__locale_mb_cur_max>:
 8006d68:	4b01      	ldr	r3, [pc, #4]	; (8006d70 <__locale_mb_cur_max+0x8>)
 8006d6a:	6818      	ldr	r0, [r3, #0]
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	20000524 	.word	0x20000524

08006d74 <__locale_msgcharset>:
 8006d74:	4800      	ldr	r0, [pc, #0]	; (8006d78 <__locale_msgcharset+0x4>)
 8006d76:	4770      	bx	lr
 8006d78:	200004ac 	.word	0x200004ac

08006d7c <__locale_cjk_lang>:
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	4770      	bx	lr

08006d80 <_localeconv_r>:
 8006d80:	4800      	ldr	r0, [pc, #0]	; (8006d84 <_localeconv_r+0x4>)
 8006d82:	4770      	bx	lr
 8006d84:	200004cc 	.word	0x200004cc

08006d88 <setlocale>:
 8006d88:	4b02      	ldr	r3, [pc, #8]	; (8006d94 <setlocale+0xc>)
 8006d8a:	460a      	mov	r2, r1
 8006d8c:	4601      	mov	r1, r0
 8006d8e:	6818      	ldr	r0, [r3, #0]
 8006d90:	f7ff bfc4 	b.w	8006d1c <_setlocale_r>
 8006d94:	200004a8 	.word	0x200004a8

08006d98 <localeconv>:
 8006d98:	4800      	ldr	r0, [pc, #0]	; (8006d9c <localeconv+0x4>)
 8006d9a:	4770      	bx	lr
 8006d9c:	200004cc 	.word	0x200004cc

08006da0 <__smakebuf_r>:
 8006da0:	898b      	ldrh	r3, [r1, #12]
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	f012 0f02 	tst.w	r2, #2
 8006da8:	d13c      	bne.n	8006e24 <__smakebuf_r+0x84>
 8006daa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dac:	460c      	mov	r4, r1
 8006dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db2:	2900      	cmp	r1, #0
 8006db4:	b091      	sub	sp, #68	; 0x44
 8006db6:	4605      	mov	r5, r0
 8006db8:	db19      	blt.n	8006dee <__smakebuf_r+0x4e>
 8006dba:	aa01      	add	r2, sp, #4
 8006dbc:	f002 fc06 	bl	80095cc <_fstat_r>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	db12      	blt.n	8006dea <__smakebuf_r+0x4a>
 8006dc4:	9b02      	ldr	r3, [sp, #8]
 8006dc6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dce:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 8006dd2:	fab7 f787 	clz	r7, r7
 8006dd6:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8006dda:	d02a      	beq.n	8006e32 <__smakebuf_r+0x92>
 8006ddc:	89a3      	ldrh	r3, [r4, #12]
 8006dde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006de2:	81a3      	strh	r3, [r4, #12]
 8006de4:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8006de8:	e00b      	b.n	8006e02 <__smakebuf_r+0x62>
 8006dea:	89a3      	ldrh	r3, [r4, #12]
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006df2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006df6:	81a3      	strh	r3, [r4, #12]
 8006df8:	bf0c      	ite	eq
 8006dfa:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8006dfe:	2640      	movne	r6, #64	; 0x40
 8006e00:	2700      	movs	r7, #0
 8006e02:	4628      	mov	r0, r5
 8006e04:	4631      	mov	r1, r6
 8006e06:	f000 f83b 	bl	8006e80 <_malloc_r>
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	b340      	cbz	r0, 8006e60 <__smakebuf_r+0xc0>
 8006e0e:	4a1a      	ldr	r2, [pc, #104]	; (8006e78 <__smakebuf_r+0xd8>)
 8006e10:	63ea      	str	r2, [r5, #60]	; 0x3c
 8006e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e16:	81a3      	strh	r3, [r4, #12]
 8006e18:	6020      	str	r0, [r4, #0]
 8006e1a:	6120      	str	r0, [r4, #16]
 8006e1c:	6166      	str	r6, [r4, #20]
 8006e1e:	b99f      	cbnz	r7, 8006e48 <__smakebuf_r+0xa8>
 8006e20:	b011      	add	sp, #68	; 0x44
 8006e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e24:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8006e28:	2201      	movs	r2, #1
 8006e2a:	600b      	str	r3, [r1, #0]
 8006e2c:	610b      	str	r3, [r1, #16]
 8006e2e:	614a      	str	r2, [r1, #20]
 8006e30:	4770      	bx	lr
 8006e32:	4b12      	ldr	r3, [pc, #72]	; (8006e7c <__smakebuf_r+0xdc>)
 8006e34:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d1d0      	bne.n	8006ddc <__smakebuf_r+0x3c>
 8006e3a:	89a3      	ldrh	r3, [r4, #12]
 8006e3c:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8006e40:	4333      	orrs	r3, r6
 8006e42:	81a3      	strh	r3, [r4, #12]
 8006e44:	64e6      	str	r6, [r4, #76]	; 0x4c
 8006e46:	e7dc      	b.n	8006e02 <__smakebuf_r+0x62>
 8006e48:	4628      	mov	r0, r5
 8006e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e4e:	f002 fbd1 	bl	80095f4 <_isatty_r>
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d0e4      	beq.n	8006e20 <__smakebuf_r+0x80>
 8006e56:	89a3      	ldrh	r3, [r4, #12]
 8006e58:	f043 0301 	orr.w	r3, r3, #1
 8006e5c:	81a3      	strh	r3, [r4, #12]
 8006e5e:	e7df      	b.n	8006e20 <__smakebuf_r+0x80>
 8006e60:	059a      	lsls	r2, r3, #22
 8006e62:	d4dd      	bmi.n	8006e20 <__smakebuf_r+0x80>
 8006e64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e68:	f043 0302 	orr.w	r3, r3, #2
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	81a3      	strh	r3, [r4, #12]
 8006e70:	6022      	str	r2, [r4, #0]
 8006e72:	6122      	str	r2, [r4, #16]
 8006e74:	6161      	str	r1, [r4, #20]
 8006e76:	e7d3      	b.n	8006e20 <__smakebuf_r+0x80>
 8006e78:	080064e1 	.word	0x080064e1
 8006e7c:	080082ad 	.word	0x080082ad

08006e80 <_malloc_r>:
 8006e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e84:	f101 050b 	add.w	r5, r1, #11
 8006e88:	2d16      	cmp	r5, #22
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	4606      	mov	r6, r0
 8006e8e:	d927      	bls.n	8006ee0 <_malloc_r+0x60>
 8006e90:	f035 0507 	bics.w	r5, r5, #7
 8006e94:	f100 80b6 	bmi.w	8007004 <_malloc_r+0x184>
 8006e98:	42a9      	cmp	r1, r5
 8006e9a:	f200 80b3 	bhi.w	8007004 <_malloc_r+0x184>
 8006e9e:	f000 fb2f 	bl	8007500 <__malloc_lock>
 8006ea2:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8006ea6:	d222      	bcs.n	8006eee <_malloc_r+0x6e>
 8006ea8:	4fc2      	ldr	r7, [pc, #776]	; (80071b4 <_malloc_r+0x334>)
 8006eaa:	08e8      	lsrs	r0, r5, #3
 8006eac:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8006eb0:	68dc      	ldr	r4, [r3, #12]
 8006eb2:	429c      	cmp	r4, r3
 8006eb4:	f000 81c8 	beq.w	8007248 <_malloc_r+0x3c8>
 8006eb8:	6863      	ldr	r3, [r4, #4]
 8006eba:	68e1      	ldr	r1, [r4, #12]
 8006ebc:	68a5      	ldr	r5, [r4, #8]
 8006ebe:	f023 0303 	bic.w	r3, r3, #3
 8006ec2:	4423      	add	r3, r4
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	60e9      	str	r1, [r5, #12]
 8006eca:	f042 0201 	orr.w	r2, r2, #1
 8006ece:	608d      	str	r5, [r1, #8]
 8006ed0:	605a      	str	r2, [r3, #4]
 8006ed2:	f000 fb17 	bl	8007504 <__malloc_unlock>
 8006ed6:	3408      	adds	r4, #8
 8006ed8:	4620      	mov	r0, r4
 8006eda:	b003      	add	sp, #12
 8006edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee0:	2910      	cmp	r1, #16
 8006ee2:	f200 808f 	bhi.w	8007004 <_malloc_r+0x184>
 8006ee6:	f000 fb0b 	bl	8007500 <__malloc_lock>
 8006eea:	2510      	movs	r5, #16
 8006eec:	e7dc      	b.n	8006ea8 <_malloc_r+0x28>
 8006eee:	0a68      	lsrs	r0, r5, #9
 8006ef0:	f000 808f 	beq.w	8007012 <_malloc_r+0x192>
 8006ef4:	2804      	cmp	r0, #4
 8006ef6:	f200 8154 	bhi.w	80071a2 <_malloc_r+0x322>
 8006efa:	09a8      	lsrs	r0, r5, #6
 8006efc:	3038      	adds	r0, #56	; 0x38
 8006efe:	0041      	lsls	r1, r0, #1
 8006f00:	4fac      	ldr	r7, [pc, #688]	; (80071b4 <_malloc_r+0x334>)
 8006f02:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8006f06:	68cc      	ldr	r4, [r1, #12]
 8006f08:	42a1      	cmp	r1, r4
 8006f0a:	d106      	bne.n	8006f1a <_malloc_r+0x9a>
 8006f0c:	e00c      	b.n	8006f28 <_malloc_r+0xa8>
 8006f0e:	2a00      	cmp	r2, #0
 8006f10:	f280 8082 	bge.w	8007018 <_malloc_r+0x198>
 8006f14:	68e4      	ldr	r4, [r4, #12]
 8006f16:	42a1      	cmp	r1, r4
 8006f18:	d006      	beq.n	8006f28 <_malloc_r+0xa8>
 8006f1a:	6863      	ldr	r3, [r4, #4]
 8006f1c:	f023 0303 	bic.w	r3, r3, #3
 8006f20:	1b5a      	subs	r2, r3, r5
 8006f22:	2a0f      	cmp	r2, #15
 8006f24:	ddf3      	ble.n	8006f0e <_malloc_r+0x8e>
 8006f26:	3801      	subs	r0, #1
 8006f28:	3001      	adds	r0, #1
 8006f2a:	49a2      	ldr	r1, [pc, #648]	; (80071b4 <_malloc_r+0x334>)
 8006f2c:	693c      	ldr	r4, [r7, #16]
 8006f2e:	f101 0e08 	add.w	lr, r1, #8
 8006f32:	4574      	cmp	r4, lr
 8006f34:	f000 817d 	beq.w	8007232 <_malloc_r+0x3b2>
 8006f38:	6863      	ldr	r3, [r4, #4]
 8006f3a:	f023 0303 	bic.w	r3, r3, #3
 8006f3e:	1b5a      	subs	r2, r3, r5
 8006f40:	2a0f      	cmp	r2, #15
 8006f42:	f300 8163 	bgt.w	800720c <_malloc_r+0x38c>
 8006f46:	2a00      	cmp	r2, #0
 8006f48:	f8c1 e014 	str.w	lr, [r1, #20]
 8006f4c:	f8c1 e010 	str.w	lr, [r1, #16]
 8006f50:	da73      	bge.n	800703a <_malloc_r+0x1ba>
 8006f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f56:	f080 8139 	bcs.w	80071cc <_malloc_r+0x34c>
 8006f5a:	08db      	lsrs	r3, r3, #3
 8006f5c:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8006f60:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8006f64:	684a      	ldr	r2, [r1, #4]
 8006f66:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8006f6a:	f8c4 9008 	str.w	r9, [r4, #8]
 8006f6e:	2301      	movs	r3, #1
 8006f70:	fa03 f30c 	lsl.w	r3, r3, ip
 8006f74:	4313      	orrs	r3, r2
 8006f76:	f8c4 800c 	str.w	r8, [r4, #12]
 8006f7a:	604b      	str	r3, [r1, #4]
 8006f7c:	f8c8 4008 	str.w	r4, [r8, #8]
 8006f80:	f8c9 400c 	str.w	r4, [r9, #12]
 8006f84:	1082      	asrs	r2, r0, #2
 8006f86:	2401      	movs	r4, #1
 8006f88:	4094      	lsls	r4, r2
 8006f8a:	429c      	cmp	r4, r3
 8006f8c:	d862      	bhi.n	8007054 <_malloc_r+0x1d4>
 8006f8e:	4223      	tst	r3, r4
 8006f90:	d106      	bne.n	8006fa0 <_malloc_r+0x120>
 8006f92:	f020 0003 	bic.w	r0, r0, #3
 8006f96:	0064      	lsls	r4, r4, #1
 8006f98:	4223      	tst	r3, r4
 8006f9a:	f100 0004 	add.w	r0, r0, #4
 8006f9e:	d0fa      	beq.n	8006f96 <_malloc_r+0x116>
 8006fa0:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8006fa4:	46c4      	mov	ip, r8
 8006fa6:	4681      	mov	r9, r0
 8006fa8:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8006fac:	459c      	cmp	ip, r3
 8006fae:	d107      	bne.n	8006fc0 <_malloc_r+0x140>
 8006fb0:	e141      	b.n	8007236 <_malloc_r+0x3b6>
 8006fb2:	2900      	cmp	r1, #0
 8006fb4:	f280 8151 	bge.w	800725a <_malloc_r+0x3da>
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	459c      	cmp	ip, r3
 8006fbc:	f000 813b 	beq.w	8007236 <_malloc_r+0x3b6>
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	f022 0203 	bic.w	r2, r2, #3
 8006fc6:	1b51      	subs	r1, r2, r5
 8006fc8:	290f      	cmp	r1, #15
 8006fca:	ddf2      	ble.n	8006fb2 <_malloc_r+0x132>
 8006fcc:	461c      	mov	r4, r3
 8006fce:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8006fd2:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8006fd6:	195a      	adds	r2, r3, r5
 8006fd8:	f045 0901 	orr.w	r9, r5, #1
 8006fdc:	f041 0501 	orr.w	r5, r1, #1
 8006fe0:	f8c3 9004 	str.w	r9, [r3, #4]
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	f8c8 c00c 	str.w	ip, [r8, #12]
 8006fea:	f8cc 8008 	str.w	r8, [ip, #8]
 8006fee:	617a      	str	r2, [r7, #20]
 8006ff0:	613a      	str	r2, [r7, #16]
 8006ff2:	f8c2 e00c 	str.w	lr, [r2, #12]
 8006ff6:	f8c2 e008 	str.w	lr, [r2, #8]
 8006ffa:	6055      	str	r5, [r2, #4]
 8006ffc:	5051      	str	r1, [r2, r1]
 8006ffe:	f000 fa81 	bl	8007504 <__malloc_unlock>
 8007002:	e769      	b.n	8006ed8 <_malloc_r+0x58>
 8007004:	2400      	movs	r4, #0
 8007006:	230c      	movs	r3, #12
 8007008:	4620      	mov	r0, r4
 800700a:	6033      	str	r3, [r6, #0]
 800700c:	b003      	add	sp, #12
 800700e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007012:	217e      	movs	r1, #126	; 0x7e
 8007014:	203f      	movs	r0, #63	; 0x3f
 8007016:	e773      	b.n	8006f00 <_malloc_r+0x80>
 8007018:	4423      	add	r3, r4
 800701a:	68e1      	ldr	r1, [r4, #12]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	68a5      	ldr	r5, [r4, #8]
 8007020:	f042 0201 	orr.w	r2, r2, #1
 8007024:	60e9      	str	r1, [r5, #12]
 8007026:	4630      	mov	r0, r6
 8007028:	608d      	str	r5, [r1, #8]
 800702a:	605a      	str	r2, [r3, #4]
 800702c:	f000 fa6a 	bl	8007504 <__malloc_unlock>
 8007030:	3408      	adds	r4, #8
 8007032:	4620      	mov	r0, r4
 8007034:	b003      	add	sp, #12
 8007036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800703a:	4423      	add	r3, r4
 800703c:	4630      	mov	r0, r6
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	f042 0201 	orr.w	r2, r2, #1
 8007044:	605a      	str	r2, [r3, #4]
 8007046:	f000 fa5d 	bl	8007504 <__malloc_unlock>
 800704a:	3408      	adds	r4, #8
 800704c:	4620      	mov	r0, r4
 800704e:	b003      	add	sp, #12
 8007050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007054:	68bc      	ldr	r4, [r7, #8]
 8007056:	6863      	ldr	r3, [r4, #4]
 8007058:	f023 0803 	bic.w	r8, r3, #3
 800705c:	4545      	cmp	r5, r8
 800705e:	d804      	bhi.n	800706a <_malloc_r+0x1ea>
 8007060:	ebc5 0308 	rsb	r3, r5, r8
 8007064:	2b0f      	cmp	r3, #15
 8007066:	f300 808c 	bgt.w	8007182 <_malloc_r+0x302>
 800706a:	4b53      	ldr	r3, [pc, #332]	; (80071b8 <_malloc_r+0x338>)
 800706c:	f8df a158 	ldr.w	sl, [pc, #344]	; 80071c8 <_malloc_r+0x348>
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	f8da 3000 	ldr.w	r3, [sl]
 8007076:	3301      	adds	r3, #1
 8007078:	442a      	add	r2, r5
 800707a:	eb04 0b08 	add.w	fp, r4, r8
 800707e:	f000 8150 	beq.w	8007322 <_malloc_r+0x4a2>
 8007082:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007086:	320f      	adds	r2, #15
 8007088:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800708c:	f022 020f 	bic.w	r2, r2, #15
 8007090:	4611      	mov	r1, r2
 8007092:	4630      	mov	r0, r6
 8007094:	9201      	str	r2, [sp, #4]
 8007096:	f001 f8c7 	bl	8008228 <_sbrk_r>
 800709a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800709e:	4681      	mov	r9, r0
 80070a0:	9a01      	ldr	r2, [sp, #4]
 80070a2:	f000 8147 	beq.w	8007334 <_malloc_r+0x4b4>
 80070a6:	4583      	cmp	fp, r0
 80070a8:	f200 80ee 	bhi.w	8007288 <_malloc_r+0x408>
 80070ac:	4b43      	ldr	r3, [pc, #268]	; (80071bc <_malloc_r+0x33c>)
 80070ae:	6819      	ldr	r1, [r3, #0]
 80070b0:	45cb      	cmp	fp, r9
 80070b2:	4411      	add	r1, r2
 80070b4:	6019      	str	r1, [r3, #0]
 80070b6:	f000 8142 	beq.w	800733e <_malloc_r+0x4be>
 80070ba:	f8da 0000 	ldr.w	r0, [sl]
 80070be:	f8df e108 	ldr.w	lr, [pc, #264]	; 80071c8 <_malloc_r+0x348>
 80070c2:	3001      	adds	r0, #1
 80070c4:	bf1b      	ittet	ne
 80070c6:	ebcb 0b09 	rsbne	fp, fp, r9
 80070ca:	4459      	addne	r1, fp
 80070cc:	f8ce 9000 	streq.w	r9, [lr]
 80070d0:	6019      	strne	r1, [r3, #0]
 80070d2:	f019 0107 	ands.w	r1, r9, #7
 80070d6:	f000 8107 	beq.w	80072e8 <_malloc_r+0x468>
 80070da:	f1c1 0008 	rsb	r0, r1, #8
 80070de:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 80070e2:	4481      	add	r9, r0
 80070e4:	3108      	adds	r1, #8
 80070e6:	444a      	add	r2, r9
 80070e8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80070ec:	ebc2 0a01 	rsb	sl, r2, r1
 80070f0:	4651      	mov	r1, sl
 80070f2:	4630      	mov	r0, r6
 80070f4:	9301      	str	r3, [sp, #4]
 80070f6:	f001 f897 	bl	8008228 <_sbrk_r>
 80070fa:	1c43      	adds	r3, r0, #1
 80070fc:	9b01      	ldr	r3, [sp, #4]
 80070fe:	f000 812c 	beq.w	800735a <_malloc_r+0x4da>
 8007102:	ebc9 0200 	rsb	r2, r9, r0
 8007106:	4452      	add	r2, sl
 8007108:	f042 0201 	orr.w	r2, r2, #1
 800710c:	6819      	ldr	r1, [r3, #0]
 800710e:	f8c7 9008 	str.w	r9, [r7, #8]
 8007112:	4451      	add	r1, sl
 8007114:	42bc      	cmp	r4, r7
 8007116:	f8c9 2004 	str.w	r2, [r9, #4]
 800711a:	6019      	str	r1, [r3, #0]
 800711c:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80071bc <_malloc_r+0x33c>
 8007120:	d016      	beq.n	8007150 <_malloc_r+0x2d0>
 8007122:	f1b8 0f0f 	cmp.w	r8, #15
 8007126:	f240 80ee 	bls.w	8007306 <_malloc_r+0x486>
 800712a:	6862      	ldr	r2, [r4, #4]
 800712c:	f1a8 030c 	sub.w	r3, r8, #12
 8007130:	f023 0307 	bic.w	r3, r3, #7
 8007134:	18e0      	adds	r0, r4, r3
 8007136:	f002 0201 	and.w	r2, r2, #1
 800713a:	f04f 0e05 	mov.w	lr, #5
 800713e:	431a      	orrs	r2, r3
 8007140:	2b0f      	cmp	r3, #15
 8007142:	6062      	str	r2, [r4, #4]
 8007144:	f8c0 e004 	str.w	lr, [r0, #4]
 8007148:	f8c0 e008 	str.w	lr, [r0, #8]
 800714c:	f200 8109 	bhi.w	8007362 <_malloc_r+0x4e2>
 8007150:	4b1b      	ldr	r3, [pc, #108]	; (80071c0 <_malloc_r+0x340>)
 8007152:	68bc      	ldr	r4, [r7, #8]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	4291      	cmp	r1, r2
 8007158:	bf88      	it	hi
 800715a:	6019      	strhi	r1, [r3, #0]
 800715c:	4b19      	ldr	r3, [pc, #100]	; (80071c4 <_malloc_r+0x344>)
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	4291      	cmp	r1, r2
 8007162:	6862      	ldr	r2, [r4, #4]
 8007164:	bf88      	it	hi
 8007166:	6019      	strhi	r1, [r3, #0]
 8007168:	f022 0203 	bic.w	r2, r2, #3
 800716c:	4295      	cmp	r5, r2
 800716e:	eba2 0305 	sub.w	r3, r2, r5
 8007172:	d801      	bhi.n	8007178 <_malloc_r+0x2f8>
 8007174:	2b0f      	cmp	r3, #15
 8007176:	dc04      	bgt.n	8007182 <_malloc_r+0x302>
 8007178:	4630      	mov	r0, r6
 800717a:	f000 f9c3 	bl	8007504 <__malloc_unlock>
 800717e:	2400      	movs	r4, #0
 8007180:	e6aa      	b.n	8006ed8 <_malloc_r+0x58>
 8007182:	1962      	adds	r2, r4, r5
 8007184:	f043 0301 	orr.w	r3, r3, #1
 8007188:	f045 0501 	orr.w	r5, r5, #1
 800718c:	6065      	str	r5, [r4, #4]
 800718e:	4630      	mov	r0, r6
 8007190:	60ba      	str	r2, [r7, #8]
 8007192:	6053      	str	r3, [r2, #4]
 8007194:	f000 f9b6 	bl	8007504 <__malloc_unlock>
 8007198:	3408      	adds	r4, #8
 800719a:	4620      	mov	r0, r4
 800719c:	b003      	add	sp, #12
 800719e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a2:	2814      	cmp	r0, #20
 80071a4:	d968      	bls.n	8007278 <_malloc_r+0x3f8>
 80071a6:	2854      	cmp	r0, #84	; 0x54
 80071a8:	f200 8097 	bhi.w	80072da <_malloc_r+0x45a>
 80071ac:	0b28      	lsrs	r0, r5, #12
 80071ae:	306e      	adds	r0, #110	; 0x6e
 80071b0:	0041      	lsls	r1, r0, #1
 80071b2:	e6a5      	b.n	8006f00 <_malloc_r+0x80>
 80071b4:	20000528 	.word	0x20000528
 80071b8:	20010490 	.word	0x20010490
 80071bc:	20010494 	.word	0x20010494
 80071c0:	2001048c 	.word	0x2001048c
 80071c4:	20010488 	.word	0x20010488
 80071c8:	20000934 	.word	0x20000934
 80071cc:	0a5a      	lsrs	r2, r3, #9
 80071ce:	2a04      	cmp	r2, #4
 80071d0:	d955      	bls.n	800727e <_malloc_r+0x3fe>
 80071d2:	2a14      	cmp	r2, #20
 80071d4:	f200 80a7 	bhi.w	8007326 <_malloc_r+0x4a6>
 80071d8:	325b      	adds	r2, #91	; 0x5b
 80071da:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80071de:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 80071e2:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80073a0 <_malloc_r+0x520>
 80071e6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80071ea:	4561      	cmp	r1, ip
 80071ec:	d07f      	beq.n	80072ee <_malloc_r+0x46e>
 80071ee:	684a      	ldr	r2, [r1, #4]
 80071f0:	f022 0203 	bic.w	r2, r2, #3
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d202      	bcs.n	80071fe <_malloc_r+0x37e>
 80071f8:	6889      	ldr	r1, [r1, #8]
 80071fa:	458c      	cmp	ip, r1
 80071fc:	d1f7      	bne.n	80071ee <_malloc_r+0x36e>
 80071fe:	68ca      	ldr	r2, [r1, #12]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	60e2      	str	r2, [r4, #12]
 8007204:	60a1      	str	r1, [r4, #8]
 8007206:	6094      	str	r4, [r2, #8]
 8007208:	60cc      	str	r4, [r1, #12]
 800720a:	e6bb      	b.n	8006f84 <_malloc_r+0x104>
 800720c:	1963      	adds	r3, r4, r5
 800720e:	f042 0701 	orr.w	r7, r2, #1
 8007212:	f045 0501 	orr.w	r5, r5, #1
 8007216:	6065      	str	r5, [r4, #4]
 8007218:	4630      	mov	r0, r6
 800721a:	614b      	str	r3, [r1, #20]
 800721c:	610b      	str	r3, [r1, #16]
 800721e:	f8c3 e00c 	str.w	lr, [r3, #12]
 8007222:	f8c3 e008 	str.w	lr, [r3, #8]
 8007226:	605f      	str	r7, [r3, #4]
 8007228:	509a      	str	r2, [r3, r2]
 800722a:	3408      	adds	r4, #8
 800722c:	f000 f96a 	bl	8007504 <__malloc_unlock>
 8007230:	e652      	b.n	8006ed8 <_malloc_r+0x58>
 8007232:	684b      	ldr	r3, [r1, #4]
 8007234:	e6a6      	b.n	8006f84 <_malloc_r+0x104>
 8007236:	f109 0901 	add.w	r9, r9, #1
 800723a:	f019 0f03 	tst.w	r9, #3
 800723e:	f10c 0c08 	add.w	ip, ip, #8
 8007242:	f47f aeb1 	bne.w	8006fa8 <_malloc_r+0x128>
 8007246:	e02c      	b.n	80072a2 <_malloc_r+0x422>
 8007248:	f104 0308 	add.w	r3, r4, #8
 800724c:	6964      	ldr	r4, [r4, #20]
 800724e:	42a3      	cmp	r3, r4
 8007250:	bf08      	it	eq
 8007252:	3002      	addeq	r0, #2
 8007254:	f43f ae69 	beq.w	8006f2a <_malloc_r+0xaa>
 8007258:	e62e      	b.n	8006eb8 <_malloc_r+0x38>
 800725a:	441a      	add	r2, r3
 800725c:	461c      	mov	r4, r3
 800725e:	6851      	ldr	r1, [r2, #4]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8007266:	f041 0101 	orr.w	r1, r1, #1
 800726a:	6051      	str	r1, [r2, #4]
 800726c:	4630      	mov	r0, r6
 800726e:	60eb      	str	r3, [r5, #12]
 8007270:	609d      	str	r5, [r3, #8]
 8007272:	f000 f947 	bl	8007504 <__malloc_unlock>
 8007276:	e62f      	b.n	8006ed8 <_malloc_r+0x58>
 8007278:	305b      	adds	r0, #91	; 0x5b
 800727a:	0041      	lsls	r1, r0, #1
 800727c:	e640      	b.n	8006f00 <_malloc_r+0x80>
 800727e:	099a      	lsrs	r2, r3, #6
 8007280:	3238      	adds	r2, #56	; 0x38
 8007282:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8007286:	e7aa      	b.n	80071de <_malloc_r+0x35e>
 8007288:	42bc      	cmp	r4, r7
 800728a:	4b45      	ldr	r3, [pc, #276]	; (80073a0 <_malloc_r+0x520>)
 800728c:	f43f af0e 	beq.w	80070ac <_malloc_r+0x22c>
 8007290:	689c      	ldr	r4, [r3, #8]
 8007292:	6862      	ldr	r2, [r4, #4]
 8007294:	f022 0203 	bic.w	r2, r2, #3
 8007298:	e768      	b.n	800716c <_malloc_r+0x2ec>
 800729a:	f8d8 8000 	ldr.w	r8, [r8]
 800729e:	4598      	cmp	r8, r3
 80072a0:	d17c      	bne.n	800739c <_malloc_r+0x51c>
 80072a2:	f010 0f03 	tst.w	r0, #3
 80072a6:	f1a8 0308 	sub.w	r3, r8, #8
 80072aa:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80072ae:	d1f4      	bne.n	800729a <_malloc_r+0x41a>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	ea23 0304 	bic.w	r3, r3, r4
 80072b6:	607b      	str	r3, [r7, #4]
 80072b8:	0064      	lsls	r4, r4, #1
 80072ba:	429c      	cmp	r4, r3
 80072bc:	f63f aeca 	bhi.w	8007054 <_malloc_r+0x1d4>
 80072c0:	2c00      	cmp	r4, #0
 80072c2:	f43f aec7 	beq.w	8007054 <_malloc_r+0x1d4>
 80072c6:	4223      	tst	r3, r4
 80072c8:	4648      	mov	r0, r9
 80072ca:	f47f ae69 	bne.w	8006fa0 <_malloc_r+0x120>
 80072ce:	0064      	lsls	r4, r4, #1
 80072d0:	4223      	tst	r3, r4
 80072d2:	f100 0004 	add.w	r0, r0, #4
 80072d6:	d0fa      	beq.n	80072ce <_malloc_r+0x44e>
 80072d8:	e662      	b.n	8006fa0 <_malloc_r+0x120>
 80072da:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 80072de:	d818      	bhi.n	8007312 <_malloc_r+0x492>
 80072e0:	0be8      	lsrs	r0, r5, #15
 80072e2:	3077      	adds	r0, #119	; 0x77
 80072e4:	0041      	lsls	r1, r0, #1
 80072e6:	e60b      	b.n	8006f00 <_malloc_r+0x80>
 80072e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80072ec:	e6fb      	b.n	80070e6 <_malloc_r+0x266>
 80072ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80072f2:	1092      	asrs	r2, r2, #2
 80072f4:	f04f 0c01 	mov.w	ip, #1
 80072f8:	fa0c f202 	lsl.w	r2, ip, r2
 80072fc:	4313      	orrs	r3, r2
 80072fe:	f8c8 3004 	str.w	r3, [r8, #4]
 8007302:	460a      	mov	r2, r1
 8007304:	e77d      	b.n	8007202 <_malloc_r+0x382>
 8007306:	2301      	movs	r3, #1
 8007308:	f8c9 3004 	str.w	r3, [r9, #4]
 800730c:	464c      	mov	r4, r9
 800730e:	2200      	movs	r2, #0
 8007310:	e72c      	b.n	800716c <_malloc_r+0x2ec>
 8007312:	f240 5354 	movw	r3, #1364	; 0x554
 8007316:	4298      	cmp	r0, r3
 8007318:	d81c      	bhi.n	8007354 <_malloc_r+0x4d4>
 800731a:	0ca8      	lsrs	r0, r5, #18
 800731c:	307c      	adds	r0, #124	; 0x7c
 800731e:	0041      	lsls	r1, r0, #1
 8007320:	e5ee      	b.n	8006f00 <_malloc_r+0x80>
 8007322:	3210      	adds	r2, #16
 8007324:	e6b4      	b.n	8007090 <_malloc_r+0x210>
 8007326:	2a54      	cmp	r2, #84	; 0x54
 8007328:	d823      	bhi.n	8007372 <_malloc_r+0x4f2>
 800732a:	0b1a      	lsrs	r2, r3, #12
 800732c:	326e      	adds	r2, #110	; 0x6e
 800732e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8007332:	e754      	b.n	80071de <_malloc_r+0x35e>
 8007334:	68bc      	ldr	r4, [r7, #8]
 8007336:	6862      	ldr	r2, [r4, #4]
 8007338:	f022 0203 	bic.w	r2, r2, #3
 800733c:	e716      	b.n	800716c <_malloc_r+0x2ec>
 800733e:	f3cb 000b 	ubfx	r0, fp, #0, #12
 8007342:	2800      	cmp	r0, #0
 8007344:	f47f aeb9 	bne.w	80070ba <_malloc_r+0x23a>
 8007348:	4442      	add	r2, r8
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f042 0201 	orr.w	r2, r2, #1
 8007350:	605a      	str	r2, [r3, #4]
 8007352:	e6fd      	b.n	8007150 <_malloc_r+0x2d0>
 8007354:	21fc      	movs	r1, #252	; 0xfc
 8007356:	207e      	movs	r0, #126	; 0x7e
 8007358:	e5d2      	b.n	8006f00 <_malloc_r+0x80>
 800735a:	2201      	movs	r2, #1
 800735c:	f04f 0a00 	mov.w	sl, #0
 8007360:	e6d4      	b.n	800710c <_malloc_r+0x28c>
 8007362:	f104 0108 	add.w	r1, r4, #8
 8007366:	4630      	mov	r0, r6
 8007368:	f7ff fa24 	bl	80067b4 <_free_r>
 800736c:	f8da 1000 	ldr.w	r1, [sl]
 8007370:	e6ee      	b.n	8007150 <_malloc_r+0x2d0>
 8007372:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007376:	d804      	bhi.n	8007382 <_malloc_r+0x502>
 8007378:	0bda      	lsrs	r2, r3, #15
 800737a:	3277      	adds	r2, #119	; 0x77
 800737c:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8007380:	e72d      	b.n	80071de <_malloc_r+0x35e>
 8007382:	f240 5154 	movw	r1, #1364	; 0x554
 8007386:	428a      	cmp	r2, r1
 8007388:	d804      	bhi.n	8007394 <_malloc_r+0x514>
 800738a:	0c9a      	lsrs	r2, r3, #18
 800738c:	327c      	adds	r2, #124	; 0x7c
 800738e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8007392:	e724      	b.n	80071de <_malloc_r+0x35e>
 8007394:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8007398:	227e      	movs	r2, #126	; 0x7e
 800739a:	e720      	b.n	80071de <_malloc_r+0x35e>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	e78b      	b.n	80072b8 <_malloc_r+0x438>
 80073a0:	20000528 	.word	0x20000528

080073a4 <memchr>:
 80073a4:	0783      	lsls	r3, r0, #30
 80073a6:	b470      	push	{r4, r5, r6}
 80073a8:	b2c9      	uxtb	r1, r1
 80073aa:	d040      	beq.n	800742e <memchr+0x8a>
 80073ac:	1e54      	subs	r4, r2, #1
 80073ae:	2a00      	cmp	r2, #0
 80073b0:	d03f      	beq.n	8007432 <memchr+0x8e>
 80073b2:	7803      	ldrb	r3, [r0, #0]
 80073b4:	428b      	cmp	r3, r1
 80073b6:	bf18      	it	ne
 80073b8:	1c43      	addne	r3, r0, #1
 80073ba:	d106      	bne.n	80073ca <memchr+0x26>
 80073bc:	e01d      	b.n	80073fa <memchr+0x56>
 80073be:	b1f4      	cbz	r4, 80073fe <memchr+0x5a>
 80073c0:	7802      	ldrb	r2, [r0, #0]
 80073c2:	428a      	cmp	r2, r1
 80073c4:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80073c8:	d017      	beq.n	80073fa <memchr+0x56>
 80073ca:	f013 0f03 	tst.w	r3, #3
 80073ce:	4618      	mov	r0, r3
 80073d0:	f103 0301 	add.w	r3, r3, #1
 80073d4:	d1f3      	bne.n	80073be <memchr+0x1a>
 80073d6:	2c03      	cmp	r4, #3
 80073d8:	d814      	bhi.n	8007404 <memchr+0x60>
 80073da:	b184      	cbz	r4, 80073fe <memchr+0x5a>
 80073dc:	7803      	ldrb	r3, [r0, #0]
 80073de:	428b      	cmp	r3, r1
 80073e0:	d00b      	beq.n	80073fa <memchr+0x56>
 80073e2:	1905      	adds	r5, r0, r4
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	e002      	b.n	80073ee <memchr+0x4a>
 80073e8:	7802      	ldrb	r2, [r0, #0]
 80073ea:	428a      	cmp	r2, r1
 80073ec:	d005      	beq.n	80073fa <memchr+0x56>
 80073ee:	42ab      	cmp	r3, r5
 80073f0:	4618      	mov	r0, r3
 80073f2:	f103 0301 	add.w	r3, r3, #1
 80073f6:	d1f7      	bne.n	80073e8 <memchr+0x44>
 80073f8:	2000      	movs	r0, #0
 80073fa:	bc70      	pop	{r4, r5, r6}
 80073fc:	4770      	bx	lr
 80073fe:	4620      	mov	r0, r4
 8007400:	bc70      	pop	{r4, r5, r6}
 8007402:	4770      	bx	lr
 8007404:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8007408:	4602      	mov	r2, r0
 800740a:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800740e:	4610      	mov	r0, r2
 8007410:	3204      	adds	r2, #4
 8007412:	6803      	ldr	r3, [r0, #0]
 8007414:	4073      	eors	r3, r6
 8007416:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 800741a:	ea25 0303 	bic.w	r3, r5, r3
 800741e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8007422:	d1da      	bne.n	80073da <memchr+0x36>
 8007424:	3c04      	subs	r4, #4
 8007426:	2c03      	cmp	r4, #3
 8007428:	4610      	mov	r0, r2
 800742a:	d8f0      	bhi.n	800740e <memchr+0x6a>
 800742c:	e7d5      	b.n	80073da <memchr+0x36>
 800742e:	4614      	mov	r4, r2
 8007430:	e7d1      	b.n	80073d6 <memchr+0x32>
 8007432:	4610      	mov	r0, r2
 8007434:	e7e1      	b.n	80073fa <memchr+0x56>
 8007436:	bf00      	nop

08007438 <memmove>:
 8007438:	4288      	cmp	r0, r1
 800743a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800743c:	d90d      	bls.n	800745a <memmove+0x22>
 800743e:	188b      	adds	r3, r1, r2
 8007440:	4298      	cmp	r0, r3
 8007442:	d20a      	bcs.n	800745a <memmove+0x22>
 8007444:	1881      	adds	r1, r0, r2
 8007446:	2a00      	cmp	r2, #0
 8007448:	d054      	beq.n	80074f4 <memmove+0xbc>
 800744a:	1a9a      	subs	r2, r3, r2
 800744c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007450:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007454:	4293      	cmp	r3, r2
 8007456:	d1f9      	bne.n	800744c <memmove+0x14>
 8007458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800745a:	2a0f      	cmp	r2, #15
 800745c:	d948      	bls.n	80074f0 <memmove+0xb8>
 800745e:	ea40 0301 	orr.w	r3, r0, r1
 8007462:	079b      	lsls	r3, r3, #30
 8007464:	d147      	bne.n	80074f6 <memmove+0xbe>
 8007466:	f100 0410 	add.w	r4, r0, #16
 800746a:	f101 0310 	add.w	r3, r1, #16
 800746e:	4615      	mov	r5, r2
 8007470:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8007474:	f844 6c10 	str.w	r6, [r4, #-16]
 8007478:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800747c:	f844 6c0c 	str.w	r6, [r4, #-12]
 8007480:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8007484:	f844 6c08 	str.w	r6, [r4, #-8]
 8007488:	3d10      	subs	r5, #16
 800748a:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800748e:	f844 6c04 	str.w	r6, [r4, #-4]
 8007492:	2d0f      	cmp	r5, #15
 8007494:	f103 0310 	add.w	r3, r3, #16
 8007498:	f104 0410 	add.w	r4, r4, #16
 800749c:	d8e8      	bhi.n	8007470 <memmove+0x38>
 800749e:	f1a2 0310 	sub.w	r3, r2, #16
 80074a2:	f023 030f 	bic.w	r3, r3, #15
 80074a6:	f002 0e0f 	and.w	lr, r2, #15
 80074aa:	3310      	adds	r3, #16
 80074ac:	f1be 0f03 	cmp.w	lr, #3
 80074b0:	4419      	add	r1, r3
 80074b2:	4403      	add	r3, r0
 80074b4:	d921      	bls.n	80074fa <memmove+0xc2>
 80074b6:	1f1e      	subs	r6, r3, #4
 80074b8:	460d      	mov	r5, r1
 80074ba:	4674      	mov	r4, lr
 80074bc:	3c04      	subs	r4, #4
 80074be:	f855 7b04 	ldr.w	r7, [r5], #4
 80074c2:	f846 7f04 	str.w	r7, [r6, #4]!
 80074c6:	2c03      	cmp	r4, #3
 80074c8:	d8f8      	bhi.n	80074bc <memmove+0x84>
 80074ca:	f1ae 0404 	sub.w	r4, lr, #4
 80074ce:	f024 0403 	bic.w	r4, r4, #3
 80074d2:	3404      	adds	r4, #4
 80074d4:	4423      	add	r3, r4
 80074d6:	4421      	add	r1, r4
 80074d8:	f002 0203 	and.w	r2, r2, #3
 80074dc:	b152      	cbz	r2, 80074f4 <memmove+0xbc>
 80074de:	3b01      	subs	r3, #1
 80074e0:	440a      	add	r2, r1
 80074e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074ea:	4291      	cmp	r1, r2
 80074ec:	d1f9      	bne.n	80074e2 <memmove+0xaa>
 80074ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074f0:	4603      	mov	r3, r0
 80074f2:	e7f3      	b.n	80074dc <memmove+0xa4>
 80074f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074f6:	4603      	mov	r3, r0
 80074f8:	e7f1      	b.n	80074de <memmove+0xa6>
 80074fa:	4672      	mov	r2, lr
 80074fc:	e7ee      	b.n	80074dc <memmove+0xa4>
 80074fe:	bf00      	nop

08007500 <__malloc_lock>:
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop

08007504 <__malloc_unlock>:
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop

08007508 <_Balloc>:
 8007508:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800750a:	b570      	push	{r4, r5, r6, lr}
 800750c:	4605      	mov	r5, r0
 800750e:	460c      	mov	r4, r1
 8007510:	b14b      	cbz	r3, 8007526 <_Balloc+0x1e>
 8007512:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007516:	b180      	cbz	r0, 800753a <_Balloc+0x32>
 8007518:	6802      	ldr	r2, [r0, #0]
 800751a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800751e:	2300      	movs	r3, #0
 8007520:	6103      	str	r3, [r0, #16]
 8007522:	60c3      	str	r3, [r0, #12]
 8007524:	bd70      	pop	{r4, r5, r6, pc}
 8007526:	2104      	movs	r1, #4
 8007528:	2221      	movs	r2, #33	; 0x21
 800752a:	f001 ff45 	bl	80093b8 <_calloc_r>
 800752e:	64e8      	str	r0, [r5, #76]	; 0x4c
 8007530:	4603      	mov	r3, r0
 8007532:	2800      	cmp	r0, #0
 8007534:	d1ed      	bne.n	8007512 <_Balloc+0xa>
 8007536:	2000      	movs	r0, #0
 8007538:	bd70      	pop	{r4, r5, r6, pc}
 800753a:	2101      	movs	r1, #1
 800753c:	fa01 f604 	lsl.w	r6, r1, r4
 8007540:	1d72      	adds	r2, r6, #5
 8007542:	4628      	mov	r0, r5
 8007544:	0092      	lsls	r2, r2, #2
 8007546:	f001 ff37 	bl	80093b8 <_calloc_r>
 800754a:	2800      	cmp	r0, #0
 800754c:	d0f3      	beq.n	8007536 <_Balloc+0x2e>
 800754e:	6044      	str	r4, [r0, #4]
 8007550:	6086      	str	r6, [r0, #8]
 8007552:	e7e4      	b.n	800751e <_Balloc+0x16>

08007554 <_Bfree>:
 8007554:	b131      	cbz	r1, 8007564 <_Bfree+0x10>
 8007556:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007558:	684a      	ldr	r2, [r1, #4]
 800755a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800755e:	6008      	str	r0, [r1, #0]
 8007560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop

08007568 <__multadd>:
 8007568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800756a:	690c      	ldr	r4, [r1, #16]
 800756c:	b083      	sub	sp, #12
 800756e:	460d      	mov	r5, r1
 8007570:	4606      	mov	r6, r0
 8007572:	f101 0e14 	add.w	lr, r1, #20
 8007576:	2700      	movs	r7, #0
 8007578:	f8de 1000 	ldr.w	r1, [lr]
 800757c:	b288      	uxth	r0, r1
 800757e:	0c09      	lsrs	r1, r1, #16
 8007580:	fb02 3300 	mla	r3, r2, r0, r3
 8007584:	fb02 f101 	mul.w	r1, r2, r1
 8007588:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 800758c:	3701      	adds	r7, #1
 800758e:	b29b      	uxth	r3, r3
 8007590:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8007594:	42bc      	cmp	r4, r7
 8007596:	f84e 3b04 	str.w	r3, [lr], #4
 800759a:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800759e:	dceb      	bgt.n	8007578 <__multadd+0x10>
 80075a0:	b13b      	cbz	r3, 80075b2 <__multadd+0x4a>
 80075a2:	68aa      	ldr	r2, [r5, #8]
 80075a4:	4294      	cmp	r4, r2
 80075a6:	da07      	bge.n	80075b8 <__multadd+0x50>
 80075a8:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 80075ac:	3401      	adds	r4, #1
 80075ae:	6153      	str	r3, [r2, #20]
 80075b0:	612c      	str	r4, [r5, #16]
 80075b2:	4628      	mov	r0, r5
 80075b4:	b003      	add	sp, #12
 80075b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075b8:	6869      	ldr	r1, [r5, #4]
 80075ba:	9301      	str	r3, [sp, #4]
 80075bc:	3101      	adds	r1, #1
 80075be:	4630      	mov	r0, r6
 80075c0:	f7ff ffa2 	bl	8007508 <_Balloc>
 80075c4:	692a      	ldr	r2, [r5, #16]
 80075c6:	3202      	adds	r2, #2
 80075c8:	f105 010c 	add.w	r1, r5, #12
 80075cc:	4607      	mov	r7, r0
 80075ce:	0092      	lsls	r2, r2, #2
 80075d0:	300c      	adds	r0, #12
 80075d2:	f7fc fa1b 	bl	8003a0c <memcpy>
 80075d6:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80075d8:	6869      	ldr	r1, [r5, #4]
 80075da:	9b01      	ldr	r3, [sp, #4]
 80075dc:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80075e0:	6028      	str	r0, [r5, #0]
 80075e2:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80075e6:	463d      	mov	r5, r7
 80075e8:	e7de      	b.n	80075a8 <__multadd+0x40>
 80075ea:	bf00      	nop

080075ec <__s2b>:
 80075ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075f0:	4c23      	ldr	r4, [pc, #140]	; (8007680 <__s2b+0x94>)
 80075f2:	9e08      	ldr	r6, [sp, #32]
 80075f4:	461f      	mov	r7, r3
 80075f6:	3308      	adds	r3, #8
 80075f8:	fb84 4e03 	smull	r4, lr, r4, r3
 80075fc:	17db      	asrs	r3, r3, #31
 80075fe:	ebc3 0e6e 	rsb	lr, r3, lr, asr #1
 8007602:	f1be 0f01 	cmp.w	lr, #1
 8007606:	4605      	mov	r5, r0
 8007608:	460c      	mov	r4, r1
 800760a:	4690      	mov	r8, r2
 800760c:	dd35      	ble.n	800767a <__s2b+0x8e>
 800760e:	2301      	movs	r3, #1
 8007610:	2100      	movs	r1, #0
 8007612:	005b      	lsls	r3, r3, #1
 8007614:	459e      	cmp	lr, r3
 8007616:	f101 0101 	add.w	r1, r1, #1
 800761a:	dcfa      	bgt.n	8007612 <__s2b+0x26>
 800761c:	4628      	mov	r0, r5
 800761e:	f7ff ff73 	bl	8007508 <_Balloc>
 8007622:	2301      	movs	r3, #1
 8007624:	f1b8 0f09 	cmp.w	r8, #9
 8007628:	6146      	str	r6, [r0, #20]
 800762a:	6103      	str	r3, [r0, #16]
 800762c:	dd21      	ble.n	8007672 <__s2b+0x86>
 800762e:	f104 0909 	add.w	r9, r4, #9
 8007632:	464e      	mov	r6, r9
 8007634:	4444      	add	r4, r8
 8007636:	f816 3b01 	ldrb.w	r3, [r6], #1
 800763a:	4601      	mov	r1, r0
 800763c:	3b30      	subs	r3, #48	; 0x30
 800763e:	4628      	mov	r0, r5
 8007640:	220a      	movs	r2, #10
 8007642:	f7ff ff91 	bl	8007568 <__multadd>
 8007646:	42a6      	cmp	r6, r4
 8007648:	d1f5      	bne.n	8007636 <__s2b+0x4a>
 800764a:	eb09 0408 	add.w	r4, r9, r8
 800764e:	3c08      	subs	r4, #8
 8007650:	4547      	cmp	r7, r8
 8007652:	dd0c      	ble.n	800766e <__s2b+0x82>
 8007654:	ebc8 0707 	rsb	r7, r8, r7
 8007658:	4427      	add	r7, r4
 800765a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800765e:	4601      	mov	r1, r0
 8007660:	3b30      	subs	r3, #48	; 0x30
 8007662:	4628      	mov	r0, r5
 8007664:	220a      	movs	r2, #10
 8007666:	f7ff ff7f 	bl	8007568 <__multadd>
 800766a:	42bc      	cmp	r4, r7
 800766c:	d1f5      	bne.n	800765a <__s2b+0x6e>
 800766e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007672:	340a      	adds	r4, #10
 8007674:	f04f 0809 	mov.w	r8, #9
 8007678:	e7ea      	b.n	8007650 <__s2b+0x64>
 800767a:	2100      	movs	r1, #0
 800767c:	e7ce      	b.n	800761c <__s2b+0x30>
 800767e:	bf00      	nop
 8007680:	38e38e39 	.word	0x38e38e39

08007684 <__hi0bits>:
 8007684:	0c03      	lsrs	r3, r0, #16
 8007686:	041b      	lsls	r3, r3, #16
 8007688:	b9b3      	cbnz	r3, 80076b8 <__hi0bits+0x34>
 800768a:	0400      	lsls	r0, r0, #16
 800768c:	2310      	movs	r3, #16
 800768e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007692:	bf04      	itt	eq
 8007694:	0200      	lsleq	r0, r0, #8
 8007696:	3308      	addeq	r3, #8
 8007698:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800769c:	bf04      	itt	eq
 800769e:	0100      	lsleq	r0, r0, #4
 80076a0:	3304      	addeq	r3, #4
 80076a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80076a6:	bf04      	itt	eq
 80076a8:	0080      	lsleq	r0, r0, #2
 80076aa:	3302      	addeq	r3, #2
 80076ac:	2800      	cmp	r0, #0
 80076ae:	db07      	blt.n	80076c0 <__hi0bits+0x3c>
 80076b0:	0042      	lsls	r2, r0, #1
 80076b2:	d403      	bmi.n	80076bc <__hi0bits+0x38>
 80076b4:	2020      	movs	r0, #32
 80076b6:	4770      	bx	lr
 80076b8:	2300      	movs	r3, #0
 80076ba:	e7e8      	b.n	800768e <__hi0bits+0xa>
 80076bc:	1c58      	adds	r0, r3, #1
 80076be:	4770      	bx	lr
 80076c0:	4618      	mov	r0, r3
 80076c2:	4770      	bx	lr

080076c4 <__lo0bits>:
 80076c4:	6803      	ldr	r3, [r0, #0]
 80076c6:	f013 0207 	ands.w	r2, r3, #7
 80076ca:	d007      	beq.n	80076dc <__lo0bits+0x18>
 80076cc:	07d9      	lsls	r1, r3, #31
 80076ce:	d420      	bmi.n	8007712 <__lo0bits+0x4e>
 80076d0:	079a      	lsls	r2, r3, #30
 80076d2:	d420      	bmi.n	8007716 <__lo0bits+0x52>
 80076d4:	089b      	lsrs	r3, r3, #2
 80076d6:	6003      	str	r3, [r0, #0]
 80076d8:	2002      	movs	r0, #2
 80076da:	4770      	bx	lr
 80076dc:	b299      	uxth	r1, r3
 80076de:	b909      	cbnz	r1, 80076e4 <__lo0bits+0x20>
 80076e0:	0c1b      	lsrs	r3, r3, #16
 80076e2:	2210      	movs	r2, #16
 80076e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80076e8:	bf04      	itt	eq
 80076ea:	0a1b      	lsreq	r3, r3, #8
 80076ec:	3208      	addeq	r2, #8
 80076ee:	0719      	lsls	r1, r3, #28
 80076f0:	bf04      	itt	eq
 80076f2:	091b      	lsreq	r3, r3, #4
 80076f4:	3204      	addeq	r2, #4
 80076f6:	0799      	lsls	r1, r3, #30
 80076f8:	bf04      	itt	eq
 80076fa:	089b      	lsreq	r3, r3, #2
 80076fc:	3202      	addeq	r2, #2
 80076fe:	07d9      	lsls	r1, r3, #31
 8007700:	d404      	bmi.n	800770c <__lo0bits+0x48>
 8007702:	085b      	lsrs	r3, r3, #1
 8007704:	d101      	bne.n	800770a <__lo0bits+0x46>
 8007706:	2020      	movs	r0, #32
 8007708:	4770      	bx	lr
 800770a:	3201      	adds	r2, #1
 800770c:	6003      	str	r3, [r0, #0]
 800770e:	4610      	mov	r0, r2
 8007710:	4770      	bx	lr
 8007712:	2000      	movs	r0, #0
 8007714:	4770      	bx	lr
 8007716:	085b      	lsrs	r3, r3, #1
 8007718:	6003      	str	r3, [r0, #0]
 800771a:	2001      	movs	r0, #1
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop

08007720 <__i2b>:
 8007720:	b510      	push	{r4, lr}
 8007722:	460c      	mov	r4, r1
 8007724:	2101      	movs	r1, #1
 8007726:	f7ff feef 	bl	8007508 <_Balloc>
 800772a:	2201      	movs	r2, #1
 800772c:	6144      	str	r4, [r0, #20]
 800772e:	6102      	str	r2, [r0, #16]
 8007730:	bd10      	pop	{r4, pc}
 8007732:	bf00      	nop

08007734 <__multiply>:
 8007734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007738:	690f      	ldr	r7, [r1, #16]
 800773a:	6916      	ldr	r6, [r2, #16]
 800773c:	42b7      	cmp	r7, r6
 800773e:	b083      	sub	sp, #12
 8007740:	460d      	mov	r5, r1
 8007742:	4614      	mov	r4, r2
 8007744:	f2c0 808d 	blt.w	8007862 <__multiply+0x12e>
 8007748:	4633      	mov	r3, r6
 800774a:	463e      	mov	r6, r7
 800774c:	461f      	mov	r7, r3
 800774e:	68ab      	ldr	r3, [r5, #8]
 8007750:	6869      	ldr	r1, [r5, #4]
 8007752:	eb06 0807 	add.w	r8, r6, r7
 8007756:	4598      	cmp	r8, r3
 8007758:	bfc8      	it	gt
 800775a:	3101      	addgt	r1, #1
 800775c:	f7ff fed4 	bl	8007508 <_Balloc>
 8007760:	f100 0c14 	add.w	ip, r0, #20
 8007764:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8007768:	45cc      	cmp	ip, r9
 800776a:	9000      	str	r0, [sp, #0]
 800776c:	d205      	bcs.n	800777a <__multiply+0x46>
 800776e:	4663      	mov	r3, ip
 8007770:	2100      	movs	r1, #0
 8007772:	f843 1b04 	str.w	r1, [r3], #4
 8007776:	4599      	cmp	r9, r3
 8007778:	d8fb      	bhi.n	8007772 <__multiply+0x3e>
 800777a:	f104 0214 	add.w	r2, r4, #20
 800777e:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 8007782:	f105 0314 	add.w	r3, r5, #20
 8007786:	4552      	cmp	r2, sl
 8007788:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 800778c:	d254      	bcs.n	8007838 <__multiply+0x104>
 800778e:	f8cd 9004 	str.w	r9, [sp, #4]
 8007792:	4699      	mov	r9, r3
 8007794:	f852 3b04 	ldr.w	r3, [r2], #4
 8007798:	fa1f fb83 	uxth.w	fp, r3
 800779c:	f1bb 0f00 	cmp.w	fp, #0
 80077a0:	d020      	beq.n	80077e4 <__multiply+0xb0>
 80077a2:	2000      	movs	r0, #0
 80077a4:	464f      	mov	r7, r9
 80077a6:	4666      	mov	r6, ip
 80077a8:	4605      	mov	r5, r0
 80077aa:	e000      	b.n	80077ae <__multiply+0x7a>
 80077ac:	461e      	mov	r6, r3
 80077ae:	f857 4b04 	ldr.w	r4, [r7], #4
 80077b2:	6830      	ldr	r0, [r6, #0]
 80077b4:	b2a1      	uxth	r1, r4
 80077b6:	b283      	uxth	r3, r0
 80077b8:	fb0b 3101 	mla	r1, fp, r1, r3
 80077bc:	0c24      	lsrs	r4, r4, #16
 80077be:	0c00      	lsrs	r0, r0, #16
 80077c0:	194b      	adds	r3, r1, r5
 80077c2:	fb0b 0004 	mla	r0, fp, r4, r0
 80077c6:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 80077ca:	b299      	uxth	r1, r3
 80077cc:	4633      	mov	r3, r6
 80077ce:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80077d2:	45be      	cmp	lr, r7
 80077d4:	ea4f 4510 	mov.w	r5, r0, lsr #16
 80077d8:	f843 1b04 	str.w	r1, [r3], #4
 80077dc:	d8e6      	bhi.n	80077ac <__multiply+0x78>
 80077de:	6075      	str	r5, [r6, #4]
 80077e0:	f852 3c04 	ldr.w	r3, [r2, #-4]
 80077e4:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 80077e8:	d020      	beq.n	800782c <__multiply+0xf8>
 80077ea:	f8dc 3000 	ldr.w	r3, [ip]
 80077ee:	4667      	mov	r7, ip
 80077f0:	4618      	mov	r0, r3
 80077f2:	464d      	mov	r5, r9
 80077f4:	2100      	movs	r1, #0
 80077f6:	e000      	b.n	80077fa <__multiply+0xc6>
 80077f8:	4637      	mov	r7, r6
 80077fa:	882c      	ldrh	r4, [r5, #0]
 80077fc:	0c00      	lsrs	r0, r0, #16
 80077fe:	fb0b 0004 	mla	r0, fp, r4, r0
 8007802:	4401      	add	r1, r0
 8007804:	b29c      	uxth	r4, r3
 8007806:	463e      	mov	r6, r7
 8007808:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 800780c:	f846 3b04 	str.w	r3, [r6], #4
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f855 4b04 	ldr.w	r4, [r5], #4
 8007816:	b283      	uxth	r3, r0
 8007818:	0c24      	lsrs	r4, r4, #16
 800781a:	fb0b 3404 	mla	r4, fp, r4, r3
 800781e:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8007822:	45ae      	cmp	lr, r5
 8007824:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8007828:	d8e6      	bhi.n	80077f8 <__multiply+0xc4>
 800782a:	607b      	str	r3, [r7, #4]
 800782c:	4592      	cmp	sl, r2
 800782e:	f10c 0c04 	add.w	ip, ip, #4
 8007832:	d8af      	bhi.n	8007794 <__multiply+0x60>
 8007834:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007838:	f1b8 0f00 	cmp.w	r8, #0
 800783c:	dd0b      	ble.n	8007856 <__multiply+0x122>
 800783e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8007842:	f1a9 0904 	sub.w	r9, r9, #4
 8007846:	b11b      	cbz	r3, 8007850 <__multiply+0x11c>
 8007848:	e005      	b.n	8007856 <__multiply+0x122>
 800784a:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 800784e:	b913      	cbnz	r3, 8007856 <__multiply+0x122>
 8007850:	f1b8 0801 	subs.w	r8, r8, #1
 8007854:	d1f9      	bne.n	800784a <__multiply+0x116>
 8007856:	9800      	ldr	r0, [sp, #0]
 8007858:	f8c0 8010 	str.w	r8, [r0, #16]
 800785c:	b003      	add	sp, #12
 800785e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007862:	4615      	mov	r5, r2
 8007864:	460c      	mov	r4, r1
 8007866:	e772      	b.n	800774e <__multiply+0x1a>

08007868 <__pow5mult>:
 8007868:	f012 0303 	ands.w	r3, r2, #3
 800786c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007870:	4614      	mov	r4, r2
 8007872:	4607      	mov	r7, r0
 8007874:	460e      	mov	r6, r1
 8007876:	d12d      	bne.n	80078d4 <__pow5mult+0x6c>
 8007878:	10a4      	asrs	r4, r4, #2
 800787a:	d01c      	beq.n	80078b6 <__pow5mult+0x4e>
 800787c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800787e:	b395      	cbz	r5, 80078e6 <__pow5mult+0x7e>
 8007880:	07e3      	lsls	r3, r4, #31
 8007882:	f04f 0800 	mov.w	r8, #0
 8007886:	d406      	bmi.n	8007896 <__pow5mult+0x2e>
 8007888:	1064      	asrs	r4, r4, #1
 800788a:	d014      	beq.n	80078b6 <__pow5mult+0x4e>
 800788c:	6828      	ldr	r0, [r5, #0]
 800788e:	b1a8      	cbz	r0, 80078bc <__pow5mult+0x54>
 8007890:	4605      	mov	r5, r0
 8007892:	07e3      	lsls	r3, r4, #31
 8007894:	d5f8      	bpl.n	8007888 <__pow5mult+0x20>
 8007896:	4638      	mov	r0, r7
 8007898:	4631      	mov	r1, r6
 800789a:	462a      	mov	r2, r5
 800789c:	f7ff ff4a 	bl	8007734 <__multiply>
 80078a0:	b1b6      	cbz	r6, 80078d0 <__pow5mult+0x68>
 80078a2:	6872      	ldr	r2, [r6, #4]
 80078a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078a6:	1064      	asrs	r4, r4, #1
 80078a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078ac:	6031      	str	r1, [r6, #0]
 80078ae:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80078b2:	4606      	mov	r6, r0
 80078b4:	d1ea      	bne.n	800788c <__pow5mult+0x24>
 80078b6:	4630      	mov	r0, r6
 80078b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078bc:	4629      	mov	r1, r5
 80078be:	462a      	mov	r2, r5
 80078c0:	4638      	mov	r0, r7
 80078c2:	f7ff ff37 	bl	8007734 <__multiply>
 80078c6:	6028      	str	r0, [r5, #0]
 80078c8:	f8c0 8000 	str.w	r8, [r0]
 80078cc:	4605      	mov	r5, r0
 80078ce:	e7e0      	b.n	8007892 <__pow5mult+0x2a>
 80078d0:	4606      	mov	r6, r0
 80078d2:	e7d9      	b.n	8007888 <__pow5mult+0x20>
 80078d4:	1e5a      	subs	r2, r3, #1
 80078d6:	4d0b      	ldr	r5, [pc, #44]	; (8007904 <__pow5mult+0x9c>)
 80078d8:	2300      	movs	r3, #0
 80078da:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80078de:	f7ff fe43 	bl	8007568 <__multadd>
 80078e2:	4606      	mov	r6, r0
 80078e4:	e7c8      	b.n	8007878 <__pow5mult+0x10>
 80078e6:	2101      	movs	r1, #1
 80078e8:	4638      	mov	r0, r7
 80078ea:	f7ff fe0d 	bl	8007508 <_Balloc>
 80078ee:	f240 2171 	movw	r1, #625	; 0x271
 80078f2:	2201      	movs	r2, #1
 80078f4:	2300      	movs	r3, #0
 80078f6:	6141      	str	r1, [r0, #20]
 80078f8:	6102      	str	r2, [r0, #16]
 80078fa:	4605      	mov	r5, r0
 80078fc:	64b8      	str	r0, [r7, #72]	; 0x48
 80078fe:	6003      	str	r3, [r0, #0]
 8007900:	e7be      	b.n	8007880 <__pow5mult+0x18>
 8007902:	bf00      	nop
 8007904:	0800ac20 	.word	0x0800ac20

08007908 <__lshift>:
 8007908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800790c:	690f      	ldr	r7, [r1, #16]
 800790e:	688b      	ldr	r3, [r1, #8]
 8007910:	ea4f 1962 	mov.w	r9, r2, asr #5
 8007914:	444f      	add	r7, r9
 8007916:	1c7d      	adds	r5, r7, #1
 8007918:	429d      	cmp	r5, r3
 800791a:	460e      	mov	r6, r1
 800791c:	4614      	mov	r4, r2
 800791e:	6849      	ldr	r1, [r1, #4]
 8007920:	4680      	mov	r8, r0
 8007922:	dd04      	ble.n	800792e <__lshift+0x26>
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	429d      	cmp	r5, r3
 8007928:	f101 0101 	add.w	r1, r1, #1
 800792c:	dcfa      	bgt.n	8007924 <__lshift+0x1c>
 800792e:	4640      	mov	r0, r8
 8007930:	f7ff fdea 	bl	8007508 <_Balloc>
 8007934:	f1b9 0f00 	cmp.w	r9, #0
 8007938:	f100 0114 	add.w	r1, r0, #20
 800793c:	dd09      	ble.n	8007952 <__lshift+0x4a>
 800793e:	2300      	movs	r3, #0
 8007940:	469e      	mov	lr, r3
 8007942:	460a      	mov	r2, r1
 8007944:	3301      	adds	r3, #1
 8007946:	454b      	cmp	r3, r9
 8007948:	f842 eb04 	str.w	lr, [r2], #4
 800794c:	d1fa      	bne.n	8007944 <__lshift+0x3c>
 800794e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007952:	6932      	ldr	r2, [r6, #16]
 8007954:	f106 0314 	add.w	r3, r6, #20
 8007958:	f014 0c1f 	ands.w	ip, r4, #31
 800795c:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 8007960:	d01f      	beq.n	80079a2 <__lshift+0x9a>
 8007962:	f1cc 0920 	rsb	r9, ip, #32
 8007966:	2200      	movs	r2, #0
 8007968:	681c      	ldr	r4, [r3, #0]
 800796a:	fa04 f40c 	lsl.w	r4, r4, ip
 800796e:	4314      	orrs	r4, r2
 8007970:	468a      	mov	sl, r1
 8007972:	f841 4b04 	str.w	r4, [r1], #4
 8007976:	f853 4b04 	ldr.w	r4, [r3], #4
 800797a:	459e      	cmp	lr, r3
 800797c:	fa24 f209 	lsr.w	r2, r4, r9
 8007980:	d8f2      	bhi.n	8007968 <__lshift+0x60>
 8007982:	f8ca 2004 	str.w	r2, [sl, #4]
 8007986:	b102      	cbz	r2, 800798a <__lshift+0x82>
 8007988:	1cbd      	adds	r5, r7, #2
 800798a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800798e:	6872      	ldr	r2, [r6, #4]
 8007990:	3d01      	subs	r5, #1
 8007992:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007996:	6105      	str	r5, [r0, #16]
 8007998:	6031      	str	r1, [r6, #0]
 800799a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800799e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a2:	3904      	subs	r1, #4
 80079a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80079ac:	459e      	cmp	lr, r3
 80079ae:	d8f9      	bhi.n	80079a4 <__lshift+0x9c>
 80079b0:	e7eb      	b.n	800798a <__lshift+0x82>
 80079b2:	bf00      	nop

080079b4 <__mcmp>:
 80079b4:	6902      	ldr	r2, [r0, #16]
 80079b6:	690b      	ldr	r3, [r1, #16]
 80079b8:	1ad2      	subs	r2, r2, r3
 80079ba:	d113      	bne.n	80079e4 <__mcmp+0x30>
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	3014      	adds	r0, #20
 80079c0:	3114      	adds	r1, #20
 80079c2:	4419      	add	r1, r3
 80079c4:	b410      	push	{r4}
 80079c6:	4403      	add	r3, r0
 80079c8:	e001      	b.n	80079ce <__mcmp+0x1a>
 80079ca:	4298      	cmp	r0, r3
 80079cc:	d20c      	bcs.n	80079e8 <__mcmp+0x34>
 80079ce:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80079d2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80079d6:	4294      	cmp	r4, r2
 80079d8:	d0f7      	beq.n	80079ca <__mcmp+0x16>
 80079da:	d309      	bcc.n	80079f0 <__mcmp+0x3c>
 80079dc:	2001      	movs	r0, #1
 80079de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	4610      	mov	r0, r2
 80079e6:	4770      	bx	lr
 80079e8:	2000      	movs	r0, #0
 80079ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop

080079fc <__mdiff>:
 80079fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a00:	460e      	mov	r6, r1
 8007a02:	4605      	mov	r5, r0
 8007a04:	4611      	mov	r1, r2
 8007a06:	4630      	mov	r0, r6
 8007a08:	4614      	mov	r4, r2
 8007a0a:	f7ff ffd3 	bl	80079b4 <__mcmp>
 8007a0e:	1e07      	subs	r7, r0, #0
 8007a10:	d054      	beq.n	8007abc <__mdiff+0xc0>
 8007a12:	db4d      	blt.n	8007ab0 <__mdiff+0xb4>
 8007a14:	f04f 0800 	mov.w	r8, #0
 8007a18:	6871      	ldr	r1, [r6, #4]
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f7ff fd74 	bl	8007508 <_Balloc>
 8007a20:	6937      	ldr	r7, [r6, #16]
 8007a22:	6923      	ldr	r3, [r4, #16]
 8007a24:	f8c0 800c 	str.w	r8, [r0, #12]
 8007a28:	3614      	adds	r6, #20
 8007a2a:	f104 0214 	add.w	r2, r4, #20
 8007a2e:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8007a32:	f100 0514 	add.w	r5, r0, #20
 8007a36:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007a40:	f852 4b04 	ldr.w	r4, [r2], #4
 8007a44:	fa13 f388 	uxtah	r3, r3, r8
 8007a48:	b2a1      	uxth	r1, r4
 8007a4a:	0c24      	lsrs	r4, r4, #16
 8007a4c:	1a59      	subs	r1, r3, r1
 8007a4e:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 8007a52:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007a56:	b289      	uxth	r1, r1
 8007a58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007a5c:	4594      	cmp	ip, r2
 8007a5e:	f845 1b04 	str.w	r1, [r5], #4
 8007a62:	ea4f 4323 	mov.w	r3, r3, asr #16
 8007a66:	4634      	mov	r4, r6
 8007a68:	d8e8      	bhi.n	8007a3c <__mdiff+0x40>
 8007a6a:	45b6      	cmp	lr, r6
 8007a6c:	46ac      	mov	ip, r5
 8007a6e:	d915      	bls.n	8007a9c <__mdiff+0xa0>
 8007a70:	f854 2b04 	ldr.w	r2, [r4], #4
 8007a74:	fa13 f182 	uxtah	r1, r3, r2
 8007a78:	0c13      	lsrs	r3, r2, #16
 8007a7a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007a7e:	b289      	uxth	r1, r1
 8007a80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007a84:	45a6      	cmp	lr, r4
 8007a86:	f845 1b04 	str.w	r1, [r5], #4
 8007a8a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8007a8e:	d8ef      	bhi.n	8007a70 <__mdiff+0x74>
 8007a90:	43f6      	mvns	r6, r6
 8007a92:	4476      	add	r6, lr
 8007a94:	f026 0503 	bic.w	r5, r6, #3
 8007a98:	3504      	adds	r5, #4
 8007a9a:	4465      	add	r5, ip
 8007a9c:	3d04      	subs	r5, #4
 8007a9e:	b921      	cbnz	r1, 8007aaa <__mdiff+0xae>
 8007aa0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007aa4:	3f01      	subs	r7, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d0fa      	beq.n	8007aa0 <__mdiff+0xa4>
 8007aaa:	6107      	str	r7, [r0, #16]
 8007aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab0:	4633      	mov	r3, r6
 8007ab2:	f04f 0801 	mov.w	r8, #1
 8007ab6:	4626      	mov	r6, r4
 8007ab8:	461c      	mov	r4, r3
 8007aba:	e7ad      	b.n	8007a18 <__mdiff+0x1c>
 8007abc:	4628      	mov	r0, r5
 8007abe:	4639      	mov	r1, r7
 8007ac0:	f7ff fd22 	bl	8007508 <_Balloc>
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	6147      	str	r7, [r0, #20]
 8007ac8:	6103      	str	r3, [r0, #16]
 8007aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ace:	bf00      	nop

08007ad0 <__ulp>:
 8007ad0:	4b12      	ldr	r3, [pc, #72]	; (8007b1c <__ulp+0x4c>)
 8007ad2:	ee10 2a90 	vmov	r2, s1
 8007ad6:	401a      	ands	r2, r3
 8007ad8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	dd04      	ble.n	8007aea <__ulp+0x1a>
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	ec41 0b10 	vmov	d0, r0, r1
 8007ae8:	4770      	bx	lr
 8007aea:	425b      	negs	r3, r3
 8007aec:	151b      	asrs	r3, r3, #20
 8007aee:	2b13      	cmp	r3, #19
 8007af0:	dd0c      	ble.n	8007b0c <__ulp+0x3c>
 8007af2:	2b32      	cmp	r3, #50	; 0x32
 8007af4:	bfdd      	ittte	le
 8007af6:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
 8007afa:	2201      	movle	r2, #1
 8007afc:	fa02 f303 	lslle.w	r3, r2, r3
 8007b00:	2301      	movgt	r3, #1
 8007b02:	2100      	movs	r1, #0
 8007b04:	4618      	mov	r0, r3
 8007b06:	ec41 0b10 	vmov	d0, r0, r1
 8007b0a:	4770      	bx	lr
 8007b0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007b10:	2000      	movs	r0, #0
 8007b12:	fa42 f103 	asr.w	r1, r2, r3
 8007b16:	ec41 0b10 	vmov	d0, r0, r1
 8007b1a:	4770      	bx	lr
 8007b1c:	7ff00000 	.word	0x7ff00000

08007b20 <__b2d>:
 8007b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b22:	6904      	ldr	r4, [r0, #16]
 8007b24:	f100 0714 	add.w	r7, r0, #20
 8007b28:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8007b2c:	460d      	mov	r5, r1
 8007b2e:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8007b32:	4630      	mov	r0, r6
 8007b34:	f7ff fda6 	bl	8007684 <__hi0bits>
 8007b38:	f1c0 0320 	rsb	r3, r0, #32
 8007b3c:	280a      	cmp	r0, #10
 8007b3e:	602b      	str	r3, [r5, #0]
 8007b40:	f1a4 0104 	sub.w	r1, r4, #4
 8007b44:	dc16      	bgt.n	8007b74 <__b2d+0x54>
 8007b46:	428f      	cmp	r7, r1
 8007b48:	f1c0 050b 	rsb	r5, r0, #11
 8007b4c:	bf38      	it	cc
 8007b4e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 8007b52:	fa26 fe05 	lsr.w	lr, r6, r5
 8007b56:	f100 0015 	add.w	r0, r0, #21
 8007b5a:	f04e 537f 	orr.w	r3, lr, #1069547520	; 0x3fc00000
 8007b5e:	bf34      	ite	cc
 8007b60:	40e9      	lsrcc	r1, r5
 8007b62:	2100      	movcs	r1, #0
 8007b64:	4086      	lsls	r6, r0
 8007b66:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007b6a:	ea41 0206 	orr.w	r2, r1, r6
 8007b6e:	ec43 2b10 	vmov	d0, r2, r3
 8007b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b74:	428f      	cmp	r7, r1
 8007b76:	d220      	bcs.n	8007bba <__b2d+0x9a>
 8007b78:	f1b0 0e0b 	subs.w	lr, r0, #11
 8007b7c:	f1a4 0c08 	sub.w	ip, r4, #8
 8007b80:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8007b84:	d026      	beq.n	8007bd4 <__b2d+0xb4>
 8007b86:	f1c0 052b 	rsb	r5, r0, #43	; 0x2b
 8007b8a:	4567      	cmp	r7, ip
 8007b8c:	fa21 f305 	lsr.w	r3, r1, r5
 8007b90:	fa06 f60e 	lsl.w	r6, r6, lr
 8007b94:	ea46 0603 	orr.w	r6, r6, r3
 8007b98:	bf38      	it	cc
 8007b9a:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
 8007b9e:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
 8007ba2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007ba6:	bf34      	ite	cc
 8007ba8:	40e8      	lsrcc	r0, r5
 8007baa:	2000      	movcs	r0, #0
 8007bac:	fa01 f10e 	lsl.w	r1, r1, lr
 8007bb0:	ea41 0200 	orr.w	r2, r1, r0
 8007bb4:	ec43 2b10 	vmov	d0, r2, r3
 8007bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bba:	f1b0 0e0b 	subs.w	lr, r0, #11
 8007bbe:	d008      	beq.n	8007bd2 <__b2d+0xb2>
 8007bc0:	fa06 f60e 	lsl.w	r6, r6, lr
 8007bc4:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
 8007bc8:	2000      	movs	r0, #0
 8007bca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007bce:	4601      	mov	r1, r0
 8007bd0:	e7ec      	b.n	8007bac <__b2d+0x8c>
 8007bd2:	4671      	mov	r1, lr
 8007bd4:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
 8007bd8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007bdc:	460a      	mov	r2, r1
 8007bde:	ec43 2b10 	vmov	d0, r2, r3
 8007be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007be4 <__d2b>:
 8007be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007be8:	ec57 6b10 	vmov	r6, r7, d0
 8007bec:	b083      	sub	sp, #12
 8007bee:	4688      	mov	r8, r1
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	463c      	mov	r4, r7
 8007bf4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007bf8:	4617      	mov	r7, r2
 8007bfa:	f7ff fc85 	bl	8007508 <_Balloc>
 8007bfe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007c02:	4681      	mov	r9, r0
 8007c04:	b10d      	cbz	r5, 8007c0a <__d2b+0x26>
 8007c06:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8007c0a:	9401      	str	r4, [sp, #4]
 8007c0c:	b31e      	cbz	r6, 8007c56 <__d2b+0x72>
 8007c0e:	a802      	add	r0, sp, #8
 8007c10:	f840 6d08 	str.w	r6, [r0, #-8]!
 8007c14:	f7ff fd56 	bl	80076c4 <__lo0bits>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d134      	bne.n	8007c86 <__d2b+0xa2>
 8007c1c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8007c20:	f8c9 2014 	str.w	r2, [r9, #20]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	bf14      	ite	ne
 8007c28:	2402      	movne	r4, #2
 8007c2a:	2401      	moveq	r4, #1
 8007c2c:	f8c9 3018 	str.w	r3, [r9, #24]
 8007c30:	f8c9 4010 	str.w	r4, [r9, #16]
 8007c34:	b9dd      	cbnz	r5, 8007c6e <__d2b+0x8a>
 8007c36:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 8007c3a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c3e:	f8c8 0000 	str.w	r0, [r8]
 8007c42:	6918      	ldr	r0, [r3, #16]
 8007c44:	f7ff fd1e 	bl	8007684 <__hi0bits>
 8007c48:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8007c4c:	6038      	str	r0, [r7, #0]
 8007c4e:	4648      	mov	r0, r9
 8007c50:	b003      	add	sp, #12
 8007c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c56:	a801      	add	r0, sp, #4
 8007c58:	f7ff fd34 	bl	80076c4 <__lo0bits>
 8007c5c:	2401      	movs	r4, #1
 8007c5e:	9b01      	ldr	r3, [sp, #4]
 8007c60:	f8c9 3014 	str.w	r3, [r9, #20]
 8007c64:	3020      	adds	r0, #32
 8007c66:	f8c9 4010 	str.w	r4, [r9, #16]
 8007c6a:	2d00      	cmp	r5, #0
 8007c6c:	d0e3      	beq.n	8007c36 <__d2b+0x52>
 8007c6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c72:	4405      	add	r5, r0
 8007c74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c78:	f8c8 5000 	str.w	r5, [r8]
 8007c7c:	6038      	str	r0, [r7, #0]
 8007c7e:	4648      	mov	r0, r9
 8007c80:	b003      	add	sp, #12
 8007c82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c86:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8007c8a:	f1c0 0120 	rsb	r1, r0, #32
 8007c8e:	fa03 f101 	lsl.w	r1, r3, r1
 8007c92:	430a      	orrs	r2, r1
 8007c94:	40c3      	lsrs	r3, r0
 8007c96:	9301      	str	r3, [sp, #4]
 8007c98:	f8c9 2014 	str.w	r2, [r9, #20]
 8007c9c:	e7c2      	b.n	8007c24 <__d2b+0x40>
 8007c9e:	bf00      	nop

08007ca0 <__ratio>:
 8007ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	4688      	mov	r8, r1
 8007ca8:	4669      	mov	r1, sp
 8007caa:	4681      	mov	r9, r0
 8007cac:	f7ff ff38 	bl	8007b20 <__b2d>
 8007cb0:	4640      	mov	r0, r8
 8007cb2:	a901      	add	r1, sp, #4
 8007cb4:	ec55 4b10 	vmov	r4, r5, d0
 8007cb8:	f7ff ff32 	bl	8007b20 <__b2d>
 8007cbc:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8007cc0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8007cc4:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8007cc8:	1ac9      	subs	r1, r1, r3
 8007cca:	1a12      	subs	r2, r2, r0
 8007ccc:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	ec57 6b10 	vmov	r6, r7, d0
 8007cd6:	dd0d      	ble.n	8007cf4 <__ratio+0x54>
 8007cd8:	eb05 5103 	add.w	r1, r5, r3, lsl #20
 8007cdc:	460d      	mov	r5, r1
 8007cde:	4620      	mov	r0, r4
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	4632      	mov	r2, r6
 8007ce4:	463b      	mov	r3, r7
 8007ce6:	f002 f8cb 	bl	8009e80 <__aeabi_ddiv>
 8007cea:	ec41 0b10 	vmov	d0, r0, r1
 8007cee:	b003      	add	sp, #12
 8007cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cf4:	eba7 5903 	sub.w	r9, r7, r3, lsl #20
 8007cf8:	ee10 6a10 	vmov	r6, s0
 8007cfc:	464f      	mov	r7, r9
 8007cfe:	e7ee      	b.n	8007cde <__ratio+0x3e>

08007d00 <_mprec_log10>:
 8007d00:	2817      	cmp	r0, #23
 8007d02:	b510      	push	{r4, lr}
 8007d04:	4604      	mov	r4, r0
 8007d06:	dd0a      	ble.n	8007d1e <_mprec_log10+0x1e>
 8007d08:	4908      	ldr	r1, [pc, #32]	; (8007d2c <_mprec_log10+0x2c>)
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	4b08      	ldr	r3, [pc, #32]	; (8007d30 <_mprec_log10+0x30>)
 8007d10:	f001 ff8c 	bl	8009c2c <__aeabi_dmul>
 8007d14:	3c01      	subs	r4, #1
 8007d16:	d1f9      	bne.n	8007d0c <_mprec_log10+0xc>
 8007d18:	ec41 0b10 	vmov	d0, r0, r1
 8007d1c:	bd10      	pop	{r4, pc}
 8007d1e:	4b05      	ldr	r3, [pc, #20]	; (8007d34 <_mprec_log10+0x34>)
 8007d20:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8007d24:	ed94 0b00 	vldr	d0, [r4]
 8007d28:	bd10      	pop	{r4, pc}
 8007d2a:	bf00      	nop
 8007d2c:	3ff00000 	.word	0x3ff00000
 8007d30:	40240000 	.word	0x40240000
 8007d34:	0800ab58 	.word	0x0800ab58

08007d38 <__copybits>:
 8007d38:	b470      	push	{r4, r5, r6}
 8007d3a:	6914      	ldr	r4, [r2, #16]
 8007d3c:	f102 0314 	add.w	r3, r2, #20
 8007d40:	3901      	subs	r1, #1
 8007d42:	114e      	asrs	r6, r1, #5
 8007d44:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007d48:	3601      	adds	r6, #1
 8007d4a:	42a3      	cmp	r3, r4
 8007d4c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007d50:	d20c      	bcs.n	8007d6c <__copybits+0x34>
 8007d52:	1f01      	subs	r1, r0, #4
 8007d54:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d58:	f841 5f04 	str.w	r5, [r1, #4]!
 8007d5c:	429c      	cmp	r4, r3
 8007d5e:	d8f9      	bhi.n	8007d54 <__copybits+0x1c>
 8007d60:	1aa3      	subs	r3, r4, r2
 8007d62:	3b15      	subs	r3, #21
 8007d64:	f023 0303 	bic.w	r3, r3, #3
 8007d68:	3304      	adds	r3, #4
 8007d6a:	4418      	add	r0, r3
 8007d6c:	4286      	cmp	r6, r0
 8007d6e:	d904      	bls.n	8007d7a <__copybits+0x42>
 8007d70:	2300      	movs	r3, #0
 8007d72:	f840 3b04 	str.w	r3, [r0], #4
 8007d76:	4286      	cmp	r6, r0
 8007d78:	d8fb      	bhi.n	8007d72 <__copybits+0x3a>
 8007d7a:	bc70      	pop	{r4, r5, r6}
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop

08007d80 <__any_on>:
 8007d80:	6903      	ldr	r3, [r0, #16]
 8007d82:	114a      	asrs	r2, r1, #5
 8007d84:	4293      	cmp	r3, r2
 8007d86:	b410      	push	{r4}
 8007d88:	f100 0414 	add.w	r4, r0, #20
 8007d8c:	da10      	bge.n	8007db0 <__any_on+0x30>
 8007d8e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d92:	429c      	cmp	r4, r3
 8007d94:	d221      	bcs.n	8007dda <__any_on+0x5a>
 8007d96:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007d9a:	3b04      	subs	r3, #4
 8007d9c:	b118      	cbz	r0, 8007da6 <__any_on+0x26>
 8007d9e:	e015      	b.n	8007dcc <__any_on+0x4c>
 8007da0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007da4:	b992      	cbnz	r2, 8007dcc <__any_on+0x4c>
 8007da6:	429c      	cmp	r4, r3
 8007da8:	d3fa      	bcc.n	8007da0 <__any_on+0x20>
 8007daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	dd10      	ble.n	8007dd4 <__any_on+0x54>
 8007db2:	f011 011f 	ands.w	r1, r1, #31
 8007db6:	d00d      	beq.n	8007dd4 <__any_on+0x54>
 8007db8:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 8007dbc:	fa20 f301 	lsr.w	r3, r0, r1
 8007dc0:	fa03 f101 	lsl.w	r1, r3, r1
 8007dc4:	4281      	cmp	r1, r0
 8007dc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007dca:	d0e2      	beq.n	8007d92 <__any_on+0x12>
 8007dcc:	2001      	movs	r0, #1
 8007dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007dd8:	e7db      	b.n	8007d92 <__any_on+0x12>
 8007dda:	2000      	movs	r0, #0
 8007ddc:	e7e5      	b.n	8007daa <__any_on+0x2a>
 8007dde:	bf00      	nop

08007de0 <_realloc_r>:
 8007de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de4:	4617      	mov	r7, r2
 8007de6:	b083      	sub	sp, #12
 8007de8:	460e      	mov	r6, r1
 8007dea:	2900      	cmp	r1, #0
 8007dec:	f000 80e7 	beq.w	8007fbe <_realloc_r+0x1de>
 8007df0:	4681      	mov	r9, r0
 8007df2:	f107 050b 	add.w	r5, r7, #11
 8007df6:	f7ff fb83 	bl	8007500 <__malloc_lock>
 8007dfa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007dfe:	2d16      	cmp	r5, #22
 8007e00:	f023 0403 	bic.w	r4, r3, #3
 8007e04:	f1a6 0808 	sub.w	r8, r6, #8
 8007e08:	d84c      	bhi.n	8007ea4 <_realloc_r+0xc4>
 8007e0a:	2210      	movs	r2, #16
 8007e0c:	4615      	mov	r5, r2
 8007e0e:	42af      	cmp	r7, r5
 8007e10:	d84d      	bhi.n	8007eae <_realloc_r+0xce>
 8007e12:	4294      	cmp	r4, r2
 8007e14:	f280 8084 	bge.w	8007f20 <_realloc_r+0x140>
 8007e18:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 80081c8 <_realloc_r+0x3e8>
 8007e1c:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007e20:	eb08 0104 	add.w	r1, r8, r4
 8007e24:	4288      	cmp	r0, r1
 8007e26:	f000 80d6 	beq.w	8007fd6 <_realloc_r+0x1f6>
 8007e2a:	6848      	ldr	r0, [r1, #4]
 8007e2c:	f020 0e01 	bic.w	lr, r0, #1
 8007e30:	448e      	add	lr, r1
 8007e32:	f8de e004 	ldr.w	lr, [lr, #4]
 8007e36:	f01e 0f01 	tst.w	lr, #1
 8007e3a:	d13f      	bne.n	8007ebc <_realloc_r+0xdc>
 8007e3c:	f020 0003 	bic.w	r0, r0, #3
 8007e40:	4420      	add	r0, r4
 8007e42:	4290      	cmp	r0, r2
 8007e44:	f280 80c1 	bge.w	8007fca <_realloc_r+0x1ea>
 8007e48:	07db      	lsls	r3, r3, #31
 8007e4a:	f100 808f 	bmi.w	8007f6c <_realloc_r+0x18c>
 8007e4e:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8007e52:	ebc3 0a08 	rsb	sl, r3, r8
 8007e56:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007e5a:	f023 0303 	bic.w	r3, r3, #3
 8007e5e:	eb00 0e03 	add.w	lr, r0, r3
 8007e62:	4596      	cmp	lr, r2
 8007e64:	db34      	blt.n	8007ed0 <_realloc_r+0xf0>
 8007e66:	68cb      	ldr	r3, [r1, #12]
 8007e68:	688a      	ldr	r2, [r1, #8]
 8007e6a:	4657      	mov	r7, sl
 8007e6c:	60d3      	str	r3, [r2, #12]
 8007e6e:	609a      	str	r2, [r3, #8]
 8007e70:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8007e74:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007e78:	60cb      	str	r3, [r1, #12]
 8007e7a:	1f22      	subs	r2, r4, #4
 8007e7c:	2a24      	cmp	r2, #36	; 0x24
 8007e7e:	6099      	str	r1, [r3, #8]
 8007e80:	f200 8136 	bhi.w	80080f0 <_realloc_r+0x310>
 8007e84:	2a13      	cmp	r2, #19
 8007e86:	f240 80fd 	bls.w	8008084 <_realloc_r+0x2a4>
 8007e8a:	6833      	ldr	r3, [r6, #0]
 8007e8c:	f8ca 3008 	str.w	r3, [sl, #8]
 8007e90:	6873      	ldr	r3, [r6, #4]
 8007e92:	f8ca 300c 	str.w	r3, [sl, #12]
 8007e96:	2a1b      	cmp	r2, #27
 8007e98:	f200 8140 	bhi.w	800811c <_realloc_r+0x33c>
 8007e9c:	3608      	adds	r6, #8
 8007e9e:	f10a 0310 	add.w	r3, sl, #16
 8007ea2:	e0f0      	b.n	8008086 <_realloc_r+0x2a6>
 8007ea4:	f025 0507 	bic.w	r5, r5, #7
 8007ea8:	2d00      	cmp	r5, #0
 8007eaa:	462a      	mov	r2, r5
 8007eac:	daaf      	bge.n	8007e0e <_realloc_r+0x2e>
 8007eae:	230c      	movs	r3, #12
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	f8c9 3000 	str.w	r3, [r9]
 8007eb6:	b003      	add	sp, #12
 8007eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ebc:	07d9      	lsls	r1, r3, #31
 8007ebe:	d455      	bmi.n	8007f6c <_realloc_r+0x18c>
 8007ec0:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8007ec4:	ebc3 0a08 	rsb	sl, r3, r8
 8007ec8:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007ecc:	f023 0303 	bic.w	r3, r3, #3
 8007ed0:	4423      	add	r3, r4
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	db4a      	blt.n	8007f6c <_realloc_r+0x18c>
 8007ed6:	4657      	mov	r7, sl
 8007ed8:	f8da 100c 	ldr.w	r1, [sl, #12]
 8007edc:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8007ee0:	1f22      	subs	r2, r4, #4
 8007ee2:	2a24      	cmp	r2, #36	; 0x24
 8007ee4:	60c1      	str	r1, [r0, #12]
 8007ee6:	6088      	str	r0, [r1, #8]
 8007ee8:	f200 810e 	bhi.w	8008108 <_realloc_r+0x328>
 8007eec:	2a13      	cmp	r2, #19
 8007eee:	f240 8109 	bls.w	8008104 <_realloc_r+0x324>
 8007ef2:	6831      	ldr	r1, [r6, #0]
 8007ef4:	f8ca 1008 	str.w	r1, [sl, #8]
 8007ef8:	6871      	ldr	r1, [r6, #4]
 8007efa:	f8ca 100c 	str.w	r1, [sl, #12]
 8007efe:	2a1b      	cmp	r2, #27
 8007f00:	f200 8121 	bhi.w	8008146 <_realloc_r+0x366>
 8007f04:	3608      	adds	r6, #8
 8007f06:	f10a 0210 	add.w	r2, sl, #16
 8007f0a:	6831      	ldr	r1, [r6, #0]
 8007f0c:	6011      	str	r1, [r2, #0]
 8007f0e:	6871      	ldr	r1, [r6, #4]
 8007f10:	6051      	str	r1, [r2, #4]
 8007f12:	68b1      	ldr	r1, [r6, #8]
 8007f14:	6091      	str	r1, [r2, #8]
 8007f16:	461c      	mov	r4, r3
 8007f18:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007f1c:	463e      	mov	r6, r7
 8007f1e:	46d0      	mov	r8, sl
 8007f20:	1b62      	subs	r2, r4, r5
 8007f22:	2a0f      	cmp	r2, #15
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	d80e      	bhi.n	8007f48 <_realloc_r+0x168>
 8007f2a:	4323      	orrs	r3, r4
 8007f2c:	4444      	add	r4, r8
 8007f2e:	f8c8 3004 	str.w	r3, [r8, #4]
 8007f32:	6863      	ldr	r3, [r4, #4]
 8007f34:	f043 0301 	orr.w	r3, r3, #1
 8007f38:	6063      	str	r3, [r4, #4]
 8007f3a:	4648      	mov	r0, r9
 8007f3c:	f7ff fae2 	bl	8007504 <__malloc_unlock>
 8007f40:	4630      	mov	r0, r6
 8007f42:	b003      	add	sp, #12
 8007f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f48:	eb08 0105 	add.w	r1, r8, r5
 8007f4c:	431d      	orrs	r5, r3
 8007f4e:	f042 0301 	orr.w	r3, r2, #1
 8007f52:	440a      	add	r2, r1
 8007f54:	f8c8 5004 	str.w	r5, [r8, #4]
 8007f58:	604b      	str	r3, [r1, #4]
 8007f5a:	6853      	ldr	r3, [r2, #4]
 8007f5c:	f043 0301 	orr.w	r3, r3, #1
 8007f60:	3108      	adds	r1, #8
 8007f62:	6053      	str	r3, [r2, #4]
 8007f64:	4648      	mov	r0, r9
 8007f66:	f7fe fc25 	bl	80067b4 <_free_r>
 8007f6a:	e7e6      	b.n	8007f3a <_realloc_r+0x15a>
 8007f6c:	4639      	mov	r1, r7
 8007f6e:	4648      	mov	r0, r9
 8007f70:	f7fe ff86 	bl	8006e80 <_malloc_r>
 8007f74:	4607      	mov	r7, r0
 8007f76:	b1d8      	cbz	r0, 8007fb0 <_realloc_r+0x1d0>
 8007f78:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007f7c:	f023 0201 	bic.w	r2, r3, #1
 8007f80:	4442      	add	r2, r8
 8007f82:	f1a0 0108 	sub.w	r1, r0, #8
 8007f86:	4291      	cmp	r1, r2
 8007f88:	f000 80ac 	beq.w	80080e4 <_realloc_r+0x304>
 8007f8c:	1f22      	subs	r2, r4, #4
 8007f8e:	2a24      	cmp	r2, #36	; 0x24
 8007f90:	f200 8099 	bhi.w	80080c6 <_realloc_r+0x2e6>
 8007f94:	2a13      	cmp	r2, #19
 8007f96:	d86a      	bhi.n	800806e <_realloc_r+0x28e>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	4632      	mov	r2, r6
 8007f9c:	6811      	ldr	r1, [r2, #0]
 8007f9e:	6019      	str	r1, [r3, #0]
 8007fa0:	6851      	ldr	r1, [r2, #4]
 8007fa2:	6059      	str	r1, [r3, #4]
 8007fa4:	6892      	ldr	r2, [r2, #8]
 8007fa6:	609a      	str	r2, [r3, #8]
 8007fa8:	4631      	mov	r1, r6
 8007faa:	4648      	mov	r0, r9
 8007fac:	f7fe fc02 	bl	80067b4 <_free_r>
 8007fb0:	4648      	mov	r0, r9
 8007fb2:	f7ff faa7 	bl	8007504 <__malloc_unlock>
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	b003      	add	sp, #12
 8007fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	b003      	add	sp, #12
 8007fc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc6:	f7fe bf5b 	b.w	8006e80 <_malloc_r>
 8007fca:	68ca      	ldr	r2, [r1, #12]
 8007fcc:	6889      	ldr	r1, [r1, #8]
 8007fce:	4604      	mov	r4, r0
 8007fd0:	60ca      	str	r2, [r1, #12]
 8007fd2:	6091      	str	r1, [r2, #8]
 8007fd4:	e7a4      	b.n	8007f20 <_realloc_r+0x140>
 8007fd6:	6841      	ldr	r1, [r0, #4]
 8007fd8:	f021 0103 	bic.w	r1, r1, #3
 8007fdc:	4421      	add	r1, r4
 8007fde:	f105 0010 	add.w	r0, r5, #16
 8007fe2:	4281      	cmp	r1, r0
 8007fe4:	da5b      	bge.n	800809e <_realloc_r+0x2be>
 8007fe6:	07db      	lsls	r3, r3, #31
 8007fe8:	d4c0      	bmi.n	8007f6c <_realloc_r+0x18c>
 8007fea:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8007fee:	ebc3 0a08 	rsb	sl, r3, r8
 8007ff2:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007ff6:	f023 0303 	bic.w	r3, r3, #3
 8007ffa:	eb01 0c03 	add.w	ip, r1, r3
 8007ffe:	4560      	cmp	r0, ip
 8008000:	f73f af66 	bgt.w	8007ed0 <_realloc_r+0xf0>
 8008004:	4657      	mov	r7, sl
 8008006:	f8da 300c 	ldr.w	r3, [sl, #12]
 800800a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800800e:	1f22      	subs	r2, r4, #4
 8008010:	2a24      	cmp	r2, #36	; 0x24
 8008012:	60cb      	str	r3, [r1, #12]
 8008014:	6099      	str	r1, [r3, #8]
 8008016:	f200 80b8 	bhi.w	800818a <_realloc_r+0x3aa>
 800801a:	2a13      	cmp	r2, #19
 800801c:	f240 80a9 	bls.w	8008172 <_realloc_r+0x392>
 8008020:	6833      	ldr	r3, [r6, #0]
 8008022:	f8ca 3008 	str.w	r3, [sl, #8]
 8008026:	6873      	ldr	r3, [r6, #4]
 8008028:	f8ca 300c 	str.w	r3, [sl, #12]
 800802c:	2a1b      	cmp	r2, #27
 800802e:	f200 80b5 	bhi.w	800819c <_realloc_r+0x3bc>
 8008032:	3608      	adds	r6, #8
 8008034:	f10a 0310 	add.w	r3, sl, #16
 8008038:	6832      	ldr	r2, [r6, #0]
 800803a:	601a      	str	r2, [r3, #0]
 800803c:	6872      	ldr	r2, [r6, #4]
 800803e:	605a      	str	r2, [r3, #4]
 8008040:	68b2      	ldr	r2, [r6, #8]
 8008042:	609a      	str	r2, [r3, #8]
 8008044:	eb0a 0205 	add.w	r2, sl, r5
 8008048:	ebc5 030c 	rsb	r3, r5, ip
 800804c:	f043 0301 	orr.w	r3, r3, #1
 8008050:	f8cb 2008 	str.w	r2, [fp, #8]
 8008054:	6053      	str	r3, [r2, #4]
 8008056:	f8da 3004 	ldr.w	r3, [sl, #4]
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	431d      	orrs	r5, r3
 8008060:	4648      	mov	r0, r9
 8008062:	f8ca 5004 	str.w	r5, [sl, #4]
 8008066:	f7ff fa4d 	bl	8007504 <__malloc_unlock>
 800806a:	4638      	mov	r0, r7
 800806c:	e769      	b.n	8007f42 <_realloc_r+0x162>
 800806e:	6833      	ldr	r3, [r6, #0]
 8008070:	6003      	str	r3, [r0, #0]
 8008072:	6873      	ldr	r3, [r6, #4]
 8008074:	6043      	str	r3, [r0, #4]
 8008076:	2a1b      	cmp	r2, #27
 8008078:	d829      	bhi.n	80080ce <_realloc_r+0x2ee>
 800807a:	f100 0308 	add.w	r3, r0, #8
 800807e:	f106 0208 	add.w	r2, r6, #8
 8008082:	e78b      	b.n	8007f9c <_realloc_r+0x1bc>
 8008084:	463b      	mov	r3, r7
 8008086:	6832      	ldr	r2, [r6, #0]
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	6872      	ldr	r2, [r6, #4]
 800808c:	605a      	str	r2, [r3, #4]
 800808e:	68b2      	ldr	r2, [r6, #8]
 8008090:	609a      	str	r2, [r3, #8]
 8008092:	463e      	mov	r6, r7
 8008094:	4674      	mov	r4, lr
 8008096:	f8da 3004 	ldr.w	r3, [sl, #4]
 800809a:	46d0      	mov	r8, sl
 800809c:	e740      	b.n	8007f20 <_realloc_r+0x140>
 800809e:	eb08 0205 	add.w	r2, r8, r5
 80080a2:	1b4b      	subs	r3, r1, r5
 80080a4:	f043 0301 	orr.w	r3, r3, #1
 80080a8:	f8cb 2008 	str.w	r2, [fp, #8]
 80080ac:	6053      	str	r3, [r2, #4]
 80080ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	431d      	orrs	r5, r3
 80080b8:	4648      	mov	r0, r9
 80080ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80080be:	f7ff fa21 	bl	8007504 <__malloc_unlock>
 80080c2:	4630      	mov	r0, r6
 80080c4:	e73d      	b.n	8007f42 <_realloc_r+0x162>
 80080c6:	4631      	mov	r1, r6
 80080c8:	f7ff f9b6 	bl	8007438 <memmove>
 80080cc:	e76c      	b.n	8007fa8 <_realloc_r+0x1c8>
 80080ce:	68b3      	ldr	r3, [r6, #8]
 80080d0:	6083      	str	r3, [r0, #8]
 80080d2:	68f3      	ldr	r3, [r6, #12]
 80080d4:	60c3      	str	r3, [r0, #12]
 80080d6:	2a24      	cmp	r2, #36	; 0x24
 80080d8:	d02c      	beq.n	8008134 <_realloc_r+0x354>
 80080da:	f100 0310 	add.w	r3, r0, #16
 80080de:	f106 0210 	add.w	r2, r6, #16
 80080e2:	e75b      	b.n	8007f9c <_realloc_r+0x1bc>
 80080e4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80080e8:	f022 0203 	bic.w	r2, r2, #3
 80080ec:	4414      	add	r4, r2
 80080ee:	e717      	b.n	8007f20 <_realloc_r+0x140>
 80080f0:	4631      	mov	r1, r6
 80080f2:	4638      	mov	r0, r7
 80080f4:	4674      	mov	r4, lr
 80080f6:	463e      	mov	r6, r7
 80080f8:	f7ff f99e 	bl	8007438 <memmove>
 80080fc:	46d0      	mov	r8, sl
 80080fe:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008102:	e70d      	b.n	8007f20 <_realloc_r+0x140>
 8008104:	463a      	mov	r2, r7
 8008106:	e700      	b.n	8007f0a <_realloc_r+0x12a>
 8008108:	4631      	mov	r1, r6
 800810a:	4638      	mov	r0, r7
 800810c:	461c      	mov	r4, r3
 800810e:	463e      	mov	r6, r7
 8008110:	f7ff f992 	bl	8007438 <memmove>
 8008114:	46d0      	mov	r8, sl
 8008116:	f8da 3004 	ldr.w	r3, [sl, #4]
 800811a:	e701      	b.n	8007f20 <_realloc_r+0x140>
 800811c:	68b3      	ldr	r3, [r6, #8]
 800811e:	f8ca 3010 	str.w	r3, [sl, #16]
 8008122:	68f3      	ldr	r3, [r6, #12]
 8008124:	f8ca 3014 	str.w	r3, [sl, #20]
 8008128:	2a24      	cmp	r2, #36	; 0x24
 800812a:	d018      	beq.n	800815e <_realloc_r+0x37e>
 800812c:	3610      	adds	r6, #16
 800812e:	f10a 0318 	add.w	r3, sl, #24
 8008132:	e7a8      	b.n	8008086 <_realloc_r+0x2a6>
 8008134:	6933      	ldr	r3, [r6, #16]
 8008136:	6103      	str	r3, [r0, #16]
 8008138:	6973      	ldr	r3, [r6, #20]
 800813a:	6143      	str	r3, [r0, #20]
 800813c:	f106 0218 	add.w	r2, r6, #24
 8008140:	f100 0318 	add.w	r3, r0, #24
 8008144:	e72a      	b.n	8007f9c <_realloc_r+0x1bc>
 8008146:	68b1      	ldr	r1, [r6, #8]
 8008148:	f8ca 1010 	str.w	r1, [sl, #16]
 800814c:	68f1      	ldr	r1, [r6, #12]
 800814e:	f8ca 1014 	str.w	r1, [sl, #20]
 8008152:	2a24      	cmp	r2, #36	; 0x24
 8008154:	d00f      	beq.n	8008176 <_realloc_r+0x396>
 8008156:	3610      	adds	r6, #16
 8008158:	f10a 0218 	add.w	r2, sl, #24
 800815c:	e6d5      	b.n	8007f0a <_realloc_r+0x12a>
 800815e:	6933      	ldr	r3, [r6, #16]
 8008160:	f8ca 3018 	str.w	r3, [sl, #24]
 8008164:	6973      	ldr	r3, [r6, #20]
 8008166:	f8ca 301c 	str.w	r3, [sl, #28]
 800816a:	3618      	adds	r6, #24
 800816c:	f10a 0320 	add.w	r3, sl, #32
 8008170:	e789      	b.n	8008086 <_realloc_r+0x2a6>
 8008172:	463b      	mov	r3, r7
 8008174:	e760      	b.n	8008038 <_realloc_r+0x258>
 8008176:	6932      	ldr	r2, [r6, #16]
 8008178:	f8ca 2018 	str.w	r2, [sl, #24]
 800817c:	6972      	ldr	r2, [r6, #20]
 800817e:	f8ca 201c 	str.w	r2, [sl, #28]
 8008182:	3618      	adds	r6, #24
 8008184:	f10a 0220 	add.w	r2, sl, #32
 8008188:	e6bf      	b.n	8007f0a <_realloc_r+0x12a>
 800818a:	4631      	mov	r1, r6
 800818c:	4638      	mov	r0, r7
 800818e:	f8cd c004 	str.w	ip, [sp, #4]
 8008192:	f7ff f951 	bl	8007438 <memmove>
 8008196:	f8dd c004 	ldr.w	ip, [sp, #4]
 800819a:	e753      	b.n	8008044 <_realloc_r+0x264>
 800819c:	68b3      	ldr	r3, [r6, #8]
 800819e:	f8ca 3010 	str.w	r3, [sl, #16]
 80081a2:	68f3      	ldr	r3, [r6, #12]
 80081a4:	f8ca 3014 	str.w	r3, [sl, #20]
 80081a8:	2a24      	cmp	r2, #36	; 0x24
 80081aa:	d003      	beq.n	80081b4 <_realloc_r+0x3d4>
 80081ac:	3610      	adds	r6, #16
 80081ae:	f10a 0318 	add.w	r3, sl, #24
 80081b2:	e741      	b.n	8008038 <_realloc_r+0x258>
 80081b4:	6933      	ldr	r3, [r6, #16]
 80081b6:	f8ca 3018 	str.w	r3, [sl, #24]
 80081ba:	6973      	ldr	r3, [r6, #20]
 80081bc:	f8ca 301c 	str.w	r3, [sl, #28]
 80081c0:	3618      	adds	r6, #24
 80081c2:	f10a 0320 	add.w	r3, sl, #32
 80081c6:	e737      	b.n	8008038 <_realloc_r+0x258>
 80081c8:	20000528 	.word	0x20000528

080081cc <__fpclassifyd>:
 80081cc:	ec53 2b10 	vmov	r2, r3, d0
 80081d0:	b410      	push	{r4}
 80081d2:	f033 4400 	bics.w	r4, r3, #2147483648	; 0x80000000
 80081d6:	d008      	beq.n	80081ea <__fpclassifyd+0x1e>
 80081d8:	4911      	ldr	r1, [pc, #68]	; (8008220 <__fpclassifyd+0x54>)
 80081da:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 80081de:	4288      	cmp	r0, r1
 80081e0:	d808      	bhi.n	80081f4 <__fpclassifyd+0x28>
 80081e2:	2004      	movs	r0, #4
 80081e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081e8:	4770      	bx	lr
 80081ea:	b91a      	cbnz	r2, 80081f4 <__fpclassifyd+0x28>
 80081ec:	2002      	movs	r0, #2
 80081ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081f2:	4770      	bx	lr
 80081f4:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 80081f8:	4909      	ldr	r1, [pc, #36]	; (8008220 <__fpclassifyd+0x54>)
 80081fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80081fe:	428b      	cmp	r3, r1
 8008200:	d9ef      	bls.n	80081e2 <__fpclassifyd+0x16>
 8008202:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008206:	d201      	bcs.n	800820c <__fpclassifyd+0x40>
 8008208:	2003      	movs	r0, #3
 800820a:	e7eb      	b.n	80081e4 <__fpclassifyd+0x18>
 800820c:	4b05      	ldr	r3, [pc, #20]	; (8008224 <__fpclassifyd+0x58>)
 800820e:	429c      	cmp	r4, r3
 8008210:	d001      	beq.n	8008216 <__fpclassifyd+0x4a>
 8008212:	2000      	movs	r0, #0
 8008214:	e7e6      	b.n	80081e4 <__fpclassifyd+0x18>
 8008216:	fab2 f082 	clz	r0, r2
 800821a:	0940      	lsrs	r0, r0, #5
 800821c:	e7e2      	b.n	80081e4 <__fpclassifyd+0x18>
 800821e:	bf00      	nop
 8008220:	7fdfffff 	.word	0x7fdfffff
 8008224:	7ff00000 	.word	0x7ff00000

08008228 <_sbrk_r>:
 8008228:	b538      	push	{r3, r4, r5, lr}
 800822a:	4c07      	ldr	r4, [pc, #28]	; (8008248 <_sbrk_r+0x20>)
 800822c:	2300      	movs	r3, #0
 800822e:	4605      	mov	r5, r0
 8008230:	4608      	mov	r0, r1
 8008232:	6023      	str	r3, [r4, #0]
 8008234:	f7f8 fea0 	bl	8000f78 <_sbrk>
 8008238:	1c43      	adds	r3, r0, #1
 800823a:	d000      	beq.n	800823e <_sbrk_r+0x16>
 800823c:	bd38      	pop	{r3, r4, r5, pc}
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d0fb      	beq.n	800823c <_sbrk_r+0x14>
 8008244:	602b      	str	r3, [r5, #0]
 8008246:	bd38      	pop	{r3, r4, r5, pc}
 8008248:	20010658 	.word	0x20010658

0800824c <__sread>:
 800824c:	b510      	push	{r4, lr}
 800824e:	460c      	mov	r4, r1
 8008250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008254:	f001 f9f4 	bl	8009640 <_read_r>
 8008258:	2800      	cmp	r0, #0
 800825a:	db03      	blt.n	8008264 <__sread+0x18>
 800825c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800825e:	4403      	add	r3, r0
 8008260:	6523      	str	r3, [r4, #80]	; 0x50
 8008262:	bd10      	pop	{r4, pc}
 8008264:	89a3      	ldrh	r3, [r4, #12]
 8008266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800826a:	81a3      	strh	r3, [r4, #12]
 800826c:	bd10      	pop	{r4, pc}
 800826e:	bf00      	nop

08008270 <__seofread>:
 8008270:	2000      	movs	r0, #0
 8008272:	4770      	bx	lr

08008274 <__swrite>:
 8008274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008278:	4616      	mov	r6, r2
 800827a:	898a      	ldrh	r2, [r1, #12]
 800827c:	461d      	mov	r5, r3
 800827e:	05d3      	lsls	r3, r2, #23
 8008280:	460c      	mov	r4, r1
 8008282:	4607      	mov	r7, r0
 8008284:	d506      	bpl.n	8008294 <__swrite+0x20>
 8008286:	2200      	movs	r2, #0
 8008288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800828c:	2302      	movs	r3, #2
 800828e:	f001 f9c3 	bl	8009618 <_lseek_r>
 8008292:	89a2      	ldrh	r2, [r4, #12]
 8008294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008298:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800829c:	81a2      	strh	r2, [r4, #12]
 800829e:	4638      	mov	r0, r7
 80082a0:	4632      	mov	r2, r6
 80082a2:	462b      	mov	r3, r5
 80082a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082a8:	f001 b820 	b.w	80092ec <_write_r>

080082ac <__sseek>:
 80082ac:	b510      	push	{r4, lr}
 80082ae:	460c      	mov	r4, r1
 80082b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b4:	f001 f9b0 	bl	8009618 <_lseek_r>
 80082b8:	89a3      	ldrh	r3, [r4, #12]
 80082ba:	1c42      	adds	r2, r0, #1
 80082bc:	bf0e      	itee	eq
 80082be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082c6:	6520      	strne	r0, [r4, #80]	; 0x50
 80082c8:	81a3      	strh	r3, [r4, #12]
 80082ca:	bd10      	pop	{r4, pc}

080082cc <__sclose>:
 80082cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d0:	f001 b8a2 	b.w	8009418 <_close_r>
	...
 80082e0:	eba2 0003 	sub.w	r0, r2, r3
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop

080082e8 <strcmp>:
 80082e8:	7802      	ldrb	r2, [r0, #0]
 80082ea:	780b      	ldrb	r3, [r1, #0]
 80082ec:	2a01      	cmp	r2, #1
 80082ee:	bf28      	it	cs
 80082f0:	429a      	cmpcs	r2, r3
 80082f2:	d1f5      	bne.n	80082e0 <__sclose+0x14>
 80082f4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 80082f8:	ea40 0401 	orr.w	r4, r0, r1
 80082fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008300:	f06f 0c00 	mvn.w	ip, #0
 8008304:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8008308:	b312      	cbz	r2, 8008350 <strcmp+0x68>
 800830a:	ea80 0401 	eor.w	r4, r0, r1
 800830e:	f014 0f07 	tst.w	r4, #7
 8008312:	d16a      	bne.n	80083ea <strcmp+0x102>
 8008314:	f000 0407 	and.w	r4, r0, #7
 8008318:	f020 0007 	bic.w	r0, r0, #7
 800831c:	f004 0503 	and.w	r5, r4, #3
 8008320:	f021 0107 	bic.w	r1, r1, #7
 8008324:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8008328:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800832c:	f014 0f04 	tst.w	r4, #4
 8008330:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8008334:	fa0c f405 	lsl.w	r4, ip, r5
 8008338:	ea62 0204 	orn	r2, r2, r4
 800833c:	ea66 0604 	orn	r6, r6, r4
 8008340:	d00a      	beq.n	8008358 <strcmp+0x70>
 8008342:	ea63 0304 	orn	r3, r3, r4
 8008346:	4662      	mov	r2, ip
 8008348:	ea67 0704 	orn	r7, r7, r4
 800834c:	4666      	mov	r6, ip
 800834e:	e003      	b.n	8008358 <strcmp+0x70>
 8008350:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8008354:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8008358:	fa82 f54c 	uadd8	r5, r2, ip
 800835c:	ea82 0406 	eor.w	r4, r2, r6
 8008360:	faa4 f48c 	sel	r4, r4, ip
 8008364:	bb6c      	cbnz	r4, 80083c2 <strcmp+0xda>
 8008366:	fa83 f54c 	uadd8	r5, r3, ip
 800836a:	ea83 0507 	eor.w	r5, r3, r7
 800836e:	faa5 f58c 	sel	r5, r5, ip
 8008372:	b995      	cbnz	r5, 800839a <strcmp+0xb2>
 8008374:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8008378:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800837c:	fa82 f54c 	uadd8	r5, r2, ip
 8008380:	ea82 0406 	eor.w	r4, r2, r6
 8008384:	faa4 f48c 	sel	r4, r4, ip
 8008388:	fa83 f54c 	uadd8	r5, r3, ip
 800838c:	ea83 0507 	eor.w	r5, r3, r7
 8008390:	faa5 f58c 	sel	r5, r5, ip
 8008394:	4325      	orrs	r5, r4
 8008396:	d0db      	beq.n	8008350 <strcmp+0x68>
 8008398:	b99c      	cbnz	r4, 80083c2 <strcmp+0xda>
 800839a:	ba2d      	rev	r5, r5
 800839c:	fab5 f485 	clz	r4, r5
 80083a0:	f024 0407 	bic.w	r4, r4, #7
 80083a4:	fa27 f104 	lsr.w	r1, r7, r4
 80083a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80083ac:	fa23 f304 	lsr.w	r3, r3, r4
 80083b0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80083b4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80083b8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80083bc:	eba0 0001 	sub.w	r0, r0, r1
 80083c0:	4770      	bx	lr
 80083c2:	ba24      	rev	r4, r4
 80083c4:	fab4 f484 	clz	r4, r4
 80083c8:	f024 0407 	bic.w	r4, r4, #7
 80083cc:	fa26 f104 	lsr.w	r1, r6, r4
 80083d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80083d4:	fa22 f204 	lsr.w	r2, r2, r4
 80083d8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80083dc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80083e0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80083e4:	eba0 0001 	sub.w	r0, r0, r1
 80083e8:	4770      	bx	lr
 80083ea:	f014 0f03 	tst.w	r4, #3
 80083ee:	d13c      	bne.n	800846a <strcmp+0x182>
 80083f0:	f010 0403 	ands.w	r4, r0, #3
 80083f4:	d128      	bne.n	8008448 <strcmp+0x160>
 80083f6:	f850 2b08 	ldr.w	r2, [r0], #8
 80083fa:	f851 3b08 	ldr.w	r3, [r1], #8
 80083fe:	fa82 f54c 	uadd8	r5, r2, ip
 8008402:	ea82 0503 	eor.w	r5, r2, r3
 8008406:	faa5 f58c 	sel	r5, r5, ip
 800840a:	b95d      	cbnz	r5, 8008424 <strcmp+0x13c>
 800840c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008414:	fa82 f54c 	uadd8	r5, r2, ip
 8008418:	ea82 0503 	eor.w	r5, r2, r3
 800841c:	faa5 f58c 	sel	r5, r5, ip
 8008420:	2d00      	cmp	r5, #0
 8008422:	d0e8      	beq.n	80083f6 <strcmp+0x10e>
 8008424:	ba2d      	rev	r5, r5
 8008426:	fab5 f485 	clz	r4, r5
 800842a:	f024 0407 	bic.w	r4, r4, #7
 800842e:	fa23 f104 	lsr.w	r1, r3, r4
 8008432:	fa22 f204 	lsr.w	r2, r2, r4
 8008436:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800843a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800843e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8008442:	eba0 0001 	sub.w	r0, r0, r1
 8008446:	4770      	bx	lr
 8008448:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800844c:	f020 0003 	bic.w	r0, r0, #3
 8008450:	f850 2b08 	ldr.w	r2, [r0], #8
 8008454:	f021 0103 	bic.w	r1, r1, #3
 8008458:	f851 3b08 	ldr.w	r3, [r1], #8
 800845c:	fa0c f404 	lsl.w	r4, ip, r4
 8008460:	ea62 0204 	orn	r2, r2, r4
 8008464:	ea63 0304 	orn	r3, r3, r4
 8008468:	e7c9      	b.n	80083fe <strcmp+0x116>
 800846a:	f010 0403 	ands.w	r4, r0, #3
 800846e:	d01a      	beq.n	80084a6 <strcmp+0x1be>
 8008470:	eba1 0104 	sub.w	r1, r1, r4
 8008474:	f020 0003 	bic.w	r0, r0, #3
 8008478:	07e4      	lsls	r4, r4, #31
 800847a:	f850 2b04 	ldr.w	r2, [r0], #4
 800847e:	d006      	beq.n	800848e <strcmp+0x1a6>
 8008480:	d20f      	bcs.n	80084a2 <strcmp+0x1ba>
 8008482:	788b      	ldrb	r3, [r1, #2]
 8008484:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8008488:	1ae4      	subs	r4, r4, r3
 800848a:	d106      	bne.n	800849a <strcmp+0x1b2>
 800848c:	b12b      	cbz	r3, 800849a <strcmp+0x1b2>
 800848e:	78cb      	ldrb	r3, [r1, #3]
 8008490:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8008494:	1ae4      	subs	r4, r4, r3
 8008496:	d100      	bne.n	800849a <strcmp+0x1b2>
 8008498:	b91b      	cbnz	r3, 80084a2 <strcmp+0x1ba>
 800849a:	4620      	mov	r0, r4
 800849c:	f85d 4b10 	ldr.w	r4, [sp], #16
 80084a0:	4770      	bx	lr
 80084a2:	f101 0104 	add.w	r1, r1, #4
 80084a6:	f850 2b04 	ldr.w	r2, [r0], #4
 80084aa:	07cc      	lsls	r4, r1, #31
 80084ac:	f021 0103 	bic.w	r1, r1, #3
 80084b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80084b4:	d848      	bhi.n	8008548 <strcmp+0x260>
 80084b6:	d224      	bcs.n	8008502 <strcmp+0x21a>
 80084b8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 80084bc:	fa82 f54c 	uadd8	r5, r2, ip
 80084c0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 80084c4:	faa5 f58c 	sel	r5, r5, ip
 80084c8:	d10a      	bne.n	80084e0 <strcmp+0x1f8>
 80084ca:	b965      	cbnz	r5, 80084e6 <strcmp+0x1fe>
 80084cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80084d0:	ea84 0402 	eor.w	r4, r4, r2
 80084d4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 80084d8:	d10e      	bne.n	80084f8 <strcmp+0x210>
 80084da:	f850 2b04 	ldr.w	r2, [r0], #4
 80084de:	e7eb      	b.n	80084b8 <strcmp+0x1d0>
 80084e0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80084e4:	e055      	b.n	8008592 <strcmp+0x2aa>
 80084e6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 80084ea:	d14d      	bne.n	8008588 <strcmp+0x2a0>
 80084ec:	7808      	ldrb	r0, [r1, #0]
 80084ee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80084f2:	f1c0 0000 	rsb	r0, r0, #0
 80084f6:	4770      	bx	lr
 80084f8:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80084fc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8008500:	e047      	b.n	8008592 <strcmp+0x2aa>
 8008502:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8008506:	fa82 f54c 	uadd8	r5, r2, ip
 800850a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800850e:	faa5 f58c 	sel	r5, r5, ip
 8008512:	d10a      	bne.n	800852a <strcmp+0x242>
 8008514:	b965      	cbnz	r5, 8008530 <strcmp+0x248>
 8008516:	f851 3b04 	ldr.w	r3, [r1], #4
 800851a:	ea84 0402 	eor.w	r4, r4, r2
 800851e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8008522:	d10c      	bne.n	800853e <strcmp+0x256>
 8008524:	f850 2b04 	ldr.w	r2, [r0], #4
 8008528:	e7eb      	b.n	8008502 <strcmp+0x21a>
 800852a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800852e:	e030      	b.n	8008592 <strcmp+0x2aa>
 8008530:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8008534:	d128      	bne.n	8008588 <strcmp+0x2a0>
 8008536:	880b      	ldrh	r3, [r1, #0]
 8008538:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800853c:	e029      	b.n	8008592 <strcmp+0x2aa>
 800853e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8008542:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8008546:	e024      	b.n	8008592 <strcmp+0x2aa>
 8008548:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800854c:	fa82 f54c 	uadd8	r5, r2, ip
 8008550:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8008554:	faa5 f58c 	sel	r5, r5, ip
 8008558:	d10a      	bne.n	8008570 <strcmp+0x288>
 800855a:	b965      	cbnz	r5, 8008576 <strcmp+0x28e>
 800855c:	f851 3b04 	ldr.w	r3, [r1], #4
 8008560:	ea84 0402 	eor.w	r4, r4, r2
 8008564:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8008568:	d109      	bne.n	800857e <strcmp+0x296>
 800856a:	f850 2b04 	ldr.w	r2, [r0], #4
 800856e:	e7eb      	b.n	8008548 <strcmp+0x260>
 8008570:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8008574:	e00d      	b.n	8008592 <strcmp+0x2aa>
 8008576:	f015 0fff 	tst.w	r5, #255	; 0xff
 800857a:	d105      	bne.n	8008588 <strcmp+0x2a0>
 800857c:	680b      	ldr	r3, [r1, #0]
 800857e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8008582:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008586:	e004      	b.n	8008592 <strcmp+0x2aa>
 8008588:	f04f 0000 	mov.w	r0, #0
 800858c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8008590:	4770      	bx	lr
 8008592:	ba12      	rev	r2, r2
 8008594:	ba1b      	rev	r3, r3
 8008596:	fa82 f44c 	uadd8	r4, r2, ip
 800859a:	ea82 0403 	eor.w	r4, r2, r3
 800859e:	faa4 f58c 	sel	r5, r4, ip
 80085a2:	fab5 f485 	clz	r4, r5
 80085a6:	fa02 f204 	lsl.w	r2, r2, r4
 80085aa:	fa03 f304 	lsl.w	r3, r3, r4
 80085ae:	ea4f 6012 	mov.w	r0, r2, lsr #24
 80085b2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80085b6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 80085ba:	4770      	bx	lr

080085bc <__sprint_r.part.0>:
 80085bc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80085be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c2:	049c      	lsls	r4, r3, #18
 80085c4:	460f      	mov	r7, r1
 80085c6:	4692      	mov	sl, r2
 80085c8:	d52b      	bpl.n	8008622 <__sprint_r.part.0+0x66>
 80085ca:	6893      	ldr	r3, [r2, #8]
 80085cc:	6812      	ldr	r2, [r2, #0]
 80085ce:	b333      	cbz	r3, 800861e <__sprint_r.part.0+0x62>
 80085d0:	4680      	mov	r8, r0
 80085d2:	f102 0908 	add.w	r9, r2, #8
 80085d6:	e919 0060 	ldmdb	r9, {r5, r6}
 80085da:	08b6      	lsrs	r6, r6, #2
 80085dc:	d017      	beq.n	800860e <__sprint_r.part.0+0x52>
 80085de:	3d04      	subs	r5, #4
 80085e0:	2400      	movs	r4, #0
 80085e2:	e001      	b.n	80085e8 <__sprint_r.part.0+0x2c>
 80085e4:	42a6      	cmp	r6, r4
 80085e6:	d010      	beq.n	800860a <__sprint_r.part.0+0x4e>
 80085e8:	4640      	mov	r0, r8
 80085ea:	f855 1f04 	ldr.w	r1, [r5, #4]!
 80085ee:	463a      	mov	r2, r7
 80085f0:	f000 ffc6 	bl	8009580 <_fputwc_r>
 80085f4:	1c43      	adds	r3, r0, #1
 80085f6:	f104 0401 	add.w	r4, r4, #1
 80085fa:	d1f3      	bne.n	80085e4 <__sprint_r.part.0+0x28>
 80085fc:	2300      	movs	r3, #0
 80085fe:	f8ca 3008 	str.w	r3, [sl, #8]
 8008602:	f8ca 3004 	str.w	r3, [sl, #4]
 8008606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800860a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800860e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 8008612:	f8ca 3008 	str.w	r3, [sl, #8]
 8008616:	f109 0908 	add.w	r9, r9, #8
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1db      	bne.n	80085d6 <__sprint_r.part.0+0x1a>
 800861e:	2000      	movs	r0, #0
 8008620:	e7ec      	b.n	80085fc <__sprint_r.part.0+0x40>
 8008622:	f7fe f99f 	bl	8006964 <__sfvwrite_r>
 8008626:	2300      	movs	r3, #0
 8008628:	f8ca 3008 	str.w	r3, [sl, #8]
 800862c:	f8ca 3004 	str.w	r3, [sl, #4]
 8008630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008634 <__sprint_r>:
 8008634:	6893      	ldr	r3, [r2, #8]
 8008636:	b410      	push	{r4}
 8008638:	b11b      	cbz	r3, 8008642 <__sprint_r+0xe>
 800863a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800863e:	f7ff bfbd 	b.w	80085bc <__sprint_r.part.0>
 8008642:	4618      	mov	r0, r3
 8008644:	6053      	str	r3, [r2, #4]
 8008646:	f85d 4b04 	ldr.w	r4, [sp], #4
 800864a:	4770      	bx	lr

0800864c <_vfiprintf_r>:
 800864c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008650:	b0ab      	sub	sp, #172	; 0xac
 8008652:	461c      	mov	r4, r3
 8008654:	9100      	str	r1, [sp, #0]
 8008656:	4693      	mov	fp, r2
 8008658:	9304      	str	r3, [sp, #16]
 800865a:	9001      	str	r0, [sp, #4]
 800865c:	b118      	cbz	r0, 8008666 <_vfiprintf_r+0x1a>
 800865e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 80e3 	beq.w	800882c <_vfiprintf_r+0x1e0>
 8008666:	9b00      	ldr	r3, [sp, #0]
 8008668:	8999      	ldrh	r1, [r3, #12]
 800866a:	b28a      	uxth	r2, r1
 800866c:	0490      	lsls	r0, r2, #18
 800866e:	d408      	bmi.n	8008682 <_vfiprintf_r+0x36>
 8008670:	4618      	mov	r0, r3
 8008672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008674:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 8008678:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800867c:	8182      	strh	r2, [r0, #12]
 800867e:	6643      	str	r3, [r0, #100]	; 0x64
 8008680:	b292      	uxth	r2, r2
 8008682:	0711      	lsls	r1, r2, #28
 8008684:	f140 80b2 	bpl.w	80087ec <_vfiprintf_r+0x1a0>
 8008688:	9b00      	ldr	r3, [sp, #0]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 80ad 	beq.w	80087ec <_vfiprintf_r+0x1a0>
 8008692:	f002 021a 	and.w	r2, r2, #26
 8008696:	2a0a      	cmp	r2, #10
 8008698:	f000 80b4 	beq.w	8008804 <_vfiprintf_r+0x1b8>
 800869c:	2300      	movs	r3, #0
 800869e:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80086a2:	9309      	str	r3, [sp, #36]	; 0x24
 80086a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80086a6:	930e      	str	r3, [sp, #56]	; 0x38
 80086a8:	9302      	str	r3, [sp, #8]
 80086aa:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80086ae:	4654      	mov	r4, sl
 80086b0:	f89b 3000 	ldrb.w	r3, [fp]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f000 84a3 	beq.w	8009000 <_vfiprintf_r+0x9b4>
 80086ba:	2b25      	cmp	r3, #37	; 0x25
 80086bc:	f000 84a0 	beq.w	8009000 <_vfiprintf_r+0x9b4>
 80086c0:	465a      	mov	r2, fp
 80086c2:	e001      	b.n	80086c8 <_vfiprintf_r+0x7c>
 80086c4:	2b25      	cmp	r3, #37	; 0x25
 80086c6:	d003      	beq.n	80086d0 <_vfiprintf_r+0x84>
 80086c8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1f9      	bne.n	80086c4 <_vfiprintf_r+0x78>
 80086d0:	ebcb 0602 	rsb	r6, fp, r2
 80086d4:	4615      	mov	r5, r2
 80086d6:	b196      	cbz	r6, 80086fe <_vfiprintf_r+0xb2>
 80086d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80086dc:	f8c4 b000 	str.w	fp, [r4]
 80086e0:	3301      	adds	r3, #1
 80086e2:	4432      	add	r2, r6
 80086e4:	2b07      	cmp	r3, #7
 80086e6:	6066      	str	r6, [r4, #4]
 80086e8:	920f      	str	r2, [sp, #60]	; 0x3c
 80086ea:	930e      	str	r3, [sp, #56]	; 0x38
 80086ec:	dd79      	ble.n	80087e2 <_vfiprintf_r+0x196>
 80086ee:	2a00      	cmp	r2, #0
 80086f0:	f040 84af 	bne.w	8009052 <_vfiprintf_r+0xa06>
 80086f4:	9b02      	ldr	r3, [sp, #8]
 80086f6:	920e      	str	r2, [sp, #56]	; 0x38
 80086f8:	4433      	add	r3, r6
 80086fa:	4654      	mov	r4, sl
 80086fc:	9302      	str	r3, [sp, #8]
 80086fe:	782b      	ldrb	r3, [r5, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 8360 	beq.w	8008dc6 <_vfiprintf_r+0x77a>
 8008706:	2100      	movs	r1, #0
 8008708:	f04f 0300 	mov.w	r3, #0
 800870c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008710:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8008714:	1c68      	adds	r0, r5, #1
 8008716:	786b      	ldrb	r3, [r5, #1]
 8008718:	4688      	mov	r8, r1
 800871a:	460d      	mov	r5, r1
 800871c:	4666      	mov	r6, ip
 800871e:	f100 0b01 	add.w	fp, r0, #1
 8008722:	f1a3 0220 	sub.w	r2, r3, #32
 8008726:	2a58      	cmp	r2, #88	; 0x58
 8008728:	f200 82ab 	bhi.w	8008c82 <_vfiprintf_r+0x636>
 800872c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008730:	02a9029b 	.word	0x02a9029b
 8008734:	02a302a9 	.word	0x02a302a9
 8008738:	02a902a9 	.word	0x02a902a9
 800873c:	02a902a9 	.word	0x02a902a9
 8008740:	02a902a9 	.word	0x02a902a9
 8008744:	02620255 	.word	0x02620255
 8008748:	010d02a9 	.word	0x010d02a9
 800874c:	02a9026e 	.word	0x02a9026e
 8008750:	012f0129 	.word	0x012f0129
 8008754:	012f012f 	.word	0x012f012f
 8008758:	012f012f 	.word	0x012f012f
 800875c:	012f012f 	.word	0x012f012f
 8008760:	012f012f 	.word	0x012f012f
 8008764:	02a902a9 	.word	0x02a902a9
 8008768:	02a902a9 	.word	0x02a902a9
 800876c:	02a902a9 	.word	0x02a902a9
 8008770:	02a902a9 	.word	0x02a902a9
 8008774:	02a902a9 	.word	0x02a902a9
 8008778:	02a9013d 	.word	0x02a9013d
 800877c:	02a902a9 	.word	0x02a902a9
 8008780:	02a902a9 	.word	0x02a902a9
 8008784:	02a902a9 	.word	0x02a902a9
 8008788:	02a902a9 	.word	0x02a902a9
 800878c:	017402a9 	.word	0x017402a9
 8008790:	02a902a9 	.word	0x02a902a9
 8008794:	02a902a9 	.word	0x02a902a9
 8008798:	018b02a9 	.word	0x018b02a9
 800879c:	02a902a9 	.word	0x02a902a9
 80087a0:	02a901a3 	.word	0x02a901a3
 80087a4:	02a902a9 	.word	0x02a902a9
 80087a8:	02a902a9 	.word	0x02a902a9
 80087ac:	02a902a9 	.word	0x02a902a9
 80087b0:	02a902a9 	.word	0x02a902a9
 80087b4:	01c702a9 	.word	0x01c702a9
 80087b8:	02a901da 	.word	0x02a901da
 80087bc:	02a902a9 	.word	0x02a902a9
 80087c0:	01da0123 	.word	0x01da0123
 80087c4:	02a902a9 	.word	0x02a902a9
 80087c8:	02a9024c 	.word	0x02a9024c
 80087cc:	0113028a 	.word	0x0113028a
 80087d0:	020701f3 	.word	0x020701f3
 80087d4:	020d02a9 	.word	0x020d02a9
 80087d8:	008102a9 	.word	0x008102a9
 80087dc:	02a902a9 	.word	0x02a902a9
 80087e0:	0233      	.short	0x0233
 80087e2:	3408      	adds	r4, #8
 80087e4:	9b02      	ldr	r3, [sp, #8]
 80087e6:	4433      	add	r3, r6
 80087e8:	9302      	str	r3, [sp, #8]
 80087ea:	e788      	b.n	80086fe <_vfiprintf_r+0xb2>
 80087ec:	9801      	ldr	r0, [sp, #4]
 80087ee:	9900      	ldr	r1, [sp, #0]
 80087f0:	f7fc fcdc 	bl	80051ac <__swsetup_r>
 80087f4:	b9a8      	cbnz	r0, 8008822 <_vfiprintf_r+0x1d6>
 80087f6:	9b00      	ldr	r3, [sp, #0]
 80087f8:	899a      	ldrh	r2, [r3, #12]
 80087fa:	f002 021a 	and.w	r2, r2, #26
 80087fe:	2a0a      	cmp	r2, #10
 8008800:	f47f af4c 	bne.w	800869c <_vfiprintf_r+0x50>
 8008804:	9b00      	ldr	r3, [sp, #0]
 8008806:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800880a:	2b00      	cmp	r3, #0
 800880c:	f6ff af46 	blt.w	800869c <_vfiprintf_r+0x50>
 8008810:	9801      	ldr	r0, [sp, #4]
 8008812:	9900      	ldr	r1, [sp, #0]
 8008814:	465a      	mov	r2, fp
 8008816:	4623      	mov	r3, r4
 8008818:	f000 fd2c 	bl	8009274 <__sbprintf>
 800881c:	b02b      	add	sp, #172	; 0xac
 800881e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008826:	b02b      	add	sp, #172	; 0xac
 8008828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800882c:	f7fd ff3c 	bl	80066a8 <__sinit>
 8008830:	e719      	b.n	8008666 <_vfiprintf_r+0x1a>
 8008832:	f018 0f20 	tst.w	r8, #32
 8008836:	9503      	str	r5, [sp, #12]
 8008838:	46b4      	mov	ip, r6
 800883a:	f000 810c 	beq.w	8008a56 <_vfiprintf_r+0x40a>
 800883e:	9b04      	ldr	r3, [sp, #16]
 8008840:	3307      	adds	r3, #7
 8008842:	f023 0307 	bic.w	r3, r3, #7
 8008846:	f103 0208 	add.w	r2, r3, #8
 800884a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800884e:	9204      	str	r2, [sp, #16]
 8008850:	2301      	movs	r3, #1
 8008852:	f04f 0200 	mov.w	r2, #0
 8008856:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 800885a:	46e1      	mov	r9, ip
 800885c:	2500      	movs	r5, #0
 800885e:	f1bc 0f00 	cmp.w	ip, #0
 8008862:	bfa8      	it	ge
 8008864:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
 8008868:	ea56 0207 	orrs.w	r2, r6, r7
 800886c:	f040 80c4 	bne.w	80089f8 <_vfiprintf_r+0x3ac>
 8008870:	f1bc 0f00 	cmp.w	ip, #0
 8008874:	f000 8381 	beq.w	8008f7a <_vfiprintf_r+0x92e>
 8008878:	2b01      	cmp	r3, #1
 800887a:	f000 80c5 	beq.w	8008a08 <_vfiprintf_r+0x3bc>
 800887e:	2b02      	cmp	r3, #2
 8008880:	f000 8387 	beq.w	8008f92 <_vfiprintf_r+0x946>
 8008884:	4651      	mov	r1, sl
 8008886:	08f2      	lsrs	r2, r6, #3
 8008888:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800888c:	08f8      	lsrs	r0, r7, #3
 800888e:	f006 0307 	and.w	r3, r6, #7
 8008892:	4607      	mov	r7, r0
 8008894:	4616      	mov	r6, r2
 8008896:	3330      	adds	r3, #48	; 0x30
 8008898:	ea56 0207 	orrs.w	r2, r6, r7
 800889c:	f801 3d01 	strb.w	r3, [r1, #-1]!
 80088a0:	d1f1      	bne.n	8008886 <_vfiprintf_r+0x23a>
 80088a2:	f018 0f01 	tst.w	r8, #1
 80088a6:	9107      	str	r1, [sp, #28]
 80088a8:	f040 83fc 	bne.w	80090a4 <_vfiprintf_r+0xa58>
 80088ac:	ebc1 090a 	rsb	r9, r1, sl
 80088b0:	45e1      	cmp	r9, ip
 80088b2:	464e      	mov	r6, r9
 80088b4:	bfb8      	it	lt
 80088b6:	4666      	movlt	r6, ip
 80088b8:	b105      	cbz	r5, 80088bc <_vfiprintf_r+0x270>
 80088ba:	3601      	adds	r6, #1
 80088bc:	f018 0302 	ands.w	r3, r8, #2
 80088c0:	9305      	str	r3, [sp, #20]
 80088c2:	bf18      	it	ne
 80088c4:	3602      	addne	r6, #2
 80088c6:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 80088ca:	9306      	str	r3, [sp, #24]
 80088cc:	f040 81fa 	bne.w	8008cc4 <_vfiprintf_r+0x678>
 80088d0:	9b03      	ldr	r3, [sp, #12]
 80088d2:	1b9d      	subs	r5, r3, r6
 80088d4:	2d00      	cmp	r5, #0
 80088d6:	f340 81f5 	ble.w	8008cc4 <_vfiprintf_r+0x678>
 80088da:	2d10      	cmp	r5, #16
 80088dc:	f340 848c 	ble.w	80091f8 <_vfiprintf_r+0xbac>
 80088e0:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 80088e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088e6:	4fc6      	ldr	r7, [pc, #792]	; (8008c00 <_vfiprintf_r+0x5b4>)
 80088e8:	4620      	mov	r0, r4
 80088ea:	2310      	movs	r3, #16
 80088ec:	4664      	mov	r4, ip
 80088ee:	4671      	mov	r1, lr
 80088f0:	4684      	mov	ip, r0
 80088f2:	e007      	b.n	8008904 <_vfiprintf_r+0x2b8>
 80088f4:	f101 0e02 	add.w	lr, r1, #2
 80088f8:	f10c 0c08 	add.w	ip, ip, #8
 80088fc:	4601      	mov	r1, r0
 80088fe:	3d10      	subs	r5, #16
 8008900:	2d10      	cmp	r5, #16
 8008902:	dd13      	ble.n	800892c <_vfiprintf_r+0x2e0>
 8008904:	1c48      	adds	r0, r1, #1
 8008906:	3210      	adds	r2, #16
 8008908:	2807      	cmp	r0, #7
 800890a:	920f      	str	r2, [sp, #60]	; 0x3c
 800890c:	f8cc 7000 	str.w	r7, [ip]
 8008910:	f8cc 3004 	str.w	r3, [ip, #4]
 8008914:	900e      	str	r0, [sp, #56]	; 0x38
 8008916:	dded      	ble.n	80088f4 <_vfiprintf_r+0x2a8>
 8008918:	2a00      	cmp	r2, #0
 800891a:	f040 81c3 	bne.w	8008ca4 <_vfiprintf_r+0x658>
 800891e:	3d10      	subs	r5, #16
 8008920:	2d10      	cmp	r5, #16
 8008922:	4611      	mov	r1, r2
 8008924:	f04f 0e01 	mov.w	lr, #1
 8008928:	46d4      	mov	ip, sl
 800892a:	dceb      	bgt.n	8008904 <_vfiprintf_r+0x2b8>
 800892c:	4663      	mov	r3, ip
 800892e:	4671      	mov	r1, lr
 8008930:	46a4      	mov	ip, r4
 8008932:	461c      	mov	r4, r3
 8008934:	442a      	add	r2, r5
 8008936:	2907      	cmp	r1, #7
 8008938:	920f      	str	r2, [sp, #60]	; 0x3c
 800893a:	6027      	str	r7, [r4, #0]
 800893c:	6065      	str	r5, [r4, #4]
 800893e:	910e      	str	r1, [sp, #56]	; 0x38
 8008940:	f300 8346 	bgt.w	8008fd0 <_vfiprintf_r+0x984>
 8008944:	3408      	adds	r4, #8
 8008946:	1c48      	adds	r0, r1, #1
 8008948:	e1bf      	b.n	8008cca <_vfiprintf_r+0x67e>
 800894a:	4658      	mov	r0, fp
 800894c:	f048 0804 	orr.w	r8, r8, #4
 8008950:	f89b 3000 	ldrb.w	r3, [fp]
 8008954:	e6e3      	b.n	800871e <_vfiprintf_r+0xd2>
 8008956:	f018 0320 	ands.w	r3, r8, #32
 800895a:	9503      	str	r5, [sp, #12]
 800895c:	46b4      	mov	ip, r6
 800895e:	d062      	beq.n	8008a26 <_vfiprintf_r+0x3da>
 8008960:	9b04      	ldr	r3, [sp, #16]
 8008962:	3307      	adds	r3, #7
 8008964:	f023 0307 	bic.w	r3, r3, #7
 8008968:	f103 0208 	add.w	r2, r3, #8
 800896c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008970:	9204      	str	r2, [sp, #16]
 8008972:	2300      	movs	r3, #0
 8008974:	e76d      	b.n	8008852 <_vfiprintf_r+0x206>
 8008976:	f048 0840 	orr.w	r8, r8, #64	; 0x40
 800897a:	f89b 3000 	ldrb.w	r3, [fp]
 800897e:	4658      	mov	r0, fp
 8008980:	e6cd      	b.n	800871e <_vfiprintf_r+0xd2>
 8008982:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 8008986:	f89b 3000 	ldrb.w	r3, [fp]
 800898a:	4658      	mov	r0, fp
 800898c:	e6c7      	b.n	800871e <_vfiprintf_r+0xd2>
 800898e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008992:	2500      	movs	r5, #0
 8008994:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8008998:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800899c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 80089a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80089a4:	2a09      	cmp	r2, #9
 80089a6:	d9f5      	bls.n	8008994 <_vfiprintf_r+0x348>
 80089a8:	e6bb      	b.n	8008722 <_vfiprintf_r+0xd6>
 80089aa:	f048 0810 	orr.w	r8, r8, #16
 80089ae:	f018 0f20 	tst.w	r8, #32
 80089b2:	9503      	str	r5, [sp, #12]
 80089b4:	46b4      	mov	ip, r6
 80089b6:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80089ba:	f000 809b 	beq.w	8008af4 <_vfiprintf_r+0x4a8>
 80089be:	9904      	ldr	r1, [sp, #16]
 80089c0:	3107      	adds	r1, #7
 80089c2:	f021 0107 	bic.w	r1, r1, #7
 80089c6:	e9d1 2300 	ldrd	r2, r3, [r1]
 80089ca:	3108      	adds	r1, #8
 80089cc:	9104      	str	r1, [sp, #16]
 80089ce:	4616      	mov	r6, r2
 80089d0:	461f      	mov	r7, r3
 80089d2:	2a00      	cmp	r2, #0
 80089d4:	f173 0300 	sbcs.w	r3, r3, #0
 80089d8:	f2c0 83a6 	blt.w	8009128 <_vfiprintf_r+0xadc>
 80089dc:	f1bc 0f00 	cmp.w	ip, #0
 80089e0:	bfa8      	it	ge
 80089e2:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
 80089e6:	ea56 0207 	orrs.w	r2, r6, r7
 80089ea:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 80089ee:	46e1      	mov	r9, ip
 80089f0:	f04f 0301 	mov.w	r3, #1
 80089f4:	f43f af3c 	beq.w	8008870 <_vfiprintf_r+0x224>
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	f47f af40 	bne.w	800887e <_vfiprintf_r+0x232>
 80089fe:	2f00      	cmp	r7, #0
 8008a00:	bf08      	it	eq
 8008a02:	2e0a      	cmpeq	r6, #10
 8008a04:	f080 8334 	bcs.w	8009070 <_vfiprintf_r+0xa24>
 8008a08:	ab2a      	add	r3, sp, #168	; 0xa8
 8008a0a:	3630      	adds	r6, #48	; 0x30
 8008a0c:	f803 6d41 	strb.w	r6, [r3, #-65]!
 8008a10:	ebc3 090a 	rsb	r9, r3, sl
 8008a14:	9307      	str	r3, [sp, #28]
 8008a16:	e74b      	b.n	80088b0 <_vfiprintf_r+0x264>
 8008a18:	f048 0810 	orr.w	r8, r8, #16
 8008a1c:	f018 0320 	ands.w	r3, r8, #32
 8008a20:	9503      	str	r5, [sp, #12]
 8008a22:	46b4      	mov	ip, r6
 8008a24:	d19c      	bne.n	8008960 <_vfiprintf_r+0x314>
 8008a26:	f018 0210 	ands.w	r2, r8, #16
 8008a2a:	f040 82f7 	bne.w	800901c <_vfiprintf_r+0x9d0>
 8008a2e:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8008a32:	f000 82f3 	beq.w	800901c <_vfiprintf_r+0x9d0>
 8008a36:	9904      	ldr	r1, [sp, #16]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	460a      	mov	r2, r1
 8008a3c:	3204      	adds	r2, #4
 8008a3e:	880e      	ldrh	r6, [r1, #0]
 8008a40:	9204      	str	r2, [sp, #16]
 8008a42:	2700      	movs	r7, #0
 8008a44:	e705      	b.n	8008852 <_vfiprintf_r+0x206>
 8008a46:	f048 0810 	orr.w	r8, r8, #16
 8008a4a:	f018 0f20 	tst.w	r8, #32
 8008a4e:	9503      	str	r5, [sp, #12]
 8008a50:	46b4      	mov	ip, r6
 8008a52:	f47f aef4 	bne.w	800883e <_vfiprintf_r+0x1f2>
 8008a56:	9a04      	ldr	r2, [sp, #16]
 8008a58:	f018 0f10 	tst.w	r8, #16
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	f040 82e4 	bne.w	800902a <_vfiprintf_r+0x9de>
 8008a62:	f018 0f40 	tst.w	r8, #64	; 0x40
 8008a66:	f000 82e0 	beq.w	800902a <_vfiprintf_r+0x9de>
 8008a6a:	8816      	ldrh	r6, [r2, #0]
 8008a6c:	3204      	adds	r2, #4
 8008a6e:	2700      	movs	r7, #0
 8008a70:	2301      	movs	r3, #1
 8008a72:	9204      	str	r2, [sp, #16]
 8008a74:	e6ed      	b.n	8008852 <_vfiprintf_r+0x206>
 8008a76:	4a63      	ldr	r2, [pc, #396]	; (8008c04 <_vfiprintf_r+0x5b8>)
 8008a78:	9503      	str	r5, [sp, #12]
 8008a7a:	f018 0f20 	tst.w	r8, #32
 8008a7e:	46b4      	mov	ip, r6
 8008a80:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8008a84:	9209      	str	r2, [sp, #36]	; 0x24
 8008a86:	f000 8090 	beq.w	8008baa <_vfiprintf_r+0x55e>
 8008a8a:	9a04      	ldr	r2, [sp, #16]
 8008a8c:	3207      	adds	r2, #7
 8008a8e:	f022 0207 	bic.w	r2, r2, #7
 8008a92:	e9d2 6700 	ldrd	r6, r7, [r2]
 8008a96:	f102 0108 	add.w	r1, r2, #8
 8008a9a:	9104      	str	r1, [sp, #16]
 8008a9c:	f018 0f01 	tst.w	r8, #1
 8008aa0:	f000 8290 	beq.w	8008fc4 <_vfiprintf_r+0x978>
 8008aa4:	ea56 0207 	orrs.w	r2, r6, r7
 8008aa8:	f000 828c 	beq.w	8008fc4 <_vfiprintf_r+0x978>
 8008aac:	2230      	movs	r2, #48	; 0x30
 8008aae:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8008ab2:	f048 0802 	orr.w	r8, r8, #2
 8008ab6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 8008aba:	2302      	movs	r3, #2
 8008abc:	e6c9      	b.n	8008852 <_vfiprintf_r+0x206>
 8008abe:	9a04      	ldr	r2, [sp, #16]
 8008ac0:	9503      	str	r5, [sp, #12]
 8008ac2:	6813      	ldr	r3, [r2, #0]
 8008ac4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8008ac8:	4613      	mov	r3, r2
 8008aca:	3304      	adds	r3, #4
 8008acc:	2601      	movs	r6, #1
 8008ace:	f04f 0100 	mov.w	r1, #0
 8008ad2:	9304      	str	r3, [sp, #16]
 8008ad4:	ab10      	add	r3, sp, #64	; 0x40
 8008ad6:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8008ada:	46b1      	mov	r9, r6
 8008adc:	9307      	str	r3, [sp, #28]
 8008ade:	f04f 0c00 	mov.w	ip, #0
 8008ae2:	e6eb      	b.n	80088bc <_vfiprintf_r+0x270>
 8008ae4:	f018 0f20 	tst.w	r8, #32
 8008ae8:	9503      	str	r5, [sp, #12]
 8008aea:	46b4      	mov	ip, r6
 8008aec:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8008af0:	f47f af65 	bne.w	80089be <_vfiprintf_r+0x372>
 8008af4:	f018 0f10 	tst.w	r8, #16
 8008af8:	f040 82a2 	bne.w	8009040 <_vfiprintf_r+0x9f4>
 8008afc:	f018 0f40 	tst.w	r8, #64	; 0x40
 8008b00:	f000 829e 	beq.w	8009040 <_vfiprintf_r+0x9f4>
 8008b04:	9904      	ldr	r1, [sp, #16]
 8008b06:	f9b1 6000 	ldrsh.w	r6, [r1]
 8008b0a:	3104      	adds	r1, #4
 8008b0c:	17f7      	asrs	r7, r6, #31
 8008b0e:	4632      	mov	r2, r6
 8008b10:	463b      	mov	r3, r7
 8008b12:	9104      	str	r1, [sp, #16]
 8008b14:	e75d      	b.n	80089d2 <_vfiprintf_r+0x386>
 8008b16:	9904      	ldr	r1, [sp, #16]
 8008b18:	9503      	str	r5, [sp, #12]
 8008b1a:	2330      	movs	r3, #48	; 0x30
 8008b1c:	460a      	mov	r2, r1
 8008b1e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8008b22:	2378      	movs	r3, #120	; 0x78
 8008b24:	3204      	adds	r2, #4
 8008b26:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8008b2a:	4b37      	ldr	r3, [pc, #220]	; (8008c08 <_vfiprintf_r+0x5bc>)
 8008b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b2e:	46b4      	mov	ip, r6
 8008b30:	f048 0802 	orr.w	r8, r8, #2
 8008b34:	680e      	ldr	r6, [r1, #0]
 8008b36:	9204      	str	r2, [sp, #16]
 8008b38:	2700      	movs	r7, #0
 8008b3a:	2302      	movs	r3, #2
 8008b3c:	e689      	b.n	8008852 <_vfiprintf_r+0x206>
 8008b3e:	f048 0820 	orr.w	r8, r8, #32
 8008b42:	f89b 3000 	ldrb.w	r3, [fp]
 8008b46:	4658      	mov	r0, fp
 8008b48:	e5e9      	b.n	800871e <_vfiprintf_r+0xd2>
 8008b4a:	9a04      	ldr	r2, [sp, #16]
 8008b4c:	9503      	str	r5, [sp, #12]
 8008b4e:	6813      	ldr	r3, [r2, #0]
 8008b50:	9307      	str	r3, [sp, #28]
 8008b52:	f04f 0100 	mov.w	r1, #0
 8008b56:	46b4      	mov	ip, r6
 8008b58:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8008b5c:	1d16      	adds	r6, r2, #4
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f000 8350 	beq.w	8009204 <_vfiprintf_r+0xbb8>
 8008b64:	f1bc 0f00 	cmp.w	ip, #0
 8008b68:	f2c0 832a 	blt.w	80091c0 <_vfiprintf_r+0xb74>
 8008b6c:	9d07      	ldr	r5, [sp, #28]
 8008b6e:	f8cd c010 	str.w	ip, [sp, #16]
 8008b72:	4662      	mov	r2, ip
 8008b74:	4628      	mov	r0, r5
 8008b76:	2100      	movs	r1, #0
 8008b78:	f7fe fc14 	bl	80073a4 <memchr>
 8008b7c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8008b80:	2800      	cmp	r0, #0
 8008b82:	f000 8350 	beq.w	8009226 <_vfiprintf_r+0xbda>
 8008b86:	ebc5 0900 	rsb	r9, r5, r0
 8008b8a:	9604      	str	r6, [sp, #16]
 8008b8c:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 8008b90:	f04f 0c00 	mov.w	ip, #0
 8008b94:	e68c      	b.n	80088b0 <_vfiprintf_r+0x264>
 8008b96:	4a1c      	ldr	r2, [pc, #112]	; (8008c08 <_vfiprintf_r+0x5bc>)
 8008b98:	9503      	str	r5, [sp, #12]
 8008b9a:	f018 0f20 	tst.w	r8, #32
 8008b9e:	46b4      	mov	ip, r6
 8008ba0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ba2:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8008ba6:	f47f af70 	bne.w	8008a8a <_vfiprintf_r+0x43e>
 8008baa:	9904      	ldr	r1, [sp, #16]
 8008bac:	f018 0f10 	tst.w	r8, #16
 8008bb0:	460a      	mov	r2, r1
 8008bb2:	f040 8240 	bne.w	8009036 <_vfiprintf_r+0x9ea>
 8008bb6:	f018 0f40 	tst.w	r8, #64	; 0x40
 8008bba:	f000 823c 	beq.w	8009036 <_vfiprintf_r+0x9ea>
 8008bbe:	3204      	adds	r2, #4
 8008bc0:	880e      	ldrh	r6, [r1, #0]
 8008bc2:	9204      	str	r2, [sp, #16]
 8008bc4:	2700      	movs	r7, #0
 8008bc6:	e769      	b.n	8008a9c <_vfiprintf_r+0x450>
 8008bc8:	f89b 3000 	ldrb.w	r3, [fp]
 8008bcc:	2b6c      	cmp	r3, #108	; 0x6c
 8008bce:	f000 82ea 	beq.w	80091a6 <_vfiprintf_r+0xb5a>
 8008bd2:	f048 0810 	orr.w	r8, r8, #16
 8008bd6:	4658      	mov	r0, fp
 8008bd8:	e5a1      	b.n	800871e <_vfiprintf_r+0xd2>
 8008bda:	9a04      	ldr	r2, [sp, #16]
 8008bdc:	6815      	ldr	r5, [r2, #0]
 8008bde:	4613      	mov	r3, r2
 8008be0:	2d00      	cmp	r5, #0
 8008be2:	f103 0304 	add.w	r3, r3, #4
 8008be6:	f2c0 82e6 	blt.w	80091b6 <_vfiprintf_r+0xb6a>
 8008bea:	9304      	str	r3, [sp, #16]
 8008bec:	f89b 3000 	ldrb.w	r3, [fp]
 8008bf0:	4658      	mov	r0, fp
 8008bf2:	e594      	b.n	800871e <_vfiprintf_r+0xd2>
 8008bf4:	f89b 3000 	ldrb.w	r3, [fp]
 8008bf8:	4658      	mov	r0, fp
 8008bfa:	212b      	movs	r1, #43	; 0x2b
 8008bfc:	e58f      	b.n	800871e <_vfiprintf_r+0xd2>
 8008bfe:	bf00      	nop
 8008c00:	0800ac90 	.word	0x0800ac90
 8008c04:	0800aaf4 	.word	0x0800aaf4
 8008c08:	0800ab08 	.word	0x0800ab08
 8008c0c:	f89b 3000 	ldrb.w	r3, [fp]
 8008c10:	2b2a      	cmp	r3, #42	; 0x2a
 8008c12:	f10b 0001 	add.w	r0, fp, #1
 8008c16:	f000 830f 	beq.w	8009238 <_vfiprintf_r+0xbec>
 8008c1a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008c1e:	2a09      	cmp	r2, #9
 8008c20:	4683      	mov	fp, r0
 8008c22:	f04f 0600 	mov.w	r6, #0
 8008c26:	f63f ad7c 	bhi.w	8008722 <_vfiprintf_r+0xd6>
 8008c2a:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8008c2e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8008c32:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 8008c36:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008c3a:	2a09      	cmp	r2, #9
 8008c3c:	d9f5      	bls.n	8008c2a <_vfiprintf_r+0x5de>
 8008c3e:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 8008c42:	e56e      	b.n	8008722 <_vfiprintf_r+0xd6>
 8008c44:	f018 0f20 	tst.w	r8, #32
 8008c48:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8008c4c:	f000 8283 	beq.w	8009156 <_vfiprintf_r+0xb0a>
 8008c50:	9a04      	ldr	r2, [sp, #16]
 8008c52:	9902      	ldr	r1, [sp, #8]
 8008c54:	6813      	ldr	r3, [r2, #0]
 8008c56:	17cf      	asrs	r7, r1, #31
 8008c58:	4608      	mov	r0, r1
 8008c5a:	3204      	adds	r2, #4
 8008c5c:	4639      	mov	r1, r7
 8008c5e:	9204      	str	r2, [sp, #16]
 8008c60:	e9c3 0100 	strd	r0, r1, [r3]
 8008c64:	e524      	b.n	80086b0 <_vfiprintf_r+0x64>
 8008c66:	4658      	mov	r0, fp
 8008c68:	f89b 3000 	ldrb.w	r3, [fp]
 8008c6c:	2900      	cmp	r1, #0
 8008c6e:	f47f ad56 	bne.w	800871e <_vfiprintf_r+0xd2>
 8008c72:	2120      	movs	r1, #32
 8008c74:	e553      	b.n	800871e <_vfiprintf_r+0xd2>
 8008c76:	f048 0801 	orr.w	r8, r8, #1
 8008c7a:	4658      	mov	r0, fp
 8008c7c:	f89b 3000 	ldrb.w	r3, [fp]
 8008c80:	e54d      	b.n	800871e <_vfiprintf_r+0xd2>
 8008c82:	9503      	str	r5, [sp, #12]
 8008c84:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f000 809c 	beq.w	8008dc6 <_vfiprintf_r+0x77a>
 8008c8e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8008c92:	f04f 0300 	mov.w	r3, #0
 8008c96:	2601      	movs	r6, #1
 8008c98:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8008c9c:	ab10      	add	r3, sp, #64	; 0x40
 8008c9e:	46b1      	mov	r9, r6
 8008ca0:	9307      	str	r3, [sp, #28]
 8008ca2:	e71c      	b.n	8008ade <_vfiprintf_r+0x492>
 8008ca4:	9801      	ldr	r0, [sp, #4]
 8008ca6:	9900      	ldr	r1, [sp, #0]
 8008ca8:	9308      	str	r3, [sp, #32]
 8008caa:	aa0d      	add	r2, sp, #52	; 0x34
 8008cac:	f7ff fc86 	bl	80085bc <__sprint_r.part.0>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	f040 808f 	bne.w	8008dd4 <_vfiprintf_r+0x788>
 8008cb6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008cb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cba:	9b08      	ldr	r3, [sp, #32]
 8008cbc:	f101 0e01 	add.w	lr, r1, #1
 8008cc0:	46d4      	mov	ip, sl
 8008cc2:	e61c      	b.n	80088fe <_vfiprintf_r+0x2b2>
 8008cc4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008cc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cc8:	1c48      	adds	r0, r1, #1
 8008cca:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8008cce:	b16b      	cbz	r3, 8008cec <_vfiprintf_r+0x6a0>
 8008cd0:	3201      	adds	r2, #1
 8008cd2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	2807      	cmp	r0, #7
 8008cda:	920f      	str	r2, [sp, #60]	; 0x3c
 8008cdc:	900e      	str	r0, [sp, #56]	; 0x38
 8008cde:	6023      	str	r3, [r4, #0]
 8008ce0:	6061      	str	r1, [r4, #4]
 8008ce2:	f300 8134 	bgt.w	8008f4e <_vfiprintf_r+0x902>
 8008ce6:	4601      	mov	r1, r0
 8008ce8:	3408      	adds	r4, #8
 8008cea:	3001      	adds	r0, #1
 8008cec:	9b05      	ldr	r3, [sp, #20]
 8008cee:	b163      	cbz	r3, 8008d0a <_vfiprintf_r+0x6be>
 8008cf0:	3202      	adds	r2, #2
 8008cf2:	a90c      	add	r1, sp, #48	; 0x30
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	2807      	cmp	r0, #7
 8008cf8:	920f      	str	r2, [sp, #60]	; 0x3c
 8008cfa:	900e      	str	r0, [sp, #56]	; 0x38
 8008cfc:	e884 000a 	stmia.w	r4, {r1, r3}
 8008d00:	f300 8134 	bgt.w	8008f6c <_vfiprintf_r+0x920>
 8008d04:	4601      	mov	r1, r0
 8008d06:	3408      	adds	r4, #8
 8008d08:	3001      	adds	r0, #1
 8008d0a:	9b06      	ldr	r3, [sp, #24]
 8008d0c:	2b80      	cmp	r3, #128	; 0x80
 8008d0e:	f000 80d4 	beq.w	8008eba <_vfiprintf_r+0x86e>
 8008d12:	ebc9 070c 	rsb	r7, r9, ip
 8008d16:	2f00      	cmp	r7, #0
 8008d18:	dd2b      	ble.n	8008d72 <_vfiprintf_r+0x726>
 8008d1a:	2f10      	cmp	r7, #16
 8008d1c:	4daa      	ldr	r5, [pc, #680]	; (8008fc8 <_vfiprintf_r+0x97c>)
 8008d1e:	dd1f      	ble.n	8008d60 <_vfiprintf_r+0x714>
 8008d20:	46a6      	mov	lr, r4
 8008d22:	2310      	movs	r3, #16
 8008d24:	9c01      	ldr	r4, [sp, #4]
 8008d26:	e007      	b.n	8008d38 <_vfiprintf_r+0x6ec>
 8008d28:	f101 0c02 	add.w	ip, r1, #2
 8008d2c:	f10e 0e08 	add.w	lr, lr, #8
 8008d30:	4601      	mov	r1, r0
 8008d32:	3f10      	subs	r7, #16
 8008d34:	2f10      	cmp	r7, #16
 8008d36:	dd11      	ble.n	8008d5c <_vfiprintf_r+0x710>
 8008d38:	1c48      	adds	r0, r1, #1
 8008d3a:	3210      	adds	r2, #16
 8008d3c:	2807      	cmp	r0, #7
 8008d3e:	920f      	str	r2, [sp, #60]	; 0x3c
 8008d40:	f8ce 5000 	str.w	r5, [lr]
 8008d44:	f8ce 3004 	str.w	r3, [lr, #4]
 8008d48:	900e      	str	r0, [sp, #56]	; 0x38
 8008d4a:	dded      	ble.n	8008d28 <_vfiprintf_r+0x6dc>
 8008d4c:	bb6a      	cbnz	r2, 8008daa <_vfiprintf_r+0x75e>
 8008d4e:	3f10      	subs	r7, #16
 8008d50:	2f10      	cmp	r7, #16
 8008d52:	f04f 0c01 	mov.w	ip, #1
 8008d56:	4611      	mov	r1, r2
 8008d58:	46d6      	mov	lr, sl
 8008d5a:	dced      	bgt.n	8008d38 <_vfiprintf_r+0x6ec>
 8008d5c:	4674      	mov	r4, lr
 8008d5e:	4660      	mov	r0, ip
 8008d60:	443a      	add	r2, r7
 8008d62:	2807      	cmp	r0, #7
 8008d64:	920f      	str	r2, [sp, #60]	; 0x3c
 8008d66:	e884 00a0 	stmia.w	r4, {r5, r7}
 8008d6a:	900e      	str	r0, [sp, #56]	; 0x38
 8008d6c:	dc3b      	bgt.n	8008de6 <_vfiprintf_r+0x79a>
 8008d6e:	3408      	adds	r4, #8
 8008d70:	3001      	adds	r0, #1
 8008d72:	eb02 0309 	add.w	r3, r2, r9
 8008d76:	9a07      	ldr	r2, [sp, #28]
 8008d78:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d7a:	2807      	cmp	r0, #7
 8008d7c:	e884 0204 	stmia.w	r4, {r2, r9}
 8008d80:	900e      	str	r0, [sp, #56]	; 0x38
 8008d82:	dd3d      	ble.n	8008e00 <_vfiprintf_r+0x7b4>
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f040 813e 	bne.w	8009006 <_vfiprintf_r+0x9ba>
 8008d8a:	f018 0f04 	tst.w	r8, #4
 8008d8e:	930e      	str	r3, [sp, #56]	; 0x38
 8008d90:	f040 812f 	bne.w	8008ff2 <_vfiprintf_r+0x9a6>
 8008d94:	9b02      	ldr	r3, [sp, #8]
 8008d96:	9a03      	ldr	r2, [sp, #12]
 8008d98:	4296      	cmp	r6, r2
 8008d9a:	bfac      	ite	ge
 8008d9c:	199b      	addge	r3, r3, r6
 8008d9e:	189b      	addlt	r3, r3, r2
 8008da0:	9302      	str	r3, [sp, #8]
 8008da2:	2300      	movs	r3, #0
 8008da4:	930e      	str	r3, [sp, #56]	; 0x38
 8008da6:	4654      	mov	r4, sl
 8008da8:	e482      	b.n	80086b0 <_vfiprintf_r+0x64>
 8008daa:	4620      	mov	r0, r4
 8008dac:	9900      	ldr	r1, [sp, #0]
 8008dae:	9305      	str	r3, [sp, #20]
 8008db0:	aa0d      	add	r2, sp, #52	; 0x34
 8008db2:	f7ff fc03 	bl	80085bc <__sprint_r.part.0>
 8008db6:	b968      	cbnz	r0, 8008dd4 <_vfiprintf_r+0x788>
 8008db8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008dba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008dbc:	9b05      	ldr	r3, [sp, #20]
 8008dbe:	f101 0c01 	add.w	ip, r1, #1
 8008dc2:	46d6      	mov	lr, sl
 8008dc4:	e7b5      	b.n	8008d32 <_vfiprintf_r+0x6e6>
 8008dc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008dc8:	b123      	cbz	r3, 8008dd4 <_vfiprintf_r+0x788>
 8008dca:	9801      	ldr	r0, [sp, #4]
 8008dcc:	9900      	ldr	r1, [sp, #0]
 8008dce:	aa0d      	add	r2, sp, #52	; 0x34
 8008dd0:	f7ff fbf4 	bl	80085bc <__sprint_r.part.0>
 8008dd4:	9b00      	ldr	r3, [sp, #0]
 8008dd6:	899b      	ldrh	r3, [r3, #12]
 8008dd8:	065b      	lsls	r3, r3, #25
 8008dda:	f53f ad22 	bmi.w	8008822 <_vfiprintf_r+0x1d6>
 8008dde:	9802      	ldr	r0, [sp, #8]
 8008de0:	b02b      	add	sp, #172	; 0xac
 8008de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de6:	2a00      	cmp	r2, #0
 8008de8:	f040 8191 	bne.w	800910e <_vfiprintf_r+0xac2>
 8008dec:	2201      	movs	r2, #1
 8008dee:	9907      	ldr	r1, [sp, #28]
 8008df0:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 8008df4:	464b      	mov	r3, r9
 8008df6:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8008dfa:	911a      	str	r1, [sp, #104]	; 0x68
 8008dfc:	920e      	str	r2, [sp, #56]	; 0x38
 8008dfe:	4654      	mov	r4, sl
 8008e00:	f104 0208 	add.w	r2, r4, #8
 8008e04:	f018 0f04 	tst.w	r8, #4
 8008e08:	d039      	beq.n	8008e7e <_vfiprintf_r+0x832>
 8008e0a:	9903      	ldr	r1, [sp, #12]
 8008e0c:	1b8d      	subs	r5, r1, r6
 8008e0e:	2d00      	cmp	r5, #0
 8008e10:	dd35      	ble.n	8008e7e <_vfiprintf_r+0x832>
 8008e12:	2d10      	cmp	r5, #16
 8008e14:	f340 8202 	ble.w	800921c <_vfiprintf_r+0xbd0>
 8008e18:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008e1a:	4f6c      	ldr	r7, [pc, #432]	; (8008fcc <_vfiprintf_r+0x980>)
 8008e1c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008e20:	f8dd 9000 	ldr.w	r9, [sp]
 8008e24:	2410      	movs	r4, #16
 8008e26:	e006      	b.n	8008e36 <_vfiprintf_r+0x7ea>
 8008e28:	f100 0e02 	add.w	lr, r0, #2
 8008e2c:	3208      	adds	r2, #8
 8008e2e:	4608      	mov	r0, r1
 8008e30:	3d10      	subs	r5, #16
 8008e32:	2d10      	cmp	r5, #16
 8008e34:	dd10      	ble.n	8008e58 <_vfiprintf_r+0x80c>
 8008e36:	1c41      	adds	r1, r0, #1
 8008e38:	3310      	adds	r3, #16
 8008e3a:	2907      	cmp	r1, #7
 8008e3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e3e:	6017      	str	r7, [r2, #0]
 8008e40:	6054      	str	r4, [r2, #4]
 8008e42:	910e      	str	r1, [sp, #56]	; 0x38
 8008e44:	ddf0      	ble.n	8008e28 <_vfiprintf_r+0x7dc>
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d12a      	bne.n	8008ea0 <_vfiprintf_r+0x854>
 8008e4a:	3d10      	subs	r5, #16
 8008e4c:	2d10      	cmp	r5, #16
 8008e4e:	f04f 0e01 	mov.w	lr, #1
 8008e52:	4618      	mov	r0, r3
 8008e54:	4652      	mov	r2, sl
 8008e56:	dcee      	bgt.n	8008e36 <_vfiprintf_r+0x7ea>
 8008e58:	442b      	add	r3, r5
 8008e5a:	f1be 0f07 	cmp.w	lr, #7
 8008e5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e60:	6017      	str	r7, [r2, #0]
 8008e62:	6055      	str	r5, [r2, #4]
 8008e64:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8008e68:	dd09      	ble.n	8008e7e <_vfiprintf_r+0x832>
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d092      	beq.n	8008d94 <_vfiprintf_r+0x748>
 8008e6e:	9801      	ldr	r0, [sp, #4]
 8008e70:	9900      	ldr	r1, [sp, #0]
 8008e72:	aa0d      	add	r2, sp, #52	; 0x34
 8008e74:	f7ff fba2 	bl	80085bc <__sprint_r.part.0>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d1ab      	bne.n	8008dd4 <_vfiprintf_r+0x788>
 8008e7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e7e:	9a02      	ldr	r2, [sp, #8]
 8008e80:	9903      	ldr	r1, [sp, #12]
 8008e82:	428e      	cmp	r6, r1
 8008e84:	bfac      	ite	ge
 8008e86:	1992      	addge	r2, r2, r6
 8008e88:	1852      	addlt	r2, r2, r1
 8008e8a:	9202      	str	r2, [sp, #8]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d088      	beq.n	8008da2 <_vfiprintf_r+0x756>
 8008e90:	9801      	ldr	r0, [sp, #4]
 8008e92:	9900      	ldr	r1, [sp, #0]
 8008e94:	aa0d      	add	r2, sp, #52	; 0x34
 8008e96:	f7ff fb91 	bl	80085bc <__sprint_r.part.0>
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	d081      	beq.n	8008da2 <_vfiprintf_r+0x756>
 8008e9e:	e799      	b.n	8008dd4 <_vfiprintf_r+0x788>
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	4649      	mov	r1, r9
 8008ea4:	aa0d      	add	r2, sp, #52	; 0x34
 8008ea6:	f7ff fb89 	bl	80085bc <__sprint_r.part.0>
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d192      	bne.n	8008dd4 <_vfiprintf_r+0x788>
 8008eae:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008eb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008eb2:	f100 0e01 	add.w	lr, r0, #1
 8008eb6:	4652      	mov	r2, sl
 8008eb8:	e7ba      	b.n	8008e30 <_vfiprintf_r+0x7e4>
 8008eba:	9b03      	ldr	r3, [sp, #12]
 8008ebc:	1b9f      	subs	r7, r3, r6
 8008ebe:	2f00      	cmp	r7, #0
 8008ec0:	f77f af27 	ble.w	8008d12 <_vfiprintf_r+0x6c6>
 8008ec4:	2f10      	cmp	r7, #16
 8008ec6:	4d40      	ldr	r5, [pc, #256]	; (8008fc8 <_vfiprintf_r+0x97c>)
 8008ec8:	f340 81b4 	ble.w	8009234 <_vfiprintf_r+0xbe8>
 8008ecc:	4620      	mov	r0, r4
 8008ece:	2310      	movs	r3, #16
 8008ed0:	4664      	mov	r4, ip
 8008ed2:	4684      	mov	ip, r0
 8008ed4:	e007      	b.n	8008ee6 <_vfiprintf_r+0x89a>
 8008ed6:	f101 0e02 	add.w	lr, r1, #2
 8008eda:	f10c 0c08 	add.w	ip, ip, #8
 8008ede:	4601      	mov	r1, r0
 8008ee0:	3f10      	subs	r7, #16
 8008ee2:	2f10      	cmp	r7, #16
 8008ee4:	dd11      	ble.n	8008f0a <_vfiprintf_r+0x8be>
 8008ee6:	1c48      	adds	r0, r1, #1
 8008ee8:	3210      	adds	r2, #16
 8008eea:	2807      	cmp	r0, #7
 8008eec:	920f      	str	r2, [sp, #60]	; 0x3c
 8008eee:	f8cc 5000 	str.w	r5, [ip]
 8008ef2:	f8cc 3004 	str.w	r3, [ip, #4]
 8008ef6:	900e      	str	r0, [sp, #56]	; 0x38
 8008ef8:	dded      	ble.n	8008ed6 <_vfiprintf_r+0x88a>
 8008efa:	b9c2      	cbnz	r2, 8008f2e <_vfiprintf_r+0x8e2>
 8008efc:	3f10      	subs	r7, #16
 8008efe:	2f10      	cmp	r7, #16
 8008f00:	f04f 0e01 	mov.w	lr, #1
 8008f04:	4611      	mov	r1, r2
 8008f06:	46d4      	mov	ip, sl
 8008f08:	dced      	bgt.n	8008ee6 <_vfiprintf_r+0x89a>
 8008f0a:	4663      	mov	r3, ip
 8008f0c:	46a4      	mov	ip, r4
 8008f0e:	461c      	mov	r4, r3
 8008f10:	443a      	add	r2, r7
 8008f12:	f1be 0f07 	cmp.w	lr, #7
 8008f16:	920f      	str	r2, [sp, #60]	; 0x3c
 8008f18:	e884 00a0 	stmia.w	r4, {r5, r7}
 8008f1c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8008f20:	f300 80ef 	bgt.w	8009102 <_vfiprintf_r+0xab6>
 8008f24:	3408      	adds	r4, #8
 8008f26:	f10e 0001 	add.w	r0, lr, #1
 8008f2a:	4671      	mov	r1, lr
 8008f2c:	e6f1      	b.n	8008d12 <_vfiprintf_r+0x6c6>
 8008f2e:	9801      	ldr	r0, [sp, #4]
 8008f30:	9900      	ldr	r1, [sp, #0]
 8008f32:	9305      	str	r3, [sp, #20]
 8008f34:	aa0d      	add	r2, sp, #52	; 0x34
 8008f36:	f7ff fb41 	bl	80085bc <__sprint_r.part.0>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	f47f af4a 	bne.w	8008dd4 <_vfiprintf_r+0x788>
 8008f40:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008f42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f44:	9b05      	ldr	r3, [sp, #20]
 8008f46:	f101 0e01 	add.w	lr, r1, #1
 8008f4a:	46d4      	mov	ip, sl
 8008f4c:	e7c8      	b.n	8008ee0 <_vfiprintf_r+0x894>
 8008f4e:	2a00      	cmp	r2, #0
 8008f50:	f040 80c6 	bne.w	80090e0 <_vfiprintf_r+0xa94>
 8008f54:	9b05      	ldr	r3, [sp, #20]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 8086 	beq.w	8009068 <_vfiprintf_r+0xa1c>
 8008f5c:	aa0c      	add	r2, sp, #48	; 0x30
 8008f5e:	2302      	movs	r3, #2
 8008f60:	921a      	str	r2, [sp, #104]	; 0x68
 8008f62:	4608      	mov	r0, r1
 8008f64:	931b      	str	r3, [sp, #108]	; 0x6c
 8008f66:	461a      	mov	r2, r3
 8008f68:	4654      	mov	r4, sl
 8008f6a:	e6cb      	b.n	8008d04 <_vfiprintf_r+0x6b8>
 8008f6c:	2a00      	cmp	r2, #0
 8008f6e:	f040 80a6 	bne.w	80090be <_vfiprintf_r+0xa72>
 8008f72:	2001      	movs	r0, #1
 8008f74:	4611      	mov	r1, r2
 8008f76:	4654      	mov	r4, sl
 8008f78:	e6c7      	b.n	8008d0a <_vfiprintf_r+0x6be>
 8008f7a:	bb03      	cbnz	r3, 8008fbe <_vfiprintf_r+0x972>
 8008f7c:	f018 0f01 	tst.w	r8, #1
 8008f80:	d01d      	beq.n	8008fbe <_vfiprintf_r+0x972>
 8008f82:	ab2a      	add	r3, sp, #168	; 0xa8
 8008f84:	2230      	movs	r2, #48	; 0x30
 8008f86:	f803 2d41 	strb.w	r2, [r3, #-65]!
 8008f8a:	ebc3 090a 	rsb	r9, r3, sl
 8008f8e:	9307      	str	r3, [sp, #28]
 8008f90:	e48e      	b.n	80088b0 <_vfiprintf_r+0x264>
 8008f92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f94:	46d1      	mov	r9, sl
 8008f96:	0933      	lsrs	r3, r6, #4
 8008f98:	f006 010f 	and.w	r1, r6, #15
 8008f9c:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8008fa0:	093a      	lsrs	r2, r7, #4
 8008fa2:	461e      	mov	r6, r3
 8008fa4:	4617      	mov	r7, r2
 8008fa6:	5c43      	ldrb	r3, [r0, r1]
 8008fa8:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8008fac:	ea56 0307 	orrs.w	r3, r6, r7
 8008fb0:	d1f1      	bne.n	8008f96 <_vfiprintf_r+0x94a>
 8008fb2:	464b      	mov	r3, r9
 8008fb4:	f8cd 901c 	str.w	r9, [sp, #28]
 8008fb8:	ebc3 090a 	rsb	r9, r3, sl
 8008fbc:	e478      	b.n	80088b0 <_vfiprintf_r+0x264>
 8008fbe:	f8cd a01c 	str.w	sl, [sp, #28]
 8008fc2:	e475      	b.n	80088b0 <_vfiprintf_r+0x264>
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	e444      	b.n	8008852 <_vfiprintf_r+0x206>
 8008fc8:	0800ac80 	.word	0x0800ac80
 8008fcc:	0800ac90 	.word	0x0800ac90
 8008fd0:	2a00      	cmp	r2, #0
 8008fd2:	f040 80d7 	bne.w	8009184 <_vfiprintf_r+0xb38>
 8008fd6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f000 80ae 	beq.w	800913c <_vfiprintf_r+0xaf0>
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	931b      	str	r3, [sp, #108]	; 0x6c
 8008fea:	461a      	mov	r2, r3
 8008fec:	911a      	str	r1, [sp, #104]	; 0x68
 8008fee:	4654      	mov	r4, sl
 8008ff0:	e679      	b.n	8008ce6 <_vfiprintf_r+0x69a>
 8008ff2:	9a03      	ldr	r2, [sp, #12]
 8008ff4:	1b95      	subs	r5, r2, r6
 8008ff6:	2d00      	cmp	r5, #0
 8008ff8:	4652      	mov	r2, sl
 8008ffa:	f73f af0a 	bgt.w	8008e12 <_vfiprintf_r+0x7c6>
 8008ffe:	e6c9      	b.n	8008d94 <_vfiprintf_r+0x748>
 8009000:	465d      	mov	r5, fp
 8009002:	f7ff bb7c 	b.w	80086fe <_vfiprintf_r+0xb2>
 8009006:	9801      	ldr	r0, [sp, #4]
 8009008:	9900      	ldr	r1, [sp, #0]
 800900a:	aa0d      	add	r2, sp, #52	; 0x34
 800900c:	f7ff fad6 	bl	80085bc <__sprint_r.part.0>
 8009010:	2800      	cmp	r0, #0
 8009012:	f47f aedf 	bne.w	8008dd4 <_vfiprintf_r+0x788>
 8009016:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009018:	4652      	mov	r2, sl
 800901a:	e6f3      	b.n	8008e04 <_vfiprintf_r+0x7b8>
 800901c:	9904      	ldr	r1, [sp, #16]
 800901e:	460a      	mov	r2, r1
 8009020:	3204      	adds	r2, #4
 8009022:	680e      	ldr	r6, [r1, #0]
 8009024:	9204      	str	r2, [sp, #16]
 8009026:	2700      	movs	r7, #0
 8009028:	e413      	b.n	8008852 <_vfiprintf_r+0x206>
 800902a:	3204      	adds	r2, #4
 800902c:	681e      	ldr	r6, [r3, #0]
 800902e:	9204      	str	r2, [sp, #16]
 8009030:	2301      	movs	r3, #1
 8009032:	2700      	movs	r7, #0
 8009034:	e40d      	b.n	8008852 <_vfiprintf_r+0x206>
 8009036:	6816      	ldr	r6, [r2, #0]
 8009038:	3204      	adds	r2, #4
 800903a:	9204      	str	r2, [sp, #16]
 800903c:	2700      	movs	r7, #0
 800903e:	e52d      	b.n	8008a9c <_vfiprintf_r+0x450>
 8009040:	9a04      	ldr	r2, [sp, #16]
 8009042:	6816      	ldr	r6, [r2, #0]
 8009044:	4613      	mov	r3, r2
 8009046:	3304      	adds	r3, #4
 8009048:	17f7      	asrs	r7, r6, #31
 800904a:	9304      	str	r3, [sp, #16]
 800904c:	4632      	mov	r2, r6
 800904e:	463b      	mov	r3, r7
 8009050:	e4bf      	b.n	80089d2 <_vfiprintf_r+0x386>
 8009052:	9801      	ldr	r0, [sp, #4]
 8009054:	9900      	ldr	r1, [sp, #0]
 8009056:	aa0d      	add	r2, sp, #52	; 0x34
 8009058:	f7ff fab0 	bl	80085bc <__sprint_r.part.0>
 800905c:	2800      	cmp	r0, #0
 800905e:	f47f aeb9 	bne.w	8008dd4 <_vfiprintf_r+0x788>
 8009062:	4654      	mov	r4, sl
 8009064:	f7ff bbbe 	b.w	80087e4 <_vfiprintf_r+0x198>
 8009068:	4608      	mov	r0, r1
 800906a:	4654      	mov	r4, sl
 800906c:	4611      	mov	r1, r2
 800906e:	e64c      	b.n	8008d0a <_vfiprintf_r+0x6be>
 8009070:	46d1      	mov	r9, sl
 8009072:	f8cd c014 	str.w	ip, [sp, #20]
 8009076:	4630      	mov	r0, r6
 8009078:	4639      	mov	r1, r7
 800907a:	220a      	movs	r2, #10
 800907c:	2300      	movs	r3, #0
 800907e:	f001 f897 	bl	800a1b0 <__aeabi_uldivmod>
 8009082:	3230      	adds	r2, #48	; 0x30
 8009084:	4630      	mov	r0, r6
 8009086:	4639      	mov	r1, r7
 8009088:	f809 2d01 	strb.w	r2, [r9, #-1]!
 800908c:	2300      	movs	r3, #0
 800908e:	220a      	movs	r2, #10
 8009090:	f001 f88e 	bl	800a1b0 <__aeabi_uldivmod>
 8009094:	4606      	mov	r6, r0
 8009096:	460f      	mov	r7, r1
 8009098:	ea56 0307 	orrs.w	r3, r6, r7
 800909c:	d1eb      	bne.n	8009076 <_vfiprintf_r+0xa2a>
 800909e:	f8dd c014 	ldr.w	ip, [sp, #20]
 80090a2:	e786      	b.n	8008fb2 <_vfiprintf_r+0x966>
 80090a4:	2b30      	cmp	r3, #48	; 0x30
 80090a6:	9b07      	ldr	r3, [sp, #28]
 80090a8:	d086      	beq.n	8008fb8 <_vfiprintf_r+0x96c>
 80090aa:	3b01      	subs	r3, #1
 80090ac:	461a      	mov	r2, r3
 80090ae:	9307      	str	r3, [sp, #28]
 80090b0:	2330      	movs	r3, #48	; 0x30
 80090b2:	ebc2 090a 	rsb	r9, r2, sl
 80090b6:	f801 3c01 	strb.w	r3, [r1, #-1]
 80090ba:	f7ff bbf9 	b.w	80088b0 <_vfiprintf_r+0x264>
 80090be:	9801      	ldr	r0, [sp, #4]
 80090c0:	9900      	ldr	r1, [sp, #0]
 80090c2:	f8cd c014 	str.w	ip, [sp, #20]
 80090c6:	aa0d      	add	r2, sp, #52	; 0x34
 80090c8:	f7ff fa78 	bl	80085bc <__sprint_r.part.0>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	f47f ae81 	bne.w	8008dd4 <_vfiprintf_r+0x788>
 80090d2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80090d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090d6:	f8dd c014 	ldr.w	ip, [sp, #20]
 80090da:	1c48      	adds	r0, r1, #1
 80090dc:	4654      	mov	r4, sl
 80090de:	e614      	b.n	8008d0a <_vfiprintf_r+0x6be>
 80090e0:	9801      	ldr	r0, [sp, #4]
 80090e2:	9900      	ldr	r1, [sp, #0]
 80090e4:	f8cd c020 	str.w	ip, [sp, #32]
 80090e8:	aa0d      	add	r2, sp, #52	; 0x34
 80090ea:	f7ff fa67 	bl	80085bc <__sprint_r.part.0>
 80090ee:	2800      	cmp	r0, #0
 80090f0:	f47f ae70 	bne.w	8008dd4 <_vfiprintf_r+0x788>
 80090f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80090f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090f8:	f8dd c020 	ldr.w	ip, [sp, #32]
 80090fc:	1c48      	adds	r0, r1, #1
 80090fe:	4654      	mov	r4, sl
 8009100:	e5f4      	b.n	8008cec <_vfiprintf_r+0x6a0>
 8009102:	2a00      	cmp	r2, #0
 8009104:	d167      	bne.n	80091d6 <_vfiprintf_r+0xb8a>
 8009106:	2001      	movs	r0, #1
 8009108:	4611      	mov	r1, r2
 800910a:	4654      	mov	r4, sl
 800910c:	e601      	b.n	8008d12 <_vfiprintf_r+0x6c6>
 800910e:	9801      	ldr	r0, [sp, #4]
 8009110:	9900      	ldr	r1, [sp, #0]
 8009112:	aa0d      	add	r2, sp, #52	; 0x34
 8009114:	f7ff fa52 	bl	80085bc <__sprint_r.part.0>
 8009118:	2800      	cmp	r0, #0
 800911a:	f47f ae5b 	bne.w	8008dd4 <_vfiprintf_r+0x788>
 800911e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009120:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009122:	3001      	adds	r0, #1
 8009124:	4654      	mov	r4, sl
 8009126:	e624      	b.n	8008d72 <_vfiprintf_r+0x726>
 8009128:	252d      	movs	r5, #45	; 0x2d
 800912a:	4276      	negs	r6, r6
 800912c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8009130:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 8009134:	46e1      	mov	r9, ip
 8009136:	2301      	movs	r3, #1
 8009138:	f7ff bb91 	b.w	800885e <_vfiprintf_r+0x212>
 800913c:	9b05      	ldr	r3, [sp, #20]
 800913e:	4611      	mov	r1, r2
 8009140:	2001      	movs	r0, #1
 8009142:	4654      	mov	r4, sl
 8009144:	2b00      	cmp	r3, #0
 8009146:	f43f ade4 	beq.w	8008d12 <_vfiprintf_r+0x6c6>
 800914a:	aa0c      	add	r2, sp, #48	; 0x30
 800914c:	2302      	movs	r3, #2
 800914e:	e88a 000c 	stmia.w	sl, {r2, r3}
 8009152:	461a      	mov	r2, r3
 8009154:	e5d6      	b.n	8008d04 <_vfiprintf_r+0x6b8>
 8009156:	f018 0f10 	tst.w	r8, #16
 800915a:	d10b      	bne.n	8009174 <_vfiprintf_r+0xb28>
 800915c:	f018 0f40 	tst.w	r8, #64	; 0x40
 8009160:	d008      	beq.n	8009174 <_vfiprintf_r+0xb28>
 8009162:	9a04      	ldr	r2, [sp, #16]
 8009164:	6813      	ldr	r3, [r2, #0]
 8009166:	3204      	adds	r2, #4
 8009168:	9204      	str	r2, [sp, #16]
 800916a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800916e:	801a      	strh	r2, [r3, #0]
 8009170:	f7ff ba9e 	b.w	80086b0 <_vfiprintf_r+0x64>
 8009174:	9a04      	ldr	r2, [sp, #16]
 8009176:	6813      	ldr	r3, [r2, #0]
 8009178:	3204      	adds	r2, #4
 800917a:	9204      	str	r2, [sp, #16]
 800917c:	9a02      	ldr	r2, [sp, #8]
 800917e:	601a      	str	r2, [r3, #0]
 8009180:	f7ff ba96 	b.w	80086b0 <_vfiprintf_r+0x64>
 8009184:	9801      	ldr	r0, [sp, #4]
 8009186:	9900      	ldr	r1, [sp, #0]
 8009188:	f8cd c020 	str.w	ip, [sp, #32]
 800918c:	aa0d      	add	r2, sp, #52	; 0x34
 800918e:	f7ff fa15 	bl	80085bc <__sprint_r.part.0>
 8009192:	2800      	cmp	r0, #0
 8009194:	f47f ae1e 	bne.w	8008dd4 <_vfiprintf_r+0x788>
 8009198:	990e      	ldr	r1, [sp, #56]	; 0x38
 800919a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800919c:	f8dd c020 	ldr.w	ip, [sp, #32]
 80091a0:	1c48      	adds	r0, r1, #1
 80091a2:	4654      	mov	r4, sl
 80091a4:	e591      	b.n	8008cca <_vfiprintf_r+0x67e>
 80091a6:	f048 0820 	orr.w	r8, r8, #32
 80091aa:	f10b 0001 	add.w	r0, fp, #1
 80091ae:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80091b2:	f7ff bab4 	b.w	800871e <_vfiprintf_r+0xd2>
 80091b6:	426d      	negs	r5, r5
 80091b8:	9304      	str	r3, [sp, #16]
 80091ba:	4658      	mov	r0, fp
 80091bc:	f7ff bbc6 	b.w	800894c <_vfiprintf_r+0x300>
 80091c0:	9807      	ldr	r0, [sp, #28]
 80091c2:	9604      	str	r6, [sp, #16]
 80091c4:	f7fa fd68 	bl	8003c98 <strlen>
 80091c8:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 80091cc:	4681      	mov	r9, r0
 80091ce:	f04f 0c00 	mov.w	ip, #0
 80091d2:	f7ff bb6d 	b.w	80088b0 <_vfiprintf_r+0x264>
 80091d6:	9801      	ldr	r0, [sp, #4]
 80091d8:	9900      	ldr	r1, [sp, #0]
 80091da:	f8cd c014 	str.w	ip, [sp, #20]
 80091de:	aa0d      	add	r2, sp, #52	; 0x34
 80091e0:	f7ff f9ec 	bl	80085bc <__sprint_r.part.0>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	f47f adf5 	bne.w	8008dd4 <_vfiprintf_r+0x788>
 80091ea:	990e      	ldr	r1, [sp, #56]	; 0x38
 80091ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80091ee:	f8dd c014 	ldr.w	ip, [sp, #20]
 80091f2:	1c48      	adds	r0, r1, #1
 80091f4:	4654      	mov	r4, sl
 80091f6:	e58c      	b.n	8008d12 <_vfiprintf_r+0x6c6>
 80091f8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80091fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80091fc:	4f15      	ldr	r7, [pc, #84]	; (8009254 <_vfiprintf_r+0xc08>)
 80091fe:	3101      	adds	r1, #1
 8009200:	f7ff bb98 	b.w	8008934 <_vfiprintf_r+0x2e8>
 8009204:	f1bc 0f06 	cmp.w	ip, #6
 8009208:	bf28      	it	cs
 800920a:	f04f 0c06 	movcs.w	ip, #6
 800920e:	4b12      	ldr	r3, [pc, #72]	; (8009258 <_vfiprintf_r+0xc0c>)
 8009210:	9604      	str	r6, [sp, #16]
 8009212:	46e1      	mov	r9, ip
 8009214:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
 8009218:	9307      	str	r3, [sp, #28]
 800921a:	e460      	b.n	8008ade <_vfiprintf_r+0x492>
 800921c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800921e:	4f0d      	ldr	r7, [pc, #52]	; (8009254 <_vfiprintf_r+0xc08>)
 8009220:	f101 0e01 	add.w	lr, r1, #1
 8009224:	e618      	b.n	8008e58 <_vfiprintf_r+0x80c>
 8009226:	46e1      	mov	r9, ip
 8009228:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 800922c:	9604      	str	r6, [sp, #16]
 800922e:	4684      	mov	ip, r0
 8009230:	f7ff bb3e 	b.w	80088b0 <_vfiprintf_r+0x264>
 8009234:	4686      	mov	lr, r0
 8009236:	e66b      	b.n	8008f10 <_vfiprintf_r+0x8c4>
 8009238:	9a04      	ldr	r2, [sp, #16]
 800923a:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800923e:	6816      	ldr	r6, [r2, #0]
 8009240:	3204      	adds	r2, #4
 8009242:	2e00      	cmp	r6, #0
 8009244:	9204      	str	r2, [sp, #16]
 8009246:	f6bf aa6a 	bge.w	800871e <_vfiprintf_r+0xd2>
 800924a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800924e:	f7ff ba66 	b.w	800871e <_vfiprintf_r+0xd2>
 8009252:	bf00      	nop
 8009254:	0800ac90 	.word	0x0800ac90
 8009258:	0800ab1c 	.word	0x0800ab1c

0800925c <vfiprintf>:
 800925c:	b430      	push	{r4, r5}
 800925e:	4c04      	ldr	r4, [pc, #16]	; (8009270 <vfiprintf+0x14>)
 8009260:	460d      	mov	r5, r1
 8009262:	4613      	mov	r3, r2
 8009264:	4601      	mov	r1, r0
 8009266:	462a      	mov	r2, r5
 8009268:	6820      	ldr	r0, [r4, #0]
 800926a:	bc30      	pop	{r4, r5}
 800926c:	f7ff b9ee 	b.w	800864c <_vfiprintf_r>
 8009270:	200004a8 	.word	0x200004a8

08009274 <__sbprintf>:
 8009274:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8009278:	460c      	mov	r4, r1
 800927a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 800927e:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8009282:	69e7      	ldr	r7, [r4, #28]
 8009284:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8009286:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 800928a:	9119      	str	r1, [sp, #100]	; 0x64
 800928c:	ad1a      	add	r5, sp, #104	; 0x68
 800928e:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8009292:	f02e 0e02 	bic.w	lr, lr, #2
 8009296:	f04f 0c00 	mov.w	ip, #0
 800929a:	9707      	str	r7, [sp, #28]
 800929c:	4669      	mov	r1, sp
 800929e:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80092a0:	9500      	str	r5, [sp, #0]
 80092a2:	9504      	str	r5, [sp, #16]
 80092a4:	9602      	str	r6, [sp, #8]
 80092a6:	9605      	str	r6, [sp, #20]
 80092a8:	f8ad e00c 	strh.w	lr, [sp, #12]
 80092ac:	f8ad 900e 	strh.w	r9, [sp, #14]
 80092b0:	9709      	str	r7, [sp, #36]	; 0x24
 80092b2:	f8cd c018 	str.w	ip, [sp, #24]
 80092b6:	4606      	mov	r6, r0
 80092b8:	f7ff f9c8 	bl	800864c <_vfiprintf_r>
 80092bc:	1e05      	subs	r5, r0, #0
 80092be:	db07      	blt.n	80092d0 <__sbprintf+0x5c>
 80092c0:	4630      	mov	r0, r6
 80092c2:	4669      	mov	r1, sp
 80092c4:	f7fd f8e0 	bl	8006488 <_fflush_r>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	bf18      	it	ne
 80092cc:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80092d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80092d4:	065b      	lsls	r3, r3, #25
 80092d6:	d503      	bpl.n	80092e0 <__sbprintf+0x6c>
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092de:	81a3      	strh	r3, [r4, #12]
 80092e0:	4628      	mov	r0, r5
 80092e2:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 80092e6:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 80092ea:	bf00      	nop

080092ec <_write_r>:
 80092ec:	b570      	push	{r4, r5, r6, lr}
 80092ee:	4c08      	ldr	r4, [pc, #32]	; (8009310 <_write_r+0x24>)
 80092f0:	4606      	mov	r6, r0
 80092f2:	2500      	movs	r5, #0
 80092f4:	4608      	mov	r0, r1
 80092f6:	4611      	mov	r1, r2
 80092f8:	461a      	mov	r2, r3
 80092fa:	6025      	str	r5, [r4, #0]
 80092fc:	f7f7 fe52 	bl	8000fa4 <_write>
 8009300:	1c43      	adds	r3, r0, #1
 8009302:	d000      	beq.n	8009306 <_write_r+0x1a>
 8009304:	bd70      	pop	{r4, r5, r6, pc}
 8009306:	6823      	ldr	r3, [r4, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d0fb      	beq.n	8009304 <_write_r+0x18>
 800930c:	6033      	str	r3, [r6, #0]
 800930e:	bd70      	pop	{r4, r5, r6, pc}
 8009310:	20010658 	.word	0x20010658

08009314 <__register_exitproc>:
 8009314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009318:	4c25      	ldr	r4, [pc, #148]	; (80093b0 <__register_exitproc+0x9c>)
 800931a:	6825      	ldr	r5, [r4, #0]
 800931c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8009320:	4606      	mov	r6, r0
 8009322:	4688      	mov	r8, r1
 8009324:	4692      	mov	sl, r2
 8009326:	4699      	mov	r9, r3
 8009328:	b3cc      	cbz	r4, 800939e <__register_exitproc+0x8a>
 800932a:	6860      	ldr	r0, [r4, #4]
 800932c:	281f      	cmp	r0, #31
 800932e:	dc18      	bgt.n	8009362 <__register_exitproc+0x4e>
 8009330:	1c43      	adds	r3, r0, #1
 8009332:	b17e      	cbz	r6, 8009354 <__register_exitproc+0x40>
 8009334:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8009338:	2101      	movs	r1, #1
 800933a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 800933e:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 8009342:	fa01 f200 	lsl.w	r2, r1, r0
 8009346:	4317      	orrs	r7, r2
 8009348:	2e02      	cmp	r6, #2
 800934a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800934e:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8009352:	d01e      	beq.n	8009392 <__register_exitproc+0x7e>
 8009354:	3002      	adds	r0, #2
 8009356:	6063      	str	r3, [r4, #4]
 8009358:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 800935c:	2000      	movs	r0, #0
 800935e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009362:	4b14      	ldr	r3, [pc, #80]	; (80093b4 <__register_exitproc+0xa0>)
 8009364:	b303      	cbz	r3, 80093a8 <__register_exitproc+0x94>
 8009366:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800936a:	f3af 8000 	nop.w
 800936e:	4604      	mov	r4, r0
 8009370:	b1d0      	cbz	r0, 80093a8 <__register_exitproc+0x94>
 8009372:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8009376:	2700      	movs	r7, #0
 8009378:	e880 0088 	stmia.w	r0, {r3, r7}
 800937c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8009380:	4638      	mov	r0, r7
 8009382:	2301      	movs	r3, #1
 8009384:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8009388:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 800938c:	2e00      	cmp	r6, #0
 800938e:	d0e1      	beq.n	8009354 <__register_exitproc+0x40>
 8009390:	e7d0      	b.n	8009334 <__register_exitproc+0x20>
 8009392:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8009396:	430a      	orrs	r2, r1
 8009398:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800939c:	e7da      	b.n	8009354 <__register_exitproc+0x40>
 800939e:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 80093a2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80093a6:	e7c0      	b.n	800932a <__register_exitproc+0x16>
 80093a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b0:	0800aad0 	.word	0x0800aad0
 80093b4:	00000000 	.word	0x00000000

080093b8 <_calloc_r>:
 80093b8:	b510      	push	{r4, lr}
 80093ba:	fb02 f101 	mul.w	r1, r2, r1
 80093be:	f7fd fd5f 	bl	8006e80 <_malloc_r>
 80093c2:	4604      	mov	r4, r0
 80093c4:	b168      	cbz	r0, 80093e2 <_calloc_r+0x2a>
 80093c6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80093ca:	f022 0203 	bic.w	r2, r2, #3
 80093ce:	3a04      	subs	r2, #4
 80093d0:	2a24      	cmp	r2, #36	; 0x24
 80093d2:	d818      	bhi.n	8009406 <_calloc_r+0x4e>
 80093d4:	2a13      	cmp	r2, #19
 80093d6:	d806      	bhi.n	80093e6 <_calloc_r+0x2e>
 80093d8:	4603      	mov	r3, r0
 80093da:	2200      	movs	r2, #0
 80093dc:	601a      	str	r2, [r3, #0]
 80093de:	605a      	str	r2, [r3, #4]
 80093e0:	609a      	str	r2, [r3, #8]
 80093e2:	4620      	mov	r0, r4
 80093e4:	bd10      	pop	{r4, pc}
 80093e6:	2300      	movs	r3, #0
 80093e8:	2a1b      	cmp	r2, #27
 80093ea:	6003      	str	r3, [r0, #0]
 80093ec:	6043      	str	r3, [r0, #4]
 80093ee:	d90f      	bls.n	8009410 <_calloc_r+0x58>
 80093f0:	2a24      	cmp	r2, #36	; 0x24
 80093f2:	6083      	str	r3, [r0, #8]
 80093f4:	60c3      	str	r3, [r0, #12]
 80093f6:	bf05      	ittet	eq
 80093f8:	6103      	streq	r3, [r0, #16]
 80093fa:	6143      	streq	r3, [r0, #20]
 80093fc:	f100 0310 	addne.w	r3, r0, #16
 8009400:	f100 0318 	addeq.w	r3, r0, #24
 8009404:	e7e9      	b.n	80093da <_calloc_r+0x22>
 8009406:	2100      	movs	r1, #0
 8009408:	f7fa fb9a 	bl	8003b40 <memset>
 800940c:	4620      	mov	r0, r4
 800940e:	bd10      	pop	{r4, pc}
 8009410:	f100 0308 	add.w	r3, r0, #8
 8009414:	e7e1      	b.n	80093da <_calloc_r+0x22>
 8009416:	bf00      	nop

08009418 <_close_r>:
 8009418:	b538      	push	{r3, r4, r5, lr}
 800941a:	4c07      	ldr	r4, [pc, #28]	; (8009438 <_close_r+0x20>)
 800941c:	2300      	movs	r3, #0
 800941e:	4605      	mov	r5, r0
 8009420:	4608      	mov	r0, r1
 8009422:	6023      	str	r3, [r4, #0]
 8009424:	f7f7 fdc6 	bl	8000fb4 <_close>
 8009428:	1c43      	adds	r3, r0, #1
 800942a:	d000      	beq.n	800942e <_close_r+0x16>
 800942c:	bd38      	pop	{r3, r4, r5, pc}
 800942e:	6823      	ldr	r3, [r4, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d0fb      	beq.n	800942c <_close_r+0x14>
 8009434:	602b      	str	r3, [r5, #0]
 8009436:	bd38      	pop	{r3, r4, r5, pc}
 8009438:	20010658 	.word	0x20010658

0800943c <_fclose_r>:
 800943c:	2900      	cmp	r1, #0
 800943e:	d03d      	beq.n	80094bc <_fclose_r+0x80>
 8009440:	b570      	push	{r4, r5, r6, lr}
 8009442:	4605      	mov	r5, r0
 8009444:	460c      	mov	r4, r1
 8009446:	b108      	cbz	r0, 800944c <_fclose_r+0x10>
 8009448:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800944a:	b37b      	cbz	r3, 80094ac <_fclose_r+0x70>
 800944c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009450:	b90b      	cbnz	r3, 8009456 <_fclose_r+0x1a>
 8009452:	2000      	movs	r0, #0
 8009454:	bd70      	pop	{r4, r5, r6, pc}
 8009456:	4628      	mov	r0, r5
 8009458:	4621      	mov	r1, r4
 800945a:	f7fc ff6b 	bl	8006334 <__sflush_r>
 800945e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009460:	4606      	mov	r6, r0
 8009462:	b133      	cbz	r3, 8009472 <_fclose_r+0x36>
 8009464:	4628      	mov	r0, r5
 8009466:	69e1      	ldr	r1, [r4, #28]
 8009468:	4798      	blx	r3
 800946a:	2800      	cmp	r0, #0
 800946c:	bfb8      	it	lt
 800946e:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8009472:	89a3      	ldrh	r3, [r4, #12]
 8009474:	061b      	lsls	r3, r3, #24
 8009476:	d41c      	bmi.n	80094b2 <_fclose_r+0x76>
 8009478:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800947a:	b141      	cbz	r1, 800948e <_fclose_r+0x52>
 800947c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009480:	4299      	cmp	r1, r3
 8009482:	d002      	beq.n	800948a <_fclose_r+0x4e>
 8009484:	4628      	mov	r0, r5
 8009486:	f7fd f995 	bl	80067b4 <_free_r>
 800948a:	2300      	movs	r3, #0
 800948c:	6323      	str	r3, [r4, #48]	; 0x30
 800948e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009490:	b121      	cbz	r1, 800949c <_fclose_r+0x60>
 8009492:	4628      	mov	r0, r5
 8009494:	f7fd f98e 	bl	80067b4 <_free_r>
 8009498:	2300      	movs	r3, #0
 800949a:	6463      	str	r3, [r4, #68]	; 0x44
 800949c:	f7fd f90a 	bl	80066b4 <__sfp_lock_acquire>
 80094a0:	2300      	movs	r3, #0
 80094a2:	81a3      	strh	r3, [r4, #12]
 80094a4:	f7fd f908 	bl	80066b8 <__sfp_lock_release>
 80094a8:	4630      	mov	r0, r6
 80094aa:	bd70      	pop	{r4, r5, r6, pc}
 80094ac:	f7fd f8fc 	bl	80066a8 <__sinit>
 80094b0:	e7cc      	b.n	800944c <_fclose_r+0x10>
 80094b2:	4628      	mov	r0, r5
 80094b4:	6921      	ldr	r1, [r4, #16]
 80094b6:	f7fd f97d 	bl	80067b4 <_free_r>
 80094ba:	e7dd      	b.n	8009478 <_fclose_r+0x3c>
 80094bc:	2000      	movs	r0, #0
 80094be:	4770      	bx	lr

080094c0 <fclose>:
 80094c0:	4b02      	ldr	r3, [pc, #8]	; (80094cc <fclose+0xc>)
 80094c2:	4601      	mov	r1, r0
 80094c4:	6818      	ldr	r0, [r3, #0]
 80094c6:	f7ff bfb9 	b.w	800943c <_fclose_r>
 80094ca:	bf00      	nop
 80094cc:	200004a8 	.word	0x200004a8

080094d0 <__fputwc>:
 80094d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d4:	b082      	sub	sp, #8
 80094d6:	4607      	mov	r7, r0
 80094d8:	460e      	mov	r6, r1
 80094da:	4614      	mov	r4, r2
 80094dc:	f7fd fc44 	bl	8006d68 <__locale_mb_cur_max>
 80094e0:	2801      	cmp	r0, #1
 80094e2:	d041      	beq.n	8009568 <__fputwc+0x98>
 80094e4:	4638      	mov	r0, r7
 80094e6:	a901      	add	r1, sp, #4
 80094e8:	4632      	mov	r2, r6
 80094ea:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80094ee:	f000 f969 	bl	80097c4 <_wcrtomb_r>
 80094f2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80094f6:	4680      	mov	r8, r0
 80094f8:	d02f      	beq.n	800955a <__fputwc+0x8a>
 80094fa:	2800      	cmp	r0, #0
 80094fc:	d03c      	beq.n	8009578 <__fputwc+0xa8>
 80094fe:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8009502:	2500      	movs	r5, #0
 8009504:	e009      	b.n	800951a <__fputwc+0x4a>
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	7019      	strb	r1, [r3, #0]
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	3301      	adds	r3, #1
 800950e:	6023      	str	r3, [r4, #0]
 8009510:	3501      	adds	r5, #1
 8009512:	45a8      	cmp	r8, r5
 8009514:	d930      	bls.n	8009578 <__fputwc+0xa8>
 8009516:	ab01      	add	r3, sp, #4
 8009518:	5d59      	ldrb	r1, [r3, r5]
 800951a:	68a3      	ldr	r3, [r4, #8]
 800951c:	3b01      	subs	r3, #1
 800951e:	2b00      	cmp	r3, #0
 8009520:	60a3      	str	r3, [r4, #8]
 8009522:	daf0      	bge.n	8009506 <__fputwc+0x36>
 8009524:	69a2      	ldr	r2, [r4, #24]
 8009526:	4293      	cmp	r3, r2
 8009528:	db07      	blt.n	800953a <__fputwc+0x6a>
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	7019      	strb	r1, [r3, #0]
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	7819      	ldrb	r1, [r3, #0]
 8009532:	290a      	cmp	r1, #10
 8009534:	f103 0301 	add.w	r3, r3, #1
 8009538:	d1e9      	bne.n	800950e <__fputwc+0x3e>
 800953a:	4638      	mov	r0, r7
 800953c:	4622      	mov	r2, r4
 800953e:	f000 f8e5 	bl	800970c <__swbuf_r>
 8009542:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8009546:	fab0 f080 	clz	r0, r0
 800954a:	0940      	lsrs	r0, r0, #5
 800954c:	2800      	cmp	r0, #0
 800954e:	d0df      	beq.n	8009510 <__fputwc+0x40>
 8009550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009554:	b002      	add	sp, #8
 8009556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800955a:	89a3      	ldrh	r3, [r4, #12]
 800955c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009560:	81a3      	strh	r3, [r4, #12]
 8009562:	b002      	add	sp, #8
 8009564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009568:	1e73      	subs	r3, r6, #1
 800956a:	2bfe      	cmp	r3, #254	; 0xfe
 800956c:	d8ba      	bhi.n	80094e4 <__fputwc+0x14>
 800956e:	b2f1      	uxtb	r1, r6
 8009570:	4680      	mov	r8, r0
 8009572:	f88d 1004 	strb.w	r1, [sp, #4]
 8009576:	e7c4      	b.n	8009502 <__fputwc+0x32>
 8009578:	4630      	mov	r0, r6
 800957a:	b002      	add	sp, #8
 800957c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009580 <_fputwc_r>:
 8009580:	8993      	ldrh	r3, [r2, #12]
 8009582:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009586:	d10b      	bne.n	80095a0 <_fputwc_r+0x20>
 8009588:	b410      	push	{r4}
 800958a:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800958c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009590:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8009594:	6654      	str	r4, [r2, #100]	; 0x64
 8009596:	8193      	strh	r3, [r2, #12]
 8009598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800959c:	f7ff bf98 	b.w	80094d0 <__fputwc>
 80095a0:	f7ff bf96 	b.w	80094d0 <__fputwc>

080095a4 <fputwc>:
 80095a4:	4b08      	ldr	r3, [pc, #32]	; (80095c8 <fputwc+0x24>)
 80095a6:	b570      	push	{r4, r5, r6, lr}
 80095a8:	681c      	ldr	r4, [r3, #0]
 80095aa:	4606      	mov	r6, r0
 80095ac:	460d      	mov	r5, r1
 80095ae:	b124      	cbz	r4, 80095ba <fputwc+0x16>
 80095b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80095b2:	b913      	cbnz	r3, 80095ba <fputwc+0x16>
 80095b4:	4620      	mov	r0, r4
 80095b6:	f7fd f877 	bl	80066a8 <__sinit>
 80095ba:	4620      	mov	r0, r4
 80095bc:	4631      	mov	r1, r6
 80095be:	462a      	mov	r2, r5
 80095c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80095c4:	f7ff bfdc 	b.w	8009580 <_fputwc_r>
 80095c8:	200004a8 	.word	0x200004a8

080095cc <_fstat_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4c08      	ldr	r4, [pc, #32]	; (80095f0 <_fstat_r+0x24>)
 80095d0:	2300      	movs	r3, #0
 80095d2:	4605      	mov	r5, r0
 80095d4:	4608      	mov	r0, r1
 80095d6:	4611      	mov	r1, r2
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	f7f7 fcef 	bl	8000fbc <_fstat>
 80095de:	1c43      	adds	r3, r0, #1
 80095e0:	d000      	beq.n	80095e4 <_fstat_r+0x18>
 80095e2:	bd38      	pop	{r3, r4, r5, pc}
 80095e4:	6823      	ldr	r3, [r4, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d0fb      	beq.n	80095e2 <_fstat_r+0x16>
 80095ea:	602b      	str	r3, [r5, #0]
 80095ec:	bd38      	pop	{r3, r4, r5, pc}
 80095ee:	bf00      	nop
 80095f0:	20010658 	.word	0x20010658

080095f4 <_isatty_r>:
 80095f4:	b538      	push	{r3, r4, r5, lr}
 80095f6:	4c07      	ldr	r4, [pc, #28]	; (8009614 <_isatty_r+0x20>)
 80095f8:	2300      	movs	r3, #0
 80095fa:	4605      	mov	r5, r0
 80095fc:	4608      	mov	r0, r1
 80095fe:	6023      	str	r3, [r4, #0]
 8009600:	f7f7 fce2 	bl	8000fc8 <_isatty>
 8009604:	1c43      	adds	r3, r0, #1
 8009606:	d000      	beq.n	800960a <_isatty_r+0x16>
 8009608:	bd38      	pop	{r3, r4, r5, pc}
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d0fb      	beq.n	8009608 <_isatty_r+0x14>
 8009610:	602b      	str	r3, [r5, #0]
 8009612:	bd38      	pop	{r3, r4, r5, pc}
 8009614:	20010658 	.word	0x20010658

08009618 <_lseek_r>:
 8009618:	b570      	push	{r4, r5, r6, lr}
 800961a:	4c08      	ldr	r4, [pc, #32]	; (800963c <_lseek_r+0x24>)
 800961c:	4606      	mov	r6, r0
 800961e:	2500      	movs	r5, #0
 8009620:	4608      	mov	r0, r1
 8009622:	4611      	mov	r1, r2
 8009624:	461a      	mov	r2, r3
 8009626:	6025      	str	r5, [r4, #0]
 8009628:	f7f7 fcd0 	bl	8000fcc <_lseek>
 800962c:	1c43      	adds	r3, r0, #1
 800962e:	d000      	beq.n	8009632 <_lseek_r+0x1a>
 8009630:	bd70      	pop	{r4, r5, r6, pc}
 8009632:	6823      	ldr	r3, [r4, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d0fb      	beq.n	8009630 <_lseek_r+0x18>
 8009638:	6033      	str	r3, [r6, #0]
 800963a:	bd70      	pop	{r4, r5, r6, pc}
 800963c:	20010658 	.word	0x20010658

08009640 <_read_r>:
 8009640:	b570      	push	{r4, r5, r6, lr}
 8009642:	4c08      	ldr	r4, [pc, #32]	; (8009664 <_read_r+0x24>)
 8009644:	4606      	mov	r6, r0
 8009646:	2500      	movs	r5, #0
 8009648:	4608      	mov	r0, r1
 800964a:	4611      	mov	r1, r2
 800964c:	461a      	mov	r2, r3
 800964e:	6025      	str	r5, [r4, #0]
 8009650:	f7f7 fcbe 	bl	8000fd0 <_read>
 8009654:	1c43      	adds	r3, r0, #1
 8009656:	d000      	beq.n	800965a <_read_r+0x1a>
 8009658:	bd70      	pop	{r4, r5, r6, pc}
 800965a:	6823      	ldr	r3, [r4, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d0fb      	beq.n	8009658 <_read_r+0x18>
 8009660:	6033      	str	r3, [r6, #0]
 8009662:	bd70      	pop	{r4, r5, r6, pc}
 8009664:	20010658 	.word	0x20010658

08009668 <cleanup_glue>:
 8009668:	b538      	push	{r3, r4, r5, lr}
 800966a:	460c      	mov	r4, r1
 800966c:	6809      	ldr	r1, [r1, #0]
 800966e:	4605      	mov	r5, r0
 8009670:	b109      	cbz	r1, 8009676 <cleanup_glue+0xe>
 8009672:	f7ff fff9 	bl	8009668 <cleanup_glue>
 8009676:	4628      	mov	r0, r5
 8009678:	4621      	mov	r1, r4
 800967a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800967e:	f7fd b899 	b.w	80067b4 <_free_r>
 8009682:	bf00      	nop

08009684 <_reclaim_reent>:
 8009684:	4b20      	ldr	r3, [pc, #128]	; (8009708 <_reclaim_reent+0x84>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4298      	cmp	r0, r3
 800968a:	d03c      	beq.n	8009706 <_reclaim_reent+0x82>
 800968c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800968e:	b570      	push	{r4, r5, r6, lr}
 8009690:	4605      	mov	r5, r0
 8009692:	b18b      	cbz	r3, 80096b8 <_reclaim_reent+0x34>
 8009694:	2600      	movs	r6, #0
 8009696:	5999      	ldr	r1, [r3, r6]
 8009698:	b139      	cbz	r1, 80096aa <_reclaim_reent+0x26>
 800969a:	680c      	ldr	r4, [r1, #0]
 800969c:	4628      	mov	r0, r5
 800969e:	f7fd f889 	bl	80067b4 <_free_r>
 80096a2:	4621      	mov	r1, r4
 80096a4:	2c00      	cmp	r4, #0
 80096a6:	d1f8      	bne.n	800969a <_reclaim_reent+0x16>
 80096a8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80096aa:	3604      	adds	r6, #4
 80096ac:	2e80      	cmp	r6, #128	; 0x80
 80096ae:	d1f2      	bne.n	8009696 <_reclaim_reent+0x12>
 80096b0:	4619      	mov	r1, r3
 80096b2:	4628      	mov	r0, r5
 80096b4:	f7fd f87e 	bl	80067b4 <_free_r>
 80096b8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80096ba:	b111      	cbz	r1, 80096c2 <_reclaim_reent+0x3e>
 80096bc:	4628      	mov	r0, r5
 80096be:	f7fd f879 	bl	80067b4 <_free_r>
 80096c2:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 80096c6:	b151      	cbz	r1, 80096de <_reclaim_reent+0x5a>
 80096c8:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 80096cc:	42b1      	cmp	r1, r6
 80096ce:	d006      	beq.n	80096de <_reclaim_reent+0x5a>
 80096d0:	680c      	ldr	r4, [r1, #0]
 80096d2:	4628      	mov	r0, r5
 80096d4:	f7fd f86e 	bl	80067b4 <_free_r>
 80096d8:	42a6      	cmp	r6, r4
 80096da:	4621      	mov	r1, r4
 80096dc:	d1f8      	bne.n	80096d0 <_reclaim_reent+0x4c>
 80096de:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80096e0:	b111      	cbz	r1, 80096e8 <_reclaim_reent+0x64>
 80096e2:	4628      	mov	r0, r5
 80096e4:	f7fd f866 	bl	80067b4 <_free_r>
 80096e8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80096ea:	b903      	cbnz	r3, 80096ee <_reclaim_reent+0x6a>
 80096ec:	bd70      	pop	{r4, r5, r6, pc}
 80096ee:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80096f0:	4628      	mov	r0, r5
 80096f2:	4798      	blx	r3
 80096f4:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 80096f8:	2900      	cmp	r1, #0
 80096fa:	d0f7      	beq.n	80096ec <_reclaim_reent+0x68>
 80096fc:	4628      	mov	r0, r5
 80096fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009702:	f7ff bfb1 	b.w	8009668 <cleanup_glue>
 8009706:	4770      	bx	lr
 8009708:	200004a8 	.word	0x200004a8

0800970c <__swbuf_r>:
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	460d      	mov	r5, r1
 8009710:	4614      	mov	r4, r2
 8009712:	4606      	mov	r6, r0
 8009714:	b110      	cbz	r0, 800971c <__swbuf_r+0x10>
 8009716:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009718:	2b00      	cmp	r3, #0
 800971a:	d048      	beq.n	80097ae <__swbuf_r+0xa2>
 800971c:	89a2      	ldrh	r2, [r4, #12]
 800971e:	69a3      	ldr	r3, [r4, #24]
 8009720:	60a3      	str	r3, [r4, #8]
 8009722:	b291      	uxth	r1, r2
 8009724:	0708      	lsls	r0, r1, #28
 8009726:	d538      	bpl.n	800979a <__swbuf_r+0x8e>
 8009728:	6923      	ldr	r3, [r4, #16]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d035      	beq.n	800979a <__swbuf_r+0x8e>
 800972e:	0489      	lsls	r1, r1, #18
 8009730:	b2ed      	uxtb	r5, r5
 8009732:	d515      	bpl.n	8009760 <__swbuf_r+0x54>
 8009734:	6822      	ldr	r2, [r4, #0]
 8009736:	6961      	ldr	r1, [r4, #20]
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	428b      	cmp	r3, r1
 800973c:	da1c      	bge.n	8009778 <__swbuf_r+0x6c>
 800973e:	3301      	adds	r3, #1
 8009740:	68a1      	ldr	r1, [r4, #8]
 8009742:	1c50      	adds	r0, r2, #1
 8009744:	3901      	subs	r1, #1
 8009746:	60a1      	str	r1, [r4, #8]
 8009748:	6020      	str	r0, [r4, #0]
 800974a:	7015      	strb	r5, [r2, #0]
 800974c:	6962      	ldr	r2, [r4, #20]
 800974e:	429a      	cmp	r2, r3
 8009750:	d01a      	beq.n	8009788 <__swbuf_r+0x7c>
 8009752:	89a3      	ldrh	r3, [r4, #12]
 8009754:	07db      	lsls	r3, r3, #31
 8009756:	d501      	bpl.n	800975c <__swbuf_r+0x50>
 8009758:	2d0a      	cmp	r5, #10
 800975a:	d015      	beq.n	8009788 <__swbuf_r+0x7c>
 800975c:	4628      	mov	r0, r5
 800975e:	bd70      	pop	{r4, r5, r6, pc}
 8009760:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009762:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009766:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800976a:	81a2      	strh	r2, [r4, #12]
 800976c:	6822      	ldr	r2, [r4, #0]
 800976e:	6661      	str	r1, [r4, #100]	; 0x64
 8009770:	6961      	ldr	r1, [r4, #20]
 8009772:	1ad3      	subs	r3, r2, r3
 8009774:	428b      	cmp	r3, r1
 8009776:	dbe2      	blt.n	800973e <__swbuf_r+0x32>
 8009778:	4630      	mov	r0, r6
 800977a:	4621      	mov	r1, r4
 800977c:	f7fc fe84 	bl	8006488 <_fflush_r>
 8009780:	b940      	cbnz	r0, 8009794 <__swbuf_r+0x88>
 8009782:	6822      	ldr	r2, [r4, #0]
 8009784:	2301      	movs	r3, #1
 8009786:	e7db      	b.n	8009740 <__swbuf_r+0x34>
 8009788:	4630      	mov	r0, r6
 800978a:	4621      	mov	r1, r4
 800978c:	f7fc fe7c 	bl	8006488 <_fflush_r>
 8009790:	2800      	cmp	r0, #0
 8009792:	d0e3      	beq.n	800975c <__swbuf_r+0x50>
 8009794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009798:	bd70      	pop	{r4, r5, r6, pc}
 800979a:	4630      	mov	r0, r6
 800979c:	4621      	mov	r1, r4
 800979e:	f7fb fd05 	bl	80051ac <__swsetup_r>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d1f6      	bne.n	8009794 <__swbuf_r+0x88>
 80097a6:	89a2      	ldrh	r2, [r4, #12]
 80097a8:	6923      	ldr	r3, [r4, #16]
 80097aa:	b291      	uxth	r1, r2
 80097ac:	e7bf      	b.n	800972e <__swbuf_r+0x22>
 80097ae:	f7fc ff7b 	bl	80066a8 <__sinit>
 80097b2:	e7b3      	b.n	800971c <__swbuf_r+0x10>

080097b4 <__swbuf>:
 80097b4:	4b02      	ldr	r3, [pc, #8]	; (80097c0 <__swbuf+0xc>)
 80097b6:	460a      	mov	r2, r1
 80097b8:	4601      	mov	r1, r0
 80097ba:	6818      	ldr	r0, [r3, #0]
 80097bc:	f7ff bfa6 	b.w	800970c <__swbuf_r>
 80097c0:	200004a8 	.word	0x200004a8

080097c4 <_wcrtomb_r>:
 80097c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c8:	4605      	mov	r5, r0
 80097ca:	b086      	sub	sp, #24
 80097cc:	461e      	mov	r6, r3
 80097ce:	460c      	mov	r4, r1
 80097d0:	b1a1      	cbz	r1, 80097fc <_wcrtomb_r+0x38>
 80097d2:	4b10      	ldr	r3, [pc, #64]	; (8009814 <_wcrtomb_r+0x50>)
 80097d4:	4617      	mov	r7, r2
 80097d6:	f8d3 8000 	ldr.w	r8, [r3]
 80097da:	f7fd fac1 	bl	8006d60 <__locale_charset>
 80097de:	9600      	str	r6, [sp, #0]
 80097e0:	4603      	mov	r3, r0
 80097e2:	4621      	mov	r1, r4
 80097e4:	463a      	mov	r2, r7
 80097e6:	4628      	mov	r0, r5
 80097e8:	47c0      	blx	r8
 80097ea:	1c43      	adds	r3, r0, #1
 80097ec:	d103      	bne.n	80097f6 <_wcrtomb_r+0x32>
 80097ee:	2200      	movs	r2, #0
 80097f0:	238a      	movs	r3, #138	; 0x8a
 80097f2:	6032      	str	r2, [r6, #0]
 80097f4:	602b      	str	r3, [r5, #0]
 80097f6:	b006      	add	sp, #24
 80097f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097fc:	4b05      	ldr	r3, [pc, #20]	; (8009814 <_wcrtomb_r+0x50>)
 80097fe:	681f      	ldr	r7, [r3, #0]
 8009800:	f7fd faae 	bl	8006d60 <__locale_charset>
 8009804:	9600      	str	r6, [sp, #0]
 8009806:	4603      	mov	r3, r0
 8009808:	4622      	mov	r2, r4
 800980a:	4628      	mov	r0, r5
 800980c:	a903      	add	r1, sp, #12
 800980e:	47b8      	blx	r7
 8009810:	e7eb      	b.n	80097ea <_wcrtomb_r+0x26>
 8009812:	bf00      	nop
 8009814:	20000938 	.word	0x20000938

08009818 <wcrtomb>:
 8009818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800981c:	4b12      	ldr	r3, [pc, #72]	; (8009868 <wcrtomb+0x50>)
 800981e:	b086      	sub	sp, #24
 8009820:	4616      	mov	r6, r2
 8009822:	681d      	ldr	r5, [r3, #0]
 8009824:	4604      	mov	r4, r0
 8009826:	b1a0      	cbz	r0, 8009852 <wcrtomb+0x3a>
 8009828:	4b10      	ldr	r3, [pc, #64]	; (800986c <wcrtomb+0x54>)
 800982a:	460f      	mov	r7, r1
 800982c:	f8d3 8000 	ldr.w	r8, [r3]
 8009830:	f7fd fa96 	bl	8006d60 <__locale_charset>
 8009834:	9600      	str	r6, [sp, #0]
 8009836:	4603      	mov	r3, r0
 8009838:	4621      	mov	r1, r4
 800983a:	463a      	mov	r2, r7
 800983c:	4628      	mov	r0, r5
 800983e:	47c0      	blx	r8
 8009840:	1c43      	adds	r3, r0, #1
 8009842:	d103      	bne.n	800984c <wcrtomb+0x34>
 8009844:	2200      	movs	r2, #0
 8009846:	238a      	movs	r3, #138	; 0x8a
 8009848:	6032      	str	r2, [r6, #0]
 800984a:	602b      	str	r3, [r5, #0]
 800984c:	b006      	add	sp, #24
 800984e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009852:	4b06      	ldr	r3, [pc, #24]	; (800986c <wcrtomb+0x54>)
 8009854:	681f      	ldr	r7, [r3, #0]
 8009856:	f7fd fa83 	bl	8006d60 <__locale_charset>
 800985a:	9600      	str	r6, [sp, #0]
 800985c:	4603      	mov	r3, r0
 800985e:	4622      	mov	r2, r4
 8009860:	4628      	mov	r0, r5
 8009862:	a903      	add	r1, sp, #12
 8009864:	47b8      	blx	r7
 8009866:	e7eb      	b.n	8009840 <wcrtomb+0x28>
 8009868:	200004a8 	.word	0x200004a8
 800986c:	20000938 	.word	0x20000938

08009870 <__ascii_wctomb>:
 8009870:	b121      	cbz	r1, 800987c <__ascii_wctomb+0xc>
 8009872:	2aff      	cmp	r2, #255	; 0xff
 8009874:	d804      	bhi.n	8009880 <__ascii_wctomb+0x10>
 8009876:	700a      	strb	r2, [r1, #0]
 8009878:	2001      	movs	r0, #1
 800987a:	4770      	bx	lr
 800987c:	4608      	mov	r0, r1
 800987e:	4770      	bx	lr
 8009880:	238a      	movs	r3, #138	; 0x8a
 8009882:	6003      	str	r3, [r0, #0]
 8009884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop

0800988c <_wctomb_r>:
 800988c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009890:	4c09      	ldr	r4, [pc, #36]	; (80098b8 <_wctomb_r+0x2c>)
 8009892:	b082      	sub	sp, #8
 8009894:	4698      	mov	r8, r3
 8009896:	4605      	mov	r5, r0
 8009898:	460f      	mov	r7, r1
 800989a:	4616      	mov	r6, r2
 800989c:	6824      	ldr	r4, [r4, #0]
 800989e:	f7fd fa5f 	bl	8006d60 <__locale_charset>
 80098a2:	f8cd 8000 	str.w	r8, [sp]
 80098a6:	4603      	mov	r3, r0
 80098a8:	4639      	mov	r1, r7
 80098aa:	4632      	mov	r2, r6
 80098ac:	4628      	mov	r0, r5
 80098ae:	47a0      	blx	r4
 80098b0:	b002      	add	sp, #8
 80098b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098b6:	bf00      	nop
 80098b8:	20000938 	.word	0x20000938

080098bc <__aeabi_drsub>:
 80098bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80098c0:	e002      	b.n	80098c8 <__adddf3>
 80098c2:	bf00      	nop

080098c4 <__aeabi_dsub>:
 80098c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080098c8 <__adddf3>:
 80098c8:	b530      	push	{r4, r5, lr}
 80098ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80098ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80098d2:	ea94 0f05 	teq	r4, r5
 80098d6:	bf08      	it	eq
 80098d8:	ea90 0f02 	teqeq	r0, r2
 80098dc:	bf1f      	itttt	ne
 80098de:	ea54 0c00 	orrsne.w	ip, r4, r0
 80098e2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80098e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80098ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80098ee:	f000 80e2 	beq.w	8009ab6 <__adddf3+0x1ee>
 80098f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80098f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80098fa:	bfb8      	it	lt
 80098fc:	426d      	neglt	r5, r5
 80098fe:	dd0c      	ble.n	800991a <__adddf3+0x52>
 8009900:	442c      	add	r4, r5
 8009902:	ea80 0202 	eor.w	r2, r0, r2
 8009906:	ea81 0303 	eor.w	r3, r1, r3
 800990a:	ea82 0000 	eor.w	r0, r2, r0
 800990e:	ea83 0101 	eor.w	r1, r3, r1
 8009912:	ea80 0202 	eor.w	r2, r0, r2
 8009916:	ea81 0303 	eor.w	r3, r1, r3
 800991a:	2d36      	cmp	r5, #54	; 0x36
 800991c:	bf88      	it	hi
 800991e:	bd30      	pophi	{r4, r5, pc}
 8009920:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8009924:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8009928:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800992c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8009930:	d002      	beq.n	8009938 <__adddf3+0x70>
 8009932:	4240      	negs	r0, r0
 8009934:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8009938:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800993c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8009940:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8009944:	d002      	beq.n	800994c <__adddf3+0x84>
 8009946:	4252      	negs	r2, r2
 8009948:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800994c:	ea94 0f05 	teq	r4, r5
 8009950:	f000 80a7 	beq.w	8009aa2 <__adddf3+0x1da>
 8009954:	f1a4 0401 	sub.w	r4, r4, #1
 8009958:	f1d5 0e20 	rsbs	lr, r5, #32
 800995c:	db0d      	blt.n	800997a <__adddf3+0xb2>
 800995e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8009962:	fa22 f205 	lsr.w	r2, r2, r5
 8009966:	1880      	adds	r0, r0, r2
 8009968:	f141 0100 	adc.w	r1, r1, #0
 800996c:	fa03 f20e 	lsl.w	r2, r3, lr
 8009970:	1880      	adds	r0, r0, r2
 8009972:	fa43 f305 	asr.w	r3, r3, r5
 8009976:	4159      	adcs	r1, r3
 8009978:	e00e      	b.n	8009998 <__adddf3+0xd0>
 800997a:	f1a5 0520 	sub.w	r5, r5, #32
 800997e:	f10e 0e20 	add.w	lr, lr, #32
 8009982:	2a01      	cmp	r2, #1
 8009984:	fa03 fc0e 	lsl.w	ip, r3, lr
 8009988:	bf28      	it	cs
 800998a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800998e:	fa43 f305 	asr.w	r3, r3, r5
 8009992:	18c0      	adds	r0, r0, r3
 8009994:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8009998:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800999c:	d507      	bpl.n	80099ae <__adddf3+0xe6>
 800999e:	f04f 0e00 	mov.w	lr, #0
 80099a2:	f1dc 0c00 	rsbs	ip, ip, #0
 80099a6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80099aa:	eb6e 0101 	sbc.w	r1, lr, r1
 80099ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80099b2:	d31b      	bcc.n	80099ec <__adddf3+0x124>
 80099b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80099b8:	d30c      	bcc.n	80099d4 <__adddf3+0x10c>
 80099ba:	0849      	lsrs	r1, r1, #1
 80099bc:	ea5f 0030 	movs.w	r0, r0, rrx
 80099c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80099c4:	f104 0401 	add.w	r4, r4, #1
 80099c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80099cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80099d0:	f080 809a 	bcs.w	8009b08 <__adddf3+0x240>
 80099d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80099d8:	bf08      	it	eq
 80099da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80099de:	f150 0000 	adcs.w	r0, r0, #0
 80099e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80099e6:	ea41 0105 	orr.w	r1, r1, r5
 80099ea:	bd30      	pop	{r4, r5, pc}
 80099ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80099f0:	4140      	adcs	r0, r0
 80099f2:	eb41 0101 	adc.w	r1, r1, r1
 80099f6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80099fa:	f1a4 0401 	sub.w	r4, r4, #1
 80099fe:	d1e9      	bne.n	80099d4 <__adddf3+0x10c>
 8009a00:	f091 0f00 	teq	r1, #0
 8009a04:	bf04      	itt	eq
 8009a06:	4601      	moveq	r1, r0
 8009a08:	2000      	moveq	r0, #0
 8009a0a:	fab1 f381 	clz	r3, r1
 8009a0e:	bf08      	it	eq
 8009a10:	3320      	addeq	r3, #32
 8009a12:	f1a3 030b 	sub.w	r3, r3, #11
 8009a16:	f1b3 0220 	subs.w	r2, r3, #32
 8009a1a:	da0c      	bge.n	8009a36 <__adddf3+0x16e>
 8009a1c:	320c      	adds	r2, #12
 8009a1e:	dd08      	ble.n	8009a32 <__adddf3+0x16a>
 8009a20:	f102 0c14 	add.w	ip, r2, #20
 8009a24:	f1c2 020c 	rsb	r2, r2, #12
 8009a28:	fa01 f00c 	lsl.w	r0, r1, ip
 8009a2c:	fa21 f102 	lsr.w	r1, r1, r2
 8009a30:	e00c      	b.n	8009a4c <__adddf3+0x184>
 8009a32:	f102 0214 	add.w	r2, r2, #20
 8009a36:	bfd8      	it	le
 8009a38:	f1c2 0c20 	rsble	ip, r2, #32
 8009a3c:	fa01 f102 	lsl.w	r1, r1, r2
 8009a40:	fa20 fc0c 	lsr.w	ip, r0, ip
 8009a44:	bfdc      	itt	le
 8009a46:	ea41 010c 	orrle.w	r1, r1, ip
 8009a4a:	4090      	lslle	r0, r2
 8009a4c:	1ae4      	subs	r4, r4, r3
 8009a4e:	bfa2      	ittt	ge
 8009a50:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8009a54:	4329      	orrge	r1, r5
 8009a56:	bd30      	popge	{r4, r5, pc}
 8009a58:	ea6f 0404 	mvn.w	r4, r4
 8009a5c:	3c1f      	subs	r4, #31
 8009a5e:	da1c      	bge.n	8009a9a <__adddf3+0x1d2>
 8009a60:	340c      	adds	r4, #12
 8009a62:	dc0e      	bgt.n	8009a82 <__adddf3+0x1ba>
 8009a64:	f104 0414 	add.w	r4, r4, #20
 8009a68:	f1c4 0220 	rsb	r2, r4, #32
 8009a6c:	fa20 f004 	lsr.w	r0, r0, r4
 8009a70:	fa01 f302 	lsl.w	r3, r1, r2
 8009a74:	ea40 0003 	orr.w	r0, r0, r3
 8009a78:	fa21 f304 	lsr.w	r3, r1, r4
 8009a7c:	ea45 0103 	orr.w	r1, r5, r3
 8009a80:	bd30      	pop	{r4, r5, pc}
 8009a82:	f1c4 040c 	rsb	r4, r4, #12
 8009a86:	f1c4 0220 	rsb	r2, r4, #32
 8009a8a:	fa20 f002 	lsr.w	r0, r0, r2
 8009a8e:	fa01 f304 	lsl.w	r3, r1, r4
 8009a92:	ea40 0003 	orr.w	r0, r0, r3
 8009a96:	4629      	mov	r1, r5
 8009a98:	bd30      	pop	{r4, r5, pc}
 8009a9a:	fa21 f004 	lsr.w	r0, r1, r4
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	bd30      	pop	{r4, r5, pc}
 8009aa2:	f094 0f00 	teq	r4, #0
 8009aa6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8009aaa:	bf06      	itte	eq
 8009aac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8009ab0:	3401      	addeq	r4, #1
 8009ab2:	3d01      	subne	r5, #1
 8009ab4:	e74e      	b.n	8009954 <__adddf3+0x8c>
 8009ab6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8009aba:	bf18      	it	ne
 8009abc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8009ac0:	d029      	beq.n	8009b16 <__adddf3+0x24e>
 8009ac2:	ea94 0f05 	teq	r4, r5
 8009ac6:	bf08      	it	eq
 8009ac8:	ea90 0f02 	teqeq	r0, r2
 8009acc:	d005      	beq.n	8009ada <__adddf3+0x212>
 8009ace:	ea54 0c00 	orrs.w	ip, r4, r0
 8009ad2:	bf04      	itt	eq
 8009ad4:	4619      	moveq	r1, r3
 8009ad6:	4610      	moveq	r0, r2
 8009ad8:	bd30      	pop	{r4, r5, pc}
 8009ada:	ea91 0f03 	teq	r1, r3
 8009ade:	bf1e      	ittt	ne
 8009ae0:	2100      	movne	r1, #0
 8009ae2:	2000      	movne	r0, #0
 8009ae4:	bd30      	popne	{r4, r5, pc}
 8009ae6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8009aea:	d105      	bne.n	8009af8 <__adddf3+0x230>
 8009aec:	0040      	lsls	r0, r0, #1
 8009aee:	4149      	adcs	r1, r1
 8009af0:	bf28      	it	cs
 8009af2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8009af6:	bd30      	pop	{r4, r5, pc}
 8009af8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8009afc:	bf3c      	itt	cc
 8009afe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8009b02:	bd30      	popcc	{r4, r5, pc}
 8009b04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8009b08:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8009b0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b10:	f04f 0000 	mov.w	r0, #0
 8009b14:	bd30      	pop	{r4, r5, pc}
 8009b16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8009b1a:	bf1a      	itte	ne
 8009b1c:	4619      	movne	r1, r3
 8009b1e:	4610      	movne	r0, r2
 8009b20:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8009b24:	bf1c      	itt	ne
 8009b26:	460b      	movne	r3, r1
 8009b28:	4602      	movne	r2, r0
 8009b2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8009b2e:	bf06      	itte	eq
 8009b30:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8009b34:	ea91 0f03 	teqeq	r1, r3
 8009b38:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8009b3c:	bd30      	pop	{r4, r5, pc}
 8009b3e:	bf00      	nop

08009b40 <__aeabi_ui2d>:
 8009b40:	f090 0f00 	teq	r0, #0
 8009b44:	bf04      	itt	eq
 8009b46:	2100      	moveq	r1, #0
 8009b48:	4770      	bxeq	lr
 8009b4a:	b530      	push	{r4, r5, lr}
 8009b4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8009b50:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8009b54:	f04f 0500 	mov.w	r5, #0
 8009b58:	f04f 0100 	mov.w	r1, #0
 8009b5c:	e750      	b.n	8009a00 <__adddf3+0x138>
 8009b5e:	bf00      	nop

08009b60 <__aeabi_i2d>:
 8009b60:	f090 0f00 	teq	r0, #0
 8009b64:	bf04      	itt	eq
 8009b66:	2100      	moveq	r1, #0
 8009b68:	4770      	bxeq	lr
 8009b6a:	b530      	push	{r4, r5, lr}
 8009b6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8009b70:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8009b74:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8009b78:	bf48      	it	mi
 8009b7a:	4240      	negmi	r0, r0
 8009b7c:	f04f 0100 	mov.w	r1, #0
 8009b80:	e73e      	b.n	8009a00 <__adddf3+0x138>
 8009b82:	bf00      	nop

08009b84 <__aeabi_f2d>:
 8009b84:	0042      	lsls	r2, r0, #1
 8009b86:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8009b8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8009b8e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8009b92:	bf1f      	itttt	ne
 8009b94:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8009b98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8009b9c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8009ba0:	4770      	bxne	lr
 8009ba2:	f092 0f00 	teq	r2, #0
 8009ba6:	bf14      	ite	ne
 8009ba8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8009bac:	4770      	bxeq	lr
 8009bae:	b530      	push	{r4, r5, lr}
 8009bb0:	f44f 7460 	mov.w	r4, #896	; 0x380
 8009bb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8009bb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009bbc:	e720      	b.n	8009a00 <__adddf3+0x138>
 8009bbe:	bf00      	nop

08009bc0 <__aeabi_ul2d>:
 8009bc0:	ea50 0201 	orrs.w	r2, r0, r1
 8009bc4:	bf08      	it	eq
 8009bc6:	4770      	bxeq	lr
 8009bc8:	b530      	push	{r4, r5, lr}
 8009bca:	f04f 0500 	mov.w	r5, #0
 8009bce:	e00a      	b.n	8009be6 <__aeabi_l2d+0x16>

08009bd0 <__aeabi_l2d>:
 8009bd0:	ea50 0201 	orrs.w	r2, r0, r1
 8009bd4:	bf08      	it	eq
 8009bd6:	4770      	bxeq	lr
 8009bd8:	b530      	push	{r4, r5, lr}
 8009bda:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8009bde:	d502      	bpl.n	8009be6 <__aeabi_l2d+0x16>
 8009be0:	4240      	negs	r0, r0
 8009be2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8009be6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8009bea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8009bee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8009bf2:	f43f aedc 	beq.w	80099ae <__adddf3+0xe6>
 8009bf6:	f04f 0203 	mov.w	r2, #3
 8009bfa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009bfe:	bf18      	it	ne
 8009c00:	3203      	addne	r2, #3
 8009c02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009c06:	bf18      	it	ne
 8009c08:	3203      	addne	r2, #3
 8009c0a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8009c0e:	f1c2 0320 	rsb	r3, r2, #32
 8009c12:	fa00 fc03 	lsl.w	ip, r0, r3
 8009c16:	fa20 f002 	lsr.w	r0, r0, r2
 8009c1a:	fa01 fe03 	lsl.w	lr, r1, r3
 8009c1e:	ea40 000e 	orr.w	r0, r0, lr
 8009c22:	fa21 f102 	lsr.w	r1, r1, r2
 8009c26:	4414      	add	r4, r2
 8009c28:	e6c1      	b.n	80099ae <__adddf3+0xe6>
 8009c2a:	bf00      	nop

08009c2c <__aeabi_dmul>:
 8009c2c:	b570      	push	{r4, r5, r6, lr}
 8009c2e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8009c32:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8009c36:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8009c3a:	bf1d      	ittte	ne
 8009c3c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8009c40:	ea94 0f0c 	teqne	r4, ip
 8009c44:	ea95 0f0c 	teqne	r5, ip
 8009c48:	f000 f8de 	bleq	8009e08 <__aeabi_dmul+0x1dc>
 8009c4c:	442c      	add	r4, r5
 8009c4e:	ea81 0603 	eor.w	r6, r1, r3
 8009c52:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8009c56:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8009c5a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8009c5e:	bf18      	it	ne
 8009c60:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8009c64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009c68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c6c:	d038      	beq.n	8009ce0 <__aeabi_dmul+0xb4>
 8009c6e:	fba0 ce02 	umull	ip, lr, r0, r2
 8009c72:	f04f 0500 	mov.w	r5, #0
 8009c76:	fbe1 e502 	umlal	lr, r5, r1, r2
 8009c7a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8009c7e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8009c82:	f04f 0600 	mov.w	r6, #0
 8009c86:	fbe1 5603 	umlal	r5, r6, r1, r3
 8009c8a:	f09c 0f00 	teq	ip, #0
 8009c8e:	bf18      	it	ne
 8009c90:	f04e 0e01 	orrne.w	lr, lr, #1
 8009c94:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8009c98:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8009c9c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8009ca0:	d204      	bcs.n	8009cac <__aeabi_dmul+0x80>
 8009ca2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8009ca6:	416d      	adcs	r5, r5
 8009ca8:	eb46 0606 	adc.w	r6, r6, r6
 8009cac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8009cb0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8009cb4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8009cb8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8009cbc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8009cc0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8009cc4:	bf88      	it	hi
 8009cc6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8009cca:	d81e      	bhi.n	8009d0a <__aeabi_dmul+0xde>
 8009ccc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8009cd0:	bf08      	it	eq
 8009cd2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8009cd6:	f150 0000 	adcs.w	r0, r0, #0
 8009cda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8009cde:	bd70      	pop	{r4, r5, r6, pc}
 8009ce0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8009ce4:	ea46 0101 	orr.w	r1, r6, r1
 8009ce8:	ea40 0002 	orr.w	r0, r0, r2
 8009cec:	ea81 0103 	eor.w	r1, r1, r3
 8009cf0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8009cf4:	bfc2      	ittt	gt
 8009cf6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8009cfa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8009cfe:	bd70      	popgt	{r4, r5, r6, pc}
 8009d00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009d04:	f04f 0e00 	mov.w	lr, #0
 8009d08:	3c01      	subs	r4, #1
 8009d0a:	f300 80ab 	bgt.w	8009e64 <__aeabi_dmul+0x238>
 8009d0e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8009d12:	bfde      	ittt	le
 8009d14:	2000      	movle	r0, #0
 8009d16:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8009d1a:	bd70      	pople	{r4, r5, r6, pc}
 8009d1c:	f1c4 0400 	rsb	r4, r4, #0
 8009d20:	3c20      	subs	r4, #32
 8009d22:	da35      	bge.n	8009d90 <__aeabi_dmul+0x164>
 8009d24:	340c      	adds	r4, #12
 8009d26:	dc1b      	bgt.n	8009d60 <__aeabi_dmul+0x134>
 8009d28:	f104 0414 	add.w	r4, r4, #20
 8009d2c:	f1c4 0520 	rsb	r5, r4, #32
 8009d30:	fa00 f305 	lsl.w	r3, r0, r5
 8009d34:	fa20 f004 	lsr.w	r0, r0, r4
 8009d38:	fa01 f205 	lsl.w	r2, r1, r5
 8009d3c:	ea40 0002 	orr.w	r0, r0, r2
 8009d40:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8009d44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009d48:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8009d4c:	fa21 f604 	lsr.w	r6, r1, r4
 8009d50:	eb42 0106 	adc.w	r1, r2, r6
 8009d54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009d58:	bf08      	it	eq
 8009d5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8009d5e:	bd70      	pop	{r4, r5, r6, pc}
 8009d60:	f1c4 040c 	rsb	r4, r4, #12
 8009d64:	f1c4 0520 	rsb	r5, r4, #32
 8009d68:	fa00 f304 	lsl.w	r3, r0, r4
 8009d6c:	fa20 f005 	lsr.w	r0, r0, r5
 8009d70:	fa01 f204 	lsl.w	r2, r1, r4
 8009d74:	ea40 0002 	orr.w	r0, r0, r2
 8009d78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009d7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8009d80:	f141 0100 	adc.w	r1, r1, #0
 8009d84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009d88:	bf08      	it	eq
 8009d8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8009d8e:	bd70      	pop	{r4, r5, r6, pc}
 8009d90:	f1c4 0520 	rsb	r5, r4, #32
 8009d94:	fa00 f205 	lsl.w	r2, r0, r5
 8009d98:	ea4e 0e02 	orr.w	lr, lr, r2
 8009d9c:	fa20 f304 	lsr.w	r3, r0, r4
 8009da0:	fa01 f205 	lsl.w	r2, r1, r5
 8009da4:	ea43 0302 	orr.w	r3, r3, r2
 8009da8:	fa21 f004 	lsr.w	r0, r1, r4
 8009dac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009db0:	fa21 f204 	lsr.w	r2, r1, r4
 8009db4:	ea20 0002 	bic.w	r0, r0, r2
 8009db8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8009dbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009dc0:	bf08      	it	eq
 8009dc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8009dc6:	bd70      	pop	{r4, r5, r6, pc}
 8009dc8:	f094 0f00 	teq	r4, #0
 8009dcc:	d10f      	bne.n	8009dee <__aeabi_dmul+0x1c2>
 8009dce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8009dd2:	0040      	lsls	r0, r0, #1
 8009dd4:	eb41 0101 	adc.w	r1, r1, r1
 8009dd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009ddc:	bf08      	it	eq
 8009dde:	3c01      	subeq	r4, #1
 8009de0:	d0f7      	beq.n	8009dd2 <__aeabi_dmul+0x1a6>
 8009de2:	ea41 0106 	orr.w	r1, r1, r6
 8009de6:	f095 0f00 	teq	r5, #0
 8009dea:	bf18      	it	ne
 8009dec:	4770      	bxne	lr
 8009dee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8009df2:	0052      	lsls	r2, r2, #1
 8009df4:	eb43 0303 	adc.w	r3, r3, r3
 8009df8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8009dfc:	bf08      	it	eq
 8009dfe:	3d01      	subeq	r5, #1
 8009e00:	d0f7      	beq.n	8009df2 <__aeabi_dmul+0x1c6>
 8009e02:	ea43 0306 	orr.w	r3, r3, r6
 8009e06:	4770      	bx	lr
 8009e08:	ea94 0f0c 	teq	r4, ip
 8009e0c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8009e10:	bf18      	it	ne
 8009e12:	ea95 0f0c 	teqne	r5, ip
 8009e16:	d00c      	beq.n	8009e32 <__aeabi_dmul+0x206>
 8009e18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8009e1c:	bf18      	it	ne
 8009e1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8009e22:	d1d1      	bne.n	8009dc8 <__aeabi_dmul+0x19c>
 8009e24:	ea81 0103 	eor.w	r1, r1, r3
 8009e28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009e2c:	f04f 0000 	mov.w	r0, #0
 8009e30:	bd70      	pop	{r4, r5, r6, pc}
 8009e32:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8009e36:	bf06      	itte	eq
 8009e38:	4610      	moveq	r0, r2
 8009e3a:	4619      	moveq	r1, r3
 8009e3c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8009e40:	d019      	beq.n	8009e76 <__aeabi_dmul+0x24a>
 8009e42:	ea94 0f0c 	teq	r4, ip
 8009e46:	d102      	bne.n	8009e4e <__aeabi_dmul+0x222>
 8009e48:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8009e4c:	d113      	bne.n	8009e76 <__aeabi_dmul+0x24a>
 8009e4e:	ea95 0f0c 	teq	r5, ip
 8009e52:	d105      	bne.n	8009e60 <__aeabi_dmul+0x234>
 8009e54:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8009e58:	bf1c      	itt	ne
 8009e5a:	4610      	movne	r0, r2
 8009e5c:	4619      	movne	r1, r3
 8009e5e:	d10a      	bne.n	8009e76 <__aeabi_dmul+0x24a>
 8009e60:	ea81 0103 	eor.w	r1, r1, r3
 8009e64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009e68:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8009e6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e70:	f04f 0000 	mov.w	r0, #0
 8009e74:	bd70      	pop	{r4, r5, r6, pc}
 8009e76:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8009e7a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8009e7e:	bd70      	pop	{r4, r5, r6, pc}

08009e80 <__aeabi_ddiv>:
 8009e80:	b570      	push	{r4, r5, r6, lr}
 8009e82:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8009e86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8009e8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8009e8e:	bf1d      	ittte	ne
 8009e90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8009e94:	ea94 0f0c 	teqne	r4, ip
 8009e98:	ea95 0f0c 	teqne	r5, ip
 8009e9c:	f000 f8a7 	bleq	8009fee <__aeabi_ddiv+0x16e>
 8009ea0:	eba4 0405 	sub.w	r4, r4, r5
 8009ea4:	ea81 0e03 	eor.w	lr, r1, r3
 8009ea8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8009eac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8009eb0:	f000 8088 	beq.w	8009fc4 <__aeabi_ddiv+0x144>
 8009eb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8009eb8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8009ebc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8009ec0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8009ec4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8009ec8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8009ecc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8009ed0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8009ed4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8009ed8:	429d      	cmp	r5, r3
 8009eda:	bf08      	it	eq
 8009edc:	4296      	cmpeq	r6, r2
 8009ede:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8009ee2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8009ee6:	d202      	bcs.n	8009eee <__aeabi_ddiv+0x6e>
 8009ee8:	085b      	lsrs	r3, r3, #1
 8009eea:	ea4f 0232 	mov.w	r2, r2, rrx
 8009eee:	1ab6      	subs	r6, r6, r2
 8009ef0:	eb65 0503 	sbc.w	r5, r5, r3
 8009ef4:	085b      	lsrs	r3, r3, #1
 8009ef6:	ea4f 0232 	mov.w	r2, r2, rrx
 8009efa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009efe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8009f02:	ebb6 0e02 	subs.w	lr, r6, r2
 8009f06:	eb75 0e03 	sbcs.w	lr, r5, r3
 8009f0a:	bf22      	ittt	cs
 8009f0c:	1ab6      	subcs	r6, r6, r2
 8009f0e:	4675      	movcs	r5, lr
 8009f10:	ea40 000c 	orrcs.w	r0, r0, ip
 8009f14:	085b      	lsrs	r3, r3, #1
 8009f16:	ea4f 0232 	mov.w	r2, r2, rrx
 8009f1a:	ebb6 0e02 	subs.w	lr, r6, r2
 8009f1e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8009f22:	bf22      	ittt	cs
 8009f24:	1ab6      	subcs	r6, r6, r2
 8009f26:	4675      	movcs	r5, lr
 8009f28:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8009f2c:	085b      	lsrs	r3, r3, #1
 8009f2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8009f32:	ebb6 0e02 	subs.w	lr, r6, r2
 8009f36:	eb75 0e03 	sbcs.w	lr, r5, r3
 8009f3a:	bf22      	ittt	cs
 8009f3c:	1ab6      	subcs	r6, r6, r2
 8009f3e:	4675      	movcs	r5, lr
 8009f40:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8009f44:	085b      	lsrs	r3, r3, #1
 8009f46:	ea4f 0232 	mov.w	r2, r2, rrx
 8009f4a:	ebb6 0e02 	subs.w	lr, r6, r2
 8009f4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8009f52:	bf22      	ittt	cs
 8009f54:	1ab6      	subcs	r6, r6, r2
 8009f56:	4675      	movcs	r5, lr
 8009f58:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8009f5c:	ea55 0e06 	orrs.w	lr, r5, r6
 8009f60:	d018      	beq.n	8009f94 <__aeabi_ddiv+0x114>
 8009f62:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8009f66:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8009f6a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8009f6e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8009f72:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8009f76:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8009f7a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8009f7e:	d1c0      	bne.n	8009f02 <__aeabi_ddiv+0x82>
 8009f80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009f84:	d10b      	bne.n	8009f9e <__aeabi_ddiv+0x11e>
 8009f86:	ea41 0100 	orr.w	r1, r1, r0
 8009f8a:	f04f 0000 	mov.w	r0, #0
 8009f8e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8009f92:	e7b6      	b.n	8009f02 <__aeabi_ddiv+0x82>
 8009f94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009f98:	bf04      	itt	eq
 8009f9a:	4301      	orreq	r1, r0
 8009f9c:	2000      	moveq	r0, #0
 8009f9e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8009fa2:	bf88      	it	hi
 8009fa4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8009fa8:	f63f aeaf 	bhi.w	8009d0a <__aeabi_dmul+0xde>
 8009fac:	ebb5 0c03 	subs.w	ip, r5, r3
 8009fb0:	bf04      	itt	eq
 8009fb2:	ebb6 0c02 	subseq.w	ip, r6, r2
 8009fb6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8009fba:	f150 0000 	adcs.w	r0, r0, #0
 8009fbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8009fc2:	bd70      	pop	{r4, r5, r6, pc}
 8009fc4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8009fc8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8009fcc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8009fd0:	bfc2      	ittt	gt
 8009fd2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8009fd6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8009fda:	bd70      	popgt	{r4, r5, r6, pc}
 8009fdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009fe0:	f04f 0e00 	mov.w	lr, #0
 8009fe4:	3c01      	subs	r4, #1
 8009fe6:	e690      	b.n	8009d0a <__aeabi_dmul+0xde>
 8009fe8:	ea45 0e06 	orr.w	lr, r5, r6
 8009fec:	e68d      	b.n	8009d0a <__aeabi_dmul+0xde>
 8009fee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8009ff2:	ea94 0f0c 	teq	r4, ip
 8009ff6:	bf08      	it	eq
 8009ff8:	ea95 0f0c 	teqeq	r5, ip
 8009ffc:	f43f af3b 	beq.w	8009e76 <__aeabi_dmul+0x24a>
 800a000:	ea94 0f0c 	teq	r4, ip
 800a004:	d10a      	bne.n	800a01c <__aeabi_ddiv+0x19c>
 800a006:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800a00a:	f47f af34 	bne.w	8009e76 <__aeabi_dmul+0x24a>
 800a00e:	ea95 0f0c 	teq	r5, ip
 800a012:	f47f af25 	bne.w	8009e60 <__aeabi_dmul+0x234>
 800a016:	4610      	mov	r0, r2
 800a018:	4619      	mov	r1, r3
 800a01a:	e72c      	b.n	8009e76 <__aeabi_dmul+0x24a>
 800a01c:	ea95 0f0c 	teq	r5, ip
 800a020:	d106      	bne.n	800a030 <__aeabi_ddiv+0x1b0>
 800a022:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800a026:	f43f aefd 	beq.w	8009e24 <__aeabi_dmul+0x1f8>
 800a02a:	4610      	mov	r0, r2
 800a02c:	4619      	mov	r1, r3
 800a02e:	e722      	b.n	8009e76 <__aeabi_dmul+0x24a>
 800a030:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800a034:	bf18      	it	ne
 800a036:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800a03a:	f47f aec5 	bne.w	8009dc8 <__aeabi_dmul+0x19c>
 800a03e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800a042:	f47f af0d 	bne.w	8009e60 <__aeabi_dmul+0x234>
 800a046:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800a04a:	f47f aeeb 	bne.w	8009e24 <__aeabi_dmul+0x1f8>
 800a04e:	e712      	b.n	8009e76 <__aeabi_dmul+0x24a>

0800a050 <__gedf2>:
 800a050:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800a054:	e006      	b.n	800a064 <__cmpdf2+0x4>
 800a056:	bf00      	nop

0800a058 <__ledf2>:
 800a058:	f04f 0c01 	mov.w	ip, #1
 800a05c:	e002      	b.n	800a064 <__cmpdf2+0x4>
 800a05e:	bf00      	nop

0800a060 <__cmpdf2>:
 800a060:	f04f 0c01 	mov.w	ip, #1
 800a064:	f84d cd04 	str.w	ip, [sp, #-4]!
 800a068:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800a06c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800a070:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800a074:	bf18      	it	ne
 800a076:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800a07a:	d01b      	beq.n	800a0b4 <__cmpdf2+0x54>
 800a07c:	b001      	add	sp, #4
 800a07e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800a082:	bf0c      	ite	eq
 800a084:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800a088:	ea91 0f03 	teqne	r1, r3
 800a08c:	bf02      	ittt	eq
 800a08e:	ea90 0f02 	teqeq	r0, r2
 800a092:	2000      	moveq	r0, #0
 800a094:	4770      	bxeq	lr
 800a096:	f110 0f00 	cmn.w	r0, #0
 800a09a:	ea91 0f03 	teq	r1, r3
 800a09e:	bf58      	it	pl
 800a0a0:	4299      	cmppl	r1, r3
 800a0a2:	bf08      	it	eq
 800a0a4:	4290      	cmpeq	r0, r2
 800a0a6:	bf2c      	ite	cs
 800a0a8:	17d8      	asrcs	r0, r3, #31
 800a0aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800a0ae:	f040 0001 	orr.w	r0, r0, #1
 800a0b2:	4770      	bx	lr
 800a0b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800a0b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800a0bc:	d102      	bne.n	800a0c4 <__cmpdf2+0x64>
 800a0be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800a0c2:	d107      	bne.n	800a0d4 <__cmpdf2+0x74>
 800a0c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800a0c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800a0cc:	d1d6      	bne.n	800a07c <__cmpdf2+0x1c>
 800a0ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800a0d2:	d0d3      	beq.n	800a07c <__cmpdf2+0x1c>
 800a0d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop

0800a0dc <__aeabi_cdrcmple>:
 800a0dc:	4684      	mov	ip, r0
 800a0de:	4610      	mov	r0, r2
 800a0e0:	4662      	mov	r2, ip
 800a0e2:	468c      	mov	ip, r1
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	4663      	mov	r3, ip
 800a0e8:	e000      	b.n	800a0ec <__aeabi_cdcmpeq>
 800a0ea:	bf00      	nop

0800a0ec <__aeabi_cdcmpeq>:
 800a0ec:	b501      	push	{r0, lr}
 800a0ee:	f7ff ffb7 	bl	800a060 <__cmpdf2>
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	bf48      	it	mi
 800a0f6:	f110 0f00 	cmnmi.w	r0, #0
 800a0fa:	bd01      	pop	{r0, pc}

0800a0fc <__aeabi_dcmpeq>:
 800a0fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 800a100:	f7ff fff4 	bl	800a0ec <__aeabi_cdcmpeq>
 800a104:	bf0c      	ite	eq
 800a106:	2001      	moveq	r0, #1
 800a108:	2000      	movne	r0, #0
 800a10a:	f85d fb08 	ldr.w	pc, [sp], #8
 800a10e:	bf00      	nop

0800a110 <__aeabi_dcmplt>:
 800a110:	f84d ed08 	str.w	lr, [sp, #-8]!
 800a114:	f7ff ffea 	bl	800a0ec <__aeabi_cdcmpeq>
 800a118:	bf34      	ite	cc
 800a11a:	2001      	movcc	r0, #1
 800a11c:	2000      	movcs	r0, #0
 800a11e:	f85d fb08 	ldr.w	pc, [sp], #8
 800a122:	bf00      	nop

0800a124 <__aeabi_dcmple>:
 800a124:	f84d ed08 	str.w	lr, [sp, #-8]!
 800a128:	f7ff ffe0 	bl	800a0ec <__aeabi_cdcmpeq>
 800a12c:	bf94      	ite	ls
 800a12e:	2001      	movls	r0, #1
 800a130:	2000      	movhi	r0, #0
 800a132:	f85d fb08 	ldr.w	pc, [sp], #8
 800a136:	bf00      	nop

0800a138 <__aeabi_dcmpge>:
 800a138:	f84d ed08 	str.w	lr, [sp, #-8]!
 800a13c:	f7ff ffce 	bl	800a0dc <__aeabi_cdrcmple>
 800a140:	bf94      	ite	ls
 800a142:	2001      	movls	r0, #1
 800a144:	2000      	movhi	r0, #0
 800a146:	f85d fb08 	ldr.w	pc, [sp], #8
 800a14a:	bf00      	nop

0800a14c <__aeabi_dcmpgt>:
 800a14c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800a150:	f7ff ffc4 	bl	800a0dc <__aeabi_cdrcmple>
 800a154:	bf34      	ite	cc
 800a156:	2001      	movcc	r0, #1
 800a158:	2000      	movcs	r0, #0
 800a15a:	f85d fb08 	ldr.w	pc, [sp], #8
 800a15e:	bf00      	nop

0800a160 <__aeabi_d2iz>:
 800a160:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800a164:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800a168:	d215      	bcs.n	800a196 <__aeabi_d2iz+0x36>
 800a16a:	d511      	bpl.n	800a190 <__aeabi_d2iz+0x30>
 800a16c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800a170:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800a174:	d912      	bls.n	800a19c <__aeabi_d2iz+0x3c>
 800a176:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800a17a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a17e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800a182:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800a186:	fa23 f002 	lsr.w	r0, r3, r2
 800a18a:	bf18      	it	ne
 800a18c:	4240      	negne	r0, r0
 800a18e:	4770      	bx	lr
 800a190:	f04f 0000 	mov.w	r0, #0
 800a194:	4770      	bx	lr
 800a196:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800a19a:	d105      	bne.n	800a1a8 <__aeabi_d2iz+0x48>
 800a19c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800a1a0:	bf08      	it	eq
 800a1a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800a1a6:	4770      	bx	lr
 800a1a8:	f04f 0000 	mov.w	r0, #0
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop

0800a1b0 <__aeabi_uldivmod>:
 800a1b0:	b953      	cbnz	r3, 800a1c8 <__aeabi_uldivmod+0x18>
 800a1b2:	b94a      	cbnz	r2, 800a1c8 <__aeabi_uldivmod+0x18>
 800a1b4:	2900      	cmp	r1, #0
 800a1b6:	bf08      	it	eq
 800a1b8:	2800      	cmpeq	r0, #0
 800a1ba:	bf1c      	itt	ne
 800a1bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800a1c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800a1c4:	f000 b83c 	b.w	800a240 <__aeabi_idiv0>
 800a1c8:	b082      	sub	sp, #8
 800a1ca:	46ec      	mov	ip, sp
 800a1cc:	e92d 5000 	stmdb	sp!, {ip, lr}
 800a1d0:	f000 f81e 	bl	800a210 <__gnu_uldivmod_helper>
 800a1d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a1d8:	b002      	add	sp, #8
 800a1da:	bc0c      	pop	{r2, r3}
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop

0800a1e0 <__gnu_ldivmod_helper>:
 800a1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e4:	9c06      	ldr	r4, [sp, #24]
 800a1e6:	4615      	mov	r5, r2
 800a1e8:	4606      	mov	r6, r0
 800a1ea:	460f      	mov	r7, r1
 800a1ec:	4698      	mov	r8, r3
 800a1ee:	f000 f829 	bl	800a244 <__divdi3>
 800a1f2:	fb05 f301 	mul.w	r3, r5, r1
 800a1f6:	fb00 3808 	mla	r8, r0, r8, r3
 800a1fa:	fba5 2300 	umull	r2, r3, r5, r0
 800a1fe:	1ab2      	subs	r2, r6, r2
 800a200:	4443      	add	r3, r8
 800a202:	eb67 0303 	sbc.w	r3, r7, r3
 800a206:	e9c4 2300 	strd	r2, r3, [r4]
 800a20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a20e:	bf00      	nop

0800a210 <__gnu_uldivmod_helper>:
 800a210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a214:	9c06      	ldr	r4, [sp, #24]
 800a216:	4690      	mov	r8, r2
 800a218:	4606      	mov	r6, r0
 800a21a:	460f      	mov	r7, r1
 800a21c:	461d      	mov	r5, r3
 800a21e:	f000 f95f 	bl	800a4e0 <__udivdi3>
 800a222:	fb00 f505 	mul.w	r5, r0, r5
 800a226:	fba0 2308 	umull	r2, r3, r0, r8
 800a22a:	fb08 5501 	mla	r5, r8, r1, r5
 800a22e:	1ab2      	subs	r2, r6, r2
 800a230:	442b      	add	r3, r5
 800a232:	eb67 0303 	sbc.w	r3, r7, r3
 800a236:	e9c4 2300 	strd	r2, r3, [r4]
 800a23a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a23e:	bf00      	nop

0800a240 <__aeabi_idiv0>:
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop

0800a244 <__divdi3>:
 800a244:	2900      	cmp	r1, #0
 800a246:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a24a:	f2c0 80a6 	blt.w	800a39a <__divdi3+0x156>
 800a24e:	2600      	movs	r6, #0
 800a250:	2b00      	cmp	r3, #0
 800a252:	f2c0 809c 	blt.w	800a38e <__divdi3+0x14a>
 800a256:	4688      	mov	r8, r1
 800a258:	4694      	mov	ip, r2
 800a25a:	469e      	mov	lr, r3
 800a25c:	4615      	mov	r5, r2
 800a25e:	4604      	mov	r4, r0
 800a260:	460f      	mov	r7, r1
 800a262:	2b00      	cmp	r3, #0
 800a264:	d13d      	bne.n	800a2e2 <__divdi3+0x9e>
 800a266:	428a      	cmp	r2, r1
 800a268:	d959      	bls.n	800a31e <__divdi3+0xda>
 800a26a:	fab2 f382 	clz	r3, r2
 800a26e:	b13b      	cbz	r3, 800a280 <__divdi3+0x3c>
 800a270:	f1c3 0220 	rsb	r2, r3, #32
 800a274:	409f      	lsls	r7, r3
 800a276:	fa20 f202 	lsr.w	r2, r0, r2
 800a27a:	409d      	lsls	r5, r3
 800a27c:	4317      	orrs	r7, r2
 800a27e:	409c      	lsls	r4, r3
 800a280:	0c29      	lsrs	r1, r5, #16
 800a282:	0c22      	lsrs	r2, r4, #16
 800a284:	fbb7 fef1 	udiv	lr, r7, r1
 800a288:	b2a8      	uxth	r0, r5
 800a28a:	fb01 771e 	mls	r7, r1, lr, r7
 800a28e:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800a292:	fb00 f30e 	mul.w	r3, r0, lr
 800a296:	42bb      	cmp	r3, r7
 800a298:	d90a      	bls.n	800a2b0 <__divdi3+0x6c>
 800a29a:	197f      	adds	r7, r7, r5
 800a29c:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
 800a2a0:	f080 8105 	bcs.w	800a4ae <__divdi3+0x26a>
 800a2a4:	42bb      	cmp	r3, r7
 800a2a6:	f240 8102 	bls.w	800a4ae <__divdi3+0x26a>
 800a2aa:	f1ae 0e02 	sub.w	lr, lr, #2
 800a2ae:	442f      	add	r7, r5
 800a2b0:	1aff      	subs	r7, r7, r3
 800a2b2:	b2a4      	uxth	r4, r4
 800a2b4:	fbb7 f3f1 	udiv	r3, r7, r1
 800a2b8:	fb01 7713 	mls	r7, r1, r3, r7
 800a2bc:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800a2c0:	fb00 f003 	mul.w	r0, r0, r3
 800a2c4:	42b8      	cmp	r0, r7
 800a2c6:	d908      	bls.n	800a2da <__divdi3+0x96>
 800a2c8:	197f      	adds	r7, r7, r5
 800a2ca:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800a2ce:	f080 80f0 	bcs.w	800a4b2 <__divdi3+0x26e>
 800a2d2:	42b8      	cmp	r0, r7
 800a2d4:	f240 80ed 	bls.w	800a4b2 <__divdi3+0x26e>
 800a2d8:	3b02      	subs	r3, #2
 800a2da:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800a2de:	2200      	movs	r2, #0
 800a2e0:	e003      	b.n	800a2ea <__divdi3+0xa6>
 800a2e2:	428b      	cmp	r3, r1
 800a2e4:	d90f      	bls.n	800a306 <__divdi3+0xc2>
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	1c34      	adds	r4, r6, #0
 800a2ec:	bf18      	it	ne
 800a2ee:	2401      	movne	r4, #1
 800a2f0:	4260      	negs	r0, r4
 800a2f2:	f04f 0500 	mov.w	r5, #0
 800a2f6:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 800a2fa:	4058      	eors	r0, r3
 800a2fc:	4051      	eors	r1, r2
 800a2fe:	1900      	adds	r0, r0, r4
 800a300:	4169      	adcs	r1, r5
 800a302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a306:	fab3 f283 	clz	r2, r3
 800a30a:	2a00      	cmp	r2, #0
 800a30c:	f040 8086 	bne.w	800a41c <__divdi3+0x1d8>
 800a310:	428b      	cmp	r3, r1
 800a312:	d302      	bcc.n	800a31a <__divdi3+0xd6>
 800a314:	4584      	cmp	ip, r0
 800a316:	f200 80db 	bhi.w	800a4d0 <__divdi3+0x28c>
 800a31a:	2301      	movs	r3, #1
 800a31c:	e7e5      	b.n	800a2ea <__divdi3+0xa6>
 800a31e:	b912      	cbnz	r2, 800a326 <__divdi3+0xe2>
 800a320:	2301      	movs	r3, #1
 800a322:	fbb3 f5f2 	udiv	r5, r3, r2
 800a326:	fab5 f085 	clz	r0, r5
 800a32a:	2800      	cmp	r0, #0
 800a32c:	d13b      	bne.n	800a3a6 <__divdi3+0x162>
 800a32e:	1b78      	subs	r0, r7, r5
 800a330:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800a334:	fa1f fc85 	uxth.w	ip, r5
 800a338:	2201      	movs	r2, #1
 800a33a:	fbb0 f8fe 	udiv	r8, r0, lr
 800a33e:	0c21      	lsrs	r1, r4, #16
 800a340:	fb0e 0718 	mls	r7, lr, r8, r0
 800a344:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 800a348:	fb0c f308 	mul.w	r3, ip, r8
 800a34c:	42bb      	cmp	r3, r7
 800a34e:	d907      	bls.n	800a360 <__divdi3+0x11c>
 800a350:	197f      	adds	r7, r7, r5
 800a352:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 800a356:	d202      	bcs.n	800a35e <__divdi3+0x11a>
 800a358:	42bb      	cmp	r3, r7
 800a35a:	f200 80bd 	bhi.w	800a4d8 <__divdi3+0x294>
 800a35e:	4688      	mov	r8, r1
 800a360:	1aff      	subs	r7, r7, r3
 800a362:	b2a4      	uxth	r4, r4
 800a364:	fbb7 f3fe 	udiv	r3, r7, lr
 800a368:	fb0e 7713 	mls	r7, lr, r3, r7
 800a36c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800a370:	fb0c fc03 	mul.w	ip, ip, r3
 800a374:	45bc      	cmp	ip, r7
 800a376:	d907      	bls.n	800a388 <__divdi3+0x144>
 800a378:	197f      	adds	r7, r7, r5
 800a37a:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800a37e:	d202      	bcs.n	800a386 <__divdi3+0x142>
 800a380:	45bc      	cmp	ip, r7
 800a382:	f200 80a7 	bhi.w	800a4d4 <__divdi3+0x290>
 800a386:	460b      	mov	r3, r1
 800a388:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800a38c:	e7ad      	b.n	800a2ea <__divdi3+0xa6>
 800a38e:	4252      	negs	r2, r2
 800a390:	ea6f 0606 	mvn.w	r6, r6
 800a394:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800a398:	e75d      	b.n	800a256 <__divdi3+0x12>
 800a39a:	4240      	negs	r0, r0
 800a39c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800a3a0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800a3a4:	e754      	b.n	800a250 <__divdi3+0xc>
 800a3a6:	f1c0 0220 	rsb	r2, r0, #32
 800a3aa:	fa24 f102 	lsr.w	r1, r4, r2
 800a3ae:	fa07 f300 	lsl.w	r3, r7, r0
 800a3b2:	4085      	lsls	r5, r0
 800a3b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800a3b8:	40d7      	lsrs	r7, r2
 800a3ba:	4319      	orrs	r1, r3
 800a3bc:	fbb7 f2fe 	udiv	r2, r7, lr
 800a3c0:	0c0b      	lsrs	r3, r1, #16
 800a3c2:	fb0e 7712 	mls	r7, lr, r2, r7
 800a3c6:	fa1f fc85 	uxth.w	ip, r5
 800a3ca:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a3ce:	fb0c f702 	mul.w	r7, ip, r2
 800a3d2:	429f      	cmp	r7, r3
 800a3d4:	fa04 f400 	lsl.w	r4, r4, r0
 800a3d8:	d907      	bls.n	800a3ea <__divdi3+0x1a6>
 800a3da:	195b      	adds	r3, r3, r5
 800a3dc:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800a3e0:	d274      	bcs.n	800a4cc <__divdi3+0x288>
 800a3e2:	429f      	cmp	r7, r3
 800a3e4:	d972      	bls.n	800a4cc <__divdi3+0x288>
 800a3e6:	3a02      	subs	r2, #2
 800a3e8:	442b      	add	r3, r5
 800a3ea:	1bdf      	subs	r7, r3, r7
 800a3ec:	b289      	uxth	r1, r1
 800a3ee:	fbb7 f8fe 	udiv	r8, r7, lr
 800a3f2:	fb0e 7318 	mls	r3, lr, r8, r7
 800a3f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a3fa:	fb0c f708 	mul.w	r7, ip, r8
 800a3fe:	429f      	cmp	r7, r3
 800a400:	d908      	bls.n	800a414 <__divdi3+0x1d0>
 800a402:	195b      	adds	r3, r3, r5
 800a404:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 800a408:	d25c      	bcs.n	800a4c4 <__divdi3+0x280>
 800a40a:	429f      	cmp	r7, r3
 800a40c:	d95a      	bls.n	800a4c4 <__divdi3+0x280>
 800a40e:	f1a8 0802 	sub.w	r8, r8, #2
 800a412:	442b      	add	r3, r5
 800a414:	1bd8      	subs	r0, r3, r7
 800a416:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 800a41a:	e78e      	b.n	800a33a <__divdi3+0xf6>
 800a41c:	f1c2 0320 	rsb	r3, r2, #32
 800a420:	fa2c f103 	lsr.w	r1, ip, r3
 800a424:	fa0e fe02 	lsl.w	lr, lr, r2
 800a428:	fa20 f703 	lsr.w	r7, r0, r3
 800a42c:	ea41 0e0e 	orr.w	lr, r1, lr
 800a430:	fa08 f002 	lsl.w	r0, r8, r2
 800a434:	fa28 f103 	lsr.w	r1, r8, r3
 800a438:	ea4f 451e 	mov.w	r5, lr, lsr #16
 800a43c:	4338      	orrs	r0, r7
 800a43e:	fbb1 f8f5 	udiv	r8, r1, r5
 800a442:	0c03      	lsrs	r3, r0, #16
 800a444:	fb05 1118 	mls	r1, r5, r8, r1
 800a448:	fa1f f78e 	uxth.w	r7, lr
 800a44c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800a450:	fb07 f308 	mul.w	r3, r7, r8
 800a454:	428b      	cmp	r3, r1
 800a456:	fa0c fc02 	lsl.w	ip, ip, r2
 800a45a:	d909      	bls.n	800a470 <__divdi3+0x22c>
 800a45c:	eb11 010e 	adds.w	r1, r1, lr
 800a460:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 800a464:	d230      	bcs.n	800a4c8 <__divdi3+0x284>
 800a466:	428b      	cmp	r3, r1
 800a468:	d92e      	bls.n	800a4c8 <__divdi3+0x284>
 800a46a:	f1a8 0802 	sub.w	r8, r8, #2
 800a46e:	4471      	add	r1, lr
 800a470:	1ac9      	subs	r1, r1, r3
 800a472:	b280      	uxth	r0, r0
 800a474:	fbb1 f3f5 	udiv	r3, r1, r5
 800a478:	fb05 1113 	mls	r1, r5, r3, r1
 800a47c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800a480:	fb07 f703 	mul.w	r7, r7, r3
 800a484:	428f      	cmp	r7, r1
 800a486:	d908      	bls.n	800a49a <__divdi3+0x256>
 800a488:	eb11 010e 	adds.w	r1, r1, lr
 800a48c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800a490:	d216      	bcs.n	800a4c0 <__divdi3+0x27c>
 800a492:	428f      	cmp	r7, r1
 800a494:	d914      	bls.n	800a4c0 <__divdi3+0x27c>
 800a496:	3b02      	subs	r3, #2
 800a498:	4471      	add	r1, lr
 800a49a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800a49e:	1bc9      	subs	r1, r1, r7
 800a4a0:	fba3 890c 	umull	r8, r9, r3, ip
 800a4a4:	4549      	cmp	r1, r9
 800a4a6:	d309      	bcc.n	800a4bc <__divdi3+0x278>
 800a4a8:	d005      	beq.n	800a4b6 <__divdi3+0x272>
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	e71d      	b.n	800a2ea <__divdi3+0xa6>
 800a4ae:	4696      	mov	lr, r2
 800a4b0:	e6fe      	b.n	800a2b0 <__divdi3+0x6c>
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	e711      	b.n	800a2da <__divdi3+0x96>
 800a4b6:	4094      	lsls	r4, r2
 800a4b8:	4544      	cmp	r4, r8
 800a4ba:	d2f6      	bcs.n	800a4aa <__divdi3+0x266>
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	e7f4      	b.n	800a4aa <__divdi3+0x266>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	e7ea      	b.n	800a49a <__divdi3+0x256>
 800a4c4:	4688      	mov	r8, r1
 800a4c6:	e7a5      	b.n	800a414 <__divdi3+0x1d0>
 800a4c8:	46c8      	mov	r8, r9
 800a4ca:	e7d1      	b.n	800a470 <__divdi3+0x22c>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	e78c      	b.n	800a3ea <__divdi3+0x1a6>
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	e70a      	b.n	800a2ea <__divdi3+0xa6>
 800a4d4:	3b02      	subs	r3, #2
 800a4d6:	e757      	b.n	800a388 <__divdi3+0x144>
 800a4d8:	f1a8 0802 	sub.w	r8, r8, #2
 800a4dc:	442f      	add	r7, r5
 800a4de:	e73f      	b.n	800a360 <__divdi3+0x11c>

0800a4e0 <__udivdi3>:
 800a4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d144      	bne.n	800a572 <__udivdi3+0x92>
 800a4e8:	428a      	cmp	r2, r1
 800a4ea:	4615      	mov	r5, r2
 800a4ec:	4604      	mov	r4, r0
 800a4ee:	d94f      	bls.n	800a590 <__udivdi3+0xb0>
 800a4f0:	fab2 f782 	clz	r7, r2
 800a4f4:	460e      	mov	r6, r1
 800a4f6:	b14f      	cbz	r7, 800a50c <__udivdi3+0x2c>
 800a4f8:	f1c7 0320 	rsb	r3, r7, #32
 800a4fc:	40b9      	lsls	r1, r7
 800a4fe:	fa20 f603 	lsr.w	r6, r0, r3
 800a502:	fa02 f507 	lsl.w	r5, r2, r7
 800a506:	430e      	orrs	r6, r1
 800a508:	fa00 f407 	lsl.w	r4, r0, r7
 800a50c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800a510:	0c23      	lsrs	r3, r4, #16
 800a512:	fbb6 f0fe 	udiv	r0, r6, lr
 800a516:	b2af      	uxth	r7, r5
 800a518:	fb0e 6110 	mls	r1, lr, r0, r6
 800a51c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a520:	fb07 f100 	mul.w	r1, r7, r0
 800a524:	4299      	cmp	r1, r3
 800a526:	d909      	bls.n	800a53c <__udivdi3+0x5c>
 800a528:	195b      	adds	r3, r3, r5
 800a52a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800a52e:	f080 80ec 	bcs.w	800a70a <__udivdi3+0x22a>
 800a532:	4299      	cmp	r1, r3
 800a534:	f240 80e9 	bls.w	800a70a <__udivdi3+0x22a>
 800a538:	3802      	subs	r0, #2
 800a53a:	442b      	add	r3, r5
 800a53c:	1a5a      	subs	r2, r3, r1
 800a53e:	b2a4      	uxth	r4, r4
 800a540:	fbb2 f3fe 	udiv	r3, r2, lr
 800a544:	fb0e 2213 	mls	r2, lr, r3, r2
 800a548:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800a54c:	fb07 f703 	mul.w	r7, r7, r3
 800a550:	4297      	cmp	r7, r2
 800a552:	d908      	bls.n	800a566 <__udivdi3+0x86>
 800a554:	1952      	adds	r2, r2, r5
 800a556:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800a55a:	f080 80d8 	bcs.w	800a70e <__udivdi3+0x22e>
 800a55e:	4297      	cmp	r7, r2
 800a560:	f240 80d5 	bls.w	800a70e <__udivdi3+0x22e>
 800a564:	3b02      	subs	r3, #2
 800a566:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800a56a:	2600      	movs	r6, #0
 800a56c:	4631      	mov	r1, r6
 800a56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a572:	428b      	cmp	r3, r1
 800a574:	d847      	bhi.n	800a606 <__udivdi3+0x126>
 800a576:	fab3 f683 	clz	r6, r3
 800a57a:	2e00      	cmp	r6, #0
 800a57c:	d148      	bne.n	800a610 <__udivdi3+0x130>
 800a57e:	428b      	cmp	r3, r1
 800a580:	d302      	bcc.n	800a588 <__udivdi3+0xa8>
 800a582:	4282      	cmp	r2, r0
 800a584:	f200 80cd 	bhi.w	800a722 <__udivdi3+0x242>
 800a588:	2001      	movs	r0, #1
 800a58a:	4631      	mov	r1, r6
 800a58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a590:	b912      	cbnz	r2, 800a598 <__udivdi3+0xb8>
 800a592:	2501      	movs	r5, #1
 800a594:	fbb5 f5f2 	udiv	r5, r5, r2
 800a598:	fab5 f885 	clz	r8, r5
 800a59c:	f1b8 0f00 	cmp.w	r8, #0
 800a5a0:	d177      	bne.n	800a692 <__udivdi3+0x1b2>
 800a5a2:	1b4a      	subs	r2, r1, r5
 800a5a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800a5a8:	b2af      	uxth	r7, r5
 800a5aa:	2601      	movs	r6, #1
 800a5ac:	fbb2 f0fe 	udiv	r0, r2, lr
 800a5b0:	0c23      	lsrs	r3, r4, #16
 800a5b2:	fb0e 2110 	mls	r1, lr, r0, r2
 800a5b6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800a5ba:	fb07 f300 	mul.w	r3, r7, r0
 800a5be:	428b      	cmp	r3, r1
 800a5c0:	d907      	bls.n	800a5d2 <__udivdi3+0xf2>
 800a5c2:	1949      	adds	r1, r1, r5
 800a5c4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800a5c8:	d202      	bcs.n	800a5d0 <__udivdi3+0xf0>
 800a5ca:	428b      	cmp	r3, r1
 800a5cc:	f200 80ba 	bhi.w	800a744 <__udivdi3+0x264>
 800a5d0:	4610      	mov	r0, r2
 800a5d2:	1ac9      	subs	r1, r1, r3
 800a5d4:	b2a4      	uxth	r4, r4
 800a5d6:	fbb1 f3fe 	udiv	r3, r1, lr
 800a5da:	fb0e 1113 	mls	r1, lr, r3, r1
 800a5de:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800a5e2:	fb07 f703 	mul.w	r7, r7, r3
 800a5e6:	42a7      	cmp	r7, r4
 800a5e8:	d908      	bls.n	800a5fc <__udivdi3+0x11c>
 800a5ea:	1964      	adds	r4, r4, r5
 800a5ec:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800a5f0:	f080 808f 	bcs.w	800a712 <__udivdi3+0x232>
 800a5f4:	42a7      	cmp	r7, r4
 800a5f6:	f240 808c 	bls.w	800a712 <__udivdi3+0x232>
 800a5fa:	3b02      	subs	r3, #2
 800a5fc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800a600:	4631      	mov	r1, r6
 800a602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a606:	2600      	movs	r6, #0
 800a608:	4630      	mov	r0, r6
 800a60a:	4631      	mov	r1, r6
 800a60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a610:	f1c6 0420 	rsb	r4, r6, #32
 800a614:	fa22 f504 	lsr.w	r5, r2, r4
 800a618:	40b3      	lsls	r3, r6
 800a61a:	432b      	orrs	r3, r5
 800a61c:	fa20 fc04 	lsr.w	ip, r0, r4
 800a620:	fa01 f706 	lsl.w	r7, r1, r6
 800a624:	fa21 f504 	lsr.w	r5, r1, r4
 800a628:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a62c:	ea4c 0707 	orr.w	r7, ip, r7
 800a630:	fbb5 f8fe 	udiv	r8, r5, lr
 800a634:	0c39      	lsrs	r1, r7, #16
 800a636:	fb0e 5518 	mls	r5, lr, r8, r5
 800a63a:	fa1f fc83 	uxth.w	ip, r3
 800a63e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800a642:	fb0c f108 	mul.w	r1, ip, r8
 800a646:	42a9      	cmp	r1, r5
 800a648:	fa02 f206 	lsl.w	r2, r2, r6
 800a64c:	d904      	bls.n	800a658 <__udivdi3+0x178>
 800a64e:	18ed      	adds	r5, r5, r3
 800a650:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 800a654:	d367      	bcc.n	800a726 <__udivdi3+0x246>
 800a656:	46a0      	mov	r8, r4
 800a658:	1a6d      	subs	r5, r5, r1
 800a65a:	b2bf      	uxth	r7, r7
 800a65c:	fbb5 f4fe 	udiv	r4, r5, lr
 800a660:	fb0e 5514 	mls	r5, lr, r4, r5
 800a664:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800a668:	fb0c fc04 	mul.w	ip, ip, r4
 800a66c:	458c      	cmp	ip, r1
 800a66e:	d904      	bls.n	800a67a <__udivdi3+0x19a>
 800a670:	18c9      	adds	r1, r1, r3
 800a672:	f104 35ff 	add.w	r5, r4, #4294967295	; 0xffffffff
 800a676:	d35c      	bcc.n	800a732 <__udivdi3+0x252>
 800a678:	462c      	mov	r4, r5
 800a67a:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800a67e:	ebcc 0101 	rsb	r1, ip, r1
 800a682:	fba4 2302 	umull	r2, r3, r4, r2
 800a686:	4299      	cmp	r1, r3
 800a688:	d348      	bcc.n	800a71c <__udivdi3+0x23c>
 800a68a:	d044      	beq.n	800a716 <__udivdi3+0x236>
 800a68c:	4620      	mov	r0, r4
 800a68e:	2600      	movs	r6, #0
 800a690:	e76c      	b.n	800a56c <__udivdi3+0x8c>
 800a692:	f1c8 0420 	rsb	r4, r8, #32
 800a696:	fa01 f308 	lsl.w	r3, r1, r8
 800a69a:	fa05 f508 	lsl.w	r5, r5, r8
 800a69e:	fa20 f704 	lsr.w	r7, r0, r4
 800a6a2:	40e1      	lsrs	r1, r4
 800a6a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800a6a8:	431f      	orrs	r7, r3
 800a6aa:	fbb1 f6fe 	udiv	r6, r1, lr
 800a6ae:	0c3a      	lsrs	r2, r7, #16
 800a6b0:	fb0e 1116 	mls	r1, lr, r6, r1
 800a6b4:	fa1f fc85 	uxth.w	ip, r5
 800a6b8:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 800a6bc:	fb0c f206 	mul.w	r2, ip, r6
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	fa00 f408 	lsl.w	r4, r0, r8
 800a6c6:	d907      	bls.n	800a6d8 <__udivdi3+0x1f8>
 800a6c8:	195b      	adds	r3, r3, r5
 800a6ca:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 800a6ce:	d237      	bcs.n	800a740 <__udivdi3+0x260>
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d935      	bls.n	800a740 <__udivdi3+0x260>
 800a6d4:	3e02      	subs	r6, #2
 800a6d6:	442b      	add	r3, r5
 800a6d8:	1a9b      	subs	r3, r3, r2
 800a6da:	b2bf      	uxth	r7, r7
 800a6dc:	fbb3 f0fe 	udiv	r0, r3, lr
 800a6e0:	fb0e 3310 	mls	r3, lr, r0, r3
 800a6e4:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800a6e8:	fb0c f100 	mul.w	r1, ip, r0
 800a6ec:	4299      	cmp	r1, r3
 800a6ee:	d907      	bls.n	800a700 <__udivdi3+0x220>
 800a6f0:	195b      	adds	r3, r3, r5
 800a6f2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800a6f6:	d221      	bcs.n	800a73c <__udivdi3+0x25c>
 800a6f8:	4299      	cmp	r1, r3
 800a6fa:	d91f      	bls.n	800a73c <__udivdi3+0x25c>
 800a6fc:	3802      	subs	r0, #2
 800a6fe:	442b      	add	r3, r5
 800a700:	1a5a      	subs	r2, r3, r1
 800a702:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800a706:	4667      	mov	r7, ip
 800a708:	e750      	b.n	800a5ac <__udivdi3+0xcc>
 800a70a:	4610      	mov	r0, r2
 800a70c:	e716      	b.n	800a53c <__udivdi3+0x5c>
 800a70e:	460b      	mov	r3, r1
 800a710:	e729      	b.n	800a566 <__udivdi3+0x86>
 800a712:	4613      	mov	r3, r2
 800a714:	e772      	b.n	800a5fc <__udivdi3+0x11c>
 800a716:	40b0      	lsls	r0, r6
 800a718:	4290      	cmp	r0, r2
 800a71a:	d2b7      	bcs.n	800a68c <__udivdi3+0x1ac>
 800a71c:	1e60      	subs	r0, r4, #1
 800a71e:	2600      	movs	r6, #0
 800a720:	e724      	b.n	800a56c <__udivdi3+0x8c>
 800a722:	4630      	mov	r0, r6
 800a724:	e722      	b.n	800a56c <__udivdi3+0x8c>
 800a726:	42a9      	cmp	r1, r5
 800a728:	d995      	bls.n	800a656 <__udivdi3+0x176>
 800a72a:	f1a8 0802 	sub.w	r8, r8, #2
 800a72e:	441d      	add	r5, r3
 800a730:	e792      	b.n	800a658 <__udivdi3+0x178>
 800a732:	458c      	cmp	ip, r1
 800a734:	d9a0      	bls.n	800a678 <__udivdi3+0x198>
 800a736:	3c02      	subs	r4, #2
 800a738:	4419      	add	r1, r3
 800a73a:	e79e      	b.n	800a67a <__udivdi3+0x19a>
 800a73c:	4610      	mov	r0, r2
 800a73e:	e7df      	b.n	800a700 <__udivdi3+0x220>
 800a740:	460e      	mov	r6, r1
 800a742:	e7c9      	b.n	800a6d8 <__udivdi3+0x1f8>
 800a744:	3802      	subs	r0, #2
 800a746:	4429      	add	r1, r5
 800a748:	e743      	b.n	800a5d2 <__udivdi3+0xf2>
 800a74a:	bf00      	nop
 800a74c:	2044454c 	.word	0x2044454c
 800a750:	64206425 	.word	0x64206425
 800a754:	2073656f 	.word	0x2073656f
 800a758:	20746f6e 	.word	0x20746f6e
 800a75c:	73697865 	.word	0x73697865
 800a760:	00000a74 	.word	0x00000a74
 800a764:	68616f77 	.word	0x68616f77
 800a768:	65687420 	.word	0x65687420
 800a76c:	202e6572 	.word	0x202e6572
 800a770:	65697274 	.word	0x65697274
 800a774:	6f742064 	.word	0x6f742064
 800a778:	69727720 	.word	0x69727720
 800a77c:	30206574 	.word	0x30206574
 800a780:	34302578 	.word	0x34302578
 800a784:	6f742078 	.word	0x6f742078
 800a788:	67657220 	.word	0x67657220
 800a78c:	32302520 	.word	0x32302520
 800a790:	75622064 	.word	0x75622064
 800a794:	74692074 	.word	0x74692074
 800a798:	61657220 	.word	0x61657220
 800a79c:	61622064 	.word	0x61622064
 800a7a0:	25206b63 	.word	0x25206b63
 800a7a4:	0d783430 	.word	0x0d783430
 800a7a8:	0000000a 	.word	0x0000000a
 800a7ac:	74656e65 	.word	0x74656e65
 800a7b0:	696e695f 	.word	0x696e695f
 800a7b4:	0d292874 	.word	0x0d292874
 800a7b8:	00000000 	.word	0x00000000
 800a7bc:	74696177 	.word	0x74696177
 800a7c0:	20676e69 	.word	0x20676e69
 800a7c4:	20726f66 	.word	0x20726f66
 800a7c8:	20594850 	.word	0x20594850
 800a7cc:	77206f74 	.word	0x77206f74
 800a7d0:	20656b61 	.word	0x20656b61
 800a7d4:	2e2e7075 	.word	0x2e2e7075
 800a7d8:	00000d2e 	.word	0x00000d2e
 800a7dc:	656e6f64 	.word	0x656e6f64
 800a7e0:	74697720 	.word	0x74697720
 800a7e4:	48502068 	.word	0x48502068
 800a7e8:	65722059 	.word	0x65722059
 800a7ec:	2e746573 	.word	0x2e746573
 800a7f0:	0000000d 	.word	0x0000000d
 800a7f4:	74746573 	.word	0x74746573
 800a7f8:	20676e69 	.word	0x20676e69
 800a7fc:	74666f73 	.word	0x74666f73
 800a800:	65726177 	.word	0x65726177
 800a804:	72747320 	.word	0x72747320
 800a808:	72207061 	.word	0x72207061
 800a80c:	73696765 	.word	0x73696765
 800a810:	73726574 	.word	0x73726574
 800a814:	0d2e2e2e 	.word	0x0d2e2e2e
 800a818:	00000000 	.word	0x00000000
 800a81c:	20594850 	.word	0x20594850
 800a820:	20676572 	.word	0x20676572
 800a824:	64323025 	.word	0x64323025
 800a828:	30203d20 	.word	0x30203d20
 800a82c:	34302578 	.word	0x34302578
 800a830:	000a0d78 	.word	0x000a0d78

0800a834 <g_eth_src_mac>:
 800a834:	00c1f3a4 00000001 68686861 686e7520     ........ahhh unh
 800a844:	6c646e61 62206465 20647561 65746172     andled baud rate
 800a854:	6425203a 00000a0d 6c786d64 696e695f     : %d....dmxl_ini
 800a864:	0d292874 00000000 63656863 6d75736b     t().....checksum
 800a874:	69616620 3a64656c 636f6c20 30206c61      failed: local 0
 800a884:	32302578 3d212078 63657220 65766965     x%02x != receive
 800a894:	78302064 78323025 00000a0d 68616f77     d 0x%02x....woah
 800a8a4:	65687420 70206572 6e747261 202e7265      there partner. 
 800a8b4:	78656e75 74636570 64206465 206c786d     unexpected dmxl 
 800a8c4:	73207872 65746174 00000d21 6c786d64     rx state!...dmxl
 800a8d4:	20642520 74617473 72207375 72757465      %d status retur
 800a8e4:	656c206e 206c6576 6425203d 0000000a     n level = %d....
 800a8f4:	6c756f63 74276e64 6c6f7020 7473206c     couldn't poll st
 800a904:	73757461 74657220 206e7275 6576656c     atus return leve
 800a914:	6f66206c 6d642072 25206c78 000a0d64     l for dmxl %d...
 800a924:	65636572 64657669 20787220 35322040     received rx @ 25
 800a934:	626b2030 66207469 206d6f72 6c786d64     0 kbit from dmxl
 800a944:	0d642520 0000000a 72206f6e 65722078      %d.....no rx re
 800a954:	76696563 66206465 206d6f72 6c786d64     ceived from dmxl
 800a964:	2e642520 74202e2e 6e697972 37352067      %d... trying 57
 800a974:	20303036 64756162 0d2e2e2e 0000000a     600 baud........
 800a984:	00000112 00000112                       ........

0800a98c <g_tactile_sensors_per_port>:
 800a98c:	09090909                                ....

0800a990 <g_tactile_palm_addrs>:
 800a990:	66646260 74727068 007a7876 74636174     `bdfhprtvxz.tact
 800a9a0:	5f656c69 64697262 725f6567 74657365     ile_bridge_reset
 800a9b0:	000d2928 74636174 20656c69 64697262     ()..tactile brid
 800a9c0:	25206567 65722064 64252067 7830203a     ge %d reg %d: 0x
 800a9d0:	78323025 00000a0d 656e6f64 74697720     %02x....done wit
 800a9e0:	61742068 6c697463 6e695f65 29287469     h tactile_init()
 800a9f0:	0000000d                                ....

0800a9f4 <g_tactile_finger_addrs>:
 800a9f4:	06040200 14121008 00000016              ............

0800aa00 <poll_targets>:
 800aa00:	08003145 00000000 20010420 08003145     E1...... .. E1..
 800aa10:	00000001 20010424 08003145 00000002     ....$.. E1......
 800aa20:	20010428 08003145 00000003 2001042c     (.. E1......,.. 
 800aa30:	0800247d 00000000 2000006c 0800247d     }$......l.. }$..
 800aa40:	00000001 20000070 0800247d 00000002     ....p.. }$......
 800aa50:	20000074 0800247d 00000003 20000078     t.. }$......x.. 
 800aa60:	08003601 00000000 2000007c              .6......|.. 

0800aa6c <errSequence>:
 800aa6c:	01020408 00000000 02010408 00000000     ................
 800aa7c:	01040208 00000000 04010208 00000000     ................
 800aa8c:	0e000804 00000000 08000804 00000000     ................
 800aa9c:	04000804 00000000 02000804 00000000     ................
 800aaac:	08000204 00000000 04000204 00000000     ................
 800aabc:	02000204 00000000 01000204 00000000     ................
 800aacc:	00000043                                C...

0800aad0 <_global_impure_ptr>:
 800aad0:	20000080                                ... 

0800aad4 <zeroes.6926>:
 800aad4:	30303030 30303030 30303030 30303030     0000000000000000
 800aae4:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 800aaf4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 800ab04:	00000000 33323130 37363534 62613938     ....0123456789ab
 800ab14:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 800ab24:	00000030                                0...

0800ab28 <blanks.6925>:
 800ab28:	20202020 20202020 20202020 20202020                     
 800ab38:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 800ab48:	49534f50 00000058 0000002e 00000000     POSIX...........

0800ab58 <__mprec_tens>:
 800ab58:	00000000 3ff00000 00000000 40240000     .......?......$@
 800ab68:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800ab78:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800ab88:	00000000 412e8480 00000000 416312d0     .......A......cA
 800ab98:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800aba8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800abb8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800abc8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800abd8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800abe8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800abf8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800ac08:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800ac18:	79d99db4 44ea7843                       ...yCx.D

0800ac20 <p05.5302>:
 800ac20:	00000005 00000019 0000007d 00000000     ........}.......

0800ac30 <__mprec_bigtens>:
 800ac30:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800ac40:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800ac50:	7f73bf3c 75154fdd                       <.s..O.u

0800ac58 <__mprec_tinytens>:
 800ac58:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 800ac68:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 800ac78:	64ac6f43 0ac80628                       Co.d(...

0800ac80 <zeroes.6869>:
 800ac80:	30303030 30303030 30303030 30303030     0000000000000000

0800ac90 <blanks.6868>:
 800ac90:	20202020 20202020 20202020 20202020                     

0800aca0 <_init>:
 800aca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca2:	bf00      	nop
 800aca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aca6:	bc08      	pop	{r3}
 800aca8:	469e      	mov	lr, r3
 800acaa:	4770      	bx	lr

0800acac <__init_array_start>:
 800acac:	08005271 	.word	0x08005271

0800acb0 <__frame_dummy_init_array_entry>:
 800acb0:	08000425                                %...

0800acb4 <_fini>:
 800acb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb6:	bf00      	nop
 800acb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acba:	bc08      	pop	{r3}
 800acbc:	469e      	mov	lr, r3
 800acbe:	4770      	bx	lr

0800acc0 <__fini_array_start>:
 800acc0:	08000401 	.word	0x08000401
