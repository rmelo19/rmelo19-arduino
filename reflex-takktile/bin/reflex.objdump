
bin/reflex:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_vectors>:
 8000000:	68 46 01 20 91 07 00 08 8d 07 00 08 8d 07 00 08     hF. ............
 8000010:	8d 07 00 08 8d 07 00 08 8d 07 00 08 00 00 00 00     ................
	...
 800002c:	8d 07 00 08 8d 07 00 08 00 00 00 00 8d 07 00 08     ................
 800003c:	8d 07 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     ................
 800004c:	8d 07 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     ................
 800005c:	8d 07 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     ................
 800006c:	8d 07 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     ................
 800007c:	8d 07 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     ................
 800008c:	8d 07 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     ................
 800009c:	8d 07 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     ................
 80000ac:	8d 07 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     ................
 80000bc:	8d 07 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     ................
 80000cc:	8d 07 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     ................
 80000dc:	6d 15 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     m...............
 80000ec:	8d 07 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     ................
 80000fc:	8d 07 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     ................
 800010c:	8d 07 00 08 a9 15 00 08 ed 15 00 08 8d 07 00 08     ................
 800011c:	8d 07 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     ................
 800012c:	8d 07 00 08 8d 07 00 08 c9 0f 00 08 8d 07 00 08     ................
 800013c:	8d 07 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     ................
 800014c:	8d 07 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     ................
 800015c:	31 16 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     1...............
 800016c:	8d 07 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     ................
 800017c:	8d 07 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     ................
 800018c:	8d 07 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     ................
 800019c:	8d 07 00 08 8d 07 00 08 8d 07 00 08 8d 07 00 08     ................
	...

08000400 <__do_global_dtors_aux>:
 8000400:	b510      	push	{r4, lr}
 8000402:	4c05      	ldr	r4, [pc, #20]	; (8000418 <__do_global_dtors_aux+0x18>)
 8000404:	7823      	ldrb	r3, [r4, #0]
 8000406:	b933      	cbnz	r3, 8000416 <__do_global_dtors_aux+0x16>
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <__do_global_dtors_aux+0x1c>)
 800040a:	b113      	cbz	r3, 8000412 <__do_global_dtors_aux+0x12>
 800040c:	4804      	ldr	r0, [pc, #16]	; (8000420 <__do_global_dtors_aux+0x20>)
 800040e:	f3af 8000 	nop.w
 8000412:	2301      	movs	r3, #1
 8000414:	7023      	strb	r3, [r4, #0]
 8000416:	bd10      	pop	{r4, pc}
 8000418:	20000948 	.word	0x20000948
 800041c:	00000000 	.word	0x00000000
 8000420:	0800cb24 	.word	0x0800cb24

08000424 <frame_dummy>:
 8000424:	4b08      	ldr	r3, [pc, #32]	; (8000448 <frame_dummy+0x24>)
 8000426:	b510      	push	{r4, lr}
 8000428:	b11b      	cbz	r3, 8000432 <frame_dummy+0xe>
 800042a:	4808      	ldr	r0, [pc, #32]	; (800044c <frame_dummy+0x28>)
 800042c:	4908      	ldr	r1, [pc, #32]	; (8000450 <frame_dummy+0x2c>)
 800042e:	f3af 8000 	nop.w
 8000432:	4808      	ldr	r0, [pc, #32]	; (8000454 <frame_dummy+0x30>)
 8000434:	6803      	ldr	r3, [r0, #0]
 8000436:	b903      	cbnz	r3, 800043a <frame_dummy+0x16>
 8000438:	bd10      	pop	{r4, pc}
 800043a:	4b07      	ldr	r3, [pc, #28]	; (8000458 <frame_dummy+0x34>)
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0fb      	beq.n	8000438 <frame_dummy+0x14>
 8000440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000444:	4718      	bx	r3
 8000446:	bf00      	nop
 8000448:	00000000 	.word	0x00000000
 800044c:	0800cb24 	.word	0x0800cb24
 8000450:	2000094c 	.word	0x2000094c
 8000454:	0800cb98 	.word	0x0800cb98
 8000458:	00000000 	.word	0x00000000

0800045c <_mainCRTStartup>:
 800045c:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <_mainCRTStartup+0x58>)
 800045e:	2b00      	cmp	r3, #0
 8000460:	bf08      	it	eq
 8000462:	4b13      	ldreq	r3, [pc, #76]	; (80004b0 <_mainCRTStartup+0x54>)
 8000464:	469d      	mov	sp, r3
 8000466:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 800046a:	2100      	movs	r1, #0
 800046c:	468b      	mov	fp, r1
 800046e:	460f      	mov	r7, r1
 8000470:	4813      	ldr	r0, [pc, #76]	; (80004c0 <_mainCRTStartup+0x64>)
 8000472:	4a14      	ldr	r2, [pc, #80]	; (80004c4 <_mainCRTStartup+0x68>)
 8000474:	1a12      	subs	r2, r2, r0
 8000476:	f003 f9cd 	bl	8003814 <memset>
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <_mainCRTStartup+0x5c>)
 800047c:	2b00      	cmp	r3, #0
 800047e:	d000      	beq.n	8000482 <_mainCRTStartup+0x26>
 8000480:	4798      	blx	r3
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <_mainCRTStartup+0x60>)
 8000484:	2b00      	cmp	r3, #0
 8000486:	d000      	beq.n	800048a <_mainCRTStartup+0x2e>
 8000488:	4798      	blx	r3
 800048a:	2000      	movs	r0, #0
 800048c:	2100      	movs	r1, #0
 800048e:	0004      	movs	r4, r0
 8000490:	000d      	movs	r5, r1
 8000492:	480d      	ldr	r0, [pc, #52]	; (80004c8 <_mainCRTStartup+0x6c>)
 8000494:	2800      	cmp	r0, #0
 8000496:	d002      	beq.n	800049e <_mainCRTStartup+0x42>
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <_mainCRTStartup+0x70>)
 800049a:	f006 f875 	bl	8006588 <atexit>
 800049e:	f003 f8f7 	bl	8003690 <__libc_init_array>
 80004a2:	0020      	movs	r0, r4
 80004a4:	0029      	movs	r1, r5
 80004a6:	f000 f82f 	bl	8000508 <main>
 80004aa:	f003 f8e1 	bl	8003670 <exit>
 80004ae:	bf00      	nop
 80004b0:	00080000 	.word	0x00080000
	...
 80004c0:	20000948 	.word	0x20000948
 80004c4:	20010670 	.word	0x20010670
 80004c8:	08006589 	.word	0x08006589
 80004cc:	0800791d 	.word	0x0800791d

080004d0 <ledsPattern>:
  return 0;
}


void ledsPattern(int led1, int led2, int led3, int led4)
{
 80004d0:	b530      	push	{r4, r5, lr}
	int leds[4] = {led1, led2, led3, led4};

	for(int i=0; i<4;i++)
	{
		if (leds[i] == ON)
 80004d2:	2801      	cmp	r0, #1
  return 0;
}


void ledsPattern(int led1, int led2, int led3, int led4)
{
 80004d4:	b085      	sub	sp, #20
	int leds[4] = {led1, led2, led3, led4};

	for(int i=0; i<4;i++)
 80004d6:	f04f 0400 	mov.w	r4, #0
}


void ledsPattern(int led1, int led2, int led3, int led4)
{
	int leds[4] = {led1, led2, led3, led4};
 80004da:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80004de:	466d      	mov	r5, sp
		{
			leds_on(i);
		}
		else
		{
			leds_off(i);
 80004e0:	b2e0      	uxtb	r0, r4
{
	int leds[4] = {led1, led2, led3, led4};

	for(int i=0; i<4;i++)
	{
		if (leds[i] == ON)
 80004e2:	d009      	beq.n	80004f8 <ledsPattern+0x28>

void ledsPattern(int led1, int led2, int led3, int led4)
{
	int leds[4] = {led1, led2, led3, led4};

	for(int i=0; i<4;i++)
 80004e4:	3401      	adds	r4, #1
		{
			leds_on(i);
		}
		else
		{
			leds_off(i);
 80004e6:	f000 fa3b 	bl	8000960 <leds_off>

void ledsPattern(int led1, int led2, int led3, int led4)
{
	int leds[4] = {led1, led2, led3, led4};

	for(int i=0; i<4;i++)
 80004ea:	2c04      	cmp	r4, #4
 80004ec:	d009      	beq.n	8000502 <ledsPattern+0x32>
 80004ee:	f855 0f04 	ldr.w	r0, [r5, #4]!
	{
		if (leds[i] == ON)
 80004f2:	2801      	cmp	r0, #1
		{
			leds_on(i);
		}
		else
		{
			leds_off(i);
 80004f4:	b2e0      	uxtb	r0, r4
{
	int leds[4] = {led1, led2, led3, led4};

	for(int i=0; i<4;i++)
	{
		if (leds[i] == ON)
 80004f6:	d1f5      	bne.n	80004e4 <ledsPattern+0x14>

void ledsPattern(int led1, int led2, int led3, int led4)
{
	int leds[4] = {led1, led2, led3, led4};

	for(int i=0; i<4;i++)
 80004f8:	3401      	adds	r4, #1
	{
		if (leds[i] == ON)
		{
			leds_on(i);
 80004fa:	f000 fa0d 	bl	8000918 <leds_on>

void ledsPattern(int led1, int led2, int led3, int led4)
{
	int leds[4] = {led1, led2, led3, led4};

	for(int i=0; i<4;i++)
 80004fe:	2c04      	cmp	r4, #4
 8000500:	d1f5      	bne.n	80004ee <ledsPattern+0x1e>
		else
		{
			leds_off(i);
		}
	}
}
 8000502:	b005      	add	sp, #20
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	bf00      	nop

08000508 <main>:
void udelay(int);



int main()
{
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f5ad 6dfa 	sub.w	sp, sp, #2000	; 0x7d0
  char buffer[2000];
  uint16_t bytesToSend;

  // initialization
  //############################################################################################
  systime_init();
 800050e:	f000 ff8b 	bl	8001428 <systime_init>
  leds_init();
 8000512:	f000 f9e5 	bl	80008e0 <leds_init>
  enet_init();
 8000516:	f000 fb3d 	bl	8000b94 <enet_init>

  // setting reset and clock control register
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | // GPIOA clock enable during sleep mode
 800051a:	4b8f      	ldr	r3, [pc, #572]	; (8000758 <main+0x250>)

  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN |  // enable I2C bus 1 
                  RCC_APB1ENR_I2C3EN;   // enable I2C bus 3

  // set i2c pins for each bus
  pin_set_alternate_function(GPIOB, PORTB_I2C1_SCL, 4);
 800051c:	488f      	ldr	r0, [pc, #572]	; (800075c <main+0x254>)
  systime_init();
  leds_init();
  enet_init();

  // setting reset and clock control register
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | // GPIOA clock enable during sleep mode
 800051e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000520:	f042 020f 	orr.w	r2, r2, #15
 8000524:	631a      	str	r2, [r3, #48]	; 0x30
                  RCC_AHB1ENR_GPIOBEN | // GPIOB clock enable during sleep mode
                  RCC_AHB1ENR_GPIOCEN | // GPIOC clock enable during sleep mode
                  RCC_AHB1ENR_GPIODEN;  // GPIOD clock enable during sleep mode

  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN |  // enable I2C bus 1 
 8000526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000528:	f442 0220 	orr.w	r2, r2, #10485760	; 0xa00000
 800052c:	641a      	str	r2, [r3, #64]	; 0x40
                  RCC_APB1ENR_I2C3EN;   // enable I2C bus 3

  // set i2c pins for each bus
  pin_set_alternate_function(GPIOB, PORTB_I2C1_SCL, 4);
 800052e:	2106      	movs	r1, #6
 8000530:	2204      	movs	r2, #4
 8000532:	f002 fde7 	bl	8003104 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOB, PORTB_I2C1_SDA, 4);
 8000536:	4889      	ldr	r0, [pc, #548]	; (800075c <main+0x254>)
 8000538:	2107      	movs	r1, #7
 800053a:	2204      	movs	r2, #4
 800053c:	f002 fde2 	bl	8003104 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOA, PORTA_I2C3_SCL, 4);
 8000540:	4887      	ldr	r0, [pc, #540]	; (8000760 <main+0x258>)
 8000542:	2108      	movs	r1, #8
 8000544:	2204      	movs	r2, #4
 8000546:	f002 fddd 	bl	8003104 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOC, PORTC_I2C3_SDA, 4);
 800054a:	4886      	ldr	r0, [pc, #536]	; (8000764 <main+0x25c>)
 800054c:	2109      	movs	r1, #9
 800054e:	2204      	movs	r2, #4
 8000550:	f002 fdd8 	bl	8003104 <pin_set_alternate_function>

  // set 
  pin_set_output_type(GPIOB, PORTB_I2C1_SCL, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 8000554:	4881      	ldr	r0, [pc, #516]	; (800075c <main+0x254>)
 8000556:	2106      	movs	r1, #6
 8000558:	2201      	movs	r2, #1
 800055a:	f002 fdc5 	bl	80030e8 <pin_set_output_type>
  pin_set_output_type(GPIOB, PORTB_I2C1_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 800055e:	487f      	ldr	r0, [pc, #508]	; (800075c <main+0x254>)
 8000560:	2107      	movs	r1, #7
 8000562:	2201      	movs	r2, #1
 8000564:	f002 fdc0 	bl	80030e8 <pin_set_output_type>
  pin_set_output_type(GPIOA, PORTA_I2C3_SCL, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 8000568:	487d      	ldr	r0, [pc, #500]	; (8000760 <main+0x258>)
 800056a:	2108      	movs	r1, #8
 800056c:	2201      	movs	r2, #1
 800056e:	f002 fdbb 	bl	80030e8 <pin_set_output_type>
  pin_set_output_type(GPIOC, PORTC_I2C3_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 8000572:	487c      	ldr	r0, [pc, #496]	; (8000764 <main+0x25c>)
 8000574:	2109      	movs	r1, #9
 8000576:	2201      	movs	r2, #1
 8000578:	f002 fdb6 	bl	80030e8 <pin_set_output_type>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800057c:	b662      	cpsie	i

  __enable_irq();

  // Configuring Control Registers, i2c bus 1
  I2C1->CR2   |= APB_MHZ;     // 42MHz -> 101010
 800057e:	4a7a      	ldr	r2, [pc, #488]	; (8000768 <main+0x260>)
  I2C1->TRISE &= ~0x3f;       // 0x3f = 0b00111111 -> 0b11000000, clearing register
  I2C1->TRISE |= I2C_TRISE;   // = I2C_TRISE = (APB_MHZ * 200 / 1000 + 1), maximum rise time
  I2C1->CR1   |= I2C_CR1_PE;  // peripheral enable

  // Configuring Control Registers, i2c bus 3
  I2C3->CR2   |= APB_MHZ;     // 42MHz -> 101010
 8000580:	4b7a      	ldr	r3, [pc, #488]	; (800076c <main+0x264>)
  pin_set_output_type(GPIOC, PORTC_I2C3_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);

  __enable_irq();

  // Configuring Control Registers, i2c bus 1
  I2C1->CR2   |= APB_MHZ;     // 42MHz -> 101010
 8000582:	8891      	ldrh	r1, [r2, #4]
}

void udelay(int utime)
{
	int mytime = SYSTIME;
	while(SYSTIME - mytime < utime);
 8000584:	487a      	ldr	r0, [pc, #488]	; (8000770 <main+0x268>)
  pin_set_output_type(GPIOC, PORTC_I2C3_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);

  __enable_irq();

  // Configuring Control Registers, i2c bus 1
  I2C1->CR2   |= APB_MHZ;     // 42MHz -> 101010
 8000586:	b289      	uxth	r1, r1
 8000588:	f041 012a 	orr.w	r1, r1, #42	; 0x2a
 800058c:	8091      	strh	r1, [r2, #4]
  I2C1->CCR   |= I2C_CCR;     // I2C_CCR = 210
 800058e:	8b91      	ldrh	r1, [r2, #28]
 8000590:	b289      	uxth	r1, r1
 8000592:	f041 01d2 	orr.w	r1, r1, #210	; 0xd2
 8000596:	8391      	strh	r1, [r2, #28]
  I2C1->TRISE &= ~0x3f;       // 0x3f = 0b00111111 -> 0b11000000, clearing register
 8000598:	8c11      	ldrh	r1, [r2, #32]
 800059a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800059e:	0409      	lsls	r1, r1, #16
 80005a0:	0c09      	lsrs	r1, r1, #16
 80005a2:	8411      	strh	r1, [r2, #32]
  I2C1->TRISE |= I2C_TRISE;   // = I2C_TRISE = (APB_MHZ * 200 / 1000 + 1), maximum rise time
 80005a4:	8c11      	ldrh	r1, [r2, #32]
 80005a6:	b289      	uxth	r1, r1
 80005a8:	f041 0109 	orr.w	r1, r1, #9
 80005ac:	8411      	strh	r1, [r2, #32]
  I2C1->CR1   |= I2C_CR1_PE;  // peripheral enable
 80005ae:	8811      	ldrh	r1, [r2, #0]
 80005b0:	b289      	uxth	r1, r1
 80005b2:	f041 0101 	orr.w	r1, r1, #1
 80005b6:	8011      	strh	r1, [r2, #0]

  // Configuring Control Registers, i2c bus 3
  I2C3->CR2   |= APB_MHZ;     // 42MHz -> 101010
 80005b8:	889a      	ldrh	r2, [r3, #4]
 80005ba:	b292      	uxth	r2, r2
 80005bc:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 80005c0:	809a      	strh	r2, [r3, #4]
  I2C3->CCR   |= I2C_CCR;     // I2C_CCR = 210
 80005c2:	8b9a      	ldrh	r2, [r3, #28]
 80005c4:	b292      	uxth	r2, r2
 80005c6:	f042 02d2 	orr.w	r2, r2, #210	; 0xd2
 80005ca:	839a      	strh	r2, [r3, #28]
  I2C3->TRISE &= ~0x3f;       // 0x3f = 0b00111111 -> 0b11000000, clearing register
 80005cc:	8c1a      	ldrh	r2, [r3, #32]
 80005ce:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80005d2:	0412      	lsls	r2, r2, #16
 80005d4:	0c12      	lsrs	r2, r2, #16
 80005d6:	841a      	strh	r2, [r3, #32]
  I2C3->TRISE |= I2C_TRISE;   // = I2C_TRISE = (APB_MHZ * 200 / 1000 + 1), maximum rise time
 80005d8:	8c1a      	ldrh	r2, [r3, #32]
 80005da:	b292      	uxth	r2, r2
 80005dc:	f042 0209 	orr.w	r2, r2, #9
 80005e0:	841a      	strh	r2, [r3, #32]
  I2C3->CR1   |= I2C_CR1_PE;  // peripheral enable
 80005e2:	881a      	ldrh	r2, [r3, #0]
 80005e4:	b292      	uxth	r2, r2
 80005e6:	f042 0201 	orr.w	r2, r2, #1
	}
}

void udelay(int utime)
{
	int mytime = SYSTIME;
 80005ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  // Configuring Control Registers, i2c bus 3
  I2C3->CR2   |= APB_MHZ;     // 42MHz -> 101010
  I2C3->CCR   |= I2C_CCR;     // I2C_CCR = 210
  I2C3->TRISE &= ~0x3f;       // 0x3f = 0b00111111 -> 0b11000000, clearing register
  I2C3->TRISE |= I2C_TRISE;   // = I2C_TRISE = (APB_MHZ * 200 / 1000 + 1), maximum rise time
  I2C3->CR1   |= I2C_CR1_PE;  // peripheral enable
 80005ee:	801a      	strh	r2, [r3, #0]
	}
}

void udelay(int utime)
{
	int mytime = SYSTIME;
 80005f0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	while(SYSTIME - mytime < utime);
 80005f2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	4283      	cmp	r3, r0
 80005f8:	d9fb      	bls.n	80005f2 <main+0xea>
  while(1)
  {
	  // I2C communication
	  // ############################################################################################
	  // starting i2c communication on I2c bus 3 
	  I2C3->CR1 |=  I2C_CR1_START; // generating start condition
 80005fa:	4c5c      	ldr	r4, [pc, #368]	; (800076c <main+0x264>)
	  I2C3->SR1 &= ~I2C_SR1_AF;    // clearing acknowledge
	  ledsPattern(ON, ON, OFF, ON);

	  while (!(I2C3->SR1 & I2C_SR1_SB));
 80005fc:	4626      	mov	r6, r4
  while(1)
  {
	  // I2C communication
	  // ############################################################################################
	  // starting i2c communication on I2c bus 3 
	  I2C3->CR1 |=  I2C_CR1_START; // generating start condition
 80005fe:	8823      	ldrh	r3, [r4, #0]
 8000600:	b29b      	uxth	r3, r3
 8000602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000606:	8023      	strh	r3, [r4, #0]
	  I2C3->SR1 &= ~I2C_SR1_AF;    // clearing acknowledge
 8000608:	8aa3      	ldrh	r3, [r4, #20]
 800060a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800060e:	041b      	lsls	r3, r3, #16
 8000610:	0c1b      	lsrs	r3, r3, #16
	  ledsPattern(ON, ON, OFF, ON);
 8000612:	2001      	movs	r0, #1
  {
	  // I2C communication
	  // ############################################################################################
	  // starting i2c communication on I2c bus 3 
	  I2C3->CR1 |=  I2C_CR1_START; // generating start condition
	  I2C3->SR1 &= ~I2C_SR1_AF;    // clearing acknowledge
 8000614:	82a3      	strh	r3, [r4, #20]
	  ledsPattern(ON, ON, OFF, ON);
 8000616:	4601      	mov	r1, r0
 8000618:	4603      	mov	r3, r0
 800061a:	2200      	movs	r2, #0
 800061c:	f7ff ff58 	bl	80004d0 <ledsPattern>

	  while (!(I2C3->SR1 & I2C_SR1_SB));
 8000620:	8aa3      	ldrh	r3, [r4, #20]
 8000622:	07db      	lsls	r3, r3, #31
 8000624:	d5fc      	bpl.n	8000620 <main+0x118>
	  // initialTime = SYSTIME; while (!(I2C3->SR1 & I2C_SR1_SB) && !timeout(1000, initialTime));
	  ledsPattern(OFF, ON, ON, ON);
 8000626:	2101      	movs	r1, #1
 8000628:	460b      	mov	r3, r1
 800062a:	460a      	mov	r2, r1
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff ff4f 	bl	80004d0 <ledsPattern>

	  // Send address with write bit
	  I2C3->DR = ((uint8_t) ARDUINO_7BIT_ADDR << 1); // puts the address to be sent on the buffer using global variable
 8000632:	2340      	movs	r3, #64	; 0x40
 8000634:	8233      	strh	r3, [r6, #16]
	  
	  while(!(I2C3->SR1 & (I2C_SR1_ADDR))); // wait for address transmission
 8000636:	8aa3      	ldrh	r3, [r4, #20]
 8000638:	079d      	lsls	r5, r3, #30
 800063a:	d5fc      	bpl.n	8000636 <main+0x12e>
	  I2C3->SR2; // un-stretch clock by reading here (?)
	  ledsPattern(OFF, OFF, ON, ON);
 800063c:	2000      	movs	r0, #0
 800063e:	2201      	movs	r2, #1
 8000640:	4613      	mov	r3, r2
 8000642:	4601      	mov	r1, r0

	  // Send address with write bit
	  I2C3->DR = ((uint8_t) ARDUINO_7BIT_ADDR << 1); // puts the address to be sent on the buffer using global variable
	  
	  while(!(I2C3->SR1 & (I2C_SR1_ADDR))); // wait for address transmission
	  I2C3->SR2; // un-stretch clock by reading here (?)
 8000644:	8b35      	ldrh	r5, [r6, #24]
	  ledsPattern(OFF, OFF, ON, ON);
 8000646:	f7ff ff43 	bl	80004d0 <ledsPattern>

	  I2C3->DR = AS5048B_ANGLLSB_REG; // Send the address of the desired register
 800064a:	23ff      	movs	r3, #255	; 0xff
 800064c:	8233      	strh	r3, [r6, #16]
	  
	  while (!(I2C3->SR1 & (I2C_SR1_BTF | I2C_SR1_AF)));
 800064e:	8aa3      	ldrh	r3, [r4, #20]
 8000650:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8000654:	f023 0303 	bic.w	r3, r3, #3
 8000658:	055b      	lsls	r3, r3, #21
 800065a:	0d5b      	lsrs	r3, r3, #21
 800065c:	2b00      	cmp	r3, #0
 800065e:	d0f6      	beq.n	800064e <main+0x146>
	  ledsPattern(OFF, OFF, OFF, ON);
 8000660:	2000      	movs	r0, #0
 8000662:	2301      	movs	r3, #1
 8000664:	4601      	mov	r1, r0
 8000666:	4602      	mov	r2, r0
 8000668:	f7ff ff32 	bl	80004d0 <ledsPattern>

	  I2C3->CR1 |= I2C_CR1_STOP;
 800066c:	8833      	ldrh	r3, [r6, #0]
 800066e:	b29b      	uxth	r3, r3
 8000670:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000674:	8033      	strh	r3, [r6, #0]


	  while (I2C3->SR2 & I2C_SR2_BUSY); // wait until bus is not busy anymore
 8000676:	8b20      	ldrh	r0, [r4, #24]
 8000678:	f000 0002 	and.w	r0, r0, #2
 800067c:	b280      	uxth	r0, r0
 800067e:	2800      	cmp	r0, #0
 8000680:	d1f9      	bne.n	8000676 <main+0x16e>
	  ledsPattern(OFF, OFF, OFF, OFF);
 8000682:	4603      	mov	r3, r0
 8000684:	4601      	mov	r1, r0
 8000686:	4602      	mov	r2, r0
 8000688:	f7ff ff22 	bl	80004d0 <ledsPattern>

	  // Send the address with the read bit

	  // starting I2C3 communication
	  I2C3->CR1 |=  I2C_CR1_START;
 800068c:	8833      	ldrh	r3, [r6, #0]
 800068e:	b29b      	uxth	r3, r3
 8000690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000694:	8033      	strh	r3, [r6, #0]
	  I2C3->SR1 &= ~I2C_SR1_AF;
 8000696:	8ab3      	ldrh	r3, [r6, #20]
 8000698:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800069c:	041b      	lsls	r3, r3, #16
 800069e:	0c1b      	lsrs	r3, r3, #16
 80006a0:	82b3      	strh	r3, [r6, #20]
	  
	  while (!(I2C3->SR1 & I2C_SR1_SB));
 80006a2:	8aa3      	ldrh	r3, [r4, #20]
 80006a4:	07d8      	lsls	r0, r3, #31
 80006a6:	d5fc      	bpl.n	80006a2 <main+0x19a>
	  ledsPattern(ON, OFF, OFF, OFF);
 80006a8:	2100      	movs	r1, #0
 80006aa:	460b      	mov	r3, r1
 80006ac:	460a      	mov	r2, r1
 80006ae:	2001      	movs	r0, #1
 80006b0:	f7ff ff0e 	bl	80004d0 <ledsPattern>

	  // Send address with read bit
	  I2C3->DR = (ARDUINO_7BIT_ADDR << 1) + 1; // puts the address to be sent on the buffer using global variable
 80006b4:	2341      	movs	r3, #65	; 0x41
 80006b6:	8233      	strh	r3, [r6, #16]
	  
	  while (!(I2C3->SR1 & (I2C_SR1_ADDR)));
 80006b8:	8aa3      	ldrh	r3, [r4, #20]
 80006ba:	0799      	lsls	r1, r3, #30
 80006bc:	d5fc      	bpl.n	80006b8 <main+0x1b0>
	  I2C3->SR2; // un-stretch clock by reading here (?)
	  ledsPattern(ON, ON, OFF, OFF);
 80006be:	2001      	movs	r0, #1
 80006c0:	2200      	movs	r2, #0
 80006c2:	4613      	mov	r3, r2
 80006c4:	4601      	mov	r1, r0

	  // Send address with read bit
	  I2C3->DR = (ARDUINO_7BIT_ADDR << 1) + 1; // puts the address to be sent on the buffer using global variable
	  
	  while (!(I2C3->SR1 & (I2C_SR1_ADDR)));
	  I2C3->SR2; // un-stretch clock by reading here (?)
 80006c6:	8b35      	ldrh	r5, [r6, #24]
	  ledsPattern(ON, ON, OFF, OFF);
 80006c8:	f7ff ff02 	bl	80004d0 <ledsPattern>
	  
	  // Request and read 2 bytes
	  // I2C3->CR1 &= ~I2C_CR1_ACK; // last read
	  I2C3->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable
 80006cc:	8833      	ldrh	r3, [r6, #0]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006d4:	8033      	strh	r3, [r6, #0]
	  
	  while (!(I2C3->SR1 & I2C_SR1_RXNE));
 80006d6:	8aa3      	ldrh	r3, [r4, #20]
 80006d8:	065a      	lsls	r2, r3, #25
 80006da:	d5fc      	bpl.n	80006d6 <main+0x1ce>
	  uint8_t valueRead;
	  valueRead = I2C3->DR;
 80006dc:	8a31      	ldrh	r1, [r6, #16]
	  printf("Value read: %d\n", valueRead);
 80006de:	4825      	ldr	r0, [pc, #148]	; (8000774 <main+0x26c>)
 80006e0:	b2c9      	uxtb	r1, r1
 80006e2:	f003 f8f5 	bl	80038d0 <printf>
	  ledsPattern(ON, ON, ON, OFF);
 80006e6:	2001      	movs	r0, #1
 80006e8:	2300      	movs	r3, #0
 80006ea:	4601      	mov	r1, r0
 80006ec:	4602      	mov	r2, r0
 80006ee:	f7ff feef 	bl	80004d0 <ledsPattern>


	  I2C3->CR1 &= ~I2C_CR1_ACK; // last read
 80006f2:	8833      	ldrh	r3, [r6, #0]
 80006f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006f8:	041b      	lsls	r3, r3, #16
 80006fa:	0c1b      	lsrs	r3, r3, #16
 80006fc:	8033      	strh	r3, [r6, #0]
	  
	  while (!(I2C3->SR1 & I2C_SR1_RXNE));
 80006fe:	8aa3      	ldrh	r3, [r4, #20]
 8000700:	065b      	lsls	r3, r3, #25
 8000702:	d5fc      	bpl.n	80006fe <main+0x1f6>
	  valueRead = I2C3->DR;
	  ledsPattern(ON, ON, ON, ON);
 8000704:	2001      	movs	r0, #1
 8000706:	4603      	mov	r3, r0
 8000708:	4601      	mov	r1, r0
 800070a:	4602      	mov	r2, r0


	  I2C3->CR1 &= ~I2C_CR1_ACK; // last read
	  
	  while (!(I2C3->SR1 & I2C_SR1_RXNE));
	  valueRead = I2C3->DR;
 800070c:	8a35      	ldrh	r5, [r6, #16]
	  ledsPattern(ON, ON, ON, ON);
 800070e:	f7ff fedf 	bl	80004d0 <ledsPattern>
	  
	  I2C3->CR1 |= I2C_CR1_STOP; 
 8000712:	8833      	ldrh	r3, [r6, #0]
 8000714:	b29b      	uxth	r3, r3
 8000716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800071a:	8033      	strh	r3, [r6, #0]
	  
	  while (I2C3->SR2 & I2C_SR2_BUSY); // wait until bus is not busy anymore
 800071c:	8b25      	ldrh	r5, [r4, #24]
 800071e:	f005 0502 	and.w	r5, r5, #2
 8000722:	b2ad      	uxth	r5, r5
 8000724:	2d00      	cmp	r5, #0
 8000726:	d1f9      	bne.n	800071c <main+0x214>
	  ledsPattern(OFF, ON, ON, OFF);
 8000728:	2101      	movs	r1, #1
 800072a:	462b      	mov	r3, r5
 800072c:	460a      	mov	r2, r1
 800072e:	4628      	mov	r0, r5
 8000730:	f7ff fece 	bl	80004d0 <ledsPattern>

  	 bytesToSend = sprintf(buffer, "Found error: %d", (int) error);
 8000734:	462a      	mov	r2, r5
 8000736:	4910      	ldr	r1, [pc, #64]	; (8000778 <main+0x270>)
 8000738:	4668      	mov	r0, sp
 800073a:	f003 f939 	bl	80039b0 <sprintf>
 800073e:	4605      	mov	r5, r0

	  if (enet_get_link_status() == ENET_LINK_UP)
 8000740:	f000 fcb0 	bl	80010a4 <enet_get_link_status>
 8000744:	2801      	cmp	r0, #1
 8000746:	d002      	beq.n	800074e <main+0x246>
      {
      	volatile uint8_t* messages = (uint8_t*) buffer;
        enet_send_state(messages, bytesToSend);
      }
      enet_process_rx_ring();
 8000748:	f000 fdaa 	bl	80012a0 <enet_process_rx_ring>
  }
 800074c:	e757      	b.n	80005fe <main+0xf6>
  	 bytesToSend = sprintf(buffer, "Found error: %d", (int) error);

	  if (enet_get_link_status() == ENET_LINK_UP)
      {
      	volatile uint8_t* messages = (uint8_t*) buffer;
        enet_send_state(messages, bytesToSend);
 800074e:	b2a9      	uxth	r1, r5
 8000750:	4668      	mov	r0, sp
 8000752:	f000 fe5f 	bl	8001414 <enet_send_state>
 8000756:	e7f7      	b.n	8000748 <main+0x240>
 8000758:	40023800 	.word	0x40023800
 800075c:	40020400 	.word	0x40020400
 8000760:	40020000 	.word	0x40020000
 8000764:	40020800 	.word	0x40020800
 8000768:	40005400 	.word	0x40005400
 800076c:	40005c00 	.word	0x40005c00
 8000770:	000f423f 	.word	0x000f423f
 8000774:	0800c530 	.word	0x0800c530
 8000778:	0800c540 	.word	0x0800c540

0800077c <udelay>:
	}
}

void udelay(int utime)
{
	int mytime = SYSTIME;
 800077c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000780:	6a51      	ldr	r1, [r2, #36]	; 0x24
	while(SYSTIME - mytime < utime);
 8000782:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000784:	1a5b      	subs	r3, r3, r1
 8000786:	4283      	cmp	r3, r0
 8000788:	d3fb      	bcc.n	8000782 <udelay+0x6>
}
 800078a:	4770      	bx	lr

0800078c <unmapped_vector>:
  while (1) { } // hopefully we never get here...
}

void unmapped_vector()
{
  while (1) { } // spin to allow jtag trap
 800078c:	e7fe      	b.n	800078c <unmapped_vector>
 800078e:	bf00      	nop

08000790 <reset_vector>:
extern int main();

void startup_clock_init_fail() { while (1) { } }

void reset_vector()
{
 8000790:	b510      	push	{r4, lr}
 8000792:	b082      	sub	sp, #8
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
  //WDT->WDT_MR = WDT_MR_WDDIS; // disable watchdog for now
  // set up data segment
  __disable_irq();
  pSrc = &_srelocate_flash;
  pDest = &_srelocate;
  if (pSrc != pDest)
 8000796:	4a46      	ldr	r2, [pc, #280]	; (80008b0 <reset_vector+0x120>)
 8000798:	4946      	ldr	r1, [pc, #280]	; (80008b4 <reset_vector+0x124>)
 800079a:	428a      	cmp	r2, r1
 800079c:	d00e      	beq.n	80007bc <reset_vector+0x2c>
    for (; pDest < &_erelocate; )
 800079e:	4b46      	ldr	r3, [pc, #280]	; (80008b8 <reset_vector+0x128>)
 80007a0:	4299      	cmp	r1, r3
 80007a2:	d20b      	bcs.n	80007bc <reset_vector+0x2c>
 80007a4:	43c8      	mvns	r0, r1
 80007a6:	4403      	add	r3, r0
 80007a8:	f023 0303 	bic.w	r3, r3, #3
 80007ac:	3304      	adds	r3, #4
 80007ae:	4413      	add	r3, r2
      *pDest++ = *pSrc++;
 80007b0:	f852 0b04 	ldr.w	r0, [r2], #4
 80007b4:	f841 0b04 	str.w	r0, [r1], #4
  // set up data segment
  __disable_irq();
  pSrc = &_srelocate_flash;
  pDest = &_srelocate;
  if (pSrc != pDest)
    for (; pDest < &_erelocate; )
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d1f9      	bne.n	80007b0 <reset_vector+0x20>
      *pDest++ = *pSrc++;
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
 80007bc:	4b3f      	ldr	r3, [pc, #252]	; (80008bc <reset_vector+0x12c>)
 80007be:	4a40      	ldr	r2, [pc, #256]	; (80008c0 <reset_vector+0x130>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d20a      	bcs.n	80007da <reset_vector+0x4a>
 80007c4:	43d9      	mvns	r1, r3
 80007c6:	440a      	add	r2, r1
 80007c8:	f022 0203 	bic.w	r2, r2, #3
 80007cc:	3204      	adds	r2, #4
 80007ce:	441a      	add	r2, r3
    *pDest++ = 0;
 80007d0:	2100      	movs	r1, #0
 80007d2:	f843 1b04 	str.w	r1, [r3], #4
  pDest = &_srelocate;
  if (pSrc != pDest)
    for (; pDest < &_erelocate; )
      *pDest++ = *pSrc++;
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d1fb      	bne.n	80007d2 <reset_vector+0x42>
    *pDest++ = 0;
  //__libc_init_array() ;
  SCB->CPACR |= ((3UL << (10*2)) | (3UL << (11*2))); // activate the FPU
 80007da:	493a      	ldr	r1, [pc, #232]	; (80008c4 <reset_vector+0x134>)
  RCC->CR |= 0x1; // ensure the HSI (internal) oscillator is on
 80007dc:	4b3a      	ldr	r3, [pc, #232]	; (80008c8 <reset_vector+0x138>)
      *pDest++ = *pSrc++;
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
    *pDest++ = 0;
  //__libc_init_array() ;
  SCB->CPACR |= ((3UL << (10*2)) | (3UL << (11*2))); // activate the FPU
 80007de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
  RCC->CR |= 0x1; // ensure the HSI (internal) oscillator is on
  RCC->CFGR = 0; // ensure the HSI oscillator is the clock source
  RCC->CR &= 0xfef6ffff; // turn off the main PLL and HSE oscillator
  RCC->PLLCFGR = 0x24003010; // ensure PLLCFGR is at reset state
 80007e2:	483a      	ldr	r0, [pc, #232]	; (80008cc <reset_vector+0x13c>)
      *pDest++ = *pSrc++;
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
    *pDest++ = 0;
  //__libc_init_array() ;
  SCB->CPACR |= ((3UL << (10*2)) | (3UL << (11*2))); // activate the FPU
 80007e4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80007e8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= 0x1; // ensure the HSI (internal) oscillator is on
 80007ec:	681a      	ldr	r2, [r3, #0]
  RCC->CFGR = 0; // ensure the HSI oscillator is the clock source
 80007ee:	2100      	movs	r1, #0
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
    *pDest++ = 0;
  //__libc_init_array() ;
  SCB->CPACR |= ((3UL << (10*2)) | (3UL << (11*2))); // activate the FPU
  RCC->CR |= 0x1; // ensure the HSI (internal) oscillator is on
 80007f0:	f042 0201 	orr.w	r2, r2, #1
 80007f4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0; // ensure the HSI oscillator is the clock source
 80007f6:	6099      	str	r1, [r3, #8]
  RCC->CR &= 0xfef6ffff; // turn off the main PLL and HSE oscillator
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80007fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000802:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010; // ensure PLLCFGR is at reset state
 8000804:	6058      	str	r0, [r3, #4]
  RCC->CR &= 0xfffbffff; // reset HSEBYP (i.e., HSE is *not* bypassed)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800080c:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x0; // disable all RCC interrupts
 800080e:	60d9      	str	r1, [r3, #12]
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000816:	601a      	str	r2, [r3, #0]
  for (volatile uint32_t i = 0; 
 8000818:	9101      	str	r1, [sp, #4]
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
 800081a:	9a01      	ldr	r2, [sp, #4]
  RCC->CR &= 0xfef6ffff; // turn off the main PLL and HSE oscillator
  RCC->PLLCFGR = 0x24003010; // ensure PLLCFGR is at reset state
  RCC->CR &= 0xfffbffff; // reset HSEBYP (i.e., HSE is *not* bypassed)
  RCC->CIR = 0x0; // disable all RCC interrupts
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
  for (volatile uint32_t i = 0; 
 800081c:	f5b2 4fa0 	cmp.w	r2, #20480	; 0x5000
 8000820:	d307      	bcc.n	8000832 <reset_vector+0xa2>
 8000822:	e009      	b.n	8000838 <reset_vector+0xa8>
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
 8000824:	9a01      	ldr	r2, [sp, #4]
 8000826:	3201      	adds	r2, #1
 8000828:	9201      	str	r2, [sp, #4]
 800082a:	9a01      	ldr	r2, [sp, #4]
  RCC->CR &= 0xfef6ffff; // turn off the main PLL and HSE oscillator
  RCC->PLLCFGR = 0x24003010; // ensure PLLCFGR is at reset state
  RCC->CR &= 0xfffbffff; // reset HSEBYP (i.e., HSE is *not* bypassed)
  RCC->CIR = 0x0; // disable all RCC interrupts
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
  for (volatile uint32_t i = 0; 
 800082c:	f5b2 4fa0 	cmp.w	r2, #20480	; 0x5000
 8000830:	d202      	bcs.n	8000838 <reset_vector+0xa8>
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	0390      	lsls	r0, r2, #14
 8000836:	d5f5      	bpl.n	8000824 <reset_vector+0x94>
  { } // wait for either timeout or HSE to spin up
  FLASH->ACR = 0; // ensure the caches are turned off, so we can reset them
 8000838:	4a25      	ldr	r2, [pc, #148]	; (80008d0 <reset_vector+0x140>)
  FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST; // flush the cache
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | 
               FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS; // re-enable the caches
  if (!(RCC->CR & RCC_CR_HSERDY))
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <reset_vector+0x138>)
  RCC->CIR = 0x0; // disable all RCC interrupts
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
  for (volatile uint32_t i = 0; 
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
  { } // wait for either timeout or HSE to spin up
  FLASH->ACR = 0; // ensure the caches are turned off, so we can reset them
 800083c:	2400      	movs	r4, #0
  FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST; // flush the cache
 800083e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | 
 8000842:	f240 7105 	movw	r1, #1797	; 0x705
  RCC->CIR = 0x0; // disable all RCC interrupts
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
  for (volatile uint32_t i = 0; 
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
  { } // wait for either timeout or HSE to spin up
  FLASH->ACR = 0; // ensure the caches are turned off, so we can reset them
 8000846:	6014      	str	r4, [r2, #0]
  FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST; // flush the cache
 8000848:	6010      	str	r0, [r2, #0]
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | 
 800084a:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS; // re-enable the caches
  if (!(RCC->CR & RCC_CR_HSERDY))
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	0394      	lsls	r4, r2, #14
 8000850:	d400      	bmi.n	8000854 <reset_vector+0xc4>
 8000852:	e7fe      	b.n	8000852 <reset_vector+0xc2>
    startup_clock_init_fail(); // go there and spin forever. BUH BYE
  RCC->APB1ENR |= RCC_APB1ENR_PWREN; // clock up the power controller
 8000854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_VOS; // ensure the voltage regulator is at max beef
 8000856:	491f      	ldr	r1, [pc, #124]	; (80008d4 <reset_vector+0x144>)
  // PLL_VCO = 25 mhz / PLL_M * PLL_N = 336 MHz
  #define PLL_P   2
  // SYSCLK = PLL_VCO / PLL_P = 168 MHz
  #define PLL_Q   7
  // USB clock = PLL_VCO / PLL_Q = 48 MHz
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1)-1) << 16) |
 8000858:	481f      	ldr	r0, [pc, #124]	; (80008d8 <reset_vector+0x148>)
  FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST; // flush the cache
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | 
               FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS; // re-enable the caches
  if (!(RCC->CR & RCC_CR_HSERDY))
    startup_clock_init_fail(); // go there and spin forever. BUH BYE
  RCC->APB1ENR |= RCC_APB1ENR_PWREN; // clock up the power controller
 800085a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800085e:	641a      	str	r2, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_VOS; // ensure the voltage regulator is at max beef
 8000860:	680a      	ldr	r2, [r1, #0]
 8000862:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000866:	600a      	str	r2, [r1, #0]
                         // this will let us run at 168 MHz without overdrive
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1; // set HCLK (AHB clock) to sysclock
 8000868:	689a      	ldr	r2, [r3, #8]
 800086a:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV2; // set APB high-speed clock to sysclock/2
 800086c:	689a      	ldr	r2, [r3, #8]
 800086e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000872:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV4; // set APB  low-speed clock to sysclock/4
 8000874:	689a      	ldr	r2, [r3, #8]
 8000876:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800087a:	609a      	str	r2, [r3, #8]
  // PLL_VCO = 25 mhz / PLL_M * PLL_N = 336 MHz
  #define PLL_P   2
  // SYSCLK = PLL_VCO / PLL_P = 168 MHz
  #define PLL_Q   7
  // USB clock = PLL_VCO / PLL_Q = 48 MHz
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1)-1) << 16) |
 800087c:	6058      	str	r0, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
  RCC->CR |= RCC_CR_PLLON; // start spinning up the PLL
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000884:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY)) { } // wait until it's spun up
 8000886:	6819      	ldr	r1, [r3, #0]
 8000888:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <reset_vector+0x138>)
 800088a:	0189      	lsls	r1, r1, #6
 800088c:	d5fb      	bpl.n	8000886 <reset_vector+0xf6>
  RCC->CFGR &= ~((uint32_t)RCC_CFGR_SW); // select internal oscillator
 800088e:	6893      	ldr	r3, [r2, #8]
 8000890:	f023 0303 	bic.w	r3, r3, #3
 8000894:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL; // select PLL as clock source
 8000896:	6893      	ldr	r3, [r2, #8]
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL) { } // wait for it...
 800089e:	6893      	ldr	r3, [r2, #8]
 80008a0:	f003 030c 	and.w	r3, r3, #12
 80008a4:	2b08      	cmp	r3, #8
 80008a6:	d1fa      	bne.n	800089e <reset_vector+0x10e>
  // hooray we're done! we're now running at 168 MHz.
  main(); // jump to application main()
 80008a8:	f7ff fe2e 	bl	8000508 <main>
  while (1) { } // hopefully we never get here...
 80008ac:	e7fe      	b.n	80008ac <reset_vector+0x11c>
 80008ae:	bf00      	nop
 80008b0:	0800cba4 	.word	0x0800cba4
 80008b4:	20000000 	.word	0x20000000
 80008b8:	20000944 	.word	0x20000944
 80008bc:	20000948 	.word	0x20000948
 80008c0:	20010670 	.word	0x20010670
 80008c4:	e000ed00 	.word	0xe000ed00
 80008c8:	40023800 	.word	0x40023800
 80008cc:	24003010 	.word	0x24003010
 80008d0:	40023c00 	.word	0x40023c00
 80008d4:	40007000 	.word	0x40007000
 80008d8:	07405419 	.word	0x07405419

080008dc <startup_clock_init_fail>:
#include "./stm32/stm32f4xx.h"

extern uint32_t _srelocate_flash, _srelocate, _erelocate, _ebss, _sbss;
extern int main();

void startup_clock_init_fail() { while (1) { } }
 80008dc:	e7fe      	b.n	80008dc <startup_clock_init_fail>
 80008de:	bf00      	nop

080008e0 <leds_init>:
#define PORTB_LED2 10
#define PORTE_LED3 15

void leds_init()
{
  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 80008e0:	4a0a      	ldr	r2, [pc, #40]	; (800090c <leds_init+0x2c>)
  GPIOE->MODER   |= (1 << (PORTE_LED0 * 2)) |
 80008e2:	480b      	ldr	r0, [pc, #44]	; (8000910 <leds_init+0x30>)
#define PORTB_LED2 10
#define PORTE_LED3 15

void leds_init()
{
  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 80008e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  GPIOE->MODER   |= (1 << (PORTE_LED0 * 2)) |
                    (1 << (PORTE_LED1 * 2)) |
                    (1 << (PORTE_LED3 * 2));

  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOBEN;
  GPIOB->MODER   |= (1 << (PORTB_LED2 * 2));
 80008e6:	490b      	ldr	r1, [pc, #44]	; (8000914 <leds_init+0x34>)
#define PORTB_LED2 10
#define PORTE_LED3 15

void leds_init()
{
  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 80008e8:	f043 0310 	orr.w	r3, r3, #16
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOE->MODER   |= (1 << (PORTE_LED0 * 2)) |
 80008ee:	6803      	ldr	r3, [r0, #0]
 80008f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80008f4:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80008f8:	6003      	str	r3, [r0, #0]
                    (1 << (PORTE_LED1 * 2)) |
                    (1 << (PORTE_LED3 * 2));

  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOBEN;
 80008fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOB->MODER   |= (1 << (PORTB_LED2 * 2));
 8000902:	680b      	ldr	r3, [r1, #0]
 8000904:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000908:	600b      	str	r3, [r1, #0]
 800090a:	4770      	bx	lr
 800090c:	40023800 	.word	0x40023800
 8000910:	40021000 	.word	0x40021000
 8000914:	40020400 	.word	0x40020400

08000918 <leds_on>:
}

void leds_on(uint8_t led)
{
  if (led == 0)
 8000918:	b148      	cbz	r0, 800092e <leds_on+0x16>
    GPIOE->BSRRL = 1 << PORTE_LED0;
  else if (led == 1)
 800091a:	2801      	cmp	r0, #1
 800091c:	d00b      	beq.n	8000936 <leds_on+0x1e>
    GPIOE->BSRRL = 1 << PORTE_LED1;
  else if (led == 2)
 800091e:	2802      	cmp	r0, #2
 8000920:	d012      	beq.n	8000948 <leds_on+0x30>
    GPIOB->BSRRL = 1 << PORTB_LED2;
  else if (led == 3)
 8000922:	2803      	cmp	r0, #3
 8000924:	d00b      	beq.n	800093e <leds_on+0x26>
    GPIOE->BSRRL = 1 << PORTE_LED3;
  else
    printf("LED %d does not exist\n", led);
 8000926:	4601      	mov	r1, r0
 8000928:	480a      	ldr	r0, [pc, #40]	; (8000954 <leds_on+0x3c>)
 800092a:	f002 bfd1 	b.w	80038d0 <printf>
}

void leds_on(uint8_t led)
{
  if (led == 0)
    GPIOE->BSRRL = 1 << PORTE_LED0;
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <leds_on+0x40>)
 8000930:	2208      	movs	r2, #8
 8000932:	831a      	strh	r2, [r3, #24]
 8000934:	4770      	bx	lr
  else if (led == 1)
    GPIOE->BSRRL = 1 << PORTE_LED1;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <leds_on+0x40>)
 8000938:	2210      	movs	r2, #16
 800093a:	831a      	strh	r2, [r3, #24]
 800093c:	4770      	bx	lr
  else if (led == 2)
    GPIOB->BSRRL = 1 << PORTB_LED2;
  else if (led == 3)
    GPIOE->BSRRL = 1 << PORTE_LED3;
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <leds_on+0x40>)
 8000940:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000944:	831a      	strh	r2, [r3, #24]
 8000946:	4770      	bx	lr
  if (led == 0)
    GPIOE->BSRRL = 1 << PORTE_LED0;
  else if (led == 1)
    GPIOE->BSRRL = 1 << PORTE_LED1;
  else if (led == 2)
    GPIOB->BSRRL = 1 << PORTB_LED2;
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <leds_on+0x44>)
 800094a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800094e:	831a      	strh	r2, [r3, #24]
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	0800c550 	.word	0x0800c550
 8000958:	40021000 	.word	0x40021000
 800095c:	40020400 	.word	0x40020400

08000960 <leds_off>:
    printf("LED %d does not exist\n", led);
}

void leds_off(uint8_t led)
{
  if (led == 0)
 8000960:	b148      	cbz	r0, 8000976 <leds_off+0x16>
    GPIOE->BSRRH = 1 << PORTE_LED0;
  else if (led == 1)
 8000962:	2801      	cmp	r0, #1
 8000964:	d00b      	beq.n	800097e <leds_off+0x1e>
    GPIOE->BSRRH = 1 << PORTE_LED1;
  else if (led == 2)
 8000966:	2802      	cmp	r0, #2
 8000968:	d012      	beq.n	8000990 <leds_off+0x30>
    GPIOB->BSRRH = 1 << PORTB_LED2;
  else if (led == 3)
 800096a:	2803      	cmp	r0, #3
 800096c:	d00b      	beq.n	8000986 <leds_off+0x26>
    GPIOE->BSRRH = 1 << PORTE_LED3;
  else
    printf("LED %d does not exist\n", led);
 800096e:	4601      	mov	r1, r0
 8000970:	480a      	ldr	r0, [pc, #40]	; (800099c <leds_off+0x3c>)
 8000972:	f002 bfad 	b.w	80038d0 <printf>
}

void leds_off(uint8_t led)
{
  if (led == 0)
    GPIOE->BSRRH = 1 << PORTE_LED0;
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <leds_off+0x40>)
 8000978:	2208      	movs	r2, #8
 800097a:	835a      	strh	r2, [r3, #26]
 800097c:	4770      	bx	lr
  else if (led == 1)
    GPIOE->BSRRH = 1 << PORTE_LED1;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <leds_off+0x40>)
 8000980:	2210      	movs	r2, #16
 8000982:	835a      	strh	r2, [r3, #26]
 8000984:	4770      	bx	lr
  else if (led == 2)
    GPIOB->BSRRH = 1 << PORTB_LED2;
  else if (led == 3)
    GPIOE->BSRRH = 1 << PORTE_LED3;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <leds_off+0x40>)
 8000988:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800098c:	835a      	strh	r2, [r3, #26]
 800098e:	4770      	bx	lr
  if (led == 0)
    GPIOE->BSRRH = 1 << PORTE_LED0;
  else if (led == 1)
    GPIOE->BSRRH = 1 << PORTE_LED1;
  else if (led == 2)
    GPIOB->BSRRH = 1 << PORTB_LED2;
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <leds_off+0x44>)
 8000992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000996:	835a      	strh	r2, [r3, #26]
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	0800c550 	.word	0x0800c550
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40020400 	.word	0x40020400

080009a8 <leds_toggle>:
    printf("LED %d does not exist\n", led);
}

void leds_toggle(uint8_t led)
{
  if (led == 0)
 80009a8:	b148      	cbz	r0, 80009be <leds_toggle+0x16>
    GPIOE->ODR ^= 1 << PORTE_LED0;
  else if (led == 1)
 80009aa:	2801      	cmp	r0, #1
 80009ac:	d00d      	beq.n	80009ca <leds_toggle+0x22>
    GPIOE->ODR ^= 1 << PORTE_LED1;
  else if (led == 2)
 80009ae:	2802      	cmp	r0, #2
 80009b0:	d017      	beq.n	80009e2 <leds_toggle+0x3a>
    GPIOB->ODR ^= 1 << PORTB_LED2;
  else if (led == 3)
 80009b2:	2803      	cmp	r0, #3
 80009b4:	d00f      	beq.n	80009d6 <leds_toggle+0x2e>
    GPIOE->ODR ^= 1 << PORTE_LED3;
  else
    printf("LED %d does not exist\n", led);
 80009b6:	4601      	mov	r1, r0
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <leds_toggle+0x48>)
 80009ba:	f002 bf89 	b.w	80038d0 <printf>
}

void leds_toggle(uint8_t led)
{
  if (led == 0)
    GPIOE->ODR ^= 1 << PORTE_LED0;
 80009be:	4a0d      	ldr	r2, [pc, #52]	; (80009f4 <leds_toggle+0x4c>)
 80009c0:	6953      	ldr	r3, [r2, #20]
 80009c2:	f083 0308 	eor.w	r3, r3, #8
 80009c6:	6153      	str	r3, [r2, #20]
 80009c8:	4770      	bx	lr
  else if (led == 1)
    GPIOE->ODR ^= 1 << PORTE_LED1;
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <leds_toggle+0x4c>)
 80009cc:	6953      	ldr	r3, [r2, #20]
 80009ce:	f083 0310 	eor.w	r3, r3, #16
 80009d2:	6153      	str	r3, [r2, #20]
 80009d4:	4770      	bx	lr
  else if (led == 2)
    GPIOB->ODR ^= 1 << PORTB_LED2;
  else if (led == 3)
    GPIOE->ODR ^= 1 << PORTE_LED3;
 80009d6:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <leds_toggle+0x4c>)
 80009d8:	6953      	ldr	r3, [r2, #20]
 80009da:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 80009de:	6153      	str	r3, [r2, #20]
 80009e0:	4770      	bx	lr
  if (led == 0)
    GPIOE->ODR ^= 1 << PORTE_LED0;
  else if (led == 1)
    GPIOE->ODR ^= 1 << PORTE_LED1;
  else if (led == 2)
    GPIOB->ODR ^= 1 << PORTB_LED2;
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <leds_toggle+0x50>)
 80009e4:	6953      	ldr	r3, [r2, #20]
 80009e6:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 80009ea:	6153      	str	r3, [r2, #20]
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	0800c550 	.word	0x0800c550
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40020400 	.word	0x40020400

080009fc <console_init>:

static volatile uint8_t s_console_init_complete = 0;

void console_init()
{
  s_console_init_complete = 1;
 80009fc:	4815      	ldr	r0, [pc, #84]	; (8000a54 <console_init+0x58>)
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 80009fe:	4916      	ldr	r1, [pc, #88]	; (8000a58 <console_init+0x5c>)
  RCC->APB1ENR |= RCC_APB1ENR_UART8EN;
  GPIOE->MODER   |= (0x2) << (PORTE_TX * 2);
 8000a00:	4a16      	ldr	r2, [pc, #88]	; (8000a5c <console_init+0x60>)
  GPIOE->AFR[0]  |= (0x8) << (PORTE_TX * 4);
  // RX not used at the moment. TX only used for stdout
  UART8->CR1 &= ~USART_CR1_UE;
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <console_init+0x64>)
#define PORTE_TX 1

static volatile uint8_t s_console_init_complete = 0;

void console_init()
{
 8000a04:	b410      	push	{r4}
  s_console_init_complete = 1;
 8000a06:	2401      	movs	r4, #1
 8000a08:	7004      	strb	r4, [r0, #0]
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000a0a:	6b08      	ldr	r0, [r1, #48]	; 0x30
  UART8->CR1 &= ~USART_CR1_UE;
  UART8->CR1 |=  USART_CR1_TE | USART_CR1_RE;
  // we want 1 megabit. do this with mantissa=2 and fraction (sixteenths)=10
  UART8->BRR  = (((uint16_t)2) << 4) | 10;
  UART8->CR1 |=  USART_CR1_UE;
}
 8000a0c:	f85d 4b04 	ldr.w	r4, [sp], #4
static volatile uint8_t s_console_init_complete = 0;

void console_init()
{
  s_console_init_complete = 1;
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000a10:	f040 0010 	orr.w	r0, r0, #16
 8000a14:	6308      	str	r0, [r1, #48]	; 0x30
  RCC->APB1ENR |= RCC_APB1ENR_UART8EN;
 8000a16:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8000a18:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8000a1c:	6408      	str	r0, [r1, #64]	; 0x40
  GPIOE->MODER   |= (0x2) << (PORTE_TX * 2);
 8000a1e:	6811      	ldr	r1, [r2, #0]
 8000a20:	f041 0108 	orr.w	r1, r1, #8
 8000a24:	6011      	str	r1, [r2, #0]
  GPIOE->AFR[0]  |= (0x8) << (PORTE_TX * 4);
 8000a26:	6a11      	ldr	r1, [r2, #32]
 8000a28:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000a2c:	6211      	str	r1, [r2, #32]
  // RX not used at the moment. TX only used for stdout
  UART8->CR1 &= ~USART_CR1_UE;
 8000a2e:	899a      	ldrh	r2, [r3, #12]
 8000a30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a34:	0412      	lsls	r2, r2, #16
 8000a36:	0c12      	lsrs	r2, r2, #16
 8000a38:	819a      	strh	r2, [r3, #12]
  UART8->CR1 |=  USART_CR1_TE | USART_CR1_RE;
 8000a3a:	899a      	ldrh	r2, [r3, #12]
 8000a3c:	b292      	uxth	r2, r2
 8000a3e:	f042 020c 	orr.w	r2, r2, #12
  // we want 1 megabit. do this with mantissa=2 and fraction (sixteenths)=10
  UART8->BRR  = (((uint16_t)2) << 4) | 10;
 8000a42:	212a      	movs	r1, #42	; 0x2a
  RCC->APB1ENR |= RCC_APB1ENR_UART8EN;
  GPIOE->MODER   |= (0x2) << (PORTE_TX * 2);
  GPIOE->AFR[0]  |= (0x8) << (PORTE_TX * 4);
  // RX not used at the moment. TX only used for stdout
  UART8->CR1 &= ~USART_CR1_UE;
  UART8->CR1 |=  USART_CR1_TE | USART_CR1_RE;
 8000a44:	819a      	strh	r2, [r3, #12]
  // we want 1 megabit. do this with mantissa=2 and fraction (sixteenths)=10
  UART8->BRR  = (((uint16_t)2) << 4) | 10;
 8000a46:	8119      	strh	r1, [r3, #8]
  UART8->CR1 |=  USART_CR1_UE;
 8000a48:	899a      	ldrh	r2, [r3, #12]
 8000a4a:	b292      	uxth	r2, r2
 8000a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000a50:	819a      	strh	r2, [r3, #12]
}
 8000a52:	4770      	bx	lr
 8000a54:	20000964 	.word	0x20000964
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40007c00 	.word	0x40007c00

08000a64 <console_send_block>:

void console_send_block(const uint8_t *buf, uint32_t len)
{
 8000a64:	b538      	push	{r3, r4, r5, lr}
  if (!s_console_init_complete)
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <console_send_block+0x38>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
  UART8->BRR  = (((uint16_t)2) << 4) | 10;
  UART8->CR1 |=  USART_CR1_UE;
}

void console_send_block(const uint8_t *buf, uint32_t len)
{
 8000a6a:	4605      	mov	r5, r0
 8000a6c:	460c      	mov	r4, r1
  if (!s_console_init_complete)
 8000a6e:	b18b      	cbz	r3, 8000a94 <console_send_block+0x30>
    console_init();
  for (uint32_t i = 0; i < len; i++)
 8000a70:	b15c      	cbz	r4, 8000a8a <console_send_block+0x26>
  {
    while (!(UART8->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <console_send_block+0x3c>)
 8000a74:	1929      	adds	r1, r5, r4
 8000a76:	4628      	mov	r0, r5
 8000a78:	4614      	mov	r4, r2
 8000a7a:	8813      	ldrh	r3, [r2, #0]
 8000a7c:	061d      	lsls	r5, r3, #24
 8000a7e:	d5fc      	bpl.n	8000a7a <console_send_block+0x16>
    UART8->DR = buf[i];
 8000a80:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000a84:	80a3      	strh	r3, [r4, #4]

void console_send_block(const uint8_t *buf, uint32_t len)
{
  if (!s_console_init_complete)
    console_init();
  for (uint32_t i = 0; i < len; i++)
 8000a86:	4288      	cmp	r0, r1
 8000a88:	d1f7      	bne.n	8000a7a <console_send_block+0x16>
  {
    while (!(UART8->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
    UART8->DR = buf[i];
  }
  while (!(UART8->SR & USART_SR_TC)) { } // wait for TX to finish
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <console_send_block+0x3c>)
 8000a8c:	8813      	ldrh	r3, [r2, #0]
 8000a8e:	065b      	lsls	r3, r3, #25
 8000a90:	d5fc      	bpl.n	8000a8c <console_send_block+0x28>
  //for (volatile int i = 0; i < 100000; i++) { } // give usb uart some time...
}
 8000a92:	bd38      	pop	{r3, r4, r5, pc}
}

void console_send_block(const uint8_t *buf, uint32_t len)
{
  if (!s_console_init_complete)
    console_init();
 8000a94:	f7ff ffb2 	bl	80009fc <console_init>
 8000a98:	e7ea      	b.n	8000a70 <console_send_block+0xc>
 8000a9a:	bf00      	nop
 8000a9c:	20000964 	.word	0x20000964
 8000aa0:	40007c00 	.word	0x40007c00

08000aa4 <_sbrk>:

caddr_t _sbrk(int incr)
{
  static unsigned char *heap = NULL ;
  unsigned char *prev_heap ;
  if ( heap == NULL )
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <_sbrk+0x14>)
 8000aa6:	4905      	ldr	r1, [pc, #20]	; (8000abc <_sbrk+0x18>)
 8000aa8:	6813      	ldr	r3, [r2, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	bf08      	it	eq
 8000aae:	460b      	moveq	r3, r1
    heap = (unsigned char *)&_end ;
  prev_heap = heap;
  heap += incr ;
 8000ab0:	4418      	add	r0, r3
 8000ab2:	6010      	str	r0, [r2, #0]
  return (caddr_t) prev_heap ;
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	4770      	bx	lr
 8000ab8:	20000968 	.word	0x20000968
 8000abc:	20014670 	.word	0x20014670

08000ac0 <_kill>:

int _kill(__attribute__((unused)) int pid, 
          __attribute__((unused)) int sig) { return -1; }
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <_exit>:
void _exit(__attribute__((unused)) int status) { while (1) {} } // spin...
 8000ac8:	e7fe      	b.n	8000ac8 <_exit>
 8000aca:	bf00      	nop

08000acc <_getpid>:
int _getpid() { return 1; }
 8000acc:	2001      	movs	r0, #1
 8000ace:	4770      	bx	lr

08000ad0 <_write>:

int _write(__attribute__((unused)) int fd, const void *buf, size_t count)
{
 8000ad0:	b510      	push	{r4, lr}
  console_send_block((uint8_t *)buf, count);
 8000ad2:	4608      	mov	r0, r1
          __attribute__((unused)) int sig) { return -1; }
void _exit(__attribute__((unused)) int status) { while (1) {} } // spin...
int _getpid() { return 1; }

int _write(__attribute__((unused)) int fd, const void *buf, size_t count)
{
 8000ad4:	4614      	mov	r4, r2
  console_send_block((uint8_t *)buf, count);
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	f7ff ffc4 	bl	8000a64 <console_send_block>
  return count;
}
 8000adc:	4620      	mov	r0, r4
 8000ade:	bd10      	pop	{r4, pc}

08000ae0 <_close>:
int _close(__attribute__((unused)) int fd) { return -1; }
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <_fstat>:
int _fstat(__attribute__((unused)) int fd, 
           __attribute__((unused)) struct stat *st)
{
  st->st_mode = S_IFCHR;
 8000ae8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aec:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000aee:	2000      	movs	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <_isatty>:
int _isatty(__attribute__((unused)) int fd) { return 1; }
 8000af4:	2001      	movs	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <_lseek>:
off_t _lseek(__attribute__((unused)) int fd, 
             __attribute__((unused)) off_t offset, 
             __attribute__((unused)) int whence) { return 0; }
 8000af8:	2000      	movs	r0, #0
 8000afa:	4770      	bx	lr

08000afc <_read>:
ssize_t _read(__attribute__((unused)) int fd, 
              __attribute__((unused)) void *buf, 
              __attribute__((unused)) size_t count) { return 0; }
 8000afc:	2000      	movs	r0, #0
 8000afe:	4770      	bx	lr

08000b00 <fputc>:
FILE __stdout;
FILE __stderr;
int fputc(__attribute__((unused)) int ch, __attribute__((unused)) FILE *f)
{
  return 0;
}
 8000b00:	2000      	movs	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <_ttywrch>:
void _ttywrch(__attribute__((unused)) int ch) { }
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <enet_read_phy_reg>:

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8000b08:	4909      	ldr	r1, [pc, #36]	; (8000b30 <enet_read_phy_reg+0x28>)
 8000b0a:	690a      	ldr	r2, [r1, #16]
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <enet_read_phy_reg+0x28>)
 8000b0e:	07d2      	lsls	r2, r2, #31
 8000b10:	d4fb      	bmi.n	8000b0a <enet_read_phy_reg+0x2>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
                  ((reg_idx & 0x1f) << 6) |
 8000b12:	f000 021f 	and.w	r2, r0, #31
 8000b16:	0192      	lsls	r2, r2, #6
                  ETH_MACMIIAR_CR_Div102  | // clock divider
 8000b18:	f442 6201 	orr.w	r2, r2, #2064	; 0x810
 8000b1c:	f042 0201 	orr.w	r2, r2, #1
///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 8000b20:	611a      	str	r2, [r3, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8000b22:	691a      	ldr	r2, [r3, #16]
 8000b24:	4902      	ldr	r1, [pc, #8]	; (8000b30 <enet_read_phy_reg+0x28>)
 8000b26:	07d2      	lsls	r2, r2, #31
 8000b28:	d4fb      	bmi.n	8000b22 <enet_read_phy_reg+0x1a>
  return ETH->MACMIIDR & 0xffff;
 8000b2a:	6948      	ldr	r0, [r1, #20]
}
 8000b2c:	b280      	uxth	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	40028000 	.word	0x40028000

08000b34 <enet_write_phy_reg>:

void enet_write_phy_reg(const uint8_t reg_idx, const uint16_t reg_val)
{
 8000b34:	b430      	push	{r4, r5}
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8000b36:	4d15      	ldr	r5, [pc, #84]	; (8000b8c <enet_write_phy_reg+0x58>)
 8000b38:	692b      	ldr	r3, [r5, #16]
 8000b3a:	4c14      	ldr	r4, [pc, #80]	; (8000b8c <enet_write_phy_reg+0x58>)
 8000b3c:	07da      	lsls	r2, r3, #31
 8000b3e:	d4fb      	bmi.n	8000b38 <enet_write_phy_reg+0x4>
  ETH->MACMIIDR = reg_val; // set the outgoing data word
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11)   |
                  ((reg_idx & 0x1f) << 6) |
 8000b40:	f000 021f 	and.w	r2, r0, #31
 8000b44:	0192      	lsls	r2, r2, #6
                  ETH_MACMIIAR_CR_Div102  | // MDC clock divider
                  ETH_MACMIIAR_MW         | // set the write bit
 8000b46:	f442 6301 	orr.w	r3, r2, #2064	; 0x810
 8000b4a:	f043 0303 	orr.w	r3, r3, #3
}

void enet_write_phy_reg(const uint8_t reg_idx, const uint16_t reg_val)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIDR = reg_val; // set the outgoing data word
 8000b4e:	6161      	str	r1, [r4, #20]
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11)   |
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // MDC clock divider
                  ETH_MACMIIAR_MW         | // set the write bit
                  ETH_MACMIIAR_MB; // start it up
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8000b50:	4625      	mov	r5, r4

void enet_write_phy_reg(const uint8_t reg_idx, const uint16_t reg_val)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIDR = reg_val; // set the outgoing data word
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11)   |
 8000b52:	6123      	str	r3, [r4, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // MDC clock divider
                  ETH_MACMIIAR_MW         | // set the write bit
                  ETH_MACMIIAR_MB; // start it up
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8000b54:	692b      	ldr	r3, [r5, #16]
 8000b56:	07db      	lsls	r3, r3, #31
 8000b58:	d4fc      	bmi.n	8000b54 <enet_write_phy_reg+0x20>

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8000b5a:	4d0c      	ldr	r5, [pc, #48]	; (8000b8c <enet_write_phy_reg+0x58>)
 8000b5c:	692c      	ldr	r4, [r5, #16]
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <enet_write_phy_reg+0x58>)
 8000b60:	07e4      	lsls	r4, r4, #31
 8000b62:	d4fb      	bmi.n	8000b5c <enet_write_phy_reg+0x28>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
 8000b64:	f442 6401 	orr.w	r4, r2, #2064	; 0x810
 8000b68:	f044 0401 	orr.w	r4, r4, #1
///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 8000b6c:	611c      	str	r4, [r3, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8000b6e:	691c      	ldr	r4, [r3, #16]
 8000b70:	4d06      	ldr	r5, [pc, #24]	; (8000b8c <enet_write_phy_reg+0x58>)
 8000b72:	07e2      	lsls	r2, r4, #31
 8000b74:	d4fb      	bmi.n	8000b6e <enet_write_phy_reg+0x3a>
  return ETH->MACMIIDR & 0xffff;
 8000b76:	696b      	ldr	r3, [r5, #20]
                  ETH_MACMIIAR_CR_Div102  | // MDC clock divider
                  ETH_MACMIIAR_MW         | // set the write bit
                  ETH_MACMIIAR_MB; // start it up
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
  uint16_t readback_val = enet_read_phy_reg(reg_idx);
  if (readback_val != reg_val)
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	4299      	cmp	r1, r3
 8000b7c:	d004      	beq.n	8000b88 <enet_write_phy_reg+0x54>
  {
    printf("woah there. tried to write 0x%04x to reg %02d but it read back %04x\r\n",
 8000b7e:	4602      	mov	r2, r0
           reg_val, reg_idx, readback_val);
  }
}
 8000b80:	bc30      	pop	{r4, r5}
                  ETH_MACMIIAR_MB; // start it up
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
  uint16_t readback_val = enet_read_phy_reg(reg_idx);
  if (readback_val != reg_val)
  {
    printf("woah there. tried to write 0x%04x to reg %02d but it read back %04x\r\n",
 8000b82:	4803      	ldr	r0, [pc, #12]	; (8000b90 <enet_write_phy_reg+0x5c>)
 8000b84:	f002 bea4 	b.w	80038d0 <printf>
           reg_val, reg_idx, readback_val);
  }
}
 8000b88:	bc30      	pop	{r4, r5}
 8000b8a:	4770      	bx	lr
 8000b8c:	40028000 	.word	0x40028000
 8000b90:	0800c568 	.word	0x0800c568

08000b94 <enet_init>:

void enet_init()
{
 8000b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  printf("enet_init()\r\n");
 8000b98:	48a2      	ldr	r0, [pc, #648]	; (8000e24 <enet_init+0x290>)
  // set up the pins on port a
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN     |  // and all the i/o ports we
                  RCC_AHB1ENR_GPIOBEN     |  // will be using to talk to
                  RCC_AHB1ENR_GPIOCEN;       // the ethernet PHY

  GPIOA->MODER |= (2 << (PORTA_ETH_REFCLK * 2)) |
 8000b9a:	4ca3      	ldr	r4, [pc, #652]	; (8000e28 <enet_init+0x294>)
           reg_val, reg_idx, readback_val);
  }
}

void enet_init()
{
 8000b9c:	b08e      	sub	sp, #56	; 0x38
  printf("enet_init()\r\n");
 8000b9e:	f002 fedd 	bl	800395c <puts>
  // set up the pins on port a
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN     |  // and all the i/o ports we
 8000ba2:	4aa2      	ldr	r2, [pc, #648]	; (8000e2c <enet_init+0x298>)
  GPIOA->AFR[0] |= (11 << (PORTA_ETH_REFCLK * 4)) |
                   (11 << (PORTA_ETH_MDIO   * 4)) |
                   (11 << (PORTA_ETH_CRSDV  * 4));

  // set up the ethernet pins on port b
  GPIOB->MODER |= (2 << (PORTB_ETH_TXEN * 2)) |
 8000ba4:	4ba2      	ldr	r3, [pc, #648]	; (8000e30 <enet_init+0x29c>)

void enet_init()
{
  printf("enet_init()\r\n");
  // set up the pins on port a
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN     |  // and all the i/o ports we
 8000ba6:	6b11      	ldr	r1, [r2, #48]	; 0x30
                    (3 << (PORTB_ETH_TXD0 * 2)) |
                    (3 << (PORTB_ETH_TXD1 * 2)); // make the tx pins go fast
  GPIOB->MODER |= (1 << (PORTB_PHY_RESET * 2)); // reset = gpio output pin

  // set up the ethernet pins on port c
  GPIOC->MODER  |= ( 2 << (PORTC_ETH_MDC  * 2)) |
 8000ba8:	48a2      	ldr	r0, [pc, #648]	; (8000e34 <enet_init+0x2a0>)

void enet_init()
{
  printf("enet_init()\r\n");
  // set up the pins on port a
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN     |  // and all the i/o ports we
 8000baa:	f041 0107 	orr.w	r1, r1, #7
 8000bae:	6311      	str	r1, [r2, #48]	; 0x30
                  RCC_AHB1ENR_GPIOBEN     |  // will be using to talk to
                  RCC_AHB1ENR_GPIOCEN;       // the ethernet PHY

  GPIOA->MODER |= (2 << (PORTA_ETH_REFCLK * 2)) |
 8000bb0:	6821      	ldr	r1, [r4, #0]
 8000bb2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8000bb6:	f041 0128 	orr.w	r1, r1, #40	; 0x28
 8000bba:	6021      	str	r1, [r4, #0]
                  (2 << (PORTA_ETH_MDIO   * 2)) |
                  (2 << (PORTA_ETH_CRSDV  * 2)); // set these guys as AF pins
  GPIOA->AFR[0] |= (11 << (PORTA_ETH_REFCLK * 4)) |
 8000bbc:	6a21      	ldr	r1, [r4, #32]
 8000bbe:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 8000bc2:	f441 613b 	orr.w	r1, r1, #2992	; 0xbb0
 8000bc6:	6221      	str	r1, [r4, #32]
                   (11 << (PORTA_ETH_MDIO   * 4)) |
                   (11 << (PORTA_ETH_CRSDV  * 4));

  // set up the ethernet pins on port b
  GPIOB->MODER |= (2 << (PORTB_ETH_TXEN * 2)) |
 8000bc8:	6819      	ldr	r1, [r3, #0]
 8000bca:	f041 6128 	orr.w	r1, r1, #176160768	; 0xa800000
 8000bce:	6019      	str	r1, [r3, #0]
                  (2 << (PORTB_ETH_TXD0 * 2)) |
                  (2 << (PORTB_ETH_TXD1 * 2));
  GPIOB->AFR[1] |= (11 << ((PORTB_ETH_TXEN - 8) * 4)) |
 8000bd0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000bd2:	f441 013b 	orr.w	r1, r1, #12255232	; 0xbb0000
 8000bd6:	f441 4130 	orr.w	r1, r1, #45056	; 0xb000
 8000bda:	6259      	str	r1, [r3, #36]	; 0x24
                   (11 << ((PORTB_ETH_TXD0 - 8) * 4)) |
                   (11 << ((PORTB_ETH_TXD1 - 8) * 4));
  GPIOB->OSPEEDR |= (3 << (PORTB_ETH_TXEN * 2)) |
 8000bdc:	6899      	ldr	r1, [r3, #8]
 8000bde:	f041 617c 	orr.w	r1, r1, #264241152	; 0xfc00000
 8000be2:	6099      	str	r1, [r3, #8]
                    (3 << (PORTB_ETH_TXD0 * 2)) |
                    (3 << (PORTB_ETH_TXD1 * 2)); // make the tx pins go fast
  GPIOB->MODER |= (1 << (PORTB_PHY_RESET * 2)); // reset = gpio output pin
 8000be4:	6819      	ldr	r1, [r3, #0]
 8000be6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000bea:	6019      	str	r1, [r3, #0]

  // set up the ethernet pins on port c
  GPIOC->MODER  |= ( 2 << (PORTC_ETH_MDC  * 2)) |
 8000bec:	6803      	ldr	r3, [r0, #0]
 8000bee:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8000bf2:	f043 0308 	orr.w	r3, r3, #8
 8000bf6:	6003      	str	r3, [r0, #0]
                   ( 2 << (PORTC_ETH_RXD0 * 2)) |
                   ( 2 << (PORTC_ETH_RXD1 * 2));
  GPIOC->AFR[0] |= (11 << (PORTC_ETH_MDC  * 4)) |
 8000bf8:	6a03      	ldr	r3, [r0, #32]
 8000bfa:	f443 033b 	orr.w	r3, r3, #12255232	; 0xbb0000
 8000bfe:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000c02:	6203      	str	r3, [r0, #32]
                   (11 << (PORTC_ETH_RXD0 * 4)) |
                   (11 << (PORTC_ETH_RXD1 * 4));

  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable the sysconfig block
 8000c04:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000c06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0a:	6453      	str	r3, [r2, #68]	; 0x44
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 8000c0c:	6913      	ldr	r3, [r2, #16]
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
 8000c0e:	2100      	movs	r1, #0
  GPIOC->AFR[0] |= (11 << (PORTC_ETH_MDC  * 4)) |
                   (11 << (PORTC_ETH_RXD0 * 4)) |
                   (11 << (PORTC_ETH_RXD1 * 4));

  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable the sysconfig block
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 8000c10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c14:	6113      	str	r3, [r2, #16]
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
 8000c16:	9101      	str	r1, [sp, #4]
 8000c18:	9b01      	ldr	r3, [sp, #4]
 8000c1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c1e:	da06      	bge.n	8000c2e <enet_init+0x9a>
 8000c20:	9b01      	ldr	r3, [sp, #4]
 8000c22:	3301      	adds	r3, #1
 8000c24:	9301      	str	r3, [sp, #4]
 8000c26:	9b01      	ldr	r3, [sp, #4]
 8000c28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c2c:	dbf8      	blt.n	8000c20 <enet_init+0x8c>
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
 8000c2e:	2300      	movs	r3, #0
 8000c30:	9302      	str	r3, [sp, #8]
 8000c32:	9b02      	ldr	r3, [sp, #8]
 8000c34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c38:	da06      	bge.n	8000c48 <enet_init+0xb4>
 8000c3a:	9b02      	ldr	r3, [sp, #8]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	9302      	str	r3, [sp, #8]
 8000c40:	9b02      	ldr	r3, [sp, #8]
 8000c42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c46:	dbf8      	blt.n	8000c3a <enet_init+0xa6>
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode
 8000c48:	497b      	ldr	r1, [pc, #492]	; (8000e38 <enet_init+0x2a4>)
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
 8000c4a:	4a7c      	ldr	r2, [pc, #496]	; (8000e3c <enet_init+0x2a8>)
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable the sysconfig block
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode
 8000c4c:	684b      	ldr	r3, [r1, #4]
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
 8000c4e:	2000      	movs	r0, #0
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable the sysconfig block
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode
 8000c50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c54:	604b      	str	r3, [r1, #4]
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
 8000c56:	9003      	str	r0, [sp, #12]
 8000c58:	9b03      	ldr	r3, [sp, #12]
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	dc05      	bgt.n	8000c6a <enet_init+0xd6>
 8000c5e:	9b03      	ldr	r3, [sp, #12]
 8000c60:	3301      	adds	r3, #1
 8000c62:	9303      	str	r3, [sp, #12]
 8000c64:	9b03      	ldr	r3, [sp, #12]
 8000c66:	4293      	cmp	r3, r2
 8000c68:	ddf9      	ble.n	8000c5e <enet_init+0xca>
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
 8000c6a:	4970      	ldr	r1, [pc, #448]	; (8000e2c <enet_init+0x298>)
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8000c6c:	4a73      	ldr	r2, [pc, #460]	; (8000e3c <enet_init+0x2a8>)
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
 8000c6e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8000c70:	2000      	movs	r0, #0
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
 8000c72:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 8000c76:	630b      	str	r3, [r1, #48]	; 0x30
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8000c78:	9004      	str	r0, [sp, #16]
 8000c7a:	9b04      	ldr	r3, [sp, #16]
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	dc05      	bgt.n	8000c8c <enet_init+0xf8>
 8000c80:	9b04      	ldr	r3, [sp, #16]
 8000c82:	3301      	adds	r3, #1
 8000c84:	9304      	str	r3, [sp, #16]
 8000c86:	9b04      	ldr	r3, [sp, #16]
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	ddf9      	ble.n	8000c80 <enet_init+0xec>
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 8000c8c:	4967      	ldr	r1, [pc, #412]	; (8000e2c <enet_init+0x298>)
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8000c8e:	4a6b      	ldr	r2, [pc, #428]	; (8000e3c <enet_init+0x2a8>)
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 8000c90:	690b      	ldr	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8000c92:	2000      	movs	r0, #0
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 8000c94:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000c98:	610b      	str	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8000c9a:	9005      	str	r0, [sp, #20]
 8000c9c:	9b05      	ldr	r3, [sp, #20]
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	dc05      	bgt.n	8000cae <enet_init+0x11a>
 8000ca2:	9b05      	ldr	r3, [sp, #20]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	9305      	str	r3, [sp, #20]
 8000ca8:	9b05      	ldr	r3, [sp, #20]
 8000caa:	4293      	cmp	r3, r2
 8000cac:	ddf9      	ble.n	8000ca2 <enet_init+0x10e>
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 8000cae:	495f      	ldr	r1, [pc, #380]	; (8000e2c <enet_init+0x298>)
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8000cb0:	4a62      	ldr	r2, [pc, #392]	; (8000e3c <enet_init+0x2a8>)
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 8000cb2:	690b      	ldr	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8000cb4:	2000      	movs	r0, #0
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 8000cb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cba:	610b      	str	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait
 8000cbc:	9006      	str	r0, [sp, #24]
 8000cbe:	9b06      	ldr	r3, [sp, #24]
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	dc05      	bgt.n	8000cd0 <enet_init+0x13c>
 8000cc4:	9b06      	ldr	r3, [sp, #24]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	9306      	str	r3, [sp, #24]
 8000cca:	9b06      	ldr	r3, [sp, #24]
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	ddf9      	ble.n	8000cc4 <enet_init+0x130>
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 8000cd0:	4956      	ldr	r1, [pc, #344]	; (8000e2c <enet_init+0x298>)
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)
 8000cd2:	4a5a      	ldr	r2, [pc, #360]	; (8000e3c <enet_init+0x2a8>)
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 8000cd4:	690b      	ldr	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)
 8000cd6:	2000      	movs	r0, #0
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 8000cd8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000cdc:	610b      	str	r3, [r1, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)
 8000cde:	9007      	str	r0, [sp, #28]
 8000ce0:	9b07      	ldr	r3, [sp, #28]
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	dc05      	bgt.n	8000cf2 <enet_init+0x15e>
 8000ce6:	9b07      	ldr	r3, [sp, #28]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	9307      	str	r3, [sp, #28]
 8000cec:	9b07      	ldr	r3, [sp, #28]
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	ddf9      	ble.n	8000ce6 <enet_init+0x152>

  ETH->DMABMR |= ETH_DMABMR_SR;
 8000cf2:	4953      	ldr	r1, [pc, #332]	; (8000e40 <enet_init+0x2ac>)
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 8000cf4:	4a51      	ldr	r2, [pc, #324]	; (8000e3c <enet_init+0x2a8>)
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)

  ETH->DMABMR |= ETH_DMABMR_SR;
 8000cf6:	680b      	ldr	r3, [r1, #0]
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 8000cf8:	2000      	movs	r0, #0
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 100000; i++) { } // wait
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)

  ETH->DMABMR |= ETH_DMABMR_SR;
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	600b      	str	r3, [r1, #0]
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 8000d00:	9008      	str	r0, [sp, #32]
 8000d02:	9b08      	ldr	r3, [sp, #32]
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d805      	bhi.n	8000d14 <enet_init+0x180>
 8000d08:	9b08      	ldr	r3, [sp, #32]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	9308      	str	r3, [sp, #32]
 8000d0e:	9b08      	ldr	r3, [sp, #32]
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d9f9      	bls.n	8000d08 <enet_init+0x174>
  while (ETH->DMABMR & ETH_DMABMR_SR) { } // wait for it to reset
 8000d14:	4a4a      	ldr	r2, [pc, #296]	; (8000e40 <enet_init+0x2ac>)
 8000d16:	6813      	ldr	r3, [r2, #0]
 8000d18:	f013 0301 	ands.w	r3, r3, #1
 8000d1c:	d1fb      	bne.n	8000d16 <enet_init+0x182>
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 8000d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8000d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d22:	4a46      	ldr	r2, [pc, #280]	; (8000e3c <enet_init+0x2a8>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d805      	bhi.n	8000d34 <enet_init+0x1a0>
 8000d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8000d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d9f9      	bls.n	8000d28 <enet_init+0x194>
  ETH->DMAOMR |= ETH_DMAOMR_FTF; // flush DMA
 8000d34:	4843      	ldr	r0, [pc, #268]	; (8000e44 <enet_init+0x2b0>)
  while (ETH->DMAOMR & ETH_DMAOMR_FTF) { } // wait for it to flush
 8000d36:	4944      	ldr	r1, [pc, #272]	; (8000e48 <enet_init+0x2b4>)

  ETH->DMABMR |= ETH_DMABMR_SR;
  for (volatile uint32_t i = 0; i < 100000; i++) { }
  while (ETH->DMABMR & ETH_DMABMR_SR) { } // wait for it to reset
  for (volatile uint32_t i = 0; i < 100000; i++) { }
  ETH->DMAOMR |= ETH_DMAOMR_FTF; // flush DMA
 8000d38:	f241 0218 	movw	r2, #4120	; 0x1018
 8000d3c:	5883      	ldr	r3, [r0, r2]
 8000d3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d42:	5083      	str	r3, [r0, r2]
  while (ETH->DMAOMR & ETH_DMAOMR_FTF) { } // wait for it to flush
 8000d44:	680b      	ldr	r3, [r1, #0]
 8000d46:	4a3f      	ldr	r2, [pc, #252]	; (8000e44 <enet_init+0x2b0>)
 8000d48:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
 8000d4c:	d1fa      	bne.n	8000d44 <enet_init+0x1b0>

  // now, configure the ethernet peripheral
  ETH->MACCR |= 0x02000000 | // CSTF = strip FCS. why isn't there a symbol ?
 8000d4e:	6810      	ldr	r0, [r2, #0]
                ETH_MACCR_DM   | // full duplex
                ETH_MACCR_IPCO | // ipv4 checksum auto-generation for RX
                ETH_MACCR_APCS;  // automatically remove pad+CRC from frames
  ETH->MACFFR |= ETH_MACFFR_RA; // for now, don't try to filter in hardware
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
 8000d50:	4c37      	ldr	r4, [pc, #220]	; (8000e30 <enet_init+0x29c>)
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 8000d52:	493a      	ldr	r1, [pc, #232]	; (8000e3c <enet_init+0x2a8>)
  for (volatile uint32_t i = 0; i < 100000; i++) { }
  ETH->DMAOMR |= ETH_DMAOMR_FTF; // flush DMA
  while (ETH->DMAOMR & ETH_DMAOMR_FTF) { } // wait for it to flush

  // now, configure the ethernet peripheral
  ETH->MACCR |= 0x02000000 | // CSTF = strip FCS. why isn't there a symbol ?
 8000d54:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8000d58:	f440 4099 	orr.w	r0, r0, #19584	; 0x4c80
 8000d5c:	6010      	str	r0, [r2, #0]
                ETH_MACCR_FES  | // enable 100 mbit mode
                ETH_MACCR_DM   | // full duplex
                ETH_MACCR_IPCO | // ipv4 checksum auto-generation for RX
                ETH_MACCR_APCS;  // automatically remove pad+CRC from frames
  ETH->MACFFR |= ETH_MACFFR_RA; // for now, don't try to filter in hardware
 8000d5e:	6850      	ldr	r0, [r2, #4]
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
 8000d60:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  ETH->MACCR |= 0x02000000 | // CSTF = strip FCS. why isn't there a symbol ?
                ETH_MACCR_FES  | // enable 100 mbit mode
                ETH_MACCR_DM   | // full duplex
                ETH_MACCR_IPCO | // ipv4 checksum auto-generation for RX
                ETH_MACCR_APCS;  // automatically remove pad+CRC from frames
  ETH->MACFFR |= ETH_MACFFR_RA; // for now, don't try to filter in hardware
 8000d64:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8000d68:	6050      	str	r0, [r2, #4]
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
 8000d6a:	8325      	strh	r5, [r4, #24]
  for (volatile uint32_t i = 0; i < 100000; i++) { }
 8000d6c:	930a      	str	r3, [sp, #40]	; 0x28
 8000d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000d70:	428b      	cmp	r3, r1
 8000d72:	bf98      	it	ls
 8000d74:	460a      	movls	r2, r1
 8000d76:	d805      	bhi.n	8000d84 <enet_init+0x1f0>
 8000d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	930a      	str	r3, [sp, #40]	; 0x28
 8000d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d9f9      	bls.n	8000d78 <enet_init+0x1e4>
  GPIOB->BSRRH = 1 << PORTB_PHY_RESET; // assert reset (pull it low)
 8000d84:	492a      	ldr	r1, [pc, #168]	; (8000e30 <enet_init+0x29c>)
  for (volatile uint32_t i = 0; i < 100000; i++) { } // let some time pass
 8000d86:	4a2d      	ldr	r2, [pc, #180]	; (8000e3c <enet_init+0x2a8>)
 8000d88:	2300      	movs	r3, #0
                ETH_MACCR_APCS;  // automatically remove pad+CRC from frames
  ETH->MACFFR |= ETH_MACFFR_RA; // for now, don't try to filter in hardware
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
  for (volatile uint32_t i = 0; i < 100000; i++) { }
  GPIOB->BSRRH = 1 << PORTB_PHY_RESET; // assert reset (pull it low)
 8000d8a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d8e:	8348      	strh	r0, [r1, #26]
  for (volatile uint32_t i = 0; i < 100000; i++) { } // let some time pass
 8000d90:	930b      	str	r3, [sp, #44]	; 0x2c
 8000d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d805      	bhi.n	8000da4 <enet_init+0x210>
 8000d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8000d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d9f9      	bls.n	8000d98 <enet_init+0x204>
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET; // de-assert reset (pull it high)
 8000da4:	4922      	ldr	r1, [pc, #136]	; (8000e30 <enet_init+0x29c>)
  // todo: only need to wait until registers read back something other
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
 8000da6:	4a29      	ldr	r2, [pc, #164]	; (8000e4c <enet_init+0x2b8>)
 8000da8:	2300      	movs	r3, #0
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
  for (volatile uint32_t i = 0; i < 100000; i++) { }
  GPIOB->BSRRH = 1 << PORTB_PHY_RESET; // assert reset (pull it low)
  for (volatile uint32_t i = 0; i < 100000; i++) { } // let some time pass
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET; // de-assert reset (pull it high)
 8000daa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000dae:	8308      	strh	r0, [r1, #24]
  // todo: only need to wait until registers read back something other
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
 8000db0:	930c      	str	r3, [sp, #48]	; 0x30
 8000db2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d805      	bhi.n	8000dc4 <enet_init+0x230>
 8000db8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000dba:	3301      	adds	r3, #1
 8000dbc:	930c      	str	r3, [sp, #48]	; 0x30
 8000dbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d9f9      	bls.n	8000db8 <enet_init+0x224>
  printf("waiting for PHY to wake up...\r\n");
 8000dc4:	4822      	ldr	r0, [pc, #136]	; (8000e50 <enet_init+0x2bc>)
 8000dc6:	f002 fdc9 	bl	800395c <puts>

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8000dca:	4a1e      	ldr	r2, [pc, #120]	; (8000e44 <enet_init+0x2b0>)
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 8000dcc:	f640 0511 	movw	r5, #2065	; 0x811

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8000dd0:	4610      	mov	r0, r2
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET; // de-assert reset (pull it high)
  // todo: only need to wait until registers read back something other
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
  printf("waiting for PHY to wake up...\r\n");
  while (enet_read_phy_reg(0) == 0xffff) { }
 8000dd2:	f64f 74ff 	movw	r4, #65535	; 0xffff

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8000dd6:	6913      	ldr	r3, [r2, #16]
 8000dd8:	07d9      	lsls	r1, r3, #31
 8000dda:	d4fc      	bmi.n	8000dd6 <enet_init+0x242>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 8000ddc:	6105      	str	r5, [r0, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8000dde:	6913      	ldr	r3, [r2, #16]
 8000de0:	f013 0301 	ands.w	r3, r3, #1
 8000de4:	d1fb      	bne.n	8000dde <enet_init+0x24a>
  return ETH->MACMIIDR & 0xffff;
 8000de6:	6941      	ldr	r1, [r0, #20]
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET; // de-assert reset (pull it high)
  // todo: only need to wait until registers read back something other
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
  printf("waiting for PHY to wake up...\r\n");
  while (enet_read_phy_reg(0) == 0xffff) { }
 8000de8:	b289      	uxth	r1, r1
 8000dea:	42a1      	cmp	r1, r4
 8000dec:	d0f3      	beq.n	8000dd6 <enet_init+0x242>
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
 8000dee:	930d      	str	r3, [sp, #52]	; 0x34
 8000df0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000df2:	4a16      	ldr	r2, [pc, #88]	; (8000e4c <enet_init+0x2b8>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d805      	bhi.n	8000e04 <enet_init+0x270>
 8000df8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	930d      	str	r3, [sp, #52]	; 0x34
 8000dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d9f9      	bls.n	8000df8 <enet_init+0x264>
  printf("done with PHY reset.\r\n");
 8000e04:	4813      	ldr	r0, [pc, #76]	; (8000e54 <enet_init+0x2c0>)

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8000e06:	4d0f      	ldr	r5, [pc, #60]	; (8000e44 <enet_init+0x2b0>)
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
  printf("waiting for PHY to wake up...\r\n");
  while (enet_read_phy_reg(0) == 0xffff) { }
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
  printf("done with PHY reset.\r\n");
 8000e08:	f002 fda8 	bl	800395c <puts>
  printf("setting software strap registers...\r\n");
 8000e0c:	4812      	ldr	r0, [pc, #72]	; (8000e58 <enet_init+0x2c4>)
 8000e0e:	f002 fda5 	bl	800395c <puts>
  enet_write_phy_reg(0x09, 0x7821); // enable auto MDIX,
 8000e12:	2009      	movs	r0, #9
 8000e14:	f647 0121 	movw	r1, #30753	; 0x7821
 8000e18:	f7ff fe8c 	bl	8000b34 <enet_write_phy_reg>
                                    // set INT/PWDN to be interrupt output
                                    // enable auto-negotiation
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
 8000e1c:	2009      	movs	r0, #9
 8000e1e:	f64f 0121 	movw	r1, #63521	; 0xf821
 8000e22:	e01b      	b.n	8000e5c <enet_init+0x2c8>
 8000e24:	0800c5b0 	.word	0x0800c5b0
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020400 	.word	0x40020400
 8000e34:	40020800 	.word	0x40020800
 8000e38:	40013800 	.word	0x40013800
 8000e3c:	0001869f 	.word	0x0001869f
 8000e40:	40029000 	.word	0x40029000
 8000e44:	40028000 	.word	0x40028000
 8000e48:	40029018 	.word	0x40029018
 8000e4c:	000f423f 	.word	0x000f423f
 8000e50:	0800c5c0 	.word	0x0800c5c0
 8000e54:	0800c5e0 	.word	0x0800c5e0
 8000e58:	0800c5f8 	.word	0x0800c5f8
 8000e5c:	f7ff fe6a 	bl	8000b34 <enet_write_phy_reg>
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode
 8000e60:	2004      	movs	r0, #4
 8000e62:	f240 1101 	movw	r1, #257	; 0x101
 8000e66:	f7ff fe65 	bl	8000b34 <enet_write_phy_reg>

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8000e6a:	462f      	mov	r7, r5
                                    // enable auto-negotiation
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode

  // cycle through and read a bunch of PHY registers to make sure it's alive
  for (int i = 0; i < 32; i++)
 8000e6c:	2600      	movs	r6, #0

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8000e6e:	692b      	ldr	r3, [r5, #16]
 8000e70:	07db      	lsls	r3, r3, #31
 8000e72:	d4fc      	bmi.n	8000e6e <enet_init+0x2da>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
                  ((reg_idx & 0x1f) << 6) |
 8000e74:	01b3      	lsls	r3, r6, #6
                  ETH_MACMIIAR_CR_Div102  | // clock divider
 8000e76:	f443 6301 	orr.w	r3, r3, #2064	; 0x810
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 8000e7e:	613b      	str	r3, [r7, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8000e80:	692b      	ldr	r3, [r5, #16]
 8000e82:	f013 0401 	ands.w	r4, r3, #1
 8000e86:	d1fb      	bne.n	8000e80 <enet_init+0x2ec>
  return ETH->MACMIIDR & 0xffff;
 8000e88:	697a      	ldr	r2, [r7, #20]
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode

  // cycle through and read a bunch of PHY registers to make sure it's alive
  for (int i = 0; i < 32; i++)
    printf("PHY reg %02d = 0x%04x\r\n", i, enet_read_phy_reg(i));
 8000e8a:	4842      	ldr	r0, [pc, #264]	; (8000f94 <enet_init+0x400>)
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	b292      	uxth	r2, r2
                                    // enable auto-negotiation
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode

  // cycle through and read a bunch of PHY registers to make sure it's alive
  for (int i = 0; i < 32; i++)
 8000e90:	3601      	adds	r6, #1
    printf("PHY reg %02d = 0x%04x\r\n", i, enet_read_phy_reg(i));
 8000e92:	f002 fd1d 	bl	80038d0 <printf>
                                    // enable auto-negotiation
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode

  // cycle through and read a bunch of PHY registers to make sure it's alive
  for (int i = 0; i < 32; i++)
 8000e96:	2e20      	cmp	r6, #32
 8000e98:	d1e9      	bne.n	8000e6e <enet_init+0x2da>

  ////////////////////////////////////////////////////////////////////////
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
 8000e9a:	4a3f      	ldr	r2, [pc, #252]	; (8000f98 <enet_init+0x404>)
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
 8000e9c:	f8df e124 	ldr.w	lr, [pc, #292]	; 8000fc4 <enet_init+0x430>

  ////////////////////////////////////////////////////////////////////////
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
 8000ea0:	f44f 0550 	mov.w	r5, #13631488	; 0xd00000
 8000ea4:	6015      	str	r5, [r2, #0]
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
 8000ea6:	4623      	mov	r3, r4
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
 8000ea8:	6054      	str	r4, [r2, #4]
 8000eaa:	46a4      	mov	ip, r4
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
 8000eac:	f8c2 e008 	str.w	lr, [r2, #8]
    if (i < ETH_DMA_NTXD-1)
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[i+1]; // chain to next
 8000eb0:	1c58      	adds	r0, r3, #1
 8000eb2:	0104      	lsls	r4, r0, #4
 8000eb4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8000eb8:	f103 0708 	add.w	r7, r3, #8
 8000ebc:	1911      	adds	r1, r2, r4
 8000ebe:	eb0e 26c0 	add.w	r6, lr, r0, lsl #11
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
    if (i < ETH_DMA_NTXD-1)
 8000ec2:	2803      	cmp	r0, #3
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[i+1]; // chain to next
 8000ec4:	6079      	str	r1, [r7, #4]
 8000ec6:	4603      	mov	r3, r0

  ////////////////////////////////////////////////////////////////////////
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
 8000ec8:	5115      	str	r5, [r2, r4]
 8000eca:	4f33      	ldr	r7, [pc, #204]	; (8000f98 <enet_init+0x404>)
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
 8000ecc:	f8c1 c004 	str.w	ip, [r1, #4]
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
 8000ed0:	608e      	str	r6, [r1, #8]
    if (i < ETH_DMA_NTXD-1)
 8000ed2:	d1ed      	bne.n	8000eb0 <enet_init+0x31c>
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 8000ed4:	4a31      	ldr	r2, [pc, #196]	; (8000f9c <enet_init+0x408>)
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
 8000ed6:	4932      	ldr	r1, [pc, #200]	; (8000fa0 <enet_init+0x40c>)
    g_eth_dma_tx_desc[i].des1 = 0;
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
    if (i < ETH_DMA_NTXD-1)
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[i+1]; // chain to next
    else
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[0]; // loop to first
 8000ed8:	63ff      	str	r7, [r7, #60]	; 0x3c
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 8000eda:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
 8000ede:	f44f 4390 	mov.w	r3, #18432	; 0x4800
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 8000ee2:	6010      	str	r0, [r2, #0]
 8000ee4:	4680      	mov	r8, r0
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
 8000ee6:	6053      	str	r3, [r2, #4]
 8000ee8:	469c      	mov	ip, r3
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
 8000eea:	6091      	str	r1, [r2, #8]
 8000eec:	f102 0010 	add.w	r0, r2, #16
 8000ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8000ef4:	2300      	movs	r3, #0
    if (i < ETH_DMA_NRXD-1)
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
 8000ef6:	1c5e      	adds	r6, r3, #1
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 8000ef8:	0135      	lsls	r5, r6, #4
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
    if (i < ETH_DMA_NRXD-1)
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
 8000efa:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8000efe:	f103 0e08 	add.w	lr, r3, #8
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 8000f02:	1954      	adds	r4, r2, r5
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
    if (i < ETH_DMA_NRXD-1)
 8000f04:	2e0f      	cmp	r6, #15
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
 8000f06:	f8ce 0004 	str.w	r0, [lr, #4]
 8000f0a:	4633      	mov	r3, r6
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 8000f0c:	f842 8005 	str.w	r8, [r2, r5]
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
    if (i < ETH_DMA_NRXD-1)
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
 8000f10:	f8df e088 	ldr.w	lr, [pc, #136]	; 8000f9c <enet_init+0x408>
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
 8000f14:	f8c4 c004 	str.w	ip, [r4, #4]
 8000f18:	f100 0010 	add.w	r0, r0, #16
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
 8000f1c:	60a1      	str	r1, [r4, #8]
 8000f1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
    if (i < ETH_DMA_NRXD-1)
 8000f22:	d1e8      	bne.n	8000ef6 <enet_init+0x362>
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
    else
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[0];
 8000f24:	2300      	movs	r3, #0
 8000f26:	491f      	ldr	r1, [pc, #124]	; (8000fa4 <enet_init+0x410>)
 8000f28:	4e1f      	ldr	r6, [pc, #124]	; (8000fa8 <enet_init+0x414>)
 8000f2a:	4d20      	ldr	r5, [pc, #128]	; (8000fac <enet_init+0x418>)
 8000f2c:	4c20      	ldr	r4, [pc, #128]	; (8000fb0 <enet_init+0x41c>)
 8000f2e:	4821      	ldr	r0, [pc, #132]	; (8000fb4 <enet_init+0x420>)
 8000f30:	f8ce e0fc 	str.w	lr, [lr, #252]	; 0xfc
  ///////////////////////////////////////////////////////////////////////
  // set up the RAM pool for reception
  for (int i = 0; i < ETH_RAM_RXPOOL_NPTR; i++)
  {
    g_eth_rxpool_start[i] = &g_eth_rxpool[0];
    g_eth_rxpool_len[i] = 0;
 8000f34:	461a      	mov	r2, r3
 8000f36:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[0];
  }

  ///////////////////////////////////////////////////////////////////////
  // set up the RAM pool for reception
  for (int i = 0; i < ETH_RAM_RXPOOL_NPTR; i++)
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	2b80      	cmp	r3, #128	; 0x80
  {
    g_eth_rxpool_start[i] = &g_eth_rxpool[0];
    g_eth_rxpool_len[i] = 0;
    g_eth_rxpool_ptrs_wpos = 0;
 8000f3e:	8022      	strh	r2, [r4, #0]

  ///////////////////////////////////////////////////////////////////////
  // set up the RAM pool for reception
  for (int i = 0; i < ETH_RAM_RXPOOL_NPTR; i++)
  {
    g_eth_rxpool_start[i] = &g_eth_rxpool[0];
 8000f40:	f841 6f04 	str.w	r6, [r1, #4]!
    g_eth_rxpool_len[i] = 0;
    g_eth_rxpool_ptrs_wpos = 0;
    g_eth_rxpool_ptrs_rpos = 0;
 8000f44:	8002      	strh	r2, [r0, #0]
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[0];
  }

  ///////////////////////////////////////////////////////////////////////
  // set up the RAM pool for reception
  for (int i = 0; i < ETH_RAM_RXPOOL_NPTR; i++)
 8000f46:	d1f6      	bne.n	8000f36 <enet_init+0x3a2>
    g_eth_rxpool_ptrs_rpos = 0;
  }

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <enet_init+0x424>)
  /*
  ETH->DMABMR = ETH_DMABMR_AAB | ETH_DMABMR_USP |
                ETH_DMABMR_RDP_1Beat | ETH_DMABMR_RTPR_1_1 |
                ETH_DMABMR_PBL_1Beat | ETH_DMABMR_EDE;
  */
  ETH->DMAIER = ETH_DMAIER_NISE | ETH_DMAIER_RIE;
 8000f4a:	4c1c      	ldr	r4, [pc, #112]	; (8000fbc <enet_init+0x428>)
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000f4c:	481c      	ldr	r0, [pc, #112]	; (8000fc0 <enet_init+0x42c>)

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
  ETH->DMARDLAR = (uint32_t)&g_eth_dma_rx_desc[0]; // point RX DMA to first desc
  ETH->DMAOMR = ETH_DMAOMR_TSF; // enable store-and-forward mode
 8000f4e:	f241 0118 	movw	r1, #4120	; 0x1018
    g_eth_rxpool_ptrs_rpos = 0;
  }

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
 8000f52:	f241 0c10 	movw	ip, #4112	; 0x1010
  ETH->DMARDLAR = (uint32_t)&g_eth_dma_rx_desc[0]; // point RX DMA to first desc
 8000f56:	f241 060c 	movw	r6, #4108	; 0x100c
  /*
  ETH->DMABMR = ETH_DMABMR_AAB | ETH_DMABMR_USP |
                ETH_DMABMR_RDP_1Beat | ETH_DMABMR_RTPR_1_1 |
                ETH_DMABMR_PBL_1Beat | ETH_DMABMR_EDE;
  */
  ETH->DMAIER = ETH_DMAIER_NISE | ETH_DMAIER_RIE;
 8000f5a:	f241 021c 	movw	r2, #4124	; 0x101c

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
  ETH->DMARDLAR = (uint32_t)&g_eth_dma_rx_desc[0]; // point RX DMA to first desc
  ETH->DMAOMR = ETH_DMAOMR_TSF; // enable store-and-forward mode
 8000f5e:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
    g_eth_rxpool_ptrs_rpos = 0;
  }

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
 8000f62:	f843 700c 	str.w	r7, [r3, ip]
  ETH->DMARDLAR = (uint32_t)&g_eth_dma_rx_desc[0]; // point RX DMA to first desc
 8000f66:	f843 e006 	str.w	lr, [r3, r6]
  ETH->DMAOMR = ETH_DMAOMR_TSF; // enable store-and-forward mode
 8000f6a:	505d      	str	r5, [r3, r1]
  /*
  ETH->DMABMR = ETH_DMABMR_AAB | ETH_DMABMR_USP |
                ETH_DMABMR_RDP_1Beat | ETH_DMABMR_RTPR_1_1 |
                ETH_DMABMR_PBL_1Beat | ETH_DMABMR_EDE;
  */
  ETH->DMAIER = ETH_DMAIER_NISE | ETH_DMAIER_RIE;
 8000f6c:	509c      	str	r4, [r3, r2]
  ETH->MACCR |= ETH_MACCR_TE | // enable transmitter
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	2530      	movs	r5, #48	; 0x30
 8000f72:	f042 020c 	orr.w	r2, r2, #12
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000f76:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 8000f7a:	601a      	str	r2, [r3, #0]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000f7c:	f880 533d 	strb.w	r5, [r0, #829]	; 0x33d
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000f80:	6044      	str	r4, [r0, #4]
                ETH_MACCR_RE;  // enable receiver
  NVIC_SetPriority(ETH_IRQn, 3);
  NVIC_EnableIRQ(ETH_IRQn);
  ETH->DMAOMR |= ETH_DMAOMR_ST | ETH_DMAOMR_SR; // enable ethernet DMA tx/rx
 8000f82:	585a      	ldr	r2, [r3, r1]
 8000f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f88:	f042 0202 	orr.w	r2, r2, #2
 8000f8c:	505a      	str	r2, [r3, r1]
}
 8000f8e:	b00e      	add	sp, #56	; 0x38
 8000f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f94:	0800c620 	.word	0x0800c620
 8000f98:	20008f4c 	.word	0x20008f4c
 8000f9c:	20009294 	.word	0x20009294
 8000fa0:	20000f4c 	.word	0x20000f4c
 8000fa4:	20009090 	.word	0x20009090
 8000fa8:	20009394 	.word	0x20009394
 8000fac:	20008f90 	.word	0x20008f90
 8000fb0:	20008f8c 	.word	0x20008f8c
 8000fb4:	20008f8e 	.word	0x20008f8e
 8000fb8:	40028000 	.word	0x40028000
 8000fbc:	00010040 	.word	0x00010040
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	2000d394 	.word	0x2000d394

08000fc8 <eth_vector>:

void eth_vector()
{
 8000fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  volatile uint32_t dmasr = ETH->DMASR;
 8000fcc:	f241 0314 	movw	r3, #4116	; 0x1014
 8000fd0:	4a2d      	ldr	r2, [pc, #180]	; (8001088 <eth_vector+0xc0>)
  NVIC_EnableIRQ(ETH_IRQn);
  ETH->DMAOMR |= ETH_DMAOMR_ST | ETH_DMAOMR_SR; // enable ethernet DMA tx/rx
}

void eth_vector()
{
 8000fd2:	b083      	sub	sp, #12
  volatile uint32_t dmasr = ETH->DMASR;
 8000fd4:	58d1      	ldr	r1, [r2, r3]
 8000fd6:	9101      	str	r1, [sp, #4]
  ETH->DMASR = dmasr; // clear pending bits in the status register
 8000fd8:	9901      	ldr	r1, [sp, #4]
 8000fda:	50d1      	str	r1, [r2, r3]
  //printf("eth_vector()\r\n");
  if (dmasr & ETH_DMASR_RS)
 8000fdc:	9b01      	ldr	r3, [sp, #4]
 8000fde:	065b      	lsls	r3, r3, #25
 8000fe0:	d549      	bpl.n	8001076 <eth_vector+0xae>
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
 8000fe2:	4f2a      	ldr	r7, [pc, #168]	; (800108c <eth_vector+0xc4>)
 8000fe4:	683d      	ldr	r5, [r7, #0]
 8000fe6:	682b      	ldr	r3, [r5, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db44      	blt.n	8001076 <eth_vector+0xae>
 8000fec:	4e28      	ldr	r6, [pc, #160]	; (8001090 <eth_vector+0xc8>)
 8000fee:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8001098 <eth_vector+0xd0>
 8000ff2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800109c <eth_vector+0xd4>
 8000ff6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80010a0 <eth_vector+0xd8>
    {
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
 8000ffa:	f04f 0800 	mov.w	r8, #0
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
    {
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
 8000ffe:	682c      	ldr	r4, [r5, #0]
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
 8001000:	8833      	ldrh	r3, [r6, #0]
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
      g_eth_rxpool_len[wp] = rxn;
 8001002:	4924      	ldr	r1, [pc, #144]	; (8001094 <eth_vector+0xcc>)
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
    {
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
 8001004:	f3c4 440d 	ubfx	r4, r4, #16, #14
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
 8001008:	fa14 f383 	uxtah	r3, r4, r3
 800100c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        g_eth_rxpool_wpos = 0;
 8001010:	bfa4      	itt	ge
 8001012:	4b1f      	ldrge	r3, [pc, #124]	; (8001090 <eth_vector+0xc8>)
 8001014:	f8a3 8000 	strhge.w	r8, [r3]
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
 8001018:	f8bb 3000 	ldrh.w	r3, [fp]
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
 800101c:	8830      	ldrh	r0, [r6, #0]
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
 800101e:	b29b      	uxth	r3, r3
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
      g_eth_rxpool_len[wp] = rxn;
      memcpy((uint8_t *)&g_eth_rxpool[g_eth_rxpool_wpos],
 8001020:	4622      	mov	r2, r4
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
    {
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
 8001022:	b2a4      	uxth	r4, r4
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
      g_eth_rxpool_len[wp] = rxn;
 8001024:	f821 4013 	strh.w	r4, [r1, r3, lsl #1]
      memcpy((uint8_t *)&g_eth_rxpool[g_eth_rxpool_wpos],
 8001028:	f8b6 e000 	ldrh.w	lr, [r6]
             (const uint8_t *)g_eth_dma_rx_next_desc->des2,
 800102c:	68a9      	ldr	r1, [r5, #8]
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
 800102e:	fa19 f080 	uxtah	r0, r9, r0
 8001032:	f84a 0023 	str.w	r0, [sl, r3, lsl #2]
      g_eth_rxpool_len[wp] = rxn;
      memcpy((uint8_t *)&g_eth_rxpool[g_eth_rxpool_wpos],
 8001036:	fa19 f08e 	uxtah	r0, r9, lr
 800103a:	f002 fb51 	bl	80036e0 <memcpy>
             (const uint8_t *)g_eth_dma_rx_next_desc->des2,
             rxn);
      //printf("ethernet rx %d into rxpool ptr %d\r\n", rxn, wp);
      g_eth_rxpool_ptrs_wpos++;
 800103e:	f8bb 3000 	ldrh.w	r3, [fp]
 8001042:	3301      	adds	r3, #1
 8001044:	b29b      	uxth	r3, r3
 8001046:	f8ab 3000 	strh.w	r3, [fp]
      if (g_eth_rxpool_ptrs_wpos >= ETH_RAM_RXPOOL_NPTR)
 800104a:	f8bb 3000 	ldrh.w	r3, [fp]
 800104e:	b29b      	uxth	r3, r3
 8001050:	2b7f      	cmp	r3, #127	; 0x7f
        g_eth_rxpool_ptrs_wpos = 0;
 8001052:	bf84      	itt	hi
 8001054:	4b10      	ldrhi	r3, [pc, #64]	; (8001098 <eth_vector+0xd0>)
 8001056:	f8a3 8000 	strhhi.w	r8, [r3]
      g_eth_rxpool_wpos += rxn;
 800105a:	8833      	ldrh	r3, [r6, #0]
 800105c:	fa14 f483 	uxtah	r4, r4, r3
 8001060:	b2a4      	uxth	r4, r4
 8001062:	8034      	strh	r4, [r6, #0]
      uint8_t *p = (uint8_t *)g_eth_rx_next_desc->des2;
      for (int i = 0; i < rxn; i++)
        printf("%02d: 0x%02x\r\n", i, p[i]);
*/

      g_eth_dma_rx_next_desc->des0 |= 0x80000000; // give it back to the DMA
 8001064:	682b      	ldr	r3, [r5, #0]
 8001066:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800106a:	602b      	str	r3, [r5, #0]
      // advance the rx pointer for next time
      g_eth_dma_rx_next_desc = (eth_dma_desc_t *)g_eth_dma_rx_next_desc->des3;
 800106c:	68ed      	ldr	r5, [r5, #12]
 800106e:	603d      	str	r5, [r7, #0]
  ETH->DMASR = dmasr; // clear pending bits in the status register
  //printf("eth_vector()\r\n");
  if (dmasr & ETH_DMASR_RS)
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
 8001070:	682b      	ldr	r3, [r5, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	dac3      	bge.n	8000ffe <eth_vector+0x36>
      g_eth_dma_rx_next_desc->des0 |= 0x80000000; // give it back to the DMA
      // advance the rx pointer for next time
      g_eth_dma_rx_next_desc = (eth_dma_desc_t *)g_eth_dma_rx_next_desc->des3;
    }
  }
  dmasr = ETH->DMASR;
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <eth_vector+0xc0>)
 8001078:	f241 0314 	movw	r3, #4116	; 0x1014
 800107c:	58d3      	ldr	r3, [r2, r3]
 800107e:	9301      	str	r3, [sp, #4]
  //printf("dmasr = 0x%08x\r\n", (int)dmasr);
}
 8001080:	b003      	add	sp, #12
 8001082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001086:	bf00      	nop
 8001088:	40028000 	.word	0x40028000
 800108c:	20000008 	.word	0x20000008
 8001090:	20009090 	.word	0x20009090
 8001094:	20008f90 	.word	0x20008f90
 8001098:	20008f8c 	.word	0x20008f8c
 800109c:	20009094 	.word	0x20009094
 80010a0:	20009394 	.word	0x20009394

080010a4 <enet_get_link_status>:

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 80010a4:	4914      	ldr	r1, [pc, #80]	; (80010f8 <enet_get_link_status+0x54>)
 80010a6:	690a      	ldr	r2, [r1, #16]
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <enet_get_link_status+0x54>)
 80010aa:	07d2      	lsls	r2, r2, #31
 80010ac:	d4fb      	bmi.n	80010a6 <enet_get_link_status+0x2>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
 80010ae:	f640 0251 	movw	r2, #2129	; 0x851
 80010b2:	611a      	str	r2, [r3, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 80010b4:	691a      	ldr	r2, [r3, #16]
 80010b6:	4910      	ldr	r1, [pc, #64]	; (80010f8 <enet_get_link_status+0x54>)
 80010b8:	07d0      	lsls	r0, r2, #31
 80010ba:	d4fb      	bmi.n	80010b4 <enet_get_link_status+0x10>
  dmasr = ETH->DMASR;
  //printf("dmasr = 0x%08x\r\n", (int)dmasr);
}

enet_link_status_t enet_get_link_status()
{
 80010bc:	b510      	push	{r4, lr}
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) |
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB;
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
  return ETH->MACMIIDR & 0xffff;
 80010be:	694c      	ldr	r4, [r1, #20]
 80010c0:	b2a4      	uxth	r4, r4

enet_link_status_t enet_get_link_status()
{
  uint16_t status = enet_read_phy_reg(0x01);
  //printf("PHY status = 0x%02x\r\n", status);
  if (status & (1 << 4)) {
 80010c2:	06e2      	lsls	r2, r4, #27
    err_set(ERR_ETH_REMOTE_FAULT);
 80010c4:	f04f 0002 	mov.w	r0, #2

enet_link_status_t enet_get_link_status()
{
  uint16_t status = enet_read_phy_reg(0x01);
  //printf("PHY status = 0x%02x\r\n", status);
  if (status & (1 << 4)) {
 80010c8:	d50a      	bpl.n	80010e0 <enet_get_link_status+0x3c>
    err_set(ERR_ETH_REMOTE_FAULT);
 80010ca:	f002 fac5 	bl	8003658 <err_set>
  } else {
    err_unset(ERR_ETH_REMOTE_FAULT);
  }
  if (status & (1 << 5)) {
 80010ce:	06a3      	lsls	r3, r4, #26
    err_unset(ERR_ETH_NEGOTIATING);
 80010d0:	f04f 0003 	mov.w	r0, #3
  if (status & (1 << 4)) {
    err_set(ERR_ETH_REMOTE_FAULT);
  } else {
    err_unset(ERR_ETH_REMOTE_FAULT);
  }
  if (status & (1 << 5)) {
 80010d4:	d50a      	bpl.n	80010ec <enet_get_link_status+0x48>
    err_unset(ERR_ETH_NEGOTIATING);
 80010d6:	f002 fac5 	bl	8003664 <err_unset>
    err_set(ERR_ETH_NEGOTIATING);
  }
  if (status & (1 << 2))
    return ENET_LINK_UP;
  return ENET_LINK_DOWN;
}
 80010da:	f3c4 0080 	ubfx	r0, r4, #2, #1
 80010de:	bd10      	pop	{r4, pc}
  uint16_t status = enet_read_phy_reg(0x01);
  //printf("PHY status = 0x%02x\r\n", status);
  if (status & (1 << 4)) {
    err_set(ERR_ETH_REMOTE_FAULT);
  } else {
    err_unset(ERR_ETH_REMOTE_FAULT);
 80010e0:	f002 fac0 	bl	8003664 <err_unset>
  }
  if (status & (1 << 5)) {
 80010e4:	06a3      	lsls	r3, r4, #26
    err_unset(ERR_ETH_NEGOTIATING);
 80010e6:	f04f 0003 	mov.w	r0, #3
  if (status & (1 << 4)) {
    err_set(ERR_ETH_REMOTE_FAULT);
  } else {
    err_unset(ERR_ETH_REMOTE_FAULT);
  }
  if (status & (1 << 5)) {
 80010ea:	d4f4      	bmi.n	80010d6 <enet_get_link_status+0x32>
    err_unset(ERR_ETH_NEGOTIATING);
  } else {
    err_set(ERR_ETH_NEGOTIATING);
 80010ec:	f002 fab4 	bl	8003658 <err_set>
  }
  if (status & (1 << 2))
    return ENET_LINK_UP;
  return ENET_LINK_DOWN;
}
 80010f0:	f3c4 0080 	ubfx	r0, r4, #2, #1
 80010f4:	bd10      	pop	{r4, pc}
 80010f6:	bf00      	nop
 80010f8:	40028000 	.word	0x40028000

080010fc <eth_htons>:
  //printf(" rmii status = 0x%04x\r\n", (unsigned)r);
}

// todo: find ways for this to be overridden on CPU's with built-ins for this
uint16_t eth_htons(const uint16_t x)
{
 80010fc:	ba40      	rev16	r0, r0
  return ((x & 0xff) << 8) | ((x >> 8) & 0xff);
}
 80010fe:	b280      	uxth	r0, r0
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop

08001104 <eth_htonl>:
{
  return ((x & 0x000000ff) << 24)  |
         ((x & 0x0000ff00) << 8)   |
         ((x & 0x00ff0000) >> 8)   |
         ((x & 0xff000000) >> 24);
}
 8001104:	ba00      	rev	r0, r0
 8001106:	4770      	bx	lr

08001108 <enet_send_udp_ucast>:

void enet_send_udp_ucast(const uint8_t *dest_mac,
                         const uint32_t dest_ip, const uint16_t dest_port,
                         const uint32_t source_ip, const uint16_t source_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
 8001108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800110c:	b083      	sub	sp, #12
 800110e:	4c4e      	ldr	r4, [pc, #312]	; (8001248 <enet_send_udp_ucast+0x140>)
 8001110:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8001112:	9501      	str	r5, [sp, #4]
 8001114:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
 8001118:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800111c:	f8df e134 	ldr.w	lr, [pc, #308]	; 8001254 <enet_send_udp_ucast+0x14c>
 8001120:	1e47      	subs	r7, r0, #1
 8001122:	4626      	mov	r6, r4
 8001124:	3005      	adds	r0, #5
  eth_udp_header_t *h = (eth_udp_header_t *)&g_eth_udpbuf[0];
  for (int i = 0; i < 6; i++)
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
 8001126:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 800112a:	f806 cb01 	strb.w	ip, [r6], #1
                         const uint32_t dest_ip, const uint16_t dest_port,
                         const uint32_t source_ip, const uint16_t source_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  eth_udp_header_t *h = (eth_udp_header_t *)&g_eth_udpbuf[0];
  for (int i = 0; i < 6; i++)
 800112e:	4287      	cmp	r7, r0
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
 8001130:	f81e cb01 	ldrb.w	ip, [lr], #1
 8001134:	f886 c005 	strb.w	ip, [r6, #5]
                         const uint32_t dest_ip, const uint16_t dest_port,
                         const uint32_t source_ip, const uint16_t source_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  eth_udp_header_t *h = (eth_udp_header_t *)&g_eth_udpbuf[0];
  for (int i = 0; i < 6; i++)
 8001138:	d1f5      	bne.n	8001126 <enet_send_udp_ucast+0x1e>
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
 800113a:	7ba6      	ldrb	r6, [r4, #14]
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
 800113c:	7be7      	ldrb	r7, [r4, #15]
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
 800113e:	f8b4 c012 	ldrh.w	ip, [r4, #18]
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
 8001142:	f8b4 e018 	ldrh.w	lr, [r4, #24]
}

void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
 8001146:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8001258 <enet_send_udp_ucast+0x150>
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
 800114a:	4840      	ldr	r0, [pc, #256]	; (800124c <enet_send_udp_ucast+0x144>)
 800114c:	ba1b      	rev	r3, r3
 800114e:	fa91 fa81 	rev.w	sl, r1
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
 8001152:	f04f 0905 	mov.w	r9, #5
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
 8001156:	9901      	ldr	r1, [sp, #4]
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
 8001158:	f8c4 301a 	str.w	r3, [r4, #26]
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
 800115c:	f105 0308 	add.w	r3, r5, #8
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
 8001160:	f369 0603 	bfi	r6, r9, #0, #4
 8001164:	ba5b      	rev16	r3, r3
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
 8001166:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
 800116a:	f04f 0904 	mov.w	r9, #4
 800116e:	fa9b fb9b 	rev16.w	fp, fp
 8001172:	f369 1607 	bfi	r6, r9, #4, #4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
 8001176:	f36f 0787 	bfc	r7, #2, #6
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
  h->ip.dest_addr = eth_htonl(dest_ip);
 800117a:	f8c4 a01e 	str.w	sl, [r4, #30]
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
 800117e:	84e3      	strh	r3, [r4, #38]	; 0x26
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
 8001180:	f105 0a1c 	add.w	sl, r5, #28
  for (int i = 0; i < 6; i++)
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
 8001184:	f04f 0308 	mov.w	r3, #8
 8001188:	ba52      	rev16	r2, r2
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
 800118a:	f36f 0c0f 	bfc	ip, #0, #16
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
 800118e:	f36f 0e0f 	bfc	lr, #0, #16
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
 8001192:	f8a4 b022 	strh.w	fp, [r4, #34]	; 0x22
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
 8001196:	73a6      	strb	r6, [r4, #14]
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
 8001198:	73e7      	strb	r7, [r4, #15]
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
 800119a:	2601      	movs	r6, #1
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
 800119c:	2700      	movs	r7, #0
  for (int i = 0; i < 6; i++)
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
 800119e:	81a3      	strh	r3, [r4, #12]
 80011a0:	fa9a fa9a 	rev16.w	sl, sl
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
 80011a4:	f04f 0311 	mov.w	r3, #17
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
 80011a8:	f04f 0b40 	mov.w	fp, #64	; 0x40
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
 80011ac:	84a2      	strh	r2, [r4, #36]	; 0x24
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
 80011ae:	75e3      	strb	r3, [r4, #23]
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
 80011b0:	462a      	mov	r2, r5
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
 80011b2:	f8a4 c012 	strh.w	ip, [r4, #18]
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
 80011b6:	f8a4 e018 	strh.w	lr, [r4, #24]
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
 80011ba:	f8a4 a010 	strh.w	sl, [r4, #16]
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
 80011be:	f8a4 b014 	strh.w	fp, [r4, #20]
  h->ip.ttl = 1; // not sure here...
 80011c2:	75a6      	strb	r6, [r4, #22]
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
 80011c4:	8527      	strh	r7, [r4, #40]	; 0x28
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
 80011c6:	f002 fa8b 	bl	80036e0 <memcpy>
}

void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
 80011ca:	f8d8 3000 	ldr.w	r3, [r8]
 80011ce:	681b      	ldr	r3, [r3, #0]
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
  eth_send_raw_packet(g_eth_udpbuf, sizeof(eth_udp_header_t) + payload_len);
 80011d0:	352a      	adds	r5, #42	; 0x2a
}

void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
 80011d2:	42bb      	cmp	r3, r7
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
  eth_send_raw_packet(g_eth_udpbuf, sizeof(eth_udp_header_t) + payload_len);
 80011d4:	b2ad      	uxth	r5, r5
void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
  {
    err_set(ERR_ETH_BUFFER_FULL);
 80011d6:	4630      	mov	r0, r6
}

void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
 80011d8:	db30      	blt.n	800123c <enet_send_udp_ucast+0x134>
  {
    err_set(ERR_ETH_BUFFER_FULL);
    return; // if it's set, then we have run out of ringbuffer room. can't tx.
  }
  err_unset(ERR_ETH_BUFFER_FULL);
 80011da:	f002 fa43 	bl	8003664 <err_unset>
  /*
  printf("sending using TX descriptor %08x status 0x%08x\r\n",
         (unsigned)g_eth_tx_next_desc,
         (unsigned)g_eth_tx_next_desc->control);
 */
  uint8_t *buf = (uint8_t *)g_eth_dma_tx_next_desc->des2;
 80011de:	f8d8 4000 	ldr.w	r4, [r8]
  if (pkt_len > ETH_NBUF)
    pkt_len = ETH_NBUF; // let's not blow through our packet buffer
  memcpy(buf, pkt, pkt_len);
 80011e2:	4919      	ldr	r1, [pc, #100]	; (8001248 <enet_send_udp_ucast+0x140>)
  /*
  printf("sending using TX descriptor %08x status 0x%08x\r\n",
         (unsigned)g_eth_tx_next_desc,
         (unsigned)g_eth_tx_next_desc->control);
 */
  uint8_t *buf = (uint8_t *)g_eth_dma_tx_next_desc->des2;
 80011e4:	68a0      	ldr	r0, [r4, #8]
  if (pkt_len > ETH_NBUF)
    pkt_len = ETH_NBUF; // let's not blow through our packet buffer
  memcpy(buf, pkt, pkt_len);
 80011e6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80011ea:	bf28      	it	cs
 80011ec:	f44f 6500 	movcs.w	r5, #2048	; 0x800
 80011f0:	462a      	mov	r2, r5
 80011f2:	f002 fa75 	bl	80036e0 <memcpy>
  g_eth_dma_tx_next_desc->des1 = pkt_len;
 80011f6:	6065      	str	r5, [r4, #4]
  g_eth_dma_tx_next_desc->des0 |= 0x30000000; // LS+FS = single-buffer packet
 80011f8:	6823      	ldr	r3, [r4, #0]
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
 80011fa:	4a15      	ldr	r2, [pc, #84]	; (8001250 <enet_send_udp_ucast+0x148>)
  uint8_t *buf = (uint8_t *)g_eth_dma_tx_next_desc->des2;
  if (pkt_len > ETH_NBUF)
    pkt_len = ETH_NBUF; // let's not blow through our packet buffer
  memcpy(buf, pkt, pkt_len);
  g_eth_dma_tx_next_desc->des1 = pkt_len;
  g_eth_dma_tx_next_desc->des0 |= 0x30000000; // LS+FS = single-buffer packet
 80011fc:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001200:	6023      	str	r3, [r4, #0]
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
 8001202:	6823      	ldr	r3, [r4, #0]
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
 8001204:	f241 0114 	movw	r1, #4116	; 0x1014
  if (pkt_len > ETH_NBUF)
    pkt_len = ETH_NBUF; // let's not blow through our packet buffer
  memcpy(buf, pkt, pkt_len);
  g_eth_dma_tx_next_desc->des1 = pkt_len;
  g_eth_dma_tx_next_desc->des0 |= 0x30000000; // LS+FS = single-buffer packet
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
 8001208:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800120c:	6023      	str	r3, [r4, #0]
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
 800120e:	5853      	ldr	r3, [r2, r1]
 8001210:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8001214:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001218:	d005      	beq.n	8001226 <enet_send_udp_ucast+0x11e>
  {
    ETH->DMASR = ETH_DMASR_TBUS; // clear the buffer-unavailable flag
    ETH->DMATPDR = 0; // transmit poll demand = kick it moving again
  }
  g_eth_dma_tx_next_desc = (eth_dma_desc_t *)g_eth_dma_tx_next_desc->des3;
 800121a:	68e3      	ldr	r3, [r4, #12]
 800121c:	f8c8 3000 	str.w	r3, [r8]
    0x08, 0xca, 0xfe, 0xbe, 0xef, 0x12, 0x34, 0x56,
    0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7b, 0x94, 0x60, 0x0f };
  eth_send_raw_packet(raw_test_pkt, 68); //sizeof(reg_idx) + payload_len);
  */
}
 8001220:	b003      	add	sp, #12
 8001222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
  {
    ETH->DMASR = ETH_DMASR_TBUS; // clear the buffer-unavailable flag
    ETH->DMATPDR = 0; // transmit poll demand = kick it moving again
 8001226:	f241 0304 	movw	r3, #4100	; 0x1004
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
  {
    ETH->DMASR = ETH_DMASR_TBUS; // clear the buffer-unavailable flag
 800122a:	f842 9001 	str.w	r9, [r2, r1]
    ETH->DMATPDR = 0; // transmit poll demand = kick it moving again
 800122e:	50d7      	str	r7, [r2, r3]
  }
  g_eth_dma_tx_next_desc = (eth_dma_desc_t *)g_eth_dma_tx_next_desc->des3;
 8001230:	68e3      	ldr	r3, [r4, #12]
 8001232:	f8c8 3000 	str.w	r3, [r8]
    0x08, 0xca, 0xfe, 0xbe, 0xef, 0x12, 0x34, 0x56,
    0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7b, 0x94, 0x60, 0x0f };
  eth_send_raw_packet(raw_test_pkt, 68); //sizeof(reg_idx) + payload_len);
  */
}
 8001236:	b003      	add	sp, #12
 8001238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800123c:	b003      	add	sp, #12
 800123e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
  {
    err_set(ERR_ETH_BUFFER_FULL);
 8001242:	f002 ba09 	b.w	8003658 <err_set>
 8001246:	bf00      	nop
 8001248:	20000970 	.word	0x20000970
 800124c:	2000099a 	.word	0x2000099a
 8001250:	40028000 	.word	0x40028000
 8001254:	0800c638 	.word	0x0800c638
 8001258:	20000004 	.word	0x20000004

0800125c <enet_send_udp_mcast>:
static uint8_t  g_eth_src_mac[6] = { 0xa4, 0xf3, 0xc1, 0x00, 0x01, 0x00 };
static uint32_t g_eth_src_ip = 0x0a636363; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125e:	b087      	sub	sp, #28
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 8001260:	e88d 000e 	stmia.w	sp, {r1, r2, r3}

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
 8001264:	f3c0 4c07 	ubfx	ip, r0, #16, #8
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
 8001268:	f3c0 2e07 	ubfx	lr, r0, #8, #8
static uint8_t  g_eth_src_mac[6] = { 0xa4, 0xf3, 0xc1, 0x00, 0x01, 0x00 };
static uint32_t g_eth_src_ip = 0x0a636363; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
 800126c:	4604      	mov	r4, r0
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 800126e:	460a      	mov	r2, r1
static uint32_t g_eth_src_ip = 0x0a636363; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
 8001270:	2701      	movs	r7, #1
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 8001272:	4601      	mov	r1, r0
static uint32_t g_eth_src_ip = 0x0a636363; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
 8001274:	2600      	movs	r6, #0
 8001276:	255e      	movs	r5, #94	; 0x5e
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 8001278:	a804      	add	r0, sp, #16
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <enet_send_udp_mcast+0x40>)
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
 800127c:	f88d 4015 	strb.w	r4, [sp, #21]

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
 8001280:	f88d c013 	strb.w	ip, [sp, #19]
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
 8001284:	f88d e014 	strb.w	lr, [sp, #20]
static uint32_t g_eth_src_ip = 0x0a636363; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e,
 8001288:	f88d 7010 	strb.w	r7, [sp, #16]
 800128c:	f88d 6011 	strb.w	r6, [sp, #17]
 8001290:	f88d 5012 	strb.w	r5, [sp, #18]
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 8001294:	f7ff ff38 	bl	8001108 <enet_send_udp_ucast>
                      g_eth_src_ip, mcast_port,
                      payload, payload_len);
}
 8001298:	b007      	add	sp, #28
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129c:	0a636363 	.word	0x0a636363

080012a0 <enet_process_rx_ring>:
  eth_send_raw_packet(raw_test_pkt, 68); //sizeof(reg_idx) + payload_len);
  */
}

uint_fast8_t enet_process_rx_ring()
{
 80012a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012a4:	4e55      	ldr	r6, [pc, #340]	; (80013fc <enet_process_rx_ring+0x15c>)
 80012a6:	f8df 9164 	ldr.w	r9, [pc, #356]	; 800140c <enet_process_rx_ring+0x16c>
  uint_fast8_t num_pkts_rx = 0;
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
  {
    const uint16_t rp = g_eth_rxpool_ptrs_rpos;
    const uint8_t *start = (const uint8_t *)g_eth_rxpool_start[rp];
 80012aa:	f8df a164 	ldr.w	sl, [pc, #356]	; 8001410 <enet_process_rx_ring+0x170>
  eth_send_raw_packet(raw_test_pkt, 68); //sizeof(reg_idx) + payload_len);
  */
}

uint_fast8_t enet_process_rx_ring()
{
 80012ae:	b083      	sub	sp, #12
  uint_fast8_t num_pkts_rx = 0;
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
 80012b0:	46b0      	mov	r8, r6
  */
}

uint_fast8_t enet_process_rx_ring()
{
  uint_fast8_t num_pkts_rx = 0;
 80012b2:	2700      	movs	r7, #0
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
 80012b4:	f8b9 2000 	ldrh.w	r2, [r9]
 80012b8:	8833      	ldrh	r3, [r6, #0]
 80012ba:	b292      	uxth	r2, r2
 80012bc:	b29b      	uxth	r3, r3
 80012be:	429a      	cmp	r2, r3
 80012c0:	f000 8082 	beq.w	80013c8 <enet_process_rx_ring+0x128>
  {
    const uint16_t rp = g_eth_rxpool_ptrs_rpos;
 80012c4:	f8b8 3000 	ldrh.w	r3, [r8]
    const uint8_t *start = (const uint8_t *)g_eth_rxpool_start[rp];
    const uint16_t len = g_eth_rxpool_len[rp];
 80012c8:	4a4d      	ldr	r2, [pc, #308]	; (8001400 <enet_process_rx_ring+0x160>)
 80012ca:	4c4e      	ldr	r4, [pc, #312]	; (8001404 <enet_process_rx_ring+0x164>)
uint_fast8_t enet_process_rx_ring()
{
  uint_fast8_t num_pkts_rx = 0;
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
  {
    const uint16_t rp = g_eth_rxpool_ptrs_rpos;
 80012cc:	b29b      	uxth	r3, r3
    //printf("eth rxpool wpos = %d rpos = %d start %d len %d\r\n",
    //       g_eth_rxpool_ptrs_wpos,
    //       rp, start - g_eth_rxpool, len);
    // see if it's addressed to us
    const eth_eth_header_t *e = (const eth_eth_header_t *)start;
    uint8_t unicast_match = 1, multicast_match = 1, broadcast_match = 1;
 80012ce:	2101      	movs	r1, #1
{
  uint_fast8_t num_pkts_rx = 0;
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
  {
    const uint16_t rp = g_eth_rxpool_ptrs_rpos;
    const uint8_t *start = (const uint8_t *)g_eth_rxpool_start[rp];
 80012d0:	f85a c023 	ldr.w	ip, [sl, r3, lsl #2]
    const uint16_t len = g_eth_rxpool_len[rp];
 80012d4:	f832 b013 	ldrh.w	fp, [r2, r3, lsl #1]
 80012d8:	f10c 0e05 	add.w	lr, ip, #5
 80012dc:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80012e0:	fa1f fb8b 	uxth.w	fp, fp
    //printf("eth rxpool wpos = %d rpos = %d start %d len %d\r\n",
    //       g_eth_rxpool_ptrs_wpos,
    //       rp, start - g_eth_rxpool, len);
    // see if it's addressed to us
    const eth_eth_header_t *e = (const eth_eth_header_t *)start;
    uint8_t unicast_match = 1, multicast_match = 1, broadcast_match = 1;
 80012e4:	4608      	mov	r0, r1
           e->dest_addr[0], e->dest_addr[1], e->dest_addr[2],
           e->dest_addr[3], e->dest_addr[4], e->dest_addr[5]);
    */
    for (int i = 0; i < 6; i++)
    {
      if (e->dest_addr[i] != g_eth_src_mac[i])
 80012e6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80012ea:	f814 5b01 	ldrb.w	r5, [r4], #1
        unicast_match = 0;
 80012ee:	42aa      	cmp	r2, r5
 80012f0:	bf18      	it	ne
 80012f2:	2000      	movne	r0, #0
      if (e->dest_addr[i] != 0xff)
        broadcast_match = 0;
 80012f4:	2aff      	cmp	r2, #255	; 0xff
 80012f6:	bf18      	it	ne
 80012f8:	2100      	movne	r1, #0
    /*
    printf("rx mac: %02x:%02x:%02x:%02x:%02x:%02x\r\n",
           e->dest_addr[0], e->dest_addr[1], e->dest_addr[2],
           e->dest_addr[3], e->dest_addr[4], e->dest_addr[5]);
    */
    for (int i = 0; i < 6; i++)
 80012fa:	4573      	cmp	r3, lr
 80012fc:	d1f3      	bne.n	80012e6 <enet_process_rx_ring+0x46>
      if (e->dest_addr[i] != g_eth_src_mac[i])
        unicast_match = 0;
      if (e->dest_addr[i] != 0xff)
        broadcast_match = 0;
    }
    if (e->dest_addr[0] != 0x01 ||
 80012fe:	f89c 2000 	ldrb.w	r2, [ip]
 8001302:	2a01      	cmp	r2, #1
 8001304:	d014      	beq.n	8001330 <enet_process_rx_ring+0x90>
        e->dest_addr[2] != 0x5e)
      multicast_match = 0;
    //printf("  ucast_match = %d, bcast_match = %d, mcast_match = %d\r\n",
    //       unicast_match, broadcast_match, multicast_match);
    //printf("dispatch @ %8u\r\n", (unsigned)SYSTIME);
    if (unicast_match || multicast_match || broadcast_match)
 8001306:	b900      	cbnz	r0, 800130a <enet_process_rx_ring+0x6a>
 8001308:	b141      	cbz	r1, 800131c <enet_process_rx_ring+0x7c>

static bool eth_dispatch_eth(const uint8_t *data, const uint16_t len)
{
  // dispatch according to protocol
  const eth_eth_header_t *e = (const eth_eth_header_t *)data;
  switch (eth_htons(e->ethertype))
 800130a:	f8bc 300c 	ldrh.w	r3, [ip, #12]
 800130e:	ba5b      	rev16	r3, r3
 8001310:	b29b      	uxth	r3, r3
 8001312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001316:	d01a      	beq.n	800134e <enet_process_rx_ring+0xae>
      for (int i = 0; i < NUM_DMXL; i++)
        dmxl_set_control_mode(i, (dmxl_control_mode_t)payload[1+i]);
      delay_ms(1); // be sure they control mode messages get through
      return true;
    }
    else if (cmd == 2 && payload_len >= 9)
 8001318:	2300      	movs	r3, #0
      multicast_match = 0;
    //printf("  ucast_match = %d, bcast_match = %d, mcast_match = %d\r\n",
    //       unicast_match, broadcast_match, multicast_match);
    //printf("dispatch @ %8u\r\n", (unsigned)SYSTIME);
    if (unicast_match || multicast_match || broadcast_match)
      num_pkts_rx += eth_dispatch_eth(start, len) ? 1 : 0;
 800131a:	441f      	add	r7, r3
    if (++g_eth_rxpool_ptrs_rpos >= ETH_RAM_RXPOOL_NPTR)
 800131c:	8833      	ldrh	r3, [r6, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	b29b      	uxth	r3, r3
 8001322:	2b7f      	cmp	r3, #127	; 0x7f
 8001324:	8033      	strh	r3, [r6, #0]
      g_eth_rxpool_ptrs_rpos = 0;
 8001326:	bf84      	itt	hi
 8001328:	2300      	movhi	r3, #0
 800132a:	f8a8 3000 	strhhi.w	r3, [r8]
 800132e:	e7c1      	b.n	80012b4 <enet_process_rx_ring+0x14>
      if (e->dest_addr[i] != g_eth_src_mac[i])
        unicast_match = 0;
      if (e->dest_addr[i] != 0xff)
        broadcast_match = 0;
    }
    if (e->dest_addr[0] != 0x01 ||
 8001330:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1e6      	bne.n	8001306 <enet_process_rx_ring+0x66>
        e->dest_addr[1] != 0x00 ||
 8001338:	f89c 3002 	ldrb.w	r3, [ip, #2]
 800133c:	2b5e      	cmp	r3, #94	; 0x5e
 800133e:	d1e2      	bne.n	8001306 <enet_process_rx_ring+0x66>

static bool eth_dispatch_eth(const uint8_t *data, const uint16_t len)
{
  // dispatch according to protocol
  const eth_eth_header_t *e = (const eth_eth_header_t *)data;
  switch (eth_htons(e->ethertype))
 8001340:	f8bc 300c 	ldrh.w	r3, [ip, #12]
 8001344:	ba5b      	rev16	r3, r3
 8001346:	b29b      	uxth	r3, r3
 8001348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800134c:	d1e4      	bne.n	8001318 <enet_process_rx_ring+0x78>
}

static bool eth_dispatch_ip(const uint8_t *data, const uint16_t len)
{
  const eth_ip_header_t *ip = (const eth_ip_header_t *)data;
  if (ip->version != 4) // we only handle ipv4 (for now...)
 800134e:	f89c 300e 	ldrb.w	r3, [ip, #14]
 8001352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001356:	2b40      	cmp	r3, #64	; 0x40
 8001358:	d1de      	bne.n	8001318 <enet_process_rx_ring+0x78>
    return false;
  // if it's unicast, verify our IP address, otherwise ignore the packet
  if (ip->eth.dest_addr[0] == g_eth_src_mac[0])
 800135a:	2aa4      	cmp	r2, #164	; 0xa4
 800135c:	d038      	beq.n	80013d0 <enet_process_rx_ring+0x130>
    if (ip->source_addr != eth_htonl(g_eth_src_ip))
      return false;
  if (ip->proto == ETH_IP_PROTO_UDP)
 800135e:	f89c 3017 	ldrb.w	r3, [ip, #23]
 8001362:	2b11      	cmp	r3, #17
 8001364:	d1d8      	bne.n	8001318 <enet_process_rx_ring+0x78>

static bool eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
  const eth_udp_header_t *udp = (const eth_udp_header_t *)data;
  const uint16_t port = eth_htons(udp->dest_port);
  const uint16_t payload_len = eth_htons(udp->len) - 8;
 8001366:	f8bc 3026 	ldrh.w	r3, [ip, #38]	; 0x26
}

static bool eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
  const eth_udp_header_t *udp = (const eth_udp_header_t *)data;
  const uint16_t port = eth_htons(udp->dest_port);
 800136a:	f8bc 2024 	ldrh.w	r2, [ip, #36]	; 0x24
 800136e:	ba5b      	rev16	r3, r3
  const uint16_t payload_len = eth_htons(udp->len) - 8;
 8001370:	3b08      	subs	r3, #8
  const uint8_t *payload = data + sizeof(eth_udp_header_t);
  //printf("  udp len: %d\r\n", udp_payload_len);
  if (payload_len > len - sizeof(eth_udp_header_t))
 8001372:	f1ab 0b2a 	sub.w	fp, fp, #42	; 0x2a

static bool eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
  const eth_udp_header_t *udp = (const eth_udp_header_t *)data;
  const uint16_t port = eth_htons(udp->dest_port);
  const uint16_t payload_len = eth_htons(udp->len) - 8;
 8001376:	b29b      	uxth	r3, r3
 8001378:	ba52      	rev16	r2, r2
  const uint8_t *payload = data + sizeof(eth_udp_header_t);
  //printf("  udp len: %d\r\n", udp_payload_len);
  if (payload_len > len - sizeof(eth_udp_header_t))
 800137a:	455b      	cmp	r3, fp
 800137c:	b292      	uxth	r2, r2
 800137e:	d8cb      	bhi.n	8001318 <enet_process_rx_ring+0x78>
  for (int i = 0; i < payload_len; i++)
  {
    printf("  %02d: %02x\r\n", i, payload[i]);
  }
  */
  if (port == 11333 && payload_len > 0)
 8001380:	f642 4145 	movw	r1, #11333	; 0x2c45
 8001384:	428a      	cmp	r2, r1
 8001386:	d1c7      	bne.n	8001318 <enet_process_rx_ring+0x78>
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0c6      	beq.n	800131a <enet_process_rx_ring+0x7a>
  {
    const uint8_t cmd = payload[0];
 800138c:	f89c 202a 	ldrb.w	r2, [ip, #42]	; 0x2a
    //printf("  enet rx cmd = 0x%02x\r\n", cmd);
    if (cmd == 1 && payload_len >= 5)
 8001390:	2a01      	cmp	r2, #1
static bool eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
  const eth_udp_header_t *udp = (const eth_udp_header_t *)data;
  const uint16_t port = eth_htons(udp->dest_port);
  const uint16_t payload_len = eth_htons(udp->len) - 8;
  const uint8_t *payload = data + sizeof(eth_udp_header_t);
 8001392:	f10c 052a 	add.w	r5, ip, #42	; 0x2a
  */
  if (port == 11333 && payload_len > 0)
  {
    const uint8_t cmd = payload[0];
    //printf("  enet rx cmd = 0x%02x\r\n", cmd);
    if (cmd == 1 && payload_len >= 5)
 8001396:	d021      	beq.n	80013dc <enet_process_rx_ring+0x13c>
      for (int i = 0; i < NUM_DMXL; i++)
        dmxl_set_control_mode(i, (dmxl_control_mode_t)payload[1+i]);
      delay_ms(1); // be sure they control mode messages get through
      return true;
    }
    else if (cmd == 2 && payload_len >= 9)
 8001398:	2a02      	cmp	r2, #2
 800139a:	d1bd      	bne.n	8001318 <enet_process_rx_ring+0x78>
 800139c:	2b08      	cmp	r3, #8
 800139e:	d9bb      	bls.n	8001318 <enet_process_rx_ring+0x78>
 80013a0:	f10c 0008 	add.w	r0, ip, #8
 80013a4:	4669      	mov	r1, sp
    {
      uint16_t targets[NUM_DMXL];
      for (int i = 0; i < NUM_DMXL; i++)
        targets[i] = (payload[1+2*i] << 8) | payload[2+2*i];
 80013a6:	f89c 202b 	ldrb.w	r2, [ip, #43]	; 0x2b
 80013aa:	f89c 302c 	ldrb.w	r3, [ip, #44]	; 0x2c
 80013ae:	f10c 0c02 	add.w	ip, ip, #2
 80013b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      return true;
    }
    else if (cmd == 2 && payload_len >= 9)
    {
      uint16_t targets[NUM_DMXL];
      for (int i = 0; i < NUM_DMXL; i++)
 80013b6:	4584      	cmp	ip, r0
        targets[i] = (payload[1+2*i] << 8) | payload[2+2*i];
 80013b8:	f821 3b02 	strh.w	r3, [r1], #2
      return true;
    }
    else if (cmd == 2 && payload_len >= 9)
    {
      uint16_t targets[NUM_DMXL];
      for (int i = 0; i < NUM_DMXL; i++)
 80013bc:	d1f3      	bne.n	80013a6 <enet_process_rx_ring+0x106>
      */
      /*
      for (int i = 0; i < NUM_DMXL; i++)
        dmxl_set_control_target(i, targets[i]);
      */
      dmxl_set_all_control_targets(targets);
 80013be:	4668      	mov	r0, sp
 80013c0:	f000 fd26 	bl	8001e10 <dmxl_set_all_control_targets>
 80013c4:	2301      	movs	r3, #1
 80013c6:	e7a8      	b.n	800131a <enet_process_rx_ring+0x7a>
      num_pkts_rx += eth_dispatch_eth(start, len) ? 1 : 0;
    if (++g_eth_rxpool_ptrs_rpos >= ETH_RAM_RXPOOL_NPTR)
      g_eth_rxpool_ptrs_rpos = 0;
  }
  return num_pkts_rx;
}
 80013c8:	4638      	mov	r0, r7
 80013ca:	b003      	add	sp, #12
 80013cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const eth_ip_header_t *ip = (const eth_ip_header_t *)data;
  if (ip->version != 4) // we only handle ipv4 (for now...)
    return false;
  // if it's unicast, verify our IP address, otherwise ignore the packet
  if (ip->eth.dest_addr[0] == g_eth_src_mac[0])
    if (ip->source_addr != eth_htonl(g_eth_src_ip))
 80013d0:	f8dc 301a 	ldr.w	r3, [ip, #26]
 80013d4:	4a0c      	ldr	r2, [pc, #48]	; (8001408 <enet_process_rx_ring+0x168>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d19e      	bne.n	8001318 <enet_process_rx_ring+0x78>
 80013da:	e7c0      	b.n	800135e <enet_process_rx_ring+0xbe>
  */
  if (port == 11333 && payload_len > 0)
  {
    const uint8_t cmd = payload[0];
    //printf("  enet rx cmd = 0x%02x\r\n", cmd);
    if (cmd == 1 && payload_len >= 5)
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d99b      	bls.n	8001318 <enet_process_rx_ring+0x78>
 80013e0:	2400      	movs	r4, #0
      /*
      printf("    modes: %d %d %d %d\r\n",
             payload[1], payload[2], payload[3], payload[4]);
      */
      for (int i = 0; i < NUM_DMXL; i++)
        dmxl_set_control_mode(i, (dmxl_control_mode_t)payload[1+i]);
 80013e2:	b2e0      	uxtb	r0, r4
 80013e4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80013e8:	3401      	adds	r4, #1
 80013ea:	f000 fc81 	bl	8001cf0 <dmxl_set_control_mode>
    {
      /*
      printf("    modes: %d %d %d %d\r\n",
             payload[1], payload[2], payload[3], payload[4]);
      */
      for (int i = 0; i < NUM_DMXL; i++)
 80013ee:	2c04      	cmp	r4, #4
 80013f0:	d1f7      	bne.n	80013e2 <enet_process_rx_ring+0x142>
        dmxl_set_control_mode(i, (dmxl_control_mode_t)payload[1+i]);
      delay_ms(1); // be sure they control mode messages get through
 80013f2:	2001      	movs	r0, #1
 80013f4:	f002 f8a0 	bl	8003538 <delay_ms>
 80013f8:	2301      	movs	r3, #1
 80013fa:	e78e      	b.n	800131a <enet_process_rx_ring+0x7a>
 80013fc:	20008f8e 	.word	0x20008f8e
 8001400:	20008f90 	.word	0x20008f90
 8001404:	0800c638 	.word	0x0800c638
 8001408:	6363630a 	.word	0x6363630a
 800140c:	20008f8c 	.word	0x20008f8c
 8001410:	20009094 	.word	0x20009094

08001414 <enet_send_state>:

// todo: be smarter about multicast group choice
#define MCAST_IP 0xe000007c

void enet_send_state(volatile uint8_t* messages, uint16_t msgLen)
{
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
  // uint8_t mesg2[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  // volatile uint8_t* tx_state = messages; // make a local copy to ensure coherence
  enet_send_udp_mcast(MCAST_IP, 11333, (uint8_t *)messages, msgLen);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <enet_send_state+0x10>)
 800141a:	f642 4145 	movw	r1, #11333	; 0x2c45
 800141e:	f7ff bf1d 	b.w	800125c <enet_send_udp_mcast>
 8001422:	bf00      	nop
 8001424:	e000007c 	.word	0xe000007c

08001428 <systime_init>:
#include "./stm32/stm32f4xx.h"

void systime_init()
{
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001428:	4a0f      	ldr	r2, [pc, #60]	; (8001468 <systime_init+0x40>)
 800142a:	6c13      	ldr	r3, [r2, #64]	; 0x40
#include "systime.h"
#include "./stm32/stm32f4xx.h"

void systime_init()
{
 800142c:	b082      	sub	sp, #8
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800142e:	f043 0301 	orr.w	r3, r3, #1
  for (volatile int i = 0; i < 1000; i++) { } // let tim2 spin up
 8001432:	2100      	movs	r1, #0
#include "./stm32/stm32f4xx.h"

void systime_init()
{
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
  for (volatile int i = 0; i < 1000; i++) { } // let tim2 spin up
 8001436:	9101      	str	r1, [sp, #4]
 8001438:	9b01      	ldr	r3, [sp, #4]
 800143a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800143e:	da06      	bge.n	800144e <systime_init+0x26>
 8001440:	9b01      	ldr	r3, [sp, #4]
 8001442:	3301      	adds	r3, #1
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	9b01      	ldr	r3, [sp, #4]
 8001448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800144c:	dbf8      	blt.n	8001440 <systime_init+0x18>
  TIM2->PSC = 168000000 / 2 / 1000000 - 1; // 83
 800144e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  TIM2->ARR = 0xffffffff; // count as long as possible
  TIM2->EGR = TIM_EGR_UG; // load the PSC register immediately
 8001452:	2201      	movs	r2, #1
void systime_init()
{
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
  for (volatile int i = 0; i < 1000; i++) { } // let tim2 spin up
  TIM2->PSC = 168000000 / 2 / 1000000 - 1; // 83
 8001454:	2053      	movs	r0, #83	; 0x53
  TIM2->ARR = 0xffffffff; // count as long as possible
 8001456:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
void systime_init()
{
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
  for (volatile int i = 0; i < 1000; i++) { } // let tim2 spin up
  TIM2->PSC = 168000000 / 2 / 1000000 - 1; // 83
 800145a:	8518      	strh	r0, [r3, #40]	; 0x28
  TIM2->ARR = 0xffffffff; // count as long as possible
 800145c:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIM2->EGR = TIM_EGR_UG; // load the PSC register immediately
 800145e:	829a      	strh	r2, [r3, #20]
  TIM2->CR1 = TIM_CR1_CEN; // start counter
 8001460:	801a      	strh	r2, [r3, #0]
}
 8001462:	b002      	add	sp, #8
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800

0800146c <dmxl_tx.part.1>:
      dmxl_set_usart_baud(i, 250000);
    }
  }
}

static void dmxl_tx(const uint8_t port_idx,
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
                    const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
    return; // bogus port index
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
  USART_TypeDef *u = dp->uart;
 800146e:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <dmxl_tx.part.1+0x88>)
 8001470:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001474:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
 8001478:	2700      	movs	r7, #0
                    const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
    return; // bogus port index
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
  USART_TypeDef *u = dp->uart;
 800147a:	68d8      	ldr	r0, [r3, #12]
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
 800147c:	8983      	ldrh	r3, [r0, #12]
 800147e:	f023 0304 	bic.w	r3, r3, #4
 8001482:	041b      	lsls	r3, r3, #16
 8001484:	0c1b      	lsrs	r3, r3, #16
 8001486:	8183      	strh	r3, [r0, #12]
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
 8001488:	8983      	ldrh	r3, [r0, #12]
 800148a:	b29b      	uxth	r3, r3
 800148c:	f043 0308 	orr.w	r3, r3, #8
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
 8001490:	3202      	adds	r2, #2
  if (port_idx >= NUM_DMXL)
    return; // bogus port index
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
  USART_TypeDef *u = dp->uart;
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
 8001492:	8183      	strh	r3, [r0, #12]
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
 8001494:	463e      	mov	r6, r7
 8001496:	463c      	mov	r4, r7
  {
    while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
    if (i <= 1)
      u->DR = 0xff; // preamble
 8001498:	f04f 0eff 	mov.w	lr, #255	; 0xff
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
  {
    while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
 800149c:	8803      	ldrh	r3, [r0, #0]
 800149e:	061d      	lsls	r5, r3, #24
 80014a0:	d5fc      	bpl.n	800149c <dmxl_tx.part.1+0x30>
    if (i <= 1)
 80014a2:	2c01      	cmp	r4, #1
      // send checksum
      u->DR = ~csum;
    }
    else
    {
      u->DR = payload[i-2]; // send payload byte
 80014a4:	f1a4 0502 	sub.w	r5, r4, #2
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
  {
    while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
    if (i <= 1)
 80014a8:	d91a      	bls.n	80014e0 <dmxl_tx.part.1+0x74>
      u->DR = 0xff; // preamble
    else if (i == payload_len + 2)
 80014aa:	42b2      	cmp	r2, r6
 80014ac:	d01b      	beq.n	80014e6 <dmxl_tx.part.1+0x7a>
      // send checksum
      u->DR = ~csum;
    }
    else
    {
      u->DR = payload[i-2]; // send payload byte
 80014ae:	5d4b      	ldrb	r3, [r1, r5]
 80014b0:	8083      	strh	r3, [r0, #4]
      csum += payload[i-2];
 80014b2:	5d4d      	ldrb	r5, [r1, r5]
 80014b4:	197b      	adds	r3, r7, r5
 80014b6:	b2df      	uxtb	r7, r3
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
  USART_TypeDef *u = dp->uart;
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
 80014b8:	3401      	adds	r4, #1
 80014ba:	b2e4      	uxtb	r4, r4
 80014bc:	4294      	cmp	r4, r2
 80014be:	4626      	mov	r6, r4
 80014c0:	ddec      	ble.n	800149c <dmxl_tx.part.1+0x30>
    {
      u->DR = payload[i-2]; // send payload byte
      csum += payload[i-2];
    }
  }
  while (!(u->SR & USART_SR_TC)) { } // wait for TX to finish
 80014c2:	8803      	ldrh	r3, [r0, #0]
 80014c4:	065b      	lsls	r3, r3, #25
 80014c6:	d5fc      	bpl.n	80014c2 <dmxl_tx.part.1+0x56>
  u->CR1 &= ~USART_CR1_TE; // disable the transmitter
 80014c8:	8983      	ldrh	r3, [r0, #12]
 80014ca:	f023 0308 	bic.w	r3, r3, #8
 80014ce:	041b      	lsls	r3, r3, #16
 80014d0:	0c1b      	lsrs	r3, r3, #16
 80014d2:	8183      	strh	r3, [r0, #12]
  u->CR1 |=  USART_CR1_RE; // re-enable the receiver
 80014d4:	8983      	ldrh	r3, [r0, #12]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	8183      	strh	r3, [r0, #12]
 80014de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
  {
    while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
    if (i <= 1)
      u->DR = 0xff; // preamble
 80014e0:	f8a0 e004 	strh.w	lr, [r0, #4]
 80014e4:	e7e8      	b.n	80014b8 <dmxl_tx.part.1+0x4c>
    else if (i == payload_len + 2)
    {
      // send checksum
      u->DR = ~csum;
 80014e6:	f487 437f 	eor.w	r3, r7, #65280	; 0xff00
 80014ea:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80014ee:	8083      	strh	r3, [r0, #4]
 80014f0:	e7e2      	b.n	80014b8 <dmxl_tx.part.1+0x4c>
 80014f2:	bf00      	nop
 80014f4:	2000000c 	.word	0x2000000c

080014f8 <dmxl_write_data>:
}

static void dmxl_write_data(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t data_len, const uint8_t start_addr,
                            const uint8_t *data)
{
 80014f8:	b530      	push	{r4, r5, lr}
 80014fa:	b0c1      	sub	sp, #260	; 0x104
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = data_len + 3;
 80014fc:	1cd5      	adds	r5, r2, #3
  pkt[2] = 3; // instruction: "write data"
 80014fe:	2403      	movs	r4, #3
                            const uint8_t data_len, const uint8_t start_addr,
                            const uint8_t *data)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = data_len + 3;
 8001500:	f88d 5001 	strb.w	r5, [sp, #1]
static void dmxl_write_data(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t data_len, const uint8_t start_addr,
                            const uint8_t *data)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
 8001504:	f88d 1000 	strb.w	r1, [sp]
  pkt[1] = data_len + 3;
  pkt[2] = 3; // instruction: "write data"
  pkt[3] = start_addr;
 8001508:	f88d 3003 	strb.w	r3, [sp, #3]
                            const uint8_t *data)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = data_len + 3;
  pkt[2] = 3; // instruction: "write data"
 800150c:	f88d 4002 	strb.w	r4, [sp, #2]
  pkt[3] = start_addr;
  for (int i = 0; i < data_len; i++)
 8001510:	b152      	cbz	r2, 8001528 <dmxl_write_data+0x30>
 8001512:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8001514:	446d      	add	r5, sp
 8001516:	1e59      	subs	r1, r3, #1
 8001518:	f10d 0303 	add.w	r3, sp, #3
    pkt[4+i] = data[i];
 800151c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8001520:	f803 4f01 	strb.w	r4, [r3, #1]!
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = data_len + 3;
  pkt[2] = 3; // instruction: "write data"
  pkt[3] = start_addr;
  for (int i = 0; i < data_len; i++)
 8001524:	42ab      	cmp	r3, r5
 8001526:	d1f9      	bne.n	800151c <dmxl_write_data+0x24>
}

static void dmxl_tx(const uint8_t port_idx,
                    const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
 8001528:	2803      	cmp	r0, #3
 800152a:	d804      	bhi.n	8001536 <dmxl_write_data+0x3e>
  pkt[1] = data_len + 3;
  pkt[2] = 3; // instruction: "write data"
  pkt[3] = start_addr;
  for (int i = 0; i < data_len; i++)
    pkt[4+i] = data[i];
  dmxl_tx(port_idx, pkt, data_len + 4);
 800152c:	3204      	adds	r2, #4
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	4669      	mov	r1, sp
 8001532:	f7ff ff9b 	bl	800146c <dmxl_tx.part.1>
}
 8001536:	b041      	add	sp, #260	; 0x104
 8001538:	bd30      	pop	{r4, r5, pc}
 800153a:	bf00      	nop

0800153c <dmxl_read_data.constprop.3>:

static void dmxl_read_data(const uint8_t port_idx, const uint8_t dmxl_id,
 800153c:	b530      	push	{r4, r5, lr}
 800153e:	b0c1      	sub	sp, #260	; 0x104
                           const uint8_t data_len, const uint8_t start_addr)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
 8001540:	2501      	movs	r5, #1
  pkt[1] = 4; // this packet's "length" is 4
 8001542:	2404      	movs	r4, #4
  pkt[2] = 2; // instruction: "read data"
 8001544:	2302      	movs	r3, #2
}

static void dmxl_tx(const uint8_t port_idx,
                    const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
 8001546:	2803      	cmp	r0, #3
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = 4; // this packet's "length" is 4
  pkt[2] = 2; // instruction: "read data"
  pkt[3] = start_addr;
 8001548:	f88d 2003 	strb.w	r2, [sp, #3]
  pkt[4] = data_len;
 800154c:	f88d 1004 	strb.w	r1, [sp, #4]

static void dmxl_read_data(const uint8_t port_idx, const uint8_t dmxl_id,
                           const uint8_t data_len, const uint8_t start_addr)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
 8001550:	f88d 5000 	strb.w	r5, [sp]
  pkt[1] = 4; // this packet's "length" is 4
 8001554:	f88d 4001 	strb.w	r4, [sp, #1]
  pkt[2] = 2; // instruction: "read data"
 8001558:	f88d 3002 	strb.w	r3, [sp, #2]
}

static void dmxl_tx(const uint8_t port_idx,
                    const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
 800155c:	d803      	bhi.n	8001566 <dmxl_read_data.constprop.3+0x2a>
 800155e:	4669      	mov	r1, sp
 8001560:	2205      	movs	r2, #5
 8001562:	f7ff ff83 	bl	800146c <dmxl_tx.part.1>
  pkt[1] = 4; // this packet's "length" is 4
  pkt[2] = 2; // instruction: "read data"
  pkt[3] = start_addr;
  pkt[4] = data_len;
  dmxl_tx(port_idx, pkt, 5);
}
 8001566:	b041      	add	sp, #260	; 0x104
 8001568:	bd30      	pop	{r4, r5, pc}
 800156a:	bf00      	nop

0800156c <usart3_vector>:
    g_dmxl_ring_wpos[dmxl_port] = 0;
}

void usart3_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
 800156c:	490b      	ldr	r1, [pc, #44]	; (800159c <usart3_vector+0x30>)
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 800156e:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <usart3_vector+0x34>)
    g_dmxl_ring_wpos[dmxl_port] = 0;
}

void usart3_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
 8001570:	880b      	ldrh	r3, [r1, #0]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001572:	480c      	ldr	r0, [pc, #48]	; (80015a4 <usart3_vector+0x38>)
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
    g_dmxl_ring_wpos[dmxl_port] = 0;
}

void usart3_vector()
{
 8001574:	b082      	sub	sp, #8
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f88d 3007 	strb.w	r3, [sp, #7]
  dmxl_push_byte(0, USART3->DR);
 800157c:	8889      	ldrh	r1, [r1, #4]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 800157e:	8813      	ldrh	r3, [r2, #0]
 8001580:	b29b      	uxth	r3, r3
}

void usart3_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
  dmxl_push_byte(0, USART3->DR);
 8001582:	b2c9      	uxtb	r1, r1
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001584:	54c1      	strb	r1, [r0, r3]
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
 8001586:	8813      	ldrh	r3, [r2, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	b29b      	uxth	r3, r3
 800158c:	2bff      	cmp	r3, #255	; 0xff
 800158e:	8013      	strh	r3, [r2, #0]
    g_dmxl_ring_wpos[dmxl_port] = 0;
 8001590:	bf84      	itt	hi
 8001592:	2300      	movhi	r3, #0
 8001594:	8013      	strhhi	r3, [r2, #0]

void usart3_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
  dmxl_push_byte(0, USART3->DR);
}
 8001596:	b002      	add	sp, #8
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40004800 	.word	0x40004800
 80015a0:	2000f3c4 	.word	0x2000f3c4
 80015a4:	2000fbdc 	.word	0x2000fbdc

080015a8 <uart4_vector>:

void uart4_vector()
{
 80015a8:	b410      	push	{r4}
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
 80015aa:	480d      	ldr	r0, [pc, #52]	; (80015e0 <uart4_vector+0x38>)
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <uart4_vector+0x3c>)
  dmxl_push_byte(0, USART3->DR);
}

void uart4_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
 80015ae:	8801      	ldrh	r1, [r0, #0]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 80015b0:	4c0d      	ldr	r4, [pc, #52]	; (80015e8 <uart4_vector+0x40>)
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
  dmxl_push_byte(0, USART3->DR);
}

void uart4_vector()
{
 80015b2:	b083      	sub	sp, #12
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
 80015b4:	b2c9      	uxtb	r1, r1
 80015b6:	f88d 1007 	strb.w	r1, [sp, #7]
  dmxl_push_byte(1, UART4->DR);
 80015ba:	8881      	ldrh	r1, [r0, #4]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 80015bc:	8853      	ldrh	r3, [r2, #2]
 80015be:	fa14 f383 	uxtah	r3, r4, r3
}

void uart4_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
  dmxl_push_byte(1, UART4->DR);
 80015c2:	b2c9      	uxtb	r1, r1
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 80015c4:	f883 1100 	strb.w	r1, [r3, #256]	; 0x100
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
 80015c8:	8853      	ldrh	r3, [r2, #2]
 80015ca:	3301      	adds	r3, #1
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	2bff      	cmp	r3, #255	; 0xff
 80015d0:	8053      	strh	r3, [r2, #2]
    g_dmxl_ring_wpos[dmxl_port] = 0;
 80015d2:	bf84      	itt	hi
 80015d4:	2300      	movhi	r3, #0
 80015d6:	8053      	strhhi	r3, [r2, #2]

void uart4_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
  dmxl_push_byte(1, UART4->DR);
}
 80015d8:	b003      	add	sp, #12
 80015da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40004c00 	.word	0x40004c00
 80015e4:	2000f3c4 	.word	0x2000f3c4
 80015e8:	2000fbdc 	.word	0x2000fbdc

080015ec <uart5_vector>:

void uart5_vector()
{
 80015ec:	b410      	push	{r4}
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
 80015ee:	480d      	ldr	r0, [pc, #52]	; (8001624 <uart5_vector+0x38>)
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 80015f0:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <uart5_vector+0x3c>)
  dmxl_push_byte(1, UART4->DR);
}

void uart5_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
 80015f2:	8801      	ldrh	r1, [r0, #0]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 80015f4:	4c0d      	ldr	r4, [pc, #52]	; (800162c <uart5_vector+0x40>)
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
  dmxl_push_byte(1, UART4->DR);
}

void uart5_vector()
{
 80015f6:	b083      	sub	sp, #12
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
 80015f8:	b2c9      	uxtb	r1, r1
 80015fa:	f88d 1007 	strb.w	r1, [sp, #7]
  dmxl_push_byte(3, UART5->DR);
 80015fe:	8881      	ldrh	r1, [r0, #4]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001600:	88d3      	ldrh	r3, [r2, #6]
 8001602:	fa14 f383 	uxtah	r3, r4, r3
}

void uart5_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
  dmxl_push_byte(3, UART5->DR);
 8001606:	b2c9      	uxtb	r1, r1
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001608:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
 800160c:	88d3      	ldrh	r3, [r2, #6]
 800160e:	3301      	adds	r3, #1
 8001610:	b29b      	uxth	r3, r3
 8001612:	2bff      	cmp	r3, #255	; 0xff
 8001614:	80d3      	strh	r3, [r2, #6]
    g_dmxl_ring_wpos[dmxl_port] = 0;
 8001616:	bf84      	itt	hi
 8001618:	2300      	movhi	r3, #0
 800161a:	80d3      	strhhi	r3, [r2, #6]

void uart5_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
  dmxl_push_byte(3, UART5->DR);
}
 800161c:	b003      	add	sp, #12
 800161e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	40005000 	.word	0x40005000
 8001628:	2000f3c4 	.word	0x2000f3c4
 800162c:	2000fbdc 	.word	0x2000fbdc

08001630 <usart6_vector>:

void usart6_vector()
{
 8001630:	b410      	push	{r4}
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
 8001632:	480d      	ldr	r0, [pc, #52]	; (8001668 <usart6_vector+0x38>)
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001634:	4a0d      	ldr	r2, [pc, #52]	; (800166c <usart6_vector+0x3c>)
  dmxl_push_byte(3, UART5->DR);
}

void usart6_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
 8001636:	8801      	ldrh	r1, [r0, #0]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001638:	4c0d      	ldr	r4, [pc, #52]	; (8001670 <usart6_vector+0x40>)
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
  dmxl_push_byte(3, UART5->DR);
}

void usart6_vector()
{
 800163a:	b083      	sub	sp, #12
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
 800163c:	b2c9      	uxtb	r1, r1
 800163e:	f88d 1007 	strb.w	r1, [sp, #7]
  dmxl_push_byte(2, USART6->DR);
 8001642:	8881      	ldrh	r1, [r0, #4]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001644:	8893      	ldrh	r3, [r2, #4]
 8001646:	fa14 f383 	uxtah	r3, r4, r3
}

void usart6_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
  dmxl_push_byte(2, USART6->DR);
 800164a:	b2c9      	uxtb	r1, r1
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte)
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 800164c:	f883 1200 	strb.w	r1, [r3, #512]	; 0x200
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
 8001650:	8893      	ldrh	r3, [r2, #4]
 8001652:	3301      	adds	r3, #1
 8001654:	b29b      	uxth	r3, r3
 8001656:	2bff      	cmp	r3, #255	; 0xff
 8001658:	8093      	strh	r3, [r2, #4]
    g_dmxl_ring_wpos[dmxl_port] = 0;
 800165a:	bf84      	itt	hi
 800165c:	2300      	movhi	r3, #0
 800165e:	8093      	strhhi	r3, [r2, #4]

void usart6_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
  dmxl_push_byte(2, USART6->DR);
}
 8001660:	b003      	add	sp, #12
 8001662:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40011400 	.word	0x40011400
 800166c:	2000f3c4 	.word	0x2000f3c4
 8001670:	2000fbdc 	.word	0x2000fbdc

08001674 <dmxl_set_usart_baud>:

void dmxl_set_usart_baud(const uint_fast8_t dmxl_idx, int baud)
{
  USART_TypeDef *u = g_dmxl_ports[dmxl_idx].uart;
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <dmxl_set_usart_baud+0x54>)
 8001676:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800167a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  if (baud == 57600)
 800167e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
  dmxl_push_byte(2, USART6->DR);
}

void dmxl_set_usart_baud(const uint_fast8_t dmxl_idx, int baud)
{
  USART_TypeDef *u = g_dmxl_ports[dmxl_idx].uart;
 8001682:	68db      	ldr	r3, [r3, #12]
  if (baud == 57600)
 8001684:	d00f      	beq.n	80016a6 <dmxl_set_usart_baud+0x32>
    if (u == USART6)
      u->BRR = (((uint16_t)91) << 4) | 2;
    else
      u->BRR = (((uint16_t)45) << 4) | 9;
  }
  else if (baud == 250000)
 8001686:	4811      	ldr	r0, [pc, #68]	; (80016cc <dmxl_set_usart_baud+0x58>)
 8001688:	4281      	cmp	r1, r0
 800168a:	d015      	beq.n	80016b8 <dmxl_set_usart_baud+0x44>
    if (u == USART6)
      u->BRR = (((uint16_t)21) << 4);
    else
      u->BRR = (((uint16_t)10) << 4) | 8;
  }
  else if (baud == 1000000)
 800168c:	4810      	ldr	r0, [pc, #64]	; (80016d0 <dmxl_set_usart_baud+0x5c>)
 800168e:	4281      	cmp	r1, r0
 8001690:	d002      	beq.n	8001698 <dmxl_set_usart_baud+0x24>
      u->BRR = (((uint16_t)5) << 4) |  4;
    else
      u->BRR = (((uint16_t)2) << 4) | 10;
  }
  else
    printf("ahhh unhandled baud rate: %d\r\n", baud);
 8001692:	4810      	ldr	r0, [pc, #64]	; (80016d4 <dmxl_set_usart_baud+0x60>)
 8001694:	f002 b91c 	b.w	80038d0 <printf>
    else
      u->BRR = (((uint16_t)10) << 4) | 8;
  }
  else if (baud == 1000000)
  {
    if (u == USART6)
 8001698:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <dmxl_set_usart_baud+0x64>)
 800169a:	4293      	cmp	r3, r2
      u->BRR = (((uint16_t)5) << 4) |  4;
 800169c:	bf0c      	ite	eq
 800169e:	2254      	moveq	r2, #84	; 0x54
    else
      u->BRR = (((uint16_t)2) << 4) | 10;
 80016a0:	222a      	movne	r2, #42	; 0x2a
 80016a2:	811a      	strh	r2, [r3, #8]
 80016a4:	4770      	bx	lr
void dmxl_set_usart_baud(const uint_fast8_t dmxl_idx, int baud)
{
  USART_TypeDef *u = g_dmxl_ports[dmxl_idx].uart;
  if (baud == 57600)
  {
    if (u == USART6)
 80016a6:	4a0c      	ldr	r2, [pc, #48]	; (80016d8 <dmxl_set_usart_baud+0x64>)
 80016a8:	4293      	cmp	r3, r2
      u->BRR = (((uint16_t)91) << 4) | 2;
 80016aa:	bf0c      	ite	eq
 80016ac:	f240 52b2 	movweq	r2, #1458	; 0x5b2
    else
      u->BRR = (((uint16_t)45) << 4) | 9;
 80016b0:	f240 22d9 	movwne	r2, #729	; 0x2d9
 80016b4:	811a      	strh	r2, [r3, #8]
 80016b6:	4770      	bx	lr
  }
  else if (baud == 250000)
  {
    if (u == USART6)
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <dmxl_set_usart_baud+0x64>)
 80016ba:	4293      	cmp	r3, r2
      u->BRR = (((uint16_t)21) << 4);
 80016bc:	bf0c      	ite	eq
 80016be:	f44f 72a8 	moveq.w	r2, #336	; 0x150
    else
      u->BRR = (((uint16_t)10) << 4) | 8;
 80016c2:	22a8      	movne	r2, #168	; 0xa8
 80016c4:	811a      	strh	r2, [r3, #8]
 80016c6:	4770      	bx	lr
 80016c8:	2000000c 	.word	0x2000000c
 80016cc:	0003d090 	.word	0x0003d090
 80016d0:	000f4240 	.word	0x000f4240
 80016d4:	0800c640 	.word	0x0800c640
 80016d8:	40011400 	.word	0x40011400

080016dc <dmxl_init>:
  else
    printf("ahhh unhandled baud rate: %d\r\n", baud);
}

void dmxl_init()
{
 80016dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  printf("dmxl_init()\r\n");
 80016e0:	4861      	ldr	r0, [pc, #388]	; (8001868 <dmxl_init+0x18c>)
 80016e2:	4c62      	ldr	r4, [pc, #392]	; (800186c <dmxl_init+0x190>)
  else
    printf("ahhh unhandled baud rate: %d\r\n", baud);
}

void dmxl_init()
{
 80016e4:	b085      	sub	sp, #20
  printf("dmxl_init()\r\n");
 80016e6:	f002 f939 	bl	800395c <puts>
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 80016ea:	4b61      	ldr	r3, [pc, #388]	; (8001870 <dmxl_init+0x194>)
 80016ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ee:	f042 020d 	orr.w	r2, r2, #13
 80016f2:	631a      	str	r2, [r3, #48]	; 0x30
                  RCC_AHB1ENR_GPIOCEN |
                  RCC_AHB1ENR_GPIODEN;
  RCC->APB1ENR |= RCC_APB1ENR_USART3EN |
 80016f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f6:	f442 12e0 	orr.w	r2, r2, #1835008	; 0x1c0000
 80016fa:	641a      	str	r2, [r3, #64]	; 0x40
                  RCC_APB1ENR_UART4EN  |
                  RCC_APB1ENR_UART5EN;
  RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 80016fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016fe:	f042 0220 	orr.w	r2, r2, #32
 8001702:	645a      	str	r2, [r3, #68]	; 0x44

  for (int i = 0; i < NUM_DMXL; i++)
 8001704:	2500      	movs	r5, #0
 8001706:	f10d 070b 	add.w	r7, sp, #11
 800170a:	ae03      	add	r6, sp, #12
  {
    dmxl_port_t *dp = &g_dmxl_ports[i];
    dp->tx_gpio->MODER |= (uint32_t)2 << (dp->tx_pin * 2); // set as AF
 800170c:	f04f 0802 	mov.w	r8, #2
 8001710:	7922      	ldrb	r2, [r4, #4]
 8001712:	f854 cc04 	ldr.w	ip, [r4, #-4]
 8001716:	0052      	lsls	r2, r2, #1
 8001718:	f8dc 3000 	ldr.w	r3, [ip]
 800171c:	fa08 f202 	lsl.w	r2, r8, r2
 8001720:	4313      	orrs	r3, r2
 8001722:	f8cc 3000 	str.w	r3, [ip]
    dp->rx_gpio->MODER |= (uint32_t)2 << (dp->rx_pin * 2); // set as AF
 8001726:	f894 e005 	ldrb.w	lr, [r4, #5]
 800172a:	6822      	ldr	r2, [r4, #0]
 800172c:	fa0f f08e 	sxth.w	r0, lr
 8001730:	6813      	ldr	r3, [r2, #0]
 8001732:	0041      	lsls	r1, r0, #1
 8001734:	fa08 f101 	lsl.w	r1, r8, r1
 8001738:	430b      	orrs	r3, r1
 800173a:	6013      	str	r3, [r2, #0]

    if (dp->tx_pin >= 8)
 800173c:	7923      	ldrb	r3, [r4, #4]
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
 800173e:	f1a3 0108 	sub.w	r1, r3, #8
  {
    dmxl_port_t *dp = &g_dmxl_ports[i];
    dp->tx_gpio->MODER |= (uint32_t)2 << (dp->tx_pin * 2); // set as AF
    dp->rx_gpio->MODER |= (uint32_t)2 << (dp->rx_pin * 2); // set as AF

    if (dp->tx_pin >= 8)
 8001742:	2b07      	cmp	r3, #7
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
 8001744:	ea4f 0981 	mov.w	r9, r1, lsl #2
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);
 8001748:	ea4f 0383 	mov.w	r3, r3, lsl #2
  {
    dmxl_port_t *dp = &g_dmxl_ports[i];
    dp->tx_gpio->MODER |= (uint32_t)2 << (dp->tx_pin * 2); // set as AF
    dp->rx_gpio->MODER |= (uint32_t)2 << (dp->rx_pin * 2); // set as AF

    if (dp->tx_pin >= 8)
 800174c:	d97f      	bls.n	800184e <dmxl_init+0x172>
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
 800174e:	79a1      	ldrb	r1, [r4, #6]
 8001750:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8001754:	fa01 f909 	lsl.w	r9, r1, r9
 8001758:	ea49 0303 	orr.w	r3, r9, r3
 800175c:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);

    if (dp->rx_pin >= 8)
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
 8001760:	f1ae 0308 	sub.w	r3, lr, #8
 8001764:	009b      	lsls	r3, r3, #2
    if (dp->tx_pin >= 8)
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);

    if (dp->rx_pin >= 8)
 8001766:	f1be 0f07 	cmp.w	lr, #7
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
 800176a:	fa01 fc03 	lsl.w	ip, r1, r3
    else
      dp->rx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->rx_pin * 4);
 800176e:	ea4f 0080 	mov.w	r0, r0, lsl #2
    if (dp->tx_pin >= 8)
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);

    if (dp->rx_pin >= 8)
 8001772:	d967      	bls.n	8001844 <dmxl_init+0x168>
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
 8001774:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001776:	ea4c 0303 	orr.w	r3, ip, r3
 800177a:	6253      	str	r3, [r2, #36]	; 0x24
    else
      dp->rx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->rx_pin * 4);

    USART_TypeDef *u = dp->uart;
 800177c:	f8d4 9008 	ldr.w	r9, [r4, #8]
    u->CR1 &= ~USART_CR1_UE; // make sure it's off while we configure it
    u->CR1 |=  USART_CR1_RE; // don't enable the transmitter yet

    dmxl_set_usart_baud(i, 250000);
 8001780:	493c      	ldr	r1, [pc, #240]	; (8001874 <dmxl_init+0x198>)
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
    else
      dp->rx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->rx_pin * 4);

    USART_TypeDef *u = dp->uart;
    u->CR1 &= ~USART_CR1_UE; // make sure it's off while we configure it
 8001782:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8001786:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800178a:	041b      	lsls	r3, r3, #16
 800178c:	0c1b      	lsrs	r3, r3, #16
 800178e:	f8a9 300c 	strh.w	r3, [r9, #12]
    u->CR1 |=  USART_CR1_RE; // don't enable the transmitter yet
 8001792:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8001796:	b29b      	uxth	r3, r3
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	f8a9 300c 	strh.w	r3, [r9, #12]

    dmxl_set_usart_baud(i, 250000);
 80017a0:	4628      	mov	r0, r5
 80017a2:	f7ff ff67 	bl	8001674 <dmxl_set_usart_baud>
    if (u == USART6) // running on APB2 = 84 MHz
      u->BRR = (((uint16_t)5) << 4) | 4; // 5.25 mantissa = 5, fraction =  4
    else // running on APB1 = 42 MHz
      u->BRR = (((uint16_t)2) << 4) | 10;// 2.625 mantissa = 2, fraction = 10
    */
    u->CR1 |=  USART_CR1_UE | USART_CR1_RXNEIE;
 80017a6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017b0:	f043 0320 	orr.w	r3, r3, #32
 80017b4:	f8a9 300c 	strh.w	r3, [r9, #12]

    delay_us(10);
 80017b8:	200a      	movs	r0, #10
 80017ba:	f001 feab 	bl	8003514 <delay_us>
    dmxl_set_res_divider(i, DMXL_DEFAULT_ID, 4);
 80017be:	fa5f f985 	uxtb.w	r9, r5
}

void dmxl_set_res_divider(const uint8_t port_idx, const uint8_t dmxl_id,
                          const uint8_t res_divider)
{
  dmxl_write_data(port_idx, dmxl_id, 1, 22, &res_divider);
 80017c2:	2101      	movs	r1, #1
 80017c4:	460a      	mov	r2, r1
 80017c6:	f04f 0e04 	mov.w	lr, #4
 80017ca:	2316      	movs	r3, #22
 80017cc:	4648      	mov	r0, r9
 80017ce:	9700      	str	r7, [sp, #0]
 80017d0:	f88d e00b 	strb.w	lr, [sp, #11]
 80017d4:	f7ff fe90 	bl	80014f8 <dmxl_write_data>
    */
    u->CR1 |=  USART_CR1_UE | USART_CR1_RXNEIE;

    delay_us(10);
    dmxl_set_res_divider(i, DMXL_DEFAULT_ID, 4);
    delay_us(10);
 80017d8:	200a      	movs	r0, #10
 80017da:	f001 fe9b 	bl	8003514 <delay_us>
  RCC->APB1ENR |= RCC_APB1ENR_USART3EN |
                  RCC_APB1ENR_UART4EN  |
                  RCC_APB1ENR_UART5EN;
  RCC->APB2ENR |= RCC_APB2ENR_USART6EN;

  for (int i = 0; i < NUM_DMXL; i++)
 80017de:	3501      	adds	r5, #1

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
 80017e0:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
  d[1] = (offset >> 8) & 0xff;
 80017e4:	f04f 0e32 	mov.w	lr, #50	; 0x32
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 80017e8:	4648      	mov	r0, r9
 80017ea:	9600      	str	r6, [sp, #0]
 80017ec:	2101      	movs	r1, #1
 80017ee:	2202      	movs	r2, #2
 80017f0:	2314      	movs	r3, #20

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
 80017f2:	f88d c00c 	strb.w	ip, [sp, #12]
  d[1] = (offset >> 8) & 0xff;
 80017f6:	f88d e00d 	strb.w	lr, [sp, #13]
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 80017fa:	f7ff fe7d 	bl	80014f8 <dmxl_write_data>
  RCC->APB1ENR |= RCC_APB1ENR_USART3EN |
                  RCC_APB1ENR_UART4EN  |
                  RCC_APB1ENR_UART5EN;
  RCC->APB2ENR |= RCC_APB2ENR_USART6EN;

  for (int i = 0; i < NUM_DMXL; i++)
 80017fe:	2d04      	cmp	r5, #4
 8001800:	f104 0418 	add.w	r4, r4, #24
 8001804:	d184      	bne.n	8001710 <dmxl_init+0x34>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <dmxl_init+0x19c>)
  NVIC_EnableIRQ(UART5_IRQn);
  NVIC_EnableIRQ(USART6_IRQn);

  //GPIOD->MODER |= (1 << (8*2)); // | (1 << 9);
  // turn on the 3.3v <-> 5v translator chip now
  GPIOA->MODER |= 1 << (PORTA_DMXL_BUF_EN * 2);
 8001808:	4a1c      	ldr	r2, [pc, #112]	; (800187c <dmxl_init+0x1a0>)
 800180a:	2120      	movs	r1, #32
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800180c:	2080      	movs	r0, #128	; 0x80
 800180e:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
 8001812:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001816:	f883 1327 	strb.w	r1, [r3, #807]	; 0x327
 800181a:	f883 1334 	strb.w	r1, [r3, #820]	; 0x334
 800181e:	f883 1335 	strb.w	r1, [r3, #821]	; 0x335
 8001822:	f883 1347 	strb.w	r1, [r3, #839]	; 0x347
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001826:	6058      	str	r0, [r3, #4]
 8001828:	605d      	str	r5, [r3, #4]
 800182a:	605c      	str	r4, [r3, #4]
 800182c:	6098      	str	r0, [r3, #8]
 800182e:	6813      	ldr	r3, [r2, #0]
 8001830:	432b      	orrs	r3, r5
 8001832:	6013      	str	r3, [r2, #0]
  GPIOA->BSRRL |= 1 << PORTA_DMXL_BUF_EN;
 8001834:	8b13      	ldrh	r3, [r2, #24]
 8001836:	b29b      	uxth	r3, r3
 8001838:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800183c:	8313      	strh	r3, [r2, #24]
}
 800183e:	b005      	add	sp, #20
 8001840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);

    if (dp->rx_pin >= 8)
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
    else
      dp->rx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->rx_pin * 4);
 8001844:	6a13      	ldr	r3, [r2, #32]
 8001846:	4081      	lsls	r1, r0
 8001848:	4319      	orrs	r1, r3
 800184a:	6211      	str	r1, [r2, #32]
 800184c:	e796      	b.n	800177c <dmxl_init+0xa0>
    dp->rx_gpio->MODER |= (uint32_t)2 << (dp->rx_pin * 2); // set as AF

    if (dp->tx_pin >= 8)
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);
 800184e:	f854 9c04 	ldr.w	r9, [r4, #-4]
 8001852:	79a1      	ldrb	r1, [r4, #6]
 8001854:	f8d9 c020 	ldr.w	ip, [r9, #32]
 8001858:	fa01 f303 	lsl.w	r3, r1, r3
 800185c:	ea43 030c 	orr.w	r3, r3, ip
 8001860:	f8c9 3020 	str.w	r3, [r9, #32]
 8001864:	e77c      	b.n	8001760 <dmxl_init+0x84>
 8001866:	bf00      	nop
 8001868:	0800c660 	.word	0x0800c660
 800186c:	20000010 	.word	0x20000010
 8001870:	40023800 	.word	0x40023800
 8001874:	0003d090 	.word	0x0003d090
 8001878:	e000e100 	.word	0xe000e100
 800187c:	40020000 	.word	0x40020000

08001880 <dmxl_process_ring>:
  pkt[4] = data_len;
  dmxl_tx(port_idx, pkt, 5);
}

void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
 8001880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
           */
          switch (port->comms_state)
          {
            case DMXL_CS_POLL_STATE:
              g_state.dynamixel_angles[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
 8001884:	4b73      	ldr	r3, [pc, #460]	; (8001a54 <dmxl_process_ring+0x1d4>)
 8001886:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8001a6c <dmxl_process_ring+0x1ec>
 800188a:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8001a70 <dmxl_process_ring+0x1f0>
void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
  const uint_fast8_t i = dmxl_id; // save typing...
  while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
  {
    const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 800188e:	ea4f 2800 	mov.w	r8, r0, lsl #8
           */
          switch (port->comms_state)
          {
            case DMXL_CS_POLL_STATE:
              g_state.dynamixel_angles[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
 8001892:	eb03 0908 	add.w	r9, r3, r8
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
              g_state.dynamixel_loads[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
              g_state.dynamixel_voltages[i]     = g_dmxl_rx_pkt[i][6];
 8001896:	4b70      	ldr	r3, [pc, #448]	; (8001a58 <dmxl_process_ring+0x1d8>)
  pkt[4] = data_len;
  dmxl_tx(port_idx, pkt, 5);
}

void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
 8001898:	b083      	sub	sp, #12
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
              g_state.dynamixel_loads[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
              g_state.dynamixel_voltages[i]     = g_dmxl_rx_pkt[i][6];
 800189a:	4403      	add	r3, r0
  pkt[4] = data_len;
  dmxl_tx(port_idx, pkt, 5);
}

void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
 800189c:	4606      	mov	r6, r0
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
              g_state.dynamixel_loads[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
              g_state.dynamixel_voltages[i]     = g_dmxl_rx_pkt[i][6];
 800189e:	9301      	str	r3, [sp, #4]
}

void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
  const uint_fast8_t i = dmxl_id; // save typing...
  while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
 80018a0:	465f      	mov	r7, fp
 80018a2:	f83b 2016 	ldrh.w	r2, [fp, r6, lsl #1]
 80018a6:	f83a 3016 	ldrh.w	r3, [sl, r6, lsl #1]
 80018aa:	b292      	uxth	r2, r2
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	429a      	cmp	r2, r3
 80018b0:	f000 80bd 	beq.w	8001a2e <dmxl_process_ring+0x1ae>
  {
    const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 80018b4:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
 80018b8:	4a68      	ldr	r2, [pc, #416]	; (8001a5c <dmxl_process_ring+0x1dc>)
    //printf("dmxl %d received 0x%02x\r\n", i, b);
    if (++g_dmxl_ring_rpos[i] >= DMXL_RING_LEN)
      g_dmxl_ring_rpos[i] = 0; // wrap around
    dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
    switch (port->parser_state)
 80018ba:	4d69      	ldr	r5, [pc, #420]	; (8001a60 <dmxl_process_ring+0x1e0>)
void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
  const uint_fast8_t i = dmxl_id; // save typing...
  while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
  {
    const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 80018bc:	fa18 f383 	uxtah	r3, r8, r3
    //printf("dmxl %d received 0x%02x\r\n", i, b);
    if (++g_dmxl_ring_rpos[i] >= DMXL_RING_LEN)
      g_dmxl_ring_rpos[i] = 0; // wrap around
    dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
    switch (port->parser_state)
 80018c0:	0074      	lsls	r4, r6, #1
void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
  const uint_fast8_t i = dmxl_id; // save typing...
  while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
  {
    const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 80018c2:	5cd2      	ldrb	r2, [r2, r3]
    //printf("dmxl %d received 0x%02x\r\n", i, b);
    if (++g_dmxl_ring_rpos[i] >= DMXL_RING_LEN)
 80018c4:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
 80018c8:	3301      	adds	r3, #1
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	2bff      	cmp	r3, #255	; 0xff
 80018ce:	f827 3016 	strh.w	r3, [r7, r6, lsl #1]
      g_dmxl_ring_rpos[i] = 0; // wrap around
 80018d2:	bf84      	itt	hi
 80018d4:	2300      	movhi	r3, #0
 80018d6:	f827 3016 	strhhi.w	r3, [r7, r6, lsl #1]
    dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
    switch (port->parser_state)
 80018da:	19a3      	adds	r3, r4, r6
 80018dc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
void dmxl_process_ring(const uint_fast8_t dmxl_id)
{
  const uint_fast8_t i = dmxl_id; // save typing...
  while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
  {
    const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 80018e0:	b2d2      	uxtb	r2, r2
    //printf("dmxl %d received 0x%02x\r\n", i, b);
    if (++g_dmxl_ring_rpos[i] >= DMXL_RING_LEN)
      g_dmxl_ring_rpos[i] = 0; // wrap around
    dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
    switch (port->parser_state)
 80018e2:	7c5b      	ldrb	r3, [r3, #17]
 80018e4:	2b06      	cmp	r3, #6
 80018e6:	f200 809b 	bhi.w	8001a20 <dmxl_process_ring+0x1a0>
 80018ea:	e8df f003 	tbb	[pc, r3]
 80018ee:	7690      	.short	0x7690
 80018f0:	47657e89 	.word	0x47657e89
 80018f4:	04          	.byte	0x04
 80018f5:	00          	.byte	0x00
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
          port->parser_state = DMXL_PS_CHECKSUM;
        port->rx_pkt_writepos++;
        break;
      case DMXL_PS_CHECKSUM:
        if (((uint8_t)(~port->rx_checksum)) == b)
 80018f6:	19a3      	adds	r3, r4, r6
 80018f8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80018fc:	7d19      	ldrb	r1, [r3, #20]
 80018fe:	43c9      	mvns	r1, r1
 8001900:	b2c9      	uxtb	r1, r1
 8001902:	4291      	cmp	r1, r2
 8001904:	f040 8096 	bne.w	8001a34 <dmxl_process_ring+0x1b4>
          /*
             printf("checksum passed. received %d bytes\r\n", port->rx_pkt_len);
             for (int j = 0; j < port->rx_pkt_len; j++)
             printf("  0x%02x\r\n", g_dmxl_rx_pkt[i][j]);
           */
          switch (port->comms_state)
 8001908:	7c1b      	ldrb	r3, [r3, #16]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d12f      	bne.n	800196e <dmxl_process_ring+0xee>
          {
            case DMXL_CS_POLL_STATE:
              g_state.dynamixel_angles[i] =
 800190e:	4852      	ldr	r0, [pc, #328]	; (8001a58 <dmxl_process_ring+0x1d8>)
                (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
 8001910:	f899 1001 	ldrb.w	r1, [r9, #1]
                (((uint16_t)g_dmxl_rx_pkt[i][0])     ) ;
 8001914:	f899 2000 	ldrb.w	r2, [r9]
             printf("  0x%02x\r\n", g_dmxl_rx_pkt[i][j]);
           */
          switch (port->comms_state)
          {
            case DMXL_CS_POLL_STATE:
              g_state.dynamixel_angles[i] =
 8001918:	f106 0354 	add.w	r3, r6, #84	; 0x54
 800191c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001920:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001924:	8859      	ldrh	r1, [r3, #2]
 8001926:	805a      	strh	r2, [r3, #2]
                (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][0])     ) ;
              //printf("dmxl %d angle = %d\r\n", (int)i, (int)g_state.dynamixel_angles[i]);
              g_state.dynamixel_speeds[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
 8001928:	f899 1003 	ldrb.w	r1, [r9, #3]
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
 800192c:	f899 2002 	ldrb.w	r2, [r9, #2]
            case DMXL_CS_POLL_STATE:
              g_state.dynamixel_angles[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][0])     ) ;
              //printf("dmxl %d angle = %d\r\n", (int)i, (int)g_state.dynamixel_angles[i]);
              g_state.dynamixel_speeds[i] =
 8001930:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8001934:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001938:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800193c:	8859      	ldrh	r1, [r3, #2]
 800193e:	805a      	strh	r2, [r3, #2]
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
              g_state.dynamixel_loads[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
 8001940:	f899 1005 	ldrb.w	r1, [r9, #5]
                (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
 8001944:	f899 2004 	ldrb.w	r2, [r9, #4]
                (((uint16_t)g_dmxl_rx_pkt[i][0])     ) ;
              //printf("dmxl %d angle = %d\r\n", (int)i, (int)g_state.dynamixel_angles[i]);
              g_state.dynamixel_speeds[i] =
                (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
              g_state.dynamixel_loads[i] =
 8001948:	f106 035c 	add.w	r3, r6, #92	; 0x5c
 800194c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001950:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001954:	8859      	ldrh	r1, [r3, #2]
 8001956:	805a      	strh	r2, [r3, #2]
                (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
                (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
              g_state.dynamixel_voltages[i]     = g_dmxl_rx_pkt[i][6];
 8001958:	f899 3006 	ldrb.w	r3, [r9, #6]
 800195c:	9901      	ldr	r1, [sp, #4]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	f881 30c2 	strb.w	r3, [r1, #194]	; 0xc2
              g_state.dynamixel_temperatures[i] = g_dmxl_rx_pkt[i][7];
 8001964:	f899 3007 	ldrb.w	r3, [r9, #7]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	f881 30c6 	strb.w	r3, [r1, #198]	; 0xc6
          }
        }
        else
          printf("checksum failed: local 0x%02x != received 0x%02x\r\n",
              (uint8_t)~port->rx_checksum, b);
        port->parser_state = DMXL_PS_PREAMBLE_0;
 800196e:	4434      	add	r4, r6
 8001970:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8001974:	2300      	movs	r3, #0
 8001976:	746b      	strb	r3, [r5, #17]
        port->comms_state = DMXL_CS_IDLE;
 8001978:	742b      	strb	r3, [r5, #16]
        break;
 800197a:	e792      	b.n	80018a2 <dmxl_process_ring+0x22>
          port->parser_state = DMXL_PS_PARAMETER;
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
 800197c:	19a3      	adds	r3, r4, r6
 800197e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
          port->parser_state = DMXL_PS_CHECKSUM;
        port->rx_pkt_writepos++;
 8001982:	4434      	add	r4, r6
          port->parser_state = DMXL_PS_PARAMETER;
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
 8001984:	f893 e014 	ldrb.w	lr, [r3, #20]
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
 8001988:	7cd9      	ldrb	r1, [r3, #19]
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
 800198a:	7c98      	ldrb	r0, [r3, #18]
          port->parser_state = DMXL_PS_PARAMETER;
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
 800198c:	4496      	add	lr, r2
 800198e:	f883 e014 	strb.w	lr, [r3, #20]
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
 8001992:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
 8001996:	eb08 0e01 	add.w	lr, r8, r1
 800199a:	482e      	ldr	r0, [pc, #184]	; (8001a54 <dmxl_process_ring+0x1d4>)
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
 800199c:	4561      	cmp	r1, ip
          port->parser_state = DMXL_PS_PARAMETER;
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
 800199e:	f103 0310 	add.w	r3, r3, #16
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
          port->parser_state = DMXL_PS_CHECKSUM;
        port->rx_pkt_writepos++;
 80019a2:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
        else
          port->parser_state = DMXL_PS_CHECKSUM;
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
 80019a6:	f800 200e 	strb.w	r2, [r0, lr]
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
          port->parser_state = DMXL_PS_CHECKSUM;
        port->rx_pkt_writepos++;
 80019aa:	f101 0101 	add.w	r1, r1, #1
        break;
      case DMXL_PS_PARAMETER:
        port->rx_checksum += b;
        g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
        if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
          port->parser_state = DMXL_PS_CHECKSUM;
 80019ae:	bf04      	itt	eq
 80019b0:	2206      	moveq	r2, #6
 80019b2:	705a      	strbeq	r2, [r3, #1]
        port->rx_pkt_writepos++;
 80019b4:	74e9      	strb	r1, [r5, #19]
        break;
 80019b6:	e774      	b.n	80018a2 <dmxl_process_ring+0x22>
        port->rx_checksum += b;
        port->parser_state = DMXL_PS_ERROR;
        break;
      case DMXL_PS_ERROR:
        g_state.dynamixel_error_status[i] = b; // save for global state
        port->rx_checksum += b;
 80019b8:	4434      	add	r4, r6
 80019ba:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80019be:	3510      	adds	r5, #16
        port->rx_pkt_len = b - 2;
        port->rx_checksum += b;
        port->parser_state = DMXL_PS_ERROR;
        break;
      case DMXL_PS_ERROR:
        g_state.dynamixel_error_status[i] = b; // save for global state
 80019c0:	9c01      	ldr	r4, [sp, #4]
        port->rx_checksum += b;
 80019c2:	792b      	ldrb	r3, [r5, #4]
        port->rx_pkt_writepos = 0;
        if (port->rx_pkt_len)
 80019c4:	78a9      	ldrb	r1, [r5, #2]
        port->rx_pkt_len = b - 2;
        port->rx_checksum += b;
        port->parser_state = DMXL_PS_ERROR;
        break;
      case DMXL_PS_ERROR:
        g_state.dynamixel_error_status[i] = b; // save for global state
 80019c6:	f884 20a6 	strb.w	r2, [r4, #166]	; 0xa6
        port->rx_checksum += b;
        port->rx_pkt_writepos = 0;
 80019ca:	2000      	movs	r0, #0
        port->rx_checksum += b;
        port->parser_state = DMXL_PS_ERROR;
        break;
      case DMXL_PS_ERROR:
        g_state.dynamixel_error_status[i] = b; // save for global state
        port->rx_checksum += b;
 80019cc:	441a      	add	r2, r3
 80019ce:	712a      	strb	r2, [r5, #4]
        port->rx_pkt_writepos = 0;
 80019d0:	70e8      	strb	r0, [r5, #3]
        if (port->rx_pkt_len)
 80019d2:	b3c9      	cbz	r1, 8001a48 <dmxl_process_ring+0x1c8>
          port->parser_state = DMXL_PS_PARAMETER;
 80019d4:	2305      	movs	r3, #5
 80019d6:	706b      	strb	r3, [r5, #1]
 80019d8:	e763      	b.n	80018a2 <dmxl_process_ring+0x22>
        if (b == 0xff)
          port->parser_state = DMXL_PS_PREAMBLE_1;
        break;
      case DMXL_PS_PREAMBLE_1:
        if (b == 0xff)
          port->parser_state = DMXL_PS_ID;
 80019da:	4434      	add	r4, r6
      case DMXL_PS_PREAMBLE_0:
        if (b == 0xff)
          port->parser_state = DMXL_PS_PREAMBLE_1;
        break;
      case DMXL_PS_PREAMBLE_1:
        if (b == 0xff)
 80019dc:	2aff      	cmp	r2, #255	; 0xff
          port->parser_state = DMXL_PS_ID;
 80019de:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
      case DMXL_PS_PREAMBLE_0:
        if (b == 0xff)
          port->parser_state = DMXL_PS_PREAMBLE_1;
        break;
      case DMXL_PS_PREAMBLE_1:
        if (b == 0xff)
 80019e2:	d034      	beq.n	8001a4e <dmxl_process_ring+0x1ce>
        port->parser_state = DMXL_PS_PREAMBLE_0;
        port->comms_state = DMXL_CS_IDLE;
        break;
      default:
        printf("woah there partner. unexpected dmxl rx state!\r\n");
        port->parser_state = DMXL_PS_PREAMBLE_0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	746b      	strb	r3, [r5, #17]
        break;
 80019e8:	e75b      	b.n	80018a2 <dmxl_process_ring+0x22>
      case DMXL_PS_ID:
        port->rx_checksum = b;
        port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
        break;
      case DMXL_PS_LENGTH:
        port->rx_pkt_len = b - 2;
 80019ea:	4434      	add	r4, r6
 80019ec:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80019f0:	1e91      	subs	r1, r2, #2
        port->rx_checksum += b;
 80019f2:	7d2b      	ldrb	r3, [r5, #20]
      case DMXL_PS_ID:
        port->rx_checksum = b;
        port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
        break;
      case DMXL_PS_LENGTH:
        port->rx_pkt_len = b - 2;
 80019f4:	74a9      	strb	r1, [r5, #18]
        port->rx_checksum += b;
 80019f6:	441a      	add	r2, r3
        port->parser_state = DMXL_PS_ERROR;
 80019f8:	2304      	movs	r3, #4
        port->rx_checksum = b;
        port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
        break;
      case DMXL_PS_LENGTH:
        port->rx_pkt_len = b - 2;
        port->rx_checksum += b;
 80019fa:	752a      	strb	r2, [r5, #20]
        port->parser_state = DMXL_PS_ERROR;
 80019fc:	746b      	strb	r3, [r5, #17]
        break;
 80019fe:	e750      	b.n	80018a2 <dmxl_process_ring+0x22>
          port->parser_state = DMXL_PS_ID;
        else
          port->parser_state = DMXL_PS_PREAMBLE_0;
        break;
      case DMXL_PS_ID:
        port->rx_checksum = b;
 8001a00:	4434      	add	r4, r6
 8001a02:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
        port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
 8001a06:	2303      	movs	r3, #3
          port->parser_state = DMXL_PS_ID;
        else
          port->parser_state = DMXL_PS_PREAMBLE_0;
        break;
      case DMXL_PS_ID:
        port->rx_checksum = b;
 8001a08:	752a      	strb	r2, [r5, #20]
        port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
 8001a0a:	746b      	strb	r3, [r5, #17]
        break;
 8001a0c:	e749      	b.n	80018a2 <dmxl_process_ring+0x22>
      g_dmxl_ring_rpos[i] = 0; // wrap around
    dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
    switch (port->parser_state)
    {
      case DMXL_PS_PREAMBLE_0:
        if (b == 0xff)
 8001a0e:	2aff      	cmp	r2, #255	; 0xff
 8001a10:	f47f af47 	bne.w	80018a2 <dmxl_process_ring+0x22>
          port->parser_state = DMXL_PS_PREAMBLE_1;
 8001a14:	4434      	add	r4, r6
 8001a16:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	746b      	strb	r3, [r5, #17]
 8001a1e:	e740      	b.n	80018a2 <dmxl_process_ring+0x22>
              (uint8_t)~port->rx_checksum, b);
        port->parser_state = DMXL_PS_PREAMBLE_0;
        port->comms_state = DMXL_CS_IDLE;
        break;
      default:
        printf("woah there partner. unexpected dmxl rx state!\r\n");
 8001a20:	4810      	ldr	r0, [pc, #64]	; (8001a64 <dmxl_process_ring+0x1e4>)
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8001a22:	4434      	add	r4, r6
              (uint8_t)~port->rx_checksum, b);
        port->parser_state = DMXL_PS_PREAMBLE_0;
        port->comms_state = DMXL_CS_IDLE;
        break;
      default:
        printf("woah there partner. unexpected dmxl rx state!\r\n");
 8001a24:	f001 ff9a 	bl	800395c <puts>
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8001a28:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8001a2c:	e7da      	b.n	80019e4 <dmxl_process_ring+0x164>
        break;
    }
  }
}
 8001a2e:	b003      	add	sp, #12
 8001a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          }
        }
        else
          printf("checksum failed: local 0x%02x != received 0x%02x\r\n",
              (uint8_t)~port->rx_checksum, b);
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8001a34:	4434      	add	r4, r6
 8001a36:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
            default:
              break;
          }
        }
        else
          printf("checksum failed: local 0x%02x != received 0x%02x\r\n",
 8001a3a:	480b      	ldr	r0, [pc, #44]	; (8001a68 <dmxl_process_ring+0x1e8>)
 8001a3c:	f001 ff48 	bl	80038d0 <printf>
              (uint8_t)~port->rx_checksum, b);
        port->parser_state = DMXL_PS_PREAMBLE_0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	746b      	strb	r3, [r5, #17]
        port->comms_state = DMXL_CS_IDLE;
 8001a44:	742b      	strb	r3, [r5, #16]
 8001a46:	e72c      	b.n	80018a2 <dmxl_process_ring+0x22>
        port->rx_checksum += b;
        port->rx_pkt_writepos = 0;
        if (port->rx_pkt_len)
          port->parser_state = DMXL_PS_PARAMETER;
        else
          port->parser_state = DMXL_PS_CHECKSUM;
 8001a48:	2306      	movs	r3, #6
 8001a4a:	706b      	strb	r3, [r5, #1]
 8001a4c:	e729      	b.n	80018a2 <dmxl_process_ring+0x22>
        if (b == 0xff)
          port->parser_state = DMXL_PS_PREAMBLE_1;
        break;
      case DMXL_PS_PREAMBLE_1:
        if (b == 0xff)
          port->parser_state = DMXL_PS_ID;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	746b      	strb	r3, [r5, #17]
 8001a52:	e726      	b.n	80018a2 <dmxl_process_ring+0x22>
 8001a54:	2000f3d4 	.word	0x2000f3d4
 8001a58:	200105a0 	.word	0x200105a0
 8001a5c:	2000fbdc 	.word	0x2000fbdc
 8001a60:	2000000c 	.word	0x2000000c
 8001a64:	0800c6a4 	.word	0x0800c6a4
 8001a68:	0800c670 	.word	0x0800c670
 8001a6c:	2000f7d4 	.word	0x2000f7d4
 8001a70:	2000f3c4 	.word	0x2000f3c4

08001a74 <dmxl_set_status_return_levels>:
  GPIOA->MODER |= 1 << (PORTA_DMXL_BUF_EN * 2);
  GPIOA->BSRRL |= 1 << PORTA_DMXL_BUF_EN;
}

void dmxl_set_status_return_levels()
{
 8001a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a78:	4c26      	ldr	r4, [pc, #152]	; (8001b14 <dmxl_set_status_return_levels+0xa0>)
    while (SYSTIME - t_start < 10000)
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_POLL_DEBRIS)
      {
        status_return_level = g_dmxl_rx_pkt[i][0];
 8001a7a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8001b20 <dmxl_set_status_return_levels+0xac>
  GPIOA->MODER |= 1 << (PORTA_DMXL_BUF_EN * 2);
  GPIOA->BSRRL |= 1 << PORTA_DMXL_BUF_EN;
}

void dmxl_set_status_return_levels()
{
 8001a7e:	b085      	sub	sp, #20
  // see what the Status Return Level is. If it's not 1, set it to one
  for (int i = 0; i < NUM_DMXL; i++)
 8001a80:	2700      	movs	r7, #0
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
    volatile uint32_t t_start = SYSTIME;
 8001a82:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
{
  // see what the Status Return Level is. If it's not 1, set it to one
  for (int i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
 8001a86:	fa5f f887 	uxtb.w	r8, r7
void dmxl_set_status_return_levels()
{
  // see what the Status Return Level is. If it's not 1, set it to one
  for (int i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
 8001a8a:	2303      	movs	r3, #3
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
 8001a8c:	4640      	mov	r0, r8
 8001a8e:	2101      	movs	r1, #1
 8001a90:	2210      	movs	r2, #16
void dmxl_set_status_return_levels()
{
  // see what the Status Return Level is. If it's not 1, set it to one
  for (int i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
 8001a92:	7423      	strb	r3, [r4, #16]
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
 8001a94:	f7ff fd52 	bl	800153c <dmxl_read_data.constprop.3>
    volatile uint32_t t_start = SYSTIME;
 8001a98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001a9a:	9303      	str	r3, [sp, #12]
    uint8_t status_return_level = 0xff;
    while (SYSTIME - t_start < 10000)
 8001a9c:	f242 760f 	movw	r6, #9999	; 0x270f
 8001aa0:	e00d      	b.n	8001abe <dmxl_set_status_return_levels+0x4a>
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 8001aa2:	f7ff feed 	bl	8001880 <dmxl_process_ring>
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	f7ff feea 	bl	8001880 <dmxl_process_ring>
 8001aac:	2002      	movs	r0, #2
 8001aae:	f7ff fee7 	bl	8001880 <dmxl_process_ring>
 8001ab2:	2003      	movs	r0, #3
 8001ab4:	f7ff fee4 	bl	8001880 <dmxl_process_ring>
    volatile uint32_t t_start = SYSTIME;
    uint8_t status_return_level = 0xff;
    while (SYSTIME - t_start < 10000)
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_POLL_DEBRIS)
 8001ab8:	7c23      	ldrb	r3, [r4, #16]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d112      	bne.n	8001ae4 <dmxl_set_status_return_levels+0x70>
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
    volatile uint32_t t_start = SYSTIME;
    uint8_t status_return_level = 0xff;
    while (SYSTIME - t_start < 10000)
 8001abe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001ac0:	9a03      	ldr	r2, [sp, #12]
 8001ac2:	1a9b      	subs	r3, r3, r2
 8001ac4:	42b3      	cmp	r3, r6
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 8001ac6:	f04f 0000 	mov.w	r0, #0
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_DEBRIS;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 1, 0x10);
    volatile uint32_t t_start = SYSTIME;
    uint8_t status_return_level = 0xff;
    while (SYSTIME - t_start < 10000)
 8001aca:	d9ea      	bls.n	8001aa2 <dmxl_set_status_return_levels+0x2e>
        printf("dmxl %d status return level = %d\n", i, status_return_level);
        break;
      }
    }
    if (status_return_level == 0xff)
      printf("couldn't poll status return level for dmxl %d\r\n", i);
 8001acc:	4812      	ldr	r0, [pc, #72]	; (8001b18 <dmxl_set_status_return_levels+0xa4>)
 8001ace:	4639      	mov	r1, r7
 8001ad0:	f001 fefe 	bl	80038d0 <printf>
}

void dmxl_set_status_return_levels()
{
  // see what the Status Return Level is. If it's not 1, set it to one
  for (int i = 0; i < NUM_DMXL; i++)
 8001ad4:	3701      	adds	r7, #1
 8001ad6:	2f04      	cmp	r7, #4
 8001ad8:	f104 0418 	add.w	r4, r4, #24
 8001adc:	d1d3      	bne.n	8001a86 <dmxl_set_status_return_levels+0x12>
      // set it to 2
      uint8_t level = 1; // only respond to READ
      dmxl_write_data(i, DMXL_DEFAULT_ID, 1, 0x10, &level);
    }
  }
}
 8001ade:	b005      	add	sp, #20
 8001ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (SYSTIME - t_start < 10000)
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_POLL_DEBRIS)
      {
        status_return_level = g_dmxl_rx_pkt[i][0];
 8001ae4:	023b      	lsls	r3, r7, #8
        printf("dmxl %d status return level = %d\n", i, status_return_level);
 8001ae6:	480d      	ldr	r0, [pc, #52]	; (8001b1c <dmxl_set_status_return_levels+0xa8>)
    while (SYSTIME - t_start < 10000)
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_POLL_DEBRIS)
      {
        status_return_level = g_dmxl_rx_pkt[i][0];
 8001ae8:	f819 6003 	ldrb.w	r6, [r9, r3]
 8001aec:	b2f6      	uxtb	r6, r6
        printf("dmxl %d status return level = %d\n", i, status_return_level);
 8001aee:	4632      	mov	r2, r6
 8001af0:	4639      	mov	r1, r7
 8001af2:	f001 feed 	bl	80038d0 <printf>
        break;
      }
    }
    if (status_return_level == 0xff)
 8001af6:	2eff      	cmp	r6, #255	; 0xff
 8001af8:	d0e8      	beq.n	8001acc <dmxl_set_status_return_levels+0x58>
      printf("couldn't poll status return level for dmxl %d\r\n", i);
    else if (status_return_level != 1)
 8001afa:	2e01      	cmp	r6, #1
 8001afc:	d0ea      	beq.n	8001ad4 <dmxl_set_status_return_levels+0x60>
    {
      // set it to 2
      uint8_t level = 1; // only respond to READ
 8001afe:	ab04      	add	r3, sp, #16
 8001b00:	2101      	movs	r1, #1
 8001b02:	f803 1d05 	strb.w	r1, [r3, #-5]!
      dmxl_write_data(i, DMXL_DEFAULT_ID, 1, 0x10, &level);
 8001b06:	4640      	mov	r0, r8
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	460a      	mov	r2, r1
 8001b0c:	2310      	movs	r3, #16
 8001b0e:	f7ff fcf3 	bl	80014f8 <dmxl_write_data>
 8001b12:	e7df      	b.n	8001ad4 <dmxl_set_status_return_levels+0x60>
 8001b14:	2000000c 	.word	0x2000000c
 8001b18:	0800c6f8 	.word	0x0800c6f8
 8001b1c:	0800c6d4 	.word	0x0800c6d4
 8001b20:	2000f3d4 	.word	0x2000f3d4

08001b24 <dmxl_set_baud_rates>:
    }
  }
}

void dmxl_set_baud_rates()
{
 8001b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b28:	4c31      	ldr	r4, [pc, #196]	; (8001bf0 <dmxl_set_baud_rates+0xcc>)
 8001b2a:	b084      	sub	sp, #16
  for (int i = 0; i < NUM_DMXL; i++)
 8001b2c:	2700      	movs	r7, #0
  {
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
    volatile uint32_t t_start = SYSTIME;
 8001b2e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000

void dmxl_set_baud_rates()
{
  for (int i = 0; i < NUM_DMXL; i++)
  {
    dmxl_set_usart_baud(i, 250000);
 8001b32:	4638      	mov	r0, r7
 8001b34:	492f      	ldr	r1, [pc, #188]	; (8001bf4 <dmxl_set_baud_rates+0xd0>)
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
 8001b36:	fa5f f887 	uxtb.w	r8, r7

void dmxl_set_baud_rates()
{
  for (int i = 0; i < NUM_DMXL; i++)
  {
    dmxl_set_usart_baud(i, 250000);
 8001b3a:	f7ff fd9b 	bl	8001674 <dmxl_set_usart_baud>

uint8_t dmxl_send_ping(const uint8_t port_idx, const uint8_t dmxl_id)
{
  uint8_t pkt[3];
  pkt[0] = dmxl_id;
  pkt[1] = 2; // packet length
 8001b3e:	2602      	movs	r6, #2
}

uint8_t dmxl_send_ping(const uint8_t port_idx, const uint8_t dmxl_id)
{
  uint8_t pkt[3];
  pkt[0] = dmxl_id;
 8001b40:	2301      	movs	r3, #1
void dmxl_set_baud_rates()
{
  for (int i = 0; i < NUM_DMXL; i++)
  {
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
 8001b42:	f04f 0e04 	mov.w	lr, #4
 8001b46:	4640      	mov	r0, r8
 8001b48:	a902      	add	r1, sp, #8
 8001b4a:	2203      	movs	r2, #3
}

uint8_t dmxl_send_ping(const uint8_t port_idx, const uint8_t dmxl_id)
{
  uint8_t pkt[3];
  pkt[0] = dmxl_id;
 8001b4c:	f88d 3008 	strb.w	r3, [sp, #8]
  pkt[1] = 2; // packet length
  pkt[2] = 1; // instruction: ping
 8001b50:	f88d 300a 	strb.w	r3, [sp, #10]

uint8_t dmxl_send_ping(const uint8_t port_idx, const uint8_t dmxl_id)
{
  uint8_t pkt[3];
  pkt[0] = dmxl_id;
  pkt[1] = 2; // packet length
 8001b54:	f88d 6009 	strb.w	r6, [sp, #9]
void dmxl_set_baud_rates()
{
  for (int i = 0; i < NUM_DMXL; i++)
  {
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
 8001b58:	f884 e010 	strb.w	lr, [r4, #16]
 8001b5c:	f7ff fc86 	bl	800146c <dmxl_tx.part.1>
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
    volatile uint32_t t_start = SYSTIME;
 8001b60:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001b62:	9303      	str	r3, [sp, #12]
    bool pong_received = false;
    while (SYSTIME - t_start < 10000 && !pong_received)
 8001b64:	f242 760f 	movw	r6, #9999	; 0x270f
  {
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
    volatile uint32_t t_start = SYSTIME;
    bool pong_received = false;
 8001b68:	2300      	movs	r3, #0
    while (SYSTIME - t_start < 10000 && !pong_received)
 8001b6a:	e010      	b.n	8001b8e <dmxl_set_baud_rates+0x6a>
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d139      	bne.n	8001be4 <dmxl_set_baud_rates+0xc0>
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 8001b70:	f7ff fe86 	bl	8001880 <dmxl_process_ring>
 8001b74:	2001      	movs	r0, #1
 8001b76:	f7ff fe83 	bl	8001880 <dmxl_process_ring>
 8001b7a:	2002      	movs	r0, #2
 8001b7c:	f7ff fe80 	bl	8001880 <dmxl_process_ring>
 8001b80:	2003      	movs	r0, #3
 8001b82:	f7ff fe7d 	bl	8001880 <dmxl_process_ring>
    volatile uint32_t t_start = SYSTIME;
    bool pong_received = false;
    while (SYSTIME - t_start < 10000 && !pong_received)
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_PING)
 8001b86:	7c23      	ldrb	r3, [r4, #16]
 8001b88:	3b04      	subs	r3, #4
 8001b8a:	bf18      	it	ne
 8001b8c:	2301      	movne	r3, #1
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
    volatile uint32_t t_start = SYSTIME;
    bool pong_received = false;
    while (SYSTIME - t_start < 10000 && !pong_received)
 8001b8e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001b90:	9903      	ldr	r1, [sp, #12]
 8001b92:	1a52      	subs	r2, r2, r1
 8001b94:	42b2      	cmp	r2, r6
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 8001b96:	4618      	mov	r0, r3
    dmxl_set_usart_baud(i, 250000);
    g_dmxl_ports[i].comms_state = DMXL_CS_PING;
    dmxl_send_ping(i, DMXL_DEFAULT_ID);
    volatile uint32_t t_start = SYSTIME;
    bool pong_received = false;
    while (SYSTIME - t_start < 10000 && !pong_received)
 8001b98:	d9e8      	bls.n	8001b6c <dmxl_set_baud_rates+0x48>
    {
      dmxl_process_rings();
      if (g_dmxl_ports[i].comms_state != DMXL_CS_PING)
        pong_received = true;
    }
    if (pong_received)
 8001b9a:	bb1b      	cbnz	r3, 8001be4 <dmxl_set_baud_rates+0xc0>
      printf("received rx @ 250 kbit from dmxl %d\r\n", i);
      continue; // hooray. it's already at the target baud rate
    }
    else
    {
      printf("no rx received from dmxl %d... trying 57600 baud...\r\n", i);
 8001b9c:	4639      	mov	r1, r7
 8001b9e:	4816      	ldr	r0, [pc, #88]	; (8001bf8 <dmxl_set_baud_rates+0xd4>)
 8001ba0:	f001 fe96 	bl	80038d0 <printf>
      // this is the default out-of-the-box setup
      dmxl_set_usart_baud(i, 57600);
 8001ba4:	4638      	mov	r0, r7
 8001ba6:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8001baa:	f7ff fd63 	bl	8001674 <dmxl_set_usart_baud>
      uint8_t baud_code = 7; // the dynamixel code for 250000 baud
      dmxl_write_data(i, DMXL_DEFAULT_ID, 1, 0x04, &baud_code);
 8001bae:	2101      	movs	r1, #1
 8001bb0:	ab02      	add	r3, sp, #8
 8001bb2:	460a      	mov	r2, r1
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	4640      	mov	r0, r8
 8001bb8:	2304      	movs	r3, #4
    else
    {
      printf("no rx received from dmxl %d... trying 57600 baud...\r\n", i);
      // this is the default out-of-the-box setup
      dmxl_set_usart_baud(i, 57600);
      uint8_t baud_code = 7; // the dynamixel code for 250000 baud
 8001bba:	2607      	movs	r6, #7
 8001bbc:	f88d 6008 	strb.w	r6, [sp, #8]
      dmxl_write_data(i, DMXL_DEFAULT_ID, 1, 0x04, &baud_code);
 8001bc0:	f7ff fc9a 	bl	80014f8 <dmxl_write_data>
      delay_ms(500);
 8001bc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bc8:	f001 fcb6 	bl	8003538 <delay_ms>
      dmxl_set_usart_baud(i, 250000);
 8001bcc:	4638      	mov	r0, r7
 8001bce:	4909      	ldr	r1, [pc, #36]	; (8001bf4 <dmxl_set_baud_rates+0xd0>)
 8001bd0:	f7ff fd50 	bl	8001674 <dmxl_set_usart_baud>
  }
}

void dmxl_set_baud_rates()
{
  for (int i = 0; i < NUM_DMXL; i++)
 8001bd4:	3701      	adds	r7, #1
 8001bd6:	2f04      	cmp	r7, #4
 8001bd8:	f104 0418 	add.w	r4, r4, #24
 8001bdc:	d1a9      	bne.n	8001b32 <dmxl_set_baud_rates+0xe>
      dmxl_write_data(i, DMXL_DEFAULT_ID, 1, 0x04, &baud_code);
      delay_ms(500);
      dmxl_set_usart_baud(i, 250000);
    }
  }
}
 8001bde:	b004      	add	sp, #16
 8001be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (g_dmxl_ports[i].comms_state != DMXL_CS_PING)
        pong_received = true;
    }
    if (pong_received)
    {
      printf("received rx @ 250 kbit from dmxl %d\r\n", i);
 8001be4:	4639      	mov	r1, r7
 8001be6:	4805      	ldr	r0, [pc, #20]	; (8001bfc <dmxl_set_baud_rates+0xd8>)
 8001be8:	f001 fe72 	bl	80038d0 <printf>
      continue; // hooray. it's already at the target baud rate
 8001bec:	e7f2      	b.n	8001bd4 <dmxl_set_baud_rates+0xb0>
 8001bee:	bf00      	nop
 8001bf0:	2000000c 	.word	0x2000000c
 8001bf4:	0003d090 	.word	0x0003d090
 8001bf8:	0800c750 	.word	0x0800c750
 8001bfc:	0800c728 	.word	0x0800c728

08001c00 <dmxl_process_rings>:
    }
  }
}

void dmxl_process_rings()
{
 8001c00:	b508      	push	{r3, lr}
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 8001c02:	2000      	movs	r0, #0
 8001c04:	f7ff fe3c 	bl	8001880 <dmxl_process_ring>
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f7ff fe39 	bl	8001880 <dmxl_process_ring>
 8001c0e:	2002      	movs	r0, #2
 8001c10:	f7ff fe36 	bl	8001880 <dmxl_process_ring>
 8001c14:	2003      	movs	r0, #3
}
 8001c16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 8001c1a:	f7ff be31 	b.w	8001880 <dmxl_process_ring>
 8001c1e:	bf00      	nop

08001c20 <dmxl_set_led>:
}

// See Dynamixel addresses here: http://support.robotis.com/en/product/dynamixel/mx_series/mx-28.htm
void dmxl_set_led(const uint8_t port_idx, const uint8_t dmxl_id,
                  const uint8_t enable)
{
 8001c20:	b500      	push	{lr}
 8001c22:	b085      	sub	sp, #20
  uint8_t d = enable ? 1 : 0;
 8001c24:	3200      	adds	r2, #0
 8001c26:	ab04      	add	r3, sp, #16
 8001c28:	bf18      	it	ne
 8001c2a:	2201      	movne	r2, #1
 8001c2c:	f803 2d01 	strb.w	r2, [r3, #-1]!
  dmxl_write_data(port_idx, dmxl_id, 1, 25, &d); // 25 = LED address
 8001c30:	2201      	movs	r2, #1
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2319      	movs	r3, #25
 8001c36:	f7ff fc5f 	bl	80014f8 <dmxl_write_data>
}
 8001c3a:	b005      	add	sp, #20
 8001c3c:	f85d fb04 	ldr.w	pc, [sp], #4

08001c40 <dmxl_set_torque_enable>:


void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
 8001c40:	b500      	push	{lr}
 8001c42:	b085      	sub	sp, #20
  uint8_t d = enable ? 1 : 0;
 8001c44:	3200      	adds	r2, #0
 8001c46:	ab04      	add	r3, sp, #16
 8001c48:	bf18      	it	ne
 8001c4a:	2201      	movne	r2, #1
 8001c4c:	f803 2d01 	strb.w	r2, [r3, #-1]!
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 8001c50:	2201      	movs	r2, #1
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2318      	movs	r3, #24
 8001c56:	f7ff fc4f 	bl	80014f8 <dmxl_write_data>
}
 8001c5a:	b005      	add	sp, #20
 8001c5c:	f85d fb04 	ldr.w	pc, [sp], #4

08001c60 <dmxl_set_angle_limits>:

void dmxl_set_angle_limits(const uint8_t port_idx, const uint8_t dmxl_id,
                           const uint16_t cw_limit, const uint16_t ccw_limit)
{
 8001c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c62:	b085      	sub	sp, #20
 8001c64:	461c      	mov	r4, r3
  uint8_t d[4];
  d[0] = cw_limit & 0xff;
  d[1] = (cw_limit >> 8) & 0xff;
  d[2] = ccw_limit & 0xff;
  d[3] = (ccw_limit >> 8) & 0xff;
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
 8001c66:	ab03      	add	r3, sp, #12
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
}

void dmxl_set_angle_limits(const uint8_t port_idx, const uint8_t dmxl_id,
                           const uint16_t cw_limit, const uint16_t ccw_limit)
{
 8001c68:	4615      	mov	r5, r2
  uint8_t d[4];
  d[0] = cw_limit & 0xff;
  d[1] = (cw_limit >> 8) & 0xff;
 8001c6a:	0a17      	lsrs	r7, r2, #8
  d[2] = ccw_limit & 0xff;
  d[3] = (ccw_limit >> 8) & 0xff;
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
 8001c6c:	9300      	str	r3, [sp, #0]
{
  uint8_t d[4];
  d[0] = cw_limit & 0xff;
  d[1] = (cw_limit >> 8) & 0xff;
  d[2] = ccw_limit & 0xff;
  d[3] = (ccw_limit >> 8) & 0xff;
 8001c6e:	0a26      	lsrs	r6, r4, #8
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
 8001c70:	2204      	movs	r2, #4
 8001c72:	2306      	movs	r3, #6

void dmxl_set_angle_limits(const uint8_t port_idx, const uint8_t dmxl_id,
                           const uint16_t cw_limit, const uint16_t ccw_limit)
{
  uint8_t d[4];
  d[0] = cw_limit & 0xff;
 8001c74:	f88d 500c 	strb.w	r5, [sp, #12]
  d[1] = (cw_limit >> 8) & 0xff;
 8001c78:	f88d 700d 	strb.w	r7, [sp, #13]
  d[2] = ccw_limit & 0xff;
 8001c7c:	f88d 400e 	strb.w	r4, [sp, #14]
  d[3] = (ccw_limit >> 8) & 0xff;
 8001c80:	f88d 600f 	strb.w	r6, [sp, #15]
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
 8001c84:	f7ff fc38 	bl	80014f8 <dmxl_write_data>
}
 8001c88:	b005      	add	sp, #20
 8001c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c8c <dmxl_set_res_divider>:

void dmxl_set_res_divider(const uint8_t port_idx, const uint8_t dmxl_id,
                          const uint8_t res_divider)
{
 8001c8c:	b510      	push	{r4, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	ac04      	add	r4, sp, #16
  dmxl_write_data(port_idx, dmxl_id, 1, 22, &res_divider);
 8001c92:	2316      	movs	r3, #22
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
}

void dmxl_set_res_divider(const uint8_t port_idx, const uint8_t dmxl_id,
                          const uint8_t res_divider)
{
 8001c94:	f804 2d01 	strb.w	r2, [r4, #-1]!
  dmxl_write_data(port_idx, dmxl_id, 1, 22, &res_divider);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	9400      	str	r4, [sp, #0]
 8001c9c:	f7ff fc2c 	bl	80014f8 <dmxl_write_data>
}
 8001ca0:	b004      	add	sp, #16
 8001ca2:	bd10      	pop	{r4, pc}

08001ca4 <dmxl_set_multiturn_offset>:

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
 8001ca4:	b530      	push	{r4, r5, lr}
 8001ca6:	b085      	sub	sp, #20
  uint8_t d[2];
  d[0] = offset & 0xff;
  d[1] = (offset >> 8) & 0xff;
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 8001ca8:	ab03      	add	r3, sp, #12
  dmxl_write_data(port_idx, dmxl_id, 1, 22, &res_divider);
}

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
 8001caa:	4614      	mov	r4, r2
  uint8_t d[2];
  d[0] = offset & 0xff;
  d[1] = (offset >> 8) & 0xff;
 8001cac:	0a15      	lsrs	r5, r2, #8
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	2314      	movs	r3, #20

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
 8001cb4:	f88d 400c 	strb.w	r4, [sp, #12]
  d[1] = (offset >> 8) & 0xff;
 8001cb8:	f88d 500d 	strb.w	r5, [sp, #13]
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 8001cbc:	f7ff fc1c 	bl	80014f8 <dmxl_write_data>
}
 8001cc0:	b005      	add	sp, #20
 8001cc2:	bd30      	pop	{r4, r5, pc}

08001cc4 <dmxl_set_speed_dir>:

void dmxl_set_speed_dir(const uint8_t port_idx, const uint8_t dmxl_id,
                        const uint16_t speed, const uint8_t dir)
{
 8001cc4:	b530      	push	{r4, r5, lr}
  uint8_t d[2];
  d[0] = speed & 0xff;
  d[1] = ((speed >> 8) & 0x03) | (dir ? 0x04 : 0);
 8001cc6:	2b00      	cmp	r3, #0
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
}

void dmxl_set_speed_dir(const uint8_t port_idx, const uint8_t dmxl_id,
                        const uint16_t speed, const uint8_t dir)
{
 8001cc8:	b085      	sub	sp, #20
 8001cca:	4615      	mov	r5, r2
  uint8_t d[2];
  d[0] = speed & 0xff;
  d[1] = ((speed >> 8) & 0x03) | (dir ? 0x04 : 0);
 8001ccc:	f3c2 2301 	ubfx	r3, r2, #8, #2
 8001cd0:	bf14      	ite	ne
 8001cd2:	2404      	movne	r4, #4
 8001cd4:	2400      	moveq	r4, #0
  dmxl_write_data(port_idx, dmxl_id, 2, 32, d);
 8001cd6:	aa03      	add	r2, sp, #12
void dmxl_set_speed_dir(const uint8_t port_idx, const uint8_t dmxl_id,
                        const uint16_t speed, const uint8_t dir)
{
  uint8_t d[2];
  d[0] = speed & 0xff;
  d[1] = ((speed >> 8) & 0x03) | (dir ? 0x04 : 0);
 8001cd8:	431c      	orrs	r4, r3
  dmxl_write_data(port_idx, dmxl_id, 2, 32, d);
 8001cda:	9200      	str	r2, [sp, #0]
 8001cdc:	2320      	movs	r3, #32
 8001cde:	2202      	movs	r2, #2

void dmxl_set_speed_dir(const uint8_t port_idx, const uint8_t dmxl_id,
                        const uint16_t speed, const uint8_t dir)
{
  uint8_t d[2];
  d[0] = speed & 0xff;
 8001ce0:	f88d 500c 	strb.w	r5, [sp, #12]
  d[1] = ((speed >> 8) & 0x03) | (dir ? 0x04 : 0);
 8001ce4:	f88d 400d 	strb.w	r4, [sp, #13]
  dmxl_write_data(port_idx, dmxl_id, 2, 32, d);
 8001ce8:	f7ff fc06 	bl	80014f8 <dmxl_write_data>
}
 8001cec:	b005      	add	sp, #20
 8001cee:	bd30      	pop	{r4, r5, pc}

08001cf0 <dmxl_set_control_mode>:

void dmxl_set_control_mode(const uint8_t port_idx,
                           const dmxl_control_mode_t control_mode)
{
 8001cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  //printf("dmxl_set_control_mode %d %d\r\n", port_idx, (int)control_mode);
  if (port_idx >= NUM_DMXL)
 8001cf4:	2803      	cmp	r0, #3
  dmxl_write_data(port_idx, dmxl_id, 2, 32, d);
}

void dmxl_set_control_mode(const uint8_t port_idx,
                           const dmxl_control_mode_t control_mode)
{
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	4605      	mov	r5, r0
  //printf("dmxl_set_control_mode %d %d\r\n", port_idx, (int)control_mode);
  if (port_idx >= NUM_DMXL)
 8001cfa:	d806      	bhi.n	8001d0a <dmxl_set_control_mode+0x1a>
    return;
  if (control_mode == DMXL_CM_IDLE || control_mode == DMXL_CM_VELOCITY)
 8001cfc:	2901      	cmp	r1, #1
 8001cfe:	460c      	mov	r4, r1
 8001d00:	d94e      	bls.n	8001da0 <dmxl_set_control_mode+0xb0>
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 0);
    delay_us(1);
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 0);
  }
  else if (control_mode == DMXL_CM_POSITION)
 8001d02:	2902      	cmp	r1, #2
 8001d04:	d004      	beq.n	8001d10 <dmxl_set_control_mode+0x20>
      delay_us(1);
      dmxl_set_multiturn_offset(port_idx, DMXL_DEFAULT_ID, 13000);  // Places motor close enough to middle of 0-28672 range
      divider_is_sent[port_idx] = 1;
    }
  }
  dmxl_control_mode = control_mode;
 8001d06:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <dmxl_set_control_mode+0xe0>)
 8001d08:	701c      	strb	r4, [r3, #0]
}
 8001d0a:	b004      	add	sp, #16
 8001d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

// See Dynamixel addresses here: http://support.robotis.com/en/product/dynamixel/mx_series/mx-28.htm
void dmxl_set_led(const uint8_t port_idx, const uint8_t dmxl_id,
                  const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 8001d10:	af04      	add	r7, sp, #16
 8001d12:	2601      	movs	r6, #1
 8001d14:	f807 6d04 	strb.w	r6, [r7, #-4]!
  dmxl_write_data(port_idx, dmxl_id, 1, 25, &d); // 25 = LED address
 8001d18:	4631      	mov	r1, r6
 8001d1a:	4632      	mov	r2, r6
 8001d1c:	2319      	movs	r3, #25
 8001d1e:	9700      	str	r7, [sp, #0]
 8001d20:	f7ff fbea 	bl	80014f8 <dmxl_write_data>
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 0);
  }
  else if (control_mode == DMXL_CM_POSITION)
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 1);
    delay_us(1);
 8001d24:	4630      	mov	r0, r6
 8001d26:	f001 fbf5 	bl	8003514 <delay_us>

void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 8001d2a:	4631      	mov	r1, r6
 8001d2c:	4632      	mov	r2, r6
 8001d2e:	2318      	movs	r3, #24
 8001d30:	4628      	mov	r0, r5
 8001d32:	9700      	str	r7, [sp, #0]


void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 8001d34:	f88d 600c 	strb.w	r6, [sp, #12]
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 8001d38:	f7ff fbde 	bl	80014f8 <dmxl_write_data>
  else if (control_mode == DMXL_CM_POSITION)
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 1);
    delay_us(1);
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 1);
    delay_us(1);
 8001d3c:	4630      	mov	r0, r6
 8001d3e:	f001 fbe9 	bl	8003514 <delay_us>
    dmxl_set_angle_limits(port_idx, DMXL_DEFAULT_ID, 4095, 4095);  // Enables multi-turn mode w/ position control
    // http://support.robotis.com/en/product/dynamixel/mx_series/mx-64.htm#Actuator_Address_0B1
    if (divider_is_sent[port_idx] == 0) {
 8001d42:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8001dd4 <dmxl_set_control_mode+0xe4>
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 1);
    delay_us(1);
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 1);
    delay_us(1);
    dmxl_set_angle_limits(port_idx, DMXL_DEFAULT_ID, 4095, 4095);  // Enables multi-turn mode w/ position control
 8001d46:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	4628      	mov	r0, r5
 8001d4e:	4631      	mov	r1, r6
 8001d50:	f7ff ff86 	bl	8001c60 <dmxl_set_angle_limits>
    // http://support.robotis.com/en/product/dynamixel/mx_series/mx-64.htm#Actuator_Address_0B1
    if (divider_is_sent[port_idx] == 0) {
 8001d54:	f818 3005 	ldrb.w	r3, [r8, r5]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1d4      	bne.n	8001d06 <dmxl_set_control_mode+0x16>
      delay_us(1);
 8001d5c:	4630      	mov	r0, r6
 8001d5e:	f001 fbd9 	bl	8003514 <delay_us>
 8001d62:	ab04      	add	r3, sp, #16
 8001d64:	2204      	movs	r2, #4
 8001d66:	f803 2d05 	strb.w	r2, [r3, #-5]!
}

void dmxl_set_res_divider(const uint8_t port_idx, const uint8_t dmxl_id,
                          const uint8_t res_divider)
{
  dmxl_write_data(port_idx, dmxl_id, 1, 22, &res_divider);
 8001d6a:	4631      	mov	r1, r6
 8001d6c:	4632      	mov	r2, r6
 8001d6e:	4628      	mov	r0, r5
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2316      	movs	r3, #22
 8001d74:	f7ff fbc0 	bl	80014f8 <dmxl_write_data>
    dmxl_set_angle_limits(port_idx, DMXL_DEFAULT_ID, 4095, 4095);  // Enables multi-turn mode w/ position control
    // http://support.robotis.com/en/product/dynamixel/mx_series/mx-64.htm#Actuator_Address_0B1
    if (divider_is_sent[port_idx] == 0) {
      delay_us(1);
      dmxl_set_res_divider(port_idx, DMXL_DEFAULT_ID, 4);
      delay_us(1);
 8001d78:	4630      	mov	r0, r6
 8001d7a:	f001 fbcb 	bl	8003514 <delay_us>
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
  d[1] = (offset >> 8) & 0xff;
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 8001d7e:	9700      	str	r7, [sp, #0]

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
 8001d80:	f04f 0ec8 	mov.w	lr, #200	; 0xc8
  d[1] = (offset >> 8) & 0xff;
 8001d84:	2732      	movs	r7, #50	; 0x32
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 8001d86:	4628      	mov	r0, r5
 8001d88:	4631      	mov	r1, r6
 8001d8a:	4622      	mov	r2, r4
 8001d8c:	2314      	movs	r3, #20

void dmxl_set_multiturn_offset(const uint8_t port_idx, const uint8_t dmxl_id,
                               const uint16_t offset)
{
  uint8_t d[2];
  d[0] = offset & 0xff;
 8001d8e:	f88d e00c 	strb.w	lr, [sp, #12]
  d[1] = (offset >> 8) & 0xff;
 8001d92:	f88d 700d 	strb.w	r7, [sp, #13]
  dmxl_write_data(port_idx, dmxl_id, 2, 20, d);
 8001d96:	f7ff fbaf 	bl	80014f8 <dmxl_write_data>
    if (divider_is_sent[port_idx] == 0) {
      delay_us(1);
      dmxl_set_res_divider(port_idx, DMXL_DEFAULT_ID, 4);
      delay_us(1);
      dmxl_set_multiturn_offset(port_idx, DMXL_DEFAULT_ID, 13000);  // Places motor close enough to middle of 0-28672 range
      divider_is_sent[port_idx] = 1;
 8001d9a:	f808 6005 	strb.w	r6, [r8, r5]
 8001d9e:	e7b2      	b.n	8001d06 <dmxl_set_control_mode+0x16>

// See Dynamixel addresses here: http://support.robotis.com/en/product/dynamixel/mx_series/mx-28.htm
void dmxl_set_led(const uint8_t port_idx, const uint8_t dmxl_id,
                  const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 8001da0:	ae04      	add	r6, sp, #16
 8001da2:	2700      	movs	r7, #0
 8001da4:	f806 7d04 	strb.w	r7, [r6, #-4]!
  dmxl_write_data(port_idx, dmxl_id, 1, 25, &d); // 25 = LED address
 8001da8:	2101      	movs	r1, #1
 8001daa:	460a      	mov	r2, r1
 8001dac:	2319      	movs	r3, #25
 8001dae:	9600      	str	r6, [sp, #0]
 8001db0:	f7ff fba2 	bl	80014f8 <dmxl_write_data>
  if (port_idx >= NUM_DMXL)
    return;
  if (control_mode == DMXL_CM_IDLE || control_mode == DMXL_CM_VELOCITY)
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 0);
    delay_us(1);
 8001db4:	2001      	movs	r0, #1
 8001db6:	f001 fbad 	bl	8003514 <delay_us>

void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 8001dba:	2101      	movs	r1, #1
 8001dbc:	9600      	str	r6, [sp, #0]
 8001dbe:	4628      	mov	r0, r5
 8001dc0:	460a      	mov	r2, r1
 8001dc2:	2318      	movs	r3, #24


void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 8001dc4:	f88d 700c 	strb.w	r7, [sp, #12]
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 8001dc8:	f7ff fb96 	bl	80014f8 <dmxl_write_data>
 8001dcc:	e79b      	b.n	8001d06 <dmxl_set_control_mode+0x16>
 8001dce:	bf00      	nop
 8001dd0:	2000ffdc 	.word	0x2000ffdc
 8001dd4:	2000f3cc 	.word	0x2000f3cc

08001dd8 <dmxl_set_control_target>:

void dmxl_set_control_target(const uint8_t port_idx,
                             const uint16_t target)
{
  //printf("dmxl_set_control_target %d %d\r\n", port_idx, (int)target);
  if (port_idx >= NUM_DMXL)
 8001dd8:	2803      	cmp	r0, #3
 8001dda:	d815      	bhi.n	8001e08 <dmxl_set_control_target+0x30>
  dmxl_control_mode = control_mode;
}

void dmxl_set_control_target(const uint8_t port_idx,
                             const uint16_t target)
{
 8001ddc:	b510      	push	{r4, lr}
    return;
  uint8_t d[2];
  d[0] = target & 0xff;
  d[1] = (target >> 8) & 0xff;
  uint8_t start_addr = 30;  // position control
  if (dmxl_control_mode == DMXL_CM_VELOCITY) {
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <dmxl_set_control_target+0x34>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
  dmxl_control_mode = control_mode;
}

void dmxl_set_control_target(const uint8_t port_idx,
                             const uint16_t target)
{
 8001de2:	b084      	sub	sp, #16
    return;
  uint8_t d[2];
  d[0] = target & 0xff;
  d[1] = (target >> 8) & 0xff;
  uint8_t start_addr = 30;  // position control
  if (dmxl_control_mode == DMXL_CM_VELOCITY) {
 8001de4:	2b01      	cmp	r3, #1
    start_addr = 32; // velocity control
  }
  dmxl_write_data(port_idx, DMXL_DEFAULT_ID, 2, start_addr, d);
 8001de6:	aa03      	add	r2, sp, #12
{
  //printf("dmxl_set_control_target %d %d\r\n", port_idx, (int)target);
  if (port_idx >= NUM_DMXL)
    return;
  uint8_t d[2];
  d[0] = target & 0xff;
 8001de8:	f88d 100c 	strb.w	r1, [sp, #12]
  d[1] = (target >> 8) & 0xff;
 8001dec:	ea4f 2411 	mov.w	r4, r1, lsr #8
  uint8_t start_addr = 30;  // position control
  if (dmxl_control_mode == DMXL_CM_VELOCITY) {
    start_addr = 32; // velocity control
  }
  dmxl_write_data(port_idx, DMXL_DEFAULT_ID, 2, start_addr, d);
 8001df0:	9200      	str	r2, [sp, #0]
 8001df2:	bf14      	ite	ne
 8001df4:	231e      	movne	r3, #30
 8001df6:	2320      	moveq	r3, #32
 8001df8:	2101      	movs	r1, #1
 8001dfa:	2202      	movs	r2, #2
  //printf("dmxl_set_control_target %d %d\r\n", port_idx, (int)target);
  if (port_idx >= NUM_DMXL)
    return;
  uint8_t d[2];
  d[0] = target & 0xff;
  d[1] = (target >> 8) & 0xff;
 8001dfc:	f88d 400d 	strb.w	r4, [sp, #13]
  uint8_t start_addr = 30;  // position control
  if (dmxl_control_mode == DMXL_CM_VELOCITY) {
    start_addr = 32; // velocity control
  }
  dmxl_write_data(port_idx, DMXL_DEFAULT_ID, 2, start_addr, d);
 8001e00:	f7ff fb7a 	bl	80014f8 <dmxl_write_data>
}
 8001e04:	b004      	add	sp, #16
 8001e06:	bd10      	pop	{r4, pc}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	2000ffdc 	.word	0x2000ffdc

08001e10 <dmxl_set_all_control_targets>:

void dmxl_set_all_control_targets(const uint16_t *targets)
{
 8001e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e14:	4d36      	ldr	r5, [pc, #216]	; (8001ef0 <dmxl_set_all_control_targets+0xe0>)
 8001e16:	4937      	ldr	r1, [pc, #220]	; (8001ef4 <dmxl_set_all_control_targets+0xe4>)
 8001e18:	1e87      	subs	r7, r0, #2
 8001e1a:	f100 0c06 	add.w	ip, r0, #6
 8001e1e:	462e      	mov	r6, r5
  for (int i = 0; i < NUM_DMXL; i++)
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
    u->CR1 |=  USART_CR1_TE; // enable the transmitter
    pkts[i][0] = 0xff;
 8001e20:	f04f 0eff 	mov.w	lr, #255	; 0xff
    pkts[i][1] = 0xff;
    pkts[i][2] = DMXL_DEFAULT_ID;
 8001e24:	f04f 0b01 	mov.w	fp, #1
    pkts[i][3] = 5; // write 2 bytes + 3 byte overhead
 8001e28:	f04f 0905 	mov.w	r9, #5
    pkts[i][4] = 3; // instruction: "write data"
 8001e2c:	f04f 0803 	mov.w	r8, #3
    } else {
      pkts[i][5] = 30; // start address: control target (position)
    }
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
    pkts[i][8] = 0; // checksum
 8001e30:	f04f 0a00 	mov.w	sl, #0
{
  // set all control targets simultaneously
  static uint8_t pkts[NUM_DMXL][12];
  for (int i = 0; i < NUM_DMXL; i++)
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
 8001e34:	68f2      	ldr	r2, [r6, #12]
    u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
 8001e36:	8993      	ldrh	r3, [r2, #12]
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	041b      	lsls	r3, r3, #16
 8001e3e:	0c1b      	lsrs	r3, r3, #16
 8001e40:	8193      	strh	r3, [r2, #12]
    u->CR1 |=  USART_CR1_TE; // enable the transmitter
 8001e42:	8993      	ldrh	r3, [r2, #12]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	f043 0308 	orr.w	r3, r3, #8
 8001e4a:	8193      	strh	r3, [r2, #12]
    pkts[i][0] = 0xff;
    pkts[i][1] = 0xff;
    pkts[i][2] = DMXL_DEFAULT_ID;
    pkts[i][3] = 5; // write 2 bytes + 3 byte overhead
    pkts[i][4] = 3; // instruction: "write data"
    if (dmxl_control_mode == DMXL_CM_VELOCITY) {
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <dmxl_set_all_control_targets+0xe8>)
  for (int i = 0; i < NUM_DMXL; i++)
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
    u->CR1 |=  USART_CR1_TE; // enable the transmitter
    pkts[i][0] = 0xff;
 8001e4e:	f801 ec01 	strb.w	lr, [r1, #-1]
    pkts[i][1] = 0xff;
    pkts[i][2] = DMXL_DEFAULT_ID;
    pkts[i][3] = 5; // write 2 bytes + 3 byte overhead
    pkts[i][4] = 3; // instruction: "write data"
    if (dmxl_control_mode == DMXL_CM_VELOCITY) {
 8001e52:	781b      	ldrb	r3, [r3, #0]
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
    u->CR1 |=  USART_CR1_TE; // enable the transmitter
    pkts[i][0] = 0xff;
    pkts[i][1] = 0xff;
 8001e54:	f881 e000 	strb.w	lr, [r1]
    pkts[i][2] = DMXL_DEFAULT_ID;
    pkts[i][3] = 5; // write 2 bytes + 3 byte overhead
    pkts[i][4] = 3; // instruction: "write data"
    if (dmxl_control_mode == DMXL_CM_VELOCITY) {
      pkts[i][5] = 32; // start address: control target (velocity)
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	bf14      	ite	ne
 8001e5c:	231e      	movne	r3, #30
 8001e5e:	2320      	moveq	r3, #32
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
    u->CR1 |=  USART_CR1_TE; // enable the transmitter
    pkts[i][0] = 0xff;
    pkts[i][1] = 0xff;
    pkts[i][2] = DMXL_DEFAULT_ID;
 8001e60:	f881 b001 	strb.w	fp, [r1, #1]
    pkts[i][3] = 5; // write 2 bytes + 3 byte overhead
 8001e64:	f881 9002 	strb.w	r9, [r1, #2]
    pkts[i][4] = 3; // instruction: "write data"
 8001e68:	f881 8003 	strb.w	r8, [r1, #3]
    if (dmxl_control_mode == DMXL_CM_VELOCITY) {
      pkts[i][5] = 32; // start address: control target (velocity)
 8001e6c:	710b      	strb	r3, [r1, #4]
    } else {
      pkts[i][5] = 30; // start address: control target (position)
    }
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
 8001e6e:	f837 3f02 	ldrh.w	r3, [r7, #2]!
 8001e72:	714b      	strb	r3, [r1, #5]
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	718b      	strb	r3, [r1, #6]
    pkts[i][8] = 0; // checksum
 8001e78:	f881 a007 	strb.w	sl, [r1, #7]
 8001e7c:	1d88      	adds	r0, r1, #6
 8001e7e:	460a      	mov	r2, r1
 8001e80:	2300      	movs	r3, #0
    for (int j = 2; j < 8; j++)
      pkts[i][8] += pkts[i][j];
 8001e82:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8001e86:	4423      	add	r3, r4
 8001e88:	b2db      	uxtb	r3, r3
      pkts[i][5] = 30; // start address: control target (position)
    }
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
    pkts[i][8] = 0; // checksum
    for (int j = 2; j < 8; j++)
 8001e8a:	4282      	cmp	r2, r0
      pkts[i][8] += pkts[i][j];
 8001e8c:	71cb      	strb	r3, [r1, #7]
      pkts[i][5] = 30; // start address: control target (position)
    }
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
    pkts[i][8] = 0; // checksum
    for (int j = 2; j < 8; j++)
 8001e8e:	d1f8      	bne.n	8001e82 <dmxl_set_all_control_targets+0x72>
      pkts[i][8] += pkts[i][j];
    pkts[i][8] = ~pkts[i][8]; // invert checksum
 8001e90:	43db      	mvns	r3, r3

void dmxl_set_all_control_targets(const uint16_t *targets)
{
  // set all control targets simultaneously
  static uint8_t pkts[NUM_DMXL][12];
  for (int i = 0; i < NUM_DMXL; i++)
 8001e92:	4567      	cmp	r7, ip
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
    pkts[i][8] = 0; // checksum
    for (int j = 2; j < 8; j++)
      pkts[i][8] += pkts[i][j];
    pkts[i][8] = ~pkts[i][8]; // invert checksum
 8001e94:	71cb      	strb	r3, [r1, #7]
 8001e96:	f106 0618 	add.w	r6, r6, #24
 8001e9a:	f101 010c 	add.w	r1, r1, #12

void dmxl_set_all_control_targets(const uint16_t *targets)
{
  // set all control targets simultaneously
  static uint8_t pkts[NUM_DMXL][12];
  for (int i = 0; i < NUM_DMXL; i++)
 8001e9e:	d1c9      	bne.n	8001e34 <dmxl_set_all_control_targets+0x24>
 8001ea0:	4c16      	ldr	r4, [pc, #88]	; (8001efc <dmxl_set_all_control_targets+0xec>)
 8001ea2:	f104 0609 	add.w	r6, r4, #9
    } else {
      pkts[i][5] = 30; // start address: control target (position)
    }
    pkts[i][6] = targets[i] & 0xff; // LSB of control target
    pkts[i][7] = (targets[i] >> 8) & 0xff; // MSB of control target
    pkts[i][8] = 0; // checksum
 8001ea6:	4812      	ldr	r0, [pc, #72]	; (8001ef0 <dmxl_set_all_control_targets+0xe0>)
 8001ea8:	2100      	movs	r1, #0
  }
  for (int j = 0; j < 9; j++)
  {
    for (int i = 0; i < NUM_DMXL; i++)
    {
      USART_TypeDef *u = g_dmxl_ports[i].uart;
 8001eaa:	68c2      	ldr	r2, [r0, #12]
      while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
 8001eac:	8813      	ldrh	r3, [r2, #0]
 8001eae:	061f      	lsls	r7, r3, #24
 8001eb0:	d5fc      	bpl.n	8001eac <dmxl_set_all_control_targets+0x9c>
      u->DR = pkts[i][j];
 8001eb2:	5c63      	ldrb	r3, [r4, r1]
 8001eb4:	8093      	strh	r3, [r2, #4]
 8001eb6:	310c      	adds	r1, #12
      pkts[i][8] += pkts[i][j];
    pkts[i][8] = ~pkts[i][8]; // invert checksum
  }
  for (int j = 0; j < 9; j++)
  {
    for (int i = 0; i < NUM_DMXL; i++)
 8001eb8:	2930      	cmp	r1, #48	; 0x30
 8001eba:	f100 0018 	add.w	r0, r0, #24
 8001ebe:	d1f4      	bne.n	8001eaa <dmxl_set_all_control_targets+0x9a>
 8001ec0:	3401      	adds	r4, #1
    pkts[i][8] = 0; // checksum
    for (int j = 2; j < 8; j++)
      pkts[i][8] += pkts[i][j];
    pkts[i][8] = ~pkts[i][8]; // invert checksum
  }
  for (int j = 0; j < 9; j++)
 8001ec2:	42b4      	cmp	r4, r6
 8001ec4:	d1ef      	bne.n	8001ea6 <dmxl_set_all_control_targets+0x96>
 8001ec6:	490e      	ldr	r1, [pc, #56]	; (8001f00 <dmxl_set_all_control_targets+0xf0>)
      u->DR = pkts[i][j];
    }
  }
  for (int i = 0; i < NUM_DMXL; i++)
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
 8001ec8:	68ea      	ldr	r2, [r5, #12]
    while (!(u->SR & USART_SR_TC)) { } // wait for last TX to finish
 8001eca:	8813      	ldrh	r3, [r2, #0]
 8001ecc:	065b      	lsls	r3, r3, #25
 8001ece:	d5fc      	bpl.n	8001eca <dmxl_set_all_control_targets+0xba>
    u->CR1 &= ~USART_CR1_TE; // disable the transmitter
 8001ed0:	8993      	ldrh	r3, [r2, #12]
 8001ed2:	f023 0308 	bic.w	r3, r3, #8
 8001ed6:	041b      	lsls	r3, r3, #16
 8001ed8:	0c1b      	lsrs	r3, r3, #16
 8001eda:	8193      	strh	r3, [r2, #12]
    u->CR1 |=  USART_CR1_RE; // re-enable the receiver
 8001edc:	8993      	ldrh	r3, [r2, #12]
 8001ede:	3518      	adds	r5, #24
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
      USART_TypeDef *u = g_dmxl_ports[i].uart;
      while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
      u->DR = pkts[i][j];
    }
  }
  for (int i = 0; i < NUM_DMXL; i++)
 8001ee6:	428d      	cmp	r5, r1
  {
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    while (!(u->SR & USART_SR_TC)) { } // wait for last TX to finish
    u->CR1 &= ~USART_CR1_TE; // disable the transmitter
    u->CR1 |=  USART_CR1_RE; // re-enable the receiver
 8001ee8:	8193      	strh	r3, [r2, #12]
      USART_TypeDef *u = g_dmxl_ports[i].uart;
      while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
      u->DR = pkts[i][j];
    }
  }
  for (int i = 0; i < NUM_DMXL; i++)
 8001eea:	d1ed      	bne.n	8001ec8 <dmxl_set_all_control_targets+0xb8>
    USART_TypeDef *u = g_dmxl_ports[i].uart;
    while (!(u->SR & USART_SR_TC)) { } // wait for last TX to finish
    u->CR1 &= ~USART_CR1_TE; // disable the transmitter
    u->CR1 |=  USART_CR1_RE; // re-enable the receiver
  }
}
 8001eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ef0:	2000000c 	.word	0x2000000c
 8001ef4:	2000f395 	.word	0x2000f395
 8001ef8:	2000ffdc 	.word	0x2000ffdc
 8001efc:	2000f394 	.word	0x2000f394
 8001f00:	2000006c 	.word	0x2000006c

08001f04 <dmxl_poll>:

void dmxl_poll()
{
 8001f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f06:	4e1f      	ldr	r6, [pc, #124]	; (8001f84 <dmxl_poll+0x80>)
 8001f08:	b083      	sub	sp, #12
  // spin through and poll all their angles, velocities, currents,
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
 8001f0a:	2400      	movs	r4, #0
    u->CR1 |=  USART_CR1_RE; // re-enable the receiver
  }
}

void dmxl_poll()
{
 8001f0c:	4635      	mov	r5, r6
  // spin through and poll all their angles, velocities, currents,
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
 8001f0e:	2702      	movs	r7, #2
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
 8001f10:	b2e0      	uxtb	r0, r4
{
  // spin through and poll all their angles, velocities, currents,
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
 8001f12:	742f      	strb	r7, [r5, #16]
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
 8001f14:	2108      	movs	r1, #8

void dmxl_poll()
{
  // spin through and poll all their angles, velocities, currents,
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
 8001f16:	3401      	adds	r4, #1
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
 8001f18:	2224      	movs	r2, #36	; 0x24
 8001f1a:	f7ff fb0f 	bl	800153c <dmxl_read_data.constprop.3>

void dmxl_poll()
{
  // spin through and poll all their angles, velocities, currents,
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
 8001f1e:	2c04      	cmp	r4, #4
 8001f20:	f105 0518 	add.w	r5, r5, #24
 8001f24:	d1f4      	bne.n	8001f10 <dmxl_poll+0xc>
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
  }
  volatile uint32_t t_start = SYSTIME;
 8001f26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  while (SYSTIME - t_start < 10000)
 8001f2a:	461d      	mov	r5, r3
 8001f2c:	4f16      	ldr	r7, [pc, #88]	; (8001f88 <dmxl_poll+0x84>)
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
  }
  volatile uint32_t t_start = SYSTIME;
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	9301      	str	r3, [sp, #4]
  while (SYSTIME - t_start < 10000)
 8001f32:	f242 740f 	movw	r4, #9999	; 0x270f
 8001f36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001f38:	9a01      	ldr	r2, [sp, #4]
 8001f3a:	1a9b      	subs	r3, r3, r2
 8001f3c:	42a3      	cmp	r3, r4
 8001f3e:	d816      	bhi.n	8001f6e <dmxl_poll+0x6a>
}

void dmxl_process_rings()
{
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    dmxl_process_ring(i);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff fc9d 	bl	8001880 <dmxl_process_ring>
 8001f46:	2001      	movs	r0, #1
 8001f48:	f7ff fc9a 	bl	8001880 <dmxl_process_ring>
 8001f4c:	2002      	movs	r0, #2
 8001f4e:	f7ff fc97 	bl	8001880 <dmxl_process_ring>
 8001f52:	2003      	movs	r0, #3
 8001f54:	f7ff fc94 	bl	8001880 <dmxl_process_ring>
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <dmxl_poll+0x88>)
 8001f5a:	2201      	movs	r2, #1
  {
    dmxl_process_rings();
    // also spin around the ethernet rings here? probably not.
    int all_done = 1;
    for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
      if (g_dmxl_ports[i].comms_state == DMXL_CS_POLL_STATE)
 8001f5c:	7c19      	ldrb	r1, [r3, #16]
 8001f5e:	3318      	adds	r3, #24
        all_done = 0;
 8001f60:	2902      	cmp	r1, #2
 8001f62:	bf08      	it	eq
 8001f64:	2200      	moveq	r2, #0
  while (SYSTIME - t_start < 10000)
  {
    dmxl_process_rings();
    // also spin around the ethernet rings here? probably not.
    int all_done = 1;
    for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
 8001f66:	42bb      	cmp	r3, r7
 8001f68:	d1f8      	bne.n	8001f5c <dmxl_poll+0x58>
      if (g_dmxl_ports[i].comms_state == DMXL_CS_POLL_STATE)
        all_done = 0;
    if (all_done)
 8001f6a:	2a00      	cmp	r2, #0
 8001f6c:	d0e3      	beq.n	8001f36 <dmxl_poll+0x32>
      break;
  }
  // set the comms state to "idle" even if we didn't hear back from it by now
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    g_dmxl_ports[i].comms_state = DMXL_CS_IDLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	7433      	strb	r3, [r6, #16]
 8001f72:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 8001f76:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
 8001f7a:	f886 3058 	strb.w	r3, [r6, #88]	; 0x58
}
 8001f7e:	b003      	add	sp, #12
 8001f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f82:	bf00      	nop
 8001f84:	2000000c 	.word	0x2000000c
 8001f88:	2000006c 	.word	0x2000006c
 8001f8c:	2000000c 	.word	0x2000000c

08001f90 <dmxl_poll_nonblocking_tick>:

void dmxl_poll_nonblocking_tick(const uint8_t dmxl_port)
{
  if (dmxl_port >= NUM_DMXL)
 8001f90:	2803      	cmp	r0, #3
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    g_dmxl_ports[i].comms_state = DMXL_CS_IDLE;
}

void dmxl_poll_nonblocking_tick(const uint8_t dmxl_port)
{
 8001f92:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f96:	4603      	mov	r3, r0
  if (dmxl_port >= NUM_DMXL)
 8001f98:	d81e      	bhi.n	8001fd8 <dmxl_poll_nonblocking_tick+0x48>
    return; // let's not corrupt memory.
  dmxl_async_poll_state_t *ps = &dmxl_poll_states[dmxl_port]; // save typing
  dmxl_port_t *dp = &g_dmxl_ports[dmxl_port];
  USART_TypeDef *u = dp->uart;
 8001f9a:	4a5b      	ldr	r2, [pc, #364]	; (8002108 <dmxl_poll_nonblocking_tick+0x178>)
  static uint8_t dmxl_txbuf[NUM_DMXL][256];
  static uint8_t dmxl_txbuf_readpos[NUM_DMXL] = {0};
  static uint32_t dmxl_rx_start_time[NUM_DMXL] = {0};
  switch (*ps)
 8001f9c:	4d5b      	ldr	r5, [pc, #364]	; (800210c <dmxl_poll_nonblocking_tick+0x17c>)
{
  if (dmxl_port >= NUM_DMXL)
    return; // let's not corrupt memory.
  dmxl_async_poll_state_t *ps = &dmxl_poll_states[dmxl_port]; // save typing
  dmxl_port_t *dp = &g_dmxl_ports[dmxl_port];
  USART_TypeDef *u = dp->uart;
 8001f9e:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8001fa2:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
  static uint8_t dmxl_txbuf[NUM_DMXL][256];
  static uint8_t dmxl_txbuf_readpos[NUM_DMXL] = {0};
  static uint32_t dmxl_rx_start_time[NUM_DMXL] = {0};
  switch (*ps)
 8001fa6:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
{
  if (dmxl_port >= NUM_DMXL)
    return; // let's not corrupt memory.
  dmxl_async_poll_state_t *ps = &dmxl_poll_states[dmxl_port]; // save typing
  dmxl_port_t *dp = &g_dmxl_ports[dmxl_port];
  USART_TypeDef *u = dp->uart;
 8001faa:	68e1      	ldr	r1, [r4, #12]
  static uint8_t dmxl_txbuf[NUM_DMXL][256];
  static uint8_t dmxl_txbuf_readpos[NUM_DMXL] = {0};
  static uint32_t dmxl_rx_start_time[NUM_DMXL] = {0};
  switch (*ps)
 8001fac:	2a01      	cmp	r2, #1
 8001fae:	d015      	beq.n	8001fdc <dmxl_poll_nonblocking_tick+0x4c>
 8001fb0:	d351      	bcc.n	8002056 <dmxl_poll_nonblocking_tick+0xc6>
 8001fb2:	2a02      	cmp	r2, #2
 8001fb4:	d034      	beq.n	8002020 <dmxl_poll_nonblocking_tick+0x90>
 8001fb6:	3201      	adds	r2, #1
 8001fb8:	d10a      	bne.n	8001fd0 <dmxl_poll_nonblocking_tick+0x40>
  {
    case DPS_DONE: // poll start
      dmxl_rx_start_time[dmxl_port] = SYSTIME;
 8001fba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001fbe:	4a54      	ldr	r2, [pc, #336]	; (8002110 <dmxl_poll_nonblocking_tick+0x180>)
 8001fc0:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001fc2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
      *ps = DPS_WAIT; // give any outbound command some time to be processed
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
      break;
 8001fcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *ps = DPS_DONE; // hooray, we received a full state message
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 10000) // wait at most 10ms
        *ps = DPS_DONE; // time to give up. gotta know when to fold em
      break;
    default:
      *ps = DPS_DONE; // shouldn't get here
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fd4:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
 8001fd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dmxl_txbuf_readpos[dmxl_port] = 0;
        *ps = DPS_POLL_TX;
      }
      break;
    case DPS_POLL_TX:
      if (u->SR & USART_SR_TXE) // is there room in the TX buffer ?
 8001fdc:	880a      	ldrh	r2, [r1, #0]
 8001fde:	0610      	lsls	r0, r2, #24
 8001fe0:	d5fa      	bpl.n	8001fd8 <dmxl_poll_nonblocking_tick+0x48>
      {
        if (dmxl_txbuf_readpos[dmxl_port] < 7)
 8001fe2:	484c      	ldr	r0, [pc, #304]	; (8002114 <dmxl_poll_nonblocking_tick+0x184>)
 8001fe4:	5cc2      	ldrb	r2, [r0, r3]
 8001fe6:	2a06      	cmp	r2, #6
 8001fe8:	f240 8084 	bls.w	80020f4 <dmxl_poll_nonblocking_tick+0x164>
        {
          dmxl_txbuf_readpos[dmxl_port]++;
          u->DR = dmxl_txbuf[dmxl_port][dmxl_txbuf_readpos[dmxl_port]];
        }
        else if (u->SR & USART_SR_TC) // last byte must fully complete
 8001fec:	880a      	ldrh	r2, [r1, #0]
 8001fee:	0652      	lsls	r2, r2, #25
 8001ff0:	d5f2      	bpl.n	8001fd8 <dmxl_poll_nonblocking_tick+0x48>
        {
          u->CR1 &= ~USART_CR1_TE; // disable the transmitter
 8001ff2:	898a      	ldrh	r2, [r1, #12]
          u->CR1 |=  USART_CR1_RE; // re-enable the transmitter
          dmxl_rx_start_time[dmxl_port] = SYSTIME;
 8001ff4:	4846      	ldr	r0, [pc, #280]	; (8002110 <dmxl_poll_nonblocking_tick+0x180>)
          dmxl_txbuf_readpos[dmxl_port]++;
          u->DR = dmxl_txbuf[dmxl_port][dmxl_txbuf_readpos[dmxl_port]];
        }
        else if (u->SR & USART_SR_TC) // last byte must fully complete
        {
          u->CR1 &= ~USART_CR1_TE; // disable the transmitter
 8001ff6:	f022 0208 	bic.w	r2, r2, #8
 8001ffa:	0412      	lsls	r2, r2, #16
 8001ffc:	0c12      	lsrs	r2, r2, #16
 8001ffe:	818a      	strh	r2, [r1, #12]
          u->CR1 |=  USART_CR1_RE; // re-enable the transmitter
 8002000:	898a      	ldrh	r2, [r1, #12]
 8002002:	b292      	uxth	r2, r2
 8002004:	f042 0204 	orr.w	r2, r2, #4
          dmxl_rx_start_time[dmxl_port] = SYSTIME;
 8002008:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
          u->DR = dmxl_txbuf[dmxl_port][dmxl_txbuf_readpos[dmxl_port]];
        }
        else if (u->SR & USART_SR_TC) // last byte must fully complete
        {
          u->CR1 &= ~USART_CR1_TE; // disable the transmitter
          u->CR1 |=  USART_CR1_RE; // re-enable the transmitter
 800200c:	818a      	strh	r2, [r1, #12]
          dmxl_rx_start_time[dmxl_port] = SYSTIME;
 800200e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002010:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          g_dmxl_ports[dmxl_port].comms_state = DMXL_CS_POLL_STATE;
 8002014:	2202      	movs	r2, #2
 8002016:	7422      	strb	r2, [r4, #16]
          *ps = DPS_POLL_RX;
 8002018:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
 800201c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002020:	4606      	mov	r6, r0
        }
      }
      break;
    case DPS_POLL_RX:
      dmxl_process_ring(dmxl_port);
 8002022:	f7ff fc2d 	bl	8001880 <dmxl_process_ring>
      if (g_dmxl_ports[dmxl_port].comms_state != DMXL_CS_POLL_STATE)
 8002026:	7c23      	ldrb	r3, [r4, #16]
 8002028:	2b02      	cmp	r3, #2
        *ps = DPS_DONE; // hooray, we received a full state message
 800202a:	bf1c      	itt	ne
 800202c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8002030:	f845 3026 	strne.w	r3, [r5, r6, lsl #2]
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 10000) // wait at most 10ms
 8002034:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002038:	4b35      	ldr	r3, [pc, #212]	; (8002110 <dmxl_poll_nonblocking_tick+0x180>)
 800203a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800203c:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8002040:	f242 7310 	movw	r3, #10000	; 0x2710
 8002044:	1a52      	subs	r2, r2, r1
 8002046:	429a      	cmp	r2, r3
 8002048:	d9c6      	bls.n	8001fd8 <dmxl_poll_nonblocking_tick+0x48>
        *ps = DPS_DONE; // time to give up. gotta know when to fold em
 800204a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800204e:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
 8002052:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    case DPS_DONE: // poll start
      dmxl_rx_start_time[dmxl_port] = SYSTIME;
      *ps = DPS_WAIT; // give any outbound command some time to be processed
      break;
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
 8002056:	482e      	ldr	r0, [pc, #184]	; (8002110 <dmxl_poll_nonblocking_tick+0x180>)
 8002058:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800205c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8002060:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002062:	f241 3088 	movw	r0, #5000	; 0x1388
 8002066:	1b12      	subs	r2, r2, r4
 8002068:	4282      	cmp	r2, r0
 800206a:	d9b5      	bls.n	8001fd8 <dmxl_poll_nonblocking_tick+0x48>
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
 800206c:	898a      	ldrh	r2, [r1, #12]
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
 800206e:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 8002118 <dmxl_poll_nonblocking_tick+0x188>
      *ps = DPS_WAIT; // give any outbound command some time to be processed
      break;
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
 8002072:	f022 0204 	bic.w	r2, r2, #4
 8002076:	0412      	lsls	r2, r2, #16
 8002078:	0c12      	lsrs	r2, r2, #16
 800207a:	818a      	strh	r2, [r1, #12]
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
 800207c:	898e      	ldrh	r6, [r1, #12]
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
 800207e:	021f      	lsls	r7, r3, #8
      break;
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
 8002080:	b2b6      	uxth	r6, r6
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
 8002082:	eb0e 0207 	add.w	r2, lr, r7
      break;
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
 8002086:	f046 0608 	orr.w	r6, r6, #8
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
        dmxl_txbuf[dmxl_port][1] = 0xff; // more header
        dmxl_txbuf[dmxl_port][2] = DMXL_DEFAULT_ID;
 800208a:	f04f 0b01 	mov.w	fp, #1
      break;
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
 800208e:	818e      	strh	r6, [r1, #12]
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
 8002090:	24ff      	movs	r4, #255	; 0xff
        dmxl_txbuf[dmxl_port][1] = 0xff; // more header
        dmxl_txbuf[dmxl_port][2] = DMXL_DEFAULT_ID;
        dmxl_txbuf[dmxl_port][3] = 4;  // packet length = 4
 8002092:	f04f 0a04 	mov.w	sl, #4
        dmxl_txbuf[dmxl_port][4] = 2;  // instruction: "read data"
 8002096:	f04f 0902 	mov.w	r9, #2
        dmxl_txbuf[dmxl_port][5] = 36; // start address
 800209a:	f04f 0824 	mov.w	r8, #36	; 0x24
        dmxl_txbuf[dmxl_port][6] = 8;  // number of bytes to read
 800209e:	f04f 0c08 	mov.w	ip, #8
 80020a2:	eb07 000b 	add.w	r0, r7, fp
 80020a6:	1dbe      	adds	r6, r7, #6
    case DPS_WAIT:
      if (SYSTIME - dmxl_rx_start_time[dmxl_port] > 5000)
      {
        u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
        u->CR1 |=  USART_CR1_TE; // enable the transmitter
        dmxl_txbuf[dmxl_port][0] = 0xff; // header
 80020a8:	f80e 4007 	strb.w	r4, [lr, r7]
 80020ac:	4470      	add	r0, lr
        dmxl_txbuf[dmxl_port][1] = 0xff; // more header
 80020ae:	7054      	strb	r4, [r2, #1]
        dmxl_txbuf[dmxl_port][2] = DMXL_DEFAULT_ID;
 80020b0:	f882 b002 	strb.w	fp, [r2, #2]
        dmxl_txbuf[dmxl_port][3] = 4;  // packet length = 4
 80020b4:	f882 a003 	strb.w	sl, [r2, #3]
        dmxl_txbuf[dmxl_port][4] = 2;  // instruction: "read data"
 80020b8:	f882 9004 	strb.w	r9, [r2, #4]
        dmxl_txbuf[dmxl_port][5] = 36; // start address
 80020bc:	f882 8005 	strb.w	r8, [r2, #5]
        dmxl_txbuf[dmxl_port][6] = 8;  // number of bytes to read
 80020c0:	f882 c006 	strb.w	ip, [r2, #6]
 80020c4:	4476      	add	r6, lr
        uint8_t csum = 0;
 80020c6:	2200      	movs	r2, #0
        for (int i = 2; i < 7; i++)
          csum += dmxl_txbuf[dmxl_port][i];
 80020c8:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80020cc:	4422      	add	r2, r4
        dmxl_txbuf[dmxl_port][3] = 4;  // packet length = 4
        dmxl_txbuf[dmxl_port][4] = 2;  // instruction: "read data"
        dmxl_txbuf[dmxl_port][5] = 36; // start address
        dmxl_txbuf[dmxl_port][6] = 8;  // number of bytes to read
        uint8_t csum = 0;
        for (int i = 2; i < 7; i++)
 80020ce:	42b0      	cmp	r0, r6
          csum += dmxl_txbuf[dmxl_port][i];
 80020d0:	b2d2      	uxtb	r2, r2
        dmxl_txbuf[dmxl_port][3] = 4;  // packet length = 4
        dmxl_txbuf[dmxl_port][4] = 2;  // instruction: "read data"
        dmxl_txbuf[dmxl_port][5] = 36; // start address
        dmxl_txbuf[dmxl_port][6] = 8;  // number of bytes to read
        uint8_t csum = 0;
        for (int i = 2; i < 7; i++)
 80020d2:	d1f9      	bne.n	80020c8 <dmxl_poll_nonblocking_tick+0x138>
          csum += dmxl_txbuf[dmxl_port][i];
        dmxl_txbuf[dmxl_port][7] = ~csum;
 80020d4:	eb0e 0007 	add.w	r0, lr, r7
 80020d8:	43d2      	mvns	r2, r2
 80020da:	71c2      	strb	r2, [r0, #7]
        u->DR; // read any garbage on the RX register
        u->DR = dmxl_txbuf[dmxl_port][0]; // kick it off
 80020dc:	f81e 2007 	ldrb.w	r2, [lr, r7]
        dmxl_txbuf_readpos[dmxl_port] = 0;
 80020e0:	480c      	ldr	r0, [pc, #48]	; (8002114 <dmxl_poll_nonblocking_tick+0x184>)
        dmxl_txbuf[dmxl_port][6] = 8;  // number of bytes to read
        uint8_t csum = 0;
        for (int i = 2; i < 7; i++)
          csum += dmxl_txbuf[dmxl_port][i];
        dmxl_txbuf[dmxl_port][7] = ~csum;
        u->DR; // read any garbage on the RX register
 80020e2:	888c      	ldrh	r4, [r1, #4]
        u->DR = dmxl_txbuf[dmxl_port][0]; // kick it off
 80020e4:	808a      	strh	r2, [r1, #4]
        dmxl_txbuf_readpos[dmxl_port] = 0;
 80020e6:	2100      	movs	r1, #0
 80020e8:	54c1      	strb	r1, [r0, r3]
        *ps = DPS_POLL_TX;
 80020ea:	2201      	movs	r2, #1
 80020ec:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
 80020f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    case DPS_POLL_TX:
      if (u->SR & USART_SR_TXE) // is there room in the TX buffer ?
      {
        if (dmxl_txbuf_readpos[dmxl_port] < 7)
        {
          dmxl_txbuf_readpos[dmxl_port]++;
 80020f4:	3201      	adds	r2, #1
 80020f6:	b2d2      	uxtb	r2, r2
          u->DR = dmxl_txbuf[dmxl_port][dmxl_txbuf_readpos[dmxl_port]];
 80020f8:	eb02 2403 	add.w	r4, r2, r3, lsl #8
 80020fc:	4d06      	ldr	r5, [pc, #24]	; (8002118 <dmxl_poll_nonblocking_tick+0x188>)
    case DPS_POLL_TX:
      if (u->SR & USART_SR_TXE) // is there room in the TX buffer ?
      {
        if (dmxl_txbuf_readpos[dmxl_port] < 7)
        {
          dmxl_txbuf_readpos[dmxl_port]++;
 80020fe:	54c2      	strb	r2, [r0, r3]
          u->DR = dmxl_txbuf[dmxl_port][dmxl_txbuf_readpos[dmxl_port]];
 8002100:	5d2b      	ldrb	r3, [r5, r4]
 8002102:	808b      	strh	r3, [r1, #4]
 8002104:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002108:	2000000c 	.word	0x2000000c
 800210c:	2000006c 	.word	0x2000006c
 8002110:	2000ffe0 	.word	0x2000ffe0
 8002114:	2000f3d0 	.word	0x2000f3d0
 8002118:	2000f7dc 	.word	0x2000f7dc

0800211c <dmxl_all_available>:
      break;
  }
}

bool dmxl_all_available()
{
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <dmxl_all_available+0x1c>)
 800211e:	f103 0110 	add.w	r1, r3, #16
  for (int i = 0; i < NUM_DMXL; i++)
    if (dmxl_poll_states[i] != DPS_DONE)
 8002122:	f853 2b04 	ldr.w	r2, [r3], #4
 8002126:	3201      	adds	r2, #1
 8002128:	d103      	bne.n	8002132 <dmxl_all_available+0x16>
  }
}

bool dmxl_all_available()
{
  for (int i = 0; i < NUM_DMXL; i++)
 800212a:	428b      	cmp	r3, r1
 800212c:	d1f9      	bne.n	8002122 <dmxl_all_available+0x6>
    if (dmxl_poll_states[i] != DPS_DONE)
      return false;
  return true;
 800212e:	2001      	movs	r0, #1
 8002130:	4770      	bx	lr

bool dmxl_all_available()
{
  for (int i = 0; i < NUM_DMXL; i++)
    if (dmxl_poll_states[i] != DPS_DONE)
      return false;
 8002132:	2000      	movs	r0, #0
  return true;
}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	2000006c 	.word	0x2000006c

0800213c <fan_init>:

#define PORTD_FAN_EN 15

void fan_init()
{
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800213c:	4905      	ldr	r1, [pc, #20]	; (8002154 <fan_init+0x18>)
  GPIOD->MODER |= 1 << (PORTD_FAN_EN * 2); // set as output pin
 800213e:	4a06      	ldr	r2, [pc, #24]	; (8002158 <fan_init+0x1c>)

#define PORTD_FAN_EN 15

void fan_init()
{
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8002140:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002142:	f043 0308 	orr.w	r3, r3, #8
 8002146:	630b      	str	r3, [r1, #48]	; 0x30
  GPIOD->MODER |= 1 << (PORTD_FAN_EN * 2); // set as output pin
 8002148:	6813      	ldr	r3, [r2, #0]
 800214a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	40020c00 	.word	0x40020c00

0800215c <fan_on>:
}

void fan_on()
{
  GPIOD->BSRRL |= 1 << PORTD_FAN_EN;
 800215c:	4a04      	ldr	r2, [pc, #16]	; (8002170 <fan_on+0x14>)
 800215e:	8b13      	ldrh	r3, [r2, #24]
 8002160:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002164:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002168:	b29b      	uxth	r3, r3
 800216a:	8313      	strh	r3, [r2, #24]
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40020c00 	.word	0x40020c00

08002174 <fan_off>:
}

void fan_off()
{
  GPIOD->BSRRH |= 1 << PORTD_FAN_EN;
 8002174:	4a04      	ldr	r2, [pc, #16]	; (8002188 <fan_off+0x14>)
 8002176:	8b53      	ldrh	r3, [r2, #26]
 8002178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800217c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002180:	b29b      	uxth	r3, r3
 8002182:	8353      	strh	r3, [r2, #26]
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40020c00 	.word	0x40020c00

0800218c <tactile_bridge_spi_txrx.part.0>:
  const uint8_t reg_val = rxd[2];
  //printf("spi reg 0x%02x = 0x%02x\r\n", reg_idx, reg_val);
  return reg_val;
}

static void tactile_bridge_spi_txrx(const uint8_t bridge_idx,
 800218c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (bridge_idx > 1)
    return;
  SPI_TypeDef *spi;
  GPIO_TypeDef *cs_gpio;
  uint32_t cs_pin_mask;
  if (bridge_idx == 0)
 800218e:	4d2e      	ldr	r5, [pc, #184]	; (8002248 <tactile_bridge_spi_txrx.part.0+0xbc>)
 8002190:	4c2e      	ldr	r4, [pc, #184]	; (800224c <tactile_bridge_spi_txrx.part.0+0xc0>)
 8002192:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 8002254 <tactile_bridge_spi_txrx.part.0+0xc8>
 8002196:	4f2e      	ldr	r7, [pc, #184]	; (8002250 <tactile_bridge_spi_txrx.part.0+0xc4>)
 8002198:	2800      	cmp	r0, #0
 800219a:	bf08      	it	eq
 800219c:	462c      	moveq	r4, r5
  const uint8_t reg_val = rxd[2];
  //printf("spi reg 0x%02x = 0x%02x\r\n", reg_idx, reg_val);
  return reg_val;
}

static void tactile_bridge_spi_txrx(const uint8_t bridge_idx,
 800219e:	b085      	sub	sp, #20
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
  }
  // assert CS
  cs_gpio->BSRRH = cs_pin_mask;
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
 80021a0:	f04f 0000 	mov.w	r0, #0
  if (bridge_idx > 1)
    return;
  SPI_TypeDef *spi;
  GPIO_TypeDef *cs_gpio;
  uint32_t cs_pin_mask;
  if (bridge_idx == 0)
 80021a4:	bf0c      	ite	eq
 80021a6:	2510      	moveq	r5, #16
 80021a8:	f44f 7500 	movne.w	r5, #512	; 0x200
    spi = SPI2;
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
  }
  // assert CS
  cs_gpio->BSRRH = cs_pin_mask;
 80021ac:	8365      	strh	r5, [r4, #26]
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
 80021ae:	9000      	str	r0, [sp, #0]
 80021b0:	9e00      	ldr	r6, [sp, #0]
  if (bridge_idx > 1)
    return;
  SPI_TypeDef *spi;
  GPIO_TypeDef *cs_gpio;
  uint32_t cs_pin_mask;
  if (bridge_idx == 0)
 80021b2:	bf0c      	ite	eq
 80021b4:	4670      	moveq	r0, lr
 80021b6:	4638      	movne	r0, r7
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
  }
  // assert CS
  cs_gpio->BSRRH = cs_pin_mask;
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
 80021b8:	2e09      	cmp	r6, #9
 80021ba:	dc05      	bgt.n	80021c8 <tactile_bridge_spi_txrx.part.0+0x3c>
 80021bc:	9e00      	ldr	r6, [sp, #0]
 80021be:	3601      	adds	r6, #1
 80021c0:	9600      	str	r6, [sp, #0]
 80021c2:	9e00      	ldr	r6, [sp, #0]
 80021c4:	2e09      	cmp	r6, #9
 80021c6:	ddf9      	ble.n	80021bc <tactile_bridge_spi_txrx.part.0+0x30>
  spi->DR; // clear rx buffer
 80021c8:	8986      	ldrh	r6, [r0, #12]
  for (uint8_t i = 0; i < txrx_len; i++)
 80021ca:	b321      	cbz	r1, 8002216 <tactile_bridge_spi_txrx.part.0+0x8a>
 80021cc:	1e4f      	subs	r7, r1, #1
 80021ce:	fa52 f787 	uxtab	r7, r2, r7
 80021d2:	1e51      	subs	r1, r2, #1
 80021d4:	461e      	mov	r6, r3
    while (spi->SR & SPI_SR_BSY) { }
    if (rxd)
      rxd[i] = spi->DR;
    else
      spi->DR;
    for (volatile int i = 0; i < 150; i++) { } // wait between SPI bytes
 80021d6:	f04f 0e00 	mov.w	lr, #0
  cs_gpio->BSRRH = cs_pin_mask;
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
  spi->DR; // clear rx buffer
  for (uint8_t i = 0; i < txrx_len; i++)
  {
    spi->DR = txd[i]; // read internal register command
 80021da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80021de:	8182      	strh	r2, [r0, #12]
    while (!(spi->SR & SPI_SR_TXE)) { } // wait for buffer room
 80021e0:	8902      	ldrh	r2, [r0, #8]
 80021e2:	0792      	lsls	r2, r2, #30
 80021e4:	d5fc      	bpl.n	80021e0 <tactile_bridge_spi_txrx.part.0+0x54>
    while (!(spi->SR & SPI_SR_RXNE)) { }
 80021e6:	8902      	ldrh	r2, [r0, #8]
 80021e8:	07d2      	lsls	r2, r2, #31
 80021ea:	d5fc      	bpl.n	80021e6 <tactile_bridge_spi_txrx.part.0+0x5a>
    while (spi->SR & SPI_SR_BSY) { }
 80021ec:	8902      	ldrh	r2, [r0, #8]
 80021ee:	0612      	lsls	r2, r2, #24
 80021f0:	d4fc      	bmi.n	80021ec <tactile_bridge_spi_txrx.part.0+0x60>
    if (rxd)
      rxd[i] = spi->DR;
 80021f2:	8982      	ldrh	r2, [r0, #12]
  {
    spi->DR = txd[i]; // read internal register command
    while (!(spi->SR & SPI_SR_TXE)) { } // wait for buffer room
    while (!(spi->SR & SPI_SR_RXNE)) { }
    while (spi->SR & SPI_SR_BSY) { }
    if (rxd)
 80021f4:	b103      	cbz	r3, 80021f8 <tactile_bridge_spi_txrx.part.0+0x6c>
      rxd[i] = spi->DR;
 80021f6:	7032      	strb	r2, [r6, #0]
    else
      spi->DR;
    for (volatile int i = 0; i < 150; i++) { } // wait between SPI bytes
 80021f8:	f8cd e004 	str.w	lr, [sp, #4]
 80021fc:	9a01      	ldr	r2, [sp, #4]
 80021fe:	2a95      	cmp	r2, #149	; 0x95
 8002200:	dc05      	bgt.n	800220e <tactile_bridge_spi_txrx.part.0+0x82>
 8002202:	9a01      	ldr	r2, [sp, #4]
 8002204:	3201      	adds	r2, #1
 8002206:	9201      	str	r2, [sp, #4]
 8002208:	9a01      	ldr	r2, [sp, #4]
 800220a:	2a95      	cmp	r2, #149	; 0x95
 800220c:	ddf9      	ble.n	8002202 <tactile_bridge_spi_txrx.part.0+0x76>
  }
  // assert CS
  cs_gpio->BSRRH = cs_pin_mask;
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
  spi->DR; // clear rx buffer
  for (uint8_t i = 0; i < txrx_len; i++)
 800220e:	42b9      	cmp	r1, r7
 8002210:	f106 0601 	add.w	r6, r6, #1
 8002214:	d1e1      	bne.n	80021da <tactile_bridge_spi_txrx.part.0+0x4e>
      rxd[i] = spi->DR;
    else
      spi->DR;
    for (volatile int i = 0; i < 150; i++) { } // wait between SPI bytes
  }
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
 8002216:	2300      	movs	r3, #0
 8002218:	9302      	str	r3, [sp, #8]
 800221a:	9b02      	ldr	r3, [sp, #8]
 800221c:	2b09      	cmp	r3, #9
 800221e:	dc05      	bgt.n	800222c <tactile_bridge_spi_txrx.part.0+0xa0>
 8002220:	9b02      	ldr	r3, [sp, #8]
 8002222:	3301      	adds	r3, #1
 8002224:	9302      	str	r3, [sp, #8]
 8002226:	9b02      	ldr	r3, [sp, #8]
 8002228:	2b09      	cmp	r3, #9
 800222a:	ddf9      	ble.n	8002220 <tactile_bridge_spi_txrx.part.0+0x94>
  cs_gpio->BSRRL = cs_pin_mask;
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
 800222c:	2300      	movs	r3, #0
    else
      spi->DR;
    for (volatile int i = 0; i < 150; i++) { } // wait between SPI bytes
  }
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
  cs_gpio->BSRRL = cs_pin_mask;
 800222e:	8325      	strh	r5, [r4, #24]
  for (volatile int i = 0; i < 10; i++) { } // la di dah...
 8002230:	9303      	str	r3, [sp, #12]
 8002232:	9b03      	ldr	r3, [sp, #12]
 8002234:	2b09      	cmp	r3, #9
 8002236:	dc05      	bgt.n	8002244 <tactile_bridge_spi_txrx.part.0+0xb8>
 8002238:	9b03      	ldr	r3, [sp, #12]
 800223a:	3301      	adds	r3, #1
 800223c:	9303      	str	r3, [sp, #12]
 800223e:	9b03      	ldr	r3, [sp, #12]
 8002240:	2b09      	cmp	r3, #9
 8002242:	ddf9      	ble.n	8002238 <tactile_bridge_spi_txrx.part.0+0xac>
}
 8002244:	b005      	add	sp, #20
 8002246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002248:	40020000 	.word	0x40020000
 800224c:	40020400 	.word	0x40020400
 8002250:	40003800 	.word	0x40003800
 8002254:	40013000 	.word	0x40013000

08002258 <tactile_bridge_read_reg>:
  tactile_bridge_spi_txrx(bridge_idx, 3, txd, NULL);
}

static uint8_t tactile_bridge_read_reg(const uint8_t bridge_idx,
                                       const uint8_t reg_idx)
{
 8002258:	b500      	push	{lr}
 800225a:	b083      	sub	sp, #12
  uint8_t rxd[3] = {0};
 800225c:	2300      	movs	r3, #0
  uint8_t txd[3] = {0x21, reg_idx, 0};
 800225e:	2221      	movs	r2, #33	; 0x21
static void tactile_bridge_spi_txrx(const uint8_t bridge_idx,
                                    const uint8_t txrx_len,
                                    const uint8_t *txd,
                                    uint8_t *rxd)
{
  if (bridge_idx > 1)
 8002260:	2801      	cmp	r0, #1

static uint8_t tactile_bridge_read_reg(const uint8_t bridge_idx,
                                       const uint8_t reg_idx)
{
  uint8_t rxd[3] = {0};
  uint8_t txd[3] = {0x21, reg_idx, 0};
 8002262:	f88d 1005 	strb.w	r1, [sp, #5]
}

static uint8_t tactile_bridge_read_reg(const uint8_t bridge_idx,
                                       const uint8_t reg_idx)
{
  uint8_t rxd[3] = {0};
 8002266:	f8ad 3000 	strh.w	r3, [sp]
 800226a:	f88d 3002 	strb.w	r3, [sp, #2]
  uint8_t txd[3] = {0x21, reg_idx, 0};
 800226e:	f88d 3006 	strb.w	r3, [sp, #6]
 8002272:	f88d 2004 	strb.w	r2, [sp, #4]
static void tactile_bridge_spi_txrx(const uint8_t bridge_idx,
                                    const uint8_t txrx_len,
                                    const uint8_t *txd,
                                    uint8_t *rxd)
{
  if (bridge_idx > 1)
 8002276:	d903      	bls.n	8002280 <tactile_bridge_read_reg+0x28>
 8002278:	4618      	mov	r0, r3
  uint8_t txd[3] = {0x21, reg_idx, 0};
  tactile_bridge_spi_txrx(bridge_idx, 3, txd, rxd);
  const uint8_t reg_val = rxd[2];
  //printf("spi reg 0x%02x = 0x%02x\r\n", reg_idx, reg_val);
  return reg_val;
}
 800227a:	b003      	add	sp, #12
 800227c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002280:	2103      	movs	r1, #3
 8002282:	aa01      	add	r2, sp, #4
 8002284:	466b      	mov	r3, sp
 8002286:	f7ff ff81 	bl	800218c <tactile_bridge_spi_txrx.part.0>
 800228a:	f89d 0002 	ldrb.w	r0, [sp, #2]
 800228e:	b003      	add	sp, #12
 8002290:	f85d fb04 	ldr.w	pc, [sp], #4

08002294 <tactile_i2c_async_start.part.1>:
//
// Examples:
//     tactile_i2c_async_start(tp, BCAST_ENABLE_ADDR, NULL, 0);
//     tactile_i2c_async_start(tp, BCAST_DISABLE_ADDR, NULL, 1);
//#########################################################################################
void tactile_i2c_async_start(const uint8_t port, const uint8_t address, uint8_t *data, const uint8_t data_len)
 8002294:	b538      	push	{r3, r4, r5, lr}
 8002296:	4604      	mov	r4, r0
{
  if (port >= NUM_TACTILE_PORTS)
    return; // bogus

  g_tactile_i2c_async_address[port]  = address;
 8002298:	4d21      	ldr	r5, [pc, #132]	; (8002320 <tactile_i2c_async_start.part.1+0x8c>)
  g_tactile_i2c_async_data_len[port] = data_len;
 800229a:	4822      	ldr	r0, [pc, #136]	; (8002324 <tactile_i2c_async_start.part.1+0x90>)
void tactile_i2c_async_start(const uint8_t port, const uint8_t address, uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS)
    return; // bogus

  g_tactile_i2c_async_address[port]  = address;
 800229c:	5529      	strb	r1, [r5, r4]
  g_tactile_i2c_async_data_len[port] = data_len;
 800229e:	5503      	strb	r3, [r0, r4]

  // allocating data
  if (data)
    memcpy(g_tactile_i2c_async_data[port], data, data_len);
 80022a0:	4611      	mov	r1, r2
 80022a2:	4821      	ldr	r0, [pc, #132]	; (8002328 <tactile_i2c_async_start.part.1+0x94>)

  g_tactile_i2c_async_address[port]  = address;
  g_tactile_i2c_async_data_len[port] = data_len;

  // allocating data
  if (data)
 80022a4:	2a00      	cmp	r2, #0
 80022a6:	d035      	beq.n	8002314 <tactile_i2c_async_start.part.1+0x80>
    memcpy(g_tactile_i2c_async_data[port], data, data_len);
 80022a8:	461a      	mov	r2, r3
 80022aa:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 80022ae:	f001 fa17 	bl	80036e0 <memcpy>
  else
    memset(g_tactile_i2c_async_data[port], 0, data_len);
  g_tactile_i2c_async_data_txrx_idx[port] = 0; // resetting data index
 80022b2:	4a1e      	ldr	r2, [pc, #120]	; (800232c <tactile_i2c_async_start.part.1+0x98>)
 80022b4:	2300      	movs	r3, #0


  //  direct port
  //#########################################################################################
  if (port == 0 || port == 1)
 80022b6:	2c01      	cmp	r4, #1
  // allocating data
  if (data)
    memcpy(g_tactile_i2c_async_data[port], data, data_len);
  else
    memset(g_tactile_i2c_async_data[port], 0, data_len);
  g_tactile_i2c_async_data_txrx_idx[port] = 0; // resetting data index
 80022b8:	5513      	strb	r3, [r2, r4]


  //  direct port
  //#########################################################################################
  if (port == 0 || port == 1)
 80022ba:	d90a      	bls.n	80022d2 <tactile_i2c_async_start.part.1+0x3e>
    i2c->SR1 &= ~I2C_SR1_AF;
    g_tactile_internal_i2c_status[port] = TATS_START;
  }
  //  use a SPI bridge
  //#########################################################################################
  else if (port == 2 || port == 3)
 80022bc:	1ea2      	subs	r2, r4, #2
 80022be:	b2d1      	uxtb	r1, r2
 80022c0:	2901      	cmp	r1, #1
 80022c2:	d91a      	bls.n	80022fa <tactile_i2c_async_start.part.1+0x66>
    cs_gpio->BSRRH = cs_pin_mask;
    g_tactile_bridged_i2c_status[bridge] = TBPS_REQUEST_CS_LOW;
  }

  // getting start time
  g_tactile_i2c_async_start_us[port] = SYSTIME;
 80022c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <tactile_i2c_async_start.part.1+0x9c>)
 80022ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022cc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80022d0:	bd38      	pop	{r3, r4, r5, pc}
  {
    I2C_TypeDef *i2c;
    if (port == 0)
      i2c = I2C1;
    else
      i2c = I2C3;
 80022d2:	4a18      	ldr	r2, [pc, #96]	; (8002334 <tactile_i2c_async_start.part.1+0xa0>)
 80022d4:	4918      	ldr	r1, [pc, #96]	; (8002338 <tactile_i2c_async_start.part.1+0xa4>)
    i2c->CR1 |=  I2C_CR1_START;
    i2c->SR1 &= ~I2C_SR1_AF;
    g_tactile_internal_i2c_status[port] = TATS_START;
 80022d6:	4819      	ldr	r0, [pc, #100]	; (800233c <tactile_i2c_async_start.part.1+0xa8>)
  {
    I2C_TypeDef *i2c;
    if (port == 0)
      i2c = I2C1;
    else
      i2c = I2C3;
 80022d8:	429c      	cmp	r4, r3
 80022da:	bf08      	it	eq
 80022dc:	4611      	moveq	r1, r2
    i2c->CR1 |=  I2C_CR1_START;
 80022de:	880a      	ldrh	r2, [r1, #0]
 80022e0:	b292      	uxth	r2, r2
 80022e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e6:	800a      	strh	r2, [r1, #0]
    i2c->SR1 &= ~I2C_SR1_AF;
 80022e8:	8a8a      	ldrh	r2, [r1, #20]
    g_tactile_internal_i2c_status[port] = TATS_START;
 80022ea:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
    if (port == 0)
      i2c = I2C1;
    else
      i2c = I2C3;
    i2c->CR1 |=  I2C_CR1_START;
    i2c->SR1 &= ~I2C_SR1_AF;
 80022ee:	f422 6380 	bic.w	r3, r2, #1024	; 0x400
 80022f2:	041b      	lsls	r3, r3, #16
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	828b      	strh	r3, [r1, #20]
 80022f8:	e7e4      	b.n	80022c4 <tactile_i2c_async_start.part.1+0x30>
  else if (port == 2 || port == 3)
  {
    const uint_fast8_t bridge = port - 2;
    GPIO_TypeDef *cs_gpio = NULL;
    uint32_t cs_pin_mask = 0;
    if (bridge == 0)
 80022fa:	4811      	ldr	r0, [pc, #68]	; (8002340 <tactile_i2c_async_start.part.1+0xac>)
 80022fc:	4911      	ldr	r1, [pc, #68]	; (8002344 <tactile_i2c_async_start.part.1+0xb0>)
      cs_gpio = GPIOB;
      cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
    }
    // assert CS
    cs_gpio->BSRRH = cs_pin_mask;
    g_tactile_bridged_i2c_status[bridge] = TBPS_REQUEST_CS_LOW;
 80022fe:	4d12      	ldr	r5, [pc, #72]	; (8002348 <tactile_i2c_async_start.part.1+0xb4>)
  else if (port == 2 || port == 3)
  {
    const uint_fast8_t bridge = port - 2;
    GPIO_TypeDef *cs_gpio = NULL;
    uint32_t cs_pin_mask = 0;
    if (bridge == 0)
 8002300:	2a00      	cmp	r2, #0
 8002302:	bf16      	itet	ne
 8002304:	4601      	movne	r1, r0
 8002306:	2010      	moveq	r0, #16
 8002308:	f44f 7000 	movne.w	r0, #512	; 0x200
      cs_gpio = GPIOB;
      cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
    }
    // assert CS
    cs_gpio->BSRRH = cs_pin_mask;
    g_tactile_bridged_i2c_status[bridge] = TBPS_REQUEST_CS_LOW;
 800230c:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    {
      cs_gpio = GPIOB;
      cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
    }
    // assert CS
    cs_gpio->BSRRH = cs_pin_mask;
 8002310:	8348      	strh	r0, [r1, #26]
 8002312:	e7d7      	b.n	80022c4 <tactile_i2c_async_start.part.1+0x30>

  // allocating data
  if (data)
    memcpy(g_tactile_i2c_async_data[port], data, data_len);
  else
    memset(g_tactile_i2c_async_data[port], 0, data_len);
 8002314:	461a      	mov	r2, r3
 8002316:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 800231a:	f001 fa7b 	bl	8003814 <memset>
 800231e:	e7c8      	b.n	80022b2 <tactile_i2c_async_start.part.1+0x1e>
 8002320:	20010448 	.word	0x20010448
 8002324:	2001045c 	.word	0x2001045c
 8002328:	2000fff0 	.word	0x2000fff0
 800232c:	20010424 	.word	0x20010424
 8002330:	2001044c 	.word	0x2001044c
 8002334:	40005400 	.word	0x40005400
 8002338:	40005c00 	.word	0x40005c00
 800233c:	20010400 	.word	0x20010400
 8002340:	40020400 	.word	0x40020400
 8002344:	40020000 	.word	0x40020000
 8002348:	20010408 	.word	0x20010408

0800234c <tactile_internal_i2c_async_tick.part.2>:
//               g_tactile_i2c_async_data
//               g_tactile_i2c_async_start_us
//               g_tactile_internal_i2c_status

//#########################################################################################
void tactile_internal_i2c_async_tick(const uint_fast8_t port)
 800234c:	b5f0      	push	{r4, r5, r6, r7, lr}
     if (port == 0 && ++tat_cnt % 50000 == 0)
     printf("i2c async tick port %d tats %d sr = 0x%08x\r\n",
     port, (int)*tats, (unsigned)i2c->SR1);
   */

  switch (*status)
 800234e:	4c61      	ldr	r4, [pc, #388]	; (80024d4 <tactile_internal_i2c_async_tick.part.2+0x188>)
  // defining the port
  I2C_TypeDef *i2c;
  if (port == 0)
    i2c = I2C1;
  else
    i2c = I2C3;
 8002350:	4961      	ldr	r1, [pc, #388]	; (80024d8 <tactile_internal_i2c_async_tick.part.2+0x18c>)
 8002352:	4b62      	ldr	r3, [pc, #392]	; (80024dc <tactile_internal_i2c_async_tick.part.2+0x190>)
     if (port == 0 && ++tat_cnt % 50000 == 0)
     printf("i2c async tick port %d tats %d sr = 0x%08x\r\n",
     port, (int)*tats, (unsigned)i2c->SR1);
   */

  switch (*status)
 8002354:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
  // defining the port
  I2C_TypeDef *i2c;
  if (port == 0)
    i2c = I2C1;
  else
    i2c = I2C3;
 8002358:	2800      	cmp	r0, #0
 800235a:	bf08      	it	eq
 800235c:	460b      	moveq	r3, r1
     if (port == 0 && ++tat_cnt % 50000 == 0)
     printf("i2c async tick port %d tats %d sr = 0x%08x\r\n",
     port, (int)*tats, (unsigned)i2c->SR1);
   */

  switch (*status)
 800235e:	2a05      	cmp	r2, #5
 8002360:	f200 808f 	bhi.w	8002482 <tactile_internal_i2c_async_tick.part.2+0x136>
 8002364:	e8df f002 	tbb	[pc, r2]
 8002368:	64462016 	.word	0x64462016
 800236c:	0380      	.short	0x0380
        g_tactile_i2c_async_start_us[port] = SYSTIME;
      }
      break;
    // Waits for 10us more and checks if there was error during the communication
    case TATS_STOP_WAIT:
      if (SYSTIME - g_tactile_i2c_async_start_us[port] > 10) // waits for 10us
 800236e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002372:	4a5b      	ldr	r2, [pc, #364]	; (80024e0 <tactile_internal_i2c_async_tick.part.2+0x194>)
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	2b0a      	cmp	r3, #10
 800237e:	f240 8085 	bls.w	800248c <tactile_internal_i2c_async_tick.part.2+0x140>
      {
        if (g_tactile_i2c_async_address_fail[port]) // if there was error on the bus
 8002382:	4b58      	ldr	r3, [pc, #352]	; (80024e4 <tactile_internal_i2c_async_tick.part.2+0x198>)
 8002384:	5c1b      	ldrb	r3, [r3, r0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d07b      	beq.n	8002482 <tactile_internal_i2c_async_tick.part.2+0x136>
          *status = TATS_DONE_FAIL;
 800238a:	f06f 0301 	mvn.w	r3, #1
 800238e:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 8002392:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (*status)
  {
    // Send Address
    //######################################################################################### 
    case TATS_START:
      if (i2c->SR1 & I2C_SR1_SB)
 8002394:	8a9a      	ldrh	r2, [r3, #20]
 8002396:	07d5      	lsls	r5, r2, #31
 8002398:	d578      	bpl.n	800248c <tactile_internal_i2c_async_tick.part.2+0x140>
      {
        // puts the address to be sent on the buffer using global variable
        i2c->DR = g_tactile_i2c_async_address[port];
 800239a:	4953      	ldr	r1, [pc, #332]	; (80024e8 <tactile_internal_i2c_async_tick.part.2+0x19c>)
        *status = TATS_ADDR;
 800239c:	2201      	movs	r2, #1
    //######################################################################################### 
    case TATS_START:
      if (i2c->SR1 & I2C_SR1_SB)
      {
        // puts the address to be sent on the buffer using global variable
        i2c->DR = g_tactile_i2c_async_address[port];
 800239e:	5c09      	ldrb	r1, [r1, r0]
 80023a0:	8219      	strh	r1, [r3, #16]
        *status = TATS_ADDR;
 80023a2:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
 80023a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      break;

    // 
    //######################################################################################### 
    case TATS_ADDR:
      if (i2c->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF))
 80023a8:	8a9a      	ldrh	r2, [r3, #20]
 80023aa:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80023ae:	f022 0201 	bic.w	r2, r2, #1
 80023b2:	0552      	lsls	r2, r2, #21
 80023b4:	0d52      	lsrs	r2, r2, #21
 80023b6:	2a00      	cmp	r2, #0
 80023b8:	d068      	beq.n	800248c <tactile_internal_i2c_async_tick.part.2+0x140>

        // stores the information in global variable 
        g_tactile_i2c_async_address_fail[port] = address_fail;

        // see if data is expected
        int no_payload = (0 == g_tactile_i2c_async_data_len[port]);
 80023ba:	494c      	ldr	r1, [pc, #304]	; (80024ec <tactile_internal_i2c_async_tick.part.2+0x1a0>)
    case TATS_ADDR:
      if (i2c->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF))
      {

        // checks if received acknowledge bit
        bool address_fail = (i2c->SR1 & I2C_SR1_AF) ? true : false;
 80023bc:	8a9a      	ldrh	r2, [r3, #20]

        // stores the information in global variable 
        g_tactile_i2c_async_address_fail[port] = address_fail;
 80023be:	4d49      	ldr	r5, [pc, #292]	; (80024e4 <tactile_internal_i2c_async_tick.part.2+0x198>)

        // see if data is expected
        int no_payload = (0 == g_tactile_i2c_async_data_len[port]);
 80023c0:	5c09      	ldrb	r1, [r1, r0]
    case TATS_ADDR:
      if (i2c->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF))
      {

        // checks if received acknowledge bit
        bool address_fail = (i2c->SR1 & I2C_SR1_AF) ? true : false;
 80023c2:	f3c2 2280 	ubfx	r2, r2, #10, #1

        // stores the information in global variable 
        g_tactile_i2c_async_address_fail[port] = address_fail;
 80023c6:	542a      	strb	r2, [r5, r0]

        // see if data is expected
        int no_payload = (0 == g_tactile_i2c_async_data_len[port]);
        
        if (no_payload) // if no data is expected to be sent or received
 80023c8:	2900      	cmp	r1, #0
 80023ca:	d060      	beq.n	800248e <tactile_internal_i2c_async_tick.part.2+0x142>
          i2c->CR1 |= I2C_CR1_STOP; // this seemed needed... not sure why now.
        i2c->SR2; // un-stretch clock by reading here (?)
 80023cc:	8b1d      	ldrh	r5, [r3, #24]

        // if there is data and received acknowledge bit
        if (!address_fail && !no_payload)
 80023ce:	bb32      	cbnz	r2, 800241e <tactile_internal_i2c_async_tick.part.2+0xd2>
        {
          if (!(g_tactile_i2c_async_address[port] & 0x1)) // if last bit is not 1
 80023d0:	4d45      	ldr	r5, [pc, #276]	; (80024e8 <tactile_internal_i2c_async_tick.part.2+0x19c>)
 80023d2:	5c2d      	ldrb	r5, [r5, r0]
 80023d4:	f015 0501 	ands.w	r5, r5, #1
 80023d8:	d06c      	beq.n	80024b4 <tactile_internal_i2c_async_tick.part.2+0x168>
            *status = TATS_WRITE;
          }
          else // if last bit is 1, meanig a read
          {
            // it's a read transaction
            g_tactile_i2c_async_data_txrx_idx[port] = 0;
 80023da:	4d45      	ldr	r5, [pc, #276]	; (80024f0 <tactile_internal_i2c_async_tick.part.2+0x1a4>)
 80023dc:	542a      	strb	r2, [r5, r0]

            if (g_tactile_i2c_async_data_len[port] == 1) // if just one byte to read
 80023de:	2901      	cmp	r1, #1
              i2c->CR1 &= ~I2C_CR1_ACK; // single-byte read
 80023e0:	881a      	ldrh	r2, [r3, #0]
          else // if last bit is 1, meanig a read
          {
            // it's a read transaction
            g_tactile_i2c_async_data_txrx_idx[port] = 0;

            if (g_tactile_i2c_async_data_len[port] == 1) // if just one byte to read
 80023e2:	d071      	beq.n	80024c8 <tactile_internal_i2c_async_tick.part.2+0x17c>
              i2c->CR1 &= ~I2C_CR1_ACK; // single-byte read
            else // if multiple bytes to read
              i2c->CR1 |=  I2C_CR1_ACK; // multi-byte read. Acknowledge enable
 80023e4:	b292      	uxth	r2, r2
 80023e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023ea:	801a      	strh	r2, [r3, #0]
            *status = TATS_READ;
 80023ec:	2303      	movs	r3, #3
 80023ee:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 80023f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      }
      break;
    // Writes data, single or multiple bytes
    //######################################################################################### 
    case TATS_WRITE:
      if (i2c->SR1 & (I2C_SR1_BTF | I2C_SR1_AF))
 80023f4:	8a9a      	ldrh	r2, [r3, #20]
 80023f6:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
 80023fa:	f022 0203 	bic.w	r2, r2, #3
 80023fe:	0552      	lsls	r2, r2, #21
 8002400:	0d52      	lsrs	r2, r2, #21
 8002402:	2a00      	cmp	r2, #0
 8002404:	d042      	beq.n	800248c <tactile_internal_i2c_async_tick.part.2+0x140>
      {
        if (i2c->SR1 & I2C_SR1_AF) // acknowledge not received
 8002406:	8a9a      	ldrh	r2, [r3, #20]
 8002408:	0551      	lsls	r1, r2, #21
 800240a:	d408      	bmi.n	800241e <tactile_internal_i2c_async_tick.part.2+0xd2>
          i2c->CR1 |= I2C_CR1_STOP;
          *status = TATS_STOP;
        }
        else // acknowledge received and byte transfer finished
        {
          g_tactile_i2c_async_data_txrx_idx[port]++;
 800240c:	4938      	ldr	r1, [pc, #224]	; (80024f0 <tactile_internal_i2c_async_tick.part.2+0x1a4>)
          if (g_tactile_i2c_async_data_txrx_idx[port] >= g_tactile_i2c_async_data_len[port]) // checks if there is more things to send
 800240e:	4d37      	ldr	r5, [pc, #220]	; (80024ec <tactile_internal_i2c_async_tick.part.2+0x1a0>)
          i2c->CR1 |= I2C_CR1_STOP;
          *status = TATS_STOP;
        }
        else // acknowledge received and byte transfer finished
        {
          g_tactile_i2c_async_data_txrx_idx[port]++;
 8002410:	5c0a      	ldrb	r2, [r1, r0]
          if (g_tactile_i2c_async_data_txrx_idx[port] >= g_tactile_i2c_async_data_len[port]) // checks if there is more things to send
 8002412:	5c2d      	ldrb	r5, [r5, r0]
          i2c->CR1 |= I2C_CR1_STOP;
          *status = TATS_STOP;
        }
        else // acknowledge received and byte transfer finished
        {
          g_tactile_i2c_async_data_txrx_idx[port]++;
 8002414:	3201      	adds	r2, #1
 8002416:	b2d2      	uxtb	r2, r2
          if (g_tactile_i2c_async_data_txrx_idx[port] >= g_tactile_i2c_async_data_len[port]) // checks if there is more things to send
 8002418:	4295      	cmp	r5, r2
          i2c->CR1 |= I2C_CR1_STOP;
          *status = TATS_STOP;
        }
        else // acknowledge received and byte transfer finished
        {
          g_tactile_i2c_async_data_txrx_idx[port]++;
 800241a:	540a      	strb	r2, [r1, r0]
          if (g_tactile_i2c_async_data_txrx_idx[port] >= g_tactile_i2c_async_data_len[port]) // checks if there is more things to send
 800241c:	d83e      	bhi.n	800249c <tactile_internal_i2c_async_tick.part.2+0x150>
        // updates index
        g_tactile_i2c_async_data_txrx_idx[port]++;

        if (g_tactile_i2c_async_data_txrx_idx[port] >= g_tactile_i2c_async_data_len[port]) // checks if there is more things to be read
        {
          i2c->CR1 |= I2C_CR1_STOP; // generates stop condition for the slave, which is sending the commands
 800241e:	881a      	ldrh	r2, [r3, #0]
 8002420:	b292      	uxth	r2, r2
 8002422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
          *status = TATS_STOP;
 8002426:	2104      	movs	r1, #4
        // updates index
        g_tactile_i2c_async_data_txrx_idx[port]++;

        if (g_tactile_i2c_async_data_txrx_idx[port] >= g_tactile_i2c_async_data_len[port]) // checks if there is more things to be read
        {
          i2c->CR1 |= I2C_CR1_STOP; // generates stop condition for the slave, which is sending the commands
 8002428:	801a      	strh	r2, [r3, #0]
          *status = TATS_STOP;
 800242a:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
 800242e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      }
      break;
    // Reads data
    //######################################################################################### 
    case TATS_READ:
      if (i2c->SR1 & I2C_SR1_RXNE)
 8002430:	8a9a      	ldrh	r2, [r3, #20]
 8002432:	0652      	lsls	r2, r2, #25
 8002434:	d52a      	bpl.n	800248c <tactile_internal_i2c_async_tick.part.2+0x140>
      {
        const uint8_t txrx_idx = g_tactile_i2c_async_data_txrx_idx[port];
 8002436:	4e2e      	ldr	r6, [pc, #184]	; (80024f0 <tactile_internal_i2c_async_tick.part.2+0x1a4>)
        g_tactile_i2c_async_data[port][txrx_idx] = i2c->DR;
        
        // updates index
        g_tactile_i2c_async_data_txrx_idx[port]++;

        if (g_tactile_i2c_async_data_txrx_idx[port] >= g_tactile_i2c_async_data_len[port]) // checks if there is more things to be read
 8002438:	4a2c      	ldr	r2, [pc, #176]	; (80024ec <tactile_internal_i2c_async_tick.part.2+0x1a0>)
    // Reads data
    //######################################################################################### 
    case TATS_READ:
      if (i2c->SR1 & I2C_SR1_RXNE)
      {
        const uint8_t txrx_idx = g_tactile_i2c_async_data_txrx_idx[port];
 800243a:	5c31      	ldrb	r1, [r6, r0]
        g_tactile_i2c_async_data[port][txrx_idx] = i2c->DR;
        
        // updates index
        g_tactile_i2c_async_data_txrx_idx[port]++;

        if (g_tactile_i2c_async_data_txrx_idx[port] >= g_tactile_i2c_async_data_len[port]) // checks if there is more things to be read
 800243c:	5c15      	ldrb	r5, [r2, r0]
      if (i2c->SR1 & I2C_SR1_RXNE)
      {
        const uint8_t txrx_idx = g_tactile_i2c_async_data_txrx_idx[port];
        
        // reads the data
        g_tactile_i2c_async_data[port][txrx_idx] = i2c->DR;
 800243e:	4f2d      	ldr	r7, [pc, #180]	; (80024f4 <tactile_internal_i2c_async_tick.part.2+0x1a8>)
 8002440:	f8b3 e010 	ldrh.w	lr, [r3, #16]
        
        // updates index
        g_tactile_i2c_async_data_txrx_idx[port]++;
 8002444:	1c4a      	adds	r2, r1, #1
 8002446:	b2d2      	uxtb	r2, r2
      if (i2c->SR1 & I2C_SR1_RXNE)
      {
        const uint8_t txrx_idx = g_tactile_i2c_async_data_txrx_idx[port];
        
        // reads the data
        g_tactile_i2c_async_data[port][txrx_idx] = i2c->DR;
 8002448:	eb01 2100 	add.w	r1, r1, r0, lsl #8
        
        // updates index
        g_tactile_i2c_async_data_txrx_idx[port]++;

        if (g_tactile_i2c_async_data_txrx_idx[port] >= g_tactile_i2c_async_data_len[port]) // checks if there is more things to be read
 800244c:	42aa      	cmp	r2, r5
        
        // reads the data
        g_tactile_i2c_async_data[port][txrx_idx] = i2c->DR;
        
        // updates index
        g_tactile_i2c_async_data_txrx_idx[port]++;
 800244e:	5432      	strb	r2, [r6, r0]
      if (i2c->SR1 & I2C_SR1_RXNE)
      {
        const uint8_t txrx_idx = g_tactile_i2c_async_data_txrx_idx[port];
        
        // reads the data
        g_tactile_i2c_async_data[port][txrx_idx] = i2c->DR;
 8002450:	f807 e001 	strb.w	lr, [r7, r1]
        
        // updates index
        g_tactile_i2c_async_data_txrx_idx[port]++;

        if (g_tactile_i2c_async_data_txrx_idx[port] >= g_tactile_i2c_async_data_len[port]) // checks if there is more things to be read
 8002454:	d2e3      	bcs.n	800241e <tactile_internal_i2c_async_tick.part.2+0xd2>
          i2c->CR1 |= I2C_CR1_STOP; // generates stop condition for the slave, which is sending the commands
          *status = TATS_STOP;
        }
        else // prepare to read more
        {
          if (g_tactile_i2c_async_data_len[port] - 1 == g_tactile_i2c_async_data_txrx_idx[port])
 8002456:	3d01      	subs	r5, #1
 8002458:	4295      	cmp	r5, r2
            i2c->CR1 &= ~I2C_CR1_ACK; // last read
 800245a:	881a      	ldrh	r2, [r3, #0]
          i2c->CR1 |= I2C_CR1_STOP; // generates stop condition for the slave, which is sending the commands
          *status = TATS_STOP;
        }
        else // prepare to read more
        {
          if (g_tactile_i2c_async_data_len[port] - 1 == g_tactile_i2c_async_data_txrx_idx[port])
 800245c:	d024      	beq.n	80024a8 <tactile_internal_i2c_async_tick.part.2+0x15c>
            i2c->CR1 &= ~I2C_CR1_ACK; // last read
          else
            i2c->CR1 |=  I2C_CR1_ACK; // more reads to come. ack it.
 800245e:	b292      	uxth	r2, r2
 8002460:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002464:	801a      	strh	r2, [r3, #0]
 8002466:	bdf0      	pop	{r4, r5, r6, r7, pc}
      }
      break;
    // Waits until bus is not busy
    //######################################################################################### 
    case TATS_STOP:
      if (!(i2c->SR2 & I2C_SR2_BUSY)) // if bus is not busy
 8002468:	8b1b      	ldrh	r3, [r3, #24]
 800246a:	079b      	lsls	r3, r3, #30
 800246c:	d40e      	bmi.n	800248c <tactile_internal_i2c_async_tick.part.2+0x140>
      {
        *status = TATS_STOP_WAIT; // wait a bit for the line to clear
        g_tactile_i2c_async_start_us[port] = SYSTIME;
 800246e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002472:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <tactile_internal_i2c_async_tick.part.2+0x194>)
 8002474:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002476:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    // Waits until bus is not busy
    //######################################################################################### 
    case TATS_STOP:
      if (!(i2c->SR2 & I2C_SR2_BUSY)) // if bus is not busy
      {
        *status = TATS_STOP_WAIT; // wait a bit for the line to clear
 800247a:	2305      	movs	r3, #5
 800247c:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 8002480:	bdf0      	pop	{r4, r5, r6, r7, pc}
      }
      break;
    // Default
    //######################################################################################### 
    default:
      *status = TATS_DONE_SUCCESS;
 8002482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002486:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 800248a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800248c:	bdf0      	pop	{r4, r5, r6, r7, pc}

        // see if data is expected
        int no_payload = (0 == g_tactile_i2c_async_data_len[port]);
        
        if (no_payload) // if no data is expected to be sent or received
          i2c->CR1 |= I2C_CR1_STOP; // this seemed needed... not sure why now.
 800248e:	881a      	ldrh	r2, [r3, #0]
 8002490:	b292      	uxth	r2, r2
 8002492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002496:	801a      	strh	r2, [r3, #0]
        i2c->SR2; // un-stretch clock by reading here (?)
 8002498:	8b1a      	ldrh	r2, [r3, #24]
 800249a:	e7c0      	b.n	800241e <tactile_internal_i2c_async_tick.part.2+0xd2>
            *status = TATS_STOP;
          }
          else // there is more data to be sent
          {
            const uint8_t txrx_idx = g_tactile_i2c_async_data_txrx_idx[port];
            i2c->DR = g_tactile_i2c_async_data[port][txrx_idx];
 800249c:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 80024a0:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <tactile_internal_i2c_async_tick.part.2+0x1a8>)
 80024a2:	5c12      	ldrb	r2, [r2, r0]
 80024a4:	821a      	strh	r2, [r3, #16]
 80024a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *status = TATS_STOP;
        }
        else // prepare to read more
        {
          if (g_tactile_i2c_async_data_len[port] - 1 == g_tactile_i2c_async_data_txrx_idx[port])
            i2c->CR1 &= ~I2C_CR1_ACK; // last read
 80024a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ac:	0412      	lsls	r2, r2, #16
 80024ae:	0c12      	lsrs	r2, r2, #16
 80024b0:	801a      	strh	r2, [r3, #0]
 80024b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!address_fail && !no_payload)
        {
          if (!(g_tactile_i2c_async_address[port] & 0x1)) // if last bit is not 1
          {
            // it's a write transaction
            g_tactile_i2c_async_data_txrx_idx[port] = 0;
 80024b4:	490e      	ldr	r1, [pc, #56]	; (80024f0 <tactile_internal_i2c_async_tick.part.2+0x1a4>)
            i2c->DR = g_tactile_i2c_async_data[port][0];
 80024b6:	4f0f      	ldr	r7, [pc, #60]	; (80024f4 <tactile_internal_i2c_async_tick.part.2+0x1a8>)
        if (!address_fail && !no_payload)
        {
          if (!(g_tactile_i2c_async_address[port] & 0x1)) // if last bit is not 1
          {
            // it's a write transaction
            g_tactile_i2c_async_data_txrx_idx[port] = 0;
 80024b8:	540d      	strb	r5, [r1, r0]
            i2c->DR = g_tactile_i2c_async_data[port][0];
 80024ba:	0206      	lsls	r6, r0, #8
            *status = TATS_WRITE;
 80024bc:	2202      	movs	r2, #2
        {
          if (!(g_tactile_i2c_async_address[port] & 0x1)) // if last bit is not 1
          {
            // it's a write transaction
            g_tactile_i2c_async_data_txrx_idx[port] = 0;
            i2c->DR = g_tactile_i2c_async_data[port][0];
 80024be:	5dbe      	ldrb	r6, [r7, r6]
 80024c0:	821e      	strh	r6, [r3, #16]
            *status = TATS_WRITE;
 80024c2:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
 80024c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          {
            // it's a read transaction
            g_tactile_i2c_async_data_txrx_idx[port] = 0;

            if (g_tactile_i2c_async_data_len[port] == 1) // if just one byte to read
              i2c->CR1 &= ~I2C_CR1_ACK; // single-byte read
 80024c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024cc:	0412      	lsls	r2, r2, #16
 80024ce:	0c12      	lsrs	r2, r2, #16
 80024d0:	801a      	strh	r2, [r3, #0]
 80024d2:	e78b      	b.n	80023ec <tactile_internal_i2c_async_tick.part.2+0xa0>
 80024d4:	20010400 	.word	0x20010400
 80024d8:	40005400 	.word	0x40005400
 80024dc:	40005c00 	.word	0x40005c00
 80024e0:	2001044c 	.word	0x2001044c
 80024e4:	20010420 	.word	0x20010420
 80024e8:	20010448 	.word	0x20010448
 80024ec:	2001045c 	.word	0x2001045c
 80024f0:	20010424 	.word	0x20010424
 80024f4:	2000fff0 	.word	0x2000fff0

080024f8 <tactile_i2c_async_start>:
//     tactile_i2c_async_start(tp, BCAST_ENABLE_ADDR, NULL, 0);
//     tactile_i2c_async_start(tp, BCAST_DISABLE_ADDR, NULL, 1);
//#########################################################################################
void tactile_i2c_async_start(const uint8_t port, const uint8_t address, uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS)
 80024f8:	2803      	cmp	r0, #3
 80024fa:	d801      	bhi.n	8002500 <tactile_i2c_async_start+0x8>
 80024fc:	f7ff beca 	b.w	8002294 <tactile_i2c_async_start.part.1>
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop

08002504 <tactile_internal_i2c_async_tick>:
//               g_tactile_internal_i2c_status

//#########################################################################################
void tactile_internal_i2c_async_tick(const uint_fast8_t port)
{
  if (port >= NUM_INTERNAL_I2C)
 8002504:	2801      	cmp	r0, #1
 8002506:	d900      	bls.n	800250a <tactile_internal_i2c_async_tick+0x6>
 8002508:	4770      	bx	lr
 800250a:	f7ff bf1f 	b.w	800234c <tactile_internal_i2c_async_tick.part.2>
 800250e:	bf00      	nop

08002510 <tactile_bridged_i2c_async_tick>:
  }
}

void tactile_bridged_i2c_async_tick(const uint_fast8_t tactile_port)
{
  if (tactile_port != 2 && tactile_port != 3)
 8002510:	1e83      	subs	r3, r0, #2
 8002512:	2b01      	cmp	r3, #1
 8002514:	d900      	bls.n	8002518 <tactile_bridged_i2c_async_tick+0x8>
 8002516:	4770      	bx	lr
      break;
  }
}

void tactile_bridged_i2c_async_tick(const uint_fast8_t tactile_port)
{
 8002518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    spi = SPI2;
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
  }

  switch (*status)
 800251c:	4f92      	ldr	r7, [pc, #584]	; (8002768 <tactile_bridged_i2c_async_tick+0x258>)
  }
  else // bridge == 1
  {
    spi = SPI2;
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
 800251e:	4993      	ldr	r1, [pc, #588]	; (800276c <tactile_bridged_i2c_async_tick+0x25c>)
 8002520:	4d93      	ldr	r5, [pc, #588]	; (8002770 <tactile_bridged_i2c_async_tick+0x260>)
  }

  switch (*status)
 8002522:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
  }
  else // bridge == 1
  {
    spi = SPI2;
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
 8002526:	4c93      	ldr	r4, [pc, #588]	; (8002774 <tactile_bridged_i2c_async_tick+0x264>)
 8002528:	4a93      	ldr	r2, [pc, #588]	; (8002778 <tactile_bridged_i2c_async_tick+0x268>)
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf08      	it	eq
 800252e:	460a      	moveq	r2, r1
      break;
  }
}

void tactile_bridged_i2c_async_tick(const uint_fast8_t tactile_port)
{
 8002530:	b083      	sub	sp, #12
  }
  else // bridge == 1
  {
    spi = SPI2;
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
 8002532:	bf06      	itte	eq
 8002534:	462c      	moveq	r4, r5
 8002536:	2110      	moveq	r1, #16
 8002538:	f44f 7100 	movne.w	r1, #512	; 0x200
  }

  switch (*status)
 800253c:	2e08      	cmp	r6, #8
 800253e:	d813      	bhi.n	8002568 <tactile_bridged_i2c_async_tick+0x58>
 8002540:	e8df f016 	tbh	[pc, r6, lsl #1]
 8002544:	002e0019 	.word	0x002e0019
 8002548:	00540041 	.word	0x00540041
 800254c:	00e2007f 	.word	0x00e2007f
 8002550:	00b4009d 	.word	0x00b4009d
 8002554:	0009      	.short	0x0009
          spi->DR = 0x0;
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
      }
      break;
    case TBPS_READ_TXRX_WAIT:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 30)
 8002556:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800255a:	4988      	ldr	r1, [pc, #544]	; (800277c <tactile_bridged_i2c_async_tick+0x26c>)
 800255c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800255e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002562:	1a52      	subs	r2, r2, r1
 8002564:	2a1e      	cmp	r2, #30
 8002566:	d903      	bls.n	8002570 <tactile_bridged_i2c_async_tick+0x60>
        *status = TBPS_DONE_SUCCESS;
      break;
    default:
      *status = TBPS_DONE_SUCCESS; // spin here after it's done
 8002568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800256c:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
      break;
  }
}
 8002570:	b003      	add	sp, #12
 8002572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  }

  switch (*status)
  {
    case TBPS_REQUEST_CS_LOW:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 4)
 8002576:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 800257a:	4c80      	ldr	r4, [pc, #512]	; (800277c <tactile_bridged_i2c_async_tick+0x26c>)
 800257c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800257e:	f854 6020 	ldr.w	r6, [r4, r0, lsl #2]
 8002582:	1b89      	subs	r1, r1, r6
 8002584:	2904      	cmp	r1, #4
 8002586:	d9f3      	bls.n	8002570 <tactile_bridged_i2c_async_tick+0x60>
      {
        spi->DR = g_tactile_i2c_async_address[tactile_port] & 0x1; // send CMD
 8002588:	497d      	ldr	r1, [pc, #500]	; (8002780 <tactile_bridged_i2c_async_tick+0x270>)
 800258a:	5c09      	ldrb	r1, [r1, r0]
 800258c:	f001 0101 	and.w	r1, r1, #1
 8002590:	8191      	strh	r1, [r2, #12]
        *status = TBPS_REQUEST_TX_CMD;
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
 8002592:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002594:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
  {
    case TBPS_REQUEST_CS_LOW:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 4)
      {
        spi->DR = g_tactile_i2c_async_address[tactile_port] & 0x1; // send CMD
        *status = TBPS_REQUEST_TX_CMD;
 8002598:	2201      	movs	r2, #1
 800259a:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 800259e:	e7e7      	b.n	8002570 <tactile_bridged_i2c_async_tick+0x60>
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
      }
      break;
    case TBPS_REQUEST_TX_CMD:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
 80025a0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80025a4:	4c75      	ldr	r4, [pc, #468]	; (800277c <tactile_bridged_i2c_async_tick+0x26c>)
 80025a6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80025a8:	f854 6020 	ldr.w	r6, [r4, r0, lsl #2]
 80025ac:	1b89      	subs	r1, r1, r6
 80025ae:	290f      	cmp	r1, #15
 80025b0:	d9de      	bls.n	8002570 <tactile_bridged_i2c_async_tick+0x60>
      {
        spi->DR = g_tactile_i2c_async_data_len[tactile_port];
 80025b2:	4974      	ldr	r1, [pc, #464]	; (8002784 <tactile_bridged_i2c_async_tick+0x274>)
 80025b4:	5c09      	ldrb	r1, [r1, r0]
 80025b6:	8191      	strh	r1, [r2, #12]
        *status = TBPS_REQUEST_TX_LEN;
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
 80025b8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80025ba:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
      break;
    case TBPS_REQUEST_TX_CMD:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
      {
        spi->DR = g_tactile_i2c_async_data_len[tactile_port];
        *status = TBPS_REQUEST_TX_LEN;
 80025be:	2202      	movs	r2, #2
 80025c0:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 80025c4:	e7d4      	b.n	8002570 <tactile_bridged_i2c_async_tick+0x60>
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
      }
      break;
    case TBPS_REQUEST_TX_LEN:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
 80025c6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80025ca:	4c6c      	ldr	r4, [pc, #432]	; (800277c <tactile_bridged_i2c_async_tick+0x26c>)
 80025cc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80025ce:	f854 6020 	ldr.w	r6, [r4, r0, lsl #2]
 80025d2:	1b89      	subs	r1, r1, r6
 80025d4:	290f      	cmp	r1, #15
 80025d6:	d9cb      	bls.n	8002570 <tactile_bridged_i2c_async_tick+0x60>
      {
        spi->DR = g_tactile_i2c_async_address[tactile_port]; // send addr
 80025d8:	4969      	ldr	r1, [pc, #420]	; (8002780 <tactile_bridged_i2c_async_tick+0x270>)
 80025da:	5c09      	ldrb	r1, [r1, r0]
 80025dc:	8191      	strh	r1, [r2, #12]
        *status = TBPS_REQUEST_TX_ADDR;
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
 80025de:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80025e0:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
      break;
    case TBPS_REQUEST_TX_LEN:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
      {
        spi->DR = g_tactile_i2c_async_address[tactile_port]; // send addr
        *status = TBPS_REQUEST_TX_ADDR;
 80025e4:	2203      	movs	r2, #3
 80025e6:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 80025ea:	e7c1      	b.n	8002570 <tactile_bridged_i2c_async_tick+0x60>
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
      }
      break;
    case TBPS_REQUEST_TX_ADDR:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
 80025ec:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 80025f0:	4d62      	ldr	r5, [pc, #392]	; (800277c <tactile_bridged_i2c_async_tick+0x26c>)
 80025f2:	6a76      	ldr	r6, [r6, #36]	; 0x24
 80025f4:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
 80025f8:	ebce 0606 	rsb	r6, lr, r6
 80025fc:	2e0f      	cmp	r6, #15
 80025fe:	d9b7      	bls.n	8002570 <tactile_bridged_i2c_async_tick+0x60>
      {
        if ((g_tactile_i2c_async_address[tactile_port] & 0x1) || // it's a read
 8002600:	4e5f      	ldr	r6, [pc, #380]	; (8002780 <tactile_bridged_i2c_async_tick+0x270>)
 8002602:	5c36      	ldrb	r6, [r6, r0]
 8002604:	f016 0601 	ands.w	r6, r6, #1
 8002608:	f040 80a1 	bne.w	800274e <tactile_bridged_i2c_async_tick+0x23e>
            g_tactile_i2c_async_data_len[tactile_port] == 0)     // or, no data
 800260c:	f8df e174 	ldr.w	lr, [pc, #372]	; 8002784 <tactile_bridged_i2c_async_tick+0x274>
      }
      break;
    case TBPS_REQUEST_TX_ADDR:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
      {
        if ((g_tactile_i2c_async_address[tactile_port] & 0x1) || // it's a read
 8002610:	f81e e000 	ldrb.w	lr, [lr, r0]
 8002614:	f1be 0f00 	cmp.w	lr, #0
 8002618:	f000 8099 	beq.w	800274e <tactile_bridged_i2c_async_tick+0x23e>
        }
        else
        {
          *status = TBPS_TX_DATA;
          g_tactile_i2c_async_data_txrx_idx[tactile_port] = 0;
          spi->DR = g_tactile_i2c_async_data[tactile_port][0];
 800261c:	f8df c168 	ldr.w	ip, [pc, #360]	; 8002788 <tactile_bridged_i2c_async_tick+0x278>
          *status = TBPS_WAIT_FOR_COMPLETION;
        }
        else
        {
          *status = TBPS_TX_DATA;
          g_tactile_i2c_async_data_txrx_idx[tactile_port] = 0;
 8002620:	f8df e168 	ldr.w	lr, [pc, #360]	; 800278c <tactile_bridged_i2c_async_tick+0x27c>
          spi->DR = g_tactile_i2c_async_data[tactile_port][0];
 8002624:	0201      	lsls	r1, r0, #8
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
          *status = TBPS_WAIT_FOR_COMPLETION;
        }
        else
        {
          *status = TBPS_TX_DATA;
 8002626:	2404      	movs	r4, #4
          g_tactile_i2c_async_data_txrx_idx[tactile_port] = 0;
          spi->DR = g_tactile_i2c_async_data[tactile_port][0];
 8002628:	f81c 1001 	ldrb.w	r1, [ip, r1]
          *status = TBPS_WAIT_FOR_COMPLETION;
        }
        else
        {
          *status = TBPS_TX_DATA;
          g_tactile_i2c_async_data_txrx_idx[tactile_port] = 0;
 800262c:	f80e 6000 	strb.w	r6, [lr, r0]
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
          *status = TBPS_WAIT_FOR_COMPLETION;
        }
        else
        {
          *status = TBPS_TX_DATA;
 8002630:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
          g_tactile_i2c_async_data_txrx_idx[tactile_port] = 0;
          spi->DR = g_tactile_i2c_async_data[tactile_port][0];
 8002634:	8191      	strh	r1, [r2, #12]
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
          *status = TBPS_READ_TXRX_WAIT;
        }
        else
          spi->DR = 0x0;
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
 8002636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
 8002640:	e796      	b.n	8002570 <tactile_bridged_i2c_async_tick+0x60>
        }
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
      }
      break;
    case TBPS_TX_DATA:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
 8002642:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8002646:	4d4d      	ldr	r5, [pc, #308]	; (800277c <tactile_bridged_i2c_async_tick+0x26c>)
 8002648:	6a76      	ldr	r6, [r6, #36]	; 0x24
 800264a:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
 800264e:	ebce 0606 	rsb	r6, lr, r6
 8002652:	2e0f      	cmp	r6, #15
 8002654:	d98c      	bls.n	8002570 <tactile_bridged_i2c_async_tick+0x60>
      {
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] + 1 ==
 8002656:	f8df e134 	ldr.w	lr, [pc, #308]	; 800278c <tactile_bridged_i2c_async_tick+0x27c>
            g_tactile_i2c_async_data_len[tactile_port])
 800265a:	f8df c128 	ldr.w	ip, [pc, #296]	; 8002784 <tactile_bridged_i2c_async_tick+0x274>
      }
      break;
    case TBPS_TX_DATA:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
      {
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] + 1 ==
 800265e:	f81e 6000 	ldrb.w	r6, [lr, r0]
 8002662:	f81c c000 	ldrb.w	ip, [ip, r0]
 8002666:	3601      	adds	r6, #1
 8002668:	4566      	cmp	r6, ip
 800266a:	d070      	beq.n	800274e <tactile_bridged_i2c_async_tick+0x23e>
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
          *status = TBPS_WAIT_FOR_COMPLETION;
        }
        else
        {
          g_tactile_i2c_async_data_txrx_idx[tactile_port]++;
 800266c:	b2f6      	uxtb	r6, r6
          spi->DR = g_tactile_i2c_async_data[tactile_port][
 800266e:	eb06 2300 	add.w	r3, r6, r0, lsl #8
 8002672:	4945      	ldr	r1, [pc, #276]	; (8002788 <tactile_bridged_i2c_async_tick+0x278>)
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
          *status = TBPS_WAIT_FOR_COMPLETION;
        }
        else
        {
          g_tactile_i2c_async_data_txrx_idx[tactile_port]++;
 8002674:	f80e 6000 	strb.w	r6, [lr, r0]
          spi->DR = g_tactile_i2c_async_data[tactile_port][
 8002678:	5ccb      	ldrb	r3, [r1, r3]
 800267a:	8193      	strh	r3, [r2, #12]
 800267c:	e7db      	b.n	8002636 <tactile_bridged_i2c_async_tick+0x126>
            *status = TBPS_DONE_SUCCESS; // faster if we don't check...
        }
      }
      break;
    case TBPS_READ_CS_LOW:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 4)
 800267e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8002682:	4c3e      	ldr	r4, [pc, #248]	; (800277c <tactile_bridged_i2c_async_tick+0x26c>)
 8002684:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002686:	f854 6020 	ldr.w	r6, [r4, r0, lsl #2]
 800268a:	1b89      	subs	r1, r1, r6
 800268c:	2904      	cmp	r1, #4
 800268e:	f67f af6f 	bls.w	8002570 <tactile_bridged_i2c_async_tick+0x60>
      {
        spi->DR = 0x06; // read buffer command
 8002692:	2106      	movs	r1, #6
 8002694:	8191      	strh	r1, [r2, #12]
        spi->DR;
 8002696:	8992      	ldrh	r2, [r2, #12]
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
        *status = TBPS_READ_TXRX;
        g_tactile_i2c_async_data_txrx_idx[tactile_port] = 0;
 8002698:	493c      	ldr	r1, [pc, #240]	; (800278c <tactile_bridged_i2c_async_tick+0x27c>)
    case TBPS_READ_CS_LOW:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 4)
      {
        spi->DR = 0x06; // read buffer command
        spi->DR;
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
 800269a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800269c:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
        *status = TBPS_READ_TXRX;
        g_tactile_i2c_async_data_txrx_idx[tactile_port] = 0;
 80026a0:	2400      	movs	r4, #0
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 4)
      {
        spi->DR = 0x06; // read buffer command
        spi->DR;
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
        *status = TBPS_READ_TXRX;
 80026a2:	2207      	movs	r2, #7
        g_tactile_i2c_async_data_txrx_idx[tactile_port] = 0;
 80026a4:	540c      	strb	r4, [r1, r0]
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 4)
      {
        spi->DR = 0x06; // read buffer command
        spi->DR;
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
        *status = TBPS_READ_TXRX;
 80026a6:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 80026aa:	e761      	b.n	8002570 <tactile_bridged_i2c_async_tick+0x60>
        g_tactile_i2c_async_data_txrx_idx[tactile_port] = 0;
      }
      break;
    case TBPS_READ_TXRX:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
 80026ac:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 80026b0:	4d32      	ldr	r5, [pc, #200]	; (800277c <tactile_bridged_i2c_async_tick+0x26c>)
 80026b2:	6a76      	ldr	r6, [r6, #36]	; 0x24
 80026b4:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
 80026b8:	ebce 0606 	rsb	r6, lr, r6
 80026bc:	2e0f      	cmp	r6, #15
 80026be:	f67f af57 	bls.w	8002570 <tactile_bridged_i2c_async_tick+0x60>
      {
        volatile uint8_t dr = (uint8_t)spi->DR;
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] > 0)
 80026c2:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 800278c <tactile_bridged_i2c_async_tick+0x27c>
      }
      break;
    case TBPS_READ_TXRX:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
      {
        volatile uint8_t dr = (uint8_t)spi->DR;
 80026c6:	f8b2 e00c 	ldrh.w	lr, [r2, #12]
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] > 0)
 80026ca:	f81c 6000 	ldrb.w	r6, [ip, r0]
      }
      break;
    case TBPS_READ_TXRX:
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
      {
        volatile uint8_t dr = (uint8_t)spi->DR;
 80026ce:	fa5f fe8e 	uxtb.w	lr, lr
 80026d2:	f88d e007 	strb.w	lr, [sp, #7]
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] > 0)
 80026d6:	b146      	cbz	r6, 80026ea <tactile_bridged_i2c_async_tick+0x1da>
        {
          g_tactile_i2c_async_data[tactile_port][
            g_tactile_i2c_async_data_txrx_idx[tactile_port]-1] = dr;
 80026d8:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 8002788 <tactile_bridged_i2c_async_tick+0x278>
 80026dc:	f89d 8007 	ldrb.w	r8, [sp, #7]
 80026e0:	eb0e 2e00 	add.w	lr, lr, r0, lsl #8
 80026e4:	44b6      	add	lr, r6
 80026e6:	f80e 8c01 	strb.w	r8, [lr, #-1]
        }
        g_tactile_i2c_async_data_txrx_idx[tactile_port]++;
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] ==
            g_tactile_i2c_async_data_len[tactile_port] + 1)
 80026ea:	f8df e098 	ldr.w	lr, [pc, #152]	; 8002784 <tactile_bridged_i2c_async_tick+0x274>
 80026ee:	f81e e000 	ldrb.w	lr, [lr, r0]
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] > 0)
        {
          g_tactile_i2c_async_data[tactile_port][
            g_tactile_i2c_async_data_txrx_idx[tactile_port]-1] = dr;
        }
        g_tactile_i2c_async_data_txrx_idx[tactile_port]++;
 80026f2:	3601      	adds	r6, #1
 80026f4:	b2f6      	uxtb	r6, r6
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] ==
            g_tactile_i2c_async_data_len[tactile_port] + 1)
 80026f6:	f10e 0e01 	add.w	lr, lr, #1
        {
          g_tactile_i2c_async_data[tactile_port][
            g_tactile_i2c_async_data_txrx_idx[tactile_port]-1] = dr;
        }
        g_tactile_i2c_async_data_txrx_idx[tactile_port]++;
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] ==
 80026fa:	4576      	cmp	r6, lr
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] > 0)
        {
          g_tactile_i2c_async_data[tactile_port][
            g_tactile_i2c_async_data_txrx_idx[tactile_port]-1] = dr;
        }
        g_tactile_i2c_async_data_txrx_idx[tactile_port]++;
 80026fc:	f80c 6000 	strb.w	r6, [ip, r0]
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] ==
 8002700:	d02b      	beq.n	800275a <tactile_bridged_i2c_async_tick+0x24a>
        {
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
          *status = TBPS_READ_TXRX_WAIT;
        }
        else
          spi->DR = 0x0;
 8002702:	2300      	movs	r3, #0
 8002704:	8193      	strh	r3, [r2, #12]
 8002706:	e796      	b.n	8002636 <tactile_bridged_i2c_async_tick+0x126>
      }
      break;
    case TBPS_WAIT_FOR_COMPLETION:
      {
        const uint32_t us_to_wait = 180 + 110 *
                                    g_tactile_i2c_async_data_len[tactile_port];
 8002708:	4d1e      	ldr	r5, [pc, #120]	; (8002784 <tactile_bridged_i2c_async_tick+0x274>)
        if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > us_to_wait)
 800270a:	f8df e070 	ldr.w	lr, [pc, #112]	; 800277c <tactile_bridged_i2c_async_tick+0x26c>
      }
      break;
    case TBPS_WAIT_FOR_COMPLETION:
      {
        const uint32_t us_to_wait = 180 + 110 *
                                    g_tactile_i2c_async_data_len[tactile_port];
 800270e:	f815 8000 	ldrb.w	r8, [r5, r0]
        if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > us_to_wait)
 8002712:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
      }
      break;
    case TBPS_WAIT_FOR_COMPLETION:
      {
        const uint32_t us_to_wait = 180 + 110 *
 8002716:	266e      	movs	r6, #110	; 0x6e
                                    g_tactile_i2c_async_data_len[tactile_port];
        if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > us_to_wait)
 8002718:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
 800271c:	f85e 9020 	ldr.w	r9, [lr, r0, lsl #2]
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
      }
      break;
    case TBPS_WAIT_FOR_COMPLETION:
      {
        const uint32_t us_to_wait = 180 + 110 *
 8002720:	25b4      	movs	r5, #180	; 0xb4
                                    g_tactile_i2c_async_data_len[tactile_port];
        if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > us_to_wait)
 8002722:	ebc9 0202 	rsb	r2, r9, r2
        g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
      }
      break;
    case TBPS_WAIT_FOR_COMPLETION:
      {
        const uint32_t us_to_wait = 180 + 110 *
 8002726:	fb16 5508 	smlabb	r5, r6, r8, r5
                                    g_tactile_i2c_async_data_len[tactile_port];
        if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > us_to_wait)
 800272a:	4295      	cmp	r5, r2
 800272c:	f4bf af20 	bcs.w	8002570 <tactile_bridged_i2c_async_tick+0x60>
        {
          if (g_tactile_i2c_async_address[tactile_port] & 0x1)
 8002730:	4a13      	ldr	r2, [pc, #76]	; (8002780 <tactile_bridged_i2c_async_tick+0x270>)
 8002732:	5c12      	ldrb	r2, [r2, r0]
 8002734:	07d2      	lsls	r2, r2, #31
 8002736:	f57f af17 	bpl.w	8002568 <tactile_bridged_i2c_async_tick+0x58>
          {
            // it's a read. we need to harvest the data now.
            *status = TBPS_READ_CS_LOW;
            cs_gpio->BSRRH = cs_pin_mask;
 800273a:	b289      	uxth	r1, r1
 800273c:	8361      	strh	r1, [r4, #26]
            g_tactile_i2c_async_start_us[tactile_port] = SYSTIME;
 800273e:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
 8002742:	f84e 2020 	str.w	r2, [lr, r0, lsl #2]
        if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > us_to_wait)
        {
          if (g_tactile_i2c_async_address[tactile_port] & 0x1)
          {
            // it's a read. we need to harvest the data now.
            *status = TBPS_READ_CS_LOW;
 8002746:	2206      	movs	r2, #6
 8002748:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 800274c:	e710      	b.n	8002570 <tactile_bridged_i2c_async_tick+0x60>
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
      {
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] + 1 ==
            g_tactile_i2c_async_data_len[tactile_port])
        {
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
 800274e:	b289      	uxth	r1, r1
          *status = TBPS_WAIT_FOR_COMPLETION;
 8002750:	2205      	movs	r2, #5
      if (SYSTIME - g_tactile_i2c_async_start_us[tactile_port] > 15)
      {
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] + 1 ==
            g_tactile_i2c_async_data_len[tactile_port])
        {
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
 8002752:	8321      	strh	r1, [r4, #24]
          *status = TBPS_WAIT_FOR_COMPLETION;
 8002754:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8002758:	e76d      	b.n	8002636 <tactile_bridged_i2c_async_tick+0x126>
        }
        g_tactile_i2c_async_data_txrx_idx[tactile_port]++;
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] ==
            g_tactile_i2c_async_data_len[tactile_port] + 1)
        {
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
 800275a:	b289      	uxth	r1, r1
          *status = TBPS_READ_TXRX_WAIT;
 800275c:	2208      	movs	r2, #8
        }
        g_tactile_i2c_async_data_txrx_idx[tactile_port]++;
        if (g_tactile_i2c_async_data_txrx_idx[tactile_port] ==
            g_tactile_i2c_async_data_len[tactile_port] + 1)
        {
          cs_gpio->BSRRL = cs_pin_mask; // de-assert CS
 800275e:	8321      	strh	r1, [r4, #24]
          *status = TBPS_READ_TXRX_WAIT;
 8002760:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8002764:	e767      	b.n	8002636 <tactile_bridged_i2c_async_tick+0x126>
 8002766:	bf00      	nop
 8002768:	20010408 	.word	0x20010408
 800276c:	40013000 	.word	0x40013000
 8002770:	40020000 	.word	0x40020000
 8002774:	40020400 	.word	0x40020400
 8002778:	40003800 	.word	0x40003800
 800277c:	2001044c 	.word	0x2001044c
 8002780:	20010448 	.word	0x20010448
 8002784:	2001045c 	.word	0x2001045c
 8002788:	2000fff0 	.word	0x2000fff0
 800278c:	20010424 	.word	0x20010424

08002790 <tactile_i2c_async_tick>:
  }
}

void tactile_i2c_async_tick(const uint_fast8_t port)
{
  if (port >= NUM_TACTILE_PORTS)
 8002790:	2803      	cmp	r0, #3
 8002792:	d803      	bhi.n	800279c <tactile_i2c_async_tick+0xc>
    return; // let's not corrupt memory.
  if (port == 0 || port == 1) // on-chip i2c transceiver
 8002794:	2801      	cmp	r0, #1
 8002796:	d902      	bls.n	800279e <tactile_i2c_async_tick+0xe>
    tactile_internal_i2c_async_tick(port);
  else
    tactile_bridged_i2c_async_tick(port);
 8002798:	f7ff beba 	b.w	8002510 <tactile_bridged_i2c_async_tick>
 800279c:	4770      	bx	lr
 800279e:	f7ff bdd5 	b.w	800234c <tactile_internal_i2c_async_tick.part.2>
 80027a2:	bf00      	nop

080027a4 <tactile_bridge_reset>:
  */
  printf("done with tactile_init()\r\n");
}

void tactile_bridge_reset()
{
 80027a4:	b500      	push	{lr}
  // the two SPI-I2C bridges have their RESETs tied to a common MCU pin,
  // so this function will reset both of them
  printf("tactile_bridge_reset()\r\n");
 80027a6:	4814      	ldr	r0, [pc, #80]	; (80027f8 <tactile_bridge_reset+0x54>)
  */
  printf("done with tactile_init()\r\n");
}

void tactile_bridge_reset()
{
 80027a8:	b083      	sub	sp, #12
  // the two SPI-I2C bridges have their RESETs tied to a common MCU pin,
  // so this function will reset both of them
  printf("tactile_bridge_reset()\r\n");
 80027aa:	f001 f8d7 	bl	800395c <puts>
  GPIOC->BSRRH = 1 << PORTC_I2C_BRIDGE_RESET;
 80027ae:	4a13      	ldr	r2, [pc, #76]	; (80027fc <tactile_bridge_reset+0x58>)
  for (volatile int i = 0; i < 10000; i++) { } // assert RESET
 80027b0:	2300      	movs	r3, #0
void tactile_bridge_reset()
{
  // the two SPI-I2C bridges have their RESETs tied to a common MCU pin,
  // so this function will reset both of them
  printf("tactile_bridge_reset()\r\n");
  GPIOC->BSRRH = 1 << PORTC_I2C_BRIDGE_RESET;
 80027b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027b6:	8351      	strh	r1, [r2, #26]
  for (volatile int i = 0; i < 10000; i++) { } // assert RESET
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	9b00      	ldr	r3, [sp, #0]
 80027bc:	f242 720f 	movw	r2, #9999	; 0x270f
 80027c0:	4293      	cmp	r3, r2
 80027c2:	dc05      	bgt.n	80027d0 <tactile_bridge_reset+0x2c>
 80027c4:	9b00      	ldr	r3, [sp, #0]
 80027c6:	3301      	adds	r3, #1
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	9b00      	ldr	r3, [sp, #0]
 80027cc:	4293      	cmp	r3, r2
 80027ce:	ddf9      	ble.n	80027c4 <tactile_bridge_reset+0x20>
  GPIOC->BSRRL = 1 << PORTC_I2C_BRIDGE_RESET;
 80027d0:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <tactile_bridge_reset+0x58>)
  for (volatile int i = 0; i < 10000; i++) { } // then let them boot up
 80027d2:	2300      	movs	r3, #0
  // the two SPI-I2C bridges have their RESETs tied to a common MCU pin,
  // so this function will reset both of them
  printf("tactile_bridge_reset()\r\n");
  GPIOC->BSRRH = 1 << PORTC_I2C_BRIDGE_RESET;
  for (volatile int i = 0; i < 10000; i++) { } // assert RESET
  GPIOC->BSRRL = 1 << PORTC_I2C_BRIDGE_RESET;
 80027d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027d8:	8311      	strh	r1, [r2, #24]
  for (volatile int i = 0; i < 10000; i++) { } // then let them boot up
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	9b01      	ldr	r3, [sp, #4]
 80027de:	f242 720f 	movw	r2, #9999	; 0x270f
 80027e2:	4293      	cmp	r3, r2
 80027e4:	dc05      	bgt.n	80027f2 <tactile_bridge_reset+0x4e>
 80027e6:	9b01      	ldr	r3, [sp, #4]
 80027e8:	3301      	adds	r3, #1
 80027ea:	9301      	str	r3, [sp, #4]
 80027ec:	9b01      	ldr	r3, [sp, #4]
 80027ee:	4293      	cmp	r3, r2
 80027f0:	ddf9      	ble.n	80027e6 <tactile_bridge_reset+0x42>
}
 80027f2:	b003      	add	sp, #12
 80027f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80027f8:	0800c7a0 	.word	0x0800c7a0
 80027fc:	40020800 	.word	0x40020800

08002800 <tactile_init>:
}

//////////////////////////////////////////////////////////////////////////////

void tactile_init()
{
 8002800:	b5f0      	push	{r4, r5, r6, r7, lr}
  printf("tactile_init()\r\n");
 8002802:	4871      	ldr	r0, [pc, #452]	; (80029c8 <tactile_init+0x1c8>)
}

//////////////////////////////////////////////////////////////////////////////

void tactile_init()
{
 8002804:	b083      	sub	sp, #12
  printf("tactile_init()\r\n");
 8002806:	f001 f8a9 	bl	800395c <puts>
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 800280a:	4b70      	ldr	r3, [pc, #448]	; (80029cc <tactile_init+0x1cc>)
  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN |
                  RCC_APB1ENR_I2C3EN |
                  RCC_APB1ENR_SPI2EN;
  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;

  pin_set_alternate_function(GPIOB, PORTB_I2C1_SCL, 4);
 800280c:	4870      	ldr	r0, [pc, #448]	; (80029d0 <tactile_init+0x1d0>)
//////////////////////////////////////////////////////////////////////////////

void tactile_init()
{
  printf("tactile_init()\r\n");
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 800280e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002810:	f042 020f 	orr.w	r2, r2, #15
 8002814:	631a      	str	r2, [r3, #48]	; 0x30
                  RCC_AHB1ENR_GPIOBEN |
                  RCC_AHB1ENR_GPIOCEN |
                  RCC_AHB1ENR_GPIODEN;
  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN |
 8002816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002818:	f442 0220 	orr.w	r2, r2, #10485760	; 0xa00000
 800281c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
                  RCC_APB1ENR_I2C3EN |
                  RCC_APB1ENR_SPI2EN;
  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8002822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002824:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002828:	645a      	str	r2, [r3, #68]	; 0x44

  pin_set_alternate_function(GPIOB, PORTB_I2C1_SCL, 4);
 800282a:	2106      	movs	r1, #6
 800282c:	2204      	movs	r2, #4
 800282e:	f000 fc69 	bl	8003104 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOB, PORTB_I2C1_SDA, 4);
 8002832:	4867      	ldr	r0, [pc, #412]	; (80029d0 <tactile_init+0x1d0>)
 8002834:	2107      	movs	r1, #7
 8002836:	2204      	movs	r2, #4
 8002838:	f000 fc64 	bl	8003104 <pin_set_alternate_function>
  pin_set_output_type(GPIOB, PORTB_I2C1_SCL, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 800283c:	4864      	ldr	r0, [pc, #400]	; (80029d0 <tactile_init+0x1d0>)
 800283e:	2106      	movs	r1, #6
 8002840:	2201      	movs	r2, #1
 8002842:	f000 fc51 	bl	80030e8 <pin_set_output_type>
  pin_set_output_type(GPIOB, PORTB_I2C1_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 8002846:	4862      	ldr	r0, [pc, #392]	; (80029d0 <tactile_init+0x1d0>)
 8002848:	2107      	movs	r1, #7
 800284a:	2201      	movs	r2, #1
 800284c:	f000 fc4c 	bl	80030e8 <pin_set_output_type>

  pin_set_alternate_function(GPIOA, PORTA_I2C3_SCL, 4);
 8002850:	4860      	ldr	r0, [pc, #384]	; (80029d4 <tactile_init+0x1d4>)
 8002852:	2108      	movs	r1, #8
 8002854:	2204      	movs	r2, #4
 8002856:	f000 fc55 	bl	8003104 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOC, PORTC_I2C3_SDA, 4);
 800285a:	485f      	ldr	r0, [pc, #380]	; (80029d8 <tactile_init+0x1d8>)
 800285c:	2109      	movs	r1, #9
 800285e:	2204      	movs	r2, #4
 8002860:	f000 fc50 	bl	8003104 <pin_set_alternate_function>
  pin_set_output_type(GPIOA, PORTA_I2C3_SCL, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 8002864:	485b      	ldr	r0, [pc, #364]	; (80029d4 <tactile_init+0x1d4>)
 8002866:	2108      	movs	r1, #8
 8002868:	2201      	movs	r2, #1
 800286a:	f000 fc3d 	bl	80030e8 <pin_set_output_type>
  pin_set_output_type(GPIOC, PORTC_I2C3_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 800286e:	485a      	ldr	r0, [pc, #360]	; (80029d8 <tactile_init+0x1d8>)
 8002870:	2109      	movs	r1, #9
 8002872:	2201      	movs	r2, #1
 8002874:	f000 fc38 	bl	80030e8 <pin_set_output_type>

  //I2C1->CCR |= I2C_CCR_FS | // set fast mode
  //             35; // 42 MHz / (3 * 400 kHz) == 35
  //I2C1->TRISE = 42 * 300 / 1000 + 1; // not sure here.
  I2C1->CR2   |= APB_MHZ; // 42MHz -> 101010
 8002878:	4a58      	ldr	r2, [pc, #352]	; (80029dc <tactile_init+0x1dc>)
  I2C1->CCR   |= I2C_CCR; // I2C_CCR = 210
  I2C1->TRISE &= ~0x3f; // 0x3f = 0b00111111 -> 0b11000000, clearing register
  I2C1->TRISE |= I2C_TRISE; // = I2C_TRISE = (APB_MHZ * 200 / 1000 + 1), maximum rise time
  I2C1->CR1   |= I2C_CR1_PE; // peripheral enable

  I2C3->CR2   |= APB_MHZ;
 800287a:	4b59      	ldr	r3, [pc, #356]	; (80029e0 <tactile_init+0x1e0>)
  pin_set_output_type(GPIOC, PORTC_I2C3_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);

  //I2C1->CCR |= I2C_CCR_FS | // set fast mode
  //             35; // 42 MHz / (3 * 400 kHz) == 35
  //I2C1->TRISE = 42 * 300 / 1000 + 1; // not sure here.
  I2C1->CR2   |= APB_MHZ; // 42MHz -> 101010
 800287c:	8891      	ldrh	r1, [r2, #4]
  I2C3->TRISE &= ~0x3f;
  I2C3->TRISE |= I2C_TRISE;
  I2C3->CR1   |= I2C_CR1_PE;

  // now, set up the spi-to-i2c bridges
  pin_set_output(GPIOC, PORTC_I2C_BRIDGE_RESET);
 800287e:	4856      	ldr	r0, [pc, #344]	; (80029d8 <tactile_init+0x1d8>)
  pin_set_output_type(GPIOC, PORTC_I2C3_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);

  //I2C1->CCR |= I2C_CCR_FS | // set fast mode
  //             35; // 42 MHz / (3 * 400 kHz) == 35
  //I2C1->TRISE = 42 * 300 / 1000 + 1; // not sure here.
  I2C1->CR2   |= APB_MHZ; // 42MHz -> 101010
 8002880:	b289      	uxth	r1, r1
 8002882:	f041 012a 	orr.w	r1, r1, #42	; 0x2a
 8002886:	8091      	strh	r1, [r2, #4]
  I2C1->CCR   |= I2C_CCR; // I2C_CCR = 210
 8002888:	8b91      	ldrh	r1, [r2, #28]
 800288a:	b289      	uxth	r1, r1
 800288c:	f041 01d2 	orr.w	r1, r1, #210	; 0xd2
 8002890:	8391      	strh	r1, [r2, #28]
  I2C1->TRISE &= ~0x3f; // 0x3f = 0b00111111 -> 0b11000000, clearing register
 8002892:	8c11      	ldrh	r1, [r2, #32]
 8002894:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002898:	0409      	lsls	r1, r1, #16
 800289a:	0c09      	lsrs	r1, r1, #16
 800289c:	8411      	strh	r1, [r2, #32]
  I2C1->TRISE |= I2C_TRISE; // = I2C_TRISE = (APB_MHZ * 200 / 1000 + 1), maximum rise time
 800289e:	8c11      	ldrh	r1, [r2, #32]
 80028a0:	b289      	uxth	r1, r1
 80028a2:	f041 0109 	orr.w	r1, r1, #9
 80028a6:	8411      	strh	r1, [r2, #32]
  I2C1->CR1   |= I2C_CR1_PE; // peripheral enable
 80028a8:	8811      	ldrh	r1, [r2, #0]
 80028aa:	b289      	uxth	r1, r1
 80028ac:	f041 0101 	orr.w	r1, r1, #1
 80028b0:	8011      	strh	r1, [r2, #0]

  I2C3->CR2   |= APB_MHZ;
 80028b2:	889a      	ldrh	r2, [r3, #4]
 80028b4:	b292      	uxth	r2, r2
 80028b6:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 80028ba:	809a      	strh	r2, [r3, #4]
  I2C3->CCR   |= I2C_CCR;
 80028bc:	8b9a      	ldrh	r2, [r3, #28]
 80028be:	b292      	uxth	r2, r2
 80028c0:	f042 02d2 	orr.w	r2, r2, #210	; 0xd2
 80028c4:	839a      	strh	r2, [r3, #28]
  I2C3->TRISE &= ~0x3f;
 80028c6:	8c1a      	ldrh	r2, [r3, #32]
 80028c8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80028cc:	0412      	lsls	r2, r2, #16
 80028ce:	0c12      	lsrs	r2, r2, #16
 80028d0:	841a      	strh	r2, [r3, #32]
  I2C3->TRISE |= I2C_TRISE;
 80028d2:	8c1a      	ldrh	r2, [r3, #32]
 80028d4:	b292      	uxth	r2, r2
 80028d6:	f042 0209 	orr.w	r2, r2, #9
 80028da:	841a      	strh	r2, [r3, #32]
  I2C3->CR1   |= I2C_CR1_PE;
 80028dc:	881a      	ldrh	r2, [r3, #0]
 80028de:	b292      	uxth	r2, r2
 80028e0:	f042 0201 	orr.w	r2, r2, #1
 80028e4:	801a      	strh	r2, [r3, #0]

  // now, set up the spi-to-i2c bridges
  pin_set_output(GPIOC, PORTC_I2C_BRIDGE_RESET);
 80028e6:	210e      	movs	r1, #14
 80028e8:	f000 fc3a 	bl	8003160 <pin_set_output>
  pin_set_output(GPIOA, PORTA_BRIDGE0_CS);
 80028ec:	4839      	ldr	r0, [pc, #228]	; (80029d4 <tactile_init+0x1d4>)
 80028ee:	2104      	movs	r1, #4
 80028f0:	f000 fc36 	bl	8003160 <pin_set_output>
  pin_set_output(GPIOB, PORTB_BRIDGE1_CS);
 80028f4:	4836      	ldr	r0, [pc, #216]	; (80029d0 <tactile_init+0x1d0>)
 80028f6:	2109      	movs	r1, #9
 80028f8:	f000 fc32 	bl	8003160 <pin_set_output>
  pin_set_output_level(GPIOA, PORTA_BRIDGE0_CS, 1);
 80028fc:	4835      	ldr	r0, [pc, #212]	; (80029d4 <tactile_init+0x1d4>)
 80028fe:	2104      	movs	r1, #4
 8002900:	2201      	movs	r2, #1
 8002902:	f000 fc3d 	bl	8003180 <pin_set_output_level>
  pin_set_output_level(GPIOA, PORTB_BRIDGE1_CS, 1);
 8002906:	4833      	ldr	r0, [pc, #204]	; (80029d4 <tactile_init+0x1d4>)
 8002908:	2109      	movs	r1, #9
 800290a:	2201      	movs	r2, #1
 800290c:	f000 fc38 	bl	8003180 <pin_set_output_level>

  pin_set_alternate_function(GPIOA, PORTA_BRIDGE0_MISO, 5);
 8002910:	4830      	ldr	r0, [pc, #192]	; (80029d4 <tactile_init+0x1d4>)
 8002912:	2106      	movs	r1, #6
 8002914:	2205      	movs	r2, #5
 8002916:	f000 fbf5 	bl	8003104 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOB, PORTB_BRIDGE0_MOSI, 5);
 800291a:	2105      	movs	r1, #5
 800291c:	460a      	mov	r2, r1
 800291e:	482c      	ldr	r0, [pc, #176]	; (80029d0 <tactile_init+0x1d0>)
 8002920:	f000 fbf0 	bl	8003104 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOA, PORTA_BRIDGE0_SCLK, 5);
 8002924:	2105      	movs	r1, #5
 8002926:	460a      	mov	r2, r1
 8002928:	482a      	ldr	r0, [pc, #168]	; (80029d4 <tactile_init+0x1d4>)
 800292a:	f000 fbeb 	bl	8003104 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOC, PORTC_BRIDGE1_MISO, 5);
 800292e:	482a      	ldr	r0, [pc, #168]	; (80029d8 <tactile_init+0x1d8>)
 8002930:	2102      	movs	r1, #2
 8002932:	2205      	movs	r2, #5
 8002934:	f000 fbe6 	bl	8003104 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOC, PORTC_BRIDGE1_MOSI, 5);
 8002938:	4827      	ldr	r0, [pc, #156]	; (80029d8 <tactile_init+0x1d8>)
 800293a:	2103      	movs	r1, #3
 800293c:	2205      	movs	r2, #5
 800293e:	f000 fbe1 	bl	8003104 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOD, PORTD_BRIDGE1_SCLK, 5);
 8002942:	4828      	ldr	r0, [pc, #160]	; (80029e4 <tactile_init+0x1e4>)
 8002944:	2103      	movs	r1, #3
 8002946:	2205      	movs	r2, #5
 8002948:	f000 fbdc 	bl	8003104 <pin_set_alternate_function>

  // spi1 is running from a 84 MHz pclk. set it up with
  // sclk = pclk/64 to stay within datasheet limits.
  SPI1->CR1 = SPI_CR1_BR_2 | // sclk = pclk/64
 800294c:	4926      	ldr	r1, [pc, #152]	; (80029e8 <tactile_init+0x1e8>)
              SPI_CR1_SSM  | // software slave-select mode
              SPI_CR1_SSI  | // the value of this bit is forced onto the NSS pin and the IO value of the NSS pin is ignored.
              SPI_CR1_SPE; // SPI enable

  // bit rate = 42 mhz / 32 = 1.313 MHz
  SPI2->CR1 = SPI_CR1_BR_2 | // sclk = pclk/32
 800294e:	4b27      	ldr	r3, [pc, #156]	; (80029ec <tactile_init+0x1ec>)
  pin_set_alternate_function(GPIOC, PORTC_BRIDGE1_MOSI, 5);
  pin_set_alternate_function(GPIOD, PORTD_BRIDGE1_SCLK, 5);

  // spi1 is running from a 84 MHz pclk. set it up with
  // sclk = pclk/64 to stay within datasheet limits.
  SPI1->CR1 = SPI_CR1_BR_2 | // sclk = pclk/64
 8002950:	f240 306f 	movw	r0, #879	; 0x36f
              SPI_CR1_SSM  | // software slave-select mode
              SPI_CR1_SSI  | // the value of this bit is forced onto the NSS pin and the IO value of the NSS pin is ignored.
              SPI_CR1_SPE; // SPI enable

  // bit rate = 42 mhz / 32 = 1.313 MHz
  SPI2->CR1 = SPI_CR1_BR_2 | // sclk = pclk/32
 8002954:	f240 3267 	movw	r2, #871	; 0x367
  pin_set_alternate_function(GPIOC, PORTC_BRIDGE1_MOSI, 5);
  pin_set_alternate_function(GPIOD, PORTD_BRIDGE1_SCLK, 5);

  // spi1 is running from a 84 MHz pclk. set it up with
  // sclk = pclk/64 to stay within datasheet limits.
  SPI1->CR1 = SPI_CR1_BR_2 | // sclk = pclk/64
 8002958:	8008      	strh	r0, [r1, #0]
              SPI_CR1_SSM  | // software slave-select mode
              SPI_CR1_SSI  | // the value of this bit is forced onto the NSS pin and the IO value of the NSS pin is ignored.
              SPI_CR1_SPE; // SPI enable

  // bit rate = 42 mhz / 32 = 1.313 MHz
  SPI2->CR1 = SPI_CR1_BR_2 | // sclk = pclk/32
 800295a:	801a      	strh	r2, [r3, #0]
              SPI_CR1_CPHA | // the second clock transition is the first data capture edge
              SPI_CR1_SSM  | // software slave-select mode
              SPI_CR1_SSI  | // the value of this bit is forced onto the NSS pin and the IO value of the NSS pin is ignored.
              SPI_CR1_SPE; // SPI enable

  tactile_bridge_reset();
 800295c:	f7ff ff22 	bl	80027a4 <tactile_bridge_reset>
  for (int i = 0; i < 2; i++)
 8002960:	2500      	movs	r5, #0
 8002962:	b2ee      	uxtb	r6, r5
}

//////////////////////////////////////////////////////////////////////////////

void tactile_init()
{
 8002964:	2400      	movs	r4, #0

  tactile_bridge_reset();
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 6; j++)
      printf("tactile bridge %d reg %d: 0x%02x\r\n",
             i, j, tactile_bridge_read_reg(i, j));
 8002966:	b2e1      	uxtb	r1, r4
 8002968:	4630      	mov	r0, r6
 800296a:	f7ff fc75 	bl	8002258 <tactile_bridge_read_reg>
              SPI_CR1_SPE; // SPI enable

  tactile_bridge_reset();
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 6; j++)
      printf("tactile bridge %d reg %d: 0x%02x\r\n",
 800296e:	4622      	mov	r2, r4
             i, j, tactile_bridge_read_reg(i, j));
 8002970:	4603      	mov	r3, r0
              SPI_CR1_SPE; // SPI enable

  tactile_bridge_reset();
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 6; j++)
      printf("tactile bridge %d reg %d: 0x%02x\r\n",
 8002972:	4629      	mov	r1, r5
 8002974:	481e      	ldr	r0, [pc, #120]	; (80029f0 <tactile_init+0x1f0>)
              SPI_CR1_SSI  | // the value of this bit is forced onto the NSS pin and the IO value of the NSS pin is ignored.
              SPI_CR1_SPE; // SPI enable

  tactile_bridge_reset();
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 6; j++)
 8002976:	3401      	adds	r4, #1
      printf("tactile bridge %d reg %d: 0x%02x\r\n",
 8002978:	f000 ffaa 	bl	80038d0 <printf>
              SPI_CR1_SSI  | // the value of this bit is forced onto the NSS pin and the IO value of the NSS pin is ignored.
              SPI_CR1_SPE; // SPI enable

  tactile_bridge_reset();
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 6; j++)
 800297c:	2c06      	cmp	r4, #6
 800297e:	d1f2      	bne.n	8002966 <tactile_init+0x166>
              SPI_CR1_SSM  | // software slave-select mode
              SPI_CR1_SSI  | // the value of this bit is forced onto the NSS pin and the IO value of the NSS pin is ignored.
              SPI_CR1_SPE; // SPI enable

  tactile_bridge_reset();
  for (int i = 0; i < 2; i++)
 8002980:	b90d      	cbnz	r5, 8002986 <tactile_init+0x186>
 8002982:	2501      	movs	r5, #1
 8002984:	e7ed      	b.n	8002962 <tactile_init+0x162>
 8002986:	2000      	movs	r0, #0
 8002988:	aa01      	add	r2, sp, #4
 800298a:	4603      	mov	r3, r0

static void tactile_bridge_write_reg(const uint8_t bridge_idx,
                                     const uint8_t reg_idx,
                                     const uint8_t reg_val)
{
  uint8_t txd[3] = {0x20, reg_idx, reg_val};
 800298c:	2720      	movs	r7, #32
 800298e:	2602      	movs	r6, #2
 8002990:	2405      	movs	r4, #5
 8002992:	2103      	movs	r1, #3
 8002994:	f88d 7004 	strb.w	r7, [sp, #4]
 8002998:	f88d 6005 	strb.w	r6, [sp, #5]
 800299c:	f88d 4006 	strb.w	r4, [sp, #6]
 80029a0:	f7ff fbf4 	bl	800218c <tactile_bridge_spi_txrx.part.0>
 80029a4:	aa01      	add	r2, sp, #4
 80029a6:	4628      	mov	r0, r5
 80029a8:	2103      	movs	r1, #3
 80029aa:	2300      	movs	r3, #0
 80029ac:	f88d 7004 	strb.w	r7, [sp, #4]
 80029b0:	f88d 6005 	strb.w	r6, [sp, #5]
 80029b4:	f88d 4006 	strb.w	r4, [sp, #6]
 80029b8:	f7ff fbe8 	bl	800218c <tactile_bridge_spi_txrx.part.0>
             result == I2C_SUCCESS ? "SUCCESS" : "FAIL",
             port, sensor, mcu_addr);
    }
  }
  */
  printf("done with tactile_init()\r\n");
 80029bc:	480d      	ldr	r0, [pc, #52]	; (80029f4 <tactile_init+0x1f4>)
 80029be:	f000 ffcd 	bl	800395c <puts>
}
 80029c2:	b003      	add	sp, #12
 80029c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c6:	bf00      	nop
 80029c8:	0800c7b8 	.word	0x0800c7b8
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40020400 	.word	0x40020400
 80029d4:	40020000 	.word	0x40020000
 80029d8:	40020800 	.word	0x40020800
 80029dc:	40005400 	.word	0x40005400
 80029e0:	40005c00 	.word	0x40005c00
 80029e4:	40020c00 	.word	0x40020c00
 80029e8:	40013000 	.word	0x40013000
 80029ec:	40003800 	.word	0x40003800
 80029f0:	0800c7c8 	.word	0x0800c7c8
 80029f4:	0800c7ec 	.word	0x0800c7ec

080029f8 <tactile_bridge_wait_for_completion>:

tactile_i2c_result_t
tactile_bridge_wait_for_completion
  (const uint_fast8_t bridge_idx,
   const uint32_t wait_time)
{
 80029f8:	b570      	push	{r4, r5, r6, lr}
 80029fa:	b082      	sub	sp, #8
  for (volatile int i = 0; i < wait_time; i++) { } // la di dah...
 80029fc:	2300      	movs	r3, #0
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	9b00      	ldr	r3, [sp, #0]
 8002a02:	4299      	cmp	r1, r3
 8002a04:	d905      	bls.n	8002a12 <tactile_bridge_wait_for_completion+0x1a>
 8002a06:	9b00      	ldr	r3, [sp, #0]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	9b00      	ldr	r3, [sp, #0]
 8002a0e:	428b      	cmp	r3, r1
 8002a10:	d3f9      	bcc.n	8002a06 <tactile_bridge_wait_for_completion+0xe>
 8002a12:	b2c5      	uxtb	r5, r0

tactile_i2c_result_t
tactile_bridge_wait_for_completion
  (const uint_fast8_t bridge_idx,
   const uint32_t wait_time)
{
 8002a14:	f240 34e9 	movw	r4, #1001	; 0x3e9
  for (volatile int i = 0; i < wait_time; i++) { } // la di dah...
  uint8_t bridge_state = 0xf3;
  int wait_count = 0;
  while (bridge_state == 0xf3)
  {
    for (volatile int i = 0; i < 1000; i++) { } // la di dah...
 8002a18:	2600      	movs	r6, #0
 8002a1a:	9601      	str	r6, [sp, #4]
 8002a1c:	9b01      	ldr	r3, [sp, #4]
 8002a1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a22:	da06      	bge.n	8002a32 <tactile_bridge_wait_for_completion+0x3a>
 8002a24:	9b01      	ldr	r3, [sp, #4]
 8002a26:	3301      	adds	r3, #1
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	9b01      	ldr	r3, [sp, #4]
 8002a2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a30:	dbf8      	blt.n	8002a24 <tactile_bridge_wait_for_completion+0x2c>
    bridge_state = tactile_bridge_read_reg(bridge_idx, 0x4);
 8002a32:	4628      	mov	r0, r5
 8002a34:	2104      	movs	r1, #4
 8002a36:	f7ff fc0f 	bl	8002258 <tactile_bridge_read_reg>
    if (++wait_count > 1000)
 8002a3a:	3c01      	subs	r4, #1
 8002a3c:	d008      	beq.n	8002a50 <tactile_bridge_wait_for_completion+0x58>
   const uint32_t wait_time)
{
  for (volatile int i = 0; i < wait_time; i++) { } // la di dah...
  uint8_t bridge_state = 0xf3;
  int wait_count = 0;
  while (bridge_state == 0xf3)
 8002a3e:	28f3      	cmp	r0, #243	; 0xf3
 8002a40:	d0eb      	beq.n	8002a1a <tactile_bridge_wait_for_completion+0x22>
    bridge_state = tactile_bridge_read_reg(bridge_idx, 0x4);
    if (++wait_count > 1000)
    {
      // a SPI-I2C bridge locked up. try to reset them.
      tactile_bridge_reset();
      return I2C_FAIL;
 8002a42:	f1a0 00f0 	sub.w	r0, r0, #240	; 0xf0
 8002a46:	fab0 f080 	clz	r0, r0
 8002a4a:	0940      	lsrs	r0, r0, #5
  }
  if (bridge_state == 0xf0)
    return I2C_SUCCESS;
  else
    return I2C_FAIL;
}
 8002a4c:	b002      	add	sp, #8
 8002a4e:	bd70      	pop	{r4, r5, r6, pc}
    for (volatile int i = 0; i < 1000; i++) { } // la di dah...
    bridge_state = tactile_bridge_read_reg(bridge_idx, 0x4);
    if (++wait_count > 1000)
    {
      // a SPI-I2C bridge locked up. try to reset them.
      tactile_bridge_reset();
 8002a50:	f7ff fea8 	bl	80027a4 <tactile_bridge_reset>
      return I2C_FAIL;
 8002a54:	4620      	mov	r0, r4
  }
  if (bridge_state == 0xf0)
    return I2C_SUCCESS;
  else
    return I2C_FAIL;
}
 8002a56:	b002      	add	sp, #8
 8002a58:	bd70      	pop	{r4, r5, r6, pc}
 8002a5a:	bf00      	nop

08002a5c <tactile_i2c>:
  GPIOC->BSRRL = 1 << PORTC_I2C_BRIDGE_RESET;
  for (volatile int i = 0; i < 10000; i++) { } // then let them boot up
}

tactile_i2c_result_t tactile_i2c(uint8_t port, uint8_t address, uint8_t *data, uint8_t data_len)
{
 8002a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (port == 0 || port == 1) // these ports are MCU on-chip I2C interfaces
 8002a60:	2801      	cmp	r0, #1
  GPIOC->BSRRL = 1 << PORTC_I2C_BRIDGE_RESET;
  for (volatile int i = 0; i < 10000; i++) { } // then let them boot up
}

tactile_i2c_result_t tactile_i2c(uint8_t port, uint8_t address, uint8_t *data, uint8_t data_len)
{
 8002a62:	b0c3      	sub	sp, #268	; 0x10c
 8002a64:	468e      	mov	lr, r1
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4614      	mov	r4, r2
 8002a6a:	461d      	mov	r5, r3
  if (port == 0 || port == 1) // these ports are MCU on-chip I2C interfaces
 8002a6c:	d93b      	bls.n	8002ae6 <tactile_i2c+0x8a>
    i2c->CR1 |= I2C_CR1_STOP;
    while (i2c->SR2 & I2C_SR2_BUSY) { }
    for (volatile int i = 0; i < 3000; i++) { } // wait a bit
    return address_fail ? I2C_FAIL : I2C_SUCCESS;
  }
  else if (port == 2 || port == 3) // these ports are via SPI-I2C bridge chips
 8002a6e:	1e82      	subs	r2, r0, #2
 8002a70:	b2d6      	uxtb	r6, r2
 8002a72:	2e01      	cmp	r6, #1
 8002a74:	d905      	bls.n	8002a82 <tactile_i2c+0x26>
      return tactile_bridge_i2c_read(bridge_idx, address, data_len, data);
    else
      return tactile_bridge_i2c_write(bridge_idx, address, data_len, data);
  }
  else
    return I2C_FAIL;
 8002a76:	2000      	movs	r0, #0
}
 8002a78:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return address_fail ? I2C_FAIL : I2C_SUCCESS;
  }
  else if (port == 2 || port == 3) // these ports are via SPI-I2C bridge chips
  {
    const uint8_t bridge_idx = port - 2;
    if (address & 0x1) // is it a read transaction?
 8002a82:	f011 0301 	ands.w	r3, r1, #1
 8002a86:	f040 808f 	bne.w	8002ba8 <tactile_i2c+0x14c>
{
  uint8_t trimmed_tx_len = tx_len;
  if (trimmed_tx_len > 250)
    trimmed_tx_len = 250;
  uint8_t msg[256];
  msg[0] = 0x00; // write i2c command
 8002a8a:	f107 0208 	add.w	r2, r7, #8
 8002a8e:	2dfa      	cmp	r5, #250	; 0xfa
 8002a90:	46ac      	mov	ip, r5
 8002a92:	bf28      	it	cs
 8002a94:	f04f 0cfa 	movcs.w	ip, #250	; 0xfa
 8002a98:	7013      	strb	r3, [r2, #0]
  msg[1] = trimmed_tx_len;
  msg[2] = i2c_addr; // will always perform a write... ignores the LSB
 8002a9a:	7091      	strb	r1, [r2, #2]
  uint8_t trimmed_tx_len = tx_len;
  if (trimmed_tx_len > 250)
    trimmed_tx_len = 250;
  uint8_t msg[256];
  msg[0] = 0x00; // write i2c command
  msg[1] = trimmed_tx_len;
 8002a9c:	f882 c001 	strb.w	ip, [r2, #1]
  msg[2] = i2c_addr; // will always perform a write... ignores the LSB

  for (int i = 0; i < trimmed_tx_len; i++)
 8002aa0:	f1bc 0f00 	cmp.w	ip, #0
 8002aa4:	d00c      	beq.n	8002ac0 <tactile_i2c+0x64>
 8002aa6:	f10c 0302 	add.w	r3, ip, #2
 8002aaa:	1e61      	subs	r1, r4, #1
 8002aac:	461c      	mov	r4, r3
 8002aae:	4414      	add	r4, r2
 8002ab0:	f107 030a 	add.w	r3, r7, #10
    msg[i+3] = txd[i];
 8002ab4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8002ab8:	f803 0f01 	strb.w	r0, [r3, #1]!
  uint8_t msg[256];
  msg[0] = 0x00; // write i2c command
  msg[1] = trimmed_tx_len;
  msg[2] = i2c_addr; // will always perform a write... ignores the LSB

  for (int i = 0; i < trimmed_tx_len; i++)
 8002abc:	42a3      	cmp	r3, r4
 8002abe:	d1f9      	bne.n	8002ab4 <tactile_i2c+0x58>
    msg[i+3] = txd[i];
  tactile_bridge_spi_txrx(bridge_idx, trimmed_tx_len + 3, msg, NULL);
 8002ac0:	f10c 0103 	add.w	r1, ip, #3
 8002ac4:	4630      	mov	r0, r6
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	b2c9      	uxtb	r1, r1
 8002aca:	f7ff fb5f 	bl	800218c <tactile_bridge_spi_txrx.part.0>
  return tactile_bridge_wait_for_completion(bridge_idx, tx_len*3000);
 8002ace:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002ad2:	4630      	mov	r0, r6
 8002ad4:	fb01 f105 	mul.w	r1, r1, r5
 8002ad8:	f7ff ff8e 	bl	80029f8 <tactile_bridge_wait_for_completion>
    else
      return tactile_bridge_i2c_write(bridge_idx, address, data_len, data);
  }
  else
    return I2C_FAIL;
}
 8002adc:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    */
    I2C_TypeDef *i2c;
    if (port == 0)
      i2c = I2C1;
    else
      i2c = I2C3;
 8002ae6:	4b6e      	ldr	r3, [pc, #440]	; (8002ca0 <tactile_i2c+0x244>)
 8002ae8:	4a6e      	ldr	r2, [pc, #440]	; (8002ca4 <tactile_i2c+0x248>)
 8002aea:	2800      	cmp	r0, #0
 8002aec:	bf18      	it	ne
 8002aee:	461a      	movne	r2, r3
    i2c->CR1 |=  I2C_CR1_START;
 8002af0:	8813      	ldrh	r3, [r2, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af8:	8013      	strh	r3, [r2, #0]
    i2c->SR1 &= ~I2C_SR1_AF;
 8002afa:	8a93      	ldrh	r3, [r2, #20]
 8002afc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b00:	041b      	lsls	r3, r3, #16
 8002b02:	0c1b      	lsrs	r3, r3, #16
 8002b04:	8293      	strh	r3, [r2, #20]
    while (!(i2c->SR1 & I2C_SR1_SB)) { }
 8002b06:	8a93      	ldrh	r3, [r2, #20]
 8002b08:	07de      	lsls	r6, r3, #31
 8002b0a:	d5fc      	bpl.n	8002b06 <tactile_i2c+0xaa>
    i2c->DR = address;
 8002b0c:	fa1f f38e 	uxth.w	r3, lr
 8002b10:	8213      	strh	r3, [r2, #16]
    while (!(i2c->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF))) { }
 8002b12:	8a93      	ldrh	r3, [r2, #20]
 8002b14:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	055b      	lsls	r3, r3, #21
 8002b1e:	0d5b      	lsrs	r3, r3, #21
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f6      	beq.n	8002b12 <tactile_i2c+0xb6>
    int address_fail = (i2c->SR1 & I2C_SR1_AF) ? 1 : 0;
 8002b24:	8a90      	ldrh	r0, [r2, #20]
 8002b26:	f3c0 2080 	ubfx	r0, r0, #10, #1
    if (!data_len)
 8002b2a:	bb1d      	cbnz	r5, 8002b74 <tactile_i2c+0x118>
      i2c->CR1 |= I2C_CR1_STOP;
 8002b2c:	8813      	ldrh	r3, [r2, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b34:	8013      	strh	r3, [r2, #0]
    i2c->SR2; // un-stretch clock by reading here (?)
 8002b36:	8b13      	ldrh	r3, [r2, #24]
          while (!(i2c->SR1 & I2C_SR1_RXNE)) { } // wait for it...
          data[i] = i2c->DR;
        }
      }
    }
    i2c->CR1 |= I2C_CR1_STOP;
 8002b38:	8813      	ldrh	r3, [r2, #0]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b40:	8013      	strh	r3, [r2, #0]
    while (i2c->SR2 & I2C_SR2_BUSY) { }
 8002b42:	8b13      	ldrh	r3, [r2, #24]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f9      	bne.n	8002b42 <tactile_i2c+0xe6>
    for (volatile int i = 0; i < 3000; i++) { } // wait a bit
 8002b4e:	607b      	str	r3, [r7, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002b56:	4293      	cmp	r3, r2
 8002b58:	dc05      	bgt.n	8002b66 <tactile_i2c+0x10a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4293      	cmp	r3, r2
 8002b64:	ddf9      	ble.n	8002b5a <tactile_i2c+0xfe>
    return address_fail ? I2C_FAIL : I2C_SUCCESS;
 8002b66:	f080 0001 	eor.w	r0, r0, #1
    else
      return tactile_bridge_i2c_write(bridge_idx, address, data_len, data);
  }
  else
    return I2C_FAIL;
}
 8002b6a:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    i2c->DR = address;
    while (!(i2c->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF))) { }
    int address_fail = (i2c->SR1 & I2C_SR1_AF) ? 1 : 0;
    if (!data_len)
      i2c->CR1 |= I2C_CR1_STOP;
    i2c->SR2; // un-stretch clock by reading here (?)
 8002b74:	8b13      	ldrh	r3, [r2, #24]
    if (!address_fail && data_len)
 8002b76:	2800      	cmp	r0, #0
 8002b78:	d1de      	bne.n	8002b38 <tactile_i2c+0xdc>
    {
      if (!(address & 0x1))
 8002b7a:	f01e 0f01 	tst.w	lr, #1
 8002b7e:	d06e      	beq.n	8002c5e <tactile_i2c+0x202>
 8002b80:	1e61      	subs	r1, r4, #1
      else
      {
        // it's a read transaction
        //if (!data_len)
        //  i2c->CR1 &= ~I2C_CR1_ACK;
        for (int i = 0; i < data_len; i++)
 8002b82:	4606      	mov	r6, r0
 8002b84:	1e6c      	subs	r4, r5, #1
        {
          if (i != data_len - 1)
 8002b86:	42a6      	cmp	r6, r4
            i2c->CR1 |= I2C_CR1_ACK;
 8002b88:	8813      	ldrh	r3, [r2, #0]
        // it's a read transaction
        //if (!data_len)
        //  i2c->CR1 &= ~I2C_CR1_ACK;
        for (int i = 0; i < data_len; i++)
        {
          if (i != data_len - 1)
 8002b8a:	d07d      	beq.n	8002c88 <tactile_i2c+0x22c>
            i2c->CR1 |= I2C_CR1_ACK;
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b92:	8013      	strh	r3, [r2, #0]
          else
            i2c->CR1 &= ~I2C_CR1_ACK;
          while (!(i2c->SR1 & I2C_SR1_RXNE)) { } // wait for it...
 8002b94:	8a93      	ldrh	r3, [r2, #20]
 8002b96:	065b      	lsls	r3, r3, #25
 8002b98:	d5fc      	bpl.n	8002b94 <tactile_i2c+0x138>
      else
      {
        // it's a read transaction
        //if (!data_len)
        //  i2c->CR1 &= ~I2C_CR1_ACK;
        for (int i = 0; i < data_len; i++)
 8002b9a:	3601      	adds	r6, #1
          if (i != data_len - 1)
            i2c->CR1 |= I2C_CR1_ACK;
          else
            i2c->CR1 &= ~I2C_CR1_ACK;
          while (!(i2c->SR1 & I2C_SR1_RXNE)) { } // wait for it...
          data[i] = i2c->DR;
 8002b9c:	8a13      	ldrh	r3, [r2, #16]
 8002b9e:	f801 3f01 	strb.w	r3, [r1, #1]!
      else
      {
        // it's a read transaction
        //if (!data_len)
        //  i2c->CR1 &= ~I2C_CR1_ACK;
        for (int i = 0; i < data_len; i++)
 8002ba2:	42ae      	cmp	r6, r5
 8002ba4:	d1ef      	bne.n	8002b86 <tactile_i2c+0x12a>
 8002ba6:	e7c7      	b.n	8002b38 <tactile_i2c+0xdc>
   const uint8_t i2c_addr,
   const uint8_t rx_len,
   uint8_t *rxd)
{
  uint8_t msg[3];
  msg[0] = 0x01; // read i2c command
 8002ba8:	f04f 0c01 	mov.w	ip, #1
 8002bac:	1d3a      	adds	r2, r7, #4
 8002bae:	4630      	mov	r0, r6
 8002bb0:	2103      	movs	r1, #3
 8002bb2:	2300      	movs	r3, #0
  msg[1] = rx_len;
  msg[2] = i2c_addr; // will always performa a read... ignores the LSB
 8002bb4:	f887 e006 	strb.w	lr, [r7, #6]
   const uint8_t i2c_addr,
   const uint8_t rx_len,
   uint8_t *rxd)
{
  uint8_t msg[3];
  msg[0] = 0x01; // read i2c command
 8002bb8:	f887 c004 	strb.w	ip, [r7, #4]
  msg[1] = rx_len;
 8002bbc:	717d      	strb	r5, [r7, #5]
 8002bbe:	f7ff fae5 	bl	800218c <tactile_bridge_spi_txrx.part.0>
  msg[2] = i2c_addr; // will always performa a read... ignores the LSB
  tactile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (tactile_bridge_wait_for_completion(bridge_idx, rx_len*2300) == I2C_FAIL)
 8002bc2:	f640 01fc 	movw	r1, #2300	; 0x8fc
 8002bc6:	fb01 f105 	mul.w	r1, r1, r5
 8002bca:	4630      	mov	r0, r6
 8002bcc:	f7ff ff14 	bl	80029f8 <tactile_bridge_wait_for_completion>
 8002bd0:	46e8      	mov	r8, sp
 8002bd2:	b928      	cbnz	r0, 8002be0 <tactile_i2c+0x184>
 8002bd4:	46c5      	mov	sp, r8
    else
      return tactile_bridge_i2c_write(bridge_idx, address, data_len, data);
  }
  else
    return I2C_FAIL;
}
 8002bd6:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  msg[1] = rx_len;
  msg[2] = i2c_addr; // will always performa a read... ignores the LSB
  tactile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (tactile_bridge_wait_for_completion(bridge_idx, rx_len*2300) == I2C_FAIL)
    return I2C_FAIL;
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
 8002be0:	f105 0308 	add.w	r3, r5, #8
 8002be4:	f023 0307 	bic.w	r3, r3, #7
 8002be8:	ebad 0d03 	sub.w	sp, sp, r3
 8002bec:	466a      	mov	r2, sp
  read_msg[0] = 0x06; // read buffer command
 8002bee:	2106      	movs	r1, #6
  msg[1] = rx_len;
  msg[2] = i2c_addr; // will always performa a read... ignores the LSB
  tactile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (tactile_bridge_wait_for_completion(bridge_idx, rx_len*2300) == I2C_FAIL)
    return I2C_FAIL;
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
 8002bf0:	ebad 0d03 	sub.w	sp, sp, r3
  read_msg[0] = 0x06; // read buffer command
 8002bf4:	7011      	strb	r1, [r2, #0]
  msg[1] = rx_len;
  msg[2] = i2c_addr; // will always performa a read... ignores the LSB
  tactile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (tactile_bridge_wait_for_completion(bridge_idx, rx_len*2300) == I2C_FAIL)
    return I2C_FAIL;
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
 8002bf6:	46e9      	mov	r9, sp
 8002bf8:	1c69      	adds	r1, r5, #1
  read_msg[0] = 0x06; // read buffer command
  for (int i = 1; i < rx_len+1; i++)
 8002bfa:	2d00      	cmp	r5, #0
 8002bfc:	d04a      	beq.n	8002c94 <tactile_i2c+0x238>
 8002bfe:	4613      	mov	r3, r2
 8002c00:	eb02 0e05 	add.w	lr, r2, r5
    read_msg[i] = 0;
 8002c04:	2000      	movs	r0, #0
 8002c06:	f803 0f01 	strb.w	r0, [r3, #1]!
  tactile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (tactile_bridge_wait_for_completion(bridge_idx, rx_len*2300) == I2C_FAIL)
    return I2C_FAIL;
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
  read_msg[0] = 0x06; // read buffer command
  for (int i = 1; i < rx_len+1; i++)
 8002c0a:	4573      	cmp	r3, lr
 8002c0c:	d1fb      	bne.n	8002c06 <tactile_i2c+0x1aa>
 8002c0e:	b2c9      	uxtb	r1, r1
 8002c10:	464b      	mov	r3, r9
 8002c12:	4630      	mov	r0, r6
 8002c14:	f7ff faba 	bl	800218c <tactile_bridge_spi_txrx.part.0>
 8002c18:	4425      	add	r5, r4
 8002c1a:	4621      	mov	r1, r4
 8002c1c:	464b      	mov	r3, r9
    read_msg[i] = 0;
  tactile_bridge_spi_txrx(bridge_idx, rx_len+1, read_msg, rx_msg);
  for (int i = 1; i < rx_len+1; i++)
    rxd[i-1] = rx_msg[i];
 8002c1e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002c22:	f801 2b01 	strb.w	r2, [r1], #1
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
  read_msg[0] = 0x06; // read buffer command
  for (int i = 1; i < rx_len+1; i++)
    read_msg[i] = 0;
  tactile_bridge_spi_txrx(bridge_idx, rx_len+1, read_msg, rx_msg);
  for (int i = 1; i < rx_len+1; i++)
 8002c26:	42a9      	cmp	r1, r5
 8002c28:	d1f9      	bne.n	8002c1e <tactile_i2c+0x1c2>
    rxd[i-1] = rx_msg[i];
  for (volatile int i = 0; i < 1000; i++) { } // la di dah...
 8002c2a:	f107 0208 	add.w	r2, r7, #8
 8002c2e:	2300      	movs	r3, #0
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	6813      	ldr	r3, [r2, #0]
 8002c34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c38:	da06      	bge.n	8002c48 <tactile_i2c+0x1ec>
 8002c3a:	6813      	ldr	r3, [r2, #0]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	6813      	ldr	r3, [r2, #0]
 8002c42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c46:	dbf8      	blt.n	8002c3a <tactile_i2c+0x1de>
  uint8_t bridge_state = tactile_bridge_read_reg(bridge_idx, 0x4);
 8002c48:	4630      	mov	r0, r6
 8002c4a:	2104      	movs	r1, #4
 8002c4c:	f7ff fb04 	bl	8002258 <tactile_bridge_read_reg>
  return (bridge_state == 0xf0 ? I2C_SUCCESS : I2C_FAIL);
 8002c50:	f1a0 00f0 	sub.w	r0, r0, #240	; 0xf0
 8002c54:	46c5      	mov	sp, r8
 8002c56:	fab0 f080 	clz	r0, r0
 8002c5a:	0940      	lsrs	r0, r0, #5
 8002c5c:	e7bb      	b.n	8002bd6 <tactile_i2c+0x17a>
 8002c5e:	4621      	mov	r1, r4
 8002c60:	4425      	add	r5, r4
      if (!(address & 0x1))
      {
        // it's a write transaction
        for (int i = 0; i < data_len; i++)
        {
          i2c->DR = data[i];
 8002c62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c66:	8213      	strh	r3, [r2, #16]
          while (!(i2c->SR1 & (I2C_SR1_BTF | I2C_SR1_AF))) { }
 8002c68:	8a93      	ldrh	r3, [r2, #20]
 8002c6a:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8002c6e:	f023 0303 	bic.w	r3, r3, #3
 8002c72:	055b      	lsls	r3, r3, #21
 8002c74:	0d5b      	lsrs	r3, r3, #21
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f6      	beq.n	8002c68 <tactile_i2c+0x20c>
          if (i2c->SR1 & I2C_SR1_AF)
 8002c7a:	8a93      	ldrh	r3, [r2, #20]
 8002c7c:	055c      	lsls	r4, r3, #21
 8002c7e:	f53f af5b 	bmi.w	8002b38 <tactile_i2c+0xdc>
    if (!address_fail && data_len)
    {
      if (!(address & 0x1))
      {
        // it's a write transaction
        for (int i = 0; i < data_len; i++)
 8002c82:	42a9      	cmp	r1, r5
 8002c84:	d1ed      	bne.n	8002c62 <tactile_i2c+0x206>
 8002c86:	e757      	b.n	8002b38 <tactile_i2c+0xdc>
        for (int i = 0; i < data_len; i++)
        {
          if (i != data_len - 1)
            i2c->CR1 |= I2C_CR1_ACK;
          else
            i2c->CR1 &= ~I2C_CR1_ACK;
 8002c88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c8c:	041b      	lsls	r3, r3, #16
 8002c8e:	0c1b      	lsrs	r3, r3, #16
 8002c90:	8013      	strh	r3, [r2, #0]
 8002c92:	e77f      	b.n	8002b94 <tactile_i2c+0x138>
 8002c94:	b2c9      	uxtb	r1, r1
 8002c96:	4630      	mov	r0, r6
 8002c98:	466b      	mov	r3, sp
 8002c9a:	f7ff fa77 	bl	800218c <tactile_bridge_spi_txrx.part.0>
 8002c9e:	e7c4      	b.n	8002c2a <tactile_i2c+0x1ce>
 8002ca0:	40005c00 	.word	0x40005c00
 8002ca4:	40005400 	.word	0x40005400

08002ca8 <tactile_poll>:
  else
    return I2C_FAIL;
}

void tactile_poll(const uint_fast8_t port)
{
 8002ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (port >= NUM_TACTILE_PORTS)
 8002cac:	2803      	cmp	r0, #3
  else
    return I2C_FAIL;
}

void tactile_poll(const uint_fast8_t port)
{
 8002cae:	b085      	sub	sp, #20
 8002cb0:	4604      	mov	r4, r0
  if (port >= NUM_TACTILE_PORTS)
 8002cb2:	d902      	bls.n	8002cba <tactile_poll+0x12>
    // de-activate this sensor
    if (tactile_i2c(port, sensor_addr | I2C_READ, msg, 1) != I2C_SUCCESS)
        continue;
  }
  //printf("\r\n");
}
 8002cb4:	b005      	add	sp, #20
 8002cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
  if (port >= NUM_TACTILE_PORTS)
    return;

  // tell the MCU we want to broadcast to everybody
  if (tactile_i2c(port, BCAST_ENABLE_ADDR, NULL, 0) != I2C_SUCCESS)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	b2c5      	uxtb	r5, r0
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	210c      	movs	r1, #12
 8002cc4:	f7ff feca 	bl	8002a5c <tactile_i2c>
 8002cc8:	2801      	cmp	r0, #1
 8002cca:	d1f3      	bne.n	8002cb4 <tactile_poll+0xc>
    return;
  // tell everybody we want them to start their sampling process
  uint8_t msg[4] = { 0x12, 0x01, 0x00, 0x00};
 8002ccc:	4b3d      	ldr	r3, [pc, #244]	; (8002dc4 <tactile_poll+0x11c>)
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	9002      	str	r0, [sp, #8]
  if (tactile_i2c(port, BAROM_ADDR, msg, 2) != I2C_SUCCESS)
 8002cd2:	aa02      	add	r2, sp, #8
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	21c0      	movs	r1, #192	; 0xc0
 8002cd8:	2302      	movs	r3, #2
 8002cda:	f7ff febf 	bl	8002a5c <tactile_i2c>
 8002cde:	2801      	cmp	r0, #1
 8002ce0:	d1e8      	bne.n	8002cb4 <tactile_poll+0xc>
    return;
  // disable everybody by reading one byte...
  if (tactile_i2c(port, BCAST_DISABLE_ADDR, msg, 1) != I2C_SUCCESS)
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	210d      	movs	r1, #13
 8002ce6:	4628      	mov	r0, r5
 8002ce8:	aa02      	add	r2, sp, #8
 8002cea:	f7ff feb7 	bl	8002a5c <tactile_i2c>
 8002cee:	2801      	cmp	r0, #1
 8002cf0:	d1e0      	bne.n	8002cb4 <tactile_poll+0xc>
    return;

  for (volatile uint32_t i = 0; i < 10000; i++) { } // kill some time... SO BAD
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	9303      	str	r3, [sp, #12]
 8002cf6:	9b03      	ldr	r3, [sp, #12]
 8002cf8:	f242 720f 	movw	r2, #9999	; 0x270f
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d805      	bhi.n	8002d0c <tactile_poll+0x64>
 8002d00:	9b03      	ldr	r3, [sp, #12]
 8002d02:	3301      	adds	r3, #1
 8002d04:	9303      	str	r3, [sp, #12]
 8002d06:	9b03      	ldr	r3, [sp, #12]
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d9f9      	bls.n	8002d00 <tactile_poll+0x58>

  for (uint_fast8_t sensor_idx = 0;
       sensor_idx < g_tactile_sensors_per_port[port];
 8002d0c:	4b2e      	ldr	r3, [pc, #184]	; (8002dc8 <tactile_poll+0x120>)
 8002d0e:	f813 8004 	ldrb.w	r8, [r3, r4]
  if (tactile_i2c(port, BCAST_DISABLE_ADDR, msg, 1) != I2C_SUCCESS)
    return;

  for (volatile uint32_t i = 0; i < 10000; i++) { } // kill some time... SO BAD

  for (uint_fast8_t sensor_idx = 0;
 8002d12:	f1b8 0f00 	cmp.w	r8, #0
 8002d16:	d0cd      	beq.n	8002cb4 <tactile_poll+0xc>
    const uint16_t pressure = ((uint16_t)msg[0] << 2) | (msg[1] >> 6);
    const uint16_t temperature = ((uint16_t)msg[2] << 2) | (msg[3] >> 6);
    //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
    //       port, sensor_addr, pressure, temperature);

    const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER +
 8002d18:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  {
    uint8_t sensor_addr; // look up the sensor address
    if (port < NUM_FINGERS)
      sensor_addr = g_tactile_finger_addrs[sensor_idx];
    else
      sensor_addr = g_tactile_palm_addrs[sensor_idx];
 8002d1c:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8002dcc <tactile_poll+0x124>
       sensor_idx < g_tactile_sensors_per_port[port];
       sensor_idx++)
  {
    uint8_t sensor_addr; // look up the sensor address
    if (port < NUM_FINGERS)
      sensor_addr = g_tactile_finger_addrs[sensor_idx];
 8002d20:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8002dd0 <tactile_poll+0x128>
    //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
    //       port, sensor_addr, pressure, temperature);

    const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER +
                                          sensor_idx;
    g_state.tactile_pressures   [state_sensor_idx] = pressure;
 8002d24:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8002dd4 <tactile_poll+0x12c>
    const uint16_t pressure = ((uint16_t)msg[0] << 2) | (msg[1] >> 6);
    const uint16_t temperature = ((uint16_t)msg[2] << 2) | (msg[3] >> 6);
    //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
    //       port, sensor_addr, pressure, temperature);

    const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER +
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	2600      	movs	r6, #0
 8002d2c:	e002      	b.n	8002d34 <tactile_poll+0x8c>

  for (volatile uint32_t i = 0; i < 10000; i++) { } // kill some time... SO BAD

  for (uint_fast8_t sensor_idx = 0;
       sensor_idx < g_tactile_sensors_per_port[port];
       sensor_idx++)
 8002d2e:	3601      	adds	r6, #1
  if (tactile_i2c(port, BCAST_DISABLE_ADDR, msg, 1) != I2C_SUCCESS)
    return;

  for (volatile uint32_t i = 0; i < 10000; i++) { } // kill some time... SO BAD

  for (uint_fast8_t sensor_idx = 0;
 8002d30:	4546      	cmp	r6, r8
 8002d32:	d0bf      	beq.n	8002cb4 <tactile_poll+0xc>
       sensor_idx < g_tactile_sensors_per_port[port];
       sensor_idx++)
  {
    uint8_t sensor_addr; // look up the sensor address
    if (port < NUM_FINGERS)
 8002d34:	2c03      	cmp	r4, #3
      sensor_addr = g_tactile_finger_addrs[sensor_idx];
 8002d36:	bf14      	ite	ne
 8002d38:	f816 7009 	ldrbne.w	r7, [r6, r9]
    else
      sensor_addr = g_tactile_palm_addrs[sensor_idx];
 8002d3c:	f816 700a 	ldrbeq.w	r7, [r6, sl]
    // activate this sensor
    if (tactile_i2c(port, sensor_addr, NULL, 0) != I2C_SUCCESS)
 8002d40:	2200      	movs	r2, #0
 8002d42:	4613      	mov	r3, r2
 8002d44:	4628      	mov	r0, r5
 8002d46:	4639      	mov	r1, r7
 8002d48:	f7ff fe88 	bl	8002a5c <tactile_i2c>
 8002d4c:	2801      	cmp	r0, #1
 8002d4e:	d1ee      	bne.n	8002d2e <tactile_poll+0x86>
      continue;
    msg[0] = 0;
    // tell it we want to read the data
    if (tactile_i2c(port, BAROM_ADDR, msg, 1) != I2C_SUCCESS)
 8002d50:	4603      	mov	r3, r0
    else
      sensor_addr = g_tactile_palm_addrs[sensor_idx];
    // activate this sensor
    if (tactile_i2c(port, sensor_addr, NULL, 0) != I2C_SUCCESS)
      continue;
    msg[0] = 0;
 8002d52:	f04f 0e00 	mov.w	lr, #0
    // tell it we want to read the data
    if (tactile_i2c(port, BAROM_ADDR, msg, 1) != I2C_SUCCESS)
 8002d56:	4628      	mov	r0, r5
 8002d58:	21c0      	movs	r1, #192	; 0xc0
 8002d5a:	aa02      	add	r2, sp, #8
    else
      sensor_addr = g_tactile_palm_addrs[sensor_idx];
    // activate this sensor
    if (tactile_i2c(port, sensor_addr, NULL, 0) != I2C_SUCCESS)
      continue;
    msg[0] = 0;
 8002d5c:	f88d e008 	strb.w	lr, [sp, #8]
    // tell it we want to read the data
    if (tactile_i2c(port, BAROM_ADDR, msg, 1) != I2C_SUCCESS)
 8002d60:	f7ff fe7c 	bl	8002a5c <tactile_i2c>
 8002d64:	2801      	cmp	r0, #1
 8002d66:	d1e2      	bne.n	8002d2e <tactile_poll+0x86>
      continue;
    // now, actually read the data
    if (tactile_i2c(port, BAROM_ADDR | I2C_READ, msg, 4) != I2C_SUCCESS)
 8002d68:	2304      	movs	r3, #4
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	21c1      	movs	r1, #193	; 0xc1
 8002d6e:	aa02      	add	r2, sp, #8
 8002d70:	f7ff fe74 	bl	8002a5c <tactile_i2c>
 8002d74:	2801      	cmp	r0, #1
 8002d76:	4603      	mov	r3, r0
 8002d78:	d1d9      	bne.n	8002d2e <tactile_poll+0x86>
      continue;
    //printf("port %d mcu %d sensor %d rx 4 bytes: 0x%02x  0x%02x  0x%02x  0x%02x\r\n",
    //       port, mcu, sensor, msg[0], msg[1], msg[2], msg[3]);
    const uint16_t pressure = ((uint16_t)msg[0] << 2) | (msg[1] >> 6);
 8002d7a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002d7e:	9901      	ldr	r1, [sp, #4]
 8002d80:	f89d e008 	ldrb.w	lr, [sp, #8]
    const uint16_t temperature = ((uint16_t)msg[2] << 2) | (msg[3] >> 6);
 8002d84:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8002d88:	1871      	adds	r1, r6, r1
    // now, actually read the data
    if (tactile_i2c(port, BAROM_ADDR | I2C_READ, msg, 4) != I2C_SUCCESS)
      continue;
    //printf("port %d mcu %d sensor %d rx 4 bytes: 0x%02x  0x%02x  0x%02x  0x%02x\r\n",
    //       port, mcu, sensor, msg[0], msg[1], msg[2], msg[3]);
    const uint16_t pressure = ((uint16_t)msg[0] << 2) | (msg[1] >> 6);
 8002d8a:	0980      	lsrs	r0, r0, #6
 8002d8c:	ea40 008e 	orr.w	r0, r0, lr, lsl #2
    //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
    //       port, sensor_addr, pressure, temperature);

    const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER +
                                          sensor_idx;
    g_state.tactile_pressures   [state_sensor_idx] = pressure;
 8002d90:	f101 0e04 	add.w	lr, r1, #4
    g_state.tactile_temperatures[state_sensor_idx] = temperature;
 8002d94:	3128      	adds	r1, #40	; 0x28
    //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
    //       port, sensor_addr, pressure, temperature);

    const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER +
                                          sensor_idx;
    g_state.tactile_pressures   [state_sensor_idx] = pressure;
 8002d96:	f83b c01e 	ldrh.w	ip, [fp, lr, lsl #1]
 8002d9a:	f82b 001e 	strh.w	r0, [fp, lr, lsl #1]
    if (tactile_i2c(port, BAROM_ADDR | I2C_READ, msg, 4) != I2C_SUCCESS)
      continue;
    //printf("port %d mcu %d sensor %d rx 4 bytes: 0x%02x  0x%02x  0x%02x  0x%02x\r\n",
    //       port, mcu, sensor, msg[0], msg[1], msg[2], msg[3]);
    const uint16_t pressure = ((uint16_t)msg[0] << 2) | (msg[1] >> 6);
    const uint16_t temperature = ((uint16_t)msg[2] << 2) | (msg[3] >> 6);
 8002d9e:	f89d 000a 	ldrb.w	r0, [sp, #10]
    //       port, sensor_addr, pressure, temperature);

    const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER +
                                          sensor_idx;
    g_state.tactile_pressures   [state_sensor_idx] = pressure;
    g_state.tactile_temperatures[state_sensor_idx] = temperature;
 8002da2:	eb0b 0e41 	add.w	lr, fp, r1, lsl #1
    if (tactile_i2c(port, BAROM_ADDR | I2C_READ, msg, 4) != I2C_SUCCESS)
      continue;
    //printf("port %d mcu %d sensor %d rx 4 bytes: 0x%02x  0x%02x  0x%02x  0x%02x\r\n",
    //       port, mcu, sensor, msg[0], msg[1], msg[2], msg[3]);
    const uint16_t pressure = ((uint16_t)msg[0] << 2) | (msg[1] >> 6);
    const uint16_t temperature = ((uint16_t)msg[2] << 2) | (msg[3] >> 6);
 8002da6:	0992      	lsrs	r2, r2, #6
                                          sensor_idx;
    g_state.tactile_pressures   [state_sensor_idx] = pressure;
    g_state.tactile_temperatures[state_sensor_idx] = temperature;

    // de-activate this sensor
    if (tactile_i2c(port, sensor_addr | I2C_READ, msg, 1) != I2C_SUCCESS)
 8002da8:	f047 0101 	orr.w	r1, r7, #1
    if (tactile_i2c(port, BAROM_ADDR | I2C_READ, msg, 4) != I2C_SUCCESS)
      continue;
    //printf("port %d mcu %d sensor %d rx 4 bytes: 0x%02x  0x%02x  0x%02x  0x%02x\r\n",
    //       port, mcu, sensor, msg[0], msg[1], msg[2], msg[3]);
    const uint16_t pressure = ((uint16_t)msg[0] << 2) | (msg[1] >> 6);
    const uint16_t temperature = ((uint16_t)msg[2] << 2) | (msg[3] >> 6);
 8002dac:	ea42 0780 	orr.w	r7, r2, r0, lsl #2
    //       port, sensor_addr, pressure, temperature);

    const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER +
                                          sensor_idx;
    g_state.tactile_pressures   [state_sensor_idx] = pressure;
    g_state.tactile_temperatures[state_sensor_idx] = temperature;
 8002db0:	f8be c004 	ldrh.w	ip, [lr, #4]
 8002db4:	f8ae 7004 	strh.w	r7, [lr, #4]

    // de-activate this sensor
    if (tactile_i2c(port, sensor_addr | I2C_READ, msg, 1) != I2C_SUCCESS)
 8002db8:	4628      	mov	r0, r5
 8002dba:	aa02      	add	r2, sp, #8
 8002dbc:	f7ff fe4e 	bl	8002a5c <tactile_i2c>
 8002dc0:	e7b5      	b.n	8002d2e <tactile_poll+0x86>
 8002dc2:	bf00      	nop
 8002dc4:	0800c788 	.word	0x0800c788
 8002dc8:	0800c790 	.word	0x0800c790
 8002dcc:	0800c794 	.word	0x0800c794
 8002dd0:	0800c808 	.word	0x0800c808
 8002dd4:	200105a0 	.word	0x200105a0

08002dd8 <tactile_poll_nonblocking_tick>:
  uint8_t bridge_state = tactile_bridge_read_reg(bridge_idx, 0x4);
  return (bridge_state == 0xf0 ? I2C_SUCCESS : I2C_FAIL);
}

void tactile_poll_nonblocking_tick(const uint8_t tactile_port)
{
 8002dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  static uint_fast8_t errCount[NUM_TACTILE_PORTS] = {0};
  const uint_fast8_t tp = tactile_port; // save typing, tp stands for takktile port, rmelo19
  tactile_async_poll_state_t *tps = &tactile_poll_states[tp]; // save typing, abreviate tactile_poll_states as tps
  const uint8_t sensor_count = (tp < NUM_FINGERS ? SENSORS_PER_FINGER : NUM_PALM_SENSORS);
 8002ddc:	2802      	cmp	r0, #2
  uint8_t bridge_state = tactile_bridge_read_reg(bridge_idx, 0x4);
  return (bridge_state == 0xf0 ? I2C_SUCCESS : I2C_FAIL);
}

void tactile_poll_nonblocking_tick(const uint8_t tactile_port)
{
 8002dde:	b082      	sub	sp, #8
 8002de0:	4604      	mov	r4, r0
  static uint_fast8_t errCount[NUM_TACTILE_PORTS] = {0};
  const uint_fast8_t tp = tactile_port; // save typing, tp stands for takktile port, rmelo19
  tactile_async_poll_state_t *tps = &tactile_poll_states[tp]; // save typing, abreviate tactile_poll_states as tps
  const uint8_t sensor_count = (tp < NUM_FINGERS ? SENSORS_PER_FINGER : NUM_PALM_SENSORS);
 8002de2:	d904      	bls.n	8002dee <tactile_poll_nonblocking_tick+0x16>
  static uint32_t state_start_time_us[NUM_TACTILE_PORTS] = {0};

  // checks if the current port is within the range
  //#########################################################################################
  if (tp >= NUM_TACTILE_PORTS)
 8002de4:	2803      	cmp	r0, #3
 8002de6:	d047      	beq.n	8002e78 <tactile_poll_nonblocking_tick+0xa0>
      break;
    default:
      *tps = TPS_DONE;
      break;
  }
}
 8002de8:	b002      	add	sp, #8
 8002dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  static uint_fast8_t active_sensor_idx[NUM_TACTILE_PORTS] = {0};
  int *i2c_status = NULL;

  // getting current i2c_status, depending on the port
  //#########################################################################################
  if (tactile_port == 0 || tactile_port == 1)
 8002dee:	2801      	cmp	r0, #1
void tactile_poll_nonblocking_tick(const uint8_t tactile_port)
{
  static uint_fast8_t errCount[NUM_TACTILE_PORTS] = {0};
  const uint_fast8_t tp = tactile_port; // save typing, tp stands for takktile port, rmelo19
  tactile_async_poll_state_t *tps = &tactile_poll_states[tp]; // save typing, abreviate tactile_poll_states as tps
  const uint8_t sensor_count = (tp < NUM_FINGERS ? SENSORS_PER_FINGER : NUM_PALM_SENSORS);
 8002df0:	f04f 0809 	mov.w	r8, #9
  static uint_fast8_t active_sensor_idx[NUM_TACTILE_PORTS] = {0};
  int *i2c_status = NULL;

  // getting current i2c_status, depending on the port
  //#########################################################################################
  if (tactile_port == 0 || tactile_port == 1)
 8002df4:	d93a      	bls.n	8002e6c <tactile_poll_nonblocking_tick+0x94>
    i2c_status = (int *)&g_tactile_internal_i2c_status[tactile_port];
  else if (tactile_port == 2 || tactile_port == 3)
 8002df6:	1ea3      	subs	r3, r4, #2
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	2a01      	cmp	r2, #1
 8002dfc:	d8f4      	bhi.n	8002de8 <tactile_poll_nonblocking_tick+0x10>
    i2c_status = (int *)&g_tactile_bridged_i2c_status[tactile_port-2];
 8002dfe:	4eaf      	ldr	r6, [pc, #700]	; (80030bc <tactile_poll_nonblocking_tick+0x2e4>)
 8002e00:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8002e04:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    return; // shouldn't get here... but if somehow we do, it's time to bail


  // checking for errors on previous operations/ticks
  //#########################################################################################
  if (*i2c_status == TACTILE_I2C_SUCCESS)
 8002e08:	1c51      	adds	r1, r2, #1
 8002e0a:	f000 8082 	beq.w	8002f12 <tactile_poll_nonblocking_tick+0x13a>
  {
    errCount[tactile_port] = 0;
    err_unset(ERR_TAC_0_PROBLEM + tactile_port);
  }
  else if (*i2c_status == TACTILE_I2C_FAIL)
 8002e0e:	3202      	adds	r2, #2
 8002e10:	d04c      	beq.n	8002eac <tactile_poll_nonblocking_tick+0xd4>
      errCount[tactile_port]++;
    }
  }


  switch (*tps)
 8002e12:	4fab      	ldr	r7, [pc, #684]	; (80030c0 <tactile_poll_nonblocking_tick+0x2e8>)
 8002e14:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002e18:	2d05      	cmp	r5, #5
 8002e1a:	f000 80db 	beq.w	8002fd4 <tactile_poll_nonblocking_tick+0x1fc>
 8002e1e:	d832      	bhi.n	8002e86 <tactile_poll_nonblocking_tick+0xae>
 8002e20:	2d02      	cmp	r5, #2
 8002e22:	f000 80c4 	beq.w	8002fae <tactile_poll_nonblocking_tick+0x1d6>
 8002e26:	d97e      	bls.n	8002f26 <tactile_poll_nonblocking_tick+0x14e>
 8002e28:	2d03      	cmp	r5, #3
 8002e2a:	d063      	beq.n	8002ef4 <tactile_poll_nonblocking_tick+0x11c>
 8002e2c:	2d04      	cmp	r5, #4
 8002e2e:	d16b      	bne.n	8002f08 <tactile_poll_nonblocking_tick+0x130>
    // Wait for Start Conversion procedure and send command to read data
    //#########################################################################################
    case TPS_SENSOR_SAMPLING:
      // wait 3 ms, will keep looping back to here until condition is satisfied, see sensor
      // datasheet for more information
      if (SYSTIME - state_start_time_us[tp] > 3000)
 8002e30:	4aa4      	ldr	r2, [pc, #656]	; (80030c4 <tactile_poll_nonblocking_tick+0x2ec>)
 8002e32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e36:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e40:	1a5b      	subs	r3, r3, r1
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d9d0      	bls.n	8002de8 <tactile_poll_nonblocking_tick+0x10>
      {
        active_sensor_idx[tp] = 0;
 8002e46:	4aa0      	ldr	r2, [pc, #640]	; (80030c8 <tactile_poll_nonblocking_tick+0x2f0>)
 8002e48:	2300      	movs	r3, #0
static uint_fast8_t tactile_sensor_addr(const uint_fast8_t tactile_port,
                                        const uint_fast8_t sensor_idx)
{
  if (tactile_port >= NUM_TACTILE_PORTS)
    return 0; // bogus
  if (tactile_port < NUM_FINGERS)
 8002e4a:	2c03      	cmp	r4, #3
    case TPS_SENSOR_SAMPLING:
      // wait 3 ms, will keep looping back to here until condition is satisfied, see sensor
      // datasheet for more information
      if (SYSTIME - state_start_time_us[tp] > 3000)
      {
        active_sensor_idx[tp] = 0;
 8002e4c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
static uint_fast8_t tactile_sensor_addr(const uint_fast8_t tactile_port,
                                        const uint_fast8_t sensor_idx)
{
  if (tactile_port >= NUM_TACTILE_PORTS)
    return 0; // bogus
  if (tactile_port < NUM_FINGERS)
 8002e50:	f000 80dc 	beq.w	800300c <tactile_poll_nonblocking_tick+0x234>
      // datasheet for more information
      if (SYSTIME - state_start_time_us[tp] > 3000)
      {
        active_sensor_idx[tp] = 0;
        const uint8_t sensor_addr = tactile_sensor_addr(tp, 0);
        *tps = TPS_SELECT_SENSOR;
 8002e54:	f04f 0205 	mov.w	r2, #5
 8002e58:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
//     tactile_i2c_async_start(tp, BCAST_ENABLE_ADDR, NULL, 0);
//     tactile_i2c_async_start(tp, BCAST_DISABLE_ADDR, NULL, 1);
//#########################################################################################
void tactile_i2c_async_start(const uint8_t port, const uint8_t address, uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS)
 8002e5c:	d8c4      	bhi.n	8002de8 <tactile_poll_nonblocking_tick+0x10>
 8002e5e:	4619      	mov	r1, r3
 8002e60:	2200      	movs	r2, #0
 8002e62:	4620      	mov	r0, r4
 8002e64:	4613      	mov	r3, r2
 8002e66:	f7ff fa15 	bl	8002294 <tactile_i2c_async_start.part.1>
 8002e6a:	e7bd      	b.n	8002de8 <tactile_poll_nonblocking_tick+0x10>
  int *i2c_status = NULL;

  // getting current i2c_status, depending on the port
  //#########################################################################################
  if (tactile_port == 0 || tactile_port == 1)
    i2c_status = (int *)&g_tactile_internal_i2c_status[tactile_port];
 8002e6c:	4b97      	ldr	r3, [pc, #604]	; (80030cc <tactile_poll_nonblocking_tick+0x2f4>)
 8002e6e:	eb03 0680 	add.w	r6, r3, r0, lsl #2
 8002e72:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8002e76:	e7c7      	b.n	8002e08 <tactile_poll_nonblocking_tick+0x30>
  else if (tactile_port == 2 || tactile_port == 3)
 8002e78:	1ea3      	subs	r3, r4, #2
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	2a01      	cmp	r2, #1
void tactile_poll_nonblocking_tick(const uint8_t tactile_port)
{
  static uint_fast8_t errCount[NUM_TACTILE_PORTS] = {0};
  const uint_fast8_t tp = tactile_port; // save typing, tp stands for takktile port, rmelo19
  tactile_async_poll_state_t *tps = &tactile_poll_states[tp]; // save typing, abreviate tactile_poll_states as tps
  const uint8_t sensor_count = (tp < NUM_FINGERS ? SENSORS_PER_FINGER : NUM_PALM_SENSORS);
 8002e7e:	f04f 080b 	mov.w	r8, #11

  // getting current i2c_status, depending on the port
  //#########################################################################################
  if (tactile_port == 0 || tactile_port == 1)
    i2c_status = (int *)&g_tactile_internal_i2c_status[tactile_port];
  else if (tactile_port == 2 || tactile_port == 3)
 8002e82:	d8b1      	bhi.n	8002de8 <tactile_poll_nonblocking_tick+0x10>
 8002e84:	e7bb      	b.n	8002dfe <tactile_poll_nonblocking_tick+0x26>
      errCount[tactile_port]++;
    }
  }


  switch (*tps)
 8002e86:	2d07      	cmp	r5, #7
 8002e88:	d074      	beq.n	8002f74 <tactile_poll_nonblocking_tick+0x19c>
 8002e8a:	d37d      	bcc.n	8002f88 <tactile_poll_nonblocking_tick+0x1b0>
 8002e8c:	2d08      	cmp	r5, #8
 8002e8e:	d017      	beq.n	8002ec0 <tactile_poll_nonblocking_tick+0xe8>
 8002e90:	3501      	adds	r5, #1
 8002e92:	d139      	bne.n	8002f08 <tactile_poll_nonblocking_tick+0x130>
  {
    // Takktile Poll State, first tick
    //#########################################################################################
    case TPS_DONE: // initial state. kick things off.
      *tps = TPS_BCAST_ENABLE;
 8002e94:	2301      	movs	r3, #1
//     tactile_i2c_async_start(tp, BCAST_ENABLE_ADDR, NULL, 0);
//     tactile_i2c_async_start(tp, BCAST_DISABLE_ADDR, NULL, 1);
//#########################################################################################
void tactile_i2c_async_start(const uint8_t port, const uint8_t address, uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS)
 8002e96:	2c03      	cmp	r4, #3
  switch (*tps)
  {
    // Takktile Poll State, first tick
    //#########################################################################################
    case TPS_DONE: // initial state. kick things off.
      *tps = TPS_BCAST_ENABLE;
 8002e98:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
//     tactile_i2c_async_start(tp, BCAST_ENABLE_ADDR, NULL, 0);
//     tactile_i2c_async_start(tp, BCAST_DISABLE_ADDR, NULL, 1);
//#########################################################################################
void tactile_i2c_async_start(const uint8_t port, const uint8_t address, uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS)
 8002e9c:	d8a4      	bhi.n	8002de8 <tactile_poll_nonblocking_tick+0x10>
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	210c      	movs	r1, #12
 8002ea6:	f7ff f9f5 	bl	8002294 <tactile_i2c_async_start.part.1>
 8002eaa:	e79d      	b.n	8002de8 <tactile_poll_nonblocking_tick+0x10>
    errCount[tactile_port] = 0;
    err_unset(ERR_TAC_0_PROBLEM + tactile_port);
  }
  else if (*i2c_status == TACTILE_I2C_FAIL)
  {
    if (errCount[tactile_port] > 100)
 8002eac:	4a88      	ldr	r2, [pc, #544]	; (80030d0 <tactile_poll_nonblocking_tick+0x2f8>)
 8002eae:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8002eb2:	2b64      	cmp	r3, #100	; 0x64
 8002eb4:	f200 80a4 	bhi.w	8003000 <tactile_poll_nonblocking_tick+0x228>
    {
      err_set(ERR_TAC_0_PROBLEM + tactile_port);
    }
    else
    {
      errCount[tactile_port]++;
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8002ebe:	e7a8      	b.n	8002e12 <tactile_poll_nonblocking_tick+0x3a>
      break;

    // Tell ATTiny to turn off specified sensor
    //#########################################################################################
    case TPS_DESELECT_SENSOR:
      tactile_i2c_async_tick(tp);
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	f7ff fc65 	bl	8002790 <tactile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS || *i2c_status == TACTILE_I2C_FAIL)
 8002ec6:	6833      	ldr	r3, [r6, #0]
 8002ec8:	3302      	adds	r3, #2
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d88c      	bhi.n	8002de8 <tactile_poll_nonblocking_tick+0x10>
      {
        active_sensor_idx[tp]++;
 8002ece:	4a7e      	ldr	r2, [pc, #504]	; (80030c8 <tactile_poll_nonblocking_tick+0x2f0>)
 8002ed0:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8002ed4:	3301      	adds	r3, #1
        if (active_sensor_idx[tp] >= sensor_count)
 8002ed6:	4543      	cmp	r3, r8
    //#########################################################################################
    case TPS_DESELECT_SENSOR:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS || *i2c_status == TACTILE_I2C_FAIL)
      {
        active_sensor_idx[tp]++;
 8002ed8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        if (active_sensor_idx[tp] >= sensor_count)
 8002edc:	d214      	bcs.n	8002f08 <tactile_poll_nonblocking_tick+0x130>
        {
          *tps = TPS_DONE;
        }
        else
        {
          *tps = TPS_SELECT_SENSOR;
 8002ede:	2205      	movs	r2, #5
static uint_fast8_t tactile_sensor_addr(const uint_fast8_t tactile_port,
                                        const uint_fast8_t sensor_idx)
{
  if (tactile_port >= NUM_TACTILE_PORTS)
    return 0; // bogus
  if (tactile_port < NUM_FINGERS)
 8002ee0:	2c03      	cmp	r4, #3
        {
          *tps = TPS_DONE;
        }
        else
        {
          *tps = TPS_SELECT_SENSOR;
 8002ee2:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
static uint_fast8_t tactile_sensor_addr(const uint_fast8_t tactile_port,
                                        const uint_fast8_t sensor_idx)
{
  if (tactile_port >= NUM_TACTILE_PORTS)
    return 0; // bogus
  if (tactile_port < NUM_FINGERS)
 8002ee6:	f000 80e6 	beq.w	80030b6 <tactile_poll_nonblocking_tick+0x2de>
    return g_tactile_finger_addrs[sensor_idx];
 8002eea:	4a7a      	ldr	r2, [pc, #488]	; (80030d4 <tactile_poll_nonblocking_tick+0x2fc>)
 8002eec:	5cd1      	ldrb	r1, [r2, r3]
//     tactile_i2c_async_start(tp, BCAST_ENABLE_ADDR, NULL, 0);
//     tactile_i2c_async_start(tp, BCAST_DISABLE_ADDR, NULL, 1);
//#########################################################################################
void tactile_i2c_async_start(const uint8_t port, const uint8_t address, uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS)
 8002eee:	f63f af7b 	bhi.w	8002de8 <tactile_poll_nonblocking_tick+0x10>
 8002ef2:	e7b5      	b.n	8002e60 <tactile_poll_nonblocking_tick+0x88>
      break;

    // Turn off all sensors
    //#########################################################################################
    case TPS_BCAST_DISABLE:
      tactile_i2c_async_tick(tp);
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f7ff fc4b 	bl	8002790 <tactile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS)
 8002efa:	6833      	ldr	r3, [r6, #0]
 8002efc:	1c5d      	adds	r5, r3, #1
 8002efe:	f000 80d0 	beq.w	80030a2 <tactile_poll_nonblocking_tick+0x2ca>
    case TPS_TX_READ_DATA_CMD:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        *tps = TPS_READ_DATA;
        tactile_i2c_async_start(tp, BAROM_ADDR | I2C_READ, NULL, 4);
      } else if (*i2c_status == TACTILE_I2C_FAIL) {
 8002f02:	3302      	adds	r3, #2
 8002f04:	f47f af70 	bne.w	8002de8 <tactile_poll_nonblocking_tick+0x10>
          tactile_i2c_async_start(tp, sensor_addr, NULL, 0);
        }
      }
      break;
    default:
      *tps = TPS_DONE;
 8002f08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f0c:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
      break;
 8002f10:	e76a      	b.n	8002de8 <tactile_poll_nonblocking_tick+0x10>

  // checking for errors on previous operations/ticks
  //#########################################################################################
  if (*i2c_status == TACTILE_I2C_SUCCESS)
  {
    errCount[tactile_port] = 0;
 8002f12:	4b6f      	ldr	r3, [pc, #444]	; (80030d0 <tactile_poll_nonblocking_tick+0x2f8>)
    err_unset(ERR_TAC_0_PROBLEM + tactile_port);
 8002f14:	f104 0008 	add.w	r0, r4, #8

  // checking for errors on previous operations/ticks
  //#########################################################################################
  if (*i2c_status == TACTILE_I2C_SUCCESS)
  {
    errCount[tactile_port] = 0;
 8002f18:	2200      	movs	r2, #0
    err_unset(ERR_TAC_0_PROBLEM + tactile_port);
 8002f1a:	b2c0      	uxtb	r0, r0

  // checking for errors on previous operations/ticks
  //#########################################################################################
  if (*i2c_status == TACTILE_I2C_SUCCESS)
  {
    errCount[tactile_port] = 0;
 8002f1c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    err_unset(ERR_TAC_0_PROBLEM + tactile_port);
 8002f20:	f000 fba0 	bl	8003664 <err_unset>
 8002f24:	e775      	b.n	8002e12 <tactile_poll_nonblocking_tick+0x3a>
      errCount[tactile_port]++;
    }
  }


  switch (*tps)
 8002f26:	2d01      	cmp	r5, #1
 8002f28:	d1ee      	bne.n	8002f08 <tactile_poll_nonblocking_tick+0x130>
      break;

    // Tell ATTiny to turn all sensors
    //#########################################################################################
    case TPS_BCAST_ENABLE:
      tactile_i2c_async_tick(tp);
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	f7ff fc30 	bl	8002790 <tactile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS)
 8002f30:	6833      	ldr	r3, [r6, #0]
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	f000 80a5 	beq.w	8003082 <tactile_poll_nonblocking_tick+0x2aa>
        uint8_t msg[2] = { 0x12, 0x01 };

        *tps = TPS_BCAST_START_SAMPLING;
        tactile_i2c_async_start(tp, BAROM_ADDR, msg, 2);
      }
      else if (*i2c_status == TACTILE_I2C_FAIL)
 8002f38:	3302      	adds	r3, #2
 8002f3a:	f47f af55 	bne.w	8002de8 <tactile_poll_nonblocking_tick+0x10>
      {
        *tps = TPS_DONE;
 8002f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        leds_on(0);
 8002f42:	2000      	movs	r0, #0
        *tps = TPS_BCAST_START_SAMPLING;
        tactile_i2c_async_start(tp, BAROM_ADDR, msg, 2);
      }
      else if (*i2c_status == TACTILE_I2C_FAIL)
      {
        *tps = TPS_DONE;
 8002f44:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
        leds_on(0);
 8002f48:	f7fd fce6 	bl	8000918 <leds_on>
        leds_on(1);
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	f7fd fce3 	bl	8000918 <leds_on>
        leds_on(2);
 8002f52:	2002      	movs	r0, #2
 8002f54:	f7fd fce0 	bl	8000918 <leds_on>
        leds_on(3);
 8002f58:	2003      	movs	r0, #3
 8002f5a:	f7fd fcdd 	bl	8000918 <leds_on>
        int mytime = SYSTIME;
 8002f5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
        while(SYSTIME - mytime > 10000);
 8002f62:	4618      	mov	r0, r3
        *tps = TPS_DONE;
        leds_on(0);
        leds_on(1);
        leds_on(2);
        leds_on(3);
        int mytime = SYSTIME;
 8002f64:	6a59      	ldr	r1, [r3, #36]	; 0x24
        while(SYSTIME - mytime > 10000);
 8002f66:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f6a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f6c:	1a5b      	subs	r3, r3, r1
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d8fb      	bhi.n	8002f6a <tactile_poll_nonblocking_tick+0x192>
 8002f72:	e739      	b.n	8002de8 <tactile_poll_nonblocking_tick+0x10>
      break;

    // Reads pressure/temperature 4 bytes of data
    //#########################################################################################
    case TPS_READ_DATA:
      tactile_i2c_async_tick(tp);
 8002f74:	4620      	mov	r0, r4
 8002f76:	f7ff fc0b 	bl	8002790 <tactile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
 8002f7a:	6833      	ldr	r3, [r6, #0]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	d049      	beq.n	8003014 <tactile_poll_nonblocking_tick+0x23c>
        //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
        //       tp, sensor_addr, pressure, temperature);
        *tps = TPS_DESELECT_SENSOR;
        tactile_i2c_async_start(tp, sensor_addr | I2C_READ, NULL, 1);
      }
      else if (*i2c_status == TACTILE_I2C_FAIL)
 8002f80:	3302      	adds	r3, #2
 8002f82:	f47f af31 	bne.w	8002de8 <tactile_poll_nonblocking_tick+0x10>
 8002f86:	e7a2      	b.n	8002ece <tactile_poll_nonblocking_tick+0xf6>
      break;

    // Asks the sensor for 4 bytes of data
    //#########################################################################################
    case TPS_TX_READ_DATA_CMD:
      tactile_i2c_async_tick(tp);
 8002f88:	4620      	mov	r0, r4
 8002f8a:	f7ff fc01 	bl	8002790 <tactile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
 8002f8e:	6833      	ldr	r3, [r6, #0]
 8002f90:	1c59      	adds	r1, r3, #1
 8002f92:	d1b6      	bne.n	8002f02 <tactile_poll_nonblocking_tick+0x12a>
        *tps = TPS_READ_DATA;
 8002f94:	2307      	movs	r3, #7
//     tactile_i2c_async_start(tp, BCAST_ENABLE_ADDR, NULL, 0);
//     tactile_i2c_async_start(tp, BCAST_DISABLE_ADDR, NULL, 1);
//#########################################################################################
void tactile_i2c_async_start(const uint8_t port, const uint8_t address, uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS)
 8002f96:	2c03      	cmp	r4, #3
    // Asks the sensor for 4 bytes of data
    //#########################################################################################
    case TPS_TX_READ_DATA_CMD:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        *tps = TPS_READ_DATA;
 8002f98:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
//     tactile_i2c_async_start(tp, BCAST_ENABLE_ADDR, NULL, 0);
//     tactile_i2c_async_start(tp, BCAST_DISABLE_ADDR, NULL, 1);
//#########################################################################################
void tactile_i2c_async_start(const uint8_t port, const uint8_t address, uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS)
 8002f9c:	f63f af24 	bhi.w	8002de8 <tactile_poll_nonblocking_tick+0x10>
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	21c1      	movs	r1, #193	; 0xc1
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	f7ff f974 	bl	8002294 <tactile_i2c_async_start.part.1>
 8002fac:	e71c      	b.n	8002de8 <tactile_poll_nonblocking_tick+0x10>
      break;

    // Send Start Conversion Sequence to Barometers
    //#########################################################################################
    case TPS_BCAST_START_SAMPLING:
      tactile_i2c_async_tick(tp);
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f7ff fbee 	bl	8002790 <tactile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS)
 8002fb4:	6833      	ldr	r3, [r6, #0]
 8002fb6:	1c5e      	adds	r6, r3, #1
 8002fb8:	d1a3      	bne.n	8002f02 <tactile_poll_nonblocking_tick+0x12a>
      {
        *tps = TPS_BCAST_DISABLE;
 8002fba:	2303      	movs	r3, #3
//     tactile_i2c_async_start(tp, BCAST_ENABLE_ADDR, NULL, 0);
//     tactile_i2c_async_start(tp, BCAST_DISABLE_ADDR, NULL, 1);
//#########################################################################################
void tactile_i2c_async_start(const uint8_t port, const uint8_t address, uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS)
 8002fbc:	429c      	cmp	r4, r3
    //#########################################################################################
    case TPS_BCAST_START_SAMPLING:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS)
      {
        *tps = TPS_BCAST_DISABLE;
 8002fbe:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
//     tactile_i2c_async_start(tp, BCAST_ENABLE_ADDR, NULL, 0);
//     tactile_i2c_async_start(tp, BCAST_DISABLE_ADDR, NULL, 1);
//#########################################################################################
void tactile_i2c_async_start(const uint8_t port, const uint8_t address, uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS)
 8002fc2:	f63f af11 	bhi.w	8002de8 <tactile_poll_nonblocking_tick+0x10>
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	210d      	movs	r1, #13
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2301      	movs	r3, #1
 8002fce:	f7ff f961 	bl	8002294 <tactile_i2c_async_start.part.1>
 8002fd2:	e709      	b.n	8002de8 <tactile_poll_nonblocking_tick+0x10>
      break;

    // Tell ATTiny to select/turn on desired sensor
    //#########################################################################################
    case TPS_SELECT_SENSOR:
      tactile_i2c_async_tick(tp);
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	f7ff fbdb 	bl	8002790 <tactile_i2c_async_tick>
      if (*i2c_status == TACTILE_I2C_SUCCESS)
 8002fda:	6833      	ldr	r3, [r6, #0]
 8002fdc:	1c58      	adds	r0, r3, #1
 8002fde:	d190      	bne.n	8002f02 <tactile_poll_nonblocking_tick+0x12a>
      {
        uint8_t msg = 0;
 8002fe0:	2200      	movs	r2, #0
        *tps = TPS_TX_READ_DATA_CMD;
 8002fe2:	2306      	movs	r3, #6
//     tactile_i2c_async_start(tp, BCAST_ENABLE_ADDR, NULL, 0);
//     tactile_i2c_async_start(tp, BCAST_DISABLE_ADDR, NULL, 1);
//#########################################################################################
void tactile_i2c_async_start(const uint8_t port, const uint8_t address, uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS)
 8002fe4:	2c03      	cmp	r4, #3
    //#########################################################################################
    case TPS_SELECT_SENSOR:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS)
      {
        uint8_t msg = 0;
 8002fe6:	f88d 2004 	strb.w	r2, [sp, #4]
        *tps = TPS_TX_READ_DATA_CMD;
 8002fea:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
//     tactile_i2c_async_start(tp, BCAST_ENABLE_ADDR, NULL, 0);
//     tactile_i2c_async_start(tp, BCAST_DISABLE_ADDR, NULL, 1);
//#########################################################################################
void tactile_i2c_async_start(const uint8_t port, const uint8_t address, uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS)
 8002fee:	f63f aefb 	bhi.w	8002de8 <tactile_poll_nonblocking_tick+0x10>
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	21c0      	movs	r1, #192	; 0xc0
 8002ff6:	aa01      	add	r2, sp, #4
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f7ff f94b 	bl	8002294 <tactile_i2c_async_start.part.1>
 8002ffe:	e6f3      	b.n	8002de8 <tactile_poll_nonblocking_tick+0x10>
  }
  else if (*i2c_status == TACTILE_I2C_FAIL)
  {
    if (errCount[tactile_port] > 100)
    {
      err_set(ERR_TAC_0_PROBLEM + tactile_port);
 8003000:	f104 0008 	add.w	r0, r4, #8
 8003004:	b2c0      	uxtb	r0, r0
 8003006:	f000 fb27 	bl	8003658 <err_set>
 800300a:	e702      	b.n	8002e12 <tactile_poll_nonblocking_tick+0x3a>
      // datasheet for more information
      if (SYSTIME - state_start_time_us[tp] > 3000)
      {
        active_sensor_idx[tp] = 0;
        const uint8_t sensor_addr = tactile_sensor_addr(tp, 0);
        *tps = TPS_SELECT_SENSOR;
 800300c:	2305      	movs	r3, #5
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	2160      	movs	r1, #96	; 0x60
 8003012:	e725      	b.n	8002e60 <tactile_poll_nonblocking_tick+0x88>
    // Reads pressure/temperature 4 bytes of data
    //#########################################################################################
    case TPS_READ_DATA:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        uint8_t sensor_addr = tactile_sensor_addr(tp, active_sensor_idx[tp]);
 8003014:	4b2c      	ldr	r3, [pc, #176]	; (80030c8 <tactile_poll_nonblocking_tick+0x2f0>)
        const uint8_t *p = g_tactile_i2c_async_data[tp];
 8003016:	4830      	ldr	r0, [pc, #192]	; (80030d8 <tactile_poll_nonblocking_tick+0x300>)
    // Reads pressure/temperature 4 bytes of data
    //#########################################################################################
    case TPS_READ_DATA:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        uint8_t sensor_addr = tactile_sensor_addr(tp, active_sensor_idx[tp]);
 8003018:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
static uint_fast8_t tactile_sensor_addr(const uint_fast8_t tactile_port,
                                        const uint_fast8_t sensor_idx)
{
  if (tactile_port >= NUM_TACTILE_PORTS)
    return 0; // bogus
  if (tactile_port < NUM_FINGERS)
 800301c:	2c03      	cmp	r4, #3
    return g_tactile_finger_addrs[sensor_idx];
 800301e:	bf14      	ite	ne
 8003020:	4b2c      	ldrne	r3, [pc, #176]	; (80030d4 <tactile_poll_nonblocking_tick+0x2fc>)
  else
    return g_tactile_palm_addrs[sensor_idx];
 8003022:	4b2e      	ldreq	r3, [pc, #184]	; (80030dc <tactile_poll_nonblocking_tick+0x304>)
 8003024:	5c99      	ldrb	r1, [r3, r2]
    //#########################################################################################
    case TPS_READ_DATA:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        uint8_t sensor_addr = tactile_sensor_addr(tp, active_sensor_idx[tp]);
        const uint8_t *p = g_tactile_i2c_async_data[tp];
 8003026:	0223      	lsls	r3, r4, #8
 8003028:	eb00 0e03 	add.w	lr, r0, r3
        // Addition deals with small wraps
        const uint16_t pressure = 510 - (p[0]<200 ? ((uint16_t)p[0] + 255) : ((uint16_t)p[0]));
 800302c:	5cc3      	ldrb	r3, [r0, r3]
        const uint16_t temperature = ((uint16_t)p[2] << 2) | (p[3] >> 6);
 800302e:	f89e 5003 	ldrb.w	r5, [lr, #3]
 8003032:	f89e e002 	ldrb.w	lr, [lr, #2]
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        uint8_t sensor_addr = tactile_sensor_addr(tp, active_sensor_idx[tp]);
        const uint8_t *p = g_tactile_i2c_async_data[tp];
        // Addition deals with small wraps
        const uint16_t pressure = 510 - (p[0]<200 ? ((uint16_t)p[0] + 255) : ((uint16_t)p[0]));
 8003036:	2bc7      	cmp	r3, #199	; 0xc7
 8003038:	bf94      	ite	ls
 800303a:	f1c3 03ff 	rsbls	r3, r3, #255	; 0xff
 800303e:	f5c3 73ff 	rsbhi	r3, r3, #510	; 0x1fe
 8003042:	b298      	uxth	r0, r3
        const uint16_t temperature = ((uint16_t)p[2] << 2) | (p[3] >> 6);
        const uint_fast8_t state_sensor_idx = tp * SENSORS_PER_FINGER +
 8003044:	2309      	movs	r3, #9
 8003046:	fb13 2204 	smlabb	r2, r3, r4, r2
                                              active_sensor_idx[tp];
        g_state.tactile_pressures   [state_sensor_idx] = pressure;
 800304a:	1d16      	adds	r6, r2, #4
 800304c:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <tactile_poll_nonblocking_tick+0x308>)
        g_state.tactile_temperatures[state_sensor_idx] = temperature;
 800304e:	3228      	adds	r2, #40	; 0x28
        // Addition deals with small wraps
        const uint16_t pressure = 510 - (p[0]<200 ? ((uint16_t)p[0] + 255) : ((uint16_t)p[0]));
        const uint16_t temperature = ((uint16_t)p[2] << 2) | (p[3] >> 6);
        const uint_fast8_t state_sensor_idx = tp * SENSORS_PER_FINGER +
                                              active_sensor_idx[tp];
        g_state.tactile_pressures   [state_sensor_idx] = pressure;
 8003050:	f833 c016 	ldrh.w	ip, [r3, r6, lsl #1]
 8003054:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
        g_state.tactile_temperatures[state_sensor_idx] = temperature;
 8003058:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if (*i2c_status == TACTILE_I2C_SUCCESS) {
        uint8_t sensor_addr = tactile_sensor_addr(tp, active_sensor_idx[tp]);
        const uint8_t *p = g_tactile_i2c_async_data[tp];
        // Addition deals with small wraps
        const uint16_t pressure = 510 - (p[0]<200 ? ((uint16_t)p[0] + 255) : ((uint16_t)p[0]));
        const uint16_t temperature = ((uint16_t)p[2] << 2) | (p[3] >> 6);
 800305c:	09aa      	lsrs	r2, r5, #6
 800305e:	ea42 028e 	orr.w	r2, r2, lr, lsl #2
                                              active_sensor_idx[tp];
        g_state.tactile_pressures   [state_sensor_idx] = pressure;
        g_state.tactile_temperatures[state_sensor_idx] = temperature;
        //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
        //       tp, sensor_addr, pressure, temperature);
        *tps = TPS_DESELECT_SENSOR;
 8003062:	2008      	movs	r0, #8
//     tactile_i2c_async_start(tp, BCAST_ENABLE_ADDR, NULL, 0);
//     tactile_i2c_async_start(tp, BCAST_DISABLE_ADDR, NULL, 1);
//#########################################################################################
void tactile_i2c_async_start(const uint8_t port, const uint8_t address, uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS)
 8003064:	2c03      	cmp	r4, #3
        const uint16_t pressure = 510 - (p[0]<200 ? ((uint16_t)p[0] + 255) : ((uint16_t)p[0]));
        const uint16_t temperature = ((uint16_t)p[2] << 2) | (p[3] >> 6);
        const uint_fast8_t state_sensor_idx = tp * SENSORS_PER_FINGER +
                                              active_sensor_idx[tp];
        g_state.tactile_pressures   [state_sensor_idx] = pressure;
        g_state.tactile_temperatures[state_sensor_idx] = temperature;
 8003066:	889d      	ldrh	r5, [r3, #4]
        //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
        //       tp, sensor_addr, pressure, temperature);
        *tps = TPS_DESELECT_SENSOR;
 8003068:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
        const uint16_t pressure = 510 - (p[0]<200 ? ((uint16_t)p[0] + 255) : ((uint16_t)p[0]));
        const uint16_t temperature = ((uint16_t)p[2] << 2) | (p[3] >> 6);
        const uint_fast8_t state_sensor_idx = tp * SENSORS_PER_FINGER +
                                              active_sensor_idx[tp];
        g_state.tactile_pressures   [state_sensor_idx] = pressure;
        g_state.tactile_temperatures[state_sensor_idx] = temperature;
 800306c:	809a      	strh	r2, [r3, #4]
//     tactile_i2c_async_start(tp, BCAST_ENABLE_ADDR, NULL, 0);
//     tactile_i2c_async_start(tp, BCAST_DISABLE_ADDR, NULL, 1);
//#########################################################################################
void tactile_i2c_async_start(const uint8_t port, const uint8_t address, uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS)
 800306e:	f63f aebb 	bhi.w	8002de8 <tactile_poll_nonblocking_tick+0x10>
 8003072:	4620      	mov	r0, r4
 8003074:	f041 0101 	orr.w	r1, r1, #1
 8003078:	2200      	movs	r2, #0
 800307a:	2301      	movs	r3, #1
 800307c:	f7ff f90a 	bl	8002294 <tactile_i2c_async_start.part.1>
 8003080:	e6b2      	b.n	8002de8 <tactile_poll_nonblocking_tick+0x10>
    case TPS_BCAST_ENABLE:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS)
      {
        // Data Conversion Sequence, see Barometer datasheet for more details
        uint8_t msg[2] = { 0x12, 0x01 };
 8003082:	4a18      	ldr	r2, [pc, #96]	; (80030e4 <tactile_poll_nonblocking_tick+0x30c>)

        *tps = TPS_BCAST_START_SAMPLING;
 8003084:	2302      	movs	r3, #2
    case TPS_BCAST_ENABLE:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS)
      {
        // Data Conversion Sequence, see Barometer datasheet for more details
        uint8_t msg[2] = { 0x12, 0x01 };
 8003086:	8812      	ldrh	r2, [r2, #0]
 8003088:	f8ad 2004 	strh.w	r2, [sp, #4]
//     tactile_i2c_async_start(tp, BCAST_ENABLE_ADDR, NULL, 0);
//     tactile_i2c_async_start(tp, BCAST_DISABLE_ADDR, NULL, 1);
//#########################################################################################
void tactile_i2c_async_start(const uint8_t port, const uint8_t address, uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS)
 800308c:	2c03      	cmp	r4, #3
      if (*i2c_status == TACTILE_I2C_SUCCESS)
      {
        // Data Conversion Sequence, see Barometer datasheet for more details
        uint8_t msg[2] = { 0x12, 0x01 };

        *tps = TPS_BCAST_START_SAMPLING;
 800308e:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
//     tactile_i2c_async_start(tp, BCAST_ENABLE_ADDR, NULL, 0);
//     tactile_i2c_async_start(tp, BCAST_DISABLE_ADDR, NULL, 1);
//#########################################################################################
void tactile_i2c_async_start(const uint8_t port, const uint8_t address, uint8_t *data, const uint8_t data_len)
{
  if (port >= NUM_TACTILE_PORTS)
 8003092:	f63f aea9 	bhi.w	8002de8 <tactile_poll_nonblocking_tick+0x10>
 8003096:	4620      	mov	r0, r4
 8003098:	aa01      	add	r2, sp, #4
 800309a:	21c0      	movs	r1, #192	; 0xc0
 800309c:	f7ff f8fa 	bl	8002294 <tactile_i2c_async_start.part.1>
 80030a0:	e6a2      	b.n	8002de8 <tactile_poll_nonblocking_tick+0x10>
    case TPS_BCAST_DISABLE:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS)
      {
        *tps = TPS_SENSOR_SAMPLING;
        state_start_time_us[tp] = SYSTIME;
 80030a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030a6:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <tactile_poll_nonblocking_tick+0x2ec>)
 80030a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030aa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    //#########################################################################################
    case TPS_BCAST_DISABLE:
      tactile_i2c_async_tick(tp);
      if (*i2c_status == TACTILE_I2C_SUCCESS)
      {
        *tps = TPS_SENSOR_SAMPLING;
 80030ae:	2304      	movs	r3, #4
 80030b0:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
 80030b4:	e698      	b.n	8002de8 <tactile_poll_nonblocking_tick+0x10>
  if (tactile_port >= NUM_TACTILE_PORTS)
    return 0; // bogus
  if (tactile_port < NUM_FINGERS)
    return g_tactile_finger_addrs[sensor_idx];
  else
    return g_tactile_palm_addrs[sensor_idx];
 80030b6:	4a09      	ldr	r2, [pc, #36]	; (80030dc <tactile_poll_nonblocking_tick+0x304>)
 80030b8:	5cd1      	ldrb	r1, [r2, r3]
 80030ba:	e6d1      	b.n	8002e60 <tactile_poll_nonblocking_tick+0x88>
 80030bc:	20010408 	.word	0x20010408
 80030c0:	20010428 	.word	0x20010428
 80030c4:	20010438 	.word	0x20010438
 80030c8:	200103f0 	.word	0x200103f0
 80030cc:	20010400 	.word	0x20010400
 80030d0:	20010410 	.word	0x20010410
 80030d4:	0800c808 	.word	0x0800c808
 80030d8:	2000fff0 	.word	0x2000fff0
 80030dc:	0800c794 	.word	0x0800c794
 80030e0:	200105a0 	.word	0x200105a0
 80030e4:	0800c78c 	.word	0x0800c78c

080030e8 <pin_set_output_type>:

void pin_set_output_type(GPIO_TypeDef *gpio, 
                         const uint8_t pin_idx,
                         const uint8_t output_type)
{
  if (output_type == PIN_OUTPUT_TYPE_OPEN_DRAIN)
 80030e8:	2a01      	cmp	r2, #1
 80030ea:	d006      	beq.n	80030fa <pin_set_output_type+0x12>
    gpio->OTYPER |= (1 << pin_idx);
  }
  else
  {
    //printf("setting pin %d to push-pull\r\n", pin_idx);
    gpio->OTYPER &= ~(1 << pin_idx);
 80030ec:	6842      	ldr	r2, [r0, #4]
 80030ee:	2301      	movs	r3, #1
 80030f0:	408b      	lsls	r3, r1
 80030f2:	ea22 0303 	bic.w	r3, r2, r3
 80030f6:	6043      	str	r3, [r0, #4]
 80030f8:	4770      	bx	lr
                         const uint8_t output_type)
{
  if (output_type == PIN_OUTPUT_TYPE_OPEN_DRAIN)
  {
    //printf("setting pin %d to open-drain\r\n", pin_idx);
    gpio->OTYPER |= (1 << pin_idx);
 80030fa:	6843      	ldr	r3, [r0, #4]
 80030fc:	408a      	lsls	r2, r1
 80030fe:	431a      	orrs	r2, r3
 8003100:	6042      	str	r2, [r0, #4]
 8003102:	4770      	bx	lr

08003104 <pin_set_alternate_function>:

void pin_set_alternate_function(GPIO_TypeDef *gpio,
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
 8003104:	290f      	cmp	r1, #15
 8003106:	d822      	bhi.n	800314e <pin_set_alternate_function+0x4a>
 8003108:	2a0f      	cmp	r2, #15
 800310a:	d820      	bhi.n	800314e <pin_set_alternate_function+0x4a>
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 800310c:	2907      	cmp	r1, #7
}

void pin_set_alternate_function(GPIO_TypeDef *gpio,
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
 800310e:	b470      	push	{r4, r5, r6}
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 8003110:	d91e      	bls.n	8003150 <pin_set_alternate_function+0x4c>
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
 8003112:	f1a1 0308 	sub.w	r3, r1, #8
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 8003116:	6a44      	ldr	r4, [r0, #36]	; 0x24
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	b2db      	uxtb	r3, r3
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 800311c:	4625      	mov	r5, r4
 800311e:	f100 0624 	add.w	r6, r0, #36	; 0x24
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
  *af_reg &= ~(0xf << reg_ofs); // zero out whatever was there before
 8003122:	240f      	movs	r4, #15
 8003124:	409c      	lsls	r4, r3
 8003126:	ea25 0404 	bic.w	r4, r5, r4
 800312a:	6034      	str	r4, [r6, #0]
  *af_reg |= function_idx << reg_ofs; // set the alternate function register
 800312c:	6834      	ldr	r4, [r6, #0]
 800312e:	409a      	lsls	r2, r3
 8003130:	4322      	orrs	r2, r4
 8003132:	6032      	str	r2, [r6, #0]
  gpio->MODER &= ~(3 << (pin_idx * 2)); // zero out whatever was there before
 8003134:	6802      	ldr	r2, [r0, #0]
 8003136:	0049      	lsls	r1, r1, #1
 8003138:	2303      	movs	r3, #3
 800313a:	408b      	lsls	r3, r1
 800313c:	ea22 0303 	bic.w	r3, r2, r3
 8003140:	6003      	str	r3, [r0, #0]
  gpio->MODER |= 2 << (pin_idx * 2); // put the GPIO in alternate-function mode
}
 8003142:	bc70      	pop	{r4, r5, r6}
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
  *af_reg &= ~(0xf << reg_ofs); // zero out whatever was there before
  *af_reg |= function_idx << reg_ofs; // set the alternate function register
  gpio->MODER &= ~(3 << (pin_idx * 2)); // zero out whatever was there before
  gpio->MODER |= 2 << (pin_idx * 2); // put the GPIO in alternate-function mode
 8003144:	6802      	ldr	r2, [r0, #0]
 8003146:	2302      	movs	r3, #2
 8003148:	408b      	lsls	r3, r1
 800314a:	4313      	orrs	r3, r2
 800314c:	6003      	str	r3, [r0, #0]
}
 800314e:	4770      	bx	lr
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 8003150:	6a04      	ldr	r4, [r0, #32]
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
 8003152:	008b      	lsls	r3, r1, #2
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 8003154:	4625      	mov	r5, r4
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
 8003156:	b2db      	uxtb	r3, r3
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 8003158:	f100 0620 	add.w	r6, r0, #32
 800315c:	e7e1      	b.n	8003122 <pin_set_alternate_function+0x1e>
 800315e:	bf00      	nop

08003160 <pin_set_output>:
  gpio->MODER |= 2 << (pin_idx * 2); // put the GPIO in alternate-function mode
}

void pin_set_output(GPIO_TypeDef *gpio, const uint8_t pin_idx)
{
  if (pin_idx > 15)
 8003160:	290f      	cmp	r1, #15
 8003162:	d80b      	bhi.n	800317c <pin_set_output+0x1c>
    return; // adios amigo
  gpio->MODER &= ~(3 << (pin_idx * 2));
 8003164:	6802      	ldr	r2, [r0, #0]
 8003166:	0049      	lsls	r1, r1, #1
 8003168:	2303      	movs	r3, #3
 800316a:	408b      	lsls	r3, r1
 800316c:	ea22 0303 	bic.w	r3, r2, r3
 8003170:	6003      	str	r3, [r0, #0]
  gpio->MODER |= 1 << (pin_idx * 2);
 8003172:	6802      	ldr	r2, [r0, #0]
 8003174:	2301      	movs	r3, #1
 8003176:	408b      	lsls	r3, r1
 8003178:	4313      	orrs	r3, r2
 800317a:	6003      	str	r3, [r0, #0]
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop

08003180 <pin_set_output_level>:

void pin_set_output_level(GPIO_TypeDef *gpio, 
                          const uint8_t pin_idx, 
                          const uint8_t pin_level)
{
  if (pin_idx > 15)
 8003180:	290f      	cmp	r1, #15
 8003182:	d804      	bhi.n	800318e <pin_set_output_level+0xe>
    return;
  if (pin_level)
    gpio->BSRRL = 1 << pin_idx;
 8003184:	2301      	movs	r3, #1
 8003186:	408b      	lsls	r3, r1
 8003188:	b29b      	uxth	r3, r3
                          const uint8_t pin_idx, 
                          const uint8_t pin_level)
{
  if (pin_idx > 15)
    return;
  if (pin_level)
 800318a:	b90a      	cbnz	r2, 8003190 <pin_set_output_level+0x10>
    gpio->BSRRL = 1 << pin_idx;
  else
    gpio->BSRRH = 1 << pin_idx;
 800318c:	8343      	strh	r3, [r0, #26]
 800318e:	4770      	bx	lr
                          const uint8_t pin_level)
{
  if (pin_idx > 15)
    return;
  if (pin_level)
    gpio->BSRRL = 1 << pin_idx;
 8003190:	8303      	strh	r3, [r0, #24]
 8003192:	4770      	bx	lr

08003194 <enc_poll>:

/*
 * Blocking call to get encoder data for all 3 encoders
 */
void enc_poll()
{
 8003194:	b4f0      	push	{r4, r5, r6, r7}
  GPIOE->BSRRH = 1 << PORTE_ENC_CS; // assert (pull down) CS
 8003196:	4a1e      	ldr	r2, [pc, #120]	; (8003210 <enc_poll+0x7c>)

/*
 * Blocking call to get encoder data for all 3 encoders
 */
void enc_poll()
{
 8003198:	b082      	sub	sp, #8
  GPIOE->BSRRH = 1 << PORTE_ENC_CS; // assert (pull down) CS
  for (volatile int i = 0; i < 10; i++) { } // needs at least 350 ns
 800319a:	2300      	movs	r3, #0
/*
 * Blocking call to get encoder data for all 3 encoders
 */
void enc_poll()
{
  GPIOE->BSRRH = 1 << PORTE_ENC_CS; // assert (pull down) CS
 800319c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031a0:	8351      	strh	r1, [r2, #26]
  for (volatile int i = 0; i < 10; i++) { } // needs at least 350 ns
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	9b00      	ldr	r3, [sp, #0]
 80031a6:	2b09      	cmp	r3, #9
 80031a8:	dc05      	bgt.n	80031b6 <enc_poll+0x22>
 80031aa:	9b00      	ldr	r3, [sp, #0]
 80031ac:	3301      	adds	r3, #1
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	9b00      	ldr	r3, [sp, #0]
 80031b2:	2b09      	cmp	r3, #9
 80031b4:	ddf9      	ble.n	80031aa <enc_poll+0x16>
  SPI4->DR; // clear the rx data register in case it has some garbage
 80031b6:	4b17      	ldr	r3, [pc, #92]	; (8003214 <enc_poll+0x80>)
 80031b8:	4c17      	ldr	r4, [pc, #92]	; (8003218 <enc_poll+0x84>)
 80031ba:	899a      	ldrh	r2, [r3, #12]
  for (int i = 0; i < NUM_ENC; i++)
  {
    SPI4->DR = 0xffff;
    while (!(SPI4->SR & SPI_SR_TXE)) { } // Wait for transmit buffer empty
 80031bc:	461e      	mov	r6, r3
 */
void enc_poll()
{
  GPIOE->BSRRH = 1 << PORTE_ENC_CS; // assert (pull down) CS
  for (volatile int i = 0; i < 10; i++) { } // needs at least 350 ns
  SPI4->DR; // clear the rx data register in case it has some garbage
 80031be:	2102      	movs	r1, #2
  for (int i = 0; i < NUM_ENC; i++)
  {
    SPI4->DR = 0xffff;
 80031c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80031c4:	819d      	strh	r5, [r3, #12]
    while (!(SPI4->SR & SPI_SR_TXE)) { } // Wait for transmit buffer empty
 80031c6:	891a      	ldrh	r2, [r3, #8]
 80031c8:	0792      	lsls	r2, r2, #30
 80031ca:	d5fc      	bpl.n	80031c6 <enc_poll+0x32>
    while (!(SPI4->SR & SPI_SR_RXNE)) { } // Wait for recieve buffer not empty
 80031cc:	891a      	ldrh	r2, [r3, #8]
 80031ce:	07d7      	lsls	r7, r2, #31
 80031d0:	d5fc      	bpl.n	80031cc <enc_poll+0x38>
    g_state.encoders[NUM_ENC-1-i] = SPI4->DR & 0x3fff;  // Idx goes 2, 1, 0
 80031d2:	89b2      	ldrh	r2, [r6, #12]
 80031d4:	f101 0050 	add.w	r0, r1, #80	; 0x50
 80031d8:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80031dc:	3901      	subs	r1, #1
 80031de:	f834 7010 	ldrh.w	r7, [r4, r0, lsl #1]
 80031e2:	f824 2010 	strh.w	r2, [r4, r0, lsl #1]
void enc_poll()
{
  GPIOE->BSRRH = 1 << PORTE_ENC_CS; // assert (pull down) CS
  for (volatile int i = 0; i < 10; i++) { } // needs at least 350 ns
  SPI4->DR; // clear the rx data register in case it has some garbage
  for (int i = 0; i < NUM_ENC; i++)
 80031e6:	1c48      	adds	r0, r1, #1
  {
    SPI4->DR = 0xffff;
    while (!(SPI4->SR & SPI_SR_TXE)) { } // Wait for transmit buffer empty
    while (!(SPI4->SR & SPI_SR_RXNE)) { } // Wait for recieve buffer not empty
    g_state.encoders[NUM_ENC-1-i] = SPI4->DR & 0x3fff;  // Idx goes 2, 1, 0
 80031e8:	f04f 0200 	mov.w	r2, #0
void enc_poll()
{
  GPIOE->BSRRH = 1 << PORTE_ENC_CS; // assert (pull down) CS
  for (volatile int i = 0; i < 10; i++) { } // needs at least 350 ns
  SPI4->DR; // clear the rx data register in case it has some garbage
  for (int i = 0; i < NUM_ENC; i++)
 80031ec:	d1ea      	bne.n	80031c4 <enc_poll+0x30>
    SPI4->DR = 0xffff;
    while (!(SPI4->SR & SPI_SR_TXE)) { } // Wait for transmit buffer empty
    while (!(SPI4->SR & SPI_SR_RXNE)) { } // Wait for recieve buffer not empty
    g_state.encoders[NUM_ENC-1-i] = SPI4->DR & 0x3fff;  // Idx goes 2, 1, 0
  }
  for (volatile int i = 0; i < 1; i++) { } // needs at least 50 ns
 80031ee:	9201      	str	r2, [sp, #4]
 80031f0:	9b01      	ldr	r3, [sp, #4]
 80031f2:	4293      	cmp	r3, r2
 80031f4:	dc05      	bgt.n	8003202 <enc_poll+0x6e>
 80031f6:	9b01      	ldr	r3, [sp, #4]
 80031f8:	3301      	adds	r3, #1
 80031fa:	9301      	str	r3, [sp, #4]
 80031fc:	9b01      	ldr	r3, [sp, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	ddf9      	ble.n	80031f6 <enc_poll+0x62>
  GPIOE->BSRRL = 1 << PORTE_ENC_CS; // de-assert (pull up) CS
 8003202:	4b03      	ldr	r3, [pc, #12]	; (8003210 <enc_poll+0x7c>)
 8003204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003208:	831a      	strh	r2, [r3, #24]
  printf("       enc: %06d  %06d  %06d\r\n",
         g_state.encoders[0],
         g_state.encoders[1],
         g_state.encoders[2]);
  */
}
 800320a:	b002      	add	sp, #8
 800320c:	bcf0      	pop	{r4, r5, r6, r7}
 800320e:	4770      	bx	lr
 8003210:	40021000 	.word	0x40021000
 8003214:	40013400 	.word	0x40013400
 8003218:	200105a0 	.word	0x200105a0

0800321c <enc_init>:
static const uint8_t LIGHT_LED_THRESHOLD = 100;

enc_async_poll_state_t enc_poll_state = { EPS_DONE };

void enc_init()
{
 800321c:	b510      	push	{r4, lr}
  printf("enc_init()\r\n");
 800321e:	4815      	ldr	r0, [pc, #84]	; (8003274 <enc_init+0x58>)
  RCC->APB2ENR |= RCC_APB2ENR_SPI4EN; // turn on SPI4

  pin_set_output(GPIOE, PORTE_ENC_CS);
 8003220:	4c15      	ldr	r4, [pc, #84]	; (8003278 <enc_init+0x5c>)

enc_async_poll_state_t enc_poll_state = { EPS_DONE };

void enc_init()
{
  printf("enc_init()\r\n");
 8003222:	f000 fb9b 	bl	800395c <puts>
  RCC->APB2ENR |= RCC_APB2ENR_SPI4EN; // turn on SPI4
 8003226:	4a15      	ldr	r2, [pc, #84]	; (800327c <enc_init+0x60>)
 8003228:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800322a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800322e:	6453      	str	r3, [r2, #68]	; 0x44

  pin_set_output(GPIOE, PORTE_ENC_CS);
 8003230:	4620      	mov	r0, r4
 8003232:	210b      	movs	r1, #11
 8003234:	f7ff ff94 	bl	8003160 <pin_set_output>
  pin_set_output_level(GPIOE, PORTE_ENC_CS, 1);
 8003238:	4620      	mov	r0, r4
 800323a:	210b      	movs	r1, #11
 800323c:	2201      	movs	r2, #1
 800323e:	f7ff ff9f 	bl	8003180 <pin_set_output_level>
  pin_set_alternate_function(GPIOE, PORTE_ENC_SCLK, 5);
 8003242:	4620      	mov	r0, r4
 8003244:	210c      	movs	r1, #12
 8003246:	2205      	movs	r2, #5
 8003248:	f7ff ff5c 	bl	8003104 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOE, PORTE_ENC_MISO, 5);
 800324c:	4620      	mov	r0, r4
 800324e:	210d      	movs	r1, #13
 8003250:	2205      	movs	r2, #5
 8003252:	f7ff ff57 	bl	8003104 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOE, PORTE_ENC_MOSI, 5);
 8003256:	4620      	mov	r0, r4
 8003258:	210e      	movs	r1, #14
 800325a:	2205      	movs	r2, #5
 800325c:	f7ff ff52 	bl	8003104 <pin_set_alternate_function>

  // spi4 is running from a 84 MHz pclk. set it up with
  // sclk = pclk/128 to be super slow for now.
  SPI4->CR1 = SPI_CR1_DFF  | // 16-bit mode
 8003260:	4b07      	ldr	r3, [pc, #28]	; (8003280 <enc_init+0x64>)
 8003262:	f640 3275 	movw	r2, #2933	; 0xb75
 8003266:	801a      	strh	r2, [r3, #0]
              SPI_CR1_CPHA | // cpha=1, cpol=0 for AS5048A
              SPI_CR1_SSM  | // software slave-select mode
              SPI_CR1_SSI  | // the value of this bit is forced onto the NSS pin and the IO value of the NSS pin is ignored.
              SPI_CR1_SPE; // SPI enable

  enc_poll(); // first one will be garbage
 8003268:	f7ff ff94 	bl	8003194 <enc_poll>
  enc_poll(); // and the second one
}
 800326c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
              SPI_CR1_SSM  | // software slave-select mode
              SPI_CR1_SSI  | // the value of this bit is forced onto the NSS pin and the IO value of the NSS pin is ignored.
              SPI_CR1_SPE; // SPI enable

  enc_poll(); // first one will be garbage
  enc_poll(); // and the second one
 8003270:	f7ff bf90 	b.w	8003194 <enc_poll>
 8003274:	0800c814 	.word	0x0800c814
 8003278:	40021000 	.word	0x40021000
 800327c:	40023800 	.word	0x40023800
 8003280:	40013400 	.word	0x40013400

08003284 <enc_poll_nonblocking_tick>:
  */
}


void enc_poll_nonblocking_tick(const uint8_t bogus __attribute__((unused)))
{
 8003284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#define AS5048B_ANGLMSB_REG 0xFE //bits 0..7
#define AS5048B_ANGLLSB_REG 0xFF //bits 0..5

#define ARDUINO_7BIT_ADDR 0x20 

  switch(enc_poll_state)
 8003286:	4c58      	ldr	r4, [pc, #352]	; (80033e8 <enc_poll_nonblocking_tick+0x164>)
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d05a      	beq.n	8003344 <enc_poll_nonblocking_tick+0xc0>
 800328e:	d344      	bcc.n	800331a <enc_poll_nonblocking_tick+0x96>
 8003290:	2b02      	cmp	r3, #2
 8003292:	d00d      	beq.n	80032b0 <enc_poll_nonblocking_tick+0x2c>
 8003294:	3301      	adds	r3, #1
 8003296:	d13c      	bne.n	8003312 <enc_poll_nonblocking_tick+0x8e>

      enc_poll_state = EPS_SPI_TXRX_DONE;
      // SPI
      //######################################
      #else
      GPIOE->BSRRH = 1 << PORTE_ENC_CS; // assert (pull down) CS
 8003298:	4954      	ldr	r1, [pc, #336]	; (80033ec <enc_poll_nonblocking_tick+0x168>)

      // start counting time
      enc_poll_state_start_time_us = SYSTIME;
 800329a:	4b55      	ldr	r3, [pc, #340]	; (80033f0 <enc_poll_nonblocking_tick+0x16c>)

      enc_poll_state = EPS_SPI_TXRX_DONE;
      // SPI
      //######################################
      #else
      GPIOE->BSRRH = 1 << PORTE_ENC_CS; // assert (pull down) CS
 800329c:	f44f 6000 	mov.w	r0, #2048	; 0x800

      // start counting time
      enc_poll_state_start_time_us = SYSTIME;
 80032a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000

      enc_poll_state = EPS_SPI_TXRX_DONE;
      // SPI
      //######################################
      #else
      GPIOE->BSRRH = 1 << PORTE_ENC_CS; // assert (pull down) CS
 80032a4:	8348      	strh	r0, [r1, #26]

      // start counting time
      enc_poll_state_start_time_us = SYSTIME;
 80032a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032a8:	601a      	str	r2, [r3, #0]

      // move to next state
      enc_poll_state = EPS_CS_ASSERTED;
 80032aa:	2300      	movs	r3, #0
 80032ac:	6023      	str	r3, [r4, #0]
      #endif
      
      break;
 80032ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      break;

    // 
    //#########################################################################################
    case EPS_SPI_TXRX_DONE:
      if (SYSTIME - enc_poll_state_start_time_us > 2)  // wait for 2us
 80032b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032b4:	4a4e      	ldr	r2, [pc, #312]	; (80033f0 <enc_poll_nonblocking_tick+0x16c>)
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	6812      	ldr	r2, [r2, #0]
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d92b      	bls.n	8003318 <enc_poll_nonblocking_tick+0x94>
      {
        if (all_the_same)
 80032c0:	4b4c      	ldr	r3, [pc, #304]	; (80033f4 <enc_poll_nonblocking_tick+0x170>)
        {
          if (all_the_same_count < LIGHT_LED_THRESHOLD)
 80032c2:	4a4d      	ldr	r2, [pc, #308]	; (80033f8 <enc_poll_nonblocking_tick+0x174>)
    // 
    //#########################################################################################
    case EPS_SPI_TXRX_DONE:
      if (SYSTIME - enc_poll_state_start_time_us > 2)  // wait for 2us
      {
        if (all_the_same)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d06b      	beq.n	80033a2 <enc_poll_nonblocking_tick+0x11e>
        {
          if (all_the_same_count < LIGHT_LED_THRESHOLD)
 80032ca:	7813      	ldrb	r3, [r2, #0]
 80032cc:	2b63      	cmp	r3, #99	; 0x63
 80032ce:	d97b      	bls.n	80033c8 <enc_poll_nonblocking_tick+0x144>

        // Error Checking
        // if all encoders are stuck
        if (all_the_same_count >= LIGHT_LED_THRESHOLD)
        {
          err_set(ERR_ENC_ALL_STUCK);
 80032d0:	2004      	movs	r0, #4
 80032d2:	f000 f9c1 	bl	8003658 <err_set>
        {
          err_unset(ERR_ENC_ALL_STUCK);
        }

        // if just encoder 1 is stuck
        if (same_count[0] >= LIGHT_LED_THRESHOLD)
 80032d6:	4d49      	ldr	r5, [pc, #292]	; (80033fc <enc_poll_nonblocking_tick+0x178>)
 80032d8:	782b      	ldrb	r3, [r5, #0]
 80032da:	2b63      	cmp	r3, #99	; 0x63
        {
          err_set(ERR_ENC_1_STUCK);
 80032dc:	f04f 0005 	mov.w	r0, #5
        {
          err_unset(ERR_ENC_ALL_STUCK);
        }

        // if just encoder 1 is stuck
        if (same_count[0] >= LIGHT_LED_THRESHOLD)
 80032e0:	d96a      	bls.n	80033b8 <enc_poll_nonblocking_tick+0x134>
        {
          err_set(ERR_ENC_1_STUCK);
 80032e2:	f000 f9b9 	bl	8003658 <err_set>
        {
          err_unset(ERR_ENC_1_STUCK);
        }

        // if just encoder 2 is stuck
        if (same_count[1] >= LIGHT_LED_THRESHOLD)
 80032e6:	786b      	ldrb	r3, [r5, #1]
 80032e8:	2b63      	cmp	r3, #99	; 0x63
        {
          err_set(ERR_ENC_2_STUCK);
 80032ea:	f04f 0006 	mov.w	r0, #6
        {
          err_unset(ERR_ENC_1_STUCK);
        }

        // if just encoder 2 is stuck
        if (same_count[1] >= LIGHT_LED_THRESHOLD)
 80032ee:	d960      	bls.n	80033b2 <enc_poll_nonblocking_tick+0x12e>
        {
          err_set(ERR_ENC_2_STUCK);
 80032f0:	f000 f9b2 	bl	8003658 <err_set>
        {
          err_unset(ERR_ENC_2_STUCK);
        }

        // if just encoder 3 is stuck
        if (same_count[2] >= LIGHT_LED_THRESHOLD)
 80032f4:	78ab      	ldrb	r3, [r5, #2]
 80032f6:	2b63      	cmp	r3, #99	; 0x63
        {
          err_set(ERR_ENC_3_STUCK);
 80032f8:	f04f 0007 	mov.w	r0, #7
        {
          err_unset(ERR_ENC_2_STUCK);
        }

        // if just encoder 3 is stuck
        if (same_count[2] >= LIGHT_LED_THRESHOLD)
 80032fc:	d956      	bls.n	80033ac <enc_poll_nonblocking_tick+0x128>
        {
          err_set(ERR_ENC_3_STUCK);
 80032fe:	f000 f9ab 	bl	8003658 <err_set>
        } else {
          err_unset(ERR_ENC_3_STUCK);
        }

        // clear chip select
        GPIOE->BSRRL = 1 << PORTE_ENC_CS; // de-assert (pull up) CS
 8003302:	4a3a      	ldr	r2, [pc, #232]	; (80033ec <enc_poll_nonblocking_tick+0x168>)
 8003304:	f44f 6100 	mov.w	r1, #2048	; 0x800

        // move to next state
        enc_poll_state = EPS_DONE;
 8003308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        } else {
          err_unset(ERR_ENC_3_STUCK);
        }

        // clear chip select
        GPIOE->BSRRL = 1 << PORTE_ENC_CS; // de-assert (pull up) CS
 800330c:	8311      	strh	r1, [r2, #24]

        // move to next state
        enc_poll_state = EPS_DONE;
 800330e:	6023      	str	r3, [r4, #0]
 8003310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}




    default:
      enc_poll_state = EPS_DONE; // shouldn't get here
 8003312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003316:	6023      	str	r3, [r4, #0]
 8003318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      break;

    // 
    //#########################################################################################
    case EPS_CS_ASSERTED:
      if (SYSTIME - enc_poll_state_start_time_us > 2) // wait for 2us
 800331a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800331e:	4a34      	ldr	r2, [pc, #208]	; (80033f0 <enc_poll_nonblocking_tick+0x16c>)
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	2b02      	cmp	r3, #2
 8003328:	d9f6      	bls.n	8003318 <enc_poll_nonblocking_tick+0x94>
      {
        all_the_same = TRUE;
 800332a:	4932      	ldr	r1, [pc, #200]	; (80033f4 <enc_poll_nonblocking_tick+0x170>)
        SPI4->DR; // clear the rx data register in case it has some garbage
 800332c:	4a34      	ldr	r2, [pc, #208]	; (8003400 <enc_poll_nonblocking_tick+0x17c>)
        enc_poll_state_word_idx = 0; //rmelo19
 800332e:	4835      	ldr	r0, [pc, #212]	; (8003404 <enc_poll_nonblocking_tick+0x180>)
    // 
    //#########################################################################################
    case EPS_CS_ASSERTED:
      if (SYSTIME - enc_poll_state_start_time_us > 2) // wait for 2us
      {
        all_the_same = TRUE;
 8003330:	2301      	movs	r3, #1
 8003332:	700b      	strb	r3, [r1, #0]
        SPI4->DR; // clear the rx data register in case it has some garbage
        enc_poll_state_word_idx = 0; //rmelo19
 8003334:	2500      	movs	r5, #0
        SPI4->DR = 0xffff; // this register has 4 bytes
 8003336:	f64f 71ff 	movw	r1, #65535	; 0xffff
    //#########################################################################################
    case EPS_CS_ASSERTED:
      if (SYSTIME - enc_poll_state_start_time_us > 2) // wait for 2us
      {
        all_the_same = TRUE;
        SPI4->DR; // clear the rx data register in case it has some garbage
 800333a:	8996      	ldrh	r6, [r2, #12]
        enc_poll_state_word_idx = 0; //rmelo19
 800333c:	6005      	str	r5, [r0, #0]
        SPI4->DR = 0xffff; // this register has 4 bytes
 800333e:	8191      	strh	r1, [r2, #12]

        // move to next state
        enc_poll_state = EPS_SPI_TXRX;
 8003340:	6023      	str	r3, [r4, #0]
 8003342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      break;

    // 
    //#########################################################################################
    case EPS_SPI_TXRX: // NUM_ENC is 3
      if ((SPI4->SR & SPI_SR_TXE) && (SPI4->SR & SPI_SR_RXNE)) // if tx is empy and rx is not empty
 8003344:	4b2e      	ldr	r3, [pc, #184]	; (8003400 <enc_poll_nonblocking_tick+0x17c>)
 8003346:	891a      	ldrh	r2, [r3, #8]
 8003348:	0791      	lsls	r1, r2, #30
 800334a:	d5e5      	bpl.n	8003318 <enc_poll_nonblocking_tick+0x94>
 800334c:	891a      	ldrh	r2, [r3, #8]
 800334e:	07d2      	lsls	r2, r2, #31
 8003350:	d5e2      	bpl.n	8003318 <enc_poll_nonblocking_tick+0x94>
      {
        uint16_t readValue =  SPI4->DR & 0x3fff; // 0b0011 1111 1111 1111

        if (readValue == g_state.encoders[NUM_ENC-1-enc_poll_state_word_idx]) // checking if encoder is stuck
 8003352:	4f2c      	ldr	r7, [pc, #176]	; (8003404 <enc_poll_nonblocking_tick+0x180>)
 8003354:	482c      	ldr	r0, [pc, #176]	; (8003408 <enc_poll_nonblocking_tick+0x184>)
 8003356:	683a      	ldr	r2, [r7, #0]
    // 
    //#########################################################################################
    case EPS_SPI_TXRX: // NUM_ENC is 3
      if ((SPI4->SR & SPI_SR_TXE) && (SPI4->SR & SPI_SR_RXNE)) // if tx is empy and rx is not empty
      {
        uint16_t readValue =  SPI4->DR & 0x3fff; // 0b0011 1111 1111 1111
 8003358:	8999      	ldrh	r1, [r3, #12]

        if (readValue == g_state.encoders[NUM_ENC-1-enc_poll_state_word_idx]) // checking if encoder is stuck
 800335a:	f1c2 0602 	rsb	r6, r2, #2
 800335e:	f106 0550 	add.w	r5, r6, #80	; 0x50
    // 
    //#########################################################################################
    case EPS_SPI_TXRX: // NUM_ENC is 3
      if ((SPI4->SR & SPI_SR_TXE) && (SPI4->SR & SPI_SR_RXNE)) // if tx is empy and rx is not empty
      {
        uint16_t readValue =  SPI4->DR & 0x3fff; // 0b0011 1111 1111 1111
 8003362:	f3c1 010d 	ubfx	r1, r1, #0, #14

        if (readValue == g_state.encoders[NUM_ENC-1-enc_poll_state_word_idx]) // checking if encoder is stuck
 8003366:	f830 3015 	ldrh.w	r3, [r0, r5, lsl #1]
 800336a:	b29b      	uxth	r3, r3
 800336c:	428b      	cmp	r3, r1
 800336e:	d032      	beq.n	80033d6 <enc_poll_nonblocking_tick+0x152>
        {
          same_count[NUM_ENC-1-enc_poll_state_word_idx]++;
        }
        else
        {
          same_count[NUM_ENC-1-enc_poll_state_word_idx] = 0;
 8003370:	f8df c088 	ldr.w	ip, [pc, #136]	; 80033fc <enc_poll_nonblocking_tick+0x178>
          all_the_same = FALSE;
 8003374:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80033f4 <enc_poll_nonblocking_tick+0x170>
        {
          same_count[NUM_ENC-1-enc_poll_state_word_idx]++;
        }
        else
        {
          same_count[NUM_ENC-1-enc_poll_state_word_idx] = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	f80c 3006 	strb.w	r3, [ip, r6]
          all_the_same = FALSE;
 800337e:	f88e 3000 	strb.w	r3, [lr]
        }

        // store value in global variable and increment index
        g_state.encoders[NUM_ENC-1-(enc_poll_state_word_idx++)] = readValue;
 8003382:	1c53      	adds	r3, r2, #1
        if (enc_poll_state_word_idx >= NUM_ENC)
 8003384:	2b02      	cmp	r3, #2
          same_count[NUM_ENC-1-enc_poll_state_word_idx] = 0;
          all_the_same = FALSE;
        }

        // store value in global variable and increment index
        g_state.encoders[NUM_ENC-1-(enc_poll_state_word_idx++)] = readValue;
 8003386:	f830 2015 	ldrh.w	r2, [r0, r5, lsl #1]
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	f820 1015 	strh.w	r1, [r0, r5, lsl #1]
        if (enc_poll_state_word_idx >= NUM_ENC)
 8003390:	d915      	bls.n	80033be <enc_poll_nonblocking_tick+0x13a>
        {
          enc_poll_state = EPS_SPI_TXRX_DONE;
 8003392:	2302      	movs	r3, #2
          enc_poll_state_start_time_us = SYSTIME;
 8003394:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000

        // store value in global variable and increment index
        g_state.encoders[NUM_ENC-1-(enc_poll_state_word_idx++)] = readValue;
        if (enc_poll_state_word_idx >= NUM_ENC)
        {
          enc_poll_state = EPS_SPI_TXRX_DONE;
 8003398:	6023      	str	r3, [r4, #0]
          enc_poll_state_start_time_us = SYSTIME;
 800339a:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <enc_poll_nonblocking_tick+0x16c>)
 800339c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            all_the_same_count++;
          }
        }
        else
        {
          all_the_same_count = 0;
 80033a2:	7013      	strb	r3, [r2, #0]
        {
          err_set(ERR_ENC_ALL_STUCK);
        }
        else
        {
          err_unset(ERR_ENC_ALL_STUCK);
 80033a4:	2004      	movs	r0, #4
 80033a6:	f000 f95d 	bl	8003664 <err_unset>
 80033aa:	e794      	b.n	80032d6 <enc_poll_nonblocking_tick+0x52>
        // if just encoder 3 is stuck
        if (same_count[2] >= LIGHT_LED_THRESHOLD)
        {
          err_set(ERR_ENC_3_STUCK);
        } else {
          err_unset(ERR_ENC_3_STUCK);
 80033ac:	f000 f95a 	bl	8003664 <err_unset>
 80033b0:	e7a7      	b.n	8003302 <enc_poll_nonblocking_tick+0x7e>
        {
          err_set(ERR_ENC_2_STUCK);
        } 
        else
        {
          err_unset(ERR_ENC_2_STUCK);
 80033b2:	f000 f957 	bl	8003664 <err_unset>
 80033b6:	e79d      	b.n	80032f4 <enc_poll_nonblocking_tick+0x70>
        {
          err_set(ERR_ENC_1_STUCK);
        }
        else
        {
          err_unset(ERR_ENC_1_STUCK);
 80033b8:	f000 f954 	bl	8003664 <err_unset>
 80033bc:	e793      	b.n	80032e6 <enc_poll_nonblocking_tick+0x62>
          enc_poll_state = EPS_SPI_TXRX_DONE;
          enc_poll_state_start_time_us = SYSTIME;
        }
        else
        {
          SPI4->DR = 0xffff; // waiting for another set of data
 80033be:	4b10      	ldr	r3, [pc, #64]	; (8003400 <enc_poll_nonblocking_tick+0x17c>)
 80033c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033c4:	819a      	strh	r2, [r3, #12]
 80033c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      {
        if (all_the_same)
        {
          if (all_the_same_count < LIGHT_LED_THRESHOLD)
          {
            all_the_same_count++;
 80033c8:	3301      	adds	r3, #1
 80033ca:	b2db      	uxtb	r3, r3
        }


        // Error Checking
        // if all encoders are stuck
        if (all_the_same_count >= LIGHT_LED_THRESHOLD)
 80033cc:	2b64      	cmp	r3, #100	; 0x64
      {
        if (all_the_same)
        {
          if (all_the_same_count < LIGHT_LED_THRESHOLD)
          {
            all_the_same_count++;
 80033ce:	7013      	strb	r3, [r2, #0]
        }


        // Error Checking
        // if all encoders are stuck
        if (all_the_same_count >= LIGHT_LED_THRESHOLD)
 80033d0:	f43f af7e 	beq.w	80032d0 <enc_poll_nonblocking_tick+0x4c>
 80033d4:	e7e6      	b.n	80033a4 <enc_poll_nonblocking_tick+0x120>
      {
        uint16_t readValue =  SPI4->DR & 0x3fff; // 0b0011 1111 1111 1111

        if (readValue == g_state.encoders[NUM_ENC-1-enc_poll_state_word_idx]) // checking if encoder is stuck
        {
          same_count[NUM_ENC-1-enc_poll_state_word_idx]++;
 80033d6:	f8df e024 	ldr.w	lr, [pc, #36]	; 80033fc <enc_poll_nonblocking_tick+0x178>
 80033da:	f81e 3006 	ldrb.w	r3, [lr, r6]
 80033de:	3301      	adds	r3, #1
 80033e0:	f80e 3006 	strb.w	r3, [lr, r6]
 80033e4:	e7cd      	b.n	8003382 <enc_poll_nonblocking_tick+0xfe>
 80033e6:	bf00      	nop
 80033e8:	2000007c 	.word	0x2000007c
 80033ec:	40021000 	.word	0x40021000
 80033f0:	20010460 	.word	0x20010460
 80033f4:	20000080 	.word	0x20000080
 80033f8:	2001046c 	.word	0x2001046c
 80033fc:	20010464 	.word	0x20010464
 8003400:	40013400 	.word	0x40013400
 8003404:	20010468 	.word	0x20010468
 8003408:	200105a0 	.word	0x200105a0

0800340c <state_init>:

volatile state_t g_state;

void state_init()
{
  g_state.header[0] = 0x01; // version number of this state format
 800340c:	4915      	ldr	r1, [pc, #84]	; (8003464 <state_init+0x58>)
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
 800340e:	2200      	movs	r2, #0

volatile state_t g_state;

void state_init()
{
  g_state.header[0] = 0x01; // version number of this state format
 8003410:	2301      	movs	r3, #1
#include "state.h"

volatile state_t g_state;

void state_init()
{
 8003412:	b430      	push	{r4, r5}
  g_state.header[0] = 0x01; // version number of this state format
 8003414:	700b      	strb	r3, [r1, #0]
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
 8003416:	704a      	strb	r2, [r1, #1]
  g_state.header[2] = 0x00; // ditto
 8003418:	708a      	strb	r2, [r1, #2]
  g_state.header[3] = 0x00; // ditto
 800341a:	70ca      	strb	r2, [r1, #3]
  g_state.systime = 0;
 800341c:	6848      	ldr	r0, [r1, #4]
 800341e:	604a      	str	r2, [r1, #4]
  for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 8003420:	4613      	mov	r3, r2
    g_state.tactile_pressures[i] = g_state.tactile_temperatures[i] = 0;
 8003422:	4614      	mov	r4, r2
 8003424:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003428:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800342c:	1d18      	adds	r0, r3, #4
  g_state.header[0] = 0x01; // version number of this state format
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
  g_state.header[2] = 0x00; // ditto
  g_state.header[3] = 0x00; // ditto
  g_state.systime = 0;
  for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 800342e:	3301      	adds	r3, #1
    g_state.tactile_pressures[i] = g_state.tactile_temperatures[i] = 0;
 8003430:	8895      	ldrh	r5, [r2, #4]
 8003432:	8094      	strh	r4, [r2, #4]
  g_state.header[0] = 0x01; // version number of this state format
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
  g_state.header[2] = 0x00; // ditto
  g_state.header[3] = 0x00; // ditto
  g_state.systime = 0;
  for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 8003434:	2b26      	cmp	r3, #38	; 0x26
    g_state.tactile_pressures[i] = g_state.tactile_temperatures[i] = 0;
 8003436:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
 800343a:	f821 4010 	strh.w	r4, [r1, r0, lsl #1]
 800343e:	4a09      	ldr	r2, [pc, #36]	; (8003464 <state_init+0x58>)
 8003440:	f04f 0000 	mov.w	r0, #0
  g_state.header[0] = 0x01; // version number of this state format
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
  g_state.header[2] = 0x00; // ditto
  g_state.header[3] = 0x00; // ditto
  g_state.systime = 0;
  for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 8003444:	d1ee      	bne.n	8003424 <state_init+0x18>
    g_state.tactile_pressures[i] = g_state.tactile_temperatures[i] = 0;
  for (uint_fast8_t i = 0; i < NUM_ENC; i++)
    g_state.encoders[i] = 0;
 8003446:	f8b2 30a0 	ldrh.w	r3, [r2, #160]	; 0xa0
 800344a:	f8a2 00a0 	strh.w	r0, [r2, #160]	; 0xa0
 800344e:	f8b2 30a2 	ldrh.w	r3, [r2, #162]	; 0xa2
 8003452:	f8a2 00a2 	strh.w	r0, [r2, #162]	; 0xa2
 8003456:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 800345a:	f8a2 00a4 	strh.w	r0, [r2, #164]	; 0xa4
}
 800345e:	bc30      	pop	{r4, r5}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	200105a0 	.word	0x200105a0

08003468 <async_poll_init>:
  { dmxl_poll_nonblocking_tick   , 3, (int *)(&dmxl_poll_states[3])    },
  { enc_poll_nonblocking_tick    , 0, (int *)(&enc_poll_state)         }
};

void async_poll_init()
{
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop

0800346c <async_poll_tick>:
}

async_poll_tick_result_t async_poll_tick()
{
 800346c:	b570      	push	{r4, r5, r6, lr}
  if (async_poll_complete)
 800346e:	4e0d      	ldr	r6, [pc, #52]	; (80034a4 <async_poll_tick+0x38>)
 8003470:	6833      	ldr	r3, [r6, #0]
 8003472:	b10b      	cbz	r3, 8003478 <async_poll_tick+0xc>
    return APT_COMPLETE;
 8003474:	2002      	movs	r0, #2
  {
    async_poll_complete = 1;
    return APT_JUST_FINISHED;
  }
  return APT_BUSY;
}
 8003476:	bd70      	pop	{r4, r5, r6, pc}
 8003478:	4c0b      	ldr	r4, [pc, #44]	; (80034a8 <async_poll_tick+0x3c>)
{
}

async_poll_tick_result_t async_poll_tick()
{
  if (async_poll_complete)
 800347a:	2001      	movs	r0, #1
 800347c:	f104 056c 	add.w	r5, r4, #108	; 0x6c
    return APT_COMPLETE;
  bool all_done = true;
  for (uint_fast8_t i = 0; i < ASYNC_POLL_NUM_PORTS; i++)
  {
    if (*(poll_targets[i].poll_state) == (int)ASYNC_POLL_DONE)
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3301      	adds	r3, #1
 8003486:	d005      	beq.n	8003494 <async_poll_tick+0x28>
      continue;
    all_done = false;
    poll_targets[i].fptr(poll_targets[i].arg);
 8003488:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 800348c:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8003490:	4798      	blx	r3
  bool all_done = true;
  for (uint_fast8_t i = 0; i < ASYNC_POLL_NUM_PORTS; i++)
  {
    if (*(poll_targets[i].poll_state) == (int)ASYNC_POLL_DONE)
      continue;
    all_done = false;
 8003492:	2000      	movs	r0, #0
 8003494:	340c      	adds	r4, #12
async_poll_tick_result_t async_poll_tick()
{
  if (async_poll_complete)
    return APT_COMPLETE;
  bool all_done = true;
  for (uint_fast8_t i = 0; i < ASYNC_POLL_NUM_PORTS; i++)
 8003496:	42ac      	cmp	r4, r5
 8003498:	d1f2      	bne.n	8003480 <async_poll_tick+0x14>
    if (*(poll_targets[i].poll_state) == (int)ASYNC_POLL_DONE)
      continue;
    all_done = false;
    poll_targets[i].fptr(poll_targets[i].arg);
  }
  if (all_done)
 800349a:	2800      	cmp	r0, #0
 800349c:	d0eb      	beq.n	8003476 <async_poll_tick+0xa>
  {
    async_poll_complete = 1;
 800349e:	2001      	movs	r0, #1
 80034a0:	6030      	str	r0, [r6, #0]
    return APT_JUST_FINISHED;
 80034a2:	bd70      	pop	{r4, r5, r6, pc}
 80034a4:	20010470 	.word	0x20010470
 80034a8:	0800c828 	.word	0x0800c828

080034ac <async_poll_start>:
  }
  return APT_BUSY;
}

void async_poll_start()
{
 80034ac:	b570      	push	{r4, r5, r6, lr}
 80034ae:	4c0c      	ldr	r4, [pc, #48]	; (80034e0 <async_poll_start+0x34>)
  for (uint_fast8_t i = 0; i < ASYNC_POLL_NUM_PORTS; i++)
  {
    // force them all to the DONE state, in case somebody was stuck,
    // so their state machines get the DONE -> IDLE transition on the next tick
    *poll_targets[i].poll_state = ASYNC_POLL_DONE;
 80034b0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80034b4:	f104 056c 	add.w	r5, r4, #108	; 0x6c
 80034b8:	6822      	ldr	r2, [r4, #0]
    poll_targets[i].fptr(poll_targets[i].arg); // get it started
 80034ba:	f854 3c08 	ldr.w	r3, [r4, #-8]
{
  for (uint_fast8_t i = 0; i < ASYNC_POLL_NUM_PORTS; i++)
  {
    // force them all to the DONE state, in case somebody was stuck,
    // so their state machines get the DONE -> IDLE transition on the next tick
    *poll_targets[i].poll_state = ASYNC_POLL_DONE;
 80034be:	6016      	str	r6, [r2, #0]
    poll_targets[i].fptr(poll_targets[i].arg); // get it started
 80034c0:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 80034c4:	340c      	adds	r4, #12
 80034c6:	4798      	blx	r3
  return APT_BUSY;
}

void async_poll_start()
{
  for (uint_fast8_t i = 0; i < ASYNC_POLL_NUM_PORTS; i++)
 80034c8:	42ac      	cmp	r4, r5
 80034ca:	d1f5      	bne.n	80034b8 <async_poll_start+0xc>
    // so their state machines get the DONE -> IDLE transition on the next tick
    *poll_targets[i].poll_state = ASYNC_POLL_DONE;
    poll_targets[i].fptr(poll_targets[i].arg); // get it started
  }
  async_poll_complete = 0;
  async_poll_start_time_us = SYSTIME;
 80034cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    // force them all to the DONE state, in case somebody was stuck,
    // so their state machines get the DONE -> IDLE transition on the next tick
    *poll_targets[i].poll_state = ASYNC_POLL_DONE;
    poll_targets[i].fptr(poll_targets[i].arg); // get it started
  }
  async_poll_complete = 0;
 80034d0:	4904      	ldr	r1, [pc, #16]	; (80034e4 <async_poll_start+0x38>)
  async_poll_start_time_us = SYSTIME;
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <async_poll_start+0x3c>)
 80034d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034d6:	601a      	str	r2, [r3, #0]
    // force them all to the DONE state, in case somebody was stuck,
    // so their state machines get the DONE -> IDLE transition on the next tick
    *poll_targets[i].poll_state = ASYNC_POLL_DONE;
    poll_targets[i].fptr(poll_targets[i].arg); // get it started
  }
  async_poll_complete = 0;
 80034d8:	2000      	movs	r0, #0
 80034da:	6008      	str	r0, [r1, #0]
  async_poll_start_time_us = SYSTIME;
 80034dc:	bd70      	pop	{r4, r5, r6, pc}
 80034de:	bf00      	nop
 80034e0:	0800c828 	.word	0x0800c828
 80034e4:	20010470 	.word	0x20010470
 80034e8:	20010474 	.word	0x20010474

080034ec <delay_ns>:
#include <stdint.h>

// TODO: tune this better on an oscilloscope

void delay_ns(uint32_t ns)
{
 80034ec:	b082      	sub	sp, #8
  for (volatile uint32_t i = 0; i < ns/10; i++) { }
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <delay_ns+0x24>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	9201      	str	r2, [sp, #4]
 80034f4:	fba3 3000 	umull	r3, r0, r3, r0
 80034f8:	9b01      	ldr	r3, [sp, #4]
 80034fa:	08c0      	lsrs	r0, r0, #3
 80034fc:	4298      	cmp	r0, r3
 80034fe:	d905      	bls.n	800350c <delay_ns+0x20>
 8003500:	9b01      	ldr	r3, [sp, #4]
 8003502:	3301      	adds	r3, #1
 8003504:	9301      	str	r3, [sp, #4]
 8003506:	9b01      	ldr	r3, [sp, #4]
 8003508:	4283      	cmp	r3, r0
 800350a:	d3f9      	bcc.n	8003500 <delay_ns+0x14>
}
 800350c:	b002      	add	sp, #8
 800350e:	4770      	bx	lr
 8003510:	cccccccd 	.word	0xcccccccd

08003514 <delay_us>:

void delay_us(uint32_t us)
{
 8003514:	b082      	sub	sp, #8
  for (volatile int i = 0; i < us*10; i++) { }
 8003516:	2300      	movs	r3, #0
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800351e:	9b01      	ldr	r3, [sp, #4]
 8003520:	0040      	lsls	r0, r0, #1
 8003522:	4283      	cmp	r3, r0
 8003524:	d205      	bcs.n	8003532 <delay_us+0x1e>
 8003526:	9b01      	ldr	r3, [sp, #4]
 8003528:	3301      	adds	r3, #1
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	9b01      	ldr	r3, [sp, #4]
 800352e:	4283      	cmp	r3, r0
 8003530:	d3f9      	bcc.n	8003526 <delay_us+0x12>
}
 8003532:	b002      	add	sp, #8
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop

08003538 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8003538:	b082      	sub	sp, #8
  for (volatile int i = 0; i < ms; i++)
 800353a:	2100      	movs	r1, #0
 800353c:	9100      	str	r1, [sp, #0]
 800353e:	9b00      	ldr	r3, [sp, #0]
 8003540:	4298      	cmp	r0, r3
 8003542:	d911      	bls.n	8003568 <delay_ms+0x30>
  for (volatile uint32_t i = 0; i < ns/10; i++) { }
}

void delay_us(uint32_t us)
{
  for (volatile int i = 0; i < us*10; i++) { }
 8003544:	f242 720f 	movw	r2, #9999	; 0x270f
 8003548:	9101      	str	r1, [sp, #4]
 800354a:	9b01      	ldr	r3, [sp, #4]
 800354c:	4293      	cmp	r3, r2
 800354e:	d805      	bhi.n	800355c <delay_ms+0x24>
 8003550:	9b01      	ldr	r3, [sp, #4]
 8003552:	3301      	adds	r3, #1
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	9b01      	ldr	r3, [sp, #4]
 8003558:	4293      	cmp	r3, r2
 800355a:	d9f9      	bls.n	8003550 <delay_ms+0x18>
}

void delay_ms(uint32_t ms)
{
  for (volatile int i = 0; i < ms; i++)
 800355c:	9b00      	ldr	r3, [sp, #0]
 800355e:	3301      	adds	r3, #1
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	9b00      	ldr	r3, [sp, #0]
 8003564:	4283      	cmp	r3, r0
 8003566:	d3ef      	bcc.n	8003548 <delay_ms+0x10>
    delay_us(1000);
}
 8003568:	b002      	add	sp, #8
 800356a:	4770      	bx	lr

0800356c <setLEDs>:
static uint8_t errDetected[ERR_NUMBER] = {0};


// Displays the appropriate LED pattern for a given error at a point in its
// sequence
void setLEDs(uint8_t errorIndex, uint8_t flashIndex) {
 800356c:	b538      	push	{r3, r4, r5, lr}
  uint8_t pattern = errSequence[errorIndex][flashIndex];
 800356e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8003572:	4b09      	ldr	r3, [pc, #36]	; (8003598 <setLEDs+0x2c>)
 8003574:	5c5d      	ldrb	r5, [r3, r1]
  for (int i = 0; i < NUM_LEDs; i++) {
 8003576:	2400      	movs	r4, #0
    if (pattern & (1 << i)) {
 8003578:	fa45 f304 	asr.w	r3, r5, r4
 800357c:	f013 0f01 	tst.w	r3, #1
      leds_on(i);
 8003580:	b2e0      	uxtb	r0, r4
// Displays the appropriate LED pattern for a given error at a point in its
// sequence
void setLEDs(uint8_t errorIndex, uint8_t flashIndex) {
  uint8_t pattern = errSequence[errorIndex][flashIndex];
  for (int i = 0; i < NUM_LEDs; i++) {
    if (pattern & (1 << i)) {
 8003582:	d005      	beq.n	8003590 <setLEDs+0x24>
      leds_on(i);
 8003584:	f7fd f9c8 	bl	8000918 <leds_on>

// Displays the appropriate LED pattern for a given error at a point in its
// sequence
void setLEDs(uint8_t errorIndex, uint8_t flashIndex) {
  uint8_t pattern = errSequence[errorIndex][flashIndex];
  for (int i = 0; i < NUM_LEDs; i++) {
 8003588:	3401      	adds	r4, #1
 800358a:	2c04      	cmp	r4, #4
 800358c:	d1f4      	bne.n	8003578 <setLEDs+0xc>
      leds_on(i);
    } else {
      leds_off(i);
    }
  }
}
 800358e:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t pattern = errSequence[errorIndex][flashIndex];
  for (int i = 0; i < NUM_LEDs; i++) {
    if (pattern & (1 << i)) {
      leds_on(i);
    } else {
      leds_off(i);
 8003590:	b2e0      	uxtb	r0, r4
 8003592:	f7fd f9e5 	bl	8000960 <leds_off>
 8003596:	e7f7      	b.n	8003588 <setLEDs+0x1c>
 8003598:	0800c88c 	.word	0x0800c88c

0800359c <err_service>:
  // The time (in uS) when the current flash started.
  static uint32_t flashStartTime = 0;


  // We should continue with our current display
  if (displaying)
 800359c:	4a27      	ldr	r2, [pc, #156]	; (800363c <err_service+0xa0>)
 800359e:	7811      	ldrb	r1, [r2, #0]
}

// This displays the error codes one by one. Each dispay is made up of four
// "flashes" of LED patterns over the first second of the display with no LEDs
// in the second second of the display
void err_service() {
 80035a0:	b430      	push	{r4, r5}
  // The time (in uS) when the current flash started.
  static uint32_t flashStartTime = 0;


  // We should continue with our current display
  if (displaying)
 80035a2:	b329      	cbz	r1, 80035f0 <err_service+0x54>
  {
    if (SYSTIME - flashStartTime < FLASH_INTERVAL_US)
 80035a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80035a8:	4825      	ldr	r0, [pc, #148]	; (8003640 <err_service+0xa4>)
 80035aa:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80035ac:	6805      	ldr	r5, [r0, #0]
 80035ae:	4c25      	ldr	r4, [pc, #148]	; (8003644 <err_service+0xa8>)
 80035b0:	1b5b      	subs	r3, r3, r5
 80035b2:	42a3      	cmp	r3, r4
 80035b4:	d91a      	bls.n	80035ec <err_service+0x50>
    {
      return;
    }

    flashStartTime = SYSTIME;
    flashIndex++;
 80035b6:	4b24      	ldr	r3, [pc, #144]	; (8003648 <err_service+0xac>)
    if (SYSTIME - flashStartTime < FLASH_INTERVAL_US)
    {
      return;
    }

    flashStartTime = SYSTIME;
 80035b8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    flashIndex++;
 80035ba:	7819      	ldrb	r1, [r3, #0]
    if (SYSTIME - flashStartTime < FLASH_INTERVAL_US)
    {
      return;
    }

    flashStartTime = SYSTIME;
 80035bc:	6004      	str	r4, [r0, #0]
    flashIndex++;
 80035be:	3101      	adds	r1, #1
 80035c0:	b2c9      	uxtb	r1, r1
    if (flashIndex < NUM_FLASHES)
 80035c2:	2907      	cmp	r1, #7
    {
      return;
    }

    flashStartTime = SYSTIME;
    flashIndex++;
 80035c4:	7019      	strb	r1, [r3, #0]
    if (flashIndex < NUM_FLASHES)
 80035c6:	d933      	bls.n	8003630 <err_service+0x94>
      setLEDs(errorIndex, flashIndex);
      return;
    }

    // If all are stuck we don't need to then display each individual stuck encoder
    if (errorIndex == ERR_ENC_ALL_STUCK)
 80035c8:	4820      	ldr	r0, [pc, #128]	; (800364c <err_service+0xb0>)
 80035ca:	7803      	ldrb	r3, [r0, #0]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d02d      	beq.n	800362c <err_service+0x90>
    {
      errorIndex += 4;
    }
    else
    {
      errorIndex++;
 80035d0:	3301      	adds	r3, #1
 80035d2:	491f      	ldr	r1, [pc, #124]	; (8003650 <err_service+0xb4>)
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	fba1 4103 	umull	r4, r1, r1, r3
 80035da:	08c9      	lsrs	r1, r1, #3
 80035dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80035e0:	eba3 0381 	sub.w	r3, r3, r1, lsl #2
 80035e4:	b2db      	uxtb	r3, r3
    }
    errorIndex %= ERR_NUMBER;
    displaying = false;
 80035e6:	2100      	movs	r1, #0
    }
    else
    {
      errorIndex++;
    }
    errorIndex %= ERR_NUMBER;
 80035e8:	7003      	strb	r3, [r0, #0]
    displaying = false;
 80035ea:	7011      	strb	r1, [r2, #0]

  // Otherwise keep cycling and looking for an error
  errorIndex++;
  errorIndex %= ERR_NUMBER;
  return;
}
 80035ec:	bc30      	pop	{r4, r5}
 80035ee:	4770      	bx	lr
    displaying = false;
    return;
  }

  // If we've found a new error start displaying it
  if (errDetected[errorIndex])
 80035f0:	4c16      	ldr	r4, [pc, #88]	; (800364c <err_service+0xb0>)
 80035f2:	4b18      	ldr	r3, [pc, #96]	; (8003654 <err_service+0xb8>)
 80035f4:	7820      	ldrb	r0, [r4, #0]
 80035f6:	5c1b      	ldrb	r3, [r3, r0]
 80035f8:	b963      	cbnz	r3, 8003614 <err_service+0x78>
    setLEDs(errorIndex, flashIndex);
    return;
  }

  // Otherwise keep cycling and looking for an error
  errorIndex++;
 80035fa:	3001      	adds	r0, #1
  errorIndex %= ERR_NUMBER;
 80035fc:	4b14      	ldr	r3, [pc, #80]	; (8003650 <err_service+0xb4>)
 80035fe:	b2c0      	uxtb	r0, r0
 8003600:	fba3 2300 	umull	r2, r3, r3, r0
 8003604:	08db      	lsrs	r3, r3, #3
 8003606:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800360a:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 800360e:	7020      	strb	r0, [r4, #0]
  return;
}
 8003610:	bc30      	pop	{r4, r5}
 8003612:	4770      	bx	lr

  // If we've found a new error start displaying it
  if (errDetected[errorIndex])
  {
    displaying = true;
    flashIndex = 0;
 8003614:	4c0c      	ldr	r4, [pc, #48]	; (8003648 <err_service+0xac>)
    flashStartTime = SYSTIME;
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <err_service+0xa4>)

  // If we've found a new error start displaying it
  if (errDetected[errorIndex])
  {
    displaying = true;
    flashIndex = 0;
 8003618:	7021      	strb	r1, [r4, #0]
    flashStartTime = SYSTIME;
 800361a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  }

  // If we've found a new error start displaying it
  if (errDetected[errorIndex])
  {
    displaying = true;
 800361e:	2501      	movs	r5, #1
 8003620:	7015      	strb	r5, [r2, #0]
    flashIndex = 0;
    flashStartTime = SYSTIME;
 8003622:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003624:	601a      	str	r2, [r3, #0]

  // Otherwise keep cycling and looking for an error
  errorIndex++;
  errorIndex %= ERR_NUMBER;
  return;
}
 8003626:	bc30      	pop	{r4, r5}
  if (errDetected[errorIndex])
  {
    displaying = true;
    flashIndex = 0;
    flashStartTime = SYSTIME;
    setLEDs(errorIndex, flashIndex);
 8003628:	f7ff bfa0 	b.w	800356c <setLEDs>
 800362c:	2308      	movs	r3, #8
 800362e:	e7da      	b.n	80035e6 <err_service+0x4a>

    flashStartTime = SYSTIME;
    flashIndex++;
    if (flashIndex < NUM_FLASHES)
    {
      setLEDs(errorIndex, flashIndex);
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <err_service+0xb0>)

  // Otherwise keep cycling and looking for an error
  errorIndex++;
  errorIndex %= ERR_NUMBER;
  return;
}
 8003632:	bc30      	pop	{r4, r5}

    flashStartTime = SYSTIME;
    flashIndex++;
    if (flashIndex < NUM_FLASHES)
    {
      setLEDs(errorIndex, flashIndex);
 8003634:	7818      	ldrb	r0, [r3, #0]
 8003636:	f7ff bf99 	b.w	800356c <setLEDs>
 800363a:	bf00      	nop
 800363c:	2001048c 	.word	0x2001048c
 8003640:	20010478 	.word	0x20010478
 8003644:	0003d08f 	.word	0x0003d08f
 8003648:	2001048d 	.word	0x2001048d
 800364c:	2001047c 	.word	0x2001047c
 8003650:	aaaaaaab 	.word	0xaaaaaaab
 8003654:	20010480 	.word	0x20010480

08003658 <err_set>:
  errorIndex %= ERR_NUMBER;
  return;
}

void err_set(error_type_t err) {
  errDetected[err] = 1;
 8003658:	4b01      	ldr	r3, [pc, #4]	; (8003660 <err_set+0x8>)
 800365a:	2201      	movs	r2, #1
 800365c:	541a      	strb	r2, [r3, r0]
 800365e:	4770      	bx	lr
 8003660:	20010480 	.word	0x20010480

08003664 <err_unset>:
}

void err_unset(error_type_t err) {
  errDetected[err] = 0;
 8003664:	4b01      	ldr	r3, [pc, #4]	; (800366c <err_unset+0x8>)
 8003666:	2200      	movs	r2, #0
 8003668:	541a      	strb	r2, [r3, r0]
 800366a:	4770      	bx	lr
 800366c:	20010480 	.word	0x20010480

08003670 <exit>:
 8003670:	b508      	push	{r3, lr}
 8003672:	2100      	movs	r1, #0
 8003674:	4604      	mov	r4, r0
 8003676:	f002 ff1d 	bl	80064b4 <__call_exitprocs>
 800367a:	4b04      	ldr	r3, [pc, #16]	; (800368c <exit+0x1c>)
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003680:	b103      	cbz	r3, 8003684 <exit+0x14>
 8003682:	4798      	blx	r3
 8003684:	4620      	mov	r0, r4
 8003686:	f7fd fa1f 	bl	8000ac8 <_exit>
 800368a:	bf00      	nop
 800368c:	0800c8f0 	.word	0x0800c8f0

08003690 <__libc_init_array>:
 8003690:	b570      	push	{r4, r5, r6, lr}
 8003692:	4e0f      	ldr	r6, [pc, #60]	; (80036d0 <__libc_init_array+0x40>)
 8003694:	4d0f      	ldr	r5, [pc, #60]	; (80036d4 <__libc_init_array+0x44>)
 8003696:	1b76      	subs	r6, r6, r5
 8003698:	10b6      	asrs	r6, r6, #2
 800369a:	bf18      	it	ne
 800369c:	2400      	movne	r4, #0
 800369e:	d005      	beq.n	80036ac <__libc_init_array+0x1c>
 80036a0:	3401      	adds	r4, #1
 80036a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a6:	4798      	blx	r3
 80036a8:	42a6      	cmp	r6, r4
 80036aa:	d1f9      	bne.n	80036a0 <__libc_init_array+0x10>
 80036ac:	4e0a      	ldr	r6, [pc, #40]	; (80036d8 <__libc_init_array+0x48>)
 80036ae:	4d0b      	ldr	r5, [pc, #44]	; (80036dc <__libc_init_array+0x4c>)
 80036b0:	1b76      	subs	r6, r6, r5
 80036b2:	f009 fa25 	bl	800cb00 <_init>
 80036b6:	10b6      	asrs	r6, r6, #2
 80036b8:	bf18      	it	ne
 80036ba:	2400      	movne	r4, #0
 80036bc:	d006      	beq.n	80036cc <__libc_init_array+0x3c>
 80036be:	3401      	adds	r4, #1
 80036c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c4:	4798      	blx	r3
 80036c6:	42a6      	cmp	r6, r4
 80036c8:	d1f9      	bne.n	80036be <__libc_init_array+0x2e>
 80036ca:	bd70      	pop	{r4, r5, r6, pc}
 80036cc:	bd70      	pop	{r4, r5, r6, pc}
 80036ce:	bf00      	nop
 80036d0:	0800cb0c 	.word	0x0800cb0c
 80036d4:	0800cb0c 	.word	0x0800cb0c
 80036d8:	0800cb14 	.word	0x0800cb14
 80036dc:	0800cb0c 	.word	0x0800cb0c

080036e0 <memcpy>:
 80036e0:	4684      	mov	ip, r0
 80036e2:	ea41 0300 	orr.w	r3, r1, r0
 80036e6:	f013 0303 	ands.w	r3, r3, #3
 80036ea:	d16d      	bne.n	80037c8 <memcpy+0xe8>
 80036ec:	3a40      	subs	r2, #64	; 0x40
 80036ee:	d341      	bcc.n	8003774 <memcpy+0x94>
 80036f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80036f4:	f840 3b04 	str.w	r3, [r0], #4
 80036f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80036fc:	f840 3b04 	str.w	r3, [r0], #4
 8003700:	f851 3b04 	ldr.w	r3, [r1], #4
 8003704:	f840 3b04 	str.w	r3, [r0], #4
 8003708:	f851 3b04 	ldr.w	r3, [r1], #4
 800370c:	f840 3b04 	str.w	r3, [r0], #4
 8003710:	f851 3b04 	ldr.w	r3, [r1], #4
 8003714:	f840 3b04 	str.w	r3, [r0], #4
 8003718:	f851 3b04 	ldr.w	r3, [r1], #4
 800371c:	f840 3b04 	str.w	r3, [r0], #4
 8003720:	f851 3b04 	ldr.w	r3, [r1], #4
 8003724:	f840 3b04 	str.w	r3, [r0], #4
 8003728:	f851 3b04 	ldr.w	r3, [r1], #4
 800372c:	f840 3b04 	str.w	r3, [r0], #4
 8003730:	f851 3b04 	ldr.w	r3, [r1], #4
 8003734:	f840 3b04 	str.w	r3, [r0], #4
 8003738:	f851 3b04 	ldr.w	r3, [r1], #4
 800373c:	f840 3b04 	str.w	r3, [r0], #4
 8003740:	f851 3b04 	ldr.w	r3, [r1], #4
 8003744:	f840 3b04 	str.w	r3, [r0], #4
 8003748:	f851 3b04 	ldr.w	r3, [r1], #4
 800374c:	f840 3b04 	str.w	r3, [r0], #4
 8003750:	f851 3b04 	ldr.w	r3, [r1], #4
 8003754:	f840 3b04 	str.w	r3, [r0], #4
 8003758:	f851 3b04 	ldr.w	r3, [r1], #4
 800375c:	f840 3b04 	str.w	r3, [r0], #4
 8003760:	f851 3b04 	ldr.w	r3, [r1], #4
 8003764:	f840 3b04 	str.w	r3, [r0], #4
 8003768:	f851 3b04 	ldr.w	r3, [r1], #4
 800376c:	f840 3b04 	str.w	r3, [r0], #4
 8003770:	3a40      	subs	r2, #64	; 0x40
 8003772:	d2bd      	bcs.n	80036f0 <memcpy+0x10>
 8003774:	3230      	adds	r2, #48	; 0x30
 8003776:	d311      	bcc.n	800379c <memcpy+0xbc>
 8003778:	f851 3b04 	ldr.w	r3, [r1], #4
 800377c:	f840 3b04 	str.w	r3, [r0], #4
 8003780:	f851 3b04 	ldr.w	r3, [r1], #4
 8003784:	f840 3b04 	str.w	r3, [r0], #4
 8003788:	f851 3b04 	ldr.w	r3, [r1], #4
 800378c:	f840 3b04 	str.w	r3, [r0], #4
 8003790:	f851 3b04 	ldr.w	r3, [r1], #4
 8003794:	f840 3b04 	str.w	r3, [r0], #4
 8003798:	3a10      	subs	r2, #16
 800379a:	d2ed      	bcs.n	8003778 <memcpy+0x98>
 800379c:	320c      	adds	r2, #12
 800379e:	d305      	bcc.n	80037ac <memcpy+0xcc>
 80037a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80037a4:	f840 3b04 	str.w	r3, [r0], #4
 80037a8:	3a04      	subs	r2, #4
 80037aa:	d2f9      	bcs.n	80037a0 <memcpy+0xc0>
 80037ac:	3204      	adds	r2, #4
 80037ae:	d008      	beq.n	80037c2 <memcpy+0xe2>
 80037b0:	07d2      	lsls	r2, r2, #31
 80037b2:	bf1c      	itt	ne
 80037b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80037b8:	f800 3b01 	strbne.w	r3, [r0], #1
 80037bc:	d301      	bcc.n	80037c2 <memcpy+0xe2>
 80037be:	880b      	ldrh	r3, [r1, #0]
 80037c0:	8003      	strh	r3, [r0, #0]
 80037c2:	4660      	mov	r0, ip
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	2a08      	cmp	r2, #8
 80037ca:	d313      	bcc.n	80037f4 <memcpy+0x114>
 80037cc:	078b      	lsls	r3, r1, #30
 80037ce:	d08d      	beq.n	80036ec <memcpy+0xc>
 80037d0:	f010 0303 	ands.w	r3, r0, #3
 80037d4:	d08a      	beq.n	80036ec <memcpy+0xc>
 80037d6:	f1c3 0304 	rsb	r3, r3, #4
 80037da:	1ad2      	subs	r2, r2, r3
 80037dc:	07db      	lsls	r3, r3, #31
 80037de:	bf1c      	itt	ne
 80037e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80037e4:	f800 3b01 	strbne.w	r3, [r0], #1
 80037e8:	d380      	bcc.n	80036ec <memcpy+0xc>
 80037ea:	f831 3b02 	ldrh.w	r3, [r1], #2
 80037ee:	f820 3b02 	strh.w	r3, [r0], #2
 80037f2:	e77b      	b.n	80036ec <memcpy+0xc>
 80037f4:	3a04      	subs	r2, #4
 80037f6:	d3d9      	bcc.n	80037ac <memcpy+0xcc>
 80037f8:	3a01      	subs	r2, #1
 80037fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037fe:	f800 3b01 	strb.w	r3, [r0], #1
 8003802:	d2f9      	bcs.n	80037f8 <memcpy+0x118>
 8003804:	780b      	ldrb	r3, [r1, #0]
 8003806:	7003      	strb	r3, [r0, #0]
 8003808:	784b      	ldrb	r3, [r1, #1]
 800380a:	7043      	strb	r3, [r0, #1]
 800380c:	788b      	ldrb	r3, [r1, #2]
 800380e:	7083      	strb	r3, [r0, #2]
 8003810:	4660      	mov	r0, ip
 8003812:	4770      	bx	lr

08003814 <memset>:
 8003814:	b470      	push	{r4, r5, r6}
 8003816:	0784      	lsls	r4, r0, #30
 8003818:	d046      	beq.n	80038a8 <memset+0x94>
 800381a:	1e54      	subs	r4, r2, #1
 800381c:	2a00      	cmp	r2, #0
 800381e:	d041      	beq.n	80038a4 <memset+0x90>
 8003820:	b2cd      	uxtb	r5, r1
 8003822:	4603      	mov	r3, r0
 8003824:	e002      	b.n	800382c <memset+0x18>
 8003826:	1e62      	subs	r2, r4, #1
 8003828:	b3e4      	cbz	r4, 80038a4 <memset+0x90>
 800382a:	4614      	mov	r4, r2
 800382c:	f803 5b01 	strb.w	r5, [r3], #1
 8003830:	079a      	lsls	r2, r3, #30
 8003832:	d1f8      	bne.n	8003826 <memset+0x12>
 8003834:	2c03      	cmp	r4, #3
 8003836:	d92e      	bls.n	8003896 <memset+0x82>
 8003838:	b2cd      	uxtb	r5, r1
 800383a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800383e:	2c0f      	cmp	r4, #15
 8003840:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003844:	d919      	bls.n	800387a <memset+0x66>
 8003846:	f103 0210 	add.w	r2, r3, #16
 800384a:	4626      	mov	r6, r4
 800384c:	3e10      	subs	r6, #16
 800384e:	2e0f      	cmp	r6, #15
 8003850:	f842 5c10 	str.w	r5, [r2, #-16]
 8003854:	f842 5c0c 	str.w	r5, [r2, #-12]
 8003858:	f842 5c08 	str.w	r5, [r2, #-8]
 800385c:	f842 5c04 	str.w	r5, [r2, #-4]
 8003860:	f102 0210 	add.w	r2, r2, #16
 8003864:	d8f2      	bhi.n	800384c <memset+0x38>
 8003866:	f1a4 0210 	sub.w	r2, r4, #16
 800386a:	f022 020f 	bic.w	r2, r2, #15
 800386e:	f004 040f 	and.w	r4, r4, #15
 8003872:	3210      	adds	r2, #16
 8003874:	2c03      	cmp	r4, #3
 8003876:	4413      	add	r3, r2
 8003878:	d90d      	bls.n	8003896 <memset+0x82>
 800387a:	461e      	mov	r6, r3
 800387c:	4622      	mov	r2, r4
 800387e:	3a04      	subs	r2, #4
 8003880:	2a03      	cmp	r2, #3
 8003882:	f846 5b04 	str.w	r5, [r6], #4
 8003886:	d8fa      	bhi.n	800387e <memset+0x6a>
 8003888:	1f22      	subs	r2, r4, #4
 800388a:	f022 0203 	bic.w	r2, r2, #3
 800388e:	3204      	adds	r2, #4
 8003890:	4413      	add	r3, r2
 8003892:	f004 0403 	and.w	r4, r4, #3
 8003896:	b12c      	cbz	r4, 80038a4 <memset+0x90>
 8003898:	b2c9      	uxtb	r1, r1
 800389a:	441c      	add	r4, r3
 800389c:	f803 1b01 	strb.w	r1, [r3], #1
 80038a0:	42a3      	cmp	r3, r4
 80038a2:	d1fb      	bne.n	800389c <memset+0x88>
 80038a4:	bc70      	pop	{r4, r5, r6}
 80038a6:	4770      	bx	lr
 80038a8:	4614      	mov	r4, r2
 80038aa:	4603      	mov	r3, r0
 80038ac:	e7c2      	b.n	8003834 <memset+0x20>
 80038ae:	bf00      	nop

080038b0 <_printf_r>:
 80038b0:	b40e      	push	{r1, r2, r3}
 80038b2:	b500      	push	{lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	ab03      	add	r3, sp, #12
 80038b8:	6881      	ldr	r1, [r0, #8]
 80038ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	f001 fb32 	bl	8004f28 <_vfprintf_r>
 80038c4:	b002      	add	sp, #8
 80038c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80038ca:	b003      	add	sp, #12
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop

080038d0 <printf>:
 80038d0:	b40f      	push	{r0, r1, r2, r3}
 80038d2:	b500      	push	{lr}
 80038d4:	4907      	ldr	r1, [pc, #28]	; (80038f4 <printf+0x24>)
 80038d6:	b083      	sub	sp, #12
 80038d8:	ab04      	add	r3, sp, #16
 80038da:	6808      	ldr	r0, [r1, #0]
 80038dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80038e0:	6881      	ldr	r1, [r0, #8]
 80038e2:	9301      	str	r3, [sp, #4]
 80038e4:	f001 fb20 	bl	8004f28 <_vfprintf_r>
 80038e8:	b003      	add	sp, #12
 80038ea:	f85d eb04 	ldr.w	lr, [sp], #4
 80038ee:	b004      	add	sp, #16
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	200004b0 	.word	0x200004b0

080038f8 <_puts_r>:
 80038f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fa:	4605      	mov	r5, r0
 80038fc:	b089      	sub	sp, #36	; 0x24
 80038fe:	4608      	mov	r0, r1
 8003900:	460c      	mov	r4, r1
 8003902:	f000 f87b 	bl	80039fc <strlen>
 8003906:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003908:	4f13      	ldr	r7, [pc, #76]	; (8003958 <_puts_r+0x60>)
 800390a:	9404      	str	r4, [sp, #16]
 800390c:	2601      	movs	r6, #1
 800390e:	1c44      	adds	r4, r0, #1
 8003910:	a904      	add	r1, sp, #16
 8003912:	2202      	movs	r2, #2
 8003914:	9403      	str	r4, [sp, #12]
 8003916:	9005      	str	r0, [sp, #20]
 8003918:	68ac      	ldr	r4, [r5, #8]
 800391a:	9706      	str	r7, [sp, #24]
 800391c:	9607      	str	r6, [sp, #28]
 800391e:	9101      	str	r1, [sp, #4]
 8003920:	9202      	str	r2, [sp, #8]
 8003922:	b1ab      	cbz	r3, 8003950 <_puts_r+0x58>
 8003924:	89a3      	ldrh	r3, [r4, #12]
 8003926:	049a      	lsls	r2, r3, #18
 8003928:	d406      	bmi.n	8003938 <_puts_r+0x40>
 800392a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800392c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003930:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003934:	81a3      	strh	r3, [r4, #12]
 8003936:	6662      	str	r2, [r4, #100]	; 0x64
 8003938:	4628      	mov	r0, r5
 800393a:	4621      	mov	r1, r4
 800393c:	aa01      	add	r2, sp, #4
 800393e:	f004 f929 	bl	8007b94 <__sfvwrite_r>
 8003942:	2800      	cmp	r0, #0
 8003944:	bf14      	ite	ne
 8003946:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800394a:	200a      	moveq	r0, #10
 800394c:	b009      	add	sp, #36	; 0x24
 800394e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003950:	4628      	mov	r0, r5
 8003952:	f003 ffc1 	bl	80078d8 <__sinit>
 8003956:	e7e5      	b.n	8003924 <_puts_r+0x2c>
 8003958:	0800c784 	.word	0x0800c784

0800395c <puts>:
 800395c:	4b02      	ldr	r3, [pc, #8]	; (8003968 <puts+0xc>)
 800395e:	4601      	mov	r1, r0
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	f7ff bfc9 	b.w	80038f8 <_puts_r>
 8003966:	bf00      	nop
 8003968:	200004b0 	.word	0x200004b0

0800396c <_sprintf_r>:
 800396c:	b40c      	push	{r2, r3}
 800396e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003970:	b09d      	sub	sp, #116	; 0x74
 8003972:	ac22      	add	r4, sp, #136	; 0x88
 8003974:	460e      	mov	r6, r1
 8003976:	f854 2b04 	ldr.w	r2, [r4], #4
 800397a:	9102      	str	r1, [sp, #8]
 800397c:	4623      	mov	r3, r4
 800397e:	f44f 7e02 	mov.w	lr, #520	; 0x208
 8003982:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8003986:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800398a:	a902      	add	r1, sp, #8
 800398c:	9606      	str	r6, [sp, #24]
 800398e:	9401      	str	r4, [sp, #4]
 8003990:	f8ad e014 	strh.w	lr, [sp, #20]
 8003994:	9504      	str	r5, [sp, #16]
 8003996:	9507      	str	r5, [sp, #28]
 8003998:	f8ad 7016 	strh.w	r7, [sp, #22]
 800399c:	f000 f85c 	bl	8003a58 <_svfprintf_r>
 80039a0:	9b02      	ldr	r3, [sp, #8]
 80039a2:	2200      	movs	r2, #0
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	b01d      	add	sp, #116	; 0x74
 80039a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80039ac:	b002      	add	sp, #8
 80039ae:	4770      	bx	lr

080039b0 <sprintf>:
 80039b0:	b40e      	push	{r1, r2, r3}
 80039b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039b4:	b09c      	sub	sp, #112	; 0x70
 80039b6:	ab21      	add	r3, sp, #132	; 0x84
 80039b8:	490f      	ldr	r1, [pc, #60]	; (80039f8 <sprintf+0x48>)
 80039ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	4605      	mov	r5, r0
 80039c2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80039c6:	6808      	ldr	r0, [r1, #0]
 80039c8:	9502      	str	r5, [sp, #8]
 80039ca:	f44f 7702 	mov.w	r7, #520	; 0x208
 80039ce:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80039d2:	a902      	add	r1, sp, #8
 80039d4:	9506      	str	r5, [sp, #24]
 80039d6:	f8ad 7014 	strh.w	r7, [sp, #20]
 80039da:	9404      	str	r4, [sp, #16]
 80039dc:	9407      	str	r4, [sp, #28]
 80039de:	f8ad 6016 	strh.w	r6, [sp, #22]
 80039e2:	f000 f839 	bl	8003a58 <_svfprintf_r>
 80039e6:	9b02      	ldr	r3, [sp, #8]
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
 80039ec:	b01c      	add	sp, #112	; 0x70
 80039ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80039f2:	b003      	add	sp, #12
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	200004b0 	.word	0x200004b0

080039fc <strlen>:
 80039fc:	f020 0103 	bic.w	r1, r0, #3
 8003a00:	f010 0003 	ands.w	r0, r0, #3
 8003a04:	f1c0 0000 	rsb	r0, r0, #0
 8003a08:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a0c:	f100 0c04 	add.w	ip, r0, #4
 8003a10:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8003a14:	f06f 0200 	mvn.w	r2, #0
 8003a18:	bf1c      	itt	ne
 8003a1a:	fa22 f20c 	lsrne.w	r2, r2, ip
 8003a1e:	4313      	orrne	r3, r2
 8003a20:	f04f 0c01 	mov.w	ip, #1
 8003a24:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8003a28:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8003a2c:	eba3 020c 	sub.w	r2, r3, ip
 8003a30:	ea22 0203 	bic.w	r2, r2, r3
 8003a34:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8003a38:	bf04      	itt	eq
 8003a3a:	f851 3b04 	ldreq.w	r3, [r1], #4
 8003a3e:	3004      	addeq	r0, #4
 8003a40:	d0f4      	beq.n	8003a2c <strlen+0x30>
 8003a42:	f1c2 0100 	rsb	r1, r2, #0
 8003a46:	ea02 0201 	and.w	r2, r2, r1
 8003a4a:	fab2 f282 	clz	r2, r2
 8003a4e:	f1c2 021f 	rsb	r2, r2, #31
 8003a52:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8003a56:	4770      	bx	lr

08003a58 <_svfprintf_r>:
 8003a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a5c:	b0bf      	sub	sp, #252	; 0xfc
 8003a5e:	4689      	mov	r9, r1
 8003a60:	9206      	str	r2, [sp, #24]
 8003a62:	930a      	str	r3, [sp, #40]	; 0x28
 8003a64:	9004      	str	r0, [sp, #16]
 8003a66:	f004 faa3 	bl	8007fb0 <_localeconv_r>
 8003a6a:	6803      	ldr	r3, [r0, #0]
 8003a6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff ffc4 	bl	80039fc <strlen>
 8003a74:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003a78:	9014      	str	r0, [sp, #80]	; 0x50
 8003a7a:	061a      	lsls	r2, r3, #24
 8003a7c:	d504      	bpl.n	8003a88 <_svfprintf_r+0x30>
 8003a7e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f001 80a1 	beq.w	8004bca <_svfprintf_r+0x1172>
 8003a88:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8003cf0 <_svfprintf_r+0x298>
 8003a8c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003a90:	2300      	movs	r3, #0
 8003a92:	af2e      	add	r7, sp, #184	; 0xb8
 8003a94:	930f      	str	r3, [sp, #60]	; 0x3c
 8003a96:	9323      	str	r3, [sp, #140]	; 0x8c
 8003a98:	9322      	str	r3, [sp, #136]	; 0x88
 8003a9a:	9312      	str	r3, [sp, #72]	; 0x48
 8003a9c:	9315      	str	r3, [sp, #84]	; 0x54
 8003a9e:	9307      	str	r3, [sp, #28]
 8003aa0:	9721      	str	r7, [sp, #132]	; 0x84
 8003aa2:	463c      	mov	r4, r7
 8003aa4:	464e      	mov	r6, r9
 8003aa6:	9d06      	ldr	r5, [sp, #24]
 8003aa8:	782b      	ldrb	r3, [r5, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 80a9 	beq.w	8003c02 <_svfprintf_r+0x1aa>
 8003ab0:	2b25      	cmp	r3, #37	; 0x25
 8003ab2:	d102      	bne.n	8003aba <_svfprintf_r+0x62>
 8003ab4:	e0a5      	b.n	8003c02 <_svfprintf_r+0x1aa>
 8003ab6:	2b25      	cmp	r3, #37	; 0x25
 8003ab8:	d003      	beq.n	8003ac2 <_svfprintf_r+0x6a>
 8003aba:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f9      	bne.n	8003ab6 <_svfprintf_r+0x5e>
 8003ac2:	9b06      	ldr	r3, [sp, #24]
 8003ac4:	1aeb      	subs	r3, r5, r3
 8003ac6:	b173      	cbz	r3, 8003ae6 <_svfprintf_r+0x8e>
 8003ac8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003aca:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8003acc:	9806      	ldr	r0, [sp, #24]
 8003ace:	6020      	str	r0, [r4, #0]
 8003ad0:	3201      	adds	r2, #1
 8003ad2:	4419      	add	r1, r3
 8003ad4:	2a07      	cmp	r2, #7
 8003ad6:	6063      	str	r3, [r4, #4]
 8003ad8:	9123      	str	r1, [sp, #140]	; 0x8c
 8003ada:	9222      	str	r2, [sp, #136]	; 0x88
 8003adc:	dc72      	bgt.n	8003bc4 <_svfprintf_r+0x16c>
 8003ade:	3408      	adds	r4, #8
 8003ae0:	9a07      	ldr	r2, [sp, #28]
 8003ae2:	441a      	add	r2, r3
 8003ae4:	9207      	str	r2, [sp, #28]
 8003ae6:	782b      	ldrb	r3, [r5, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 87cb 	beq.w	8004a84 <_svfprintf_r+0x102c>
 8003aee:	2300      	movs	r3, #0
 8003af0:	1c69      	adds	r1, r5, #1
 8003af2:	786d      	ldrb	r5, [r5, #1]
 8003af4:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003af8:	461a      	mov	r2, r3
 8003afa:	9308      	str	r3, [sp, #32]
 8003afc:	9303      	str	r3, [sp, #12]
 8003afe:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003b02:	1c4b      	adds	r3, r1, #1
 8003b04:	f1a5 0120 	sub.w	r1, r5, #32
 8003b08:	2958      	cmp	r1, #88	; 0x58
 8003b0a:	f200 83e4 	bhi.w	80042d6 <_svfprintf_r+0x87e>
 8003b0e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003b12:	0277      	.short	0x0277
 8003b14:	03e203e2 	.word	0x03e203e2
 8003b18:	03e2037b 	.word	0x03e2037b
 8003b1c:	03e203e2 	.word	0x03e203e2
 8003b20:	03e203e2 	.word	0x03e203e2
 8003b24:	02f703e2 	.word	0x02f703e2
 8003b28:	03e20214 	.word	0x03e20214
 8003b2c:	021801fb 	.word	0x021801fb
 8003b30:	038203e2 	.word	0x038203e2
 8003b34:	02c102c1 	.word	0x02c102c1
 8003b38:	02c102c1 	.word	0x02c102c1
 8003b3c:	02c102c1 	.word	0x02c102c1
 8003b40:	02c102c1 	.word	0x02c102c1
 8003b44:	03e202c1 	.word	0x03e202c1
 8003b48:	03e203e2 	.word	0x03e203e2
 8003b4c:	03e203e2 	.word	0x03e203e2
 8003b50:	03e203e2 	.word	0x03e203e2
 8003b54:	03e203e2 	.word	0x03e203e2
 8003b58:	02d003e2 	.word	0x02d003e2
 8003b5c:	03e20391 	.word	0x03e20391
 8003b60:	03e20391 	.word	0x03e20391
 8003b64:	03e203e2 	.word	0x03e203e2
 8003b68:	037403e2 	.word	0x037403e2
 8003b6c:	03e203e2 	.word	0x03e203e2
 8003b70:	03e2030c 	.word	0x03e2030c
 8003b74:	03e203e2 	.word	0x03e203e2
 8003b78:	03e203e2 	.word	0x03e203e2
 8003b7c:	03e2032a 	.word	0x03e2032a
 8003b80:	034403e2 	.word	0x034403e2
 8003b84:	03e203e2 	.word	0x03e203e2
 8003b88:	03e203e2 	.word	0x03e203e2
 8003b8c:	03e203e2 	.word	0x03e203e2
 8003b90:	03e203e2 	.word	0x03e203e2
 8003b94:	03e203e2 	.word	0x03e203e2
 8003b98:	0233035f 	.word	0x0233035f
 8003b9c:	03910391 	.word	0x03910391
 8003ba0:	03050391 	.word	0x03050391
 8003ba4:	03e20233 	.word	0x03e20233
 8003ba8:	02ed03e2 	.word	0x02ed03e2
 8003bac:	028503e2 	.word	0x028503e2
 8003bb0:	03cb0202 	.word	0x03cb0202
 8003bb4:	03e2027e 	.word	0x03e2027e
 8003bb8:	03e20299 	.word	0x03e20299
 8003bbc:	03e2007a 	.word	0x03e2007a
 8003bc0:	025103e2 	.word	0x025103e2
 8003bc4:	9804      	ldr	r0, [sp, #16]
 8003bc6:	9303      	str	r3, [sp, #12]
 8003bc8:	4631      	mov	r1, r6
 8003bca:	aa21      	add	r2, sp, #132	; 0x84
 8003bcc:	f005 fe16 	bl	80097fc <__ssprint_r>
 8003bd0:	b950      	cbnz	r0, 8003be8 <_svfprintf_r+0x190>
 8003bd2:	463c      	mov	r4, r7
 8003bd4:	9b03      	ldr	r3, [sp, #12]
 8003bd6:	e783      	b.n	8003ae0 <_svfprintf_r+0x88>
 8003bd8:	9804      	ldr	r0, [sp, #16]
 8003bda:	4631      	mov	r1, r6
 8003bdc:	aa21      	add	r2, sp, #132	; 0x84
 8003bde:	f005 fe0d 	bl	80097fc <__ssprint_r>
 8003be2:	2800      	cmp	r0, #0
 8003be4:	f000 818c 	beq.w	8003f00 <_svfprintf_r+0x4a8>
 8003be8:	46b1      	mov	r9, r6
 8003bea:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003bee:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003bf2:	9b07      	ldr	r3, [sp, #28]
 8003bf4:	bf18      	it	ne
 8003bf6:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	b03f      	add	sp, #252	; 0xfc
 8003bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c02:	9d06      	ldr	r5, [sp, #24]
 8003c04:	e76f      	b.n	8003ae6 <_svfprintf_r+0x8e>
 8003c06:	9306      	str	r3, [sp, #24]
 8003c08:	9b03      	ldr	r3, [sp, #12]
 8003c0a:	0698      	lsls	r0, r3, #26
 8003c0c:	f140 82b4 	bpl.w	8004178 <_svfprintf_r+0x720>
 8003c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c12:	f103 0907 	add.w	r9, r3, #7
 8003c16:	f029 0307 	bic.w	r3, r9, #7
 8003c1a:	f103 0208 	add.w	r2, r3, #8
 8003c1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003c22:	920a      	str	r2, [sp, #40]	; 0x28
 8003c24:	2301      	movs	r3, #1
 8003c26:	f04f 0c00 	mov.w	ip, #0
 8003c2a:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8003c2e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003c32:	f1ba 0f00 	cmp.w	sl, #0
 8003c36:	db03      	blt.n	8003c40 <_svfprintf_r+0x1e8>
 8003c38:	9a03      	ldr	r2, [sp, #12]
 8003c3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c3e:	9203      	str	r2, [sp, #12]
 8003c40:	ea58 0209 	orrs.w	r2, r8, r9
 8003c44:	f040 8357 	bne.w	80042f6 <_svfprintf_r+0x89e>
 8003c48:	f1ba 0f00 	cmp.w	sl, #0
 8003c4c:	f000 845c 	beq.w	8004508 <_svfprintf_r+0xab0>
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	f000 835a 	beq.w	800430a <_svfprintf_r+0x8b2>
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	f000 849a 	beq.w	8004590 <_svfprintf_r+0xb38>
 8003c5c:	4639      	mov	r1, r7
 8003c5e:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 8003c62:	ea42 7249 	orr.w	r2, r2, r9, lsl #29
 8003c66:	ea4f 00d9 	mov.w	r0, r9, lsr #3
 8003c6a:	f008 0307 	and.w	r3, r8, #7
 8003c6e:	4681      	mov	r9, r0
 8003c70:	4690      	mov	r8, r2
 8003c72:	3330      	adds	r3, #48	; 0x30
 8003c74:	ea58 0209 	orrs.w	r2, r8, r9
 8003c78:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8003c7c:	d1ef      	bne.n	8003c5e <_svfprintf_r+0x206>
 8003c7e:	9a03      	ldr	r2, [sp, #12]
 8003c80:	910c      	str	r1, [sp, #48]	; 0x30
 8003c82:	07d2      	lsls	r2, r2, #31
 8003c84:	f100 856e 	bmi.w	8004764 <_svfprintf_r+0xd0c>
 8003c88:	1a7b      	subs	r3, r7, r1
 8003c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c8e:	4592      	cmp	sl, r2
 8003c90:	4653      	mov	r3, sl
 8003c92:	bfb8      	it	lt
 8003c94:	4613      	movlt	r3, r2
 8003c96:	9305      	str	r3, [sp, #20]
 8003c98:	2300      	movs	r3, #0
 8003c9a:	930e      	str	r3, [sp, #56]	; 0x38
 8003c9c:	f1bc 0f00 	cmp.w	ip, #0
 8003ca0:	d002      	beq.n	8003ca8 <_svfprintf_r+0x250>
 8003ca2:	9b05      	ldr	r3, [sp, #20]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	9305      	str	r3, [sp, #20]
 8003ca8:	9b03      	ldr	r3, [sp, #12]
 8003caa:	f013 0302 	ands.w	r3, r3, #2
 8003cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cb0:	d002      	beq.n	8003cb8 <_svfprintf_r+0x260>
 8003cb2:	9b05      	ldr	r3, [sp, #20]
 8003cb4:	3302      	adds	r3, #2
 8003cb6:	9305      	str	r3, [sp, #20]
 8003cb8:	9b03      	ldr	r3, [sp, #12]
 8003cba:	f013 0984 	ands.w	r9, r3, #132	; 0x84
 8003cbe:	f040 8317 	bne.w	80042f0 <_svfprintf_r+0x898>
 8003cc2:	9b08      	ldr	r3, [sp, #32]
 8003cc4:	9a05      	ldr	r2, [sp, #20]
 8003cc6:	ebc2 0803 	rsb	r8, r2, r3
 8003cca:	f1b8 0f00 	cmp.w	r8, #0
 8003cce:	f340 830f 	ble.w	80042f0 <_svfprintf_r+0x898>
 8003cd2:	f1b8 0f10 	cmp.w	r8, #16
 8003cd6:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8003cd8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003cda:	f8df a01c 	ldr.w	sl, [pc, #28]	; 8003cf8 <_svfprintf_r+0x2a0>
 8003cde:	dd30      	ble.n	8003d42 <_svfprintf_r+0x2ea>
 8003ce0:	4653      	mov	r3, sl
 8003ce2:	f04f 0b10 	mov.w	fp, #16
 8003ce6:	46c2      	mov	sl, r8
 8003ce8:	46a8      	mov	r8, r5
 8003cea:	461d      	mov	r5, r3
 8003cec:	e00d      	b.n	8003d0a <_svfprintf_r+0x2b2>
 8003cee:	bf00      	nop
	...
 8003cf8:	0800c904 	.word	0x0800c904
 8003cfc:	f1aa 0a10 	sub.w	sl, sl, #16
 8003d00:	f1ba 0f10 	cmp.w	sl, #16
 8003d04:	f104 0408 	add.w	r4, r4, #8
 8003d08:	dd17      	ble.n	8003d3a <_svfprintf_r+0x2e2>
 8003d0a:	3201      	adds	r2, #1
 8003d0c:	3110      	adds	r1, #16
 8003d0e:	2a07      	cmp	r2, #7
 8003d10:	9123      	str	r1, [sp, #140]	; 0x8c
 8003d12:	9222      	str	r2, [sp, #136]	; 0x88
 8003d14:	e884 0820 	stmia.w	r4, {r5, fp}
 8003d18:	ddf0      	ble.n	8003cfc <_svfprintf_r+0x2a4>
 8003d1a:	9804      	ldr	r0, [sp, #16]
 8003d1c:	4631      	mov	r1, r6
 8003d1e:	aa21      	add	r2, sp, #132	; 0x84
 8003d20:	f005 fd6c 	bl	80097fc <__ssprint_r>
 8003d24:	2800      	cmp	r0, #0
 8003d26:	f47f af5f 	bne.w	8003be8 <_svfprintf_r+0x190>
 8003d2a:	f1aa 0a10 	sub.w	sl, sl, #16
 8003d2e:	f1ba 0f10 	cmp.w	sl, #16
 8003d32:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8003d34:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003d36:	463c      	mov	r4, r7
 8003d38:	dce7      	bgt.n	8003d0a <_svfprintf_r+0x2b2>
 8003d3a:	462b      	mov	r3, r5
 8003d3c:	4645      	mov	r5, r8
 8003d3e:	46d0      	mov	r8, sl
 8003d40:	469a      	mov	sl, r3
 8003d42:	3201      	adds	r2, #1
 8003d44:	eb08 0b01 	add.w	fp, r8, r1
 8003d48:	2a07      	cmp	r2, #7
 8003d4a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003d4e:	9222      	str	r2, [sp, #136]	; 0x88
 8003d50:	f8c4 a000 	str.w	sl, [r4]
 8003d54:	f8c4 8004 	str.w	r8, [r4, #4]
 8003d58:	f300 847e 	bgt.w	8004658 <_svfprintf_r+0xc00>
 8003d5c:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8003d60:	3408      	adds	r4, #8
 8003d62:	f1bc 0f00 	cmp.w	ip, #0
 8003d66:	d00f      	beq.n	8003d88 <_svfprintf_r+0x330>
 8003d68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	f10b 0b01 	add.w	fp, fp, #1
 8003d70:	f10d 0167 	add.w	r1, sp, #103	; 0x67
 8003d74:	2201      	movs	r2, #1
 8003d76:	2b07      	cmp	r3, #7
 8003d78:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003d7c:	9322      	str	r3, [sp, #136]	; 0x88
 8003d7e:	e884 0006 	stmia.w	r4, {r1, r2}
 8003d82:	f300 83ea 	bgt.w	800455a <_svfprintf_r+0xb02>
 8003d86:	3408      	adds	r4, #8
 8003d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d8a:	b173      	cbz	r3, 8003daa <_svfprintf_r+0x352>
 8003d8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d8e:	3301      	adds	r3, #1
 8003d90:	f10b 0b02 	add.w	fp, fp, #2
 8003d94:	a91a      	add	r1, sp, #104	; 0x68
 8003d96:	2202      	movs	r2, #2
 8003d98:	2b07      	cmp	r3, #7
 8003d9a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003d9e:	9322      	str	r3, [sp, #136]	; 0x88
 8003da0:	e884 0006 	stmia.w	r4, {r1, r2}
 8003da4:	f300 83cd 	bgt.w	8004542 <_svfprintf_r+0xaea>
 8003da8:	3408      	adds	r4, #8
 8003daa:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8003dae:	f000 8315 	beq.w	80043dc <_svfprintf_r+0x984>
 8003db2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003db6:	ebc2 0a03 	rsb	sl, r2, r3
 8003dba:	f1ba 0f00 	cmp.w	sl, #0
 8003dbe:	dd3c      	ble.n	8003e3a <_svfprintf_r+0x3e2>
 8003dc0:	f1ba 0f10 	cmp.w	sl, #16
 8003dc4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003dc6:	f8df 9464 	ldr.w	r9, [pc, #1124]	; 800422c <_svfprintf_r+0x7d4>
 8003dca:	dd2b      	ble.n	8003e24 <_svfprintf_r+0x3cc>
 8003dcc:	4649      	mov	r1, r9
 8003dce:	465b      	mov	r3, fp
 8003dd0:	46a9      	mov	r9, r5
 8003dd2:	f04f 0810 	mov.w	r8, #16
 8003dd6:	f8dd b010 	ldr.w	fp, [sp, #16]
 8003dda:	460d      	mov	r5, r1
 8003ddc:	e006      	b.n	8003dec <_svfprintf_r+0x394>
 8003dde:	f1aa 0a10 	sub.w	sl, sl, #16
 8003de2:	f1ba 0f10 	cmp.w	sl, #16
 8003de6:	f104 0408 	add.w	r4, r4, #8
 8003dea:	dd17      	ble.n	8003e1c <_svfprintf_r+0x3c4>
 8003dec:	3201      	adds	r2, #1
 8003dee:	3310      	adds	r3, #16
 8003df0:	2a07      	cmp	r2, #7
 8003df2:	9323      	str	r3, [sp, #140]	; 0x8c
 8003df4:	9222      	str	r2, [sp, #136]	; 0x88
 8003df6:	e884 0120 	stmia.w	r4, {r5, r8}
 8003dfa:	ddf0      	ble.n	8003dde <_svfprintf_r+0x386>
 8003dfc:	4658      	mov	r0, fp
 8003dfe:	4631      	mov	r1, r6
 8003e00:	aa21      	add	r2, sp, #132	; 0x84
 8003e02:	f005 fcfb 	bl	80097fc <__ssprint_r>
 8003e06:	2800      	cmp	r0, #0
 8003e08:	f47f aeee 	bne.w	8003be8 <_svfprintf_r+0x190>
 8003e0c:	f1aa 0a10 	sub.w	sl, sl, #16
 8003e10:	f1ba 0f10 	cmp.w	sl, #16
 8003e14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e16:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003e18:	463c      	mov	r4, r7
 8003e1a:	dce7      	bgt.n	8003dec <_svfprintf_r+0x394>
 8003e1c:	469b      	mov	fp, r3
 8003e1e:	462b      	mov	r3, r5
 8003e20:	464d      	mov	r5, r9
 8003e22:	4699      	mov	r9, r3
 8003e24:	3201      	adds	r2, #1
 8003e26:	44d3      	add	fp, sl
 8003e28:	2a07      	cmp	r2, #7
 8003e2a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003e2e:	9222      	str	r2, [sp, #136]	; 0x88
 8003e30:	e884 0600 	stmia.w	r4, {r9, sl}
 8003e34:	f300 8379 	bgt.w	800452a <_svfprintf_r+0xad2>
 8003e38:	3408      	adds	r4, #8
 8003e3a:	9b03      	ldr	r3, [sp, #12]
 8003e3c:	05d9      	lsls	r1, r3, #23
 8003e3e:	f100 8270 	bmi.w	8004322 <_svfprintf_r+0x8ca>
 8003e42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e48:	6022      	str	r2, [r4, #0]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	448b      	add	fp, r1
 8003e4e:	2b07      	cmp	r3, #7
 8003e50:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003e54:	6061      	str	r1, [r4, #4]
 8003e56:	9322      	str	r3, [sp, #136]	; 0x88
 8003e58:	f300 834a 	bgt.w	80044f0 <_svfprintf_r+0xa98>
 8003e5c:	3408      	adds	r4, #8
 8003e5e:	9b03      	ldr	r3, [sp, #12]
 8003e60:	075a      	lsls	r2, r3, #29
 8003e62:	d541      	bpl.n	8003ee8 <_svfprintf_r+0x490>
 8003e64:	9b08      	ldr	r3, [sp, #32]
 8003e66:	9a05      	ldr	r2, [sp, #20]
 8003e68:	1a9d      	subs	r5, r3, r2
 8003e6a:	2d00      	cmp	r5, #0
 8003e6c:	dd3c      	ble.n	8003ee8 <_svfprintf_r+0x490>
 8003e6e:	2d10      	cmp	r5, #16
 8003e70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e72:	f8df a3bc 	ldr.w	sl, [pc, #956]	; 8004230 <_svfprintf_r+0x7d8>
 8003e76:	dd23      	ble.n	8003ec0 <_svfprintf_r+0x468>
 8003e78:	f04f 0810 	mov.w	r8, #16
 8003e7c:	465a      	mov	r2, fp
 8003e7e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8003e82:	e004      	b.n	8003e8e <_svfprintf_r+0x436>
 8003e84:	3d10      	subs	r5, #16
 8003e86:	2d10      	cmp	r5, #16
 8003e88:	f104 0408 	add.w	r4, r4, #8
 8003e8c:	dd17      	ble.n	8003ebe <_svfprintf_r+0x466>
 8003e8e:	3301      	adds	r3, #1
 8003e90:	3210      	adds	r2, #16
 8003e92:	2b07      	cmp	r3, #7
 8003e94:	9223      	str	r2, [sp, #140]	; 0x8c
 8003e96:	9322      	str	r3, [sp, #136]	; 0x88
 8003e98:	f8c4 a000 	str.w	sl, [r4]
 8003e9c:	f8c4 8004 	str.w	r8, [r4, #4]
 8003ea0:	ddf0      	ble.n	8003e84 <_svfprintf_r+0x42c>
 8003ea2:	4648      	mov	r0, r9
 8003ea4:	4631      	mov	r1, r6
 8003ea6:	aa21      	add	r2, sp, #132	; 0x84
 8003ea8:	f005 fca8 	bl	80097fc <__ssprint_r>
 8003eac:	2800      	cmp	r0, #0
 8003eae:	f47f ae9b 	bne.w	8003be8 <_svfprintf_r+0x190>
 8003eb2:	3d10      	subs	r5, #16
 8003eb4:	2d10      	cmp	r5, #16
 8003eb6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8003eb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003eba:	463c      	mov	r4, r7
 8003ebc:	dce7      	bgt.n	8003e8e <_svfprintf_r+0x436>
 8003ebe:	4693      	mov	fp, r2
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	44ab      	add	fp, r5
 8003ec4:	2b07      	cmp	r3, #7
 8003ec6:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003eca:	9322      	str	r3, [sp, #136]	; 0x88
 8003ecc:	f8c4 a000 	str.w	sl, [r4]
 8003ed0:	6065      	str	r5, [r4, #4]
 8003ed2:	dd09      	ble.n	8003ee8 <_svfprintf_r+0x490>
 8003ed4:	9804      	ldr	r0, [sp, #16]
 8003ed6:	4631      	mov	r1, r6
 8003ed8:	aa21      	add	r2, sp, #132	; 0x84
 8003eda:	f005 fc8f 	bl	80097fc <__ssprint_r>
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	f47f ae82 	bne.w	8003be8 <_svfprintf_r+0x190>
 8003ee4:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8003ee8:	9b07      	ldr	r3, [sp, #28]
 8003eea:	9a05      	ldr	r2, [sp, #20]
 8003eec:	9908      	ldr	r1, [sp, #32]
 8003eee:	428a      	cmp	r2, r1
 8003ef0:	bfac      	ite	ge
 8003ef2:	189b      	addge	r3, r3, r2
 8003ef4:	185b      	addlt	r3, r3, r1
 8003ef6:	9307      	str	r3, [sp, #28]
 8003ef8:	f1bb 0f00 	cmp.w	fp, #0
 8003efc:	f47f ae6c 	bne.w	8003bd8 <_svfprintf_r+0x180>
 8003f00:	2300      	movs	r3, #0
 8003f02:	9322      	str	r3, [sp, #136]	; 0x88
 8003f04:	463c      	mov	r4, r7
 8003f06:	e5ce      	b.n	8003aa6 <_svfprintf_r+0x4e>
 8003f08:	4619      	mov	r1, r3
 8003f0a:	9803      	ldr	r0, [sp, #12]
 8003f0c:	781d      	ldrb	r5, [r3, #0]
 8003f0e:	f040 0004 	orr.w	r0, r0, #4
 8003f12:	9003      	str	r0, [sp, #12]
 8003f14:	e5f5      	b.n	8003b02 <_svfprintf_r+0xaa>
 8003f16:	9306      	str	r3, [sp, #24]
 8003f18:	9b03      	ldr	r3, [sp, #12]
 8003f1a:	f013 0320 	ands.w	r3, r3, #32
 8003f1e:	f000 810e 	beq.w	800413e <_svfprintf_r+0x6e6>
 8003f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f24:	f103 0907 	add.w	r9, r3, #7
 8003f28:	f029 0307 	bic.w	r3, r9, #7
 8003f2c:	f103 0208 	add.w	r2, r3, #8
 8003f30:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f34:	920a      	str	r2, [sp, #40]	; 0x28
 8003f36:	2300      	movs	r3, #0
 8003f38:	e675      	b.n	8003c26 <_svfprintf_r+0x1ce>
 8003f3a:	781d      	ldrb	r5, [r3, #0]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	222b      	movs	r2, #43	; 0x2b
 8003f40:	e5df      	b.n	8003b02 <_svfprintf_r+0xaa>
 8003f42:	781d      	ldrb	r5, [r3, #0]
 8003f44:	2d2a      	cmp	r5, #42	; 0x2a
 8003f46:	f103 0101 	add.w	r1, r3, #1
 8003f4a:	f000 87b8 	beq.w	8004ebe <_svfprintf_r+0x1466>
 8003f4e:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8003f52:	2809      	cmp	r0, #9
 8003f54:	460b      	mov	r3, r1
 8003f56:	f04f 0a00 	mov.w	sl, #0
 8003f5a:	f63f add3 	bhi.w	8003b04 <_svfprintf_r+0xac>
 8003f5e:	f813 5b01 	ldrb.w	r5, [r3], #1
 8003f62:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 8003f66:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8003f6a:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8003f6e:	2809      	cmp	r0, #9
 8003f70:	d9f5      	bls.n	8003f5e <_svfprintf_r+0x506>
 8003f72:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
 8003f76:	e5c5      	b.n	8003b04 <_svfprintf_r+0xac>
 8003f78:	9306      	str	r3, [sp, #24]
 8003f7a:	9b03      	ldr	r3, [sp, #12]
 8003f7c:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003f80:	069b      	lsls	r3, r3, #26
 8003f82:	f140 80a1 	bpl.w	80040c8 <_svfprintf_r+0x670>
 8003f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f88:	f103 0907 	add.w	r9, r3, #7
 8003f8c:	f029 0907 	bic.w	r9, r9, #7
 8003f90:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003f94:	f109 0108 	add.w	r1, r9, #8
 8003f98:	910a      	str	r1, [sp, #40]	; 0x28
 8003f9a:	4690      	mov	r8, r2
 8003f9c:	4699      	mov	r9, r3
 8003f9e:	2a00      	cmp	r2, #0
 8003fa0:	f173 0300 	sbcs.w	r3, r3, #0
 8003fa4:	f2c0 840e 	blt.w	80047c4 <_svfprintf_r+0xd6c>
 8003fa8:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8003fac:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e63e      	b.n	8003c32 <_svfprintf_r+0x1da>
 8003fb4:	9306      	str	r3, [sp, #24]
 8003fb6:	4b9b      	ldr	r3, [pc, #620]	; (8004224 <_svfprintf_r+0x7cc>)
 8003fb8:	9312      	str	r3, [sp, #72]	; 0x48
 8003fba:	9b03      	ldr	r3, [sp, #12]
 8003fbc:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003fc0:	069b      	lsls	r3, r3, #26
 8003fc2:	f140 80f3 	bpl.w	80041ac <_svfprintf_r+0x754>
 8003fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fc8:	f103 0907 	add.w	r9, r3, #7
 8003fcc:	f029 0307 	bic.w	r3, r9, #7
 8003fd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003fd4:	f103 0208 	add.w	r2, r3, #8
 8003fd8:	920a      	str	r2, [sp, #40]	; 0x28
 8003fda:	9b03      	ldr	r3, [sp, #12]
 8003fdc:	07d9      	lsls	r1, r3, #31
 8003fde:	f140 80f5 	bpl.w	80041cc <_svfprintf_r+0x774>
 8003fe2:	ea58 0309 	orrs.w	r3, r8, r9
 8003fe6:	f000 80f1 	beq.w	80041cc <_svfprintf_r+0x774>
 8003fea:	9a03      	ldr	r2, [sp, #12]
 8003fec:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 8003ff0:	2330      	movs	r3, #48	; 0x30
 8003ff2:	f042 0202 	orr.w	r2, r2, #2
 8003ff6:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8003ffa:	9203      	str	r2, [sp, #12]
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e612      	b.n	8003c26 <_svfprintf_r+0x1ce>
 8004000:	781d      	ldrb	r5, [r3, #0]
 8004002:	4619      	mov	r1, r3
 8004004:	2a00      	cmp	r2, #0
 8004006:	f47f ad7c 	bne.w	8003b02 <_svfprintf_r+0xaa>
 800400a:	2220      	movs	r2, #32
 800400c:	e579      	b.n	8003b02 <_svfprintf_r+0xaa>
 800400e:	9903      	ldr	r1, [sp, #12]
 8004010:	f041 0120 	orr.w	r1, r1, #32
 8004014:	9103      	str	r1, [sp, #12]
 8004016:	781d      	ldrb	r5, [r3, #0]
 8004018:	4619      	mov	r1, r3
 800401a:	e572      	b.n	8003b02 <_svfprintf_r+0xaa>
 800401c:	9306      	str	r3, [sp, #24]
 800401e:	9b03      	ldr	r3, [sp, #12]
 8004020:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004024:	069a      	lsls	r2, r3, #26
 8004026:	f140 84b0 	bpl.w	800498a <_svfprintf_r+0xf32>
 800402a:	9907      	ldr	r1, [sp, #28]
 800402c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800402e:	ea4f 79e1 	mov.w	r9, r1, asr #31
 8004032:	6813      	ldr	r3, [r2, #0]
 8004034:	4608      	mov	r0, r1
 8004036:	4688      	mov	r8, r1
 8004038:	3204      	adds	r2, #4
 800403a:	4649      	mov	r1, r9
 800403c:	920a      	str	r2, [sp, #40]	; 0x28
 800403e:	e9c3 0100 	strd	r0, r1, [r3]
 8004042:	e530      	b.n	8003aa6 <_svfprintf_r+0x4e>
 8004044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004046:	9306      	str	r3, [sp, #24]
 8004048:	6813      	ldr	r3, [r2, #0]
 800404a:	930c      	str	r3, [sp, #48]	; 0x30
 800404c:	f04f 0b00 	mov.w	fp, #0
 8004050:	f88d b067 	strb.w	fp, [sp, #103]	; 0x67
 8004054:	f102 0904 	add.w	r9, r2, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 8646 	beq.w	8004cea <_svfprintf_r+0x1292>
 800405e:	f1ba 0f00 	cmp.w	sl, #0
 8004062:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004064:	f2c0 85f6 	blt.w	8004c54 <_svfprintf_r+0x11fc>
 8004068:	4659      	mov	r1, fp
 800406a:	4652      	mov	r2, sl
 800406c:	f004 fab2 	bl	80085d4 <memchr>
 8004070:	2800      	cmp	r0, #0
 8004072:	f000 8677 	beq.w	8004d64 <_svfprintf_r+0x130c>
 8004076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004078:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800407c:	1ac3      	subs	r3, r0, r3
 800407e:	9309      	str	r3, [sp, #36]	; 0x24
 8004080:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8004084:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004088:	9305      	str	r3, [sp, #20]
 800408a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800408e:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8004092:	e603      	b.n	8003c9c <_svfprintf_r+0x244>
 8004094:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8004098:	2100      	movs	r1, #0
 800409a:	f813 5b01 	ldrb.w	r5, [r3], #1
 800409e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80040a2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80040a6:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80040aa:	2809      	cmp	r0, #9
 80040ac:	d9f5      	bls.n	800409a <_svfprintf_r+0x642>
 80040ae:	9108      	str	r1, [sp, #32]
 80040b0:	e528      	b.n	8003b04 <_svfprintf_r+0xac>
 80040b2:	9306      	str	r3, [sp, #24]
 80040b4:	9b03      	ldr	r3, [sp, #12]
 80040b6:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80040ba:	f043 0310 	orr.w	r3, r3, #16
 80040be:	9303      	str	r3, [sp, #12]
 80040c0:	9b03      	ldr	r3, [sp, #12]
 80040c2:	069b      	lsls	r3, r3, #26
 80040c4:	f53f af5f 	bmi.w	8003f86 <_svfprintf_r+0x52e>
 80040c8:	9b03      	ldr	r3, [sp, #12]
 80040ca:	06d8      	lsls	r0, r3, #27
 80040cc:	f100 836b 	bmi.w	80047a6 <_svfprintf_r+0xd4e>
 80040d0:	9b03      	ldr	r3, [sp, #12]
 80040d2:	0659      	lsls	r1, r3, #25
 80040d4:	f140 8367 	bpl.w	80047a6 <_svfprintf_r+0xd4e>
 80040d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80040da:	f9b1 8000 	ldrsh.w	r8, [r1]
 80040de:	3104      	adds	r1, #4
 80040e0:	ea4f 79e8 	mov.w	r9, r8, asr #31
 80040e4:	4642      	mov	r2, r8
 80040e6:	464b      	mov	r3, r9
 80040e8:	910a      	str	r1, [sp, #40]	; 0x28
 80040ea:	e758      	b.n	8003f9e <_svfprintf_r+0x546>
 80040ec:	781d      	ldrb	r5, [r3, #0]
 80040ee:	9903      	ldr	r1, [sp, #12]
 80040f0:	2d6c      	cmp	r5, #108	; 0x6c
 80040f2:	f000 84d3 	beq.w	8004a9c <_svfprintf_r+0x1044>
 80040f6:	f041 0110 	orr.w	r1, r1, #16
 80040fa:	9103      	str	r1, [sp, #12]
 80040fc:	4619      	mov	r1, r3
 80040fe:	e500      	b.n	8003b02 <_svfprintf_r+0xaa>
 8004100:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004102:	6829      	ldr	r1, [r5, #0]
 8004104:	9108      	str	r1, [sp, #32]
 8004106:	4608      	mov	r0, r1
 8004108:	2800      	cmp	r0, #0
 800410a:	4629      	mov	r1, r5
 800410c:	f101 0104 	add.w	r1, r1, #4
 8004110:	f2c0 84cb 	blt.w	8004aaa <_svfprintf_r+0x1052>
 8004114:	910a      	str	r1, [sp, #40]	; 0x28
 8004116:	781d      	ldrb	r5, [r3, #0]
 8004118:	4619      	mov	r1, r3
 800411a:	e4f2      	b.n	8003b02 <_svfprintf_r+0xaa>
 800411c:	9903      	ldr	r1, [sp, #12]
 800411e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004122:	9103      	str	r1, [sp, #12]
 8004124:	781d      	ldrb	r5, [r3, #0]
 8004126:	4619      	mov	r1, r3
 8004128:	e4eb      	b.n	8003b02 <_svfprintf_r+0xaa>
 800412a:	9306      	str	r3, [sp, #24]
 800412c:	9b03      	ldr	r3, [sp, #12]
 800412e:	f043 0310 	orr.w	r3, r3, #16
 8004132:	9303      	str	r3, [sp, #12]
 8004134:	9b03      	ldr	r3, [sp, #12]
 8004136:	f013 0320 	ands.w	r3, r3, #32
 800413a:	f47f aef2 	bne.w	8003f22 <_svfprintf_r+0x4ca>
 800413e:	9a03      	ldr	r2, [sp, #12]
 8004140:	f012 0210 	ands.w	r2, r2, #16
 8004144:	f040 831c 	bne.w	8004780 <_svfprintf_r+0xd28>
 8004148:	9b03      	ldr	r3, [sp, #12]
 800414a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800414e:	f000 8317 	beq.w	8004780 <_svfprintf_r+0xd28>
 8004152:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004154:	4613      	mov	r3, r2
 8004156:	460a      	mov	r2, r1
 8004158:	3204      	adds	r2, #4
 800415a:	f8b1 8000 	ldrh.w	r8, [r1]
 800415e:	920a      	str	r2, [sp, #40]	; 0x28
 8004160:	f04f 0900 	mov.w	r9, #0
 8004164:	e55f      	b.n	8003c26 <_svfprintf_r+0x1ce>
 8004166:	9306      	str	r3, [sp, #24]
 8004168:	9b03      	ldr	r3, [sp, #12]
 800416a:	f043 0310 	orr.w	r3, r3, #16
 800416e:	9303      	str	r3, [sp, #12]
 8004170:	9b03      	ldr	r3, [sp, #12]
 8004172:	0698      	lsls	r0, r3, #26
 8004174:	f53f ad4c 	bmi.w	8003c10 <_svfprintf_r+0x1b8>
 8004178:	9b03      	ldr	r3, [sp, #12]
 800417a:	06d9      	lsls	r1, r3, #27
 800417c:	f100 8309 	bmi.w	8004792 <_svfprintf_r+0xd3a>
 8004180:	9b03      	ldr	r3, [sp, #12]
 8004182:	065a      	lsls	r2, r3, #25
 8004184:	f140 8305 	bpl.w	8004792 <_svfprintf_r+0xd3a>
 8004188:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800418a:	f8b2 8000 	ldrh.w	r8, [r2]
 800418e:	3204      	adds	r2, #4
 8004190:	f04f 0900 	mov.w	r9, #0
 8004194:	2301      	movs	r3, #1
 8004196:	920a      	str	r2, [sp, #40]	; 0x28
 8004198:	e545      	b.n	8003c26 <_svfprintf_r+0x1ce>
 800419a:	9306      	str	r3, [sp, #24]
 800419c:	4b22      	ldr	r3, [pc, #136]	; (8004228 <_svfprintf_r+0x7d0>)
 800419e:	9312      	str	r3, [sp, #72]	; 0x48
 80041a0:	9b03      	ldr	r3, [sp, #12]
 80041a2:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80041a6:	069b      	lsls	r3, r3, #26
 80041a8:	f53f af0d 	bmi.w	8003fc6 <_svfprintf_r+0x56e>
 80041ac:	9b03      	ldr	r3, [sp, #12]
 80041ae:	06d8      	lsls	r0, r3, #27
 80041b0:	f140 83dc 	bpl.w	800496c <_svfprintf_r+0xf14>
 80041b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041b6:	4613      	mov	r3, r2
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4698      	mov	r8, r3
 80041bc:	9b03      	ldr	r3, [sp, #12]
 80041be:	3204      	adds	r2, #4
 80041c0:	07d9      	lsls	r1, r3, #31
 80041c2:	920a      	str	r2, [sp, #40]	; 0x28
 80041c4:	f04f 0900 	mov.w	r9, #0
 80041c8:	f53f af0b 	bmi.w	8003fe2 <_svfprintf_r+0x58a>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e52a      	b.n	8003c26 <_svfprintf_r+0x1ce>
 80041d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80041d2:	9306      	str	r3, [sp, #24]
 80041d4:	680a      	ldr	r2, [r1, #0]
 80041d6:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 80041da:	2300      	movs	r3, #0
 80041dc:	2201      	movs	r2, #1
 80041de:	3104      	adds	r1, #4
 80041e0:	469c      	mov	ip, r3
 80041e2:	9205      	str	r2, [sp, #20]
 80041e4:	910a      	str	r1, [sp, #40]	; 0x28
 80041e6:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80041ea:	ab24      	add	r3, sp, #144	; 0x90
 80041ec:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 80041f0:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 80041f4:	9209      	str	r2, [sp, #36]	; 0x24
 80041f6:	930c      	str	r3, [sp, #48]	; 0x30
 80041f8:	e556      	b.n	8003ca8 <_svfprintf_r+0x250>
 80041fa:	9903      	ldr	r1, [sp, #12]
 80041fc:	f041 0108 	orr.w	r1, r1, #8
 8004200:	9103      	str	r1, [sp, #12]
 8004202:	781d      	ldrb	r5, [r3, #0]
 8004204:	4619      	mov	r1, r3
 8004206:	e47c      	b.n	8003b02 <_svfprintf_r+0xaa>
 8004208:	9903      	ldr	r1, [sp, #12]
 800420a:	f041 0101 	orr.w	r1, r1, #1
 800420e:	9103      	str	r1, [sp, #12]
 8004210:	781d      	ldrb	r5, [r3, #0]
 8004212:	4619      	mov	r1, r3
 8004214:	e475      	b.n	8003b02 <_svfprintf_r+0xaa>
 8004216:	9903      	ldr	r1, [sp, #12]
 8004218:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800421c:	9103      	str	r1, [sp, #12]
 800421e:	781d      	ldrb	r5, [r3, #0]
 8004220:	4619      	mov	r1, r3
 8004222:	e46e      	b.n	8003b02 <_svfprintf_r+0xaa>
 8004224:	0800c938 	.word	0x0800c938
 8004228:	0800c924 	.word	0x0800c924
 800422c:	0800c8f4 	.word	0x0800c8f4
 8004230:	0800c904 	.word	0x0800c904
 8004234:	9306      	str	r3, [sp, #24]
 8004236:	9b03      	ldr	r3, [sp, #12]
 8004238:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800423c:	f013 0f08 	tst.w	r3, #8
 8004240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004242:	46d3      	mov	fp, sl
 8004244:	f103 0907 	add.w	r9, r3, #7
 8004248:	f000 8386 	beq.w	8004958 <_svfprintf_r+0xf00>
 800424c:	f029 0307 	bic.w	r3, r9, #7
 8004250:	ed93 7b00 	vldr	d7, [r3]
 8004254:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004258:	f103 0208 	add.w	r2, r3, #8
 800425c:	920a      	str	r2, [sp, #40]	; 0x28
 800425e:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8004262:	f005 f8cb 	bl	80093fc <__fpclassifyd>
 8004266:	2801      	cmp	r0, #1
 8004268:	f040 835a 	bne.w	8004920 <_svfprintf_r+0xec8>
 800426c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004270:	2200      	movs	r2, #0
 8004272:	2300      	movs	r3, #0
 8004274:	f007 fe3e 	bl	800bef4 <__aeabi_dcmplt>
 8004278:	2800      	cmp	r0, #0
 800427a:	f040 856b 	bne.w	8004d54 <_svfprintf_r+0x12fc>
 800427e:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8004282:	9b03      	ldr	r3, [sp, #12]
 8004284:	4abd      	ldr	r2, [pc, #756]	; (800457c <_svfprintf_r+0xb24>)
 8004286:	f8df e300 	ldr.w	lr, [pc, #768]	; 8004588 <_svfprintf_r+0xb30>
 800428a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800428e:	9303      	str	r3, [sp, #12]
 8004290:	4613      	mov	r3, r2
 8004292:	2103      	movs	r1, #3
 8004294:	2000      	movs	r0, #0
 8004296:	2d47      	cmp	r5, #71	; 0x47
 8004298:	bfd8      	it	le
 800429a:	4673      	movle	r3, lr
 800429c:	9105      	str	r1, [sp, #20]
 800429e:	900d      	str	r0, [sp, #52]	; 0x34
 80042a0:	930c      	str	r3, [sp, #48]	; 0x30
 80042a2:	9109      	str	r1, [sp, #36]	; 0x24
 80042a4:	900e      	str	r0, [sp, #56]	; 0x38
 80042a6:	e4f9      	b.n	8003c9c <_svfprintf_r+0x244>
 80042a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80042aa:	9903      	ldr	r1, [sp, #12]
 80042ac:	9306      	str	r3, [sp, #24]
 80042ae:	2230      	movs	r2, #48	; 0x30
 80042b0:	6803      	ldr	r3, [r0, #0]
 80042b2:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 80042b6:	4602      	mov	r2, r0
 80042b8:	2578      	movs	r5, #120	; 0x78
 80042ba:	f041 0102 	orr.w	r1, r1, #2
 80042be:	3204      	adds	r2, #4
 80042c0:	4698      	mov	r8, r3
 80042c2:	4baf      	ldr	r3, [pc, #700]	; (8004580 <_svfprintf_r+0xb28>)
 80042c4:	9312      	str	r3, [sp, #72]	; 0x48
 80042c6:	9103      	str	r1, [sp, #12]
 80042c8:	920a      	str	r2, [sp, #40]	; 0x28
 80042ca:	f04f 0900 	mov.w	r9, #0
 80042ce:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 80042d2:	2302      	movs	r3, #2
 80042d4:	e4a7      	b.n	8003c26 <_svfprintf_r+0x1ce>
 80042d6:	9306      	str	r3, [sp, #24]
 80042d8:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80042dc:	2d00      	cmp	r5, #0
 80042de:	f000 83d1 	beq.w	8004a84 <_svfprintf_r+0x102c>
 80042e2:	2300      	movs	r3, #0
 80042e4:	2201      	movs	r2, #1
 80042e6:	469c      	mov	ip, r3
 80042e8:	9205      	str	r2, [sp, #20]
 80042ea:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
 80042ee:	e77a      	b.n	80041e6 <_svfprintf_r+0x78e>
 80042f0:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80042f4:	e535      	b.n	8003d62 <_svfprintf_r+0x30a>
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	f47f acad 	bne.w	8003c56 <_svfprintf_r+0x1fe>
 80042fc:	f1b9 0f00 	cmp.w	r9, #0
 8004300:	bf08      	it	eq
 8004302:	f1b8 0f0a 	cmpeq.w	r8, #10
 8004306:	f080 820d 	bcs.w	8004724 <_svfprintf_r+0xccc>
 800430a:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 800430e:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8004312:	f80b 8d41 	strb.w	r8, [fp, #-65]!
 8004316:	ebcb 0307 	rsb	r3, fp, r7
 800431a:	9309      	str	r3, [sp, #36]	; 0x24
 800431c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8004320:	e4b4      	b.n	8003c8c <_svfprintf_r+0x234>
 8004322:	2d65      	cmp	r5, #101	; 0x65
 8004324:	f340 80a0 	ble.w	8004468 <_svfprintf_r+0xa10>
 8004328:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800432c:	2200      	movs	r2, #0
 800432e:	2300      	movs	r3, #0
 8004330:	f007 fdd6 	bl	800bee0 <__aeabi_dcmpeq>
 8004334:	2800      	cmp	r0, #0
 8004336:	f000 8144 	beq.w	80045c2 <_svfprintf_r+0xb6a>
 800433a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800433c:	4a91      	ldr	r2, [pc, #580]	; (8004584 <_svfprintf_r+0xb2c>)
 800433e:	6022      	str	r2, [r4, #0]
 8004340:	3301      	adds	r3, #1
 8004342:	f10b 0b01 	add.w	fp, fp, #1
 8004346:	2201      	movs	r2, #1
 8004348:	2b07      	cmp	r3, #7
 800434a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800434e:	9322      	str	r3, [sp, #136]	; 0x88
 8004350:	6062      	str	r2, [r4, #4]
 8004352:	f300 833f 	bgt.w	80049d4 <_svfprintf_r+0xf7c>
 8004356:	3408      	adds	r4, #8
 8004358:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800435a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800435c:	4293      	cmp	r3, r2
 800435e:	db03      	blt.n	8004368 <_svfprintf_r+0x910>
 8004360:	9b03      	ldr	r3, [sp, #12]
 8004362:	07da      	lsls	r2, r3, #31
 8004364:	f57f ad7b 	bpl.w	8003e5e <_svfprintf_r+0x406>
 8004368:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800436a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800436c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800436e:	6022      	str	r2, [r4, #0]
 8004370:	3301      	adds	r3, #1
 8004372:	448b      	add	fp, r1
 8004374:	2b07      	cmp	r3, #7
 8004376:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800437a:	6061      	str	r1, [r4, #4]
 800437c:	9322      	str	r3, [sp, #136]	; 0x88
 800437e:	f300 839b 	bgt.w	8004ab8 <_svfprintf_r+0x1060>
 8004382:	3408      	adds	r4, #8
 8004384:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004386:	1e5d      	subs	r5, r3, #1
 8004388:	2d00      	cmp	r5, #0
 800438a:	f77f ad68 	ble.w	8003e5e <_svfprintf_r+0x406>
 800438e:	2d10      	cmp	r5, #16
 8004390:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004392:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 800458c <_svfprintf_r+0xb34>
 8004396:	f340 81b9 	ble.w	800470c <_svfprintf_r+0xcb4>
 800439a:	f04f 0810 	mov.w	r8, #16
 800439e:	465a      	mov	r2, fp
 80043a0:	f8dd a010 	ldr.w	sl, [sp, #16]
 80043a4:	e004      	b.n	80043b0 <_svfprintf_r+0x958>
 80043a6:	3408      	adds	r4, #8
 80043a8:	3d10      	subs	r5, #16
 80043aa:	2d10      	cmp	r5, #16
 80043ac:	f340 81ad 	ble.w	800470a <_svfprintf_r+0xcb2>
 80043b0:	3301      	adds	r3, #1
 80043b2:	3210      	adds	r2, #16
 80043b4:	2b07      	cmp	r3, #7
 80043b6:	9223      	str	r2, [sp, #140]	; 0x8c
 80043b8:	9322      	str	r3, [sp, #136]	; 0x88
 80043ba:	f8c4 9000 	str.w	r9, [r4]
 80043be:	f8c4 8004 	str.w	r8, [r4, #4]
 80043c2:	ddf0      	ble.n	80043a6 <_svfprintf_r+0x94e>
 80043c4:	4650      	mov	r0, sl
 80043c6:	4631      	mov	r1, r6
 80043c8:	aa21      	add	r2, sp, #132	; 0x84
 80043ca:	f005 fa17 	bl	80097fc <__ssprint_r>
 80043ce:	2800      	cmp	r0, #0
 80043d0:	f47f ac0a 	bne.w	8003be8 <_svfprintf_r+0x190>
 80043d4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80043d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80043d8:	463c      	mov	r4, r7
 80043da:	e7e5      	b.n	80043a8 <_svfprintf_r+0x950>
 80043dc:	9b08      	ldr	r3, [sp, #32]
 80043de:	9a05      	ldr	r2, [sp, #20]
 80043e0:	ebc2 0a03 	rsb	sl, r2, r3
 80043e4:	f1ba 0f00 	cmp.w	sl, #0
 80043e8:	f77f ace3 	ble.w	8003db2 <_svfprintf_r+0x35a>
 80043ec:	f1ba 0f10 	cmp.w	sl, #16
 80043f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80043f2:	f8df 9198 	ldr.w	r9, [pc, #408]	; 800458c <_svfprintf_r+0xb34>
 80043f6:	dd2b      	ble.n	8004450 <_svfprintf_r+0x9f8>
 80043f8:	4649      	mov	r1, r9
 80043fa:	465b      	mov	r3, fp
 80043fc:	46a9      	mov	r9, r5
 80043fe:	f04f 0810 	mov.w	r8, #16
 8004402:	f8dd b010 	ldr.w	fp, [sp, #16]
 8004406:	460d      	mov	r5, r1
 8004408:	e006      	b.n	8004418 <_svfprintf_r+0x9c0>
 800440a:	f1aa 0a10 	sub.w	sl, sl, #16
 800440e:	f1ba 0f10 	cmp.w	sl, #16
 8004412:	f104 0408 	add.w	r4, r4, #8
 8004416:	dd17      	ble.n	8004448 <_svfprintf_r+0x9f0>
 8004418:	3201      	adds	r2, #1
 800441a:	3310      	adds	r3, #16
 800441c:	2a07      	cmp	r2, #7
 800441e:	9323      	str	r3, [sp, #140]	; 0x8c
 8004420:	9222      	str	r2, [sp, #136]	; 0x88
 8004422:	e884 0120 	stmia.w	r4, {r5, r8}
 8004426:	ddf0      	ble.n	800440a <_svfprintf_r+0x9b2>
 8004428:	4658      	mov	r0, fp
 800442a:	4631      	mov	r1, r6
 800442c:	aa21      	add	r2, sp, #132	; 0x84
 800442e:	f005 f9e5 	bl	80097fc <__ssprint_r>
 8004432:	2800      	cmp	r0, #0
 8004434:	f47f abd8 	bne.w	8003be8 <_svfprintf_r+0x190>
 8004438:	f1aa 0a10 	sub.w	sl, sl, #16
 800443c:	f1ba 0f10 	cmp.w	sl, #16
 8004440:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004442:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004444:	463c      	mov	r4, r7
 8004446:	dce7      	bgt.n	8004418 <_svfprintf_r+0x9c0>
 8004448:	469b      	mov	fp, r3
 800444a:	462b      	mov	r3, r5
 800444c:	464d      	mov	r5, r9
 800444e:	4699      	mov	r9, r3
 8004450:	3201      	adds	r2, #1
 8004452:	44d3      	add	fp, sl
 8004454:	2a07      	cmp	r2, #7
 8004456:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800445a:	9222      	str	r2, [sp, #136]	; 0x88
 800445c:	e884 0600 	stmia.w	r4, {r9, sl}
 8004460:	f300 8251 	bgt.w	8004906 <_svfprintf_r+0xeae>
 8004464:	3408      	adds	r4, #8
 8004466:	e4a4      	b.n	8003db2 <_svfprintf_r+0x35a>
 8004468:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800446a:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800446c:	2b01      	cmp	r3, #1
 800446e:	f340 821f 	ble.w	80048b0 <_svfprintf_r+0xe58>
 8004472:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	3501      	adds	r5, #1
 8004478:	f10b 0301 	add.w	r3, fp, #1
 800447c:	2201      	movs	r2, #1
 800447e:	2d07      	cmp	r5, #7
 8004480:	9323      	str	r3, [sp, #140]	; 0x8c
 8004482:	9522      	str	r5, [sp, #136]	; 0x88
 8004484:	6062      	str	r2, [r4, #4]
 8004486:	f300 8225 	bgt.w	80048d4 <_svfprintf_r+0xe7c>
 800448a:	3408      	adds	r4, #8
 800448c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800448e:	6061      	str	r1, [r4, #4]
 8004490:	3501      	adds	r5, #1
 8004492:	eb03 0b01 	add.w	fp, r3, r1
 8004496:	2d07      	cmp	r5, #7
 8004498:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800449a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800449e:	9522      	str	r5, [sp, #136]	; 0x88
 80044a0:	6023      	str	r3, [r4, #0]
 80044a2:	f300 8223 	bgt.w	80048ec <_svfprintf_r+0xe94>
 80044a6:	3408      	adds	r4, #8
 80044a8:	2300      	movs	r3, #0
 80044aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80044ae:	2200      	movs	r2, #0
 80044b0:	f007 fd16 	bl	800bee0 <__aeabi_dcmpeq>
 80044b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80044b6:	2800      	cmp	r0, #0
 80044b8:	f040 80dd 	bne.w	8004676 <_svfprintf_r+0xc1e>
 80044bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044be:	3b01      	subs	r3, #1
 80044c0:	3501      	adds	r5, #1
 80044c2:	3201      	adds	r2, #1
 80044c4:	449b      	add	fp, r3
 80044c6:	2d07      	cmp	r5, #7
 80044c8:	9522      	str	r5, [sp, #136]	; 0x88
 80044ca:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80044ce:	6022      	str	r2, [r4, #0]
 80044d0:	6063      	str	r3, [r4, #4]
 80044d2:	f300 810d 	bgt.w	80046f0 <_svfprintf_r+0xc98>
 80044d6:	3408      	adds	r4, #8
 80044d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80044da:	6062      	str	r2, [r4, #4]
 80044dc:	3501      	adds	r5, #1
 80044de:	4493      	add	fp, r2
 80044e0:	ab1d      	add	r3, sp, #116	; 0x74
 80044e2:	2d07      	cmp	r5, #7
 80044e4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80044e8:	9522      	str	r5, [sp, #136]	; 0x88
 80044ea:	6023      	str	r3, [r4, #0]
 80044ec:	f77f acb6 	ble.w	8003e5c <_svfprintf_r+0x404>
 80044f0:	9804      	ldr	r0, [sp, #16]
 80044f2:	4631      	mov	r1, r6
 80044f4:	aa21      	add	r2, sp, #132	; 0x84
 80044f6:	f005 f981 	bl	80097fc <__ssprint_r>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	f47f ab74 	bne.w	8003be8 <_svfprintf_r+0x190>
 8004500:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004504:	463c      	mov	r4, r7
 8004506:	e4aa      	b.n	8003e5e <_svfprintf_r+0x406>
 8004508:	2b00      	cmp	r3, #0
 800450a:	d132      	bne.n	8004572 <_svfprintf_r+0xb1a>
 800450c:	9b03      	ldr	r3, [sp, #12]
 800450e:	07d8      	lsls	r0, r3, #31
 8004510:	d52f      	bpl.n	8004572 <_svfprintf_r+0xb1a>
 8004512:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 8004516:	2330      	movs	r3, #48	; 0x30
 8004518:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 800451c:	ebcb 0307 	rsb	r3, fp, r7
 8004520:	9309      	str	r3, [sp, #36]	; 0x24
 8004522:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8004526:	f7ff bbb1 	b.w	8003c8c <_svfprintf_r+0x234>
 800452a:	9804      	ldr	r0, [sp, #16]
 800452c:	4631      	mov	r1, r6
 800452e:	aa21      	add	r2, sp, #132	; 0x84
 8004530:	f005 f964 	bl	80097fc <__ssprint_r>
 8004534:	2800      	cmp	r0, #0
 8004536:	f47f ab57 	bne.w	8003be8 <_svfprintf_r+0x190>
 800453a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800453e:	463c      	mov	r4, r7
 8004540:	e47b      	b.n	8003e3a <_svfprintf_r+0x3e2>
 8004542:	9804      	ldr	r0, [sp, #16]
 8004544:	4631      	mov	r1, r6
 8004546:	aa21      	add	r2, sp, #132	; 0x84
 8004548:	f005 f958 	bl	80097fc <__ssprint_r>
 800454c:	2800      	cmp	r0, #0
 800454e:	f47f ab4b 	bne.w	8003be8 <_svfprintf_r+0x190>
 8004552:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004556:	463c      	mov	r4, r7
 8004558:	e427      	b.n	8003daa <_svfprintf_r+0x352>
 800455a:	9804      	ldr	r0, [sp, #16]
 800455c:	4631      	mov	r1, r6
 800455e:	aa21      	add	r2, sp, #132	; 0x84
 8004560:	f005 f94c 	bl	80097fc <__ssprint_r>
 8004564:	2800      	cmp	r0, #0
 8004566:	f47f ab3f 	bne.w	8003be8 <_svfprintf_r+0x190>
 800456a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800456e:	463c      	mov	r4, r7
 8004570:	e40a      	b.n	8003d88 <_svfprintf_r+0x330>
 8004572:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004576:	970c      	str	r7, [sp, #48]	; 0x30
 8004578:	f7ff bb88 	b.w	8003c8c <_svfprintf_r+0x234>
 800457c:	0800c918 	.word	0x0800c918
 8004580:	0800c938 	.word	0x0800c938
 8004584:	0800c954 	.word	0x0800c954
 8004588:	0800c914 	.word	0x0800c914
 800458c:	0800c8f4 	.word	0x0800c8f4
 8004590:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004592:	46bb      	mov	fp, r7
 8004594:	ea4f 1318 	mov.w	r3, r8, lsr #4
 8004598:	f008 010f 	and.w	r1, r8, #15
 800459c:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
 80045a0:	ea4f 1219 	mov.w	r2, r9, lsr #4
 80045a4:	4698      	mov	r8, r3
 80045a6:	4691      	mov	r9, r2
 80045a8:	5c43      	ldrb	r3, [r0, r1]
 80045aa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 80045ae:	ea58 0309 	orrs.w	r3, r8, r9
 80045b2:	d1ef      	bne.n	8004594 <_svfprintf_r+0xb3c>
 80045b4:	465b      	mov	r3, fp
 80045b6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80045ba:	1afb      	subs	r3, r7, r3
 80045bc:	9309      	str	r3, [sp, #36]	; 0x24
 80045be:	f7ff bb65 	b.w	8003c8c <_svfprintf_r+0x234>
 80045c2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80045c4:	2d00      	cmp	r5, #0
 80045c6:	f340 8211 	ble.w	80049ec <_svfprintf_r+0xf94>
 80045ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80045cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80045ce:	428a      	cmp	r2, r1
 80045d0:	4613      	mov	r3, r2
 80045d2:	bfa8      	it	ge
 80045d4:	460b      	movge	r3, r1
 80045d6:	461d      	mov	r5, r3
 80045d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80045da:	2d00      	cmp	r5, #0
 80045dc:	eb01 0a02 	add.w	sl, r1, r2
 80045e0:	dd0b      	ble.n	80045fa <_svfprintf_r+0xba2>
 80045e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045e4:	6021      	str	r1, [r4, #0]
 80045e6:	3301      	adds	r3, #1
 80045e8:	44ab      	add	fp, r5
 80045ea:	2b07      	cmp	r3, #7
 80045ec:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80045f0:	6065      	str	r5, [r4, #4]
 80045f2:	9322      	str	r3, [sp, #136]	; 0x88
 80045f4:	f300 8355 	bgt.w	8004ca2 <_svfprintf_r+0x124a>
 80045f8:	3408      	adds	r4, #8
 80045fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045fc:	2d00      	cmp	r5, #0
 80045fe:	bfa8      	it	ge
 8004600:	1b5b      	subge	r3, r3, r5
 8004602:	2b00      	cmp	r3, #0
 8004604:	461d      	mov	r5, r3
 8004606:	f340 80f5 	ble.w	80047f4 <_svfprintf_r+0xd9c>
 800460a:	2d10      	cmp	r5, #16
 800460c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800460e:	f8df 9608 	ldr.w	r9, [pc, #1544]	; 8004c18 <_svfprintf_r+0x11c0>
 8004612:	f340 81d2 	ble.w	80049ba <_svfprintf_r+0xf62>
 8004616:	465a      	mov	r2, fp
 8004618:	f04f 0810 	mov.w	r8, #16
 800461c:	f8dd b010 	ldr.w	fp, [sp, #16]
 8004620:	e004      	b.n	800462c <_svfprintf_r+0xbd4>
 8004622:	3408      	adds	r4, #8
 8004624:	3d10      	subs	r5, #16
 8004626:	2d10      	cmp	r5, #16
 8004628:	f340 81c6 	ble.w	80049b8 <_svfprintf_r+0xf60>
 800462c:	3301      	adds	r3, #1
 800462e:	3210      	adds	r2, #16
 8004630:	2b07      	cmp	r3, #7
 8004632:	9223      	str	r2, [sp, #140]	; 0x8c
 8004634:	9322      	str	r3, [sp, #136]	; 0x88
 8004636:	f8c4 9000 	str.w	r9, [r4]
 800463a:	f8c4 8004 	str.w	r8, [r4, #4]
 800463e:	ddf0      	ble.n	8004622 <_svfprintf_r+0xbca>
 8004640:	4658      	mov	r0, fp
 8004642:	4631      	mov	r1, r6
 8004644:	aa21      	add	r2, sp, #132	; 0x84
 8004646:	f005 f8d9 	bl	80097fc <__ssprint_r>
 800464a:	2800      	cmp	r0, #0
 800464c:	f47f aacc 	bne.w	8003be8 <_svfprintf_r+0x190>
 8004650:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8004652:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004654:	463c      	mov	r4, r7
 8004656:	e7e5      	b.n	8004624 <_svfprintf_r+0xbcc>
 8004658:	9804      	ldr	r0, [sp, #16]
 800465a:	4631      	mov	r1, r6
 800465c:	aa21      	add	r2, sp, #132	; 0x84
 800465e:	f005 f8cd 	bl	80097fc <__ssprint_r>
 8004662:	2800      	cmp	r0, #0
 8004664:	f47f aac0 	bne.w	8003be8 <_svfprintf_r+0x190>
 8004668:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 800466c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004670:	463c      	mov	r4, r7
 8004672:	f7ff bb76 	b.w	8003d62 <_svfprintf_r+0x30a>
 8004676:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800467a:	f1b8 0f00 	cmp.w	r8, #0
 800467e:	f77f af2b 	ble.w	80044d8 <_svfprintf_r+0xa80>
 8004682:	f1b8 0f10 	cmp.w	r8, #16
 8004686:	f8df 9590 	ldr.w	r9, [pc, #1424]	; 8004c18 <_svfprintf_r+0x11c0>
 800468a:	dd25      	ble.n	80046d8 <_svfprintf_r+0xc80>
 800468c:	465b      	mov	r3, fp
 800468e:	f04f 0a10 	mov.w	sl, #16
 8004692:	f8dd b010 	ldr.w	fp, [sp, #16]
 8004696:	e006      	b.n	80046a6 <_svfprintf_r+0xc4e>
 8004698:	f1a8 0810 	sub.w	r8, r8, #16
 800469c:	f1b8 0f10 	cmp.w	r8, #16
 80046a0:	f104 0408 	add.w	r4, r4, #8
 80046a4:	dd17      	ble.n	80046d6 <_svfprintf_r+0xc7e>
 80046a6:	3501      	adds	r5, #1
 80046a8:	3310      	adds	r3, #16
 80046aa:	2d07      	cmp	r5, #7
 80046ac:	9323      	str	r3, [sp, #140]	; 0x8c
 80046ae:	9522      	str	r5, [sp, #136]	; 0x88
 80046b0:	e884 0600 	stmia.w	r4, {r9, sl}
 80046b4:	ddf0      	ble.n	8004698 <_svfprintf_r+0xc40>
 80046b6:	4658      	mov	r0, fp
 80046b8:	4631      	mov	r1, r6
 80046ba:	aa21      	add	r2, sp, #132	; 0x84
 80046bc:	f005 f89e 	bl	80097fc <__ssprint_r>
 80046c0:	2800      	cmp	r0, #0
 80046c2:	f47f aa91 	bne.w	8003be8 <_svfprintf_r+0x190>
 80046c6:	f1a8 0810 	sub.w	r8, r8, #16
 80046ca:	f1b8 0f10 	cmp.w	r8, #16
 80046ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80046d0:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80046d2:	463c      	mov	r4, r7
 80046d4:	dce7      	bgt.n	80046a6 <_svfprintf_r+0xc4e>
 80046d6:	469b      	mov	fp, r3
 80046d8:	3501      	adds	r5, #1
 80046da:	44c3      	add	fp, r8
 80046dc:	2d07      	cmp	r5, #7
 80046de:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80046e2:	9522      	str	r5, [sp, #136]	; 0x88
 80046e4:	f8c4 9000 	str.w	r9, [r4]
 80046e8:	f8c4 8004 	str.w	r8, [r4, #4]
 80046ec:	f77f aef3 	ble.w	80044d6 <_svfprintf_r+0xa7e>
 80046f0:	9804      	ldr	r0, [sp, #16]
 80046f2:	4631      	mov	r1, r6
 80046f4:	aa21      	add	r2, sp, #132	; 0x84
 80046f6:	f005 f881 	bl	80097fc <__ssprint_r>
 80046fa:	2800      	cmp	r0, #0
 80046fc:	f47f aa74 	bne.w	8003be8 <_svfprintf_r+0x190>
 8004700:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004704:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8004706:	463c      	mov	r4, r7
 8004708:	e6e6      	b.n	80044d8 <_svfprintf_r+0xa80>
 800470a:	4693      	mov	fp, r2
 800470c:	3301      	adds	r3, #1
 800470e:	44ab      	add	fp, r5
 8004710:	2b07      	cmp	r3, #7
 8004712:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004716:	9322      	str	r3, [sp, #136]	; 0x88
 8004718:	f8c4 9000 	str.w	r9, [r4]
 800471c:	6065      	str	r5, [r4, #4]
 800471e:	f77f ab9d 	ble.w	8003e5c <_svfprintf_r+0x404>
 8004722:	e6e5      	b.n	80044f0 <_svfprintf_r+0xa98>
 8004724:	46bb      	mov	fp, r7
 8004726:	f8cd c014 	str.w	ip, [sp, #20]
 800472a:	4640      	mov	r0, r8
 800472c:	4649      	mov	r1, r9
 800472e:	220a      	movs	r2, #10
 8004730:	2300      	movs	r3, #0
 8004732:	f007 fc2f 	bl	800bf94 <__aeabi_uldivmod>
 8004736:	3230      	adds	r2, #48	; 0x30
 8004738:	4640      	mov	r0, r8
 800473a:	4649      	mov	r1, r9
 800473c:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8004740:	2300      	movs	r3, #0
 8004742:	220a      	movs	r2, #10
 8004744:	f007 fc26 	bl	800bf94 <__aeabi_uldivmod>
 8004748:	4680      	mov	r8, r0
 800474a:	4689      	mov	r9, r1
 800474c:	ea58 0309 	orrs.w	r3, r8, r9
 8004750:	d1eb      	bne.n	800472a <_svfprintf_r+0xcd2>
 8004752:	465b      	mov	r3, fp
 8004754:	1afb      	subs	r3, r7, r3
 8004756:	f8dd c014 	ldr.w	ip, [sp, #20]
 800475a:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800475e:	9309      	str	r3, [sp, #36]	; 0x24
 8004760:	f7ff ba94 	b.w	8003c8c <_svfprintf_r+0x234>
 8004764:	2b30      	cmp	r3, #48	; 0x30
 8004766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004768:	f43f af27 	beq.w	80045ba <_svfprintf_r+0xb62>
 800476c:	3b01      	subs	r3, #1
 800476e:	461a      	mov	r2, r3
 8004770:	930c      	str	r3, [sp, #48]	; 0x30
 8004772:	1aba      	subs	r2, r7, r2
 8004774:	2330      	movs	r3, #48	; 0x30
 8004776:	9209      	str	r2, [sp, #36]	; 0x24
 8004778:	f801 3c01 	strb.w	r3, [r1, #-1]
 800477c:	f7ff ba86 	b.w	8003c8c <_svfprintf_r+0x234>
 8004780:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004782:	680a      	ldr	r2, [r1, #0]
 8004784:	3104      	adds	r1, #4
 8004786:	910a      	str	r1, [sp, #40]	; 0x28
 8004788:	4690      	mov	r8, r2
 800478a:	f04f 0900 	mov.w	r9, #0
 800478e:	f7ff ba4a 	b.w	8003c26 <_svfprintf_r+0x1ce>
 8004792:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004794:	680a      	ldr	r2, [r1, #0]
 8004796:	3104      	adds	r1, #4
 8004798:	2301      	movs	r3, #1
 800479a:	910a      	str	r1, [sp, #40]	; 0x28
 800479c:	4690      	mov	r8, r2
 800479e:	f04f 0900 	mov.w	r9, #0
 80047a2:	f7ff ba40 	b.w	8003c26 <_svfprintf_r+0x1ce>
 80047a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047a8:	6813      	ldr	r3, [r2, #0]
 80047aa:	4698      	mov	r8, r3
 80047ac:	ea4f 79e3 	mov.w	r9, r3, asr #31
 80047b0:	4613      	mov	r3, r2
 80047b2:	3304      	adds	r3, #4
 80047b4:	4642      	mov	r2, r8
 80047b6:	930a      	str	r3, [sp, #40]	; 0x28
 80047b8:	2a00      	cmp	r2, #0
 80047ba:	464b      	mov	r3, r9
 80047bc:	f173 0300 	sbcs.w	r3, r3, #0
 80047c0:	f6bf abf2 	bge.w	8003fa8 <_svfprintf_r+0x550>
 80047c4:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80047c8:	f1d8 0800 	rsbs	r8, r8, #0
 80047cc:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 80047d0:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 80047d4:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80047d8:	2301      	movs	r3, #1
 80047da:	f7ff ba2a 	b.w	8003c32 <_svfprintf_r+0x1da>
 80047de:	9804      	ldr	r0, [sp, #16]
 80047e0:	4631      	mov	r1, r6
 80047e2:	aa21      	add	r2, sp, #132	; 0x84
 80047e4:	f005 f80a 	bl	80097fc <__ssprint_r>
 80047e8:	2800      	cmp	r0, #0
 80047ea:	f47f a9fd 	bne.w	8003be8 <_svfprintf_r+0x190>
 80047ee:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80047f2:	463c      	mov	r4, r7
 80047f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047f6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80047f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80047fa:	440a      	add	r2, r1
 80047fc:	4690      	mov	r8, r2
 80047fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004800:	4293      	cmp	r3, r2
 8004802:	db46      	blt.n	8004892 <_svfprintf_r+0xe3a>
 8004804:	9a03      	ldr	r2, [sp, #12]
 8004806:	07d0      	lsls	r0, r2, #31
 8004808:	d443      	bmi.n	8004892 <_svfprintf_r+0xe3a>
 800480a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800480c:	ebc8 050a 	rsb	r5, r8, sl
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	429d      	cmp	r5, r3
 8004814:	bfa8      	it	ge
 8004816:	461d      	movge	r5, r3
 8004818:	2d00      	cmp	r5, #0
 800481a:	dd0c      	ble.n	8004836 <_svfprintf_r+0xdde>
 800481c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800481e:	f8c4 8000 	str.w	r8, [r4]
 8004822:	3201      	adds	r2, #1
 8004824:	44ab      	add	fp, r5
 8004826:	2a07      	cmp	r2, #7
 8004828:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800482c:	6065      	str	r5, [r4, #4]
 800482e:	9222      	str	r2, [sp, #136]	; 0x88
 8004830:	f300 826f 	bgt.w	8004d12 <_svfprintf_r+0x12ba>
 8004834:	3408      	adds	r4, #8
 8004836:	2d00      	cmp	r5, #0
 8004838:	bfac      	ite	ge
 800483a:	1b5d      	subge	r5, r3, r5
 800483c:	461d      	movlt	r5, r3
 800483e:	2d00      	cmp	r5, #0
 8004840:	f77f ab0d 	ble.w	8003e5e <_svfprintf_r+0x406>
 8004844:	2d10      	cmp	r5, #16
 8004846:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004848:	f8df 93cc 	ldr.w	r9, [pc, #972]	; 8004c18 <_svfprintf_r+0x11c0>
 800484c:	f77f af5e 	ble.w	800470c <_svfprintf_r+0xcb4>
 8004850:	f04f 0810 	mov.w	r8, #16
 8004854:	465a      	mov	r2, fp
 8004856:	f8dd a010 	ldr.w	sl, [sp, #16]
 800485a:	e004      	b.n	8004866 <_svfprintf_r+0xe0e>
 800485c:	3408      	adds	r4, #8
 800485e:	3d10      	subs	r5, #16
 8004860:	2d10      	cmp	r5, #16
 8004862:	f77f af52 	ble.w	800470a <_svfprintf_r+0xcb2>
 8004866:	3301      	adds	r3, #1
 8004868:	3210      	adds	r2, #16
 800486a:	2b07      	cmp	r3, #7
 800486c:	9223      	str	r2, [sp, #140]	; 0x8c
 800486e:	9322      	str	r3, [sp, #136]	; 0x88
 8004870:	f8c4 9000 	str.w	r9, [r4]
 8004874:	f8c4 8004 	str.w	r8, [r4, #4]
 8004878:	ddf0      	ble.n	800485c <_svfprintf_r+0xe04>
 800487a:	4650      	mov	r0, sl
 800487c:	4631      	mov	r1, r6
 800487e:	aa21      	add	r2, sp, #132	; 0x84
 8004880:	f004 ffbc 	bl	80097fc <__ssprint_r>
 8004884:	2800      	cmp	r0, #0
 8004886:	f47f a9af 	bne.w	8003be8 <_svfprintf_r+0x190>
 800488a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800488c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800488e:	463c      	mov	r4, r7
 8004890:	e7e5      	b.n	800485e <_svfprintf_r+0xe06>
 8004892:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004894:	9814      	ldr	r0, [sp, #80]	; 0x50
 8004896:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004898:	6021      	str	r1, [r4, #0]
 800489a:	3201      	adds	r2, #1
 800489c:	4483      	add	fp, r0
 800489e:	2a07      	cmp	r2, #7
 80048a0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80048a4:	6060      	str	r0, [r4, #4]
 80048a6:	9222      	str	r2, [sp, #136]	; 0x88
 80048a8:	f300 8207 	bgt.w	8004cba <_svfprintf_r+0x1262>
 80048ac:	3408      	adds	r4, #8
 80048ae:	e7ac      	b.n	800480a <_svfprintf_r+0xdb2>
 80048b0:	9b03      	ldr	r3, [sp, #12]
 80048b2:	07d9      	lsls	r1, r3, #31
 80048b4:	f53f addd 	bmi.w	8004472 <_svfprintf_r+0xa1a>
 80048b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048ba:	6023      	str	r3, [r4, #0]
 80048bc:	3501      	adds	r5, #1
 80048be:	f10b 0b01 	add.w	fp, fp, #1
 80048c2:	2301      	movs	r3, #1
 80048c4:	2d07      	cmp	r5, #7
 80048c6:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80048ca:	9522      	str	r5, [sp, #136]	; 0x88
 80048cc:	6063      	str	r3, [r4, #4]
 80048ce:	f77f ae02 	ble.w	80044d6 <_svfprintf_r+0xa7e>
 80048d2:	e70d      	b.n	80046f0 <_svfprintf_r+0xc98>
 80048d4:	9804      	ldr	r0, [sp, #16]
 80048d6:	4631      	mov	r1, r6
 80048d8:	aa21      	add	r2, sp, #132	; 0x84
 80048da:	f004 ff8f 	bl	80097fc <__ssprint_r>
 80048de:	2800      	cmp	r0, #0
 80048e0:	f47f a982 	bne.w	8003be8 <_svfprintf_r+0x190>
 80048e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80048e6:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80048e8:	463c      	mov	r4, r7
 80048ea:	e5cf      	b.n	800448c <_svfprintf_r+0xa34>
 80048ec:	9804      	ldr	r0, [sp, #16]
 80048ee:	4631      	mov	r1, r6
 80048f0:	aa21      	add	r2, sp, #132	; 0x84
 80048f2:	f004 ff83 	bl	80097fc <__ssprint_r>
 80048f6:	2800      	cmp	r0, #0
 80048f8:	f47f a976 	bne.w	8003be8 <_svfprintf_r+0x190>
 80048fc:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004900:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8004902:	463c      	mov	r4, r7
 8004904:	e5d0      	b.n	80044a8 <_svfprintf_r+0xa50>
 8004906:	9804      	ldr	r0, [sp, #16]
 8004908:	4631      	mov	r1, r6
 800490a:	aa21      	add	r2, sp, #132	; 0x84
 800490c:	f004 ff76 	bl	80097fc <__ssprint_r>
 8004910:	2800      	cmp	r0, #0
 8004912:	f47f a969 	bne.w	8003be8 <_svfprintf_r+0x190>
 8004916:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800491a:	463c      	mov	r4, r7
 800491c:	f7ff ba49 	b.w	8003db2 <_svfprintf_r+0x35a>
 8004920:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8004924:	f004 fd6a 	bl	80093fc <__fpclassifyd>
 8004928:	2800      	cmp	r0, #0
 800492a:	f040 80d1 	bne.w	8004ad0 <_svfprintf_r+0x1078>
 800492e:	4686      	mov	lr, r0
 8004930:	4ab6      	ldr	r2, [pc, #728]	; (8004c0c <_svfprintf_r+0x11b4>)
 8004932:	4bb7      	ldr	r3, [pc, #732]	; (8004c10 <_svfprintf_r+0x11b8>)
 8004934:	900d      	str	r0, [sp, #52]	; 0x34
 8004936:	9803      	ldr	r0, [sp, #12]
 8004938:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 800493c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8004940:	2103      	movs	r1, #3
 8004942:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004946:	2d47      	cmp	r5, #71	; 0x47
 8004948:	bfd8      	it	le
 800494a:	461a      	movle	r2, r3
 800494c:	9105      	str	r1, [sp, #20]
 800494e:	9003      	str	r0, [sp, #12]
 8004950:	920c      	str	r2, [sp, #48]	; 0x30
 8004952:	9109      	str	r1, [sp, #36]	; 0x24
 8004954:	f7ff b9a2 	b.w	8003c9c <_svfprintf_r+0x244>
 8004958:	f029 0907 	bic.w	r9, r9, #7
 800495c:	ed99 7b00 	vldr	d7, [r9]
 8004960:	f109 0308 	add.w	r3, r9, #8
 8004964:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004968:	930a      	str	r3, [sp, #40]	; 0x28
 800496a:	e478      	b.n	800425e <_svfprintf_r+0x806>
 800496c:	9b03      	ldr	r3, [sp, #12]
 800496e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004970:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004974:	4613      	mov	r3, r2
 8004976:	f43f ac1f 	beq.w	80041b8 <_svfprintf_r+0x760>
 800497a:	3304      	adds	r3, #4
 800497c:	f8b2 8000 	ldrh.w	r8, [r2]
 8004980:	930a      	str	r3, [sp, #40]	; 0x28
 8004982:	f04f 0900 	mov.w	r9, #0
 8004986:	f7ff bb28 	b.w	8003fda <_svfprintf_r+0x582>
 800498a:	9b03      	ldr	r3, [sp, #12]
 800498c:	06db      	lsls	r3, r3, #27
 800498e:	d40b      	bmi.n	80049a8 <_svfprintf_r+0xf50>
 8004990:	9b03      	ldr	r3, [sp, #12]
 8004992:	065d      	lsls	r5, r3, #25
 8004994:	d508      	bpl.n	80049a8 <_svfprintf_r+0xf50>
 8004996:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004998:	6813      	ldr	r3, [r2, #0]
 800499a:	3204      	adds	r2, #4
 800499c:	920a      	str	r2, [sp, #40]	; 0x28
 800499e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80049a2:	801a      	strh	r2, [r3, #0]
 80049a4:	f7ff b87f 	b.w	8003aa6 <_svfprintf_r+0x4e>
 80049a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049aa:	6813      	ldr	r3, [r2, #0]
 80049ac:	3204      	adds	r2, #4
 80049ae:	920a      	str	r2, [sp, #40]	; 0x28
 80049b0:	9a07      	ldr	r2, [sp, #28]
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	f7ff b877 	b.w	8003aa6 <_svfprintf_r+0x4e>
 80049b8:	4693      	mov	fp, r2
 80049ba:	3301      	adds	r3, #1
 80049bc:	44ab      	add	fp, r5
 80049be:	2b07      	cmp	r3, #7
 80049c0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80049c4:	9322      	str	r3, [sp, #136]	; 0x88
 80049c6:	f8c4 9000 	str.w	r9, [r4]
 80049ca:	6065      	str	r5, [r4, #4]
 80049cc:	f73f af07 	bgt.w	80047de <_svfprintf_r+0xd86>
 80049d0:	3408      	adds	r4, #8
 80049d2:	e70f      	b.n	80047f4 <_svfprintf_r+0xd9c>
 80049d4:	9804      	ldr	r0, [sp, #16]
 80049d6:	4631      	mov	r1, r6
 80049d8:	aa21      	add	r2, sp, #132	; 0x84
 80049da:	f004 ff0f 	bl	80097fc <__ssprint_r>
 80049de:	2800      	cmp	r0, #0
 80049e0:	f47f a902 	bne.w	8003be8 <_svfprintf_r+0x190>
 80049e4:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80049e8:	463c      	mov	r4, r7
 80049ea:	e4b5      	b.n	8004358 <_svfprintf_r+0x900>
 80049ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049ee:	4a89      	ldr	r2, [pc, #548]	; (8004c14 <_svfprintf_r+0x11bc>)
 80049f0:	6022      	str	r2, [r4, #0]
 80049f2:	3301      	adds	r3, #1
 80049f4:	f10b 0b01 	add.w	fp, fp, #1
 80049f8:	2201      	movs	r2, #1
 80049fa:	2b07      	cmp	r3, #7
 80049fc:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004a00:	9322      	str	r3, [sp, #136]	; 0x88
 8004a02:	6062      	str	r2, [r4, #4]
 8004a04:	f300 80f1 	bgt.w	8004bea <_svfprintf_r+0x1192>
 8004a08:	3408      	adds	r4, #8
 8004a0a:	b92d      	cbnz	r5, 8004a18 <_svfprintf_r+0xfc0>
 8004a0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a0e:	b91b      	cbnz	r3, 8004a18 <_svfprintf_r+0xfc0>
 8004a10:	9b03      	ldr	r3, [sp, #12]
 8004a12:	07db      	lsls	r3, r3, #31
 8004a14:	f57f aa23 	bpl.w	8003e5e <_svfprintf_r+0x406>
 8004a18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a1a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8004a1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004a1e:	6022      	str	r2, [r4, #0]
 8004a20:	3301      	adds	r3, #1
 8004a22:	eb0b 0100 	add.w	r1, fp, r0
 8004a26:	2b07      	cmp	r3, #7
 8004a28:	9123      	str	r1, [sp, #140]	; 0x8c
 8004a2a:	6060      	str	r0, [r4, #4]
 8004a2c:	9322      	str	r3, [sp, #136]	; 0x88
 8004a2e:	f300 81ef 	bgt.w	8004e10 <_svfprintf_r+0x13b8>
 8004a32:	f104 0208 	add.w	r2, r4, #8
 8004a36:	426d      	negs	r5, r5
 8004a38:	2d00      	cmp	r5, #0
 8004a3a:	f340 80fa 	ble.w	8004c32 <_svfprintf_r+0x11da>
 8004a3e:	2d10      	cmp	r5, #16
 8004a40:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8004c18 <_svfprintf_r+0x11c0>
 8004a44:	f340 8146 	ble.w	8004cd4 <_svfprintf_r+0x127c>
 8004a48:	2410      	movs	r4, #16
 8004a4a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004a4e:	e004      	b.n	8004a5a <_svfprintf_r+0x1002>
 8004a50:	3208      	adds	r2, #8
 8004a52:	3d10      	subs	r5, #16
 8004a54:	2d10      	cmp	r5, #16
 8004a56:	f340 813d 	ble.w	8004cd4 <_svfprintf_r+0x127c>
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	3110      	adds	r1, #16
 8004a5e:	2b07      	cmp	r3, #7
 8004a60:	9123      	str	r1, [sp, #140]	; 0x8c
 8004a62:	9322      	str	r3, [sp, #136]	; 0x88
 8004a64:	f8c2 9000 	str.w	r9, [r2]
 8004a68:	6054      	str	r4, [r2, #4]
 8004a6a:	ddf1      	ble.n	8004a50 <_svfprintf_r+0xff8>
 8004a6c:	4640      	mov	r0, r8
 8004a6e:	4631      	mov	r1, r6
 8004a70:	aa21      	add	r2, sp, #132	; 0x84
 8004a72:	f004 fec3 	bl	80097fc <__ssprint_r>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	f47f a8b6 	bne.w	8003be8 <_svfprintf_r+0x190>
 8004a7c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8004a7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a80:	463a      	mov	r2, r7
 8004a82:	e7e6      	b.n	8004a52 <_svfprintf_r+0xffa>
 8004a84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a86:	46b1      	mov	r9, r6
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f43f a8ae 	beq.w	8003bea <_svfprintf_r+0x192>
 8004a8e:	9804      	ldr	r0, [sp, #16]
 8004a90:	4631      	mov	r1, r6
 8004a92:	aa21      	add	r2, sp, #132	; 0x84
 8004a94:	f004 feb2 	bl	80097fc <__ssprint_r>
 8004a98:	f7ff b8a7 	b.w	8003bea <_svfprintf_r+0x192>
 8004a9c:	f041 0120 	orr.w	r1, r1, #32
 8004aa0:	9103      	str	r1, [sp, #12]
 8004aa2:	785d      	ldrb	r5, [r3, #1]
 8004aa4:	1c59      	adds	r1, r3, #1
 8004aa6:	f7ff b82c 	b.w	8003b02 <_svfprintf_r+0xaa>
 8004aaa:	9808      	ldr	r0, [sp, #32]
 8004aac:	910a      	str	r1, [sp, #40]	; 0x28
 8004aae:	4240      	negs	r0, r0
 8004ab0:	9008      	str	r0, [sp, #32]
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	f7ff ba29 	b.w	8003f0a <_svfprintf_r+0x4b2>
 8004ab8:	9804      	ldr	r0, [sp, #16]
 8004aba:	4631      	mov	r1, r6
 8004abc:	aa21      	add	r2, sp, #132	; 0x84
 8004abe:	f004 fe9d 	bl	80097fc <__ssprint_r>
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	f47f a890 	bne.w	8003be8 <_svfprintf_r+0x190>
 8004ac8:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004acc:	463c      	mov	r4, r7
 8004ace:	e459      	b.n	8004384 <_svfprintf_r+0x92c>
 8004ad0:	f025 0320 	bic.w	r3, r5, #32
 8004ad4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8004ad8:	9305      	str	r3, [sp, #20]
 8004ada:	f000 8093 	beq.w	8004c04 <_svfprintf_r+0x11ac>
 8004ade:	2b47      	cmp	r3, #71	; 0x47
 8004ae0:	d105      	bne.n	8004aee <_svfprintf_r+0x1096>
 8004ae2:	f1ba 0f00 	cmp.w	sl, #0
 8004ae6:	bf14      	ite	ne
 8004ae8:	46d3      	movne	fp, sl
 8004aea:	f04f 0b01 	moveq.w	fp, #1
 8004aee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004af0:	9a03      	ldr	r2, [sp, #12]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004af8:	920b      	str	r2, [sp, #44]	; 0x2c
 8004afa:	f2c0 81a4 	blt.w	8004e46 <_svfprintf_r+0x13ee>
 8004afe:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8004b02:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8004b06:	f04f 0a00 	mov.w	sl, #0
 8004b0a:	2d66      	cmp	r5, #102	; 0x66
 8004b0c:	f000 80ac 	beq.w	8004c68 <_svfprintf_r+0x1210>
 8004b10:	2d46      	cmp	r5, #70	; 0x46
 8004b12:	f000 80a9 	beq.w	8004c68 <_svfprintf_r+0x1210>
 8004b16:	9b05      	ldr	r3, [sp, #20]
 8004b18:	9804      	ldr	r0, [sp, #16]
 8004b1a:	2b45      	cmp	r3, #69	; 0x45
 8004b1c:	bf0c      	ite	eq
 8004b1e:	f10b 0901 	addeq.w	r9, fp, #1
 8004b22:	46d9      	movne	r9, fp
 8004b24:	aa1c      	add	r2, sp, #112	; 0x70
 8004b26:	ab1f      	add	r3, sp, #124	; 0x7c
 8004b28:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004b2c:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
 8004b30:	2102      	movs	r1, #2
 8004b32:	464a      	mov	r2, r9
 8004b34:	ab1b      	add	r3, sp, #108	; 0x6c
 8004b36:	f001 fdc3 	bl	80066c0 <_dtoa_r>
 8004b3a:	2d67      	cmp	r5, #103	; 0x67
 8004b3c:	900c      	str	r0, [sp, #48]	; 0x30
 8004b3e:	d002      	beq.n	8004b46 <_svfprintf_r+0x10ee>
 8004b40:	2d47      	cmp	r5, #71	; 0x47
 8004b42:	f040 809f 	bne.w	8004c84 <_svfprintf_r+0x122c>
 8004b46:	9b03      	ldr	r3, [sp, #12]
 8004b48:	07db      	lsls	r3, r3, #31
 8004b4a:	f140 8192 	bpl.w	8004e72 <_svfprintf_r+0x141a>
 8004b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b50:	eb03 0809 	add.w	r8, r3, r9
 8004b54:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f007 f9c0 	bl	800bee0 <__aeabi_dcmpeq>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	f040 80fd 	bne.w	8004d60 <_svfprintf_r+0x1308>
 8004b66:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004b68:	4598      	cmp	r8, r3
 8004b6a:	d906      	bls.n	8004b7a <_svfprintf_r+0x1122>
 8004b6c:	2130      	movs	r1, #48	; 0x30
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	921f      	str	r2, [sp, #124]	; 0x7c
 8004b72:	7019      	strb	r1, [r3, #0]
 8004b74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004b76:	4598      	cmp	r8, r3
 8004b78:	d8f9      	bhi.n	8004b6e <_svfprintf_r+0x1116>
 8004b7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b7c:	1a9b      	subs	r3, r3, r2
 8004b7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b80:	9b05      	ldr	r3, [sp, #20]
 8004b82:	2b47      	cmp	r3, #71	; 0x47
 8004b84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b86:	f000 80de 	beq.w	8004d46 <_svfprintf_r+0x12ee>
 8004b8a:	2d65      	cmp	r5, #101	; 0x65
 8004b8c:	f340 80f8 	ble.w	8004d80 <_svfprintf_r+0x1328>
 8004b90:	2d66      	cmp	r5, #102	; 0x66
 8004b92:	930e      	str	r3, [sp, #56]	; 0x38
 8004b94:	f000 8160 	beq.w	8004e58 <_svfprintf_r+0x1400>
 8004b98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	f300 8144 	bgt.w	8004e2a <_svfprintf_r+0x13d2>
 8004ba2:	9b03      	ldr	r3, [sp, #12]
 8004ba4:	07d9      	lsls	r1, r3, #31
 8004ba6:	f100 8166 	bmi.w	8004e76 <_svfprintf_r+0x141e>
 8004baa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004bae:	9209      	str	r2, [sp, #36]	; 0x24
 8004bb0:	f1ba 0f00 	cmp.w	sl, #0
 8004bb4:	f040 80bc 	bne.w	8004d30 <_svfprintf_r+0x12d8>
 8004bb8:	9305      	str	r3, [sp, #20]
 8004bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bbc:	9303      	str	r3, [sp, #12]
 8004bbe:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004bc2:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8004bc6:	f7ff b869 	b.w	8003c9c <_svfprintf_r+0x244>
 8004bca:	9804      	ldr	r0, [sp, #16]
 8004bcc:	2140      	movs	r1, #64	; 0x40
 8004bce:	f003 fa6f 	bl	80080b0 <_malloc_r>
 8004bd2:	f8c9 0000 	str.w	r0, [r9]
 8004bd6:	f8c9 0010 	str.w	r0, [r9, #16]
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	f000 8197 	beq.w	8004f0e <_svfprintf_r+0x14b6>
 8004be0:	2340      	movs	r3, #64	; 0x40
 8004be2:	f8c9 3014 	str.w	r3, [r9, #20]
 8004be6:	f7fe bf4f 	b.w	8003a88 <_svfprintf_r+0x30>
 8004bea:	9804      	ldr	r0, [sp, #16]
 8004bec:	4631      	mov	r1, r6
 8004bee:	aa21      	add	r2, sp, #132	; 0x84
 8004bf0:	f004 fe04 	bl	80097fc <__ssprint_r>
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	f47e aff7 	bne.w	8003be8 <_svfprintf_r+0x190>
 8004bfa:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004bfc:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004c00:	463c      	mov	r4, r7
 8004c02:	e702      	b.n	8004a0a <_svfprintf_r+0xfb2>
 8004c04:	f04f 0b06 	mov.w	fp, #6
 8004c08:	e771      	b.n	8004aee <_svfprintf_r+0x1096>
 8004c0a:	bf00      	nop
 8004c0c:	0800c920 	.word	0x0800c920
 8004c10:	0800c91c 	.word	0x0800c91c
 8004c14:	0800c954 	.word	0x0800c954
 8004c18:	0800c8f4 	.word	0x0800c8f4
 8004c1c:	9804      	ldr	r0, [sp, #16]
 8004c1e:	4631      	mov	r1, r6
 8004c20:	aa21      	add	r2, sp, #132	; 0x84
 8004c22:	f004 fdeb 	bl	80097fc <__ssprint_r>
 8004c26:	2800      	cmp	r0, #0
 8004c28:	f47e afde 	bne.w	8003be8 <_svfprintf_r+0x190>
 8004c2c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8004c2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c30:	463a      	mov	r2, r7
 8004c32:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8004c34:	6054      	str	r4, [r2, #4]
 8004c36:	3301      	adds	r3, #1
 8004c38:	eb01 0b04 	add.w	fp, r1, r4
 8004c3c:	2b07      	cmp	r3, #7
 8004c3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c40:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004c44:	9322      	str	r3, [sp, #136]	; 0x88
 8004c46:	6011      	str	r1, [r2, #0]
 8004c48:	f73f ac52 	bgt.w	80044f0 <_svfprintf_r+0xa98>
 8004c4c:	f102 0408 	add.w	r4, r2, #8
 8004c50:	f7ff b905 	b.w	8003e5e <_svfprintf_r+0x406>
 8004c54:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8004c58:	f7fe fed0 	bl	80039fc <strlen>
 8004c5c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8004c60:	9009      	str	r0, [sp, #36]	; 0x24
 8004c62:	4603      	mov	r3, r0
 8004c64:	f7ff ba0e 	b.w	8004084 <_svfprintf_r+0x62c>
 8004c68:	aa1c      	add	r2, sp, #112	; 0x70
 8004c6a:	ab1f      	add	r3, sp, #124	; 0x7c
 8004c6c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004c70:	9804      	ldr	r0, [sp, #16]
 8004c72:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
 8004c76:	2103      	movs	r1, #3
 8004c78:	465a      	mov	r2, fp
 8004c7a:	ab1b      	add	r3, sp, #108	; 0x6c
 8004c7c:	f001 fd20 	bl	80066c0 <_dtoa_r>
 8004c80:	46d9      	mov	r9, fp
 8004c82:	900c      	str	r0, [sp, #48]	; 0x30
 8004c84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c86:	eb03 0809 	add.w	r8, r3, r9
 8004c8a:	9b05      	ldr	r3, [sp, #20]
 8004c8c:	2b46      	cmp	r3, #70	; 0x46
 8004c8e:	f47f af61 	bne.w	8004b54 <_svfprintf_r+0x10fc>
 8004c92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b30      	cmp	r3, #48	; 0x30
 8004c98:	f000 8103 	beq.w	8004ea2 <_svfprintf_r+0x144a>
 8004c9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c9e:	4498      	add	r8, r3
 8004ca0:	e758      	b.n	8004b54 <_svfprintf_r+0x10fc>
 8004ca2:	9804      	ldr	r0, [sp, #16]
 8004ca4:	4631      	mov	r1, r6
 8004ca6:	aa21      	add	r2, sp, #132	; 0x84
 8004ca8:	f004 fda8 	bl	80097fc <__ssprint_r>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	f47e af9b 	bne.w	8003be8 <_svfprintf_r+0x190>
 8004cb2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004cb6:	463c      	mov	r4, r7
 8004cb8:	e49f      	b.n	80045fa <_svfprintf_r+0xba2>
 8004cba:	9804      	ldr	r0, [sp, #16]
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	aa21      	add	r2, sp, #132	; 0x84
 8004cc0:	f004 fd9c 	bl	80097fc <__ssprint_r>
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	f47e af8f 	bne.w	8003be8 <_svfprintf_r+0x190>
 8004cca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ccc:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004cd0:	463c      	mov	r4, r7
 8004cd2:	e59a      	b.n	800480a <_svfprintf_r+0xdb2>
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	4429      	add	r1, r5
 8004cd8:	2b07      	cmp	r3, #7
 8004cda:	9123      	str	r1, [sp, #140]	; 0x8c
 8004cdc:	9322      	str	r3, [sp, #136]	; 0x88
 8004cde:	f8c2 9000 	str.w	r9, [r2]
 8004ce2:	6055      	str	r5, [r2, #4]
 8004ce4:	dc9a      	bgt.n	8004c1c <_svfprintf_r+0x11c4>
 8004ce6:	3208      	adds	r2, #8
 8004ce8:	e7a3      	b.n	8004c32 <_svfprintf_r+0x11da>
 8004cea:	4653      	mov	r3, sl
 8004cec:	2b06      	cmp	r3, #6
 8004cee:	bf28      	it	cs
 8004cf0:	2306      	movcs	r3, #6
 8004cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8004cf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004cf8:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 8004cfc:	9305      	str	r3, [sp, #20]
 8004cfe:	4b87      	ldr	r3, [pc, #540]	; (8004f1c <_svfprintf_r+0x14c4>)
 8004d00:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8004d04:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8004d08:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8004d0c:	930c      	str	r3, [sp, #48]	; 0x30
 8004d0e:	f7fe bfc5 	b.w	8003c9c <_svfprintf_r+0x244>
 8004d12:	9804      	ldr	r0, [sp, #16]
 8004d14:	4631      	mov	r1, r6
 8004d16:	aa21      	add	r2, sp, #132	; 0x84
 8004d18:	f004 fd70 	bl	80097fc <__ssprint_r>
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	f47e af63 	bne.w	8003be8 <_svfprintf_r+0x190>
 8004d22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d26:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	463c      	mov	r4, r7
 8004d2e:	e582      	b.n	8004836 <_svfprintf_r+0xdde>
 8004d30:	9305      	str	r3, [sp, #20]
 8004d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d34:	9303      	str	r3, [sp, #12]
 8004d36:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8004d40:	930d      	str	r3, [sp, #52]	; 0x34
 8004d42:	f7fe bfae 	b.w	8003ca2 <_svfprintf_r+0x24a>
 8004d46:	1cda      	adds	r2, r3, #3
 8004d48:	db19      	blt.n	8004d7e <_svfprintf_r+0x1326>
 8004d4a:	459b      	cmp	fp, r3
 8004d4c:	db17      	blt.n	8004d7e <_svfprintf_r+0x1326>
 8004d4e:	930e      	str	r3, [sp, #56]	; 0x38
 8004d50:	2567      	movs	r5, #103	; 0x67
 8004d52:	e721      	b.n	8004b98 <_svfprintf_r+0x1140>
 8004d54:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8004d58:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8004d5c:	f7ff ba91 	b.w	8004282 <_svfprintf_r+0x82a>
 8004d60:	4643      	mov	r3, r8
 8004d62:	e70a      	b.n	8004b7a <_svfprintf_r+0x1122>
 8004d64:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8004d68:	900d      	str	r0, [sp, #52]	; 0x34
 8004d6a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8004d6e:	900e      	str	r0, [sp, #56]	; 0x38
 8004d70:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8004d74:	9305      	str	r3, [sp, #20]
 8004d76:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004d7a:	f7fe bf8f 	b.w	8003c9c <_svfprintf_r+0x244>
 8004d7e:	3d02      	subs	r5, #2
 8004d80:	3b01      	subs	r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	931b      	str	r3, [sp, #108]	; 0x6c
 8004d86:	bfba      	itte	lt
 8004d88:	425b      	neglt	r3, r3
 8004d8a:	222d      	movlt	r2, #45	; 0x2d
 8004d8c:	222b      	movge	r2, #43	; 0x2b
 8004d8e:	2b09      	cmp	r3, #9
 8004d90:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
 8004d94:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8004d98:	dd7b      	ble.n	8004e92 <_svfprintf_r+0x143a>
 8004d9a:	f10d 0e83 	add.w	lr, sp, #131	; 0x83
 8004d9e:	4670      	mov	r0, lr
 8004da0:	4a5f      	ldr	r2, [pc, #380]	; (8004f20 <_svfprintf_r+0x14c8>)
 8004da2:	fb82 2103 	smull	r2, r1, r2, r3
 8004da6:	17da      	asrs	r2, r3, #31
 8004da8:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8004dac:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004db0:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8004db4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004db8:	2a09      	cmp	r2, #9
 8004dba:	4613      	mov	r3, r2
 8004dbc:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8004dc0:	dcee      	bgt.n	8004da0 <_svfprintf_r+0x1348>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	3330      	adds	r3, #48	; 0x30
 8004dc6:	b2d9      	uxtb	r1, r3
 8004dc8:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8004dcc:	4596      	cmp	lr, r2
 8004dce:	f240 809b 	bls.w	8004f08 <_svfprintf_r+0x14b0>
 8004dd2:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	e001      	b.n	8004dde <_svfprintf_r+0x1386>
 8004dda:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004dde:	f802 1b01 	strb.w	r1, [r2], #1
 8004de2:	4573      	cmp	r3, lr
 8004de4:	d1f9      	bne.n	8004dda <_svfprintf_r+0x1382>
 8004de6:	ab21      	add	r3, sp, #132	; 0x84
 8004de8:	1a1b      	subs	r3, r3, r0
 8004dea:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8004dee:	4413      	add	r3, r2
 8004df0:	aa1d      	add	r2, sp, #116	; 0x74
 8004df2:	1a9b      	subs	r3, r3, r2
 8004df4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004df6:	9315      	str	r3, [sp, #84]	; 0x54
 8004df8:	2a01      	cmp	r2, #1
 8004dfa:	4413      	add	r3, r2
 8004dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8004dfe:	dd74      	ble.n	8004eea <_svfprintf_r+0x1492>
 8004e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e02:	2200      	movs	r2, #0
 8004e04:	3301      	adds	r3, #1
 8004e06:	9309      	str	r3, [sp, #36]	; 0x24
 8004e08:	920e      	str	r2, [sp, #56]	; 0x38
 8004e0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004e0e:	e6cf      	b.n	8004bb0 <_svfprintf_r+0x1158>
 8004e10:	9804      	ldr	r0, [sp, #16]
 8004e12:	4631      	mov	r1, r6
 8004e14:	aa21      	add	r2, sp, #132	; 0x84
 8004e16:	f004 fcf1 	bl	80097fc <__ssprint_r>
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	f47e aee4 	bne.w	8003be8 <_svfprintf_r+0x190>
 8004e20:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004e22:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8004e24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e26:	463a      	mov	r2, r7
 8004e28:	e605      	b.n	8004a36 <_svfprintf_r+0xfde>
 8004e2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	bfd8      	it	le
 8004e30:	f1c3 0802 	rsble	r8, r3, #2
 8004e34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e36:	bfc8      	it	gt
 8004e38:	f04f 0801 	movgt.w	r8, #1
 8004e3c:	4443      	add	r3, r8
 8004e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004e44:	e6b4      	b.n	8004bb0 <_svfprintf_r+0x1158>
 8004e46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e4e:	9016      	str	r0, [sp, #88]	; 0x58
 8004e50:	9317      	str	r3, [sp, #92]	; 0x5c
 8004e52:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8004e56:	e658      	b.n	8004b0a <_svfprintf_r+0x10b2>
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	dd3d      	ble.n	8004ed8 <_svfprintf_r+0x1480>
 8004e5c:	f1bb 0f00 	cmp.w	fp, #0
 8004e60:	d10f      	bne.n	8004e82 <_svfprintf_r+0x142a>
 8004e62:	9b03      	ldr	r3, [sp, #12]
 8004e64:	07db      	lsls	r3, r3, #31
 8004e66:	d40c      	bmi.n	8004e82 <_svfprintf_r+0x142a>
 8004e68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e6a:	9209      	str	r2, [sp, #36]	; 0x24
 8004e6c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004e70:	e69e      	b.n	8004bb0 <_svfprintf_r+0x1158>
 8004e72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004e74:	e681      	b.n	8004b7a <_svfprintf_r+0x1122>
 8004e76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e78:	3301      	adds	r3, #1
 8004e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004e80:	e696      	b.n	8004bb0 <_svfprintf_r+0x1158>
 8004e82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e84:	f10b 0801 	add.w	r8, fp, #1
 8004e88:	4443      	add	r3, r8
 8004e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004e90:	e68e      	b.n	8004bb0 <_svfprintf_r+0x1158>
 8004e92:	3330      	adds	r3, #48	; 0x30
 8004e94:	2230      	movs	r2, #48	; 0x30
 8004e96:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8004e9a:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 8004e9e:	ab1e      	add	r3, sp, #120	; 0x78
 8004ea0:	e7a6      	b.n	8004df0 <_svfprintf_r+0x1398>
 8004ea2:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f007 f819 	bl	800bee0 <__aeabi_dcmpeq>
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	f47f aef4 	bne.w	8004c9c <_svfprintf_r+0x1244>
 8004eb4:	f1c9 0301 	rsb	r3, r9, #1
 8004eb8:	931b      	str	r3, [sp, #108]	; 0x6c
 8004eba:	4498      	add	r8, r3
 8004ebc:	e64a      	b.n	8004b54 <_svfprintf_r+0x10fc>
 8004ebe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004ec0:	f8d5 a000 	ldr.w	sl, [r5]
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	3004      	adds	r0, #4
 8004ec8:	f1ba 0f00 	cmp.w	sl, #0
 8004ecc:	785d      	ldrb	r5, [r3, #1]
 8004ece:	900a      	str	r0, [sp, #40]	; 0x28
 8004ed0:	f6be ae17 	bge.w	8003b02 <_svfprintf_r+0xaa>
 8004ed4:	f7fe be13 	b.w	8003afe <_svfprintf_r+0xa6>
 8004ed8:	f1bb 0f00 	cmp.w	fp, #0
 8004edc:	d10e      	bne.n	8004efc <_svfprintf_r+0x14a4>
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	07d8      	lsls	r0, r3, #31
 8004ee2:	d40b      	bmi.n	8004efc <_svfprintf_r+0x14a4>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee8:	e662      	b.n	8004bb0 <_svfprintf_r+0x1158>
 8004eea:	9b03      	ldr	r3, [sp, #12]
 8004eec:	f013 0301 	ands.w	r3, r3, #1
 8004ef0:	d186      	bne.n	8004e00 <_svfprintf_r+0x13a8>
 8004ef2:	930e      	str	r3, [sp, #56]	; 0x38
 8004ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004efa:	e659      	b.n	8004bb0 <_svfprintf_r+0x1158>
 8004efc:	f10b 0302 	add.w	r3, fp, #2
 8004f00:	9309      	str	r3, [sp, #36]	; 0x24
 8004f02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004f06:	e653      	b.n	8004bb0 <_svfprintf_r+0x1158>
 8004f08:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8004f0c:	e770      	b.n	8004df0 <_svfprintf_r+0x1398>
 8004f0e:	9a04      	ldr	r2, [sp, #16]
 8004f10:	230c      	movs	r3, #12
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f18:	f7fe be70 	b.w	8003bfc <_svfprintf_r+0x1a4>
 8004f1c:	0800c94c 	.word	0x0800c94c
 8004f20:	66666667 	.word	0x66666667
 8004f24:	00000000 	.word	0x00000000

08004f28 <_vfprintf_r>:
 8004f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2c:	b0bd      	sub	sp, #244	; 0xf4
 8004f2e:	461c      	mov	r4, r3
 8004f30:	4689      	mov	r9, r1
 8004f32:	9204      	str	r2, [sp, #16]
 8004f34:	4607      	mov	r7, r0
 8004f36:	f003 f83b 	bl	8007fb0 <_localeconv_r>
 8004f3a:	6803      	ldr	r3, [r0, #0]
 8004f3c:	9311      	str	r3, [sp, #68]	; 0x44
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fe fd5c 	bl	80039fc <strlen>
 8004f44:	9408      	str	r4, [sp, #32]
 8004f46:	9012      	str	r0, [sp, #72]	; 0x48
 8004f48:	b11f      	cbz	r7, 8004f52 <_vfprintf_r+0x2a>
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 80f3 	beq.w	8005138 <_vfprintf_r+0x210>
 8004f52:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8004f56:	b293      	uxth	r3, r2
 8004f58:	049e      	lsls	r6, r3, #18
 8004f5a:	d40a      	bmi.n	8004f72 <_vfprintf_r+0x4a>
 8004f5c:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 8004f60:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8004f64:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8004f68:	f8a9 300c 	strh.w	r3, [r9, #12]
 8004f6c:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	071d      	lsls	r5, r3, #28
 8004f74:	f140 80aa 	bpl.w	80050cc <_vfprintf_r+0x1a4>
 8004f78:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8004f7c:	2a00      	cmp	r2, #0
 8004f7e:	f000 80a5 	beq.w	80050cc <_vfprintf_r+0x1a4>
 8004f82:	f003 031a 	and.w	r3, r3, #26
 8004f86:	2b0a      	cmp	r3, #10
 8004f88:	f000 80ac 	beq.w	80050e4 <_vfprintf_r+0x1bc>
 8004f8c:	ed9f 7b6e 	vldr	d7, [pc, #440]	; 8005148 <_vfprintf_r+0x220>
 8004f90:	2300      	movs	r3, #0
 8004f92:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004f96:	930d      	str	r3, [sp, #52]	; 0x34
 8004f98:	9321      	str	r3, [sp, #132]	; 0x84
 8004f9a:	9320      	str	r3, [sp, #128]	; 0x80
 8004f9c:	9310      	str	r3, [sp, #64]	; 0x40
 8004f9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004fa0:	9305      	str	r3, [sp, #20]
 8004fa2:	ab2c      	add	r3, sp, #176	; 0xb0
 8004fa4:	931f      	str	r3, [sp, #124]	; 0x7c
 8004fa6:	461c      	mov	r4, r3
 8004fa8:	46b8      	mov	r8, r7
 8004faa:	9d04      	ldr	r5, [sp, #16]
 8004fac:	782b      	ldrb	r3, [r5, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 80c6 	beq.w	8005140 <_vfprintf_r+0x218>
 8004fb4:	2b25      	cmp	r3, #37	; 0x25
 8004fb6:	d102      	bne.n	8004fbe <_vfprintf_r+0x96>
 8004fb8:	e0c2      	b.n	8005140 <_vfprintf_r+0x218>
 8004fba:	2b25      	cmp	r3, #37	; 0x25
 8004fbc:	d003      	beq.n	8004fc6 <_vfprintf_r+0x9e>
 8004fbe:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f9      	bne.n	8004fba <_vfprintf_r+0x92>
 8004fc6:	9b04      	ldr	r3, [sp, #16]
 8004fc8:	1aee      	subs	r6, r5, r3
 8004fca:	b17e      	cbz	r6, 8004fec <_vfprintf_r+0xc4>
 8004fcc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004fce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004fd0:	9904      	ldr	r1, [sp, #16]
 8004fd2:	6021      	str	r1, [r4, #0]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	4432      	add	r2, r6
 8004fd8:	2b07      	cmp	r3, #7
 8004fda:	6066      	str	r6, [r4, #4]
 8004fdc:	9221      	str	r2, [sp, #132]	; 0x84
 8004fde:	9320      	str	r3, [sp, #128]	; 0x80
 8004fe0:	f300 8093 	bgt.w	800510a <_vfprintf_r+0x1e2>
 8004fe4:	3408      	adds	r4, #8
 8004fe6:	9b05      	ldr	r3, [sp, #20]
 8004fe8:	4433      	add	r3, r6
 8004fea:	9305      	str	r3, [sp, #20]
 8004fec:	782b      	ldrb	r3, [r5, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 8093 	beq.w	800511a <_vfprintf_r+0x1f2>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	1c69      	adds	r1, r5, #1
 8004ff8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004ffc:	786d      	ldrb	r5, [r5, #1]
 8004ffe:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005002:	461a      	mov	r2, r3
 8005004:	9306      	str	r3, [sp, #24]
 8005006:	9302      	str	r3, [sp, #8]
 8005008:	4656      	mov	r6, sl
 800500a:	1c4b      	adds	r3, r1, #1
 800500c:	f1a5 0120 	sub.w	r1, r5, #32
 8005010:	2958      	cmp	r1, #88	; 0x58
 8005012:	f200 83cd 	bhi.w	80057b0 <_vfprintf_r+0x888>
 8005016:	e8df f011 	tbh	[pc, r1, lsl #1]
 800501a:	025c      	.short	0x025c
 800501c:	03cb03cb 	.word	0x03cb03cb
 8005020:	03cb0302 	.word	0x03cb0302
 8005024:	03cb03cb 	.word	0x03cb03cb
 8005028:	03cb03cb 	.word	0x03cb03cb
 800502c:	030903cb 	.word	0x030903cb
 8005030:	03cb02d2 	.word	0x03cb02d2
 8005034:	035301f8 	.word	0x035301f8
 8005038:	02d603cb 	.word	0x02d603cb
 800503c:	02dd02dd 	.word	0x02dd02dd
 8005040:	02dd02dd 	.word	0x02dd02dd
 8005044:	02dd02dd 	.word	0x02dd02dd
 8005048:	02dd02dd 	.word	0x02dd02dd
 800504c:	03cb02dd 	.word	0x03cb02dd
 8005050:	03cb03cb 	.word	0x03cb03cb
 8005054:	03cb03cb 	.word	0x03cb03cb
 8005058:	03cb03cb 	.word	0x03cb03cb
 800505c:	03cb03cb 	.word	0x03cb03cb
 8005060:	027103cb 	.word	0x027103cb
 8005064:	03cb0293 	.word	0x03cb0293
 8005068:	03cb0293 	.word	0x03cb0293
 800506c:	03cb03cb 	.word	0x03cb03cb
 8005070:	02cb03cb 	.word	0x02cb03cb
 8005074:	03cb03cb 	.word	0x03cb03cb
 8005078:	03cb036e 	.word	0x03cb036e
 800507c:	03cb03cb 	.word	0x03cb03cb
 8005080:	03cb03cb 	.word	0x03cb03cb
 8005084:	03cb03b5 	.word	0x03cb03b5
 8005088:	038b03cb 	.word	0x038b03cb
 800508c:	03cb03cb 	.word	0x03cb03cb
 8005090:	03cb03cb 	.word	0x03cb03cb
 8005094:	03cb03cb 	.word	0x03cb03cb
 8005098:	03cb03cb 	.word	0x03cb03cb
 800509c:	03cb03cb 	.word	0x03cb03cb
 80050a0:	031703a0 	.word	0x031703a0
 80050a4:	02930293 	.word	0x02930293
 80050a8:	03300293 	.word	0x03300293
 80050ac:	03cb0317 	.word	0x03cb0317
 80050b0:	033703cb 	.word	0x033703cb
 80050b4:	034103cb 	.word	0x034103cb
 80050b8:	02ec01ff 	.word	0x02ec01ff
 80050bc:	03cb0263 	.word	0x03cb0263
 80050c0:	03cb0211 	.word	0x03cb0211
 80050c4:	03cb009b 	.word	0x03cb009b
 80050c8:	023603cb 	.word	0x023603cb
 80050cc:	4638      	mov	r0, r7
 80050ce:	4649      	mov	r1, r9
 80050d0:	f001 f984 	bl	80063dc <__swsetup_r>
 80050d4:	b9a0      	cbnz	r0, 8005100 <_vfprintf_r+0x1d8>
 80050d6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80050da:	f003 031a 	and.w	r3, r3, #26
 80050de:	2b0a      	cmp	r3, #10
 80050e0:	f47f af54 	bne.w	8004f8c <_vfprintf_r+0x64>
 80050e4:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f6ff af4f 	blt.w	8004f8c <_vfprintf_r+0x64>
 80050ee:	4638      	mov	r0, r7
 80050f0:	4649      	mov	r1, r9
 80050f2:	9a04      	ldr	r2, [sp, #16]
 80050f4:	4623      	mov	r3, r4
 80050f6:	f001 f935 	bl	8006364 <__sbprintf>
 80050fa:	b03d      	add	sp, #244	; 0xf4
 80050fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005104:	b03d      	add	sp, #244	; 0xf4
 8005106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800510a:	4640      	mov	r0, r8
 800510c:	4649      	mov	r1, r9
 800510e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005110:	f005 f982 	bl	800a418 <__sprint_r>
 8005114:	b940      	cbnz	r0, 8005128 <_vfprintf_r+0x200>
 8005116:	ac2c      	add	r4, sp, #176	; 0xb0
 8005118:	e765      	b.n	8004fe6 <_vfprintf_r+0xbe>
 800511a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800511c:	b123      	cbz	r3, 8005128 <_vfprintf_r+0x200>
 800511e:	4640      	mov	r0, r8
 8005120:	4649      	mov	r1, r9
 8005122:	aa1f      	add	r2, sp, #124	; 0x7c
 8005124:	f005 f978 	bl	800a418 <__sprint_r>
 8005128:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800512c:	065a      	lsls	r2, r3, #25
 800512e:	d4e7      	bmi.n	8005100 <_vfprintf_r+0x1d8>
 8005130:	9805      	ldr	r0, [sp, #20]
 8005132:	b03d      	add	sp, #244	; 0xf4
 8005134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005138:	4638      	mov	r0, r7
 800513a:	f002 fbcd 	bl	80078d8 <__sinit>
 800513e:	e708      	b.n	8004f52 <_vfprintf_r+0x2a>
 8005140:	9d04      	ldr	r5, [sp, #16]
 8005142:	e753      	b.n	8004fec <_vfprintf_r+0xc4>
 8005144:	f3af 8000 	nop.w
	...
 8005150:	9304      	str	r3, [sp, #16]
 8005152:	9b02      	ldr	r3, [sp, #8]
 8005154:	46b2      	mov	sl, r6
 8005156:	069e      	lsls	r6, r3, #26
 8005158:	f140 831e 	bpl.w	8005798 <_vfprintf_r+0x870>
 800515c:	9f08      	ldr	r7, [sp, #32]
 800515e:	3707      	adds	r7, #7
 8005160:	f027 0307 	bic.w	r3, r7, #7
 8005164:	f103 0208 	add.w	r2, r3, #8
 8005168:	e9d3 6700 	ldrd	r6, r7, [r3]
 800516c:	9208      	str	r2, [sp, #32]
 800516e:	2301      	movs	r3, #1
 8005170:	f04f 0c00 	mov.w	ip, #0
 8005174:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 8005178:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800517c:	f1ba 0f00 	cmp.w	sl, #0
 8005180:	db03      	blt.n	800518a <_vfprintf_r+0x262>
 8005182:	9a02      	ldr	r2, [sp, #8]
 8005184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005188:	9202      	str	r2, [sp, #8]
 800518a:	ea56 0207 	orrs.w	r2, r6, r7
 800518e:	f040 831f 	bne.w	80057d0 <_vfprintf_r+0x8a8>
 8005192:	f1ba 0f00 	cmp.w	sl, #0
 8005196:	f000 841c 	beq.w	80059d2 <_vfprintf_r+0xaaa>
 800519a:	2b01      	cmp	r3, #1
 800519c:	f000 8320 	beq.w	80057e0 <_vfprintf_r+0x8b8>
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	f000 8452 	beq.w	8005a4a <_vfprintf_r+0xb22>
 80051a6:	a92c      	add	r1, sp, #176	; 0xb0
 80051a8:	08f2      	lsrs	r2, r6, #3
 80051aa:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80051ae:	08f8      	lsrs	r0, r7, #3
 80051b0:	f006 0307 	and.w	r3, r6, #7
 80051b4:	4607      	mov	r7, r0
 80051b6:	4616      	mov	r6, r2
 80051b8:	3330      	adds	r3, #48	; 0x30
 80051ba:	ea56 0207 	orrs.w	r2, r6, r7
 80051be:	f801 3d01 	strb.w	r3, [r1, #-1]!
 80051c2:	d1f1      	bne.n	80051a8 <_vfprintf_r+0x280>
 80051c4:	9a02      	ldr	r2, [sp, #8]
 80051c6:	910a      	str	r1, [sp, #40]	; 0x28
 80051c8:	07d0      	lsls	r0, r2, #31
 80051ca:	f100 84f9 	bmi.w	8005bc0 <_vfprintf_r+0xc98>
 80051ce:	ab2c      	add	r3, sp, #176	; 0xb0
 80051d0:	1a5b      	subs	r3, r3, r1
 80051d2:	9307      	str	r3, [sp, #28]
 80051d4:	9a07      	ldr	r2, [sp, #28]
 80051d6:	4592      	cmp	sl, r2
 80051d8:	4653      	mov	r3, sl
 80051da:	bfb8      	it	lt
 80051dc:	4613      	movlt	r3, r2
 80051de:	9303      	str	r3, [sp, #12]
 80051e0:	2300      	movs	r3, #0
 80051e2:	930c      	str	r3, [sp, #48]	; 0x30
 80051e4:	f1bc 0f00 	cmp.w	ip, #0
 80051e8:	d002      	beq.n	80051f0 <_vfprintf_r+0x2c8>
 80051ea:	9b03      	ldr	r3, [sp, #12]
 80051ec:	3301      	adds	r3, #1
 80051ee:	9303      	str	r3, [sp, #12]
 80051f0:	9b02      	ldr	r3, [sp, #8]
 80051f2:	f013 0302 	ands.w	r3, r3, #2
 80051f6:	9309      	str	r3, [sp, #36]	; 0x24
 80051f8:	d002      	beq.n	8005200 <_vfprintf_r+0x2d8>
 80051fa:	9b03      	ldr	r3, [sp, #12]
 80051fc:	3302      	adds	r3, #2
 80051fe:	9303      	str	r3, [sp, #12]
 8005200:	9b02      	ldr	r3, [sp, #8]
 8005202:	f013 0684 	ands.w	r6, r3, #132	; 0x84
 8005206:	f040 82e0 	bne.w	80057ca <_vfprintf_r+0x8a2>
 800520a:	9b06      	ldr	r3, [sp, #24]
 800520c:	9a03      	ldr	r2, [sp, #12]
 800520e:	ebc2 0a03 	rsb	sl, r2, r3
 8005212:	f1ba 0f00 	cmp.w	sl, #0
 8005216:	f340 82d8 	ble.w	80057ca <_vfprintf_r+0x8a2>
 800521a:	f1ba 0f10 	cmp.w	sl, #16
 800521e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8005220:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005222:	4fb3      	ldr	r7, [pc, #716]	; (80054f0 <_vfprintf_r+0x5c8>)
 8005224:	bfc8      	it	gt
 8005226:	f04f 0b10 	movgt.w	fp, #16
 800522a:	dc07      	bgt.n	800523c <_vfprintf_r+0x314>
 800522c:	e01e      	b.n	800526c <_vfprintf_r+0x344>
 800522e:	f1aa 0a10 	sub.w	sl, sl, #16
 8005232:	f1ba 0f10 	cmp.w	sl, #16
 8005236:	f104 0408 	add.w	r4, r4, #8
 800523a:	dd17      	ble.n	800526c <_vfprintf_r+0x344>
 800523c:	3201      	adds	r2, #1
 800523e:	3110      	adds	r1, #16
 8005240:	2a07      	cmp	r2, #7
 8005242:	9121      	str	r1, [sp, #132]	; 0x84
 8005244:	9220      	str	r2, [sp, #128]	; 0x80
 8005246:	e884 0880 	stmia.w	r4, {r7, fp}
 800524a:	ddf0      	ble.n	800522e <_vfprintf_r+0x306>
 800524c:	4640      	mov	r0, r8
 800524e:	4649      	mov	r1, r9
 8005250:	aa1f      	add	r2, sp, #124	; 0x7c
 8005252:	f005 f8e1 	bl	800a418 <__sprint_r>
 8005256:	2800      	cmp	r0, #0
 8005258:	f47f af66 	bne.w	8005128 <_vfprintf_r+0x200>
 800525c:	f1aa 0a10 	sub.w	sl, sl, #16
 8005260:	f1ba 0f10 	cmp.w	sl, #16
 8005264:	9921      	ldr	r1, [sp, #132]	; 0x84
 8005266:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005268:	ac2c      	add	r4, sp, #176	; 0xb0
 800526a:	dce7      	bgt.n	800523c <_vfprintf_r+0x314>
 800526c:	3201      	adds	r2, #1
 800526e:	eb0a 0b01 	add.w	fp, sl, r1
 8005272:	2a07      	cmp	r2, #7
 8005274:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005278:	9220      	str	r2, [sp, #128]	; 0x80
 800527a:	e884 0480 	stmia.w	r4, {r7, sl}
 800527e:	f300 844a 	bgt.w	8005b16 <_vfprintf_r+0xbee>
 8005282:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8005286:	3408      	adds	r4, #8
 8005288:	f1bc 0f00 	cmp.w	ip, #0
 800528c:	d00f      	beq.n	80052ae <_vfprintf_r+0x386>
 800528e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005290:	3301      	adds	r3, #1
 8005292:	f10b 0b01 	add.w	fp, fp, #1
 8005296:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
 800529a:	2201      	movs	r2, #1
 800529c:	2b07      	cmp	r3, #7
 800529e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80052a2:	9320      	str	r3, [sp, #128]	; 0x80
 80052a4:	e884 0006 	stmia.w	r4, {r1, r2}
 80052a8:	f300 83b1 	bgt.w	8005a0e <_vfprintf_r+0xae6>
 80052ac:	3408      	adds	r4, #8
 80052ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b0:	b173      	cbz	r3, 80052d0 <_vfprintf_r+0x3a8>
 80052b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80052b4:	3301      	adds	r3, #1
 80052b6:	f10b 0b02 	add.w	fp, fp, #2
 80052ba:	a918      	add	r1, sp, #96	; 0x60
 80052bc:	2202      	movs	r2, #2
 80052be:	2b07      	cmp	r3, #7
 80052c0:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80052c4:	9320      	str	r3, [sp, #128]	; 0x80
 80052c6:	e884 0006 	stmia.w	r4, {r1, r2}
 80052ca:	f300 83ac 	bgt.w	8005a26 <_vfprintf_r+0xafe>
 80052ce:	3408      	adds	r4, #8
 80052d0:	2e80      	cmp	r6, #128	; 0x80
 80052d2:	f000 82f0 	beq.w	80058b6 <_vfprintf_r+0x98e>
 80052d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052d8:	9a07      	ldr	r2, [sp, #28]
 80052da:	ebc2 0a03 	rsb	sl, r2, r3
 80052de:	f1ba 0f00 	cmp.w	sl, #0
 80052e2:	dd32      	ble.n	800534a <_vfprintf_r+0x422>
 80052e4:	f1ba 0f10 	cmp.w	sl, #16
 80052e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052ea:	4f82      	ldr	r7, [pc, #520]	; (80054f4 <_vfprintf_r+0x5cc>)
 80052ec:	dd22      	ble.n	8005334 <_vfprintf_r+0x40c>
 80052ee:	2610      	movs	r6, #16
 80052f0:	465b      	mov	r3, fp
 80052f2:	e006      	b.n	8005302 <_vfprintf_r+0x3da>
 80052f4:	f1aa 0a10 	sub.w	sl, sl, #16
 80052f8:	f1ba 0f10 	cmp.w	sl, #16
 80052fc:	f104 0408 	add.w	r4, r4, #8
 8005300:	dd17      	ble.n	8005332 <_vfprintf_r+0x40a>
 8005302:	3201      	adds	r2, #1
 8005304:	3310      	adds	r3, #16
 8005306:	2a07      	cmp	r2, #7
 8005308:	9321      	str	r3, [sp, #132]	; 0x84
 800530a:	9220      	str	r2, [sp, #128]	; 0x80
 800530c:	6027      	str	r7, [r4, #0]
 800530e:	6066      	str	r6, [r4, #4]
 8005310:	ddf0      	ble.n	80052f4 <_vfprintf_r+0x3cc>
 8005312:	4640      	mov	r0, r8
 8005314:	4649      	mov	r1, r9
 8005316:	aa1f      	add	r2, sp, #124	; 0x7c
 8005318:	f005 f87e 	bl	800a418 <__sprint_r>
 800531c:	2800      	cmp	r0, #0
 800531e:	f47f af03 	bne.w	8005128 <_vfprintf_r+0x200>
 8005322:	f1aa 0a10 	sub.w	sl, sl, #16
 8005326:	f1ba 0f10 	cmp.w	sl, #16
 800532a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800532c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800532e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005330:	dce7      	bgt.n	8005302 <_vfprintf_r+0x3da>
 8005332:	469b      	mov	fp, r3
 8005334:	3201      	adds	r2, #1
 8005336:	44d3      	add	fp, sl
 8005338:	2a07      	cmp	r2, #7
 800533a:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800533e:	9220      	str	r2, [sp, #128]	; 0x80
 8005340:	e884 0480 	stmia.w	r4, {r7, sl}
 8005344:	f300 8357 	bgt.w	80059f6 <_vfprintf_r+0xace>
 8005348:	3408      	adds	r4, #8
 800534a:	9b02      	ldr	r3, [sp, #8]
 800534c:	05db      	lsls	r3, r3, #23
 800534e:	f100 825b 	bmi.w	8005808 <_vfprintf_r+0x8e0>
 8005352:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005354:	9907      	ldr	r1, [sp, #28]
 8005356:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005358:	6022      	str	r2, [r4, #0]
 800535a:	3301      	adds	r3, #1
 800535c:	448b      	add	fp, r1
 800535e:	2b07      	cmp	r3, #7
 8005360:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005364:	6061      	str	r1, [r4, #4]
 8005366:	9320      	str	r3, [sp, #128]	; 0x80
 8005368:	f300 831d 	bgt.w	80059a6 <_vfprintf_r+0xa7e>
 800536c:	3408      	adds	r4, #8
 800536e:	9b02      	ldr	r3, [sp, #8]
 8005370:	0759      	lsls	r1, r3, #29
 8005372:	d53a      	bpl.n	80053ea <_vfprintf_r+0x4c2>
 8005374:	9b06      	ldr	r3, [sp, #24]
 8005376:	9a03      	ldr	r2, [sp, #12]
 8005378:	1a9d      	subs	r5, r3, r2
 800537a:	2d00      	cmp	r5, #0
 800537c:	dd35      	ble.n	80053ea <_vfprintf_r+0x4c2>
 800537e:	2d10      	cmp	r5, #16
 8005380:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005382:	4f5b      	ldr	r7, [pc, #364]	; (80054f0 <_vfprintf_r+0x5c8>)
 8005384:	dd1e      	ble.n	80053c4 <_vfprintf_r+0x49c>
 8005386:	2610      	movs	r6, #16
 8005388:	465a      	mov	r2, fp
 800538a:	e004      	b.n	8005396 <_vfprintf_r+0x46e>
 800538c:	3d10      	subs	r5, #16
 800538e:	2d10      	cmp	r5, #16
 8005390:	f104 0408 	add.w	r4, r4, #8
 8005394:	dd15      	ble.n	80053c2 <_vfprintf_r+0x49a>
 8005396:	3301      	adds	r3, #1
 8005398:	3210      	adds	r2, #16
 800539a:	2b07      	cmp	r3, #7
 800539c:	9221      	str	r2, [sp, #132]	; 0x84
 800539e:	9320      	str	r3, [sp, #128]	; 0x80
 80053a0:	6027      	str	r7, [r4, #0]
 80053a2:	6066      	str	r6, [r4, #4]
 80053a4:	ddf2      	ble.n	800538c <_vfprintf_r+0x464>
 80053a6:	4640      	mov	r0, r8
 80053a8:	4649      	mov	r1, r9
 80053aa:	aa1f      	add	r2, sp, #124	; 0x7c
 80053ac:	f005 f834 	bl	800a418 <__sprint_r>
 80053b0:	2800      	cmp	r0, #0
 80053b2:	f47f aeb9 	bne.w	8005128 <_vfprintf_r+0x200>
 80053b6:	3d10      	subs	r5, #16
 80053b8:	2d10      	cmp	r5, #16
 80053ba:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80053bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80053be:	ac2c      	add	r4, sp, #176	; 0xb0
 80053c0:	dce9      	bgt.n	8005396 <_vfprintf_r+0x46e>
 80053c2:	4693      	mov	fp, r2
 80053c4:	3301      	adds	r3, #1
 80053c6:	44ab      	add	fp, r5
 80053c8:	2b07      	cmp	r3, #7
 80053ca:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80053ce:	9320      	str	r3, [sp, #128]	; 0x80
 80053d0:	6027      	str	r7, [r4, #0]
 80053d2:	6065      	str	r5, [r4, #4]
 80053d4:	dd09      	ble.n	80053ea <_vfprintf_r+0x4c2>
 80053d6:	4640      	mov	r0, r8
 80053d8:	4649      	mov	r1, r9
 80053da:	aa1f      	add	r2, sp, #124	; 0x7c
 80053dc:	f005 f81c 	bl	800a418 <__sprint_r>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	f47f aea1 	bne.w	8005128 <_vfprintf_r+0x200>
 80053e6:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80053ea:	9b05      	ldr	r3, [sp, #20]
 80053ec:	9a03      	ldr	r2, [sp, #12]
 80053ee:	9906      	ldr	r1, [sp, #24]
 80053f0:	428a      	cmp	r2, r1
 80053f2:	bfac      	ite	ge
 80053f4:	189b      	addge	r3, r3, r2
 80053f6:	185b      	addlt	r3, r3, r1
 80053f8:	9305      	str	r3, [sp, #20]
 80053fa:	f1bb 0f00 	cmp.w	fp, #0
 80053fe:	f040 82de 	bne.w	80059be <_vfprintf_r+0xa96>
 8005402:	2300      	movs	r3, #0
 8005404:	9320      	str	r3, [sp, #128]	; 0x80
 8005406:	ac2c      	add	r4, sp, #176	; 0xb0
 8005408:	e5cf      	b.n	8004faa <_vfprintf_r+0x82>
 800540a:	4619      	mov	r1, r3
 800540c:	9802      	ldr	r0, [sp, #8]
 800540e:	781d      	ldrb	r5, [r3, #0]
 8005410:	f040 0004 	orr.w	r0, r0, #4
 8005414:	9002      	str	r0, [sp, #8]
 8005416:	e5f8      	b.n	800500a <_vfprintf_r+0xe2>
 8005418:	9304      	str	r3, [sp, #16]
 800541a:	9b02      	ldr	r3, [sp, #8]
 800541c:	f013 0320 	ands.w	r3, r3, #32
 8005420:	46b2      	mov	sl, r6
 8005422:	f000 8173 	beq.w	800570c <_vfprintf_r+0x7e4>
 8005426:	9f08      	ldr	r7, [sp, #32]
 8005428:	3707      	adds	r7, #7
 800542a:	f027 0307 	bic.w	r3, r7, #7
 800542e:	f103 0208 	add.w	r2, r3, #8
 8005432:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005436:	9208      	str	r2, [sp, #32]
 8005438:	2300      	movs	r3, #0
 800543a:	e699      	b.n	8005170 <_vfprintf_r+0x248>
 800543c:	9a08      	ldr	r2, [sp, #32]
 800543e:	9304      	str	r3, [sp, #16]
 8005440:	6813      	ldr	r3, [r2, #0]
 8005442:	930a      	str	r3, [sp, #40]	; 0x28
 8005444:	f04f 0b00 	mov.w	fp, #0
 8005448:	f88d b05f 	strb.w	fp, [sp, #95]	; 0x5f
 800544c:	1d17      	adds	r7, r2, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 865e 	beq.w	8006110 <_vfprintf_r+0x11e8>
 8005454:	2e00      	cmp	r6, #0
 8005456:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005458:	f2c0 8612 	blt.w	8006080 <_vfprintf_r+0x1158>
 800545c:	4659      	mov	r1, fp
 800545e:	4632      	mov	r2, r6
 8005460:	f003 f8b8 	bl	80085d4 <memchr>
 8005464:	2800      	cmp	r0, #0
 8005466:	f000 868f 	beq.w	8006188 <_vfprintf_r+0x1260>
 800546a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800546c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005470:	1ac3      	subs	r3, r0, r3
 8005472:	9307      	str	r3, [sp, #28]
 8005474:	9708      	str	r7, [sp, #32]
 8005476:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800547a:	9303      	str	r3, [sp, #12]
 800547c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8005480:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8005484:	e6ae      	b.n	80051e4 <_vfprintf_r+0x2bc>
 8005486:	9304      	str	r3, [sp, #16]
 8005488:	4b1b      	ldr	r3, [pc, #108]	; (80054f8 <_vfprintf_r+0x5d0>)
 800548a:	9310      	str	r3, [sp, #64]	; 0x40
 800548c:	9b02      	ldr	r3, [sp, #8]
 800548e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005492:	0699      	lsls	r1, r3, #26
 8005494:	46b2      	mov	sl, r6
 8005496:	f140 8155 	bpl.w	8005744 <_vfprintf_r+0x81c>
 800549a:	9f08      	ldr	r7, [sp, #32]
 800549c:	3707      	adds	r7, #7
 800549e:	f027 0307 	bic.w	r3, r7, #7
 80054a2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80054a6:	f103 0208 	add.w	r2, r3, #8
 80054aa:	9208      	str	r2, [sp, #32]
 80054ac:	9b02      	ldr	r3, [sp, #8]
 80054ae:	07db      	lsls	r3, r3, #31
 80054b0:	f140 82e4 	bpl.w	8005a7c <_vfprintf_r+0xb54>
 80054b4:	ea56 0307 	orrs.w	r3, r6, r7
 80054b8:	f000 82e0 	beq.w	8005a7c <_vfprintf_r+0xb54>
 80054bc:	9a02      	ldr	r2, [sp, #8]
 80054be:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
 80054c2:	2330      	movs	r3, #48	; 0x30
 80054c4:	f042 0202 	orr.w	r2, r2, #2
 80054c8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80054cc:	9202      	str	r2, [sp, #8]
 80054ce:	2302      	movs	r3, #2
 80054d0:	e64e      	b.n	8005170 <_vfprintf_r+0x248>
 80054d2:	781d      	ldrb	r5, [r3, #0]
 80054d4:	4619      	mov	r1, r3
 80054d6:	2a00      	cmp	r2, #0
 80054d8:	f47f ad97 	bne.w	800500a <_vfprintf_r+0xe2>
 80054dc:	2220      	movs	r2, #32
 80054de:	e594      	b.n	800500a <_vfprintf_r+0xe2>
 80054e0:	9902      	ldr	r1, [sp, #8]
 80054e2:	f041 0120 	orr.w	r1, r1, #32
 80054e6:	9102      	str	r1, [sp, #8]
 80054e8:	781d      	ldrb	r5, [r3, #0]
 80054ea:	4619      	mov	r1, r3
 80054ec:	e58d      	b.n	800500a <_vfprintf_r+0xe2>
 80054ee:	bf00      	nop
 80054f0:	0800c968 	.word	0x0800c968
 80054f4:	0800c958 	.word	0x0800c958
 80054f8:	0800c938 	.word	0x0800c938
 80054fc:	9304      	str	r3, [sp, #16]
 80054fe:	9b02      	ldr	r3, [sp, #8]
 8005500:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005504:	f043 0310 	orr.w	r3, r3, #16
 8005508:	9302      	str	r3, [sp, #8]
 800550a:	9b02      	ldr	r3, [sp, #8]
 800550c:	0698      	lsls	r0, r3, #26
 800550e:	46b2      	mov	sl, r6
 8005510:	f140 80a2 	bpl.w	8005658 <_vfprintf_r+0x730>
 8005514:	9f08      	ldr	r7, [sp, #32]
 8005516:	3707      	adds	r7, #7
 8005518:	f027 0707 	bic.w	r7, r7, #7
 800551c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005520:	f107 0108 	add.w	r1, r7, #8
 8005524:	9108      	str	r1, [sp, #32]
 8005526:	4616      	mov	r6, r2
 8005528:	461f      	mov	r7, r3
 800552a:	2a00      	cmp	r2, #0
 800552c:	f173 0300 	sbcs.w	r3, r3, #0
 8005530:	f2c0 841c 	blt.w	8005d6c <_vfprintf_r+0xe44>
 8005534:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8005538:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800553c:	2301      	movs	r3, #1
 800553e:	e61d      	b.n	800517c <_vfprintf_r+0x254>
 8005540:	9304      	str	r3, [sp, #16]
 8005542:	9b02      	ldr	r3, [sp, #8]
 8005544:	9f08      	ldr	r7, [sp, #32]
 8005546:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800554a:	071b      	lsls	r3, r3, #28
 800554c:	46b2      	mov	sl, r6
 800554e:	46b3      	mov	fp, r6
 8005550:	f107 0707 	add.w	r7, r7, #7
 8005554:	f140 849b 	bpl.w	8005e8e <_vfprintf_r+0xf66>
 8005558:	f027 0307 	bic.w	r3, r7, #7
 800555c:	ed93 7b00 	vldr	d7, [r3]
 8005560:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005564:	f103 0208 	add.w	r2, r3, #8
 8005568:	9208      	str	r2, [sp, #32]
 800556a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800556e:	f003 ff45 	bl	80093fc <__fpclassifyd>
 8005572:	2801      	cmp	r0, #1
 8005574:	f040 8408 	bne.w	8005d88 <_vfprintf_r+0xe60>
 8005578:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800557c:	2200      	movs	r2, #0
 800557e:	2300      	movs	r3, #0
 8005580:	f006 fcb8 	bl	800bef4 <__aeabi_dcmplt>
 8005584:	2800      	cmp	r0, #0
 8005586:	f040 85ec 	bne.w	8006162 <_vfprintf_r+0x123a>
 800558a:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 800558e:	9e02      	ldr	r6, [sp, #8]
 8005590:	4a99      	ldr	r2, [pc, #612]	; (80057f8 <_vfprintf_r+0x8d0>)
 8005592:	4b9a      	ldr	r3, [pc, #616]	; (80057fc <_vfprintf_r+0x8d4>)
 8005594:	2103      	movs	r1, #3
 8005596:	2000      	movs	r0, #0
 8005598:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 800559c:	2d47      	cmp	r5, #71	; 0x47
 800559e:	bfd8      	it	le
 80055a0:	461a      	movle	r2, r3
 80055a2:	9103      	str	r1, [sp, #12]
 80055a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80055a6:	9602      	str	r6, [sp, #8]
 80055a8:	920a      	str	r2, [sp, #40]	; 0x28
 80055aa:	9107      	str	r1, [sp, #28]
 80055ac:	900c      	str	r0, [sp, #48]	; 0x30
 80055ae:	e619      	b.n	80051e4 <_vfprintf_r+0x2bc>
 80055b0:	9902      	ldr	r1, [sp, #8]
 80055b2:	f041 0108 	orr.w	r1, r1, #8
 80055b6:	9102      	str	r1, [sp, #8]
 80055b8:	781d      	ldrb	r5, [r3, #0]
 80055ba:	4619      	mov	r1, r3
 80055bc:	e525      	b.n	800500a <_vfprintf_r+0xe2>
 80055be:	781d      	ldrb	r5, [r3, #0]
 80055c0:	4619      	mov	r1, r3
 80055c2:	222b      	movs	r2, #43	; 0x2b
 80055c4:	e521      	b.n	800500a <_vfprintf_r+0xe2>
 80055c6:	9902      	ldr	r1, [sp, #8]
 80055c8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80055cc:	9102      	str	r1, [sp, #8]
 80055ce:	781d      	ldrb	r5, [r3, #0]
 80055d0:	4619      	mov	r1, r3
 80055d2:	e51a      	b.n	800500a <_vfprintf_r+0xe2>
 80055d4:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80055d8:	2100      	movs	r1, #0
 80055da:	f813 5b01 	ldrb.w	r5, [r3], #1
 80055de:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80055e2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80055e6:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80055ea:	2809      	cmp	r0, #9
 80055ec:	d9f5      	bls.n	80055da <_vfprintf_r+0x6b2>
 80055ee:	9106      	str	r1, [sp, #24]
 80055f0:	e50c      	b.n	800500c <_vfprintf_r+0xe4>
 80055f2:	9908      	ldr	r1, [sp, #32]
 80055f4:	9304      	str	r3, [sp, #16]
 80055f6:	2330      	movs	r3, #48	; 0x30
 80055f8:	9a02      	ldr	r2, [sp, #8]
 80055fa:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80055fe:	460b      	mov	r3, r1
 8005600:	3304      	adds	r3, #4
 8005602:	2578      	movs	r5, #120	; 0x78
 8005604:	f042 0202 	orr.w	r2, r2, #2
 8005608:	9308      	str	r3, [sp, #32]
 800560a:	4b7d      	ldr	r3, [pc, #500]	; (8005800 <_vfprintf_r+0x8d8>)
 800560c:	9310      	str	r3, [sp, #64]	; 0x40
 800560e:	46b2      	mov	sl, r6
 8005610:	9202      	str	r2, [sp, #8]
 8005612:	680e      	ldr	r6, [r1, #0]
 8005614:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
 8005618:	2700      	movs	r7, #0
 800561a:	2302      	movs	r3, #2
 800561c:	e5a8      	b.n	8005170 <_vfprintf_r+0x248>
 800561e:	9902      	ldr	r1, [sp, #8]
 8005620:	f041 0101 	orr.w	r1, r1, #1
 8005624:	9102      	str	r1, [sp, #8]
 8005626:	781d      	ldrb	r5, [r3, #0]
 8005628:	4619      	mov	r1, r3
 800562a:	e4ee      	b.n	800500a <_vfprintf_r+0xe2>
 800562c:	9d08      	ldr	r5, [sp, #32]
 800562e:	6829      	ldr	r1, [r5, #0]
 8005630:	9106      	str	r1, [sp, #24]
 8005632:	4608      	mov	r0, r1
 8005634:	2800      	cmp	r0, #0
 8005636:	4629      	mov	r1, r5
 8005638:	f101 0104 	add.w	r1, r1, #4
 800563c:	f2c0 84ee 	blt.w	800601c <_vfprintf_r+0x10f4>
 8005640:	9108      	str	r1, [sp, #32]
 8005642:	781d      	ldrb	r5, [r3, #0]
 8005644:	4619      	mov	r1, r3
 8005646:	e4e0      	b.n	800500a <_vfprintf_r+0xe2>
 8005648:	9304      	str	r3, [sp, #16]
 800564a:	9b02      	ldr	r3, [sp, #8]
 800564c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005650:	0698      	lsls	r0, r3, #26
 8005652:	46b2      	mov	sl, r6
 8005654:	f53f af5e 	bmi.w	8005514 <_vfprintf_r+0x5ec>
 8005658:	9b02      	ldr	r3, [sp, #8]
 800565a:	06d9      	lsls	r1, r3, #27
 800565c:	f100 829b 	bmi.w	8005b96 <_vfprintf_r+0xc6e>
 8005660:	9b02      	ldr	r3, [sp, #8]
 8005662:	065a      	lsls	r2, r3, #25
 8005664:	f140 8297 	bpl.w	8005b96 <_vfprintf_r+0xc6e>
 8005668:	9908      	ldr	r1, [sp, #32]
 800566a:	f9b1 6000 	ldrsh.w	r6, [r1]
 800566e:	3104      	adds	r1, #4
 8005670:	17f7      	asrs	r7, r6, #31
 8005672:	4632      	mov	r2, r6
 8005674:	463b      	mov	r3, r7
 8005676:	9108      	str	r1, [sp, #32]
 8005678:	e757      	b.n	800552a <_vfprintf_r+0x602>
 800567a:	9902      	ldr	r1, [sp, #8]
 800567c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005680:	9102      	str	r1, [sp, #8]
 8005682:	781d      	ldrb	r5, [r3, #0]
 8005684:	4619      	mov	r1, r3
 8005686:	e4c0      	b.n	800500a <_vfprintf_r+0xe2>
 8005688:	781d      	ldrb	r5, [r3, #0]
 800568a:	9902      	ldr	r1, [sp, #8]
 800568c:	2d6c      	cmp	r5, #108	; 0x6c
 800568e:	f000 84be 	beq.w	800600e <_vfprintf_r+0x10e6>
 8005692:	f041 0110 	orr.w	r1, r1, #16
 8005696:	9102      	str	r1, [sp, #8]
 8005698:	4619      	mov	r1, r3
 800569a:	e4b6      	b.n	800500a <_vfprintf_r+0xe2>
 800569c:	9304      	str	r3, [sp, #16]
 800569e:	9b02      	ldr	r3, [sp, #8]
 80056a0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80056a4:	069a      	lsls	r2, r3, #26
 80056a6:	f140 83fd 	bpl.w	8005ea4 <_vfprintf_r+0xf7c>
 80056aa:	9a08      	ldr	r2, [sp, #32]
 80056ac:	9905      	ldr	r1, [sp, #20]
 80056ae:	6813      	ldr	r3, [r2, #0]
 80056b0:	17cf      	asrs	r7, r1, #31
 80056b2:	4608      	mov	r0, r1
 80056b4:	3204      	adds	r2, #4
 80056b6:	4639      	mov	r1, r7
 80056b8:	9208      	str	r2, [sp, #32]
 80056ba:	e9c3 0100 	strd	r0, r1, [r3]
 80056be:	e474      	b.n	8004faa <_vfprintf_r+0x82>
 80056c0:	781d      	ldrb	r5, [r3, #0]
 80056c2:	2d2a      	cmp	r5, #42	; 0x2a
 80056c4:	f103 0101 	add.w	r1, r3, #1
 80056c8:	f000 862a 	beq.w	8006320 <_vfprintf_r+0x13f8>
 80056cc:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80056d0:	2809      	cmp	r0, #9
 80056d2:	460b      	mov	r3, r1
 80056d4:	f04f 0600 	mov.w	r6, #0
 80056d8:	f63f ac98 	bhi.w	800500c <_vfprintf_r+0xe4>
 80056dc:	f813 5b01 	ldrb.w	r5, [r3], #1
 80056e0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80056e4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80056e8:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80056ec:	2809      	cmp	r0, #9
 80056ee:	d9f5      	bls.n	80056dc <_vfprintf_r+0x7b4>
 80056f0:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 80056f4:	e48a      	b.n	800500c <_vfprintf_r+0xe4>
 80056f6:	9304      	str	r3, [sp, #16]
 80056f8:	9b02      	ldr	r3, [sp, #8]
 80056fa:	f043 0310 	orr.w	r3, r3, #16
 80056fe:	9302      	str	r3, [sp, #8]
 8005700:	9b02      	ldr	r3, [sp, #8]
 8005702:	f013 0320 	ands.w	r3, r3, #32
 8005706:	46b2      	mov	sl, r6
 8005708:	f47f ae8d 	bne.w	8005426 <_vfprintf_r+0x4fe>
 800570c:	9a02      	ldr	r2, [sp, #8]
 800570e:	f012 0210 	ands.w	r2, r2, #16
 8005712:	f040 8238 	bne.w	8005b86 <_vfprintf_r+0xc5e>
 8005716:	9b02      	ldr	r3, [sp, #8]
 8005718:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800571c:	f000 8233 	beq.w	8005b86 <_vfprintf_r+0xc5e>
 8005720:	9908      	ldr	r1, [sp, #32]
 8005722:	4613      	mov	r3, r2
 8005724:	460a      	mov	r2, r1
 8005726:	3204      	adds	r2, #4
 8005728:	880e      	ldrh	r6, [r1, #0]
 800572a:	9208      	str	r2, [sp, #32]
 800572c:	2700      	movs	r7, #0
 800572e:	e51f      	b.n	8005170 <_vfprintf_r+0x248>
 8005730:	9304      	str	r3, [sp, #16]
 8005732:	4b34      	ldr	r3, [pc, #208]	; (8005804 <_vfprintf_r+0x8dc>)
 8005734:	9310      	str	r3, [sp, #64]	; 0x40
 8005736:	9b02      	ldr	r3, [sp, #8]
 8005738:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800573c:	0699      	lsls	r1, r3, #26
 800573e:	46b2      	mov	sl, r6
 8005740:	f53f aeab 	bmi.w	800549a <_vfprintf_r+0x572>
 8005744:	9b02      	ldr	r3, [sp, #8]
 8005746:	06da      	lsls	r2, r3, #27
 8005748:	f140 83d1 	bpl.w	8005eee <_vfprintf_r+0xfc6>
 800574c:	9a08      	ldr	r2, [sp, #32]
 800574e:	4613      	mov	r3, r2
 8005750:	3304      	adds	r3, #4
 8005752:	6816      	ldr	r6, [r2, #0]
 8005754:	9308      	str	r3, [sp, #32]
 8005756:	2700      	movs	r7, #0
 8005758:	e6a8      	b.n	80054ac <_vfprintf_r+0x584>
 800575a:	9908      	ldr	r1, [sp, #32]
 800575c:	9304      	str	r3, [sp, #16]
 800575e:	680a      	ldr	r2, [r1, #0]
 8005760:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8005764:	2300      	movs	r3, #0
 8005766:	2201      	movs	r2, #1
 8005768:	3104      	adds	r1, #4
 800576a:	469c      	mov	ip, r3
 800576c:	9203      	str	r2, [sp, #12]
 800576e:	9108      	str	r1, [sp, #32]
 8005770:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005774:	ab22      	add	r3, sp, #136	; 0x88
 8005776:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800577a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 800577e:	9207      	str	r2, [sp, #28]
 8005780:	930a      	str	r3, [sp, #40]	; 0x28
 8005782:	e535      	b.n	80051f0 <_vfprintf_r+0x2c8>
 8005784:	9304      	str	r3, [sp, #16]
 8005786:	9b02      	ldr	r3, [sp, #8]
 8005788:	f043 0310 	orr.w	r3, r3, #16
 800578c:	9302      	str	r3, [sp, #8]
 800578e:	9b02      	ldr	r3, [sp, #8]
 8005790:	46b2      	mov	sl, r6
 8005792:	069e      	lsls	r6, r3, #26
 8005794:	f53f ace2 	bmi.w	800515c <_vfprintf_r+0x234>
 8005798:	9b02      	ldr	r3, [sp, #8]
 800579a:	06d8      	lsls	r0, r3, #27
 800579c:	f140 8399 	bpl.w	8005ed2 <_vfprintf_r+0xfaa>
 80057a0:	9a08      	ldr	r2, [sp, #32]
 80057a2:	4613      	mov	r3, r2
 80057a4:	3204      	adds	r2, #4
 80057a6:	681e      	ldr	r6, [r3, #0]
 80057a8:	9208      	str	r2, [sp, #32]
 80057aa:	2301      	movs	r3, #1
 80057ac:	2700      	movs	r7, #0
 80057ae:	e4df      	b.n	8005170 <_vfprintf_r+0x248>
 80057b0:	9304      	str	r3, [sp, #16]
 80057b2:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80057b6:	2d00      	cmp	r5, #0
 80057b8:	f43f acaf 	beq.w	800511a <_vfprintf_r+0x1f2>
 80057bc:	2300      	movs	r3, #0
 80057be:	2201      	movs	r2, #1
 80057c0:	469c      	mov	ip, r3
 80057c2:	9203      	str	r2, [sp, #12]
 80057c4:	f88d 5088 	strb.w	r5, [sp, #136]	; 0x88
 80057c8:	e7d2      	b.n	8005770 <_vfprintf_r+0x848>
 80057ca:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80057ce:	e55b      	b.n	8005288 <_vfprintf_r+0x360>
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	f47f ace5 	bne.w	80051a0 <_vfprintf_r+0x278>
 80057d6:	2f00      	cmp	r7, #0
 80057d8:	bf08      	it	eq
 80057da:	2e0a      	cmpeq	r6, #10
 80057dc:	f080 81ff 	bcs.w	8005bde <_vfprintf_r+0xcb6>
 80057e0:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 80057e4:	3630      	adds	r6, #48	; 0x30
 80057e6:	f80b 6d41 	strb.w	r6, [fp, #-65]!
 80057ea:	ab2c      	add	r3, sp, #176	; 0xb0
 80057ec:	ebcb 0303 	rsb	r3, fp, r3
 80057f0:	9307      	str	r3, [sp, #28]
 80057f2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80057f6:	e4ed      	b.n	80051d4 <_vfprintf_r+0x2ac>
 80057f8:	0800c918 	.word	0x0800c918
 80057fc:	0800c914 	.word	0x0800c914
 8005800:	0800c938 	.word	0x0800c938
 8005804:	0800c924 	.word	0x0800c924
 8005808:	2d65      	cmp	r5, #101	; 0x65
 800580a:	f340 808a 	ble.w	8005922 <_vfprintf_r+0x9fa>
 800580e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005812:	2200      	movs	r2, #0
 8005814:	2300      	movs	r3, #0
 8005816:	f006 fb63 	bl	800bee0 <__aeabi_dcmpeq>
 800581a:	2800      	cmp	r0, #0
 800581c:	f000 8131 	beq.w	8005a82 <_vfprintf_r+0xb5a>
 8005820:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005822:	4aae      	ldr	r2, [pc, #696]	; (8005adc <_vfprintf_r+0xbb4>)
 8005824:	6022      	str	r2, [r4, #0]
 8005826:	3301      	adds	r3, #1
 8005828:	f10b 0b01 	add.w	fp, fp, #1
 800582c:	2201      	movs	r2, #1
 800582e:	2b07      	cmp	r3, #7
 8005830:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005834:	9320      	str	r3, [sp, #128]	; 0x80
 8005836:	6062      	str	r2, [r4, #4]
 8005838:	f300 8372 	bgt.w	8005f20 <_vfprintf_r+0xff8>
 800583c:	3408      	adds	r4, #8
 800583e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005840:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005842:	4293      	cmp	r3, r2
 8005844:	db03      	blt.n	800584e <_vfprintf_r+0x926>
 8005846:	9b02      	ldr	r3, [sp, #8]
 8005848:	07df      	lsls	r7, r3, #31
 800584a:	f57f ad90 	bpl.w	800536e <_vfprintf_r+0x446>
 800584e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005850:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005852:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005854:	6022      	str	r2, [r4, #0]
 8005856:	3301      	adds	r3, #1
 8005858:	448b      	add	fp, r1
 800585a:	2b07      	cmp	r3, #7
 800585c:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005860:	6061      	str	r1, [r4, #4]
 8005862:	9320      	str	r3, [sp, #128]	; 0x80
 8005864:	f300 83e1 	bgt.w	800602a <_vfprintf_r+0x1102>
 8005868:	3408      	adds	r4, #8
 800586a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800586c:	1e5d      	subs	r5, r3, #1
 800586e:	2d00      	cmp	r5, #0
 8005870:	f77f ad7d 	ble.w	800536e <_vfprintf_r+0x446>
 8005874:	2d10      	cmp	r5, #16
 8005876:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005878:	4f99      	ldr	r7, [pc, #612]	; (8005ae0 <_vfprintf_r+0xbb8>)
 800587a:	f340 8196 	ble.w	8005baa <_vfprintf_r+0xc82>
 800587e:	2610      	movs	r6, #16
 8005880:	465a      	mov	r2, fp
 8005882:	e004      	b.n	800588e <_vfprintf_r+0x966>
 8005884:	3408      	adds	r4, #8
 8005886:	3d10      	subs	r5, #16
 8005888:	2d10      	cmp	r5, #16
 800588a:	f340 818d 	ble.w	8005ba8 <_vfprintf_r+0xc80>
 800588e:	3301      	adds	r3, #1
 8005890:	3210      	adds	r2, #16
 8005892:	2b07      	cmp	r3, #7
 8005894:	9221      	str	r2, [sp, #132]	; 0x84
 8005896:	9320      	str	r3, [sp, #128]	; 0x80
 8005898:	6027      	str	r7, [r4, #0]
 800589a:	6066      	str	r6, [r4, #4]
 800589c:	ddf2      	ble.n	8005884 <_vfprintf_r+0x95c>
 800589e:	4640      	mov	r0, r8
 80058a0:	4649      	mov	r1, r9
 80058a2:	aa1f      	add	r2, sp, #124	; 0x7c
 80058a4:	f004 fdb8 	bl	800a418 <__sprint_r>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	f47f ac3d 	bne.w	8005128 <_vfprintf_r+0x200>
 80058ae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80058b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80058b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80058b4:	e7e7      	b.n	8005886 <_vfprintf_r+0x95e>
 80058b6:	9b06      	ldr	r3, [sp, #24]
 80058b8:	9a03      	ldr	r2, [sp, #12]
 80058ba:	1a9e      	subs	r6, r3, r2
 80058bc:	2e00      	cmp	r6, #0
 80058be:	f77f ad0a 	ble.w	80052d6 <_vfprintf_r+0x3ae>
 80058c2:	2e10      	cmp	r6, #16
 80058c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80058c6:	4f86      	ldr	r7, [pc, #536]	; (8005ae0 <_vfprintf_r+0xbb8>)
 80058c8:	dd1f      	ble.n	800590a <_vfprintf_r+0x9e2>
 80058ca:	f04f 0a10 	mov.w	sl, #16
 80058ce:	465b      	mov	r3, fp
 80058d0:	e004      	b.n	80058dc <_vfprintf_r+0x9b4>
 80058d2:	3e10      	subs	r6, #16
 80058d4:	2e10      	cmp	r6, #16
 80058d6:	f104 0408 	add.w	r4, r4, #8
 80058da:	dd15      	ble.n	8005908 <_vfprintf_r+0x9e0>
 80058dc:	3201      	adds	r2, #1
 80058de:	3310      	adds	r3, #16
 80058e0:	2a07      	cmp	r2, #7
 80058e2:	9321      	str	r3, [sp, #132]	; 0x84
 80058e4:	9220      	str	r2, [sp, #128]	; 0x80
 80058e6:	e884 0480 	stmia.w	r4, {r7, sl}
 80058ea:	ddf2      	ble.n	80058d2 <_vfprintf_r+0x9aa>
 80058ec:	4640      	mov	r0, r8
 80058ee:	4649      	mov	r1, r9
 80058f0:	aa1f      	add	r2, sp, #124	; 0x7c
 80058f2:	f004 fd91 	bl	800a418 <__sprint_r>
 80058f6:	2800      	cmp	r0, #0
 80058f8:	f47f ac16 	bne.w	8005128 <_vfprintf_r+0x200>
 80058fc:	3e10      	subs	r6, #16
 80058fe:	2e10      	cmp	r6, #16
 8005900:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005902:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005904:	ac2c      	add	r4, sp, #176	; 0xb0
 8005906:	dce9      	bgt.n	80058dc <_vfprintf_r+0x9b4>
 8005908:	469b      	mov	fp, r3
 800590a:	3201      	adds	r2, #1
 800590c:	44b3      	add	fp, r6
 800590e:	2a07      	cmp	r2, #7
 8005910:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005914:	9220      	str	r2, [sp, #128]	; 0x80
 8005916:	6027      	str	r7, [r4, #0]
 8005918:	6066      	str	r6, [r4, #4]
 800591a:	f300 821a 	bgt.w	8005d52 <_vfprintf_r+0xe2a>
 800591e:	3408      	adds	r4, #8
 8005920:	e4d9      	b.n	80052d6 <_vfprintf_r+0x3ae>
 8005922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005924:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005926:	2b01      	cmp	r3, #1
 8005928:	f340 81d5 	ble.w	8005cd6 <_vfprintf_r+0xdae>
 800592c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800592e:	6023      	str	r3, [r4, #0]
 8005930:	3501      	adds	r5, #1
 8005932:	f10b 0601 	add.w	r6, fp, #1
 8005936:	2301      	movs	r3, #1
 8005938:	2d07      	cmp	r5, #7
 800593a:	9621      	str	r6, [sp, #132]	; 0x84
 800593c:	9520      	str	r5, [sp, #128]	; 0x80
 800593e:	6063      	str	r3, [r4, #4]
 8005940:	f300 81e5 	bgt.w	8005d0e <_vfprintf_r+0xde6>
 8005944:	3408      	adds	r4, #8
 8005946:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005948:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800594a:	6023      	str	r3, [r4, #0]
 800594c:	3501      	adds	r5, #1
 800594e:	4416      	add	r6, r2
 8005950:	2d07      	cmp	r5, #7
 8005952:	9621      	str	r6, [sp, #132]	; 0x84
 8005954:	9520      	str	r5, [sp, #128]	; 0x80
 8005956:	6062      	str	r2, [r4, #4]
 8005958:	f300 81ef 	bgt.w	8005d3a <_vfprintf_r+0xe12>
 800595c:	3408      	adds	r4, #8
 800595e:	2300      	movs	r3, #0
 8005960:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005964:	2200      	movs	r2, #0
 8005966:	f006 fabb 	bl	800bee0 <__aeabi_dcmpeq>
 800596a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800596c:	2800      	cmp	r0, #0
 800596e:	f040 80e1 	bne.w	8005b34 <_vfprintf_r+0xc0c>
 8005972:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005974:	3b01      	subs	r3, #1
 8005976:	3501      	adds	r5, #1
 8005978:	3201      	adds	r2, #1
 800597a:	441e      	add	r6, r3
 800597c:	2d07      	cmp	r5, #7
 800597e:	9520      	str	r5, [sp, #128]	; 0x80
 8005980:	9621      	str	r6, [sp, #132]	; 0x84
 8005982:	6022      	str	r2, [r4, #0]
 8005984:	6063      	str	r3, [r4, #4]
 8005986:	f300 81b6 	bgt.w	8005cf6 <_vfprintf_r+0xdce>
 800598a:	3408      	adds	r4, #8
 800598c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800598e:	6062      	str	r2, [r4, #4]
 8005990:	3501      	adds	r5, #1
 8005992:	eb06 0b02 	add.w	fp, r6, r2
 8005996:	ab1b      	add	r3, sp, #108	; 0x6c
 8005998:	2d07      	cmp	r5, #7
 800599a:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800599e:	9520      	str	r5, [sp, #128]	; 0x80
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	f77f ace3 	ble.w	800536c <_vfprintf_r+0x444>
 80059a6:	4640      	mov	r0, r8
 80059a8:	4649      	mov	r1, r9
 80059aa:	aa1f      	add	r2, sp, #124	; 0x7c
 80059ac:	f004 fd34 	bl	800a418 <__sprint_r>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	f47f abb9 	bne.w	8005128 <_vfprintf_r+0x200>
 80059b6:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80059ba:	ac2c      	add	r4, sp, #176	; 0xb0
 80059bc:	e4d7      	b.n	800536e <_vfprintf_r+0x446>
 80059be:	4640      	mov	r0, r8
 80059c0:	4649      	mov	r1, r9
 80059c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80059c4:	f004 fd28 	bl	800a418 <__sprint_r>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	f43f ad1a 	beq.w	8005402 <_vfprintf_r+0x4da>
 80059ce:	f7ff bbab 	b.w	8005128 <_vfprintf_r+0x200>
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d133      	bne.n	8005a3e <_vfprintf_r+0xb16>
 80059d6:	9b02      	ldr	r3, [sp, #8]
 80059d8:	07da      	lsls	r2, r3, #31
 80059da:	d530      	bpl.n	8005a3e <_vfprintf_r+0xb16>
 80059dc:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 80059e0:	2330      	movs	r3, #48	; 0x30
 80059e2:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 80059e6:	ab2c      	add	r3, sp, #176	; 0xb0
 80059e8:	ebcb 0303 	rsb	r3, fp, r3
 80059ec:	9307      	str	r3, [sp, #28]
 80059ee:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80059f2:	f7ff bbef 	b.w	80051d4 <_vfprintf_r+0x2ac>
 80059f6:	4640      	mov	r0, r8
 80059f8:	4649      	mov	r1, r9
 80059fa:	aa1f      	add	r2, sp, #124	; 0x7c
 80059fc:	f004 fd0c 	bl	800a418 <__sprint_r>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	f47f ab91 	bne.w	8005128 <_vfprintf_r+0x200>
 8005a06:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005a0a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005a0c:	e49d      	b.n	800534a <_vfprintf_r+0x422>
 8005a0e:	4640      	mov	r0, r8
 8005a10:	4649      	mov	r1, r9
 8005a12:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a14:	f004 fd00 	bl	800a418 <__sprint_r>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	f47f ab85 	bne.w	8005128 <_vfprintf_r+0x200>
 8005a1e:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005a22:	ac2c      	add	r4, sp, #176	; 0xb0
 8005a24:	e443      	b.n	80052ae <_vfprintf_r+0x386>
 8005a26:	4640      	mov	r0, r8
 8005a28:	4649      	mov	r1, r9
 8005a2a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a2c:	f004 fcf4 	bl	800a418 <__sprint_r>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	f47f ab79 	bne.w	8005128 <_vfprintf_r+0x200>
 8005a36:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005a3a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005a3c:	e448      	b.n	80052d0 <_vfprintf_r+0x3a8>
 8005a3e:	ab2c      	add	r3, sp, #176	; 0xb0
 8005a40:	f8cd a01c 	str.w	sl, [sp, #28]
 8005a44:	930a      	str	r3, [sp, #40]	; 0x28
 8005a46:	f7ff bbc5 	b.w	80051d4 <_vfprintf_r+0x2ac>
 8005a4a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005a4c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
 8005a50:	0933      	lsrs	r3, r6, #4
 8005a52:	f006 010f 	and.w	r1, r6, #15
 8005a56:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005a5a:	093a      	lsrs	r2, r7, #4
 8005a5c:	461e      	mov	r6, r3
 8005a5e:	4617      	mov	r7, r2
 8005a60:	5c43      	ldrb	r3, [r0, r1]
 8005a62:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8005a66:	ea56 0307 	orrs.w	r3, r6, r7
 8005a6a:	d1f1      	bne.n	8005a50 <_vfprintf_r+0xb28>
 8005a6c:	465a      	mov	r2, fp
 8005a6e:	ab2c      	add	r3, sp, #176	; 0xb0
 8005a70:	1a9b      	subs	r3, r3, r2
 8005a72:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005a76:	9307      	str	r3, [sp, #28]
 8005a78:	f7ff bbac 	b.w	80051d4 <_vfprintf_r+0x2ac>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	f7ff bb77 	b.w	8005170 <_vfprintf_r+0x248>
 8005a82:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005a84:	2d00      	cmp	r5, #0
 8005a86:	f340 8257 	ble.w	8005f38 <_vfprintf_r+0x1010>
 8005a8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a8e:	428a      	cmp	r2, r1
 8005a90:	4613      	mov	r3, r2
 8005a92:	bfa8      	it	ge
 8005a94:	460b      	movge	r3, r1
 8005a96:	461d      	mov	r5, r3
 8005a98:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a9a:	2d00      	cmp	r5, #0
 8005a9c:	eb01 0a02 	add.w	sl, r1, r2
 8005aa0:	dd0b      	ble.n	8005aba <_vfprintf_r+0xb92>
 8005aa2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005aa4:	6021      	str	r1, [r4, #0]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	44ab      	add	fp, r5
 8005aaa:	2b07      	cmp	r3, #7
 8005aac:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005ab0:	6065      	str	r5, [r4, #4]
 8005ab2:	9320      	str	r3, [sp, #128]	; 0x80
 8005ab4:	f300 8309 	bgt.w	80060ca <_vfprintf_r+0x11a2>
 8005ab8:	3408      	adds	r4, #8
 8005aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005abc:	2d00      	cmp	r5, #0
 8005abe:	bfa8      	it	ge
 8005ac0:	1b5b      	subge	r3, r3, r5
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	461d      	mov	r5, r3
 8005ac6:	f340 80b0 	ble.w	8005c2a <_vfprintf_r+0xd02>
 8005aca:	2d10      	cmp	r5, #16
 8005acc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005ace:	4f04      	ldr	r7, [pc, #16]	; (8005ae0 <_vfprintf_r+0xbb8>)
 8005ad0:	f340 821a 	ble.w	8005f08 <_vfprintf_r+0xfe0>
 8005ad4:	2610      	movs	r6, #16
 8005ad6:	465a      	mov	r2, fp
 8005ad8:	e009      	b.n	8005aee <_vfprintf_r+0xbc6>
 8005ada:	bf00      	nop
 8005adc:	0800c954 	.word	0x0800c954
 8005ae0:	0800c958 	.word	0x0800c958
 8005ae4:	3408      	adds	r4, #8
 8005ae6:	3d10      	subs	r5, #16
 8005ae8:	2d10      	cmp	r5, #16
 8005aea:	f340 820c 	ble.w	8005f06 <_vfprintf_r+0xfde>
 8005aee:	3301      	adds	r3, #1
 8005af0:	3210      	adds	r2, #16
 8005af2:	2b07      	cmp	r3, #7
 8005af4:	9221      	str	r2, [sp, #132]	; 0x84
 8005af6:	9320      	str	r3, [sp, #128]	; 0x80
 8005af8:	6027      	str	r7, [r4, #0]
 8005afa:	6066      	str	r6, [r4, #4]
 8005afc:	ddf2      	ble.n	8005ae4 <_vfprintf_r+0xbbc>
 8005afe:	4640      	mov	r0, r8
 8005b00:	4649      	mov	r1, r9
 8005b02:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b04:	f004 fc88 	bl	800a418 <__sprint_r>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	f47f ab0d 	bne.w	8005128 <_vfprintf_r+0x200>
 8005b0e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b10:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b12:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b14:	e7e7      	b.n	8005ae6 <_vfprintf_r+0xbbe>
 8005b16:	4640      	mov	r0, r8
 8005b18:	4649      	mov	r1, r9
 8005b1a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b1c:	f004 fc7c 	bl	800a418 <__sprint_r>
 8005b20:	2800      	cmp	r0, #0
 8005b22:	f47f ab01 	bne.w	8005128 <_vfprintf_r+0x200>
 8005b26:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8005b2a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005b2e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b30:	f7ff bbaa 	b.w	8005288 <_vfprintf_r+0x360>
 8005b34:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8005b38:	f1ba 0f00 	cmp.w	sl, #0
 8005b3c:	f77f af26 	ble.w	800598c <_vfprintf_r+0xa64>
 8005b40:	f1ba 0f10 	cmp.w	sl, #16
 8005b44:	4f8f      	ldr	r7, [pc, #572]	; (8005d84 <_vfprintf_r+0xe5c>)
 8005b46:	bfc8      	it	gt
 8005b48:	f04f 0b10 	movgt.w	fp, #16
 8005b4c:	dc07      	bgt.n	8005b5e <_vfprintf_r+0xc36>
 8005b4e:	e0ea      	b.n	8005d26 <_vfprintf_r+0xdfe>
 8005b50:	3408      	adds	r4, #8
 8005b52:	f1aa 0a10 	sub.w	sl, sl, #16
 8005b56:	f1ba 0f10 	cmp.w	sl, #16
 8005b5a:	f340 80e4 	ble.w	8005d26 <_vfprintf_r+0xdfe>
 8005b5e:	3501      	adds	r5, #1
 8005b60:	3610      	adds	r6, #16
 8005b62:	2d07      	cmp	r5, #7
 8005b64:	9621      	str	r6, [sp, #132]	; 0x84
 8005b66:	9520      	str	r5, [sp, #128]	; 0x80
 8005b68:	e884 0880 	stmia.w	r4, {r7, fp}
 8005b6c:	ddf0      	ble.n	8005b50 <_vfprintf_r+0xc28>
 8005b6e:	4640      	mov	r0, r8
 8005b70:	4649      	mov	r1, r9
 8005b72:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b74:	f004 fc50 	bl	800a418 <__sprint_r>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	f47f aad5 	bne.w	8005128 <_vfprintf_r+0x200>
 8005b7e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8005b80:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005b82:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b84:	e7e5      	b.n	8005b52 <_vfprintf_r+0xc2a>
 8005b86:	9908      	ldr	r1, [sp, #32]
 8005b88:	460a      	mov	r2, r1
 8005b8a:	3204      	adds	r2, #4
 8005b8c:	680e      	ldr	r6, [r1, #0]
 8005b8e:	9208      	str	r2, [sp, #32]
 8005b90:	2700      	movs	r7, #0
 8005b92:	f7ff baed 	b.w	8005170 <_vfprintf_r+0x248>
 8005b96:	9a08      	ldr	r2, [sp, #32]
 8005b98:	6816      	ldr	r6, [r2, #0]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	17f7      	asrs	r7, r6, #31
 8005ba0:	9308      	str	r3, [sp, #32]
 8005ba2:	4632      	mov	r2, r6
 8005ba4:	463b      	mov	r3, r7
 8005ba6:	e4c0      	b.n	800552a <_vfprintf_r+0x602>
 8005ba8:	4693      	mov	fp, r2
 8005baa:	3301      	adds	r3, #1
 8005bac:	44ab      	add	fp, r5
 8005bae:	2b07      	cmp	r3, #7
 8005bb0:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005bb4:	9320      	str	r3, [sp, #128]	; 0x80
 8005bb6:	6027      	str	r7, [r4, #0]
 8005bb8:	6065      	str	r5, [r4, #4]
 8005bba:	f77f abd7 	ble.w	800536c <_vfprintf_r+0x444>
 8005bbe:	e6f2      	b.n	80059a6 <_vfprintf_r+0xa7e>
 8005bc0:	2b30      	cmp	r3, #48	; 0x30
 8005bc2:	f000 823e 	beq.w	8006042 <_vfprintf_r+0x111a>
 8005bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	461a      	mov	r2, r3
 8005bcc:	a82c      	add	r0, sp, #176	; 0xb0
 8005bce:	930a      	str	r3, [sp, #40]	; 0x28
 8005bd0:	1a82      	subs	r2, r0, r2
 8005bd2:	2330      	movs	r3, #48	; 0x30
 8005bd4:	9207      	str	r2, [sp, #28]
 8005bd6:	f801 3c01 	strb.w	r3, [r1, #-1]
 8005bda:	f7ff bafb 	b.w	80051d4 <_vfprintf_r+0x2ac>
 8005bde:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
 8005be2:	f8cd c00c 	str.w	ip, [sp, #12]
 8005be6:	4630      	mov	r0, r6
 8005be8:	4639      	mov	r1, r7
 8005bea:	220a      	movs	r2, #10
 8005bec:	2300      	movs	r3, #0
 8005bee:	f006 f9d1 	bl	800bf94 <__aeabi_uldivmod>
 8005bf2:	3230      	adds	r2, #48	; 0x30
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	4639      	mov	r1, r7
 8005bf8:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	220a      	movs	r2, #10
 8005c00:	f006 f9c8 	bl	800bf94 <__aeabi_uldivmod>
 8005c04:	4606      	mov	r6, r0
 8005c06:	460f      	mov	r7, r1
 8005c08:	ea56 0307 	orrs.w	r3, r6, r7
 8005c0c:	d1eb      	bne.n	8005be6 <_vfprintf_r+0xcbe>
 8005c0e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005c12:	e72b      	b.n	8005a6c <_vfprintf_r+0xb44>
 8005c14:	4640      	mov	r0, r8
 8005c16:	4649      	mov	r1, r9
 8005c18:	aa1f      	add	r2, sp, #124	; 0x7c
 8005c1a:	f004 fbfd 	bl	800a418 <__sprint_r>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	f47f aa82 	bne.w	8005128 <_vfprintf_r+0x200>
 8005c24:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005c28:	ac2c      	add	r4, sp, #176	; 0xb0
 8005c2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c30:	440a      	add	r2, r1
 8005c32:	4616      	mov	r6, r2
 8005c34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c36:	4293      	cmp	r3, r2
 8005c38:	db3e      	blt.n	8005cb8 <_vfprintf_r+0xd90>
 8005c3a:	9a02      	ldr	r2, [sp, #8]
 8005c3c:	07d5      	lsls	r5, r2, #31
 8005c3e:	d43b      	bmi.n	8005cb8 <_vfprintf_r+0xd90>
 8005c40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c42:	ebc6 050a 	rsb	r5, r6, sl
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	429d      	cmp	r5, r3
 8005c4a:	bfa8      	it	ge
 8005c4c:	461d      	movge	r5, r3
 8005c4e:	2d00      	cmp	r5, #0
 8005c50:	462f      	mov	r7, r5
 8005c52:	dd0b      	ble.n	8005c6c <_vfprintf_r+0xd44>
 8005c54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c56:	6026      	str	r6, [r4, #0]
 8005c58:	3201      	adds	r2, #1
 8005c5a:	44ab      	add	fp, r5
 8005c5c:	2a07      	cmp	r2, #7
 8005c5e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005c62:	6065      	str	r5, [r4, #4]
 8005c64:	9220      	str	r2, [sp, #128]	; 0x80
 8005c66:	f300 8266 	bgt.w	8006136 <_vfprintf_r+0x120e>
 8005c6a:	3408      	adds	r4, #8
 8005c6c:	2f00      	cmp	r7, #0
 8005c6e:	bfac      	ite	ge
 8005c70:	1bdd      	subge	r5, r3, r7
 8005c72:	461d      	movlt	r5, r3
 8005c74:	2d00      	cmp	r5, #0
 8005c76:	f77f ab7a 	ble.w	800536e <_vfprintf_r+0x446>
 8005c7a:	2d10      	cmp	r5, #16
 8005c7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c7e:	4f41      	ldr	r7, [pc, #260]	; (8005d84 <_vfprintf_r+0xe5c>)
 8005c80:	dd93      	ble.n	8005baa <_vfprintf_r+0xc82>
 8005c82:	2610      	movs	r6, #16
 8005c84:	465a      	mov	r2, fp
 8005c86:	e003      	b.n	8005c90 <_vfprintf_r+0xd68>
 8005c88:	3408      	adds	r4, #8
 8005c8a:	3d10      	subs	r5, #16
 8005c8c:	2d10      	cmp	r5, #16
 8005c8e:	dd8b      	ble.n	8005ba8 <_vfprintf_r+0xc80>
 8005c90:	3301      	adds	r3, #1
 8005c92:	3210      	adds	r2, #16
 8005c94:	2b07      	cmp	r3, #7
 8005c96:	9221      	str	r2, [sp, #132]	; 0x84
 8005c98:	9320      	str	r3, [sp, #128]	; 0x80
 8005c9a:	6027      	str	r7, [r4, #0]
 8005c9c:	6066      	str	r6, [r4, #4]
 8005c9e:	ddf3      	ble.n	8005c88 <_vfprintf_r+0xd60>
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ca6:	f004 fbb7 	bl	800a418 <__sprint_r>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	f47f aa3c 	bne.w	8005128 <_vfprintf_r+0x200>
 8005cb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005cb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005cb4:	ac2c      	add	r4, sp, #176	; 0xb0
 8005cb6:	e7e8      	b.n	8005c8a <_vfprintf_r+0xd62>
 8005cb8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005cba:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005cbc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005cbe:	6021      	str	r1, [r4, #0]
 8005cc0:	3201      	adds	r2, #1
 8005cc2:	4483      	add	fp, r0
 8005cc4:	2a07      	cmp	r2, #7
 8005cc6:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005cca:	6060      	str	r0, [r4, #4]
 8005ccc:	9220      	str	r2, [sp, #128]	; 0x80
 8005cce:	f300 8208 	bgt.w	80060e2 <_vfprintf_r+0x11ba>
 8005cd2:	3408      	adds	r4, #8
 8005cd4:	e7b4      	b.n	8005c40 <_vfprintf_r+0xd18>
 8005cd6:	9b02      	ldr	r3, [sp, #8]
 8005cd8:	07d8      	lsls	r0, r3, #31
 8005cda:	f53f ae27 	bmi.w	800592c <_vfprintf_r+0xa04>
 8005cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	3501      	adds	r5, #1
 8005ce4:	f10b 0601 	add.w	r6, fp, #1
 8005ce8:	2301      	movs	r3, #1
 8005cea:	2d07      	cmp	r5, #7
 8005cec:	9621      	str	r6, [sp, #132]	; 0x84
 8005cee:	9520      	str	r5, [sp, #128]	; 0x80
 8005cf0:	6063      	str	r3, [r4, #4]
 8005cf2:	f77f ae4a 	ble.w	800598a <_vfprintf_r+0xa62>
 8005cf6:	4640      	mov	r0, r8
 8005cf8:	4649      	mov	r1, r9
 8005cfa:	aa1f      	add	r2, sp, #124	; 0x7c
 8005cfc:	f004 fb8c 	bl	800a418 <__sprint_r>
 8005d00:	2800      	cmp	r0, #0
 8005d02:	f47f aa11 	bne.w	8005128 <_vfprintf_r+0x200>
 8005d06:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8005d08:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005d0a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d0c:	e63e      	b.n	800598c <_vfprintf_r+0xa64>
 8005d0e:	4640      	mov	r0, r8
 8005d10:	4649      	mov	r1, r9
 8005d12:	aa1f      	add	r2, sp, #124	; 0x7c
 8005d14:	f004 fb80 	bl	800a418 <__sprint_r>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	f47f aa05 	bne.w	8005128 <_vfprintf_r+0x200>
 8005d1e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8005d20:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005d22:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d24:	e60f      	b.n	8005946 <_vfprintf_r+0xa1e>
 8005d26:	3501      	adds	r5, #1
 8005d28:	4456      	add	r6, sl
 8005d2a:	2d07      	cmp	r5, #7
 8005d2c:	9621      	str	r6, [sp, #132]	; 0x84
 8005d2e:	9520      	str	r5, [sp, #128]	; 0x80
 8005d30:	e884 0480 	stmia.w	r4, {r7, sl}
 8005d34:	f77f ae29 	ble.w	800598a <_vfprintf_r+0xa62>
 8005d38:	e7dd      	b.n	8005cf6 <_vfprintf_r+0xdce>
 8005d3a:	4640      	mov	r0, r8
 8005d3c:	4649      	mov	r1, r9
 8005d3e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005d40:	f004 fb6a 	bl	800a418 <__sprint_r>
 8005d44:	2800      	cmp	r0, #0
 8005d46:	f47f a9ef 	bne.w	8005128 <_vfprintf_r+0x200>
 8005d4a:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8005d4c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005d4e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d50:	e605      	b.n	800595e <_vfprintf_r+0xa36>
 8005d52:	4640      	mov	r0, r8
 8005d54:	4649      	mov	r1, r9
 8005d56:	aa1f      	add	r2, sp, #124	; 0x7c
 8005d58:	f004 fb5e 	bl	800a418 <__sprint_r>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	f47f a9e3 	bne.w	8005128 <_vfprintf_r+0x200>
 8005d62:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005d66:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d68:	f7ff bab5 	b.w	80052d6 <_vfprintf_r+0x3ae>
 8005d6c:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8005d70:	4276      	negs	r6, r6
 8005d72:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8005d76:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 8005d7a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8005d7e:	2301      	movs	r3, #1
 8005d80:	f7ff b9fc 	b.w	800517c <_vfprintf_r+0x254>
 8005d84:	0800c958 	.word	0x0800c958
 8005d88:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8005d8c:	f003 fb36 	bl	80093fc <__fpclassifyd>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	f000 8116 	beq.w	8005fc2 <_vfprintf_r+0x109a>
 8005d96:	f025 0320 	bic.w	r3, r5, #32
 8005d9a:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8005d9e:	9303      	str	r3, [sp, #12]
 8005da0:	f000 8260 	beq.w	8006264 <_vfprintf_r+0x133c>
 8005da4:	2b47      	cmp	r3, #71	; 0x47
 8005da6:	d105      	bne.n	8005db4 <_vfprintf_r+0xe8c>
 8005da8:	f1ba 0f00 	cmp.w	sl, #0
 8005dac:	bf14      	ite	ne
 8005dae:	46d3      	movne	fp, sl
 8005db0:	f04f 0b01 	moveq.w	fp, #1
 8005db4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005db6:	9a02      	ldr	r2, [sp, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dbe:	9209      	str	r2, [sp, #36]	; 0x24
 8005dc0:	f2c0 8260 	blt.w	8006284 <_vfprintf_r+0x135c>
 8005dc4:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8005dc8:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8005dcc:	f04f 0a00 	mov.w	sl, #0
 8005dd0:	2d66      	cmp	r5, #102	; 0x66
 8005dd2:	f000 815e 	beq.w	8006092 <_vfprintf_r+0x116a>
 8005dd6:	2d46      	cmp	r5, #70	; 0x46
 8005dd8:	f000 815b 	beq.w	8006092 <_vfprintf_r+0x116a>
 8005ddc:	9b03      	ldr	r3, [sp, #12]
 8005dde:	2b45      	cmp	r3, #69	; 0x45
 8005de0:	bf0c      	ite	eq
 8005de2:	f10b 0701 	addeq.w	r7, fp, #1
 8005de6:	465f      	movne	r7, fp
 8005de8:	aa1a      	add	r2, sp, #104	; 0x68
 8005dea:	ab1d      	add	r3, sp, #116	; 0x74
 8005dec:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005df0:	4640      	mov	r0, r8
 8005df2:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8005df6:	2102      	movs	r1, #2
 8005df8:	463a      	mov	r2, r7
 8005dfa:	ab19      	add	r3, sp, #100	; 0x64
 8005dfc:	f000 fc60 	bl	80066c0 <_dtoa_r>
 8005e00:	2d67      	cmp	r5, #103	; 0x67
 8005e02:	900a      	str	r0, [sp, #40]	; 0x28
 8005e04:	d002      	beq.n	8005e0c <_vfprintf_r+0xee4>
 8005e06:	2d47      	cmp	r5, #71	; 0x47
 8005e08:	f040 8151 	bne.w	80060ae <_vfprintf_r+0x1186>
 8005e0c:	9b02      	ldr	r3, [sp, #8]
 8005e0e:	07db      	lsls	r3, r3, #31
 8005e10:	f140 8241 	bpl.w	8006296 <_vfprintf_r+0x136e>
 8005e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e16:	19de      	adds	r6, r3, r7
 8005e18:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f006 f85e 	bl	800bee0 <__aeabi_dcmpeq>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	f040 81ad 	bne.w	8006184 <_vfprintf_r+0x125c>
 8005e2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e2c:	429e      	cmp	r6, r3
 8005e2e:	d906      	bls.n	8005e3e <_vfprintf_r+0xf16>
 8005e30:	2130      	movs	r1, #48	; 0x30
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	921d      	str	r2, [sp, #116]	; 0x74
 8005e36:	7019      	strb	r1, [r3, #0]
 8005e38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e3a:	429e      	cmp	r6, r3
 8005e3c:	d8f9      	bhi.n	8005e32 <_vfprintf_r+0xf0a>
 8005e3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e40:	1a9b      	subs	r3, r3, r2
 8005e42:	930d      	str	r3, [sp, #52]	; 0x34
 8005e44:	9b03      	ldr	r3, [sp, #12]
 8005e46:	2b47      	cmp	r3, #71	; 0x47
 8005e48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e4a:	f000 8183 	beq.w	8006154 <_vfprintf_r+0x122c>
 8005e4e:	2d65      	cmp	r5, #101	; 0x65
 8005e50:	f340 81a6 	ble.w	80061a0 <_vfprintf_r+0x1278>
 8005e54:	2d66      	cmp	r5, #102	; 0x66
 8005e56:	930c      	str	r3, [sp, #48]	; 0x30
 8005e58:	f000 821f 	beq.w	800629a <_vfprintf_r+0x1372>
 8005e5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e60:	4293      	cmp	r3, r2
 8005e62:	f300 8202 	bgt.w	800626a <_vfprintf_r+0x1342>
 8005e66:	9b02      	ldr	r3, [sp, #8]
 8005e68:	07d9      	lsls	r1, r3, #31
 8005e6a:	f100 8239 	bmi.w	80062e0 <_vfprintf_r+0x13b8>
 8005e6e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005e72:	9207      	str	r2, [sp, #28]
 8005e74:	f1ba 0f00 	cmp.w	sl, #0
 8005e78:	f040 8179 	bne.w	800616e <_vfprintf_r+0x1246>
 8005e7c:	9303      	str	r3, [sp, #12]
 8005e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e80:	9302      	str	r3, [sp, #8]
 8005e82:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8005e86:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8005e8a:	f7ff b9ab 	b.w	80051e4 <_vfprintf_r+0x2bc>
 8005e8e:	f027 0707 	bic.w	r7, r7, #7
 8005e92:	ed97 7b00 	vldr	d7, [r7]
 8005e96:	f107 0308 	add.w	r3, r7, #8
 8005e9a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005e9e:	9308      	str	r3, [sp, #32]
 8005ea0:	f7ff bb63 	b.w	800556a <_vfprintf_r+0x642>
 8005ea4:	9b02      	ldr	r3, [sp, #8]
 8005ea6:	06db      	lsls	r3, r3, #27
 8005ea8:	d40b      	bmi.n	8005ec2 <_vfprintf_r+0xf9a>
 8005eaa:	9b02      	ldr	r3, [sp, #8]
 8005eac:	065f      	lsls	r7, r3, #25
 8005eae:	d508      	bpl.n	8005ec2 <_vfprintf_r+0xf9a>
 8005eb0:	9a08      	ldr	r2, [sp, #32]
 8005eb2:	6813      	ldr	r3, [r2, #0]
 8005eb4:	3204      	adds	r2, #4
 8005eb6:	9208      	str	r2, [sp, #32]
 8005eb8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8005ebc:	801a      	strh	r2, [r3, #0]
 8005ebe:	f7ff b874 	b.w	8004faa <_vfprintf_r+0x82>
 8005ec2:	9a08      	ldr	r2, [sp, #32]
 8005ec4:	6813      	ldr	r3, [r2, #0]
 8005ec6:	3204      	adds	r2, #4
 8005ec8:	9208      	str	r2, [sp, #32]
 8005eca:	9a05      	ldr	r2, [sp, #20]
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	f7ff b86c 	b.w	8004faa <_vfprintf_r+0x82>
 8005ed2:	9b02      	ldr	r3, [sp, #8]
 8005ed4:	9a08      	ldr	r2, [sp, #32]
 8005ed6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005eda:	4613      	mov	r3, r2
 8005edc:	f43f ac62 	beq.w	80057a4 <_vfprintf_r+0x87c>
 8005ee0:	8816      	ldrh	r6, [r2, #0]
 8005ee2:	3204      	adds	r2, #4
 8005ee4:	2700      	movs	r7, #0
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	9208      	str	r2, [sp, #32]
 8005eea:	f7ff b941 	b.w	8005170 <_vfprintf_r+0x248>
 8005eee:	9b02      	ldr	r3, [sp, #8]
 8005ef0:	9a08      	ldr	r2, [sp, #32]
 8005ef2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	d076      	beq.n	8005fe8 <_vfprintf_r+0x10c0>
 8005efa:	3304      	adds	r3, #4
 8005efc:	8816      	ldrh	r6, [r2, #0]
 8005efe:	9308      	str	r3, [sp, #32]
 8005f00:	2700      	movs	r7, #0
 8005f02:	f7ff bad3 	b.w	80054ac <_vfprintf_r+0x584>
 8005f06:	4693      	mov	fp, r2
 8005f08:	3301      	adds	r3, #1
 8005f0a:	44ab      	add	fp, r5
 8005f0c:	2b07      	cmp	r3, #7
 8005f0e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005f12:	9320      	str	r3, [sp, #128]	; 0x80
 8005f14:	6027      	str	r7, [r4, #0]
 8005f16:	6065      	str	r5, [r4, #4]
 8005f18:	f73f ae7c 	bgt.w	8005c14 <_vfprintf_r+0xcec>
 8005f1c:	3408      	adds	r4, #8
 8005f1e:	e684      	b.n	8005c2a <_vfprintf_r+0xd02>
 8005f20:	4640      	mov	r0, r8
 8005f22:	4649      	mov	r1, r9
 8005f24:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f26:	f004 fa77 	bl	800a418 <__sprint_r>
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	f47f a8fc 	bne.w	8005128 <_vfprintf_r+0x200>
 8005f30:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005f34:	ac2c      	add	r4, sp, #176	; 0xb0
 8005f36:	e482      	b.n	800583e <_vfprintf_r+0x916>
 8005f38:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005f3a:	4ab0      	ldr	r2, [pc, #704]	; (80061fc <_vfprintf_r+0x12d4>)
 8005f3c:	6022      	str	r2, [r4, #0]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	f10b 0b01 	add.w	fp, fp, #1
 8005f44:	2201      	movs	r2, #1
 8005f46:	2b07      	cmp	r3, #7
 8005f48:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005f4c:	9320      	str	r3, [sp, #128]	; 0x80
 8005f4e:	6062      	str	r2, [r4, #4]
 8005f50:	dc50      	bgt.n	8005ff4 <_vfprintf_r+0x10cc>
 8005f52:	3408      	adds	r4, #8
 8005f54:	b92d      	cbnz	r5, 8005f62 <_vfprintf_r+0x103a>
 8005f56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f58:	b91b      	cbnz	r3, 8005f62 <_vfprintf_r+0x103a>
 8005f5a:	9b02      	ldr	r3, [sp, #8]
 8005f5c:	07de      	lsls	r6, r3, #31
 8005f5e:	f57f aa06 	bpl.w	800536e <_vfprintf_r+0x446>
 8005f62:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005f64:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005f66:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005f68:	6022      	str	r2, [r4, #0]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	eb0b 0201 	add.w	r2, fp, r1
 8005f70:	2b07      	cmp	r3, #7
 8005f72:	9221      	str	r2, [sp, #132]	; 0x84
 8005f74:	6061      	str	r1, [r4, #4]
 8005f76:	9320      	str	r3, [sp, #128]	; 0x80
 8005f78:	f300 8167 	bgt.w	800624a <_vfprintf_r+0x1322>
 8005f7c:	3408      	adds	r4, #8
 8005f7e:	426d      	negs	r5, r5
 8005f80:	2d00      	cmp	r5, #0
 8005f82:	dd6f      	ble.n	8006064 <_vfprintf_r+0x113c>
 8005f84:	2d10      	cmp	r5, #16
 8005f86:	4f9e      	ldr	r7, [pc, #632]	; (8006200 <_vfprintf_r+0x12d8>)
 8005f88:	bfc8      	it	gt
 8005f8a:	2610      	movgt	r6, #16
 8005f8c:	dc05      	bgt.n	8005f9a <_vfprintf_r+0x1072>
 8005f8e:	e0b5      	b.n	80060fc <_vfprintf_r+0x11d4>
 8005f90:	3408      	adds	r4, #8
 8005f92:	3d10      	subs	r5, #16
 8005f94:	2d10      	cmp	r5, #16
 8005f96:	f340 80b1 	ble.w	80060fc <_vfprintf_r+0x11d4>
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	3210      	adds	r2, #16
 8005f9e:	2b07      	cmp	r3, #7
 8005fa0:	9221      	str	r2, [sp, #132]	; 0x84
 8005fa2:	9320      	str	r3, [sp, #128]	; 0x80
 8005fa4:	6027      	str	r7, [r4, #0]
 8005fa6:	6066      	str	r6, [r4, #4]
 8005fa8:	ddf2      	ble.n	8005f90 <_vfprintf_r+0x1068>
 8005faa:	4640      	mov	r0, r8
 8005fac:	4649      	mov	r1, r9
 8005fae:	aa1f      	add	r2, sp, #124	; 0x7c
 8005fb0:	f004 fa32 	bl	800a418 <__sprint_r>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	f47f a8b7 	bne.w	8005128 <_vfprintf_r+0x200>
 8005fba:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005fbe:	ac2c      	add	r4, sp, #176	; 0xb0
 8005fc0:	e7e7      	b.n	8005f92 <_vfprintf_r+0x106a>
 8005fc2:	9e02      	ldr	r6, [sp, #8]
 8005fc4:	4a8f      	ldr	r2, [pc, #572]	; (8006204 <_vfprintf_r+0x12dc>)
 8005fc6:	4b90      	ldr	r3, [pc, #576]	; (8006208 <_vfprintf_r+0x12e0>)
 8005fc8:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8005fcc:	900b      	str	r0, [sp, #44]	; 0x2c
 8005fce:	2103      	movs	r1, #3
 8005fd0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8005fd4:	2d47      	cmp	r5, #71	; 0x47
 8005fd6:	bfd8      	it	le
 8005fd8:	461a      	movle	r2, r3
 8005fda:	9103      	str	r1, [sp, #12]
 8005fdc:	9602      	str	r6, [sp, #8]
 8005fde:	900c      	str	r0, [sp, #48]	; 0x30
 8005fe0:	920a      	str	r2, [sp, #40]	; 0x28
 8005fe2:	9107      	str	r1, [sp, #28]
 8005fe4:	f7ff b8fe 	b.w	80051e4 <_vfprintf_r+0x2bc>
 8005fe8:	3304      	adds	r3, #4
 8005fea:	6816      	ldr	r6, [r2, #0]
 8005fec:	9308      	str	r3, [sp, #32]
 8005fee:	2700      	movs	r7, #0
 8005ff0:	f7ff ba5c 	b.w	80054ac <_vfprintf_r+0x584>
 8005ff4:	4640      	mov	r0, r8
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ffa:	f004 fa0d 	bl	800a418 <__sprint_r>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	f47f a892 	bne.w	8005128 <_vfprintf_r+0x200>
 8006004:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006006:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800600a:	ac2c      	add	r4, sp, #176	; 0xb0
 800600c:	e7a2      	b.n	8005f54 <_vfprintf_r+0x102c>
 800600e:	f041 0120 	orr.w	r1, r1, #32
 8006012:	9102      	str	r1, [sp, #8]
 8006014:	785d      	ldrb	r5, [r3, #1]
 8006016:	1c59      	adds	r1, r3, #1
 8006018:	f7fe bff7 	b.w	800500a <_vfprintf_r+0xe2>
 800601c:	9806      	ldr	r0, [sp, #24]
 800601e:	9108      	str	r1, [sp, #32]
 8006020:	4240      	negs	r0, r0
 8006022:	9006      	str	r0, [sp, #24]
 8006024:	4619      	mov	r1, r3
 8006026:	f7ff b9f1 	b.w	800540c <_vfprintf_r+0x4e4>
 800602a:	4640      	mov	r0, r8
 800602c:	4649      	mov	r1, r9
 800602e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006030:	f004 f9f2 	bl	800a418 <__sprint_r>
 8006034:	2800      	cmp	r0, #0
 8006036:	f47f a877 	bne.w	8005128 <_vfprintf_r+0x200>
 800603a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800603e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006040:	e413      	b.n	800586a <_vfprintf_r+0x942>
 8006042:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006044:	ab2c      	add	r3, sp, #176	; 0xb0
 8006046:	1a9b      	subs	r3, r3, r2
 8006048:	9307      	str	r3, [sp, #28]
 800604a:	f7ff b8c3 	b.w	80051d4 <_vfprintf_r+0x2ac>
 800604e:	4640      	mov	r0, r8
 8006050:	4649      	mov	r1, r9
 8006052:	aa1f      	add	r2, sp, #124	; 0x7c
 8006054:	f004 f9e0 	bl	800a418 <__sprint_r>
 8006058:	2800      	cmp	r0, #0
 800605a:	f47f a865 	bne.w	8005128 <_vfprintf_r+0x200>
 800605e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006060:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006062:	ac2c      	add	r4, sp, #176	; 0xb0
 8006064:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006066:	6060      	str	r0, [r4, #4]
 8006068:	3301      	adds	r3, #1
 800606a:	eb02 0b00 	add.w	fp, r2, r0
 800606e:	2b07      	cmp	r3, #7
 8006070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006072:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006076:	9320      	str	r3, [sp, #128]	; 0x80
 8006078:	6022      	str	r2, [r4, #0]
 800607a:	f77f a977 	ble.w	800536c <_vfprintf_r+0x444>
 800607e:	e492      	b.n	80059a6 <_vfprintf_r+0xa7e>
 8006080:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006084:	f7fd fcba 	bl	80039fc <strlen>
 8006088:	9708      	str	r7, [sp, #32]
 800608a:	9007      	str	r0, [sp, #28]
 800608c:	4603      	mov	r3, r0
 800608e:	f7ff b9f2 	b.w	8005476 <_vfprintf_r+0x54e>
 8006092:	aa1a      	add	r2, sp, #104	; 0x68
 8006094:	ab1d      	add	r3, sp, #116	; 0x74
 8006096:	e88d 000c 	stmia.w	sp, {r2, r3}
 800609a:	4640      	mov	r0, r8
 800609c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 80060a0:	2103      	movs	r1, #3
 80060a2:	465a      	mov	r2, fp
 80060a4:	ab19      	add	r3, sp, #100	; 0x64
 80060a6:	f000 fb0b 	bl	80066c0 <_dtoa_r>
 80060aa:	465f      	mov	r7, fp
 80060ac:	900a      	str	r0, [sp, #40]	; 0x28
 80060ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060b0:	19de      	adds	r6, r3, r7
 80060b2:	9b03      	ldr	r3, [sp, #12]
 80060b4:	2b46      	cmp	r3, #70	; 0x46
 80060b6:	f47f aeaf 	bne.w	8005e18 <_vfprintf_r+0xef0>
 80060ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	2b30      	cmp	r3, #48	; 0x30
 80060c0:	f000 8100 	beq.w	80062c4 <_vfprintf_r+0x139c>
 80060c4:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80060c6:	443e      	add	r6, r7
 80060c8:	e6a6      	b.n	8005e18 <_vfprintf_r+0xef0>
 80060ca:	4640      	mov	r0, r8
 80060cc:	4649      	mov	r1, r9
 80060ce:	aa1f      	add	r2, sp, #124	; 0x7c
 80060d0:	f004 f9a2 	bl	800a418 <__sprint_r>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	f47f a827 	bne.w	8005128 <_vfprintf_r+0x200>
 80060da:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80060de:	ac2c      	add	r4, sp, #176	; 0xb0
 80060e0:	e4eb      	b.n	8005aba <_vfprintf_r+0xb92>
 80060e2:	4640      	mov	r0, r8
 80060e4:	4649      	mov	r1, r9
 80060e6:	aa1f      	add	r2, sp, #124	; 0x7c
 80060e8:	f004 f996 	bl	800a418 <__sprint_r>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	f47f a81b 	bne.w	8005128 <_vfprintf_r+0x200>
 80060f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80060f4:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80060f8:	ac2c      	add	r4, sp, #176	; 0xb0
 80060fa:	e5a1      	b.n	8005c40 <_vfprintf_r+0xd18>
 80060fc:	3301      	adds	r3, #1
 80060fe:	442a      	add	r2, r5
 8006100:	2b07      	cmp	r3, #7
 8006102:	9221      	str	r2, [sp, #132]	; 0x84
 8006104:	9320      	str	r3, [sp, #128]	; 0x80
 8006106:	6027      	str	r7, [r4, #0]
 8006108:	6065      	str	r5, [r4, #4]
 800610a:	dca0      	bgt.n	800604e <_vfprintf_r+0x1126>
 800610c:	3408      	adds	r4, #8
 800610e:	e7a9      	b.n	8006064 <_vfprintf_r+0x113c>
 8006110:	2e06      	cmp	r6, #6
 8006112:	4633      	mov	r3, r6
 8006114:	bf28      	it	cs
 8006116:	2306      	movcs	r3, #6
 8006118:	9307      	str	r3, [sp, #28]
 800611a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800611e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8006122:	9303      	str	r3, [sp, #12]
 8006124:	4b39      	ldr	r3, [pc, #228]	; (800620c <_vfprintf_r+0x12e4>)
 8006126:	9708      	str	r7, [sp, #32]
 8006128:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800612c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8006130:	930a      	str	r3, [sp, #40]	; 0x28
 8006132:	f7ff b857 	b.w	80051e4 <_vfprintf_r+0x2bc>
 8006136:	4640      	mov	r0, r8
 8006138:	4649      	mov	r1, r9
 800613a:	aa1f      	add	r2, sp, #124	; 0x7c
 800613c:	f004 f96c 	bl	800a418 <__sprint_r>
 8006140:	2800      	cmp	r0, #0
 8006142:	f47e aff1 	bne.w	8005128 <_vfprintf_r+0x200>
 8006146:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006148:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800614a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	ac2c      	add	r4, sp, #176	; 0xb0
 8006152:	e58b      	b.n	8005c6c <_vfprintf_r+0xd44>
 8006154:	1cdf      	adds	r7, r3, #3
 8006156:	db22      	blt.n	800619e <_vfprintf_r+0x1276>
 8006158:	459b      	cmp	fp, r3
 800615a:	db20      	blt.n	800619e <_vfprintf_r+0x1276>
 800615c:	930c      	str	r3, [sp, #48]	; 0x30
 800615e:	2567      	movs	r5, #103	; 0x67
 8006160:	e67c      	b.n	8005e5c <_vfprintf_r+0xf34>
 8006162:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8006166:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 800616a:	f7ff ba10 	b.w	800558e <_vfprintf_r+0x666>
 800616e:	9303      	str	r3, [sp, #12]
 8006170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006172:	9302      	str	r3, [sp, #8]
 8006174:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8006178:	2300      	movs	r3, #0
 800617a:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 800617e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006180:	f7ff b833 	b.w	80051ea <_vfprintf_r+0x2c2>
 8006184:	4633      	mov	r3, r6
 8006186:	e65a      	b.n	8005e3e <_vfprintf_r+0xf16>
 8006188:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 800618c:	900b      	str	r0, [sp, #44]	; 0x2c
 800618e:	9708      	str	r7, [sp, #32]
 8006190:	900c      	str	r0, [sp, #48]	; 0x30
 8006192:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8006196:	9303      	str	r3, [sp, #12]
 8006198:	9607      	str	r6, [sp, #28]
 800619a:	f7ff b823 	b.w	80051e4 <_vfprintf_r+0x2bc>
 800619e:	3d02      	subs	r5, #2
 80061a0:	3b01      	subs	r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	9319      	str	r3, [sp, #100]	; 0x64
 80061a6:	bfba      	itte	lt
 80061a8:	425b      	neglt	r3, r3
 80061aa:	222d      	movlt	r2, #45	; 0x2d
 80061ac:	222b      	movge	r2, #43	; 0x2b
 80061ae:	2b09      	cmp	r3, #9
 80061b0:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
 80061b4:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80061b8:	f340 8098 	ble.w	80062ec <_vfprintf_r+0x13c4>
 80061bc:	f10d 067b 	add.w	r6, sp, #123	; 0x7b
 80061c0:	4630      	mov	r0, r6
 80061c2:	4a13      	ldr	r2, [pc, #76]	; (8006210 <_vfprintf_r+0x12e8>)
 80061c4:	fb82 2103 	smull	r2, r1, r2, r3
 80061c8:	17da      	asrs	r2, r3, #31
 80061ca:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 80061ce:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80061d2:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 80061d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80061da:	2a09      	cmp	r2, #9
 80061dc:	4613      	mov	r3, r2
 80061de:	f800 1d01 	strb.w	r1, [r0, #-1]!
 80061e2:	dcee      	bgt.n	80061c2 <_vfprintf_r+0x129a>
 80061e4:	4602      	mov	r2, r0
 80061e6:	3330      	adds	r3, #48	; 0x30
 80061e8:	b2d9      	uxtb	r1, r3
 80061ea:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80061ee:	4296      	cmp	r6, r2
 80061f0:	f240 80a9 	bls.w	8006346 <_vfprintf_r+0x141e>
 80061f4:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 80061f8:	4603      	mov	r3, r0
 80061fa:	e00d      	b.n	8006218 <_vfprintf_r+0x12f0>
 80061fc:	0800c954 	.word	0x0800c954
 8006200:	0800c958 	.word	0x0800c958
 8006204:	0800c920 	.word	0x0800c920
 8006208:	0800c91c 	.word	0x0800c91c
 800620c:	0800c94c 	.word	0x0800c94c
 8006210:	66666667 	.word	0x66666667
 8006214:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006218:	f802 1b01 	strb.w	r1, [r2], #1
 800621c:	42b3      	cmp	r3, r6
 800621e:	d1f9      	bne.n	8006214 <_vfprintf_r+0x12ec>
 8006220:	ab1f      	add	r3, sp, #124	; 0x7c
 8006222:	1a1b      	subs	r3, r3, r0
 8006224:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8006228:	4413      	add	r3, r2
 800622a:	aa1b      	add	r2, sp, #108	; 0x6c
 800622c:	1a9b      	subs	r3, r3, r2
 800622e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006230:	9313      	str	r3, [sp, #76]	; 0x4c
 8006232:	2a01      	cmp	r2, #1
 8006234:	4413      	add	r3, r2
 8006236:	9307      	str	r3, [sp, #28]
 8006238:	dd69      	ble.n	800630e <_vfprintf_r+0x13e6>
 800623a:	9b07      	ldr	r3, [sp, #28]
 800623c:	2200      	movs	r2, #0
 800623e:	3301      	adds	r3, #1
 8006240:	9307      	str	r3, [sp, #28]
 8006242:	920c      	str	r2, [sp, #48]	; 0x30
 8006244:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006248:	e614      	b.n	8005e74 <_vfprintf_r+0xf4c>
 800624a:	4640      	mov	r0, r8
 800624c:	4649      	mov	r1, r9
 800624e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006250:	f004 f8e2 	bl	800a418 <__sprint_r>
 8006254:	2800      	cmp	r0, #0
 8006256:	f47e af67 	bne.w	8005128 <_vfprintf_r+0x200>
 800625a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800625c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800625e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006260:	ac2c      	add	r4, sp, #176	; 0xb0
 8006262:	e68c      	b.n	8005f7e <_vfprintf_r+0x1056>
 8006264:	f04f 0b06 	mov.w	fp, #6
 8006268:	e5a4      	b.n	8005db4 <_vfprintf_r+0xe8c>
 800626a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800626c:	2b00      	cmp	r3, #0
 800626e:	bfd8      	it	le
 8006270:	f1c3 0602 	rsble	r6, r3, #2
 8006274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006276:	bfc8      	it	gt
 8006278:	2601      	movgt	r6, #1
 800627a:	18f3      	adds	r3, r6, r3
 800627c:	9307      	str	r3, [sp, #28]
 800627e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006282:	e5f7      	b.n	8005e74 <_vfprintf_r+0xf4c>
 8006284:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006288:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800628c:	9014      	str	r0, [sp, #80]	; 0x50
 800628e:	9315      	str	r3, [sp, #84]	; 0x54
 8006290:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8006294:	e59c      	b.n	8005dd0 <_vfprintf_r+0xea8>
 8006296:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006298:	e5d1      	b.n	8005e3e <_vfprintf_r+0xf16>
 800629a:	2b00      	cmp	r3, #0
 800629c:	dd2e      	ble.n	80062fc <_vfprintf_r+0x13d4>
 800629e:	f1bb 0f00 	cmp.w	fp, #0
 80062a2:	d107      	bne.n	80062b4 <_vfprintf_r+0x138c>
 80062a4:	9b02      	ldr	r3, [sp, #8]
 80062a6:	07de      	lsls	r6, r3, #31
 80062a8:	d404      	bmi.n	80062b4 <_vfprintf_r+0x138c>
 80062aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062ac:	9207      	str	r2, [sp, #28]
 80062ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80062b2:	e5df      	b.n	8005e74 <_vfprintf_r+0xf4c>
 80062b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062b6:	f10b 0601 	add.w	r6, fp, #1
 80062ba:	4433      	add	r3, r6
 80062bc:	9307      	str	r3, [sp, #28]
 80062be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80062c2:	e5d7      	b.n	8005e74 <_vfprintf_r+0xf4c>
 80062c4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80062c8:	2200      	movs	r2, #0
 80062ca:	2300      	movs	r3, #0
 80062cc:	f005 fe08 	bl	800bee0 <__aeabi_dcmpeq>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	f47f aef7 	bne.w	80060c4 <_vfprintf_r+0x119c>
 80062d6:	f1c7 0701 	rsb	r7, r7, #1
 80062da:	9719      	str	r7, [sp, #100]	; 0x64
 80062dc:	443e      	add	r6, r7
 80062de:	e59b      	b.n	8005e18 <_vfprintf_r+0xef0>
 80062e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062e2:	3301      	adds	r3, #1
 80062e4:	9307      	str	r3, [sp, #28]
 80062e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80062ea:	e5c3      	b.n	8005e74 <_vfprintf_r+0xf4c>
 80062ec:	3330      	adds	r3, #48	; 0x30
 80062ee:	2230      	movs	r2, #48	; 0x30
 80062f0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80062f4:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80062f8:	ab1c      	add	r3, sp, #112	; 0x70
 80062fa:	e796      	b.n	800622a <_vfprintf_r+0x1302>
 80062fc:	f1bb 0f00 	cmp.w	fp, #0
 8006300:	d11b      	bne.n	800633a <_vfprintf_r+0x1412>
 8006302:	9b02      	ldr	r3, [sp, #8]
 8006304:	07d8      	lsls	r0, r3, #31
 8006306:	d418      	bmi.n	800633a <_vfprintf_r+0x1412>
 8006308:	2301      	movs	r3, #1
 800630a:	9307      	str	r3, [sp, #28]
 800630c:	e5b2      	b.n	8005e74 <_vfprintf_r+0xf4c>
 800630e:	9b02      	ldr	r3, [sp, #8]
 8006310:	f013 0301 	ands.w	r3, r3, #1
 8006314:	d191      	bne.n	800623a <_vfprintf_r+0x1312>
 8006316:	930c      	str	r3, [sp, #48]	; 0x30
 8006318:	9b07      	ldr	r3, [sp, #28]
 800631a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800631e:	e5a9      	b.n	8005e74 <_vfprintf_r+0xf4c>
 8006320:	9d08      	ldr	r5, [sp, #32]
 8006322:	682e      	ldr	r6, [r5, #0]
 8006324:	4628      	mov	r0, r5
 8006326:	3004      	adds	r0, #4
 8006328:	2e00      	cmp	r6, #0
 800632a:	785d      	ldrb	r5, [r3, #1]
 800632c:	9008      	str	r0, [sp, #32]
 800632e:	f6be ae6c 	bge.w	800500a <_vfprintf_r+0xe2>
 8006332:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8006336:	f7fe be68 	b.w	800500a <_vfprintf_r+0xe2>
 800633a:	f10b 0302 	add.w	r3, fp, #2
 800633e:	9307      	str	r3, [sp, #28]
 8006340:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006344:	e596      	b.n	8005e74 <_vfprintf_r+0xf4c>
 8006346:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800634a:	e76e      	b.n	800622a <_vfprintf_r+0x1302>

0800634c <vfprintf>:
 800634c:	b430      	push	{r4, r5}
 800634e:	4c04      	ldr	r4, [pc, #16]	; (8006360 <vfprintf+0x14>)
 8006350:	460d      	mov	r5, r1
 8006352:	4613      	mov	r3, r2
 8006354:	4601      	mov	r1, r0
 8006356:	462a      	mov	r2, r5
 8006358:	6820      	ldr	r0, [r4, #0]
 800635a:	bc30      	pop	{r4, r5}
 800635c:	f7fe bde4 	b.w	8004f28 <_vfprintf_r>
 8006360:	200004b0 	.word	0x200004b0

08006364 <__sbprintf>:
 8006364:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8006368:	460c      	mov	r4, r1
 800636a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 800636e:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8006372:	69e7      	ldr	r7, [r4, #28]
 8006374:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8006376:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 800637a:	9119      	str	r1, [sp, #100]	; 0x64
 800637c:	ad1a      	add	r5, sp, #104	; 0x68
 800637e:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8006382:	f02e 0e02 	bic.w	lr, lr, #2
 8006386:	f04f 0c00 	mov.w	ip, #0
 800638a:	9707      	str	r7, [sp, #28]
 800638c:	4669      	mov	r1, sp
 800638e:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006390:	9500      	str	r5, [sp, #0]
 8006392:	9504      	str	r5, [sp, #16]
 8006394:	9602      	str	r6, [sp, #8]
 8006396:	9605      	str	r6, [sp, #20]
 8006398:	f8ad e00c 	strh.w	lr, [sp, #12]
 800639c:	f8ad 900e 	strh.w	r9, [sp, #14]
 80063a0:	9709      	str	r7, [sp, #36]	; 0x24
 80063a2:	f8cd c018 	str.w	ip, [sp, #24]
 80063a6:	4606      	mov	r6, r0
 80063a8:	f7fe fdbe 	bl	8004f28 <_vfprintf_r>
 80063ac:	1e05      	subs	r5, r0, #0
 80063ae:	db07      	blt.n	80063c0 <__sbprintf+0x5c>
 80063b0:	4630      	mov	r0, r6
 80063b2:	4669      	mov	r1, sp
 80063b4:	f001 f980 	bl	80076b8 <_fflush_r>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	bf18      	it	ne
 80063bc:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80063c0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80063c4:	065b      	lsls	r3, r3, #25
 80063c6:	d503      	bpl.n	80063d0 <__sbprintf+0x6c>
 80063c8:	89a3      	ldrh	r3, [r4, #12]
 80063ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ce:	81a3      	strh	r3, [r4, #12]
 80063d0:	4628      	mov	r0, r5
 80063d2:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 80063d6:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 80063da:	bf00      	nop

080063dc <__swsetup_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	4b2f      	ldr	r3, [pc, #188]	; (800649c <__swsetup_r+0xc0>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4605      	mov	r5, r0
 80063e4:	460c      	mov	r4, r1
 80063e6:	b113      	cbz	r3, 80063ee <__swsetup_r+0x12>
 80063e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ea:	2a00      	cmp	r2, #0
 80063ec:	d036      	beq.n	800645c <__swsetup_r+0x80>
 80063ee:	89a2      	ldrh	r2, [r4, #12]
 80063f0:	b293      	uxth	r3, r2
 80063f2:	0718      	lsls	r0, r3, #28
 80063f4:	d50c      	bpl.n	8006410 <__swsetup_r+0x34>
 80063f6:	6920      	ldr	r0, [r4, #16]
 80063f8:	b1a8      	cbz	r0, 8006426 <__swsetup_r+0x4a>
 80063fa:	f013 0201 	ands.w	r2, r3, #1
 80063fe:	d01e      	beq.n	800643e <__swsetup_r+0x62>
 8006400:	6963      	ldr	r3, [r4, #20]
 8006402:	2200      	movs	r2, #0
 8006404:	425b      	negs	r3, r3
 8006406:	61a3      	str	r3, [r4, #24]
 8006408:	60a2      	str	r2, [r4, #8]
 800640a:	b1f0      	cbz	r0, 800644a <__swsetup_r+0x6e>
 800640c:	2000      	movs	r0, #0
 800640e:	bd38      	pop	{r3, r4, r5, pc}
 8006410:	06d9      	lsls	r1, r3, #27
 8006412:	d53b      	bpl.n	800648c <__swsetup_r+0xb0>
 8006414:	0758      	lsls	r0, r3, #29
 8006416:	d425      	bmi.n	8006464 <__swsetup_r+0x88>
 8006418:	6920      	ldr	r0, [r4, #16]
 800641a:	f042 0308 	orr.w	r3, r2, #8
 800641e:	81a3      	strh	r3, [r4, #12]
 8006420:	b29b      	uxth	r3, r3
 8006422:	2800      	cmp	r0, #0
 8006424:	d1e9      	bne.n	80063fa <__swsetup_r+0x1e>
 8006426:	f403 7220 	and.w	r2, r3, #640	; 0x280
 800642a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800642e:	d0e4      	beq.n	80063fa <__swsetup_r+0x1e>
 8006430:	4628      	mov	r0, r5
 8006432:	4621      	mov	r1, r4
 8006434:	f001 fdcc 	bl	8007fd0 <__smakebuf_r>
 8006438:	89a3      	ldrh	r3, [r4, #12]
 800643a:	6920      	ldr	r0, [r4, #16]
 800643c:	e7dd      	b.n	80063fa <__swsetup_r+0x1e>
 800643e:	0799      	lsls	r1, r3, #30
 8006440:	bf58      	it	pl
 8006442:	6962      	ldrpl	r2, [r4, #20]
 8006444:	60a2      	str	r2, [r4, #8]
 8006446:	2800      	cmp	r0, #0
 8006448:	d1e0      	bne.n	800640c <__swsetup_r+0x30>
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	061a      	lsls	r2, r3, #24
 800644e:	d5de      	bpl.n	800640e <__swsetup_r+0x32>
 8006450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006454:	81a3      	strh	r3, [r4, #12]
 8006456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800645a:	bd38      	pop	{r3, r4, r5, pc}
 800645c:	4618      	mov	r0, r3
 800645e:	f001 fa3b 	bl	80078d8 <__sinit>
 8006462:	e7c4      	b.n	80063ee <__swsetup_r+0x12>
 8006464:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006466:	b149      	cbz	r1, 800647c <__swsetup_r+0xa0>
 8006468:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800646c:	4299      	cmp	r1, r3
 800646e:	d003      	beq.n	8006478 <__swsetup_r+0x9c>
 8006470:	4628      	mov	r0, r5
 8006472:	f001 fab7 	bl	80079e4 <_free_r>
 8006476:	89a2      	ldrh	r2, [r4, #12]
 8006478:	2300      	movs	r3, #0
 800647a:	6323      	str	r3, [r4, #48]	; 0x30
 800647c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8006480:	2300      	movs	r3, #0
 8006482:	6920      	ldr	r0, [r4, #16]
 8006484:	6063      	str	r3, [r4, #4]
 8006486:	b292      	uxth	r2, r2
 8006488:	6020      	str	r0, [r4, #0]
 800648a:	e7c6      	b.n	800641a <__swsetup_r+0x3e>
 800648c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006490:	2309      	movs	r3, #9
 8006492:	602b      	str	r3, [r5, #0]
 8006494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006498:	81a2      	strh	r2, [r4, #12]
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	200004b0 	.word	0x200004b0

080064a0 <register_fini>:
 80064a0:	4b02      	ldr	r3, [pc, #8]	; (80064ac <register_fini+0xc>)
 80064a2:	b113      	cbz	r3, 80064aa <register_fini+0xa>
 80064a4:	4802      	ldr	r0, [pc, #8]	; (80064b0 <register_fini+0x10>)
 80064a6:	f000 b86f 	b.w	8006588 <atexit>
 80064aa:	4770      	bx	lr
 80064ac:	00000000 	.word	0x00000000
 80064b0:	0800791d 	.word	0x0800791d

080064b4 <__call_exitprocs>:
 80064b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b8:	4b31      	ldr	r3, [pc, #196]	; (8006580 <__call_exitprocs+0xcc>)
 80064ba:	b083      	sub	sp, #12
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80064c4:	4681      	mov	r9, r0
 80064c6:	460e      	mov	r6, r1
 80064c8:	9301      	str	r3, [sp, #4]
 80064ca:	9b00      	ldr	r3, [sp, #0]
 80064cc:	f8d3 7148 	ldr.w	r7, [r3, #328]	; 0x148
 80064d0:	b327      	cbz	r7, 800651c <__call_exitprocs+0x68>
 80064d2:	f8dd a004 	ldr.w	sl, [sp, #4]
 80064d6:	687c      	ldr	r4, [r7, #4]
 80064d8:	1e65      	subs	r5, r4, #1
 80064da:	d40e      	bmi.n	80064fa <__call_exitprocs+0x46>
 80064dc:	3401      	adds	r4, #1
 80064de:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80064e2:	f04f 0800 	mov.w	r8, #0
 80064e6:	b1e6      	cbz	r6, 8006522 <__call_exitprocs+0x6e>
 80064e8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80064ec:	42b3      	cmp	r3, r6
 80064ee:	d018      	beq.n	8006522 <__call_exitprocs+0x6e>
 80064f0:	3d01      	subs	r5, #1
 80064f2:	1c6b      	adds	r3, r5, #1
 80064f4:	f1a4 0404 	sub.w	r4, r4, #4
 80064f8:	d1f5      	bne.n	80064e6 <__call_exitprocs+0x32>
 80064fa:	4b22      	ldr	r3, [pc, #136]	; (8006584 <__call_exitprocs+0xd0>)
 80064fc:	b173      	cbz	r3, 800651c <__call_exitprocs+0x68>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d136      	bne.n	8006572 <__call_exitprocs+0xbe>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d034      	beq.n	8006574 <__call_exitprocs+0xc0>
 800650a:	4638      	mov	r0, r7
 800650c:	f8ca 3000 	str.w	r3, [sl]
 8006510:	f3af 8000 	nop.w
 8006514:	f8da 7000 	ldr.w	r7, [sl]
 8006518:	2f00      	cmp	r7, #0
 800651a:	d1dc      	bne.n	80064d6 <__call_exitprocs+0x22>
 800651c:	b003      	add	sp, #12
 800651e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6822      	ldr	r2, [r4, #0]
 8006526:	3b01      	subs	r3, #1
 8006528:	42ab      	cmp	r3, r5
 800652a:	bf0c      	ite	eq
 800652c:	607d      	streq	r5, [r7, #4]
 800652e:	f8c4 8000 	strne.w	r8, [r4]
 8006532:	2a00      	cmp	r2, #0
 8006534:	d0dc      	beq.n	80064f0 <__call_exitprocs+0x3c>
 8006536:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800653a:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800653e:	2101      	movs	r1, #1
 8006540:	40a9      	lsls	r1, r5
 8006542:	4219      	tst	r1, r3
 8006544:	d108      	bne.n	8006558 <__call_exitprocs+0xa4>
 8006546:	4790      	blx	r2
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	455b      	cmp	r3, fp
 800654c:	d1bd      	bne.n	80064ca <__call_exitprocs+0x16>
 800654e:	f8da 3000 	ldr.w	r3, [sl]
 8006552:	42bb      	cmp	r3, r7
 8006554:	d0cc      	beq.n	80064f0 <__call_exitprocs+0x3c>
 8006556:	e7b8      	b.n	80064ca <__call_exitprocs+0x16>
 8006558:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800655c:	4219      	tst	r1, r3
 800655e:	d104      	bne.n	800656a <__call_exitprocs+0xb6>
 8006560:	4648      	mov	r0, r9
 8006562:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8006566:	4790      	blx	r2
 8006568:	e7ee      	b.n	8006548 <__call_exitprocs+0x94>
 800656a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800656e:	4790      	blx	r2
 8006570:	e7ea      	b.n	8006548 <__call_exitprocs+0x94>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	46ba      	mov	sl, r7
 8006576:	461f      	mov	r7, r3
 8006578:	2f00      	cmp	r7, #0
 800657a:	d1ac      	bne.n	80064d6 <__call_exitprocs+0x22>
 800657c:	e7ce      	b.n	800651c <__call_exitprocs+0x68>
 800657e:	bf00      	nop
 8006580:	0800c8f0 	.word	0x0800c8f0
 8006584:	00000000 	.word	0x00000000

08006588 <atexit>:
 8006588:	4601      	mov	r1, r0
 800658a:	2000      	movs	r0, #0
 800658c:	4602      	mov	r2, r0
 800658e:	4603      	mov	r3, r0
 8006590:	f004 bdb2 	b.w	800b0f8 <__register_exitproc>

08006594 <quorem>:
 8006594:	6902      	ldr	r2, [r0, #16]
 8006596:	690b      	ldr	r3, [r1, #16]
 8006598:	4293      	cmp	r3, r2
 800659a:	f300 808f 	bgt.w	80066bc <quorem+0x128>
 800659e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80065a6:	f101 0714 	add.w	r7, r1, #20
 80065aa:	f100 0b14 	add.w	fp, r0, #20
 80065ae:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 80065b2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 80065b6:	ea4f 0488 	mov.w	r4, r8, lsl #2
 80065ba:	b083      	sub	sp, #12
 80065bc:	3201      	adds	r2, #1
 80065be:	fbb3 f9f2 	udiv	r9, r3, r2
 80065c2:	eb0b 0304 	add.w	r3, fp, r4
 80065c6:	9400      	str	r4, [sp, #0]
 80065c8:	eb07 0a04 	add.w	sl, r7, r4
 80065cc:	9301      	str	r3, [sp, #4]
 80065ce:	f1b9 0f00 	cmp.w	r9, #0
 80065d2:	d03b      	beq.n	800664c <quorem+0xb8>
 80065d4:	2600      	movs	r6, #0
 80065d6:	4632      	mov	r2, r6
 80065d8:	46bc      	mov	ip, r7
 80065da:	46de      	mov	lr, fp
 80065dc:	4634      	mov	r4, r6
 80065de:	f85c 6b04 	ldr.w	r6, [ip], #4
 80065e2:	f8de 5000 	ldr.w	r5, [lr]
 80065e6:	b2b3      	uxth	r3, r6
 80065e8:	0c36      	lsrs	r6, r6, #16
 80065ea:	fb03 4409 	mla	r4, r3, r9, r4
 80065ee:	fb06 f609 	mul.w	r6, r6, r9
 80065f2:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 80065f6:	b2a3      	uxth	r3, r4
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	b2b4      	uxth	r4, r6
 80065fc:	fa13 f385 	uxtah	r3, r3, r5
 8006600:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 8006604:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006608:	b29b      	uxth	r3, r3
 800660a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800660e:	45e2      	cmp	sl, ip
 8006610:	ea4f 4224 	mov.w	r2, r4, asr #16
 8006614:	f84e 3b04 	str.w	r3, [lr], #4
 8006618:	ea4f 4416 	mov.w	r4, r6, lsr #16
 800661c:	d2df      	bcs.n	80065de <quorem+0x4a>
 800661e:	9b00      	ldr	r3, [sp, #0]
 8006620:	f85b 3003 	ldr.w	r3, [fp, r3]
 8006624:	b993      	cbnz	r3, 800664c <quorem+0xb8>
 8006626:	9c01      	ldr	r4, [sp, #4]
 8006628:	1f23      	subs	r3, r4, #4
 800662a:	459b      	cmp	fp, r3
 800662c:	d20c      	bcs.n	8006648 <quorem+0xb4>
 800662e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006632:	b94b      	cbnz	r3, 8006648 <quorem+0xb4>
 8006634:	f1a4 0308 	sub.w	r3, r4, #8
 8006638:	e002      	b.n	8006640 <quorem+0xac>
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	3b04      	subs	r3, #4
 800663e:	b91a      	cbnz	r2, 8006648 <quorem+0xb4>
 8006640:	459b      	cmp	fp, r3
 8006642:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006646:	d3f8      	bcc.n	800663a <quorem+0xa6>
 8006648:	f8c0 8010 	str.w	r8, [r0, #16]
 800664c:	4604      	mov	r4, r0
 800664e:	f002 fac9 	bl	8008be4 <__mcmp>
 8006652:	2800      	cmp	r0, #0
 8006654:	db2e      	blt.n	80066b4 <quorem+0x120>
 8006656:	f109 0901 	add.w	r9, r9, #1
 800665a:	465d      	mov	r5, fp
 800665c:	2300      	movs	r3, #0
 800665e:	f857 1b04 	ldr.w	r1, [r7], #4
 8006662:	6828      	ldr	r0, [r5, #0]
 8006664:	b28a      	uxth	r2, r1
 8006666:	1a9a      	subs	r2, r3, r2
 8006668:	0c09      	lsrs	r1, r1, #16
 800666a:	fa12 f280 	uxtah	r2, r2, r0
 800666e:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 8006672:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8006676:	b291      	uxth	r1, r2
 8006678:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800667c:	45ba      	cmp	sl, r7
 800667e:	f845 1b04 	str.w	r1, [r5], #4
 8006682:	ea4f 4323 	mov.w	r3, r3, asr #16
 8006686:	d2ea      	bcs.n	800665e <quorem+0xca>
 8006688:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 800668c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8006690:	b982      	cbnz	r2, 80066b4 <quorem+0x120>
 8006692:	1f1a      	subs	r2, r3, #4
 8006694:	4593      	cmp	fp, r2
 8006696:	d20b      	bcs.n	80066b0 <quorem+0x11c>
 8006698:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800669c:	b942      	cbnz	r2, 80066b0 <quorem+0x11c>
 800669e:	3b08      	subs	r3, #8
 80066a0:	e002      	b.n	80066a8 <quorem+0x114>
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	3b04      	subs	r3, #4
 80066a6:	b91a      	cbnz	r2, 80066b0 <quorem+0x11c>
 80066a8:	459b      	cmp	fp, r3
 80066aa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80066ae:	d3f8      	bcc.n	80066a2 <quorem+0x10e>
 80066b0:	f8c4 8010 	str.w	r8, [r4, #16]
 80066b4:	4648      	mov	r0, r9
 80066b6:	b003      	add	sp, #12
 80066b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066bc:	2000      	movs	r0, #0
 80066be:	4770      	bx	lr

080066c0 <_dtoa_r>:
 80066c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c4:	b099      	sub	sp, #100	; 0x64
 80066c6:	4604      	mov	r4, r0
 80066c8:	9103      	str	r1, [sp, #12]
 80066ca:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80066cc:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80066ce:	9304      	str	r3, [sp, #16]
 80066d0:	4692      	mov	sl, r2
 80066d2:	ed8d 0b00 	vstr	d0, [sp]
 80066d6:	b141      	cbz	r1, 80066ea <_dtoa_r+0x2a>
 80066d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80066da:	604a      	str	r2, [r1, #4]
 80066dc:	2301      	movs	r3, #1
 80066de:	4093      	lsls	r3, r2
 80066e0:	608b      	str	r3, [r1, #8]
 80066e2:	f002 f84f 	bl	8008784 <_Bfree>
 80066e6:	2300      	movs	r3, #0
 80066e8:	6423      	str	r3, [r4, #64]	; 0x40
 80066ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	4699      	mov	r9, r3
 80066f2:	db36      	blt.n	8006762 <_dtoa_r+0xa2>
 80066f4:	2300      	movs	r3, #0
 80066f6:	602b      	str	r3, [r5, #0]
 80066f8:	4ba5      	ldr	r3, [pc, #660]	; (8006990 <_dtoa_r+0x2d0>)
 80066fa:	461a      	mov	r2, r3
 80066fc:	ea09 0303 	and.w	r3, r9, r3
 8006700:	4293      	cmp	r3, r2
 8006702:	d017      	beq.n	8006734 <_dtoa_r+0x74>
 8006704:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006708:	2200      	movs	r2, #0
 800670a:	2300      	movs	r3, #0
 800670c:	4630      	mov	r0, r6
 800670e:	4639      	mov	r1, r7
 8006710:	f005 fbe6 	bl	800bee0 <__aeabi_dcmpeq>
 8006714:	4680      	mov	r8, r0
 8006716:	2800      	cmp	r0, #0
 8006718:	d02b      	beq.n	8006772 <_dtoa_r+0xb2>
 800671a:	9a04      	ldr	r2, [sp, #16]
 800671c:	2301      	movs	r3, #1
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 80cc 	beq.w	80068c0 <_dtoa_r+0x200>
 8006728:	489a      	ldr	r0, [pc, #616]	; (8006994 <_dtoa_r+0x2d4>)
 800672a:	6018      	str	r0, [r3, #0]
 800672c:	3801      	subs	r0, #1
 800672e:	b019      	add	sp, #100	; 0x64
 8006730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006734:	9a04      	ldr	r2, [sp, #16]
 8006736:	f242 730f 	movw	r3, #9999	; 0x270f
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	9b00      	ldr	r3, [sp, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 80a7 	beq.w	8006892 <_dtoa_r+0x1d2>
 8006744:	4894      	ldr	r0, [pc, #592]	; (8006998 <_dtoa_r+0x2d8>)
 8006746:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006748:	2b00      	cmp	r3, #0
 800674a:	d0f0      	beq.n	800672e <_dtoa_r+0x6e>
 800674c:	78c3      	ldrb	r3, [r0, #3]
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 80b8 	beq.w	80068c4 <_dtoa_r+0x204>
 8006754:	f100 0308 	add.w	r3, r0, #8
 8006758:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800675a:	6013      	str	r3, [r2, #0]
 800675c:	b019      	add	sp, #100	; 0x64
 800675e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006762:	9a01      	ldr	r2, [sp, #4]
 8006764:	2301      	movs	r3, #1
 8006766:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 800676a:	602b      	str	r3, [r5, #0]
 800676c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006770:	e7c2      	b.n	80066f8 <_dtoa_r+0x38>
 8006772:	4620      	mov	r0, r4
 8006774:	ec47 6b10 	vmov	d0, r6, r7
 8006778:	a917      	add	r1, sp, #92	; 0x5c
 800677a:	aa16      	add	r2, sp, #88	; 0x58
 800677c:	f002 fb4a 	bl	8008e14 <__d2b>
 8006780:	ea5f 5519 	movs.w	r5, r9, lsr #20
 8006784:	4683      	mov	fp, r0
 8006786:	f040 808d 	bne.w	80068a4 <_dtoa_r+0x1e4>
 800678a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800678e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8006790:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8006794:	4445      	add	r5, r8
 8006796:	429d      	cmp	r5, r3
 8006798:	f2c0 829e 	blt.w	8006cd8 <_dtoa_r+0x618>
 800679c:	4a7f      	ldr	r2, [pc, #508]	; (800699c <_dtoa_r+0x2dc>)
 800679e:	1b52      	subs	r2, r2, r5
 80067a0:	fa09 f902 	lsl.w	r9, r9, r2
 80067a4:	9a00      	ldr	r2, [sp, #0]
 80067a6:	f205 4312 	addw	r3, r5, #1042	; 0x412
 80067aa:	fa22 f003 	lsr.w	r0, r2, r3
 80067ae:	ea49 0000 	orr.w	r0, r9, r0
 80067b2:	f005 f8b7 	bl	800b924 <__aeabi_ui2d>
 80067b6:	2301      	movs	r3, #1
 80067b8:	3d01      	subs	r5, #1
 80067ba:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80067be:	930f      	str	r3, [sp, #60]	; 0x3c
 80067c0:	2200      	movs	r2, #0
 80067c2:	4b77      	ldr	r3, [pc, #476]	; (80069a0 <_dtoa_r+0x2e0>)
 80067c4:	f004 ff70 	bl	800b6a8 <__aeabi_dsub>
 80067c8:	a36b      	add	r3, pc, #428	; (adr r3, 8006978 <_dtoa_r+0x2b8>)
 80067ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ce:	f005 f91f 	bl	800ba10 <__aeabi_dmul>
 80067d2:	a36b      	add	r3, pc, #428	; (adr r3, 8006980 <_dtoa_r+0x2c0>)
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	f004 ff68 	bl	800b6ac <__adddf3>
 80067dc:	4606      	mov	r6, r0
 80067de:	4628      	mov	r0, r5
 80067e0:	460f      	mov	r7, r1
 80067e2:	f005 f8af 	bl	800b944 <__aeabi_i2d>
 80067e6:	a368      	add	r3, pc, #416	; (adr r3, 8006988 <_dtoa_r+0x2c8>)
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f005 f910 	bl	800ba10 <__aeabi_dmul>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	4630      	mov	r0, r6
 80067f6:	4639      	mov	r1, r7
 80067f8:	f004 ff58 	bl	800b6ac <__adddf3>
 80067fc:	4606      	mov	r6, r0
 80067fe:	460f      	mov	r7, r1
 8006800:	f005 fba0 	bl	800bf44 <__aeabi_d2iz>
 8006804:	4639      	mov	r1, r7
 8006806:	9005      	str	r0, [sp, #20]
 8006808:	2200      	movs	r2, #0
 800680a:	4630      	mov	r0, r6
 800680c:	2300      	movs	r3, #0
 800680e:	f005 fb71 	bl	800bef4 <__aeabi_dcmplt>
 8006812:	2800      	cmp	r0, #0
 8006814:	f040 81ab 	bne.w	8006b6e <_dtoa_r+0x4ae>
 8006818:	9b05      	ldr	r3, [sp, #20]
 800681a:	2b16      	cmp	r3, #22
 800681c:	f200 81a4 	bhi.w	8006b68 <_dtoa_r+0x4a8>
 8006820:	9a05      	ldr	r2, [sp, #20]
 8006822:	4b60      	ldr	r3, [pc, #384]	; (80069a4 <_dtoa_r+0x2e4>)
 8006824:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006828:	e9d3 0100 	ldrd	r0, r1, [r3]
 800682c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006830:	f005 fb7e 	bl	800bf30 <__aeabi_dcmpgt>
 8006834:	2800      	cmp	r0, #0
 8006836:	f000 8255 	beq.w	8006ce4 <_dtoa_r+0x624>
 800683a:	9b05      	ldr	r3, [sp, #20]
 800683c:	3b01      	subs	r3, #1
 800683e:	9305      	str	r3, [sp, #20]
 8006840:	2300      	movs	r3, #0
 8006842:	930d      	str	r3, [sp, #52]	; 0x34
 8006844:	ebc5 0508 	rsb	r5, r5, r8
 8006848:	1e6b      	subs	r3, r5, #1
 800684a:	9306      	str	r3, [sp, #24]
 800684c:	f100 81a6 	bmi.w	8006b9c <_dtoa_r+0x4dc>
 8006850:	2300      	movs	r3, #0
 8006852:	9307      	str	r3, [sp, #28]
 8006854:	9b05      	ldr	r3, [sp, #20]
 8006856:	2b00      	cmp	r3, #0
 8006858:	f2c0 8197 	blt.w	8006b8a <_dtoa_r+0x4ca>
 800685c:	9a06      	ldr	r2, [sp, #24]
 800685e:	930c      	str	r3, [sp, #48]	; 0x30
 8006860:	4611      	mov	r1, r2
 8006862:	4419      	add	r1, r3
 8006864:	2300      	movs	r3, #0
 8006866:	9106      	str	r1, [sp, #24]
 8006868:	930a      	str	r3, [sp, #40]	; 0x28
 800686a:	9b03      	ldr	r3, [sp, #12]
 800686c:	2b09      	cmp	r3, #9
 800686e:	d82b      	bhi.n	80068c8 <_dtoa_r+0x208>
 8006870:	2b05      	cmp	r3, #5
 8006872:	f340 8673 	ble.w	800755c <_dtoa_r+0xe9c>
 8006876:	3b04      	subs	r3, #4
 8006878:	9303      	str	r3, [sp, #12]
 800687a:	2700      	movs	r7, #0
 800687c:	9b03      	ldr	r3, [sp, #12]
 800687e:	3b02      	subs	r3, #2
 8006880:	2b03      	cmp	r3, #3
 8006882:	f200 8651 	bhi.w	8007528 <_dtoa_r+0xe68>
 8006886:	e8df f013 	tbh	[pc, r3, lsl #1]
 800688a:	03d1      	.short	0x03d1
 800688c:	02b603c4 	.word	0x02b603c4
 8006890:	0666      	.short	0x0666
 8006892:	4b41      	ldr	r3, [pc, #260]	; (8006998 <_dtoa_r+0x2d8>)
 8006894:	4a44      	ldr	r2, [pc, #272]	; (80069a8 <_dtoa_r+0x2e8>)
 8006896:	f3c9 0013 	ubfx	r0, r9, #0, #20
 800689a:	2800      	cmp	r0, #0
 800689c:	bf14      	ite	ne
 800689e:	4618      	movne	r0, r3
 80068a0:	4610      	moveq	r0, r2
 80068a2:	e750      	b.n	8006746 <_dtoa_r+0x86>
 80068a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80068a8:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80068ac:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80068b0:	4630      	mov	r0, r6
 80068b2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80068b6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80068ba:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80068be:	e77f      	b.n	80067c0 <_dtoa_r+0x100>
 80068c0:	483a      	ldr	r0, [pc, #232]	; (80069ac <_dtoa_r+0x2ec>)
 80068c2:	e734      	b.n	800672e <_dtoa_r+0x6e>
 80068c4:	1cc3      	adds	r3, r0, #3
 80068c6:	e747      	b.n	8006758 <_dtoa_r+0x98>
 80068c8:	2100      	movs	r1, #0
 80068ca:	6461      	str	r1, [r4, #68]	; 0x44
 80068cc:	4620      	mov	r0, r4
 80068ce:	468a      	mov	sl, r1
 80068d0:	9103      	str	r1, [sp, #12]
 80068d2:	f001 ff31 	bl	8008738 <_Balloc>
 80068d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068da:	9308      	str	r3, [sp, #32]
 80068dc:	930e      	str	r3, [sp, #56]	; 0x38
 80068de:	2301      	movs	r3, #1
 80068e0:	9009      	str	r0, [sp, #36]	; 0x24
 80068e2:	6420      	str	r0, [r4, #64]	; 0x40
 80068e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80068e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f2c0 80d3 	blt.w	8006a94 <_dtoa_r+0x3d4>
 80068ee:	9a05      	ldr	r2, [sp, #20]
 80068f0:	2a0e      	cmp	r2, #14
 80068f2:	f300 80cf 	bgt.w	8006a94 <_dtoa_r+0x3d4>
 80068f6:	4b2b      	ldr	r3, [pc, #172]	; (80069a4 <_dtoa_r+0x2e4>)
 80068f8:	f1ba 0f00 	cmp.w	sl, #0
 80068fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006900:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006904:	f2c0 8395 	blt.w	8007032 <_dtoa_r+0x972>
 8006908:	e9dd 6700 	ldrd	r6, r7, [sp]
 800690c:	4642      	mov	r2, r8
 800690e:	464b      	mov	r3, r9
 8006910:	4630      	mov	r0, r6
 8006912:	4639      	mov	r1, r7
 8006914:	f005 f9a6 	bl	800bc64 <__aeabi_ddiv>
 8006918:	f005 fb14 	bl	800bf44 <__aeabi_d2iz>
 800691c:	4682      	mov	sl, r0
 800691e:	f005 f811 	bl	800b944 <__aeabi_i2d>
 8006922:	4642      	mov	r2, r8
 8006924:	464b      	mov	r3, r9
 8006926:	f005 f873 	bl	800ba10 <__aeabi_dmul>
 800692a:	460b      	mov	r3, r1
 800692c:	4602      	mov	r2, r0
 800692e:	4639      	mov	r1, r7
 8006930:	4630      	mov	r0, r6
 8006932:	f004 feb9 	bl	800b6a8 <__aeabi_dsub>
 8006936:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006938:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 800693c:	702b      	strb	r3, [r5, #0]
 800693e:	9b08      	ldr	r3, [sp, #32]
 8006940:	2b01      	cmp	r3, #1
 8006942:	4606      	mov	r6, r0
 8006944:	460f      	mov	r7, r1
 8006946:	f105 0501 	add.w	r5, r5, #1
 800694a:	d063      	beq.n	8006a14 <_dtoa_r+0x354>
 800694c:	2200      	movs	r2, #0
 800694e:	4b18      	ldr	r3, [pc, #96]	; (80069b0 <_dtoa_r+0x2f0>)
 8006950:	f005 f85e 	bl	800ba10 <__aeabi_dmul>
 8006954:	2200      	movs	r2, #0
 8006956:	2300      	movs	r3, #0
 8006958:	4606      	mov	r6, r0
 800695a:	460f      	mov	r7, r1
 800695c:	f005 fac0 	bl	800bee0 <__aeabi_dcmpeq>
 8006960:	2800      	cmp	r0, #0
 8006962:	f040 8084 	bne.w	8006a6e <_dtoa_r+0x3ae>
 8006966:	f8cd b000 	str.w	fp, [sp]
 800696a:	9403      	str	r4, [sp, #12]
 800696c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8006970:	9c08      	ldr	r4, [sp, #32]
 8006972:	e02a      	b.n	80069ca <_dtoa_r+0x30a>
 8006974:	f3af 8000 	nop.w
 8006978:	636f4361 	.word	0x636f4361
 800697c:	3fd287a7 	.word	0x3fd287a7
 8006980:	8b60c8b3 	.word	0x8b60c8b3
 8006984:	3fc68a28 	.word	0x3fc68a28
 8006988:	509f79fb 	.word	0x509f79fb
 800698c:	3fd34413 	.word	0x3fd34413
 8006990:	7ff00000 	.word	0x7ff00000
 8006994:	0800c955 	.word	0x0800c955
 8006998:	0800c984 	.word	0x0800c984
 800699c:	fffffc0e 	.word	0xfffffc0e
 80069a0:	3ff80000 	.word	0x3ff80000
 80069a4:	0800c998 	.word	0x0800c998
 80069a8:	0800c978 	.word	0x0800c978
 80069ac:	0800c954 	.word	0x0800c954
 80069b0:	40240000 	.word	0x40240000
 80069b4:	f005 f82c 	bl	800ba10 <__aeabi_dmul>
 80069b8:	2200      	movs	r2, #0
 80069ba:	2300      	movs	r3, #0
 80069bc:	4606      	mov	r6, r0
 80069be:	460f      	mov	r7, r1
 80069c0:	f005 fa8e 	bl	800bee0 <__aeabi_dcmpeq>
 80069c4:	2800      	cmp	r0, #0
 80069c6:	f040 83e4 	bne.w	8007192 <_dtoa_r+0xad2>
 80069ca:	4642      	mov	r2, r8
 80069cc:	464b      	mov	r3, r9
 80069ce:	4630      	mov	r0, r6
 80069d0:	4639      	mov	r1, r7
 80069d2:	f005 f947 	bl	800bc64 <__aeabi_ddiv>
 80069d6:	f005 fab5 	bl	800bf44 <__aeabi_d2iz>
 80069da:	4682      	mov	sl, r0
 80069dc:	f004 ffb2 	bl	800b944 <__aeabi_i2d>
 80069e0:	4642      	mov	r2, r8
 80069e2:	464b      	mov	r3, r9
 80069e4:	f005 f814 	bl	800ba10 <__aeabi_dmul>
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	4630      	mov	r0, r6
 80069ee:	4639      	mov	r1, r7
 80069f0:	f004 fe5a 	bl	800b6a8 <__aeabi_dsub>
 80069f4:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 80069f8:	f805 eb01 	strb.w	lr, [r5], #1
 80069fc:	ebcb 0e05 	rsb	lr, fp, r5
 8006a00:	4574      	cmp	r4, lr
 8006a02:	4606      	mov	r6, r0
 8006a04:	460f      	mov	r7, r1
 8006a06:	f04f 0200 	mov.w	r2, #0
 8006a0a:	4bb7      	ldr	r3, [pc, #732]	; (8006ce8 <_dtoa_r+0x628>)
 8006a0c:	d1d2      	bne.n	80069b4 <_dtoa_r+0x2f4>
 8006a0e:	f8dd b000 	ldr.w	fp, [sp]
 8006a12:	9c03      	ldr	r4, [sp, #12]
 8006a14:	4632      	mov	r2, r6
 8006a16:	463b      	mov	r3, r7
 8006a18:	4630      	mov	r0, r6
 8006a1a:	4639      	mov	r1, r7
 8006a1c:	f004 fe46 	bl	800b6ac <__adddf3>
 8006a20:	4606      	mov	r6, r0
 8006a22:	460f      	mov	r7, r1
 8006a24:	4640      	mov	r0, r8
 8006a26:	4649      	mov	r1, r9
 8006a28:	4632      	mov	r2, r6
 8006a2a:	463b      	mov	r3, r7
 8006a2c:	f005 fa62 	bl	800bef4 <__aeabi_dcmplt>
 8006a30:	b948      	cbnz	r0, 8006a46 <_dtoa_r+0x386>
 8006a32:	4640      	mov	r0, r8
 8006a34:	4649      	mov	r1, r9
 8006a36:	4632      	mov	r2, r6
 8006a38:	463b      	mov	r3, r7
 8006a3a:	f005 fa51 	bl	800bee0 <__aeabi_dcmpeq>
 8006a3e:	b1b0      	cbz	r0, 8006a6e <_dtoa_r+0x3ae>
 8006a40:	f01a 0f01 	tst.w	sl, #1
 8006a44:	d013      	beq.n	8006a6e <_dtoa_r+0x3ae>
 8006a46:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8006a4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a4c:	1e6b      	subs	r3, r5, #1
 8006a4e:	e004      	b.n	8006a5a <_dtoa_r+0x39a>
 8006a50:	428b      	cmp	r3, r1
 8006a52:	f000 8448 	beq.w	80072e6 <_dtoa_r+0xc26>
 8006a56:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 8006a5a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a5e:	f103 0501 	add.w	r5, r3, #1
 8006a62:	461a      	mov	r2, r3
 8006a64:	d0f4      	beq.n	8006a50 <_dtoa_r+0x390>
 8006a66:	f108 0301 	add.w	r3, r8, #1
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	7013      	strb	r3, [r2, #0]
 8006a6e:	4620      	mov	r0, r4
 8006a70:	4659      	mov	r1, fp
 8006a72:	f001 fe87 	bl	8008784 <_Bfree>
 8006a76:	2200      	movs	r2, #0
 8006a78:	9b05      	ldr	r3, [sp, #20]
 8006a7a:	702a      	strb	r2, [r5, #0]
 8006a7c:	9a04      	ldr	r2, [sp, #16]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 834b 	beq.w	8007120 <_dtoa_r+0xa60>
 8006a8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a8c:	601d      	str	r5, [r3, #0]
 8006a8e:	b019      	add	sp, #100	; 0x64
 8006a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a96:	2a00      	cmp	r2, #0
 8006a98:	f000 8085 	beq.w	8006ba6 <_dtoa_r+0x4e6>
 8006a9c:	9a03      	ldr	r2, [sp, #12]
 8006a9e:	2a01      	cmp	r2, #1
 8006aa0:	f340 830a 	ble.w	80070b8 <_dtoa_r+0x9f8>
 8006aa4:	9b08      	ldr	r3, [sp, #32]
 8006aa6:	1e5f      	subs	r7, r3, #1
 8006aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aaa:	42bb      	cmp	r3, r7
 8006aac:	f2c0 83a6 	blt.w	80071fc <_dtoa_r+0xb3c>
 8006ab0:	1bdf      	subs	r7, r3, r7
 8006ab2:	9b08      	ldr	r3, [sp, #32]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f2c0 84a4 	blt.w	8007402 <_dtoa_r+0xd42>
 8006aba:	9d07      	ldr	r5, [sp, #28]
 8006abc:	9b08      	ldr	r3, [sp, #32]
 8006abe:	9a07      	ldr	r2, [sp, #28]
 8006ac0:	441a      	add	r2, r3
 8006ac2:	9207      	str	r2, [sp, #28]
 8006ac4:	9a06      	ldr	r2, [sp, #24]
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	441a      	add	r2, r3
 8006aca:	2101      	movs	r1, #1
 8006acc:	9206      	str	r2, [sp, #24]
 8006ace:	f001 ff3f 	bl	8008950 <__i2b>
 8006ad2:	4606      	mov	r6, r0
 8006ad4:	b165      	cbz	r5, 8006af0 <_dtoa_r+0x430>
 8006ad6:	9906      	ldr	r1, [sp, #24]
 8006ad8:	2900      	cmp	r1, #0
 8006ada:	460b      	mov	r3, r1
 8006adc:	dd08      	ble.n	8006af0 <_dtoa_r+0x430>
 8006ade:	42a9      	cmp	r1, r5
 8006ae0:	9a07      	ldr	r2, [sp, #28]
 8006ae2:	bfa8      	it	ge
 8006ae4:	462b      	movge	r3, r5
 8006ae6:	1ad2      	subs	r2, r2, r3
 8006ae8:	1aed      	subs	r5, r5, r3
 8006aea:	1acb      	subs	r3, r1, r3
 8006aec:	9207      	str	r2, [sp, #28]
 8006aee:	9306      	str	r3, [sp, #24]
 8006af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	dd1a      	ble.n	8006b2c <_dtoa_r+0x46c>
 8006af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 8378 	beq.w	80071ee <_dtoa_r+0xb2e>
 8006afe:	2f00      	cmp	r7, #0
 8006b00:	dd10      	ble.n	8006b24 <_dtoa_r+0x464>
 8006b02:	4631      	mov	r1, r6
 8006b04:	463a      	mov	r2, r7
 8006b06:	4620      	mov	r0, r4
 8006b08:	f001 ffc6 	bl	8008a98 <__pow5mult>
 8006b0c:	4606      	mov	r6, r0
 8006b0e:	465a      	mov	r2, fp
 8006b10:	4631      	mov	r1, r6
 8006b12:	4620      	mov	r0, r4
 8006b14:	f001 ff26 	bl	8008964 <__multiply>
 8006b18:	4659      	mov	r1, fp
 8006b1a:	4680      	mov	r8, r0
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f001 fe31 	bl	8008784 <_Bfree>
 8006b22:	46c3      	mov	fp, r8
 8006b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b26:	1bda      	subs	r2, r3, r7
 8006b28:	f040 82a5 	bne.w	8007076 <_dtoa_r+0x9b6>
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	2101      	movs	r1, #1
 8006b30:	f001 ff0e 	bl	8008950 <__i2b>
 8006b34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	4680      	mov	r8, r0
 8006b3a:	dd38      	ble.n	8006bae <_dtoa_r+0x4ee>
 8006b3c:	4601      	mov	r1, r0
 8006b3e:	461a      	mov	r2, r3
 8006b40:	4620      	mov	r0, r4
 8006b42:	f001 ffa9 	bl	8008a98 <__pow5mult>
 8006b46:	9b03      	ldr	r3, [sp, #12]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	4680      	mov	r8, r0
 8006b4c:	f340 8299 	ble.w	8007082 <_dtoa_r+0x9c2>
 8006b50:	f04f 0900 	mov.w	r9, #0
 8006b54:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006b58:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8006b5c:	6918      	ldr	r0, [r3, #16]
 8006b5e:	f001 fea9 	bl	80088b4 <__hi0bits>
 8006b62:	f1c0 0020 	rsb	r0, r0, #32
 8006b66:	e02c      	b.n	8006bc2 <_dtoa_r+0x502>
 8006b68:	2301      	movs	r3, #1
 8006b6a:	930d      	str	r3, [sp, #52]	; 0x34
 8006b6c:	e66a      	b.n	8006844 <_dtoa_r+0x184>
 8006b6e:	9805      	ldr	r0, [sp, #20]
 8006b70:	f004 fee8 	bl	800b944 <__aeabi_i2d>
 8006b74:	4632      	mov	r2, r6
 8006b76:	463b      	mov	r3, r7
 8006b78:	f005 f9b2 	bl	800bee0 <__aeabi_dcmpeq>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	f47f ae4b 	bne.w	8006818 <_dtoa_r+0x158>
 8006b82:	9b05      	ldr	r3, [sp, #20]
 8006b84:	3b01      	subs	r3, #1
 8006b86:	9305      	str	r3, [sp, #20]
 8006b88:	e646      	b.n	8006818 <_dtoa_r+0x158>
 8006b8a:	9a07      	ldr	r2, [sp, #28]
 8006b8c:	9b05      	ldr	r3, [sp, #20]
 8006b8e:	1ad2      	subs	r2, r2, r3
 8006b90:	425b      	negs	r3, r3
 8006b92:	930a      	str	r3, [sp, #40]	; 0x28
 8006b94:	2300      	movs	r3, #0
 8006b96:	9207      	str	r2, [sp, #28]
 8006b98:	930c      	str	r3, [sp, #48]	; 0x30
 8006b9a:	e666      	b.n	800686a <_dtoa_r+0x1aa>
 8006b9c:	425b      	negs	r3, r3
 8006b9e:	9307      	str	r3, [sp, #28]
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	9306      	str	r3, [sp, #24]
 8006ba4:	e656      	b.n	8006854 <_dtoa_r+0x194>
 8006ba6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006ba8:	9d07      	ldr	r5, [sp, #28]
 8006baa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006bac:	e792      	b.n	8006ad4 <_dtoa_r+0x414>
 8006bae:	9b03      	ldr	r3, [sp, #12]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	f340 82b8 	ble.w	8007126 <_dtoa_r+0xa66>
 8006bb6:	f04f 0900 	mov.w	r9, #0
 8006bba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1c9      	bne.n	8006b54 <_dtoa_r+0x494>
 8006bc0:	2001      	movs	r0, #1
 8006bc2:	9b06      	ldr	r3, [sp, #24]
 8006bc4:	4418      	add	r0, r3
 8006bc6:	f010 001f 	ands.w	r0, r0, #31
 8006bca:	f000 8083 	beq.w	8006cd4 <_dtoa_r+0x614>
 8006bce:	f1c0 0320 	rsb	r3, r0, #32
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	f340 84b9 	ble.w	800754a <_dtoa_r+0xe8a>
 8006bd8:	f1c0 001c 	rsb	r0, r0, #28
 8006bdc:	9b07      	ldr	r3, [sp, #28]
 8006bde:	4403      	add	r3, r0
 8006be0:	9307      	str	r3, [sp, #28]
 8006be2:	9b06      	ldr	r3, [sp, #24]
 8006be4:	4403      	add	r3, r0
 8006be6:	4405      	add	r5, r0
 8006be8:	9306      	str	r3, [sp, #24]
 8006bea:	9b07      	ldr	r3, [sp, #28]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	dd05      	ble.n	8006bfc <_dtoa_r+0x53c>
 8006bf0:	4659      	mov	r1, fp
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	f001 ff9f 	bl	8008b38 <__lshift>
 8006bfa:	4683      	mov	fp, r0
 8006bfc:	9b06      	ldr	r3, [sp, #24]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	dd05      	ble.n	8006c0e <_dtoa_r+0x54e>
 8006c02:	4641      	mov	r1, r8
 8006c04:	461a      	mov	r2, r3
 8006c06:	4620      	mov	r0, r4
 8006c08:	f001 ff96 	bl	8008b38 <__lshift>
 8006c0c:	4680      	mov	r8, r0
 8006c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f040 826a 	bne.w	80070ea <_dtoa_r+0xa2a>
 8006c16:	9b08      	ldr	r3, [sp, #32]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f340 8297 	ble.w	800714c <_dtoa_r+0xa8c>
 8006c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d171      	bne.n	8006d08 <_dtoa_r+0x648>
 8006c24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006c28:	9f08      	ldr	r7, [sp, #32]
 8006c2a:	464d      	mov	r5, r9
 8006c2c:	e002      	b.n	8006c34 <_dtoa_r+0x574>
 8006c2e:	f001 fdb3 	bl	8008798 <__multadd>
 8006c32:	4683      	mov	fp, r0
 8006c34:	4641      	mov	r1, r8
 8006c36:	4658      	mov	r0, fp
 8006c38:	f7ff fcac 	bl	8006594 <quorem>
 8006c3c:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8006c40:	f805 cb01 	strb.w	ip, [r5], #1
 8006c44:	ebc9 0305 	rsb	r3, r9, r5
 8006c48:	42bb      	cmp	r3, r7
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	4659      	mov	r1, fp
 8006c4e:	f04f 020a 	mov.w	r2, #10
 8006c52:	f04f 0300 	mov.w	r3, #0
 8006c56:	dbea      	blt.n	8006c2e <_dtoa_r+0x56e>
 8006c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c5a:	9a08      	ldr	r2, [sp, #32]
 8006c5c:	2a01      	cmp	r2, #1
 8006c5e:	bfac      	ite	ge
 8006c60:	189b      	addge	r3, r3, r2
 8006c62:	3301      	addlt	r3, #1
 8006c64:	461d      	mov	r5, r3
 8006c66:	f04f 0a00 	mov.w	sl, #0
 8006c6a:	4659      	mov	r1, fp
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f8cd c000 	str.w	ip, [sp]
 8006c74:	f001 ff60 	bl	8008b38 <__lshift>
 8006c78:	4641      	mov	r1, r8
 8006c7a:	4683      	mov	fp, r0
 8006c7c:	f001 ffb2 	bl	8008be4 <__mcmp>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	f8dd c000 	ldr.w	ip, [sp]
 8006c86:	f340 82ef 	ble.w	8007268 <_dtoa_r+0xba8>
 8006c8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006c8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c90:	1e6b      	subs	r3, r5, #1
 8006c92:	e004      	b.n	8006c9e <_dtoa_r+0x5de>
 8006c94:	428b      	cmp	r3, r1
 8006c96:	f000 8275 	beq.w	8007184 <_dtoa_r+0xac4>
 8006c9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c9e:	2a39      	cmp	r2, #57	; 0x39
 8006ca0:	f103 0501 	add.w	r5, r3, #1
 8006ca4:	d0f6      	beq.n	8006c94 <_dtoa_r+0x5d4>
 8006ca6:	3201      	adds	r2, #1
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	4641      	mov	r1, r8
 8006cac:	4620      	mov	r0, r4
 8006cae:	f001 fd69 	bl	8008784 <_Bfree>
 8006cb2:	2e00      	cmp	r6, #0
 8006cb4:	f43f aedb 	beq.w	8006a6e <_dtoa_r+0x3ae>
 8006cb8:	f1ba 0f00 	cmp.w	sl, #0
 8006cbc:	d005      	beq.n	8006cca <_dtoa_r+0x60a>
 8006cbe:	45b2      	cmp	sl, r6
 8006cc0:	d003      	beq.n	8006cca <_dtoa_r+0x60a>
 8006cc2:	4651      	mov	r1, sl
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f001 fd5d 	bl	8008784 <_Bfree>
 8006cca:	4631      	mov	r1, r6
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f001 fd59 	bl	8008784 <_Bfree>
 8006cd2:	e6cc      	b.n	8006a6e <_dtoa_r+0x3ae>
 8006cd4:	201c      	movs	r0, #28
 8006cd6:	e781      	b.n	8006bdc <_dtoa_r+0x51c>
 8006cd8:	4b04      	ldr	r3, [pc, #16]	; (8006cec <_dtoa_r+0x62c>)
 8006cda:	9a00      	ldr	r2, [sp, #0]
 8006cdc:	1b5b      	subs	r3, r3, r5
 8006cde:	fa02 f003 	lsl.w	r0, r2, r3
 8006ce2:	e566      	b.n	80067b2 <_dtoa_r+0xf2>
 8006ce4:	900d      	str	r0, [sp, #52]	; 0x34
 8006ce6:	e5ad      	b.n	8006844 <_dtoa_r+0x184>
 8006ce8:	40240000 	.word	0x40240000
 8006cec:	fffffbee 	.word	0xfffffbee
 8006cf0:	4631      	mov	r1, r6
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	220a      	movs	r2, #10
 8006cf8:	f001 fd4e 	bl	8008798 <__multadd>
 8006cfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	4606      	mov	r6, r0
 8006d02:	f340 840b 	ble.w	800751c <_dtoa_r+0xe5c>
 8006d06:	9308      	str	r3, [sp, #32]
 8006d08:	2d00      	cmp	r5, #0
 8006d0a:	dd05      	ble.n	8006d18 <_dtoa_r+0x658>
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	462a      	mov	r2, r5
 8006d10:	4620      	mov	r0, r4
 8006d12:	f001 ff11 	bl	8008b38 <__lshift>
 8006d16:	4606      	mov	r6, r0
 8006d18:	f1b9 0f00 	cmp.w	r9, #0
 8006d1c:	f040 82ed 	bne.w	80072fa <_dtoa_r+0xc3a>
 8006d20:	46b1      	mov	r9, r6
 8006d22:	9b08      	ldr	r3, [sp, #32]
 8006d24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d26:	3b01      	subs	r3, #1
 8006d28:	18d3      	adds	r3, r2, r3
 8006d2a:	9308      	str	r3, [sp, #32]
 8006d2c:	9b00      	ldr	r3, [sp, #0]
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	930a      	str	r3, [sp, #40]	; 0x28
 8006d34:	4617      	mov	r7, r2
 8006d36:	4641      	mov	r1, r8
 8006d38:	4658      	mov	r0, fp
 8006d3a:	f7ff fc2b 	bl	8006594 <quorem>
 8006d3e:	4631      	mov	r1, r6
 8006d40:	4605      	mov	r5, r0
 8006d42:	4658      	mov	r0, fp
 8006d44:	f001 ff4e 	bl	8008be4 <__mcmp>
 8006d48:	464a      	mov	r2, r9
 8006d4a:	4682      	mov	sl, r0
 8006d4c:	4641      	mov	r1, r8
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f001 ff6c 	bl	8008c2c <__mdiff>
 8006d54:	68c2      	ldr	r2, [r0, #12]
 8006d56:	4603      	mov	r3, r0
 8006d58:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8006d5c:	2a00      	cmp	r2, #0
 8006d5e:	f040 81ba 	bne.w	80070d6 <_dtoa_r+0xa16>
 8006d62:	4619      	mov	r1, r3
 8006d64:	4658      	mov	r0, fp
 8006d66:	f8cd c01c 	str.w	ip, [sp, #28]
 8006d6a:	9306      	str	r3, [sp, #24]
 8006d6c:	f001 ff3a 	bl	8008be4 <__mcmp>
 8006d70:	9b06      	ldr	r3, [sp, #24]
 8006d72:	9000      	str	r0, [sp, #0]
 8006d74:	4619      	mov	r1, r3
 8006d76:	4620      	mov	r0, r4
 8006d78:	f001 fd04 	bl	8008784 <_Bfree>
 8006d7c:	9a00      	ldr	r2, [sp, #0]
 8006d7e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8006d82:	b92a      	cbnz	r2, 8006d90 <_dtoa_r+0x6d0>
 8006d84:	9b03      	ldr	r3, [sp, #12]
 8006d86:	b91b      	cbnz	r3, 8006d90 <_dtoa_r+0x6d0>
 8006d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f000 83aa 	beq.w	80074e4 <_dtoa_r+0xe24>
 8006d90:	f1ba 0f00 	cmp.w	sl, #0
 8006d94:	f2c0 824a 	blt.w	800722c <_dtoa_r+0xb6c>
 8006d98:	d105      	bne.n	8006da6 <_dtoa_r+0x6e6>
 8006d9a:	9b03      	ldr	r3, [sp, #12]
 8006d9c:	b91b      	cbnz	r3, 8006da6 <_dtoa_r+0x6e6>
 8006d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 8243 	beq.w	800722c <_dtoa_r+0xb6c>
 8006da6:	2a00      	cmp	r2, #0
 8006da8:	f300 82bb 	bgt.w	8007322 <_dtoa_r+0xc62>
 8006dac:	9b08      	ldr	r3, [sp, #32]
 8006dae:	f887 c000 	strb.w	ip, [r7]
 8006db2:	f107 0a01 	add.w	sl, r7, #1
 8006db6:	429f      	cmp	r7, r3
 8006db8:	4655      	mov	r5, sl
 8006dba:	f000 82be 	beq.w	800733a <_dtoa_r+0xc7a>
 8006dbe:	4659      	mov	r1, fp
 8006dc0:	220a      	movs	r2, #10
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f001 fce7 	bl	8008798 <__multadd>
 8006dca:	454e      	cmp	r6, r9
 8006dcc:	4683      	mov	fp, r0
 8006dce:	4631      	mov	r1, r6
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f04f 020a 	mov.w	r2, #10
 8006dd6:	f04f 0300 	mov.w	r3, #0
 8006dda:	f000 8176 	beq.w	80070ca <_dtoa_r+0xa0a>
 8006dde:	f001 fcdb 	bl	8008798 <__multadd>
 8006de2:	4649      	mov	r1, r9
 8006de4:	4606      	mov	r6, r0
 8006de6:	220a      	movs	r2, #10
 8006de8:	4620      	mov	r0, r4
 8006dea:	2300      	movs	r3, #0
 8006dec:	f001 fcd4 	bl	8008798 <__multadd>
 8006df0:	4657      	mov	r7, sl
 8006df2:	4681      	mov	r9, r0
 8006df4:	e79f      	b.n	8006d36 <_dtoa_r+0x676>
 8006df6:	2301      	movs	r3, #1
 8006df8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dfa:	f1ba 0f00 	cmp.w	sl, #0
 8006dfe:	f340 820c 	ble.w	800721a <_dtoa_r+0xb5a>
 8006e02:	4656      	mov	r6, sl
 8006e04:	4655      	mov	r5, sl
 8006e06:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006e0a:	f8cd a020 	str.w	sl, [sp, #32]
 8006e0e:	2100      	movs	r1, #0
 8006e10:	2e17      	cmp	r6, #23
 8006e12:	6461      	str	r1, [r4, #68]	; 0x44
 8006e14:	d90a      	bls.n	8006e2c <_dtoa_r+0x76c>
 8006e16:	2201      	movs	r2, #1
 8006e18:	2304      	movs	r3, #4
 8006e1a:	005b      	lsls	r3, r3, #1
 8006e1c:	f103 0014 	add.w	r0, r3, #20
 8006e20:	4286      	cmp	r6, r0
 8006e22:	4611      	mov	r1, r2
 8006e24:	f102 0201 	add.w	r2, r2, #1
 8006e28:	d2f7      	bcs.n	8006e1a <_dtoa_r+0x75a>
 8006e2a:	6461      	str	r1, [r4, #68]	; 0x44
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f001 fc83 	bl	8008738 <_Balloc>
 8006e32:	2d0e      	cmp	r5, #14
 8006e34:	9009      	str	r0, [sp, #36]	; 0x24
 8006e36:	6420      	str	r0, [r4, #64]	; 0x40
 8006e38:	f63f ad55 	bhi.w	80068e6 <_dtoa_r+0x226>
 8006e3c:	2f00      	cmp	r7, #0
 8006e3e:	f43f ad52 	beq.w	80068e6 <_dtoa_r+0x226>
 8006e42:	ed9d 7b00 	vldr	d7, [sp]
 8006e46:	9905      	ldr	r1, [sp, #20]
 8006e48:	2900      	cmp	r1, #0
 8006e4a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006e4e:	f340 8223 	ble.w	8007298 <_dtoa_r+0xbd8>
 8006e52:	4bb7      	ldr	r3, [pc, #732]	; (8007130 <_dtoa_r+0xa70>)
 8006e54:	f001 020f 	and.w	r2, r1, #15
 8006e58:	110d      	asrs	r5, r1, #4
 8006e5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e5e:	06e9      	lsls	r1, r5, #27
 8006e60:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006e64:	f140 81d2 	bpl.w	800720c <_dtoa_r+0xb4c>
 8006e68:	4bb2      	ldr	r3, [pc, #712]	; (8007134 <_dtoa_r+0xa74>)
 8006e6a:	ec51 0b17 	vmov	r0, r1, d7
 8006e6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e72:	f004 fef7 	bl	800bc64 <__aeabi_ddiv>
 8006e76:	e9cd 0100 	strd	r0, r1, [sp]
 8006e7a:	f005 050f 	and.w	r5, r5, #15
 8006e7e:	f04f 0803 	mov.w	r8, #3
 8006e82:	b18d      	cbz	r5, 8006ea8 <_dtoa_r+0x7e8>
 8006e84:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8007134 <_dtoa_r+0xa74>
 8006e88:	4630      	mov	r0, r6
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	07ea      	lsls	r2, r5, #31
 8006e8e:	d505      	bpl.n	8006e9c <_dtoa_r+0x7dc>
 8006e90:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006e94:	f004 fdbc 	bl	800ba10 <__aeabi_dmul>
 8006e98:	f108 0801 	add.w	r8, r8, #1
 8006e9c:	106d      	asrs	r5, r5, #1
 8006e9e:	f109 0908 	add.w	r9, r9, #8
 8006ea2:	d1f3      	bne.n	8006e8c <_dtoa_r+0x7cc>
 8006ea4:	4606      	mov	r6, r0
 8006ea6:	460f      	mov	r7, r1
 8006ea8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006eac:	4632      	mov	r2, r6
 8006eae:	463b      	mov	r3, r7
 8006eb0:	f004 fed8 	bl	800bc64 <__aeabi_ddiv>
 8006eb4:	e9cd 0100 	strd	r0, r1, [sp]
 8006eb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006eba:	b143      	cbz	r3, 8006ece <_dtoa_r+0x80e>
 8006ebc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	4b9d      	ldr	r3, [pc, #628]	; (8007138 <_dtoa_r+0xa78>)
 8006ec4:	f005 f816 	bl	800bef4 <__aeabi_dcmplt>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	f040 82ae 	bne.w	800742a <_dtoa_r+0xd6a>
 8006ece:	4640      	mov	r0, r8
 8006ed0:	f004 fd38 	bl	800b944 <__aeabi_i2d>
 8006ed4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ed8:	f004 fd9a 	bl	800ba10 <__aeabi_dmul>
 8006edc:	4b97      	ldr	r3, [pc, #604]	; (800713c <_dtoa_r+0xa7c>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f004 fbe4 	bl	800b6ac <__adddf3>
 8006ee4:	9b08      	ldr	r3, [sp, #32]
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 8162 	beq.w	80071b6 <_dtoa_r+0xaf6>
 8006ef2:	9b05      	ldr	r3, [sp, #20]
 8006ef4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ef8:	9314      	str	r3, [sp, #80]	; 0x50
 8006efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 8223 	beq.w	8007348 <_dtoa_r+0xc88>
 8006f02:	4b8b      	ldr	r3, [pc, #556]	; (8007130 <_dtoa_r+0xa70>)
 8006f04:	498e      	ldr	r1, [pc, #568]	; (8007140 <_dtoa_r+0xa80>)
 8006f06:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006f0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f0e:	2000      	movs	r0, #0
 8006f10:	f004 fea8 	bl	800bc64 <__aeabi_ddiv>
 8006f14:	4632      	mov	r2, r6
 8006f16:	463b      	mov	r3, r7
 8006f18:	f004 fbc6 	bl	800b6a8 <__aeabi_dsub>
 8006f1c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006f20:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8006f24:	4639      	mov	r1, r7
 8006f26:	4630      	mov	r0, r6
 8006f28:	f005 f80c 	bl	800bf44 <__aeabi_d2iz>
 8006f2c:	4605      	mov	r5, r0
 8006f2e:	f004 fd09 	bl	800b944 <__aeabi_i2d>
 8006f32:	3530      	adds	r5, #48	; 0x30
 8006f34:	4602      	mov	r2, r0
 8006f36:	460b      	mov	r3, r1
 8006f38:	4630      	mov	r0, r6
 8006f3a:	4639      	mov	r1, r7
 8006f3c:	f004 fbb4 	bl	800b6a8 <__aeabi_dsub>
 8006f40:	fa5f f885 	uxtb.w	r8, r5
 8006f44:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006f46:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006f4a:	f885 8000 	strb.w	r8, [r5]
 8006f4e:	4606      	mov	r6, r0
 8006f50:	460f      	mov	r7, r1
 8006f52:	3501      	adds	r5, #1
 8006f54:	f004 ffce 	bl	800bef4 <__aeabi_dcmplt>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	f040 82a7 	bne.w	80074ac <_dtoa_r+0xdec>
 8006f5e:	4632      	mov	r2, r6
 8006f60:	463b      	mov	r3, r7
 8006f62:	2000      	movs	r0, #0
 8006f64:	4974      	ldr	r1, [pc, #464]	; (8007138 <_dtoa_r+0xa78>)
 8006f66:	f004 fb9f 	bl	800b6a8 <__aeabi_dsub>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8006f72:	f004 ffdd 	bl	800bf30 <__aeabi_dcmpgt>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	f040 82ad 	bne.w	80074d6 <_dtoa_r+0xe16>
 8006f7c:	f1b9 0f01 	cmp.w	r9, #1
 8006f80:	f340 8184 	ble.w	800728c <_dtoa_r+0xbcc>
 8006f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f86:	f8cd b000 	str.w	fp, [sp]
 8006f8a:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 8006f8e:	4499      	add	r9, r3
 8006f90:	46a0      	mov	r8, r4
 8006f92:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8006f96:	e00d      	b.n	8006fb4 <_dtoa_r+0x8f4>
 8006f98:	2000      	movs	r0, #0
 8006f9a:	4967      	ldr	r1, [pc, #412]	; (8007138 <_dtoa_r+0xa78>)
 8006f9c:	f004 fb84 	bl	800b6a8 <__aeabi_dsub>
 8006fa0:	4652      	mov	r2, sl
 8006fa2:	465b      	mov	r3, fp
 8006fa4:	f004 ffa6 	bl	800bef4 <__aeabi_dcmplt>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	f040 828f 	bne.w	80074cc <_dtoa_r+0xe0c>
 8006fae:	454d      	cmp	r5, r9
 8006fb0:	f000 8167 	beq.w	8007282 <_dtoa_r+0xbc2>
 8006fb4:	4650      	mov	r0, sl
 8006fb6:	4659      	mov	r1, fp
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4b62      	ldr	r3, [pc, #392]	; (8007144 <_dtoa_r+0xa84>)
 8006fbc:	f004 fd28 	bl	800ba10 <__aeabi_dmul>
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	4b60      	ldr	r3, [pc, #384]	; (8007144 <_dtoa_r+0xa84>)
 8006fc4:	4682      	mov	sl, r0
 8006fc6:	468b      	mov	fp, r1
 8006fc8:	4630      	mov	r0, r6
 8006fca:	4639      	mov	r1, r7
 8006fcc:	f004 fd20 	bl	800ba10 <__aeabi_dmul>
 8006fd0:	460f      	mov	r7, r1
 8006fd2:	4606      	mov	r6, r0
 8006fd4:	f004 ffb6 	bl	800bf44 <__aeabi_d2iz>
 8006fd8:	4604      	mov	r4, r0
 8006fda:	f004 fcb3 	bl	800b944 <__aeabi_i2d>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	4639      	mov	r1, r7
 8006fe6:	f004 fb5f 	bl	800b6a8 <__aeabi_dsub>
 8006fea:	3430      	adds	r4, #48	; 0x30
 8006fec:	b2e4      	uxtb	r4, r4
 8006fee:	4652      	mov	r2, sl
 8006ff0:	465b      	mov	r3, fp
 8006ff2:	f805 4b01 	strb.w	r4, [r5], #1
 8006ff6:	4606      	mov	r6, r0
 8006ff8:	460f      	mov	r7, r1
 8006ffa:	f004 ff7b 	bl	800bef4 <__aeabi_dcmplt>
 8006ffe:	4632      	mov	r2, r6
 8007000:	463b      	mov	r3, r7
 8007002:	2800      	cmp	r0, #0
 8007004:	d0c8      	beq.n	8006f98 <_dtoa_r+0x8d8>
 8007006:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007008:	f8dd b000 	ldr.w	fp, [sp]
 800700c:	9305      	str	r3, [sp, #20]
 800700e:	4644      	mov	r4, r8
 8007010:	e52d      	b.n	8006a6e <_dtoa_r+0x3ae>
 8007012:	2300      	movs	r3, #0
 8007014:	930b      	str	r3, [sp, #44]	; 0x2c
 8007016:	9b05      	ldr	r3, [sp, #20]
 8007018:	4453      	add	r3, sl
 800701a:	930e      	str	r3, [sp, #56]	; 0x38
 800701c:	3301      	adds	r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	9308      	str	r3, [sp, #32]
 8007022:	f340 8101 	ble.w	8007228 <_dtoa_r+0xb68>
 8007026:	9d08      	ldr	r5, [sp, #32]
 8007028:	462e      	mov	r6, r5
 800702a:	e6f0      	b.n	8006e0e <_dtoa_r+0x74e>
 800702c:	2300      	movs	r3, #0
 800702e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007030:	e6e3      	b.n	8006dfa <_dtoa_r+0x73a>
 8007032:	9b08      	ldr	r3, [sp, #32]
 8007034:	2b00      	cmp	r3, #0
 8007036:	f73f ac67 	bgt.w	8006908 <_dtoa_r+0x248>
 800703a:	f040 80d4 	bne.w	80071e6 <_dtoa_r+0xb26>
 800703e:	4640      	mov	r0, r8
 8007040:	2200      	movs	r2, #0
 8007042:	4b41      	ldr	r3, [pc, #260]	; (8007148 <_dtoa_r+0xa88>)
 8007044:	4649      	mov	r1, r9
 8007046:	f004 fce3 	bl	800ba10 <__aeabi_dmul>
 800704a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800704e:	f004 ff65 	bl	800bf1c <__aeabi_dcmpge>
 8007052:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007056:	4646      	mov	r6, r8
 8007058:	2800      	cmp	r0, #0
 800705a:	f000 808b 	beq.w	8007174 <_dtoa_r+0xab4>
 800705e:	ea6f 030a 	mvn.w	r3, sl
 8007062:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007064:	9305      	str	r3, [sp, #20]
 8007066:	4641      	mov	r1, r8
 8007068:	4620      	mov	r0, r4
 800706a:	f001 fb8b 	bl	8008784 <_Bfree>
 800706e:	2e00      	cmp	r6, #0
 8007070:	f47f ae2b 	bne.w	8006cca <_dtoa_r+0x60a>
 8007074:	e4fb      	b.n	8006a6e <_dtoa_r+0x3ae>
 8007076:	4659      	mov	r1, fp
 8007078:	4620      	mov	r0, r4
 800707a:	f001 fd0d 	bl	8008a98 <__pow5mult>
 800707e:	4683      	mov	fp, r0
 8007080:	e554      	b.n	8006b2c <_dtoa_r+0x46c>
 8007082:	9b00      	ldr	r3, [sp, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	f47f ad63 	bne.w	8006b50 <_dtoa_r+0x490>
 800708a:	9b01      	ldr	r3, [sp, #4]
 800708c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007090:	2b00      	cmp	r3, #0
 8007092:	f47f ad90 	bne.w	8006bb6 <_dtoa_r+0x4f6>
 8007096:	9b01      	ldr	r3, [sp, #4]
 8007098:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800709c:	0d3f      	lsrs	r7, r7, #20
 800709e:	053f      	lsls	r7, r7, #20
 80070a0:	2f00      	cmp	r7, #0
 80070a2:	f000 821c 	beq.w	80074de <_dtoa_r+0xe1e>
 80070a6:	9b07      	ldr	r3, [sp, #28]
 80070a8:	3301      	adds	r3, #1
 80070aa:	9307      	str	r3, [sp, #28]
 80070ac:	9b06      	ldr	r3, [sp, #24]
 80070ae:	3301      	adds	r3, #1
 80070b0:	9306      	str	r3, [sp, #24]
 80070b2:	f04f 0901 	mov.w	r9, #1
 80070b6:	e580      	b.n	8006bba <_dtoa_r+0x4fa>
 80070b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070ba:	2a00      	cmp	r2, #0
 80070bc:	f000 81a7 	beq.w	800740e <_dtoa_r+0xd4e>
 80070c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80070c4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80070c6:	9d07      	ldr	r5, [sp, #28]
 80070c8:	e4f9      	b.n	8006abe <_dtoa_r+0x3fe>
 80070ca:	f001 fb65 	bl	8008798 <__multadd>
 80070ce:	4657      	mov	r7, sl
 80070d0:	4606      	mov	r6, r0
 80070d2:	4681      	mov	r9, r0
 80070d4:	e62f      	b.n	8006d36 <_dtoa_r+0x676>
 80070d6:	4601      	mov	r1, r0
 80070d8:	4620      	mov	r0, r4
 80070da:	f8cd c000 	str.w	ip, [sp]
 80070de:	f001 fb51 	bl	8008784 <_Bfree>
 80070e2:	2201      	movs	r2, #1
 80070e4:	f8dd c000 	ldr.w	ip, [sp]
 80070e8:	e652      	b.n	8006d90 <_dtoa_r+0x6d0>
 80070ea:	4658      	mov	r0, fp
 80070ec:	4641      	mov	r1, r8
 80070ee:	f001 fd79 	bl	8008be4 <__mcmp>
 80070f2:	2800      	cmp	r0, #0
 80070f4:	f6bf ad8f 	bge.w	8006c16 <_dtoa_r+0x556>
 80070f8:	9f05      	ldr	r7, [sp, #20]
 80070fa:	4659      	mov	r1, fp
 80070fc:	2300      	movs	r3, #0
 80070fe:	4620      	mov	r0, r4
 8007100:	220a      	movs	r2, #10
 8007102:	3f01      	subs	r7, #1
 8007104:	9705      	str	r7, [sp, #20]
 8007106:	f001 fb47 	bl	8008798 <__multadd>
 800710a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800710c:	4683      	mov	fp, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	f47f adee 	bne.w	8006cf0 <_dtoa_r+0x630>
 8007114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007116:	2b00      	cmp	r3, #0
 8007118:	f340 81f5 	ble.w	8007506 <_dtoa_r+0xe46>
 800711c:	9308      	str	r3, [sp, #32]
 800711e:	e581      	b.n	8006c24 <_dtoa_r+0x564>
 8007120:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007122:	f7ff bb04 	b.w	800672e <_dtoa_r+0x6e>
 8007126:	9b00      	ldr	r3, [sp, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	f47f ad44 	bne.w	8006bb6 <_dtoa_r+0x4f6>
 800712e:	e7ac      	b.n	800708a <_dtoa_r+0x9ca>
 8007130:	0800c998 	.word	0x0800c998
 8007134:	0800ca70 	.word	0x0800ca70
 8007138:	3ff00000 	.word	0x3ff00000
 800713c:	401c0000 	.word	0x401c0000
 8007140:	3fe00000 	.word	0x3fe00000
 8007144:	40240000 	.word	0x40240000
 8007148:	40140000 	.word	0x40140000
 800714c:	9b03      	ldr	r3, [sp, #12]
 800714e:	2b02      	cmp	r3, #2
 8007150:	f77f ad65 	ble.w	8006c1e <_dtoa_r+0x55e>
 8007154:	9b08      	ldr	r3, [sp, #32]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d181      	bne.n	800705e <_dtoa_r+0x99e>
 800715a:	4641      	mov	r1, r8
 800715c:	2205      	movs	r2, #5
 800715e:	4620      	mov	r0, r4
 8007160:	f001 fb1a 	bl	8008798 <__multadd>
 8007164:	4680      	mov	r8, r0
 8007166:	4641      	mov	r1, r8
 8007168:	4658      	mov	r0, fp
 800716a:	f001 fd3b 	bl	8008be4 <__mcmp>
 800716e:	2800      	cmp	r0, #0
 8007170:	f77f af75 	ble.w	800705e <_dtoa_r+0x99e>
 8007174:	9a05      	ldr	r2, [sp, #20]
 8007176:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007178:	2331      	movs	r3, #49	; 0x31
 800717a:	3201      	adds	r2, #1
 800717c:	9205      	str	r2, [sp, #20]
 800717e:	700b      	strb	r3, [r1, #0]
 8007180:	1c4d      	adds	r5, r1, #1
 8007182:	e770      	b.n	8007066 <_dtoa_r+0x9a6>
 8007184:	9a05      	ldr	r2, [sp, #20]
 8007186:	3201      	adds	r2, #1
 8007188:	9205      	str	r2, [sp, #20]
 800718a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800718c:	2331      	movs	r3, #49	; 0x31
 800718e:	7013      	strb	r3, [r2, #0]
 8007190:	e58b      	b.n	8006caa <_dtoa_r+0x5ea>
 8007192:	f8dd b000 	ldr.w	fp, [sp]
 8007196:	9c03      	ldr	r4, [sp, #12]
 8007198:	e469      	b.n	8006a6e <_dtoa_r+0x3ae>
 800719a:	4640      	mov	r0, r8
 800719c:	f004 fbd2 	bl	800b944 <__aeabi_i2d>
 80071a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071a4:	f004 fc34 	bl	800ba10 <__aeabi_dmul>
 80071a8:	2200      	movs	r2, #0
 80071aa:	4bc2      	ldr	r3, [pc, #776]	; (80074b4 <_dtoa_r+0xdf4>)
 80071ac:	f004 fa7e 	bl	800b6ac <__adddf3>
 80071b0:	4606      	mov	r6, r0
 80071b2:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80071b6:	2200      	movs	r2, #0
 80071b8:	4bbf      	ldr	r3, [pc, #764]	; (80074b8 <_dtoa_r+0xdf8>)
 80071ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071be:	f004 fa73 	bl	800b6a8 <__aeabi_dsub>
 80071c2:	4632      	mov	r2, r6
 80071c4:	463b      	mov	r3, r7
 80071c6:	4680      	mov	r8, r0
 80071c8:	4689      	mov	r9, r1
 80071ca:	f004 feb1 	bl	800bf30 <__aeabi_dcmpgt>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	f040 80b6 	bne.w	8007340 <_dtoa_r+0xc80>
 80071d4:	4632      	mov	r2, r6
 80071d6:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80071da:	4640      	mov	r0, r8
 80071dc:	4649      	mov	r1, r9
 80071de:	f004 fe89 	bl	800bef4 <__aeabi_dcmplt>
 80071e2:	2800      	cmp	r0, #0
 80071e4:	d052      	beq.n	800728c <_dtoa_r+0xbcc>
 80071e6:	f04f 0800 	mov.w	r8, #0
 80071ea:	4646      	mov	r6, r8
 80071ec:	e737      	b.n	800705e <_dtoa_r+0x99e>
 80071ee:	4659      	mov	r1, fp
 80071f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071f2:	4620      	mov	r0, r4
 80071f4:	f001 fc50 	bl	8008a98 <__pow5mult>
 80071f8:	4683      	mov	fp, r0
 80071fa:	e497      	b.n	8006b2c <_dtoa_r+0x46c>
 80071fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007200:	970a      	str	r7, [sp, #40]	; 0x28
 8007202:	1afb      	subs	r3, r7, r3
 8007204:	441a      	add	r2, r3
 8007206:	920c      	str	r2, [sp, #48]	; 0x30
 8007208:	2700      	movs	r7, #0
 800720a:	e452      	b.n	8006ab2 <_dtoa_r+0x3f2>
 800720c:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8007210:	f04f 0802 	mov.w	r8, #2
 8007214:	ed8d 7b00 	vstr	d7, [sp]
 8007218:	e633      	b.n	8006e82 <_dtoa_r+0x7c2>
 800721a:	2501      	movs	r5, #1
 800721c:	950e      	str	r5, [sp, #56]	; 0x38
 800721e:	9508      	str	r5, [sp, #32]
 8007220:	46aa      	mov	sl, r5
 8007222:	2100      	movs	r1, #0
 8007224:	6461      	str	r1, [r4, #68]	; 0x44
 8007226:	e601      	b.n	8006e2c <_dtoa_r+0x76c>
 8007228:	461d      	mov	r5, r3
 800722a:	e7fa      	b.n	8007222 <_dtoa_r+0xb62>
 800722c:	2a00      	cmp	r2, #0
 800722e:	dd15      	ble.n	800725c <_dtoa_r+0xb9c>
 8007230:	4659      	mov	r1, fp
 8007232:	2201      	movs	r2, #1
 8007234:	4620      	mov	r0, r4
 8007236:	f8cd c000 	str.w	ip, [sp]
 800723a:	f001 fc7d 	bl	8008b38 <__lshift>
 800723e:	4641      	mov	r1, r8
 8007240:	4683      	mov	fp, r0
 8007242:	f001 fccf 	bl	8008be4 <__mcmp>
 8007246:	2800      	cmp	r0, #0
 8007248:	f8dd c000 	ldr.w	ip, [sp]
 800724c:	f340 8154 	ble.w	80074f8 <_dtoa_r+0xe38>
 8007250:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8007254:	f000 8111 	beq.w	800747a <_dtoa_r+0xdba>
 8007258:	f10c 0c01 	add.w	ip, ip, #1
 800725c:	46b2      	mov	sl, r6
 800725e:	f887 c000 	strb.w	ip, [r7]
 8007262:	1c7d      	adds	r5, r7, #1
 8007264:	464e      	mov	r6, r9
 8007266:	e520      	b.n	8006caa <_dtoa_r+0x5ea>
 8007268:	d104      	bne.n	8007274 <_dtoa_r+0xbb4>
 800726a:	f01c 0f01 	tst.w	ip, #1
 800726e:	d001      	beq.n	8007274 <_dtoa_r+0xbb4>
 8007270:	e50b      	b.n	8006c8a <_dtoa_r+0x5ca>
 8007272:	4615      	mov	r5, r2
 8007274:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007278:	2b30      	cmp	r3, #48	; 0x30
 800727a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800727e:	d0f8      	beq.n	8007272 <_dtoa_r+0xbb2>
 8007280:	e513      	b.n	8006caa <_dtoa_r+0x5ea>
 8007282:	f8dd b000 	ldr.w	fp, [sp]
 8007286:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 800728a:	4644      	mov	r4, r8
 800728c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007290:	e9cd 2300 	strd	r2, r3, [sp]
 8007294:	f7ff bb27 	b.w	80068e6 <_dtoa_r+0x226>
 8007298:	9b05      	ldr	r3, [sp, #20]
 800729a:	425d      	negs	r5, r3
 800729c:	2d00      	cmp	r5, #0
 800729e:	f000 80bd 	beq.w	800741c <_dtoa_r+0xd5c>
 80072a2:	4b86      	ldr	r3, [pc, #536]	; (80074bc <_dtoa_r+0xdfc>)
 80072a4:	f005 020f 	and.w	r2, r5, #15
 80072a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072b4:	f004 fbac 	bl	800ba10 <__aeabi_dmul>
 80072b8:	112d      	asrs	r5, r5, #4
 80072ba:	e9cd 0100 	strd	r0, r1, [sp]
 80072be:	f000 8127 	beq.w	8007510 <_dtoa_r+0xe50>
 80072c2:	4e7f      	ldr	r6, [pc, #508]	; (80074c0 <_dtoa_r+0xe00>)
 80072c4:	f04f 0802 	mov.w	r8, #2
 80072c8:	07eb      	lsls	r3, r5, #31
 80072ca:	d505      	bpl.n	80072d8 <_dtoa_r+0xc18>
 80072cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072d0:	f004 fb9e 	bl	800ba10 <__aeabi_dmul>
 80072d4:	f108 0801 	add.w	r8, r8, #1
 80072d8:	106d      	asrs	r5, r5, #1
 80072da:	f106 0608 	add.w	r6, r6, #8
 80072de:	d1f3      	bne.n	80072c8 <_dtoa_r+0xc08>
 80072e0:	e9cd 0100 	strd	r0, r1, [sp]
 80072e4:	e5e8      	b.n	8006eb8 <_dtoa_r+0x7f8>
 80072e6:	9a05      	ldr	r2, [sp, #20]
 80072e8:	3201      	adds	r2, #1
 80072ea:	9205      	str	r2, [sp, #20]
 80072ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072ee:	2330      	movs	r3, #48	; 0x30
 80072f0:	7013      	strb	r3, [r2, #0]
 80072f2:	2331      	movs	r3, #49	; 0x31
 80072f4:	7013      	strb	r3, [r2, #0]
 80072f6:	f7ff bbba 	b.w	8006a6e <_dtoa_r+0x3ae>
 80072fa:	6871      	ldr	r1, [r6, #4]
 80072fc:	4620      	mov	r0, r4
 80072fe:	f001 fa1b 	bl	8008738 <_Balloc>
 8007302:	6933      	ldr	r3, [r6, #16]
 8007304:	1c9a      	adds	r2, r3, #2
 8007306:	4605      	mov	r5, r0
 8007308:	0092      	lsls	r2, r2, #2
 800730a:	f106 010c 	add.w	r1, r6, #12
 800730e:	300c      	adds	r0, #12
 8007310:	f7fc f9e6 	bl	80036e0 <memcpy>
 8007314:	4620      	mov	r0, r4
 8007316:	4629      	mov	r1, r5
 8007318:	2201      	movs	r2, #1
 800731a:	f001 fc0d 	bl	8008b38 <__lshift>
 800731e:	4681      	mov	r9, r0
 8007320:	e4ff      	b.n	8006d22 <_dtoa_r+0x662>
 8007322:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8007326:	f000 80a8 	beq.w	800747a <_dtoa_r+0xdba>
 800732a:	f10c 0c01 	add.w	ip, ip, #1
 800732e:	46b2      	mov	sl, r6
 8007330:	f887 c000 	strb.w	ip, [r7]
 8007334:	1c7d      	adds	r5, r7, #1
 8007336:	464e      	mov	r6, r9
 8007338:	e4b7      	b.n	8006caa <_dtoa_r+0x5ea>
 800733a:	46b2      	mov	sl, r6
 800733c:	464e      	mov	r6, r9
 800733e:	e494      	b.n	8006c6a <_dtoa_r+0x5aa>
 8007340:	f04f 0800 	mov.w	r8, #0
 8007344:	4646      	mov	r6, r8
 8007346:	e715      	b.n	8007174 <_dtoa_r+0xab4>
 8007348:	495c      	ldr	r1, [pc, #368]	; (80074bc <_dtoa_r+0xdfc>)
 800734a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800734e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007352:	4632      	mov	r2, r6
 8007354:	9315      	str	r3, [sp, #84]	; 0x54
 8007356:	e9d1 0100 	ldrd	r0, r1, [r1]
 800735a:	463b      	mov	r3, r7
 800735c:	f004 fb58 	bl	800ba10 <__aeabi_dmul>
 8007360:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007364:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8007368:	4639      	mov	r1, r7
 800736a:	4630      	mov	r0, r6
 800736c:	f004 fdea 	bl	800bf44 <__aeabi_d2iz>
 8007370:	4605      	mov	r5, r0
 8007372:	f004 fae7 	bl	800b944 <__aeabi_i2d>
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	4630      	mov	r0, r6
 800737c:	4639      	mov	r1, r7
 800737e:	f004 f993 	bl	800b6a8 <__aeabi_dsub>
 8007382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007384:	3530      	adds	r5, #48	; 0x30
 8007386:	f1b9 0f01 	cmp.w	r9, #1
 800738a:	7015      	strb	r5, [r2, #0]
 800738c:	4606      	mov	r6, r0
 800738e:	460f      	mov	r7, r1
 8007390:	f102 0501 	add.w	r5, r2, #1
 8007394:	d023      	beq.n	80073de <_dtoa_r+0xd1e>
 8007396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007398:	f8cd b000 	str.w	fp, [sp]
 800739c:	444b      	add	r3, r9
 800739e:	4698      	mov	r8, r3
 80073a0:	46a9      	mov	r9, r5
 80073a2:	46ab      	mov	fp, r5
 80073a4:	2200      	movs	r2, #0
 80073a6:	4b47      	ldr	r3, [pc, #284]	; (80074c4 <_dtoa_r+0xe04>)
 80073a8:	f004 fb32 	bl	800ba10 <__aeabi_dmul>
 80073ac:	460f      	mov	r7, r1
 80073ae:	4606      	mov	r6, r0
 80073b0:	f004 fdc8 	bl	800bf44 <__aeabi_d2iz>
 80073b4:	4605      	mov	r5, r0
 80073b6:	f004 fac5 	bl	800b944 <__aeabi_i2d>
 80073ba:	3530      	adds	r5, #48	; 0x30
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	4630      	mov	r0, r6
 80073c2:	4639      	mov	r1, r7
 80073c4:	f004 f970 	bl	800b6a8 <__aeabi_dsub>
 80073c8:	f809 5b01 	strb.w	r5, [r9], #1
 80073cc:	45c1      	cmp	r9, r8
 80073ce:	d1e9      	bne.n	80073a4 <_dtoa_r+0xce4>
 80073d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073d2:	465d      	mov	r5, fp
 80073d4:	f8dd b000 	ldr.w	fp, [sp]
 80073d8:	4606      	mov	r6, r0
 80073da:	460f      	mov	r7, r1
 80073dc:	441d      	add	r5, r3
 80073de:	2200      	movs	r2, #0
 80073e0:	4b39      	ldr	r3, [pc, #228]	; (80074c8 <_dtoa_r+0xe08>)
 80073e2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80073e6:	f004 f961 	bl	800b6ac <__adddf3>
 80073ea:	4632      	mov	r2, r6
 80073ec:	463b      	mov	r3, r7
 80073ee:	f004 fd81 	bl	800bef4 <__aeabi_dcmplt>
 80073f2:	2800      	cmp	r0, #0
 80073f4:	d047      	beq.n	8007486 <_dtoa_r+0xdc6>
 80073f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073f8:	9305      	str	r3, [sp, #20]
 80073fa:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 80073fe:	f7ff bb24 	b.w	8006a4a <_dtoa_r+0x38a>
 8007402:	9b07      	ldr	r3, [sp, #28]
 8007404:	9a08      	ldr	r2, [sp, #32]
 8007406:	1a9d      	subs	r5, r3, r2
 8007408:	2300      	movs	r3, #0
 800740a:	f7ff bb58 	b.w	8006abe <_dtoa_r+0x3fe>
 800740e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007410:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007412:	9d07      	ldr	r5, [sp, #28]
 8007414:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007418:	f7ff bb51 	b.w	8006abe <_dtoa_r+0x3fe>
 800741c:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8007420:	f04f 0802 	mov.w	r8, #2
 8007424:	ed8d 7b00 	vstr	d7, [sp]
 8007428:	e546      	b.n	8006eb8 <_dtoa_r+0x7f8>
 800742a:	9b08      	ldr	r3, [sp, #32]
 800742c:	2b00      	cmp	r3, #0
 800742e:	f43f aeb4 	beq.w	800719a <_dtoa_r+0xada>
 8007432:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007434:	2d00      	cmp	r5, #0
 8007436:	f77f af29 	ble.w	800728c <_dtoa_r+0xbcc>
 800743a:	2200      	movs	r2, #0
 800743c:	4b21      	ldr	r3, [pc, #132]	; (80074c4 <_dtoa_r+0xe04>)
 800743e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007442:	f004 fae5 	bl	800ba10 <__aeabi_dmul>
 8007446:	4606      	mov	r6, r0
 8007448:	460f      	mov	r7, r1
 800744a:	f108 0001 	add.w	r0, r8, #1
 800744e:	e9cd 6700 	strd	r6, r7, [sp]
 8007452:	f004 fa77 	bl	800b944 <__aeabi_i2d>
 8007456:	4602      	mov	r2, r0
 8007458:	460b      	mov	r3, r1
 800745a:	4630      	mov	r0, r6
 800745c:	4639      	mov	r1, r7
 800745e:	f004 fad7 	bl	800ba10 <__aeabi_dmul>
 8007462:	4b14      	ldr	r3, [pc, #80]	; (80074b4 <_dtoa_r+0xdf4>)
 8007464:	2200      	movs	r2, #0
 8007466:	f004 f921 	bl	800b6ac <__adddf3>
 800746a:	9b05      	ldr	r3, [sp, #20]
 800746c:	3b01      	subs	r3, #1
 800746e:	4606      	mov	r6, r0
 8007470:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8007474:	9314      	str	r3, [sp, #80]	; 0x50
 8007476:	46a9      	mov	r9, r5
 8007478:	e53f      	b.n	8006efa <_dtoa_r+0x83a>
 800747a:	2239      	movs	r2, #57	; 0x39
 800747c:	46b2      	mov	sl, r6
 800747e:	703a      	strb	r2, [r7, #0]
 8007480:	464e      	mov	r6, r9
 8007482:	1c7d      	adds	r5, r7, #1
 8007484:	e403      	b.n	8006c8e <_dtoa_r+0x5ce>
 8007486:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800748a:	2000      	movs	r0, #0
 800748c:	490e      	ldr	r1, [pc, #56]	; (80074c8 <_dtoa_r+0xe08>)
 800748e:	f004 f90b 	bl	800b6a8 <__aeabi_dsub>
 8007492:	4632      	mov	r2, r6
 8007494:	463b      	mov	r3, r7
 8007496:	f004 fd4b 	bl	800bf30 <__aeabi_dcmpgt>
 800749a:	b908      	cbnz	r0, 80074a0 <_dtoa_r+0xde0>
 800749c:	e6f6      	b.n	800728c <_dtoa_r+0xbcc>
 800749e:	4615      	mov	r5, r2
 80074a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80074a4:	2b30      	cmp	r3, #48	; 0x30
 80074a6:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80074aa:	d0f8      	beq.n	800749e <_dtoa_r+0xdde>
 80074ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074ae:	9305      	str	r3, [sp, #20]
 80074b0:	f7ff badd 	b.w	8006a6e <_dtoa_r+0x3ae>
 80074b4:	401c0000 	.word	0x401c0000
 80074b8:	40140000 	.word	0x40140000
 80074bc:	0800c998 	.word	0x0800c998
 80074c0:	0800ca70 	.word	0x0800ca70
 80074c4:	40240000 	.word	0x40240000
 80074c8:	3fe00000 	.word	0x3fe00000
 80074cc:	4643      	mov	r3, r8
 80074ce:	f8dd b000 	ldr.w	fp, [sp]
 80074d2:	46a0      	mov	r8, r4
 80074d4:	461c      	mov	r4, r3
 80074d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074d8:	9305      	str	r3, [sp, #20]
 80074da:	f7ff bab6 	b.w	8006a4a <_dtoa_r+0x38a>
 80074de:	46b9      	mov	r9, r7
 80074e0:	f7ff bb6b 	b.w	8006bba <_dtoa_r+0x4fa>
 80074e4:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80074e8:	d0c7      	beq.n	800747a <_dtoa_r+0xdba>
 80074ea:	f1ba 0f00 	cmp.w	sl, #0
 80074ee:	f77f aeb5 	ble.w	800725c <_dtoa_r+0xb9c>
 80074f2:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 80074f6:	e6b1      	b.n	800725c <_dtoa_r+0xb9c>
 80074f8:	f47f aeb0 	bne.w	800725c <_dtoa_r+0xb9c>
 80074fc:	f01c 0f01 	tst.w	ip, #1
 8007500:	f43f aeac 	beq.w	800725c <_dtoa_r+0xb9c>
 8007504:	e6a4      	b.n	8007250 <_dtoa_r+0xb90>
 8007506:	9b03      	ldr	r3, [sp, #12]
 8007508:	2b02      	cmp	r3, #2
 800750a:	dc04      	bgt.n	8007516 <_dtoa_r+0xe56>
 800750c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800750e:	e605      	b.n	800711c <_dtoa_r+0xa5c>
 8007510:	f04f 0802 	mov.w	r8, #2
 8007514:	e4d0      	b.n	8006eb8 <_dtoa_r+0x7f8>
 8007516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007518:	9308      	str	r3, [sp, #32]
 800751a:	e61b      	b.n	8007154 <_dtoa_r+0xa94>
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	2b02      	cmp	r3, #2
 8007520:	dcf9      	bgt.n	8007516 <_dtoa_r+0xe56>
 8007522:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007524:	f7ff bbef 	b.w	8006d06 <_dtoa_r+0x646>
 8007528:	2500      	movs	r5, #0
 800752a:	6465      	str	r5, [r4, #68]	; 0x44
 800752c:	4629      	mov	r1, r5
 800752e:	4620      	mov	r0, r4
 8007530:	f001 f902 	bl	8008738 <_Balloc>
 8007534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007538:	9308      	str	r3, [sp, #32]
 800753a:	930e      	str	r3, [sp, #56]	; 0x38
 800753c:	2301      	movs	r3, #1
 800753e:	9009      	str	r0, [sp, #36]	; 0x24
 8007540:	46aa      	mov	sl, r5
 8007542:	6420      	str	r0, [r4, #64]	; 0x40
 8007544:	930b      	str	r3, [sp, #44]	; 0x2c
 8007546:	f7ff b9ce 	b.w	80068e6 <_dtoa_r+0x226>
 800754a:	f43f ab4e 	beq.w	8006bea <_dtoa_r+0x52a>
 800754e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8007552:	f7ff bb43 	b.w	8006bdc <_dtoa_r+0x51c>
 8007556:	2301      	movs	r3, #1
 8007558:	930b      	str	r3, [sp, #44]	; 0x2c
 800755a:	e55c      	b.n	8007016 <_dtoa_r+0x956>
 800755c:	2701      	movs	r7, #1
 800755e:	f7ff b98d 	b.w	800687c <_dtoa_r+0x1bc>
 8007562:	bf00      	nop

08007564 <__sflush_r>:
 8007564:	898b      	ldrh	r3, [r1, #12]
 8007566:	b29a      	uxth	r2, r3
 8007568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800756c:	460d      	mov	r5, r1
 800756e:	0711      	lsls	r1, r2, #28
 8007570:	4680      	mov	r8, r0
 8007572:	d43c      	bmi.n	80075ee <__sflush_r+0x8a>
 8007574:	686a      	ldr	r2, [r5, #4]
 8007576:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800757a:	2a00      	cmp	r2, #0
 800757c:	81ab      	strh	r3, [r5, #12]
 800757e:	dd65      	ble.n	800764c <__sflush_r+0xe8>
 8007580:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8007582:	2e00      	cmp	r6, #0
 8007584:	d04b      	beq.n	800761e <__sflush_r+0xba>
 8007586:	b29b      	uxth	r3, r3
 8007588:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800758c:	2100      	movs	r1, #0
 800758e:	b292      	uxth	r2, r2
 8007590:	f8d8 4000 	ldr.w	r4, [r8]
 8007594:	f8c8 1000 	str.w	r1, [r8]
 8007598:	2a00      	cmp	r2, #0
 800759a:	d05b      	beq.n	8007654 <__sflush_r+0xf0>
 800759c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800759e:	075f      	lsls	r7, r3, #29
 80075a0:	d505      	bpl.n	80075ae <__sflush_r+0x4a>
 80075a2:	6869      	ldr	r1, [r5, #4]
 80075a4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80075a6:	1a52      	subs	r2, r2, r1
 80075a8:	b10b      	cbz	r3, 80075ae <__sflush_r+0x4a>
 80075aa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80075ac:	1ad2      	subs	r2, r2, r3
 80075ae:	4640      	mov	r0, r8
 80075b0:	69e9      	ldr	r1, [r5, #28]
 80075b2:	2300      	movs	r3, #0
 80075b4:	47b0      	blx	r6
 80075b6:	1c46      	adds	r6, r0, #1
 80075b8:	d056      	beq.n	8007668 <__sflush_r+0x104>
 80075ba:	89ab      	ldrh	r3, [r5, #12]
 80075bc:	692a      	ldr	r2, [r5, #16]
 80075be:	602a      	str	r2, [r5, #0]
 80075c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	2200      	movs	r2, #0
 80075c8:	606a      	str	r2, [r5, #4]
 80075ca:	04da      	lsls	r2, r3, #19
 80075cc:	81ab      	strh	r3, [r5, #12]
 80075ce:	d43b      	bmi.n	8007648 <__sflush_r+0xe4>
 80075d0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80075d2:	f8c8 4000 	str.w	r4, [r8]
 80075d6:	b311      	cbz	r1, 800761e <__sflush_r+0xba>
 80075d8:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80075dc:	4299      	cmp	r1, r3
 80075de:	d002      	beq.n	80075e6 <__sflush_r+0x82>
 80075e0:	4640      	mov	r0, r8
 80075e2:	f000 f9ff 	bl	80079e4 <_free_r>
 80075e6:	2000      	movs	r0, #0
 80075e8:	6328      	str	r0, [r5, #48]	; 0x30
 80075ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ee:	692e      	ldr	r6, [r5, #16]
 80075f0:	b1ae      	cbz	r6, 800761e <__sflush_r+0xba>
 80075f2:	682c      	ldr	r4, [r5, #0]
 80075f4:	602e      	str	r6, [r5, #0]
 80075f6:	0791      	lsls	r1, r2, #30
 80075f8:	bf0c      	ite	eq
 80075fa:	696b      	ldreq	r3, [r5, #20]
 80075fc:	2300      	movne	r3, #0
 80075fe:	1ba4      	subs	r4, r4, r6
 8007600:	60ab      	str	r3, [r5, #8]
 8007602:	e00a      	b.n	800761a <__sflush_r+0xb6>
 8007604:	4632      	mov	r2, r6
 8007606:	4623      	mov	r3, r4
 8007608:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800760a:	69e9      	ldr	r1, [r5, #28]
 800760c:	4640      	mov	r0, r8
 800760e:	47b8      	blx	r7
 8007610:	2800      	cmp	r0, #0
 8007612:	eba4 0400 	sub.w	r4, r4, r0
 8007616:	4406      	add	r6, r0
 8007618:	dd04      	ble.n	8007624 <__sflush_r+0xc0>
 800761a:	2c00      	cmp	r4, #0
 800761c:	dcf2      	bgt.n	8007604 <__sflush_r+0xa0>
 800761e:	2000      	movs	r0, #0
 8007620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007624:	89ab      	ldrh	r3, [r5, #12]
 8007626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800762a:	81ab      	strh	r3, [r5, #12]
 800762c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007634:	89ab      	ldrh	r3, [r5, #12]
 8007636:	692a      	ldr	r2, [r5, #16]
 8007638:	6069      	str	r1, [r5, #4]
 800763a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800763e:	b29b      	uxth	r3, r3
 8007640:	81ab      	strh	r3, [r5, #12]
 8007642:	04db      	lsls	r3, r3, #19
 8007644:	602a      	str	r2, [r5, #0]
 8007646:	d5c3      	bpl.n	80075d0 <__sflush_r+0x6c>
 8007648:	6528      	str	r0, [r5, #80]	; 0x50
 800764a:	e7c1      	b.n	80075d0 <__sflush_r+0x6c>
 800764c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800764e:	2a00      	cmp	r2, #0
 8007650:	dc96      	bgt.n	8007580 <__sflush_r+0x1c>
 8007652:	e7e4      	b.n	800761e <__sflush_r+0xba>
 8007654:	2301      	movs	r3, #1
 8007656:	4640      	mov	r0, r8
 8007658:	69e9      	ldr	r1, [r5, #28]
 800765a:	47b0      	blx	r6
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	4602      	mov	r2, r0
 8007660:	d019      	beq.n	8007696 <__sflush_r+0x132>
 8007662:	89ab      	ldrh	r3, [r5, #12]
 8007664:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8007666:	e79a      	b.n	800759e <__sflush_r+0x3a>
 8007668:	f8d8 1000 	ldr.w	r1, [r8]
 800766c:	2900      	cmp	r1, #0
 800766e:	d0e1      	beq.n	8007634 <__sflush_r+0xd0>
 8007670:	291d      	cmp	r1, #29
 8007672:	d007      	beq.n	8007684 <__sflush_r+0x120>
 8007674:	2916      	cmp	r1, #22
 8007676:	d005      	beq.n	8007684 <__sflush_r+0x120>
 8007678:	89ab      	ldrh	r3, [r5, #12]
 800767a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800767e:	81ab      	strh	r3, [r5, #12]
 8007680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007684:	89ab      	ldrh	r3, [r5, #12]
 8007686:	692a      	ldr	r2, [r5, #16]
 8007688:	602a      	str	r2, [r5, #0]
 800768a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800768e:	2200      	movs	r2, #0
 8007690:	81ab      	strh	r3, [r5, #12]
 8007692:	606a      	str	r2, [r5, #4]
 8007694:	e79c      	b.n	80075d0 <__sflush_r+0x6c>
 8007696:	f8d8 3000 	ldr.w	r3, [r8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d0e1      	beq.n	8007662 <__sflush_r+0xfe>
 800769e:	2b1d      	cmp	r3, #29
 80076a0:	d007      	beq.n	80076b2 <__sflush_r+0x14e>
 80076a2:	2b16      	cmp	r3, #22
 80076a4:	d005      	beq.n	80076b2 <__sflush_r+0x14e>
 80076a6:	89ab      	ldrh	r3, [r5, #12]
 80076a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ac:	81ab      	strh	r3, [r5, #12]
 80076ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076b2:	f8c8 4000 	str.w	r4, [r8]
 80076b6:	e7b2      	b.n	800761e <__sflush_r+0xba>

080076b8 <_fflush_r>:
 80076b8:	b510      	push	{r4, lr}
 80076ba:	4604      	mov	r4, r0
 80076bc:	b082      	sub	sp, #8
 80076be:	b108      	cbz	r0, 80076c4 <_fflush_r+0xc>
 80076c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80076c2:	b153      	cbz	r3, 80076da <_fflush_r+0x22>
 80076c4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80076c8:	b908      	cbnz	r0, 80076ce <_fflush_r+0x16>
 80076ca:	b002      	add	sp, #8
 80076cc:	bd10      	pop	{r4, pc}
 80076ce:	4620      	mov	r0, r4
 80076d0:	b002      	add	sp, #8
 80076d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076d6:	f7ff bf45 	b.w	8007564 <__sflush_r>
 80076da:	9101      	str	r1, [sp, #4]
 80076dc:	f000 f8fc 	bl	80078d8 <__sinit>
 80076e0:	9901      	ldr	r1, [sp, #4]
 80076e2:	e7ef      	b.n	80076c4 <_fflush_r+0xc>

080076e4 <fflush>:
 80076e4:	b120      	cbz	r0, 80076f0 <fflush+0xc>
 80076e6:	4b05      	ldr	r3, [pc, #20]	; (80076fc <fflush+0x18>)
 80076e8:	4601      	mov	r1, r0
 80076ea:	6818      	ldr	r0, [r3, #0]
 80076ec:	f7ff bfe4 	b.w	80076b8 <_fflush_r>
 80076f0:	4b03      	ldr	r3, [pc, #12]	; (8007700 <fflush+0x1c>)
 80076f2:	4904      	ldr	r1, [pc, #16]	; (8007704 <fflush+0x20>)
 80076f4:	6818      	ldr	r0, [r3, #0]
 80076f6:	f000 bbff 	b.w	8007ef8 <_fwalk_reent>
 80076fa:	bf00      	nop
 80076fc:	200004b0 	.word	0x200004b0
 8007700:	0800c8f0 	.word	0x0800c8f0
 8007704:	080076b9 	.word	0x080076b9

08007708 <__fp_lock>:
 8007708:	2000      	movs	r0, #0
 800770a:	4770      	bx	lr

0800770c <__fp_unlock>:
 800770c:	2000      	movs	r0, #0
 800770e:	4770      	bx	lr

08007710 <_cleanup_r>:
 8007710:	4901      	ldr	r1, [pc, #4]	; (8007718 <_cleanup_r+0x8>)
 8007712:	f000 bbf1 	b.w	8007ef8 <_fwalk_reent>
 8007716:	bf00      	nop
 8007718:	0800b221 	.word	0x0800b221

0800771c <__sinit.part.1>:
 800771c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007720:	4b35      	ldr	r3, [pc, #212]	; (80077f8 <__sinit.part.1+0xdc>)
 8007722:	6845      	ldr	r5, [r0, #4]
 8007724:	63c3      	str	r3, [r0, #60]	; 0x3c
 8007726:	2400      	movs	r4, #0
 8007728:	4607      	mov	r7, r0
 800772a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 800772e:	2304      	movs	r3, #4
 8007730:	2103      	movs	r1, #3
 8007732:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8007736:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 800773a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 800773e:	b083      	sub	sp, #12
 8007740:	602c      	str	r4, [r5, #0]
 8007742:	606c      	str	r4, [r5, #4]
 8007744:	60ac      	str	r4, [r5, #8]
 8007746:	666c      	str	r4, [r5, #100]	; 0x64
 8007748:	81ec      	strh	r4, [r5, #14]
 800774a:	612c      	str	r4, [r5, #16]
 800774c:	616c      	str	r4, [r5, #20]
 800774e:	61ac      	str	r4, [r5, #24]
 8007750:	81ab      	strh	r3, [r5, #12]
 8007752:	4621      	mov	r1, r4
 8007754:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8007758:	2208      	movs	r2, #8
 800775a:	f7fc f85b 	bl	8003814 <memset>
 800775e:	68be      	ldr	r6, [r7, #8]
 8007760:	f8df b098 	ldr.w	fp, [pc, #152]	; 80077fc <__sinit.part.1+0xe0>
 8007764:	f8df a098 	ldr.w	sl, [pc, #152]	; 8007800 <__sinit.part.1+0xe4>
 8007768:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8007804 <__sinit.part.1+0xe8>
 800776c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8007808 <__sinit.part.1+0xec>
 8007770:	f8c5 b020 	str.w	fp, [r5, #32]
 8007774:	2301      	movs	r3, #1
 8007776:	2209      	movs	r2, #9
 8007778:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 800777c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8007780:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8007784:	61ed      	str	r5, [r5, #28]
 8007786:	4621      	mov	r1, r4
 8007788:	81f3      	strh	r3, [r6, #14]
 800778a:	81b2      	strh	r2, [r6, #12]
 800778c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8007790:	6034      	str	r4, [r6, #0]
 8007792:	6074      	str	r4, [r6, #4]
 8007794:	60b4      	str	r4, [r6, #8]
 8007796:	6674      	str	r4, [r6, #100]	; 0x64
 8007798:	6134      	str	r4, [r6, #16]
 800779a:	6174      	str	r4, [r6, #20]
 800779c:	61b4      	str	r4, [r6, #24]
 800779e:	2208      	movs	r2, #8
 80077a0:	9301      	str	r3, [sp, #4]
 80077a2:	f7fc f837 	bl	8003814 <memset>
 80077a6:	68fd      	ldr	r5, [r7, #12]
 80077a8:	61f6      	str	r6, [r6, #28]
 80077aa:	2012      	movs	r0, #18
 80077ac:	2202      	movs	r2, #2
 80077ae:	f8c6 b020 	str.w	fp, [r6, #32]
 80077b2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 80077b6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 80077ba:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 80077be:	4621      	mov	r1, r4
 80077c0:	81a8      	strh	r0, [r5, #12]
 80077c2:	81ea      	strh	r2, [r5, #14]
 80077c4:	602c      	str	r4, [r5, #0]
 80077c6:	606c      	str	r4, [r5, #4]
 80077c8:	60ac      	str	r4, [r5, #8]
 80077ca:	666c      	str	r4, [r5, #100]	; 0x64
 80077cc:	612c      	str	r4, [r5, #16]
 80077ce:	616c      	str	r4, [r5, #20]
 80077d0:	61ac      	str	r4, [r5, #24]
 80077d2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80077d6:	2208      	movs	r2, #8
 80077d8:	f7fc f81c 	bl	8003814 <memset>
 80077dc:	9b01      	ldr	r3, [sp, #4]
 80077de:	61ed      	str	r5, [r5, #28]
 80077e0:	f8c5 b020 	str.w	fp, [r5, #32]
 80077e4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80077e8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80077ec:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80077f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80077f2:	b003      	add	sp, #12
 80077f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f8:	08007711 	.word	0x08007711
 80077fc:	0800947d 	.word	0x0800947d
 8007800:	080094a5 	.word	0x080094a5
 8007804:	080094dd 	.word	0x080094dd
 8007808:	080094fd 	.word	0x080094fd

0800780c <__sfmoreglue>:
 800780c:	b570      	push	{r4, r5, r6, lr}
 800780e:	2368      	movs	r3, #104	; 0x68
 8007810:	1e4d      	subs	r5, r1, #1
 8007812:	fb03 f505 	mul.w	r5, r3, r5
 8007816:	460e      	mov	r6, r1
 8007818:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800781c:	f000 fc48 	bl	80080b0 <_malloc_r>
 8007820:	4604      	mov	r4, r0
 8007822:	b140      	cbz	r0, 8007836 <__sfmoreglue+0x2a>
 8007824:	2100      	movs	r1, #0
 8007826:	300c      	adds	r0, #12
 8007828:	6066      	str	r6, [r4, #4]
 800782a:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800782e:	6021      	str	r1, [r4, #0]
 8007830:	60a0      	str	r0, [r4, #8]
 8007832:	f7fb ffef 	bl	8003814 <memset>
 8007836:	4620      	mov	r0, r4
 8007838:	bd70      	pop	{r4, r5, r6, pc}
 800783a:	bf00      	nop

0800783c <__sfp>:
 800783c:	4b20      	ldr	r3, [pc, #128]	; (80078c0 <__sfp+0x84>)
 800783e:	b570      	push	{r4, r5, r6, lr}
 8007840:	681d      	ldr	r5, [r3, #0]
 8007842:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007844:	4606      	mov	r6, r0
 8007846:	b913      	cbnz	r3, 800784e <__sfp+0x12>
 8007848:	4628      	mov	r0, r5
 800784a:	f7ff ff67 	bl	800771c <__sinit.part.1>
 800784e:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 8007852:	686b      	ldr	r3, [r5, #4]
 8007854:	68ac      	ldr	r4, [r5, #8]
 8007856:	3b01      	subs	r3, #1
 8007858:	d505      	bpl.n	8007866 <__sfp+0x2a>
 800785a:	e021      	b.n	80078a0 <__sfp+0x64>
 800785c:	3b01      	subs	r3, #1
 800785e:	1c5a      	adds	r2, r3, #1
 8007860:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8007864:	d01c      	beq.n	80078a0 <__sfp+0x64>
 8007866:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800786a:	2a00      	cmp	r2, #0
 800786c:	d1f6      	bne.n	800785c <__sfp+0x20>
 800786e:	2500      	movs	r5, #0
 8007870:	2301      	movs	r3, #1
 8007872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007876:	81e2      	strh	r2, [r4, #14]
 8007878:	81a3      	strh	r3, [r4, #12]
 800787a:	6665      	str	r5, [r4, #100]	; 0x64
 800787c:	6025      	str	r5, [r4, #0]
 800787e:	60a5      	str	r5, [r4, #8]
 8007880:	6065      	str	r5, [r4, #4]
 8007882:	6125      	str	r5, [r4, #16]
 8007884:	6165      	str	r5, [r4, #20]
 8007886:	61a5      	str	r5, [r4, #24]
 8007888:	4629      	mov	r1, r5
 800788a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800788e:	2208      	movs	r2, #8
 8007890:	f7fb ffc0 	bl	8003814 <memset>
 8007894:	6325      	str	r5, [r4, #48]	; 0x30
 8007896:	6365      	str	r5, [r4, #52]	; 0x34
 8007898:	6465      	str	r5, [r4, #68]	; 0x44
 800789a:	64a5      	str	r5, [r4, #72]	; 0x48
 800789c:	4620      	mov	r0, r4
 800789e:	bd70      	pop	{r4, r5, r6, pc}
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	b10b      	cbz	r3, 80078a8 <__sfp+0x6c>
 80078a4:	461d      	mov	r5, r3
 80078a6:	e7d4      	b.n	8007852 <__sfp+0x16>
 80078a8:	4630      	mov	r0, r6
 80078aa:	2104      	movs	r1, #4
 80078ac:	f7ff ffae 	bl	800780c <__sfmoreglue>
 80078b0:	6028      	str	r0, [r5, #0]
 80078b2:	b108      	cbz	r0, 80078b8 <__sfp+0x7c>
 80078b4:	4605      	mov	r5, r0
 80078b6:	e7cc      	b.n	8007852 <__sfp+0x16>
 80078b8:	230c      	movs	r3, #12
 80078ba:	6033      	str	r3, [r6, #0]
 80078bc:	bd70      	pop	{r4, r5, r6, pc}
 80078be:	bf00      	nop
 80078c0:	0800c8f0 	.word	0x0800c8f0

080078c4 <_cleanup>:
 80078c4:	4b02      	ldr	r3, [pc, #8]	; (80078d0 <_cleanup+0xc>)
 80078c6:	4903      	ldr	r1, [pc, #12]	; (80078d4 <_cleanup+0x10>)
 80078c8:	6818      	ldr	r0, [r3, #0]
 80078ca:	f000 bb15 	b.w	8007ef8 <_fwalk_reent>
 80078ce:	bf00      	nop
 80078d0:	0800c8f0 	.word	0x0800c8f0
 80078d4:	0800b221 	.word	0x0800b221

080078d8 <__sinit>:
 80078d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80078da:	b103      	cbz	r3, 80078de <__sinit+0x6>
 80078dc:	4770      	bx	lr
 80078de:	f7ff bf1d 	b.w	800771c <__sinit.part.1>
 80078e2:	bf00      	nop

080078e4 <__sfp_lock_acquire>:
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop

080078e8 <__sfp_lock_release>:
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop

080078ec <__sinit_lock_acquire>:
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop

080078f0 <__sinit_lock_release>:
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop

080078f4 <__fp_lock_all>:
 80078f4:	4b02      	ldr	r3, [pc, #8]	; (8007900 <__fp_lock_all+0xc>)
 80078f6:	4903      	ldr	r1, [pc, #12]	; (8007904 <__fp_lock_all+0x10>)
 80078f8:	6818      	ldr	r0, [r3, #0]
 80078fa:	f000 bad7 	b.w	8007eac <_fwalk>
 80078fe:	bf00      	nop
 8007900:	200004b0 	.word	0x200004b0
 8007904:	08007709 	.word	0x08007709

08007908 <__fp_unlock_all>:
 8007908:	4b02      	ldr	r3, [pc, #8]	; (8007914 <__fp_unlock_all+0xc>)
 800790a:	4903      	ldr	r1, [pc, #12]	; (8007918 <__fp_unlock_all+0x10>)
 800790c:	6818      	ldr	r0, [r3, #0]
 800790e:	f000 bacd 	b.w	8007eac <_fwalk>
 8007912:	bf00      	nop
 8007914:	200004b0 	.word	0x200004b0
 8007918:	0800770d 	.word	0x0800770d

0800791c <__libc_fini_array>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	4b08      	ldr	r3, [pc, #32]	; (8007940 <__libc_fini_array+0x24>)
 8007920:	4d08      	ldr	r5, [pc, #32]	; (8007944 <__libc_fini_array+0x28>)
 8007922:	1aed      	subs	r5, r5, r3
 8007924:	10ac      	asrs	r4, r5, #2
 8007926:	bf18      	it	ne
 8007928:	18ed      	addne	r5, r5, r3
 800792a:	d005      	beq.n	8007938 <__libc_fini_array+0x1c>
 800792c:	3c01      	subs	r4, #1
 800792e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007932:	4798      	blx	r3
 8007934:	2c00      	cmp	r4, #0
 8007936:	d1f9      	bne.n	800792c <__libc_fini_array+0x10>
 8007938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800793c:	f005 b8ea 	b.w	800cb14 <_fini>
 8007940:	0800cb20 	.word	0x0800cb20
 8007944:	0800cb24 	.word	0x0800cb24

08007948 <_malloc_trim_r>:
 8007948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794a:	4f23      	ldr	r7, [pc, #140]	; (80079d8 <_malloc_trim_r+0x90>)
 800794c:	460c      	mov	r4, r1
 800794e:	4606      	mov	r6, r0
 8007950:	f000 feee 	bl	8008730 <__malloc_lock>
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	685d      	ldr	r5, [r3, #4]
 8007958:	f025 0503 	bic.w	r5, r5, #3
 800795c:	1b29      	subs	r1, r5, r4
 800795e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8007962:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8007966:	f021 010f 	bic.w	r1, r1, #15
 800796a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800796e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8007972:	db07      	blt.n	8007984 <_malloc_trim_r+0x3c>
 8007974:	4630      	mov	r0, r6
 8007976:	2100      	movs	r1, #0
 8007978:	f001 fd6e 	bl	8009458 <_sbrk_r>
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	442b      	add	r3, r5
 8007980:	4298      	cmp	r0, r3
 8007982:	d004      	beq.n	800798e <_malloc_trim_r+0x46>
 8007984:	4630      	mov	r0, r6
 8007986:	f000 fed5 	bl	8008734 <__malloc_unlock>
 800798a:	2000      	movs	r0, #0
 800798c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800798e:	4630      	mov	r0, r6
 8007990:	4261      	negs	r1, r4
 8007992:	f001 fd61 	bl	8009458 <_sbrk_r>
 8007996:	3001      	adds	r0, #1
 8007998:	d00d      	beq.n	80079b6 <_malloc_trim_r+0x6e>
 800799a:	4b10      	ldr	r3, [pc, #64]	; (80079dc <_malloc_trim_r+0x94>)
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	6819      	ldr	r1, [r3, #0]
 80079a0:	1b2d      	subs	r5, r5, r4
 80079a2:	f045 0501 	orr.w	r5, r5, #1
 80079a6:	4630      	mov	r0, r6
 80079a8:	1b09      	subs	r1, r1, r4
 80079aa:	6055      	str	r5, [r2, #4]
 80079ac:	6019      	str	r1, [r3, #0]
 80079ae:	f000 fec1 	bl	8008734 <__malloc_unlock>
 80079b2:	2001      	movs	r0, #1
 80079b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b6:	4630      	mov	r0, r6
 80079b8:	2100      	movs	r1, #0
 80079ba:	f001 fd4d 	bl	8009458 <_sbrk_r>
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	1a83      	subs	r3, r0, r2
 80079c2:	2b0f      	cmp	r3, #15
 80079c4:	ddde      	ble.n	8007984 <_malloc_trim_r+0x3c>
 80079c6:	4c06      	ldr	r4, [pc, #24]	; (80079e0 <_malloc_trim_r+0x98>)
 80079c8:	4904      	ldr	r1, [pc, #16]	; (80079dc <_malloc_trim_r+0x94>)
 80079ca:	6824      	ldr	r4, [r4, #0]
 80079cc:	f043 0301 	orr.w	r3, r3, #1
 80079d0:	1b00      	subs	r0, r0, r4
 80079d2:	6053      	str	r3, [r2, #4]
 80079d4:	6008      	str	r0, [r1, #0]
 80079d6:	e7d5      	b.n	8007984 <_malloc_trim_r+0x3c>
 80079d8:	20000530 	.word	0x20000530
 80079dc:	200104a8 	.word	0x200104a8
 80079e0:	2000093c 	.word	0x2000093c

080079e4 <_free_r>:
 80079e4:	2900      	cmp	r1, #0
 80079e6:	d04e      	beq.n	8007a86 <_free_r+0xa2>
 80079e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ec:	460c      	mov	r4, r1
 80079ee:	4680      	mov	r8, r0
 80079f0:	f000 fe9e 	bl	8008730 <__malloc_lock>
 80079f4:	f854 7c04 	ldr.w	r7, [r4, #-4]
 80079f8:	4962      	ldr	r1, [pc, #392]	; (8007b84 <_free_r+0x1a0>)
 80079fa:	f027 0201 	bic.w	r2, r7, #1
 80079fe:	f1a4 0508 	sub.w	r5, r4, #8
 8007a02:	18ab      	adds	r3, r5, r2
 8007a04:	688e      	ldr	r6, [r1, #8]
 8007a06:	6858      	ldr	r0, [r3, #4]
 8007a08:	429e      	cmp	r6, r3
 8007a0a:	f020 0003 	bic.w	r0, r0, #3
 8007a0e:	d05a      	beq.n	8007ac6 <_free_r+0xe2>
 8007a10:	07fe      	lsls	r6, r7, #31
 8007a12:	6058      	str	r0, [r3, #4]
 8007a14:	d40b      	bmi.n	8007a2e <_free_r+0x4a>
 8007a16:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8007a1a:	1bed      	subs	r5, r5, r7
 8007a1c:	f101 0e08 	add.w	lr, r1, #8
 8007a20:	68ac      	ldr	r4, [r5, #8]
 8007a22:	4574      	cmp	r4, lr
 8007a24:	443a      	add	r2, r7
 8007a26:	d067      	beq.n	8007af8 <_free_r+0x114>
 8007a28:	68ef      	ldr	r7, [r5, #12]
 8007a2a:	60e7      	str	r7, [r4, #12]
 8007a2c:	60bc      	str	r4, [r7, #8]
 8007a2e:	181c      	adds	r4, r3, r0
 8007a30:	6864      	ldr	r4, [r4, #4]
 8007a32:	07e4      	lsls	r4, r4, #31
 8007a34:	d40c      	bmi.n	8007a50 <_free_r+0x6c>
 8007a36:	4f54      	ldr	r7, [pc, #336]	; (8007b88 <_free_r+0x1a4>)
 8007a38:	689c      	ldr	r4, [r3, #8]
 8007a3a:	42bc      	cmp	r4, r7
 8007a3c:	4402      	add	r2, r0
 8007a3e:	d07c      	beq.n	8007b3a <_free_r+0x156>
 8007a40:	68d8      	ldr	r0, [r3, #12]
 8007a42:	60e0      	str	r0, [r4, #12]
 8007a44:	f042 0301 	orr.w	r3, r2, #1
 8007a48:	6084      	str	r4, [r0, #8]
 8007a4a:	606b      	str	r3, [r5, #4]
 8007a4c:	50aa      	str	r2, [r5, r2]
 8007a4e:	e003      	b.n	8007a58 <_free_r+0x74>
 8007a50:	f042 0301 	orr.w	r3, r2, #1
 8007a54:	606b      	str	r3, [r5, #4]
 8007a56:	50aa      	str	r2, [r5, r2]
 8007a58:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007a5c:	d214      	bcs.n	8007a88 <_free_r+0xa4>
 8007a5e:	08d2      	lsrs	r2, r2, #3
 8007a60:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8007a64:	6848      	ldr	r0, [r1, #4]
 8007a66:	689f      	ldr	r7, [r3, #8]
 8007a68:	60af      	str	r7, [r5, #8]
 8007a6a:	1092      	asrs	r2, r2, #2
 8007a6c:	2401      	movs	r4, #1
 8007a6e:	fa04 f202 	lsl.w	r2, r4, r2
 8007a72:	4310      	orrs	r0, r2
 8007a74:	60eb      	str	r3, [r5, #12]
 8007a76:	6048      	str	r0, [r1, #4]
 8007a78:	609d      	str	r5, [r3, #8]
 8007a7a:	60fd      	str	r5, [r7, #12]
 8007a7c:	4640      	mov	r0, r8
 8007a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a82:	f000 be57 	b.w	8008734 <__malloc_unlock>
 8007a86:	4770      	bx	lr
 8007a88:	0a53      	lsrs	r3, r2, #9
 8007a8a:	2b04      	cmp	r3, #4
 8007a8c:	d847      	bhi.n	8007b1e <_free_r+0x13a>
 8007a8e:	0993      	lsrs	r3, r2, #6
 8007a90:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8007a94:	0060      	lsls	r0, r4, #1
 8007a96:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8007a9a:	493a      	ldr	r1, [pc, #232]	; (8007b84 <_free_r+0x1a0>)
 8007a9c:	6883      	ldr	r3, [r0, #8]
 8007a9e:	4283      	cmp	r3, r0
 8007aa0:	d043      	beq.n	8007b2a <_free_r+0x146>
 8007aa2:	6859      	ldr	r1, [r3, #4]
 8007aa4:	f021 0103 	bic.w	r1, r1, #3
 8007aa8:	4291      	cmp	r1, r2
 8007aaa:	d902      	bls.n	8007ab2 <_free_r+0xce>
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	4298      	cmp	r0, r3
 8007ab0:	d1f7      	bne.n	8007aa2 <_free_r+0xbe>
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	60ea      	str	r2, [r5, #12]
 8007ab6:	60ab      	str	r3, [r5, #8]
 8007ab8:	4640      	mov	r0, r8
 8007aba:	6095      	str	r5, [r2, #8]
 8007abc:	60dd      	str	r5, [r3, #12]
 8007abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac2:	f000 be37 	b.w	8008734 <__malloc_unlock>
 8007ac6:	07ff      	lsls	r7, r7, #31
 8007ac8:	4402      	add	r2, r0
 8007aca:	d407      	bmi.n	8007adc <_free_r+0xf8>
 8007acc:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8007ad0:	1aed      	subs	r5, r5, r3
 8007ad2:	441a      	add	r2, r3
 8007ad4:	68a8      	ldr	r0, [r5, #8]
 8007ad6:	68eb      	ldr	r3, [r5, #12]
 8007ad8:	60c3      	str	r3, [r0, #12]
 8007ada:	6098      	str	r0, [r3, #8]
 8007adc:	4b2b      	ldr	r3, [pc, #172]	; (8007b8c <_free_r+0x1a8>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f042 0001 	orr.w	r0, r2, #1
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	6068      	str	r0, [r5, #4]
 8007ae8:	608d      	str	r5, [r1, #8]
 8007aea:	d3c7      	bcc.n	8007a7c <_free_r+0x98>
 8007aec:	4b28      	ldr	r3, [pc, #160]	; (8007b90 <_free_r+0x1ac>)
 8007aee:	4640      	mov	r0, r8
 8007af0:	6819      	ldr	r1, [r3, #0]
 8007af2:	f7ff ff29 	bl	8007948 <_malloc_trim_r>
 8007af6:	e7c1      	b.n	8007a7c <_free_r+0x98>
 8007af8:	1819      	adds	r1, r3, r0
 8007afa:	6849      	ldr	r1, [r1, #4]
 8007afc:	07c9      	lsls	r1, r1, #31
 8007afe:	d409      	bmi.n	8007b14 <_free_r+0x130>
 8007b00:	68d9      	ldr	r1, [r3, #12]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	4402      	add	r2, r0
 8007b06:	f042 0001 	orr.w	r0, r2, #1
 8007b0a:	60d9      	str	r1, [r3, #12]
 8007b0c:	608b      	str	r3, [r1, #8]
 8007b0e:	6068      	str	r0, [r5, #4]
 8007b10:	50aa      	str	r2, [r5, r2]
 8007b12:	e7b3      	b.n	8007a7c <_free_r+0x98>
 8007b14:	f042 0301 	orr.w	r3, r2, #1
 8007b18:	606b      	str	r3, [r5, #4]
 8007b1a:	50aa      	str	r2, [r5, r2]
 8007b1c:	e7ae      	b.n	8007a7c <_free_r+0x98>
 8007b1e:	2b14      	cmp	r3, #20
 8007b20:	d814      	bhi.n	8007b4c <_free_r+0x168>
 8007b22:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 8007b26:	0060      	lsls	r0, r4, #1
 8007b28:	e7b5      	b.n	8007a96 <_free_r+0xb2>
 8007b2a:	684a      	ldr	r2, [r1, #4]
 8007b2c:	10a4      	asrs	r4, r4, #2
 8007b2e:	2001      	movs	r0, #1
 8007b30:	40a0      	lsls	r0, r4
 8007b32:	4302      	orrs	r2, r0
 8007b34:	604a      	str	r2, [r1, #4]
 8007b36:	461a      	mov	r2, r3
 8007b38:	e7bc      	b.n	8007ab4 <_free_r+0xd0>
 8007b3a:	f042 0301 	orr.w	r3, r2, #1
 8007b3e:	614d      	str	r5, [r1, #20]
 8007b40:	610d      	str	r5, [r1, #16]
 8007b42:	60ec      	str	r4, [r5, #12]
 8007b44:	60ac      	str	r4, [r5, #8]
 8007b46:	606b      	str	r3, [r5, #4]
 8007b48:	50aa      	str	r2, [r5, r2]
 8007b4a:	e797      	b.n	8007a7c <_free_r+0x98>
 8007b4c:	2b54      	cmp	r3, #84	; 0x54
 8007b4e:	d804      	bhi.n	8007b5a <_free_r+0x176>
 8007b50:	0b13      	lsrs	r3, r2, #12
 8007b52:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8007b56:	0060      	lsls	r0, r4, #1
 8007b58:	e79d      	b.n	8007a96 <_free_r+0xb2>
 8007b5a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007b5e:	d804      	bhi.n	8007b6a <_free_r+0x186>
 8007b60:	0bd3      	lsrs	r3, r2, #15
 8007b62:	f103 0477 	add.w	r4, r3, #119	; 0x77
 8007b66:	0060      	lsls	r0, r4, #1
 8007b68:	e795      	b.n	8007a96 <_free_r+0xb2>
 8007b6a:	f240 5054 	movw	r0, #1364	; 0x554
 8007b6e:	4283      	cmp	r3, r0
 8007b70:	d804      	bhi.n	8007b7c <_free_r+0x198>
 8007b72:	0c93      	lsrs	r3, r2, #18
 8007b74:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8007b78:	0060      	lsls	r0, r4, #1
 8007b7a:	e78c      	b.n	8007a96 <_free_r+0xb2>
 8007b7c:	20fc      	movs	r0, #252	; 0xfc
 8007b7e:	247e      	movs	r4, #126	; 0x7e
 8007b80:	e789      	b.n	8007a96 <_free_r+0xb2>
 8007b82:	bf00      	nop
 8007b84:	20000530 	.word	0x20000530
 8007b88:	20000538 	.word	0x20000538
 8007b8c:	20000938 	.word	0x20000938
 8007b90:	200104a4 	.word	0x200104a4

08007b94 <__sfvwrite_r>:
 8007b94:	6893      	ldr	r3, [r2, #8]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d07a      	beq.n	8007c90 <__sfvwrite_r+0xfc>
 8007b9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9e:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8007ba2:	f01e 0f08 	tst.w	lr, #8
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	460c      	mov	r4, r1
 8007baa:	4681      	mov	r9, r0
 8007bac:	4616      	mov	r6, r2
 8007bae:	d026      	beq.n	8007bfe <__sfvwrite_r+0x6a>
 8007bb0:	690b      	ldr	r3, [r1, #16]
 8007bb2:	b323      	cbz	r3, 8007bfe <__sfvwrite_r+0x6a>
 8007bb4:	f00e 0802 	and.w	r8, lr, #2
 8007bb8:	fa1f f088 	uxth.w	r0, r8
 8007bbc:	6835      	ldr	r5, [r6, #0]
 8007bbe:	b370      	cbz	r0, 8007c1e <__sfvwrite_r+0x8a>
 8007bc0:	f04f 0a00 	mov.w	sl, #0
 8007bc4:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 8007ea8 <__sfvwrite_r+0x314>
 8007bc8:	46d0      	mov	r8, sl
 8007bca:	45d8      	cmp	r8, fp
 8007bcc:	4643      	mov	r3, r8
 8007bce:	4652      	mov	r2, sl
 8007bd0:	bf28      	it	cs
 8007bd2:	465b      	movcs	r3, fp
 8007bd4:	4648      	mov	r0, r9
 8007bd6:	f1b8 0f00 	cmp.w	r8, #0
 8007bda:	d053      	beq.n	8007c84 <__sfvwrite_r+0xf0>
 8007bdc:	69e1      	ldr	r1, [r4, #28]
 8007bde:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8007be0:	47b8      	blx	r7
 8007be2:	2800      	cmp	r0, #0
 8007be4:	dd73      	ble.n	8007cce <__sfvwrite_r+0x13a>
 8007be6:	68b3      	ldr	r3, [r6, #8]
 8007be8:	1a1b      	subs	r3, r3, r0
 8007bea:	4482      	add	sl, r0
 8007bec:	ebc0 0808 	rsb	r8, r0, r8
 8007bf0:	60b3      	str	r3, [r6, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e9      	bne.n	8007bca <__sfvwrite_r+0x36>
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	b003      	add	sp, #12
 8007bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bfe:	4648      	mov	r0, r9
 8007c00:	4621      	mov	r1, r4
 8007c02:	f7fe fbeb 	bl	80063dc <__swsetup_r>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	f040 8145 	bne.w	8007e96 <__sfvwrite_r+0x302>
 8007c0c:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8007c10:	6835      	ldr	r5, [r6, #0]
 8007c12:	f00e 0802 	and.w	r8, lr, #2
 8007c16:	fa1f f088 	uxth.w	r0, r8
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	d1d0      	bne.n	8007bc0 <__sfvwrite_r+0x2c>
 8007c1e:	f01e 0b01 	ands.w	fp, lr, #1
 8007c22:	d15d      	bne.n	8007ce0 <__sfvwrite_r+0x14c>
 8007c24:	46d8      	mov	r8, fp
 8007c26:	f1b8 0f00 	cmp.w	r8, #0
 8007c2a:	d025      	beq.n	8007c78 <__sfvwrite_r+0xe4>
 8007c2c:	f41e 7f00 	tst.w	lr, #512	; 0x200
 8007c30:	68a7      	ldr	r7, [r4, #8]
 8007c32:	d02f      	beq.n	8007c94 <__sfvwrite_r+0x100>
 8007c34:	45b8      	cmp	r8, r7
 8007c36:	46ba      	mov	sl, r7
 8007c38:	f0c0 80a9 	bcc.w	8007d8e <__sfvwrite_r+0x1fa>
 8007c3c:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 8007c40:	f040 80b6 	bne.w	8007db0 <__sfvwrite_r+0x21c>
 8007c44:	6820      	ldr	r0, [r4, #0]
 8007c46:	4652      	mov	r2, sl
 8007c48:	4659      	mov	r1, fp
 8007c4a:	f000 fd0d 	bl	8008668 <memmove>
 8007c4e:	68a0      	ldr	r0, [r4, #8]
 8007c50:	6822      	ldr	r2, [r4, #0]
 8007c52:	1bc0      	subs	r0, r0, r7
 8007c54:	eb02 030a 	add.w	r3, r2, sl
 8007c58:	60a0      	str	r0, [r4, #8]
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	4640      	mov	r0, r8
 8007c5e:	68b3      	ldr	r3, [r6, #8]
 8007c60:	1a1b      	subs	r3, r3, r0
 8007c62:	4483      	add	fp, r0
 8007c64:	ebc0 0808 	rsb	r8, r0, r8
 8007c68:	60b3      	str	r3, [r6, #8]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d0c3      	beq.n	8007bf6 <__sfvwrite_r+0x62>
 8007c6e:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8007c72:	f1b8 0f00 	cmp.w	r8, #0
 8007c76:	d1d9      	bne.n	8007c2c <__sfvwrite_r+0x98>
 8007c78:	f8d5 b000 	ldr.w	fp, [r5]
 8007c7c:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8007c80:	3508      	adds	r5, #8
 8007c82:	e7d0      	b.n	8007c26 <__sfvwrite_r+0x92>
 8007c84:	f8d5 a000 	ldr.w	sl, [r5]
 8007c88:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8007c8c:	3508      	adds	r5, #8
 8007c8e:	e79c      	b.n	8007bca <__sfvwrite_r+0x36>
 8007c90:	2000      	movs	r0, #0
 8007c92:	4770      	bx	lr
 8007c94:	6820      	ldr	r0, [r4, #0]
 8007c96:	6923      	ldr	r3, [r4, #16]
 8007c98:	4298      	cmp	r0, r3
 8007c9a:	d803      	bhi.n	8007ca4 <__sfvwrite_r+0x110>
 8007c9c:	6962      	ldr	r2, [r4, #20]
 8007c9e:	4590      	cmp	r8, r2
 8007ca0:	f080 80b9 	bcs.w	8007e16 <__sfvwrite_r+0x282>
 8007ca4:	4547      	cmp	r7, r8
 8007ca6:	bf28      	it	cs
 8007ca8:	4647      	movcs	r7, r8
 8007caa:	463a      	mov	r2, r7
 8007cac:	4659      	mov	r1, fp
 8007cae:	f000 fcdb 	bl	8008668 <memmove>
 8007cb2:	68a3      	ldr	r3, [r4, #8]
 8007cb4:	6822      	ldr	r2, [r4, #0]
 8007cb6:	1bdb      	subs	r3, r3, r7
 8007cb8:	443a      	add	r2, r7
 8007cba:	60a3      	str	r3, [r4, #8]
 8007cbc:	6022      	str	r2, [r4, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d14a      	bne.n	8007d58 <__sfvwrite_r+0x1c4>
 8007cc2:	4648      	mov	r0, r9
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	f7ff fcf7 	bl	80076b8 <_fflush_r>
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d044      	beq.n	8007d58 <__sfvwrite_r+0x1c4>
 8007cce:	89a3      	ldrh	r3, [r4, #12]
 8007cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cd8:	81a3      	strh	r3, [r4, #12]
 8007cda:	b003      	add	sp, #12
 8007cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce0:	4680      	mov	r8, r0
 8007ce2:	9000      	str	r0, [sp, #0]
 8007ce4:	4683      	mov	fp, r0
 8007ce6:	4682      	mov	sl, r0
 8007ce8:	f1ba 0f00 	cmp.w	sl, #0
 8007cec:	d02c      	beq.n	8007d48 <__sfvwrite_r+0x1b4>
 8007cee:	9b00      	ldr	r3, [sp, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d050      	beq.n	8007d96 <__sfvwrite_r+0x202>
 8007cf4:	6820      	ldr	r0, [r4, #0]
 8007cf6:	6921      	ldr	r1, [r4, #16]
 8007cf8:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8007cfc:	6962      	ldr	r2, [r4, #20]
 8007cfe:	45d0      	cmp	r8, sl
 8007d00:	4643      	mov	r3, r8
 8007d02:	bf28      	it	cs
 8007d04:	4653      	movcs	r3, sl
 8007d06:	4288      	cmp	r0, r1
 8007d08:	461f      	mov	r7, r3
 8007d0a:	d904      	bls.n	8007d16 <__sfvwrite_r+0x182>
 8007d0c:	eb0e 0c02 	add.w	ip, lr, r2
 8007d10:	4563      	cmp	r3, ip
 8007d12:	f300 8092 	bgt.w	8007e3a <__sfvwrite_r+0x2a6>
 8007d16:	4293      	cmp	r3, r2
 8007d18:	db20      	blt.n	8007d5c <__sfvwrite_r+0x1c8>
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8007d1e:	69e1      	ldr	r1, [r4, #28]
 8007d20:	4648      	mov	r0, r9
 8007d22:	465a      	mov	r2, fp
 8007d24:	47b8      	blx	r7
 8007d26:	1e07      	subs	r7, r0, #0
 8007d28:	ddd1      	ble.n	8007cce <__sfvwrite_r+0x13a>
 8007d2a:	ebb8 0807 	subs.w	r8, r8, r7
 8007d2e:	d025      	beq.n	8007d7c <__sfvwrite_r+0x1e8>
 8007d30:	68b3      	ldr	r3, [r6, #8]
 8007d32:	1bdb      	subs	r3, r3, r7
 8007d34:	44bb      	add	fp, r7
 8007d36:	ebc7 0a0a 	rsb	sl, r7, sl
 8007d3a:	60b3      	str	r3, [r6, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f43f af5a 	beq.w	8007bf6 <__sfvwrite_r+0x62>
 8007d42:	f1ba 0f00 	cmp.w	sl, #0
 8007d46:	d1d2      	bne.n	8007cee <__sfvwrite_r+0x15a>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	f8d5 b000 	ldr.w	fp, [r5]
 8007d4e:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	3508      	adds	r5, #8
 8007d56:	e7c7      	b.n	8007ce8 <__sfvwrite_r+0x154>
 8007d58:	4638      	mov	r0, r7
 8007d5a:	e780      	b.n	8007c5e <__sfvwrite_r+0xca>
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	4659      	mov	r1, fp
 8007d60:	9301      	str	r3, [sp, #4]
 8007d62:	f000 fc81 	bl	8008668 <memmove>
 8007d66:	68a2      	ldr	r2, [r4, #8]
 8007d68:	6821      	ldr	r1, [r4, #0]
 8007d6a:	9b01      	ldr	r3, [sp, #4]
 8007d6c:	ebb8 0807 	subs.w	r8, r8, r7
 8007d70:	eba2 0203 	sub.w	r2, r2, r3
 8007d74:	440b      	add	r3, r1
 8007d76:	60a2      	str	r2, [r4, #8]
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	d1d9      	bne.n	8007d30 <__sfvwrite_r+0x19c>
 8007d7c:	4648      	mov	r0, r9
 8007d7e:	4621      	mov	r1, r4
 8007d80:	f7ff fc9a 	bl	80076b8 <_fflush_r>
 8007d84:	2800      	cmp	r0, #0
 8007d86:	d1a2      	bne.n	8007cce <__sfvwrite_r+0x13a>
 8007d88:	f8cd 8000 	str.w	r8, [sp]
 8007d8c:	e7d0      	b.n	8007d30 <__sfvwrite_r+0x19c>
 8007d8e:	6820      	ldr	r0, [r4, #0]
 8007d90:	4647      	mov	r7, r8
 8007d92:	46c2      	mov	sl, r8
 8007d94:	e757      	b.n	8007c46 <__sfvwrite_r+0xb2>
 8007d96:	4658      	mov	r0, fp
 8007d98:	210a      	movs	r1, #10
 8007d9a:	4652      	mov	r2, sl
 8007d9c:	f000 fc1a 	bl	80085d4 <memchr>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d073      	beq.n	8007e8c <__sfvwrite_r+0x2f8>
 8007da4:	3001      	adds	r0, #1
 8007da6:	2301      	movs	r3, #1
 8007da8:	ebcb 0800 	rsb	r8, fp, r0
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	e7a1      	b.n	8007cf4 <__sfvwrite_r+0x160>
 8007db0:	6967      	ldr	r7, [r4, #20]
 8007db2:	6921      	ldr	r1, [r4, #16]
 8007db4:	6823      	ldr	r3, [r4, #0]
 8007db6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8007dba:	1a5b      	subs	r3, r3, r1
 8007dbc:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8007dc0:	1c58      	adds	r0, r3, #1
 8007dc2:	107f      	asrs	r7, r7, #1
 8007dc4:	4440      	add	r0, r8
 8007dc6:	4287      	cmp	r7, r0
 8007dc8:	463a      	mov	r2, r7
 8007dca:	bf3c      	itt	cc
 8007dcc:	4607      	movcc	r7, r0
 8007dce:	463a      	movcc	r2, r7
 8007dd0:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	d046      	beq.n	8007e66 <__sfvwrite_r+0x2d2>
 8007dd8:	4611      	mov	r1, r2
 8007dda:	4648      	mov	r0, r9
 8007ddc:	f000 f968 	bl	80080b0 <_malloc_r>
 8007de0:	9b00      	ldr	r3, [sp, #0]
 8007de2:	4682      	mov	sl, r0
 8007de4:	2800      	cmp	r0, #0
 8007de6:	d059      	beq.n	8007e9c <__sfvwrite_r+0x308>
 8007de8:	461a      	mov	r2, r3
 8007dea:	6921      	ldr	r1, [r4, #16]
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	f7fb fc77 	bl	80036e0 <memcpy>
 8007df2:	89a2      	ldrh	r2, [r4, #12]
 8007df4:	9b00      	ldr	r3, [sp, #0]
 8007df6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007dfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007dfe:	81a2      	strh	r2, [r4, #12]
 8007e00:	eb0a 0003 	add.w	r0, sl, r3
 8007e04:	1afb      	subs	r3, r7, r3
 8007e06:	f8c4 a010 	str.w	sl, [r4, #16]
 8007e0a:	6167      	str	r7, [r4, #20]
 8007e0c:	6020      	str	r0, [r4, #0]
 8007e0e:	60a3      	str	r3, [r4, #8]
 8007e10:	4647      	mov	r7, r8
 8007e12:	46c2      	mov	sl, r8
 8007e14:	e717      	b.n	8007c46 <__sfvwrite_r+0xb2>
 8007e16:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007e1a:	4543      	cmp	r3, r8
 8007e1c:	bf28      	it	cs
 8007e1e:	4643      	movcs	r3, r8
 8007e20:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8007e22:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e26:	4648      	mov	r0, r9
 8007e28:	fb03 f302 	mul.w	r3, r3, r2
 8007e2c:	69e1      	ldr	r1, [r4, #28]
 8007e2e:	465a      	mov	r2, fp
 8007e30:	47b8      	blx	r7
 8007e32:	2800      	cmp	r0, #0
 8007e34:	f73f af13 	bgt.w	8007c5e <__sfvwrite_r+0xca>
 8007e38:	e749      	b.n	8007cce <__sfvwrite_r+0x13a>
 8007e3a:	4662      	mov	r2, ip
 8007e3c:	4659      	mov	r1, fp
 8007e3e:	f8cd c004 	str.w	ip, [sp, #4]
 8007e42:	f000 fc11 	bl	8008668 <memmove>
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007e4c:	4463      	add	r3, ip
 8007e4e:	6023      	str	r3, [r4, #0]
 8007e50:	4648      	mov	r0, r9
 8007e52:	4621      	mov	r1, r4
 8007e54:	f7ff fc30 	bl	80076b8 <_fflush_r>
 8007e58:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	f47f af36 	bne.w	8007cce <__sfvwrite_r+0x13a>
 8007e62:	4667      	mov	r7, ip
 8007e64:	e761      	b.n	8007d2a <__sfvwrite_r+0x196>
 8007e66:	4648      	mov	r0, r9
 8007e68:	f001 f8d2 	bl	8009010 <_realloc_r>
 8007e6c:	9b00      	ldr	r3, [sp, #0]
 8007e6e:	4682      	mov	sl, r0
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d1c5      	bne.n	8007e00 <__sfvwrite_r+0x26c>
 8007e74:	4648      	mov	r0, r9
 8007e76:	6921      	ldr	r1, [r4, #16]
 8007e78:	f7ff fdb4 	bl	80079e4 <_free_r>
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	220c      	movs	r2, #12
 8007e80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	f8c9 2000 	str.w	r2, [r9]
 8007e8a:	e721      	b.n	8007cd0 <__sfvwrite_r+0x13c>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	f10a 0801 	add.w	r8, sl, #1
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	e72e      	b.n	8007cf4 <__sfvwrite_r+0x160>
 8007e96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e9a:	e6ad      	b.n	8007bf8 <__sfvwrite_r+0x64>
 8007e9c:	230c      	movs	r3, #12
 8007e9e:	f8c9 3000 	str.w	r3, [r9]
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	e714      	b.n	8007cd0 <__sfvwrite_r+0x13c>
 8007ea6:	bf00      	nop
 8007ea8:	7ffffc00 	.word	0x7ffffc00

08007eac <_fwalk>:
 8007eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8007eb4:	d01b      	beq.n	8007eee <_fwalk+0x42>
 8007eb6:	4688      	mov	r8, r1
 8007eb8:	2600      	movs	r6, #0
 8007eba:	687d      	ldr	r5, [r7, #4]
 8007ebc:	68bc      	ldr	r4, [r7, #8]
 8007ebe:	3d01      	subs	r5, #1
 8007ec0:	d40f      	bmi.n	8007ee2 <_fwalk+0x36>
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8007eca:	d906      	bls.n	8007eda <_fwalk+0x2e>
 8007ecc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	d001      	beq.n	8007eda <_fwalk+0x2e>
 8007ed6:	47c0      	blx	r8
 8007ed8:	4306      	orrs	r6, r0
 8007eda:	1c6b      	adds	r3, r5, #1
 8007edc:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8007ee0:	d1ef      	bne.n	8007ec2 <_fwalk+0x16>
 8007ee2:	683f      	ldr	r7, [r7, #0]
 8007ee4:	2f00      	cmp	r7, #0
 8007ee6:	d1e8      	bne.n	8007eba <_fwalk+0xe>
 8007ee8:	4630      	mov	r0, r6
 8007eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eee:	463e      	mov	r6, r7
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef6:	bf00      	nop

08007ef8 <_fwalk_reent>:
 8007ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007efc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8007f00:	d01f      	beq.n	8007f42 <_fwalk_reent+0x4a>
 8007f02:	4688      	mov	r8, r1
 8007f04:	4606      	mov	r6, r0
 8007f06:	f04f 0900 	mov.w	r9, #0
 8007f0a:	687d      	ldr	r5, [r7, #4]
 8007f0c:	68bc      	ldr	r4, [r7, #8]
 8007f0e:	3d01      	subs	r5, #1
 8007f10:	d411      	bmi.n	8007f36 <_fwalk_reent+0x3e>
 8007f12:	89a3      	ldrh	r3, [r4, #12]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8007f1a:	d908      	bls.n	8007f2e <_fwalk_reent+0x36>
 8007f1c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8007f20:	3301      	adds	r3, #1
 8007f22:	4621      	mov	r1, r4
 8007f24:	4630      	mov	r0, r6
 8007f26:	d002      	beq.n	8007f2e <_fwalk_reent+0x36>
 8007f28:	47c0      	blx	r8
 8007f2a:	ea49 0900 	orr.w	r9, r9, r0
 8007f2e:	1c6b      	adds	r3, r5, #1
 8007f30:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8007f34:	d1ed      	bne.n	8007f12 <_fwalk_reent+0x1a>
 8007f36:	683f      	ldr	r7, [r7, #0]
 8007f38:	2f00      	cmp	r7, #0
 8007f3a:	d1e6      	bne.n	8007f0a <_fwalk_reent+0x12>
 8007f3c:	4648      	mov	r0, r9
 8007f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f42:	46b9      	mov	r9, r7
 8007f44:	4648      	mov	r0, r9
 8007f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f4a:	bf00      	nop

08007f4c <_setlocale_r>:
 8007f4c:	b1c2      	cbz	r2, 8007f80 <_setlocale_r+0x34>
 8007f4e:	b510      	push	{r4, lr}
 8007f50:	4610      	mov	r0, r2
 8007f52:	490c      	ldr	r1, [pc, #48]	; (8007f84 <_setlocale_r+0x38>)
 8007f54:	4614      	mov	r4, r2
 8007f56:	f001 fae7 	bl	8009528 <strcmp>
 8007f5a:	b908      	cbnz	r0, 8007f60 <_setlocale_r+0x14>
 8007f5c:	480a      	ldr	r0, [pc, #40]	; (8007f88 <_setlocale_r+0x3c>)
 8007f5e:	bd10      	pop	{r4, pc}
 8007f60:	4620      	mov	r0, r4
 8007f62:	4909      	ldr	r1, [pc, #36]	; (8007f88 <_setlocale_r+0x3c>)
 8007f64:	f001 fae0 	bl	8009528 <strcmp>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d0f7      	beq.n	8007f5c <_setlocale_r+0x10>
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	4907      	ldr	r1, [pc, #28]	; (8007f8c <_setlocale_r+0x40>)
 8007f70:	f001 fada 	bl	8009528 <strcmp>
 8007f74:	4b04      	ldr	r3, [pc, #16]	; (8007f88 <_setlocale_r+0x3c>)
 8007f76:	2800      	cmp	r0, #0
 8007f78:	bf0c      	ite	eq
 8007f7a:	4618      	moveq	r0, r3
 8007f7c:	2000      	movne	r0, #0
 8007f7e:	bd10      	pop	{r4, pc}
 8007f80:	4801      	ldr	r0, [pc, #4]	; (8007f88 <_setlocale_r+0x3c>)
 8007f82:	4770      	bx	lr
 8007f84:	0800c988 	.word	0x0800c988
 8007f88:	0800c8ec 	.word	0x0800c8ec
 8007f8c:	0800c66c 	.word	0x0800c66c

08007f90 <__locale_charset>:
 8007f90:	4800      	ldr	r0, [pc, #0]	; (8007f94 <__locale_charset+0x4>)
 8007f92:	4770      	bx	lr
 8007f94:	2000050c 	.word	0x2000050c

08007f98 <__locale_mb_cur_max>:
 8007f98:	4b01      	ldr	r3, [pc, #4]	; (8007fa0 <__locale_mb_cur_max+0x8>)
 8007f9a:	6818      	ldr	r0, [r3, #0]
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	2000052c 	.word	0x2000052c

08007fa4 <__locale_msgcharset>:
 8007fa4:	4800      	ldr	r0, [pc, #0]	; (8007fa8 <__locale_msgcharset+0x4>)
 8007fa6:	4770      	bx	lr
 8007fa8:	200004b4 	.word	0x200004b4

08007fac <__locale_cjk_lang>:
 8007fac:	2000      	movs	r0, #0
 8007fae:	4770      	bx	lr

08007fb0 <_localeconv_r>:
 8007fb0:	4800      	ldr	r0, [pc, #0]	; (8007fb4 <_localeconv_r+0x4>)
 8007fb2:	4770      	bx	lr
 8007fb4:	200004d4 	.word	0x200004d4

08007fb8 <setlocale>:
 8007fb8:	4b02      	ldr	r3, [pc, #8]	; (8007fc4 <setlocale+0xc>)
 8007fba:	460a      	mov	r2, r1
 8007fbc:	4601      	mov	r1, r0
 8007fbe:	6818      	ldr	r0, [r3, #0]
 8007fc0:	f7ff bfc4 	b.w	8007f4c <_setlocale_r>
 8007fc4:	200004b0 	.word	0x200004b0

08007fc8 <localeconv>:
 8007fc8:	4800      	ldr	r0, [pc, #0]	; (8007fcc <localeconv+0x4>)
 8007fca:	4770      	bx	lr
 8007fcc:	200004d4 	.word	0x200004d4

08007fd0 <__smakebuf_r>:
 8007fd0:	898b      	ldrh	r3, [r1, #12]
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	f012 0f02 	tst.w	r2, #2
 8007fd8:	d13c      	bne.n	8008054 <__smakebuf_r+0x84>
 8007fda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fdc:	460c      	mov	r4, r1
 8007fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe2:	2900      	cmp	r1, #0
 8007fe4:	b091      	sub	sp, #68	; 0x44
 8007fe6:	4605      	mov	r5, r0
 8007fe8:	db19      	blt.n	800801e <__smakebuf_r+0x4e>
 8007fea:	aa01      	add	r2, sp, #4
 8007fec:	f003 f9e0 	bl	800b3b0 <_fstat_r>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	db12      	blt.n	800801a <__smakebuf_r+0x4a>
 8007ff4:	9b02      	ldr	r3, [sp, #8]
 8007ff6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ffe:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 8008002:	fab7 f787 	clz	r7, r7
 8008006:	ea4f 1757 	mov.w	r7, r7, lsr #5
 800800a:	d02a      	beq.n	8008062 <__smakebuf_r+0x92>
 800800c:	89a3      	ldrh	r3, [r4, #12]
 800800e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008012:	81a3      	strh	r3, [r4, #12]
 8008014:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8008018:	e00b      	b.n	8008032 <__smakebuf_r+0x62>
 800801a:	89a3      	ldrh	r3, [r4, #12]
 800801c:	b29a      	uxth	r2, r3
 800801e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008022:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008026:	81a3      	strh	r3, [r4, #12]
 8008028:	bf0c      	ite	eq
 800802a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 800802e:	2640      	movne	r6, #64	; 0x40
 8008030:	2700      	movs	r7, #0
 8008032:	4628      	mov	r0, r5
 8008034:	4631      	mov	r1, r6
 8008036:	f000 f83b 	bl	80080b0 <_malloc_r>
 800803a:	89a3      	ldrh	r3, [r4, #12]
 800803c:	b340      	cbz	r0, 8008090 <__smakebuf_r+0xc0>
 800803e:	4a1a      	ldr	r2, [pc, #104]	; (80080a8 <__smakebuf_r+0xd8>)
 8008040:	63ea      	str	r2, [r5, #60]	; 0x3c
 8008042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008046:	81a3      	strh	r3, [r4, #12]
 8008048:	6020      	str	r0, [r4, #0]
 800804a:	6120      	str	r0, [r4, #16]
 800804c:	6166      	str	r6, [r4, #20]
 800804e:	b99f      	cbnz	r7, 8008078 <__smakebuf_r+0xa8>
 8008050:	b011      	add	sp, #68	; 0x44
 8008052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008054:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8008058:	2201      	movs	r2, #1
 800805a:	600b      	str	r3, [r1, #0]
 800805c:	610b      	str	r3, [r1, #16]
 800805e:	614a      	str	r2, [r1, #20]
 8008060:	4770      	bx	lr
 8008062:	4b12      	ldr	r3, [pc, #72]	; (80080ac <__smakebuf_r+0xdc>)
 8008064:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008066:	429a      	cmp	r2, r3
 8008068:	d1d0      	bne.n	800800c <__smakebuf_r+0x3c>
 800806a:	89a3      	ldrh	r3, [r4, #12]
 800806c:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8008070:	4333      	orrs	r3, r6
 8008072:	81a3      	strh	r3, [r4, #12]
 8008074:	64e6      	str	r6, [r4, #76]	; 0x4c
 8008076:	e7dc      	b.n	8008032 <__smakebuf_r+0x62>
 8008078:	4628      	mov	r0, r5
 800807a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800807e:	f003 f9ab 	bl	800b3d8 <_isatty_r>
 8008082:	2800      	cmp	r0, #0
 8008084:	d0e4      	beq.n	8008050 <__smakebuf_r+0x80>
 8008086:	89a3      	ldrh	r3, [r4, #12]
 8008088:	f043 0301 	orr.w	r3, r3, #1
 800808c:	81a3      	strh	r3, [r4, #12]
 800808e:	e7df      	b.n	8008050 <__smakebuf_r+0x80>
 8008090:	059a      	lsls	r2, r3, #22
 8008092:	d4dd      	bmi.n	8008050 <__smakebuf_r+0x80>
 8008094:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008098:	f043 0302 	orr.w	r3, r3, #2
 800809c:	2101      	movs	r1, #1
 800809e:	81a3      	strh	r3, [r4, #12]
 80080a0:	6022      	str	r2, [r4, #0]
 80080a2:	6122      	str	r2, [r4, #16]
 80080a4:	6161      	str	r1, [r4, #20]
 80080a6:	e7d3      	b.n	8008050 <__smakebuf_r+0x80>
 80080a8:	08007711 	.word	0x08007711
 80080ac:	080094dd 	.word	0x080094dd

080080b0 <_malloc_r>:
 80080b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	f101 050b 	add.w	r5, r1, #11
 80080b8:	2d16      	cmp	r5, #22
 80080ba:	b083      	sub	sp, #12
 80080bc:	4606      	mov	r6, r0
 80080be:	d927      	bls.n	8008110 <_malloc_r+0x60>
 80080c0:	f035 0507 	bics.w	r5, r5, #7
 80080c4:	f100 80b6 	bmi.w	8008234 <_malloc_r+0x184>
 80080c8:	42a9      	cmp	r1, r5
 80080ca:	f200 80b3 	bhi.w	8008234 <_malloc_r+0x184>
 80080ce:	f000 fb2f 	bl	8008730 <__malloc_lock>
 80080d2:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80080d6:	d222      	bcs.n	800811e <_malloc_r+0x6e>
 80080d8:	4fc2      	ldr	r7, [pc, #776]	; (80083e4 <_malloc_r+0x334>)
 80080da:	08e8      	lsrs	r0, r5, #3
 80080dc:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 80080e0:	68dc      	ldr	r4, [r3, #12]
 80080e2:	429c      	cmp	r4, r3
 80080e4:	f000 81c8 	beq.w	8008478 <_malloc_r+0x3c8>
 80080e8:	6863      	ldr	r3, [r4, #4]
 80080ea:	68e1      	ldr	r1, [r4, #12]
 80080ec:	68a5      	ldr	r5, [r4, #8]
 80080ee:	f023 0303 	bic.w	r3, r3, #3
 80080f2:	4423      	add	r3, r4
 80080f4:	4630      	mov	r0, r6
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	60e9      	str	r1, [r5, #12]
 80080fa:	f042 0201 	orr.w	r2, r2, #1
 80080fe:	608d      	str	r5, [r1, #8]
 8008100:	605a      	str	r2, [r3, #4]
 8008102:	f000 fb17 	bl	8008734 <__malloc_unlock>
 8008106:	3408      	adds	r4, #8
 8008108:	4620      	mov	r0, r4
 800810a:	b003      	add	sp, #12
 800810c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008110:	2910      	cmp	r1, #16
 8008112:	f200 808f 	bhi.w	8008234 <_malloc_r+0x184>
 8008116:	f000 fb0b 	bl	8008730 <__malloc_lock>
 800811a:	2510      	movs	r5, #16
 800811c:	e7dc      	b.n	80080d8 <_malloc_r+0x28>
 800811e:	0a68      	lsrs	r0, r5, #9
 8008120:	f000 808f 	beq.w	8008242 <_malloc_r+0x192>
 8008124:	2804      	cmp	r0, #4
 8008126:	f200 8154 	bhi.w	80083d2 <_malloc_r+0x322>
 800812a:	09a8      	lsrs	r0, r5, #6
 800812c:	3038      	adds	r0, #56	; 0x38
 800812e:	0041      	lsls	r1, r0, #1
 8008130:	4fac      	ldr	r7, [pc, #688]	; (80083e4 <_malloc_r+0x334>)
 8008132:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8008136:	68cc      	ldr	r4, [r1, #12]
 8008138:	42a1      	cmp	r1, r4
 800813a:	d106      	bne.n	800814a <_malloc_r+0x9a>
 800813c:	e00c      	b.n	8008158 <_malloc_r+0xa8>
 800813e:	2a00      	cmp	r2, #0
 8008140:	f280 8082 	bge.w	8008248 <_malloc_r+0x198>
 8008144:	68e4      	ldr	r4, [r4, #12]
 8008146:	42a1      	cmp	r1, r4
 8008148:	d006      	beq.n	8008158 <_malloc_r+0xa8>
 800814a:	6863      	ldr	r3, [r4, #4]
 800814c:	f023 0303 	bic.w	r3, r3, #3
 8008150:	1b5a      	subs	r2, r3, r5
 8008152:	2a0f      	cmp	r2, #15
 8008154:	ddf3      	ble.n	800813e <_malloc_r+0x8e>
 8008156:	3801      	subs	r0, #1
 8008158:	3001      	adds	r0, #1
 800815a:	49a2      	ldr	r1, [pc, #648]	; (80083e4 <_malloc_r+0x334>)
 800815c:	693c      	ldr	r4, [r7, #16]
 800815e:	f101 0e08 	add.w	lr, r1, #8
 8008162:	4574      	cmp	r4, lr
 8008164:	f000 817d 	beq.w	8008462 <_malloc_r+0x3b2>
 8008168:	6863      	ldr	r3, [r4, #4]
 800816a:	f023 0303 	bic.w	r3, r3, #3
 800816e:	1b5a      	subs	r2, r3, r5
 8008170:	2a0f      	cmp	r2, #15
 8008172:	f300 8163 	bgt.w	800843c <_malloc_r+0x38c>
 8008176:	2a00      	cmp	r2, #0
 8008178:	f8c1 e014 	str.w	lr, [r1, #20]
 800817c:	f8c1 e010 	str.w	lr, [r1, #16]
 8008180:	da73      	bge.n	800826a <_malloc_r+0x1ba>
 8008182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008186:	f080 8139 	bcs.w	80083fc <_malloc_r+0x34c>
 800818a:	08db      	lsrs	r3, r3, #3
 800818c:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8008190:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8008194:	684a      	ldr	r2, [r1, #4]
 8008196:	f8d8 9008 	ldr.w	r9, [r8, #8]
 800819a:	f8c4 9008 	str.w	r9, [r4, #8]
 800819e:	2301      	movs	r3, #1
 80081a0:	fa03 f30c 	lsl.w	r3, r3, ip
 80081a4:	4313      	orrs	r3, r2
 80081a6:	f8c4 800c 	str.w	r8, [r4, #12]
 80081aa:	604b      	str	r3, [r1, #4]
 80081ac:	f8c8 4008 	str.w	r4, [r8, #8]
 80081b0:	f8c9 400c 	str.w	r4, [r9, #12]
 80081b4:	1082      	asrs	r2, r0, #2
 80081b6:	2401      	movs	r4, #1
 80081b8:	4094      	lsls	r4, r2
 80081ba:	429c      	cmp	r4, r3
 80081bc:	d862      	bhi.n	8008284 <_malloc_r+0x1d4>
 80081be:	4223      	tst	r3, r4
 80081c0:	d106      	bne.n	80081d0 <_malloc_r+0x120>
 80081c2:	f020 0003 	bic.w	r0, r0, #3
 80081c6:	0064      	lsls	r4, r4, #1
 80081c8:	4223      	tst	r3, r4
 80081ca:	f100 0004 	add.w	r0, r0, #4
 80081ce:	d0fa      	beq.n	80081c6 <_malloc_r+0x116>
 80081d0:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 80081d4:	46c4      	mov	ip, r8
 80081d6:	4681      	mov	r9, r0
 80081d8:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80081dc:	459c      	cmp	ip, r3
 80081de:	d107      	bne.n	80081f0 <_malloc_r+0x140>
 80081e0:	e141      	b.n	8008466 <_malloc_r+0x3b6>
 80081e2:	2900      	cmp	r1, #0
 80081e4:	f280 8151 	bge.w	800848a <_malloc_r+0x3da>
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	459c      	cmp	ip, r3
 80081ec:	f000 813b 	beq.w	8008466 <_malloc_r+0x3b6>
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	f022 0203 	bic.w	r2, r2, #3
 80081f6:	1b51      	subs	r1, r2, r5
 80081f8:	290f      	cmp	r1, #15
 80081fa:	ddf2      	ble.n	80081e2 <_malloc_r+0x132>
 80081fc:	461c      	mov	r4, r3
 80081fe:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8008202:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8008206:	195a      	adds	r2, r3, r5
 8008208:	f045 0901 	orr.w	r9, r5, #1
 800820c:	f041 0501 	orr.w	r5, r1, #1
 8008210:	f8c3 9004 	str.w	r9, [r3, #4]
 8008214:	4630      	mov	r0, r6
 8008216:	f8c8 c00c 	str.w	ip, [r8, #12]
 800821a:	f8cc 8008 	str.w	r8, [ip, #8]
 800821e:	617a      	str	r2, [r7, #20]
 8008220:	613a      	str	r2, [r7, #16]
 8008222:	f8c2 e00c 	str.w	lr, [r2, #12]
 8008226:	f8c2 e008 	str.w	lr, [r2, #8]
 800822a:	6055      	str	r5, [r2, #4]
 800822c:	5051      	str	r1, [r2, r1]
 800822e:	f000 fa81 	bl	8008734 <__malloc_unlock>
 8008232:	e769      	b.n	8008108 <_malloc_r+0x58>
 8008234:	2400      	movs	r4, #0
 8008236:	230c      	movs	r3, #12
 8008238:	4620      	mov	r0, r4
 800823a:	6033      	str	r3, [r6, #0]
 800823c:	b003      	add	sp, #12
 800823e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008242:	217e      	movs	r1, #126	; 0x7e
 8008244:	203f      	movs	r0, #63	; 0x3f
 8008246:	e773      	b.n	8008130 <_malloc_r+0x80>
 8008248:	4423      	add	r3, r4
 800824a:	68e1      	ldr	r1, [r4, #12]
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	68a5      	ldr	r5, [r4, #8]
 8008250:	f042 0201 	orr.w	r2, r2, #1
 8008254:	60e9      	str	r1, [r5, #12]
 8008256:	4630      	mov	r0, r6
 8008258:	608d      	str	r5, [r1, #8]
 800825a:	605a      	str	r2, [r3, #4]
 800825c:	f000 fa6a 	bl	8008734 <__malloc_unlock>
 8008260:	3408      	adds	r4, #8
 8008262:	4620      	mov	r0, r4
 8008264:	b003      	add	sp, #12
 8008266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826a:	4423      	add	r3, r4
 800826c:	4630      	mov	r0, r6
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	f042 0201 	orr.w	r2, r2, #1
 8008274:	605a      	str	r2, [r3, #4]
 8008276:	f000 fa5d 	bl	8008734 <__malloc_unlock>
 800827a:	3408      	adds	r4, #8
 800827c:	4620      	mov	r0, r4
 800827e:	b003      	add	sp, #12
 8008280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008284:	68bc      	ldr	r4, [r7, #8]
 8008286:	6863      	ldr	r3, [r4, #4]
 8008288:	f023 0803 	bic.w	r8, r3, #3
 800828c:	4545      	cmp	r5, r8
 800828e:	d804      	bhi.n	800829a <_malloc_r+0x1ea>
 8008290:	ebc5 0308 	rsb	r3, r5, r8
 8008294:	2b0f      	cmp	r3, #15
 8008296:	f300 808c 	bgt.w	80083b2 <_malloc_r+0x302>
 800829a:	4b53      	ldr	r3, [pc, #332]	; (80083e8 <_malloc_r+0x338>)
 800829c:	f8df a158 	ldr.w	sl, [pc, #344]	; 80083f8 <_malloc_r+0x348>
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	f8da 3000 	ldr.w	r3, [sl]
 80082a6:	3301      	adds	r3, #1
 80082a8:	442a      	add	r2, r5
 80082aa:	eb04 0b08 	add.w	fp, r4, r8
 80082ae:	f000 8150 	beq.w	8008552 <_malloc_r+0x4a2>
 80082b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80082b6:	320f      	adds	r2, #15
 80082b8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80082bc:	f022 020f 	bic.w	r2, r2, #15
 80082c0:	4611      	mov	r1, r2
 80082c2:	4630      	mov	r0, r6
 80082c4:	9201      	str	r2, [sp, #4]
 80082c6:	f001 f8c7 	bl	8009458 <_sbrk_r>
 80082ca:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80082ce:	4681      	mov	r9, r0
 80082d0:	9a01      	ldr	r2, [sp, #4]
 80082d2:	f000 8147 	beq.w	8008564 <_malloc_r+0x4b4>
 80082d6:	4583      	cmp	fp, r0
 80082d8:	f200 80ee 	bhi.w	80084b8 <_malloc_r+0x408>
 80082dc:	4b43      	ldr	r3, [pc, #268]	; (80083ec <_malloc_r+0x33c>)
 80082de:	6819      	ldr	r1, [r3, #0]
 80082e0:	45cb      	cmp	fp, r9
 80082e2:	4411      	add	r1, r2
 80082e4:	6019      	str	r1, [r3, #0]
 80082e6:	f000 8142 	beq.w	800856e <_malloc_r+0x4be>
 80082ea:	f8da 0000 	ldr.w	r0, [sl]
 80082ee:	f8df e108 	ldr.w	lr, [pc, #264]	; 80083f8 <_malloc_r+0x348>
 80082f2:	3001      	adds	r0, #1
 80082f4:	bf1b      	ittet	ne
 80082f6:	ebcb 0b09 	rsbne	fp, fp, r9
 80082fa:	4459      	addne	r1, fp
 80082fc:	f8ce 9000 	streq.w	r9, [lr]
 8008300:	6019      	strne	r1, [r3, #0]
 8008302:	f019 0107 	ands.w	r1, r9, #7
 8008306:	f000 8107 	beq.w	8008518 <_malloc_r+0x468>
 800830a:	f1c1 0008 	rsb	r0, r1, #8
 800830e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8008312:	4481      	add	r9, r0
 8008314:	3108      	adds	r1, #8
 8008316:	444a      	add	r2, r9
 8008318:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800831c:	ebc2 0a01 	rsb	sl, r2, r1
 8008320:	4651      	mov	r1, sl
 8008322:	4630      	mov	r0, r6
 8008324:	9301      	str	r3, [sp, #4]
 8008326:	f001 f897 	bl	8009458 <_sbrk_r>
 800832a:	1c43      	adds	r3, r0, #1
 800832c:	9b01      	ldr	r3, [sp, #4]
 800832e:	f000 812c 	beq.w	800858a <_malloc_r+0x4da>
 8008332:	ebc9 0200 	rsb	r2, r9, r0
 8008336:	4452      	add	r2, sl
 8008338:	f042 0201 	orr.w	r2, r2, #1
 800833c:	6819      	ldr	r1, [r3, #0]
 800833e:	f8c7 9008 	str.w	r9, [r7, #8]
 8008342:	4451      	add	r1, sl
 8008344:	42bc      	cmp	r4, r7
 8008346:	f8c9 2004 	str.w	r2, [r9, #4]
 800834a:	6019      	str	r1, [r3, #0]
 800834c:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80083ec <_malloc_r+0x33c>
 8008350:	d016      	beq.n	8008380 <_malloc_r+0x2d0>
 8008352:	f1b8 0f0f 	cmp.w	r8, #15
 8008356:	f240 80ee 	bls.w	8008536 <_malloc_r+0x486>
 800835a:	6862      	ldr	r2, [r4, #4]
 800835c:	f1a8 030c 	sub.w	r3, r8, #12
 8008360:	f023 0307 	bic.w	r3, r3, #7
 8008364:	18e0      	adds	r0, r4, r3
 8008366:	f002 0201 	and.w	r2, r2, #1
 800836a:	f04f 0e05 	mov.w	lr, #5
 800836e:	431a      	orrs	r2, r3
 8008370:	2b0f      	cmp	r3, #15
 8008372:	6062      	str	r2, [r4, #4]
 8008374:	f8c0 e004 	str.w	lr, [r0, #4]
 8008378:	f8c0 e008 	str.w	lr, [r0, #8]
 800837c:	f200 8109 	bhi.w	8008592 <_malloc_r+0x4e2>
 8008380:	4b1b      	ldr	r3, [pc, #108]	; (80083f0 <_malloc_r+0x340>)
 8008382:	68bc      	ldr	r4, [r7, #8]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	4291      	cmp	r1, r2
 8008388:	bf88      	it	hi
 800838a:	6019      	strhi	r1, [r3, #0]
 800838c:	4b19      	ldr	r3, [pc, #100]	; (80083f4 <_malloc_r+0x344>)
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	4291      	cmp	r1, r2
 8008392:	6862      	ldr	r2, [r4, #4]
 8008394:	bf88      	it	hi
 8008396:	6019      	strhi	r1, [r3, #0]
 8008398:	f022 0203 	bic.w	r2, r2, #3
 800839c:	4295      	cmp	r5, r2
 800839e:	eba2 0305 	sub.w	r3, r2, r5
 80083a2:	d801      	bhi.n	80083a8 <_malloc_r+0x2f8>
 80083a4:	2b0f      	cmp	r3, #15
 80083a6:	dc04      	bgt.n	80083b2 <_malloc_r+0x302>
 80083a8:	4630      	mov	r0, r6
 80083aa:	f000 f9c3 	bl	8008734 <__malloc_unlock>
 80083ae:	2400      	movs	r4, #0
 80083b0:	e6aa      	b.n	8008108 <_malloc_r+0x58>
 80083b2:	1962      	adds	r2, r4, r5
 80083b4:	f043 0301 	orr.w	r3, r3, #1
 80083b8:	f045 0501 	orr.w	r5, r5, #1
 80083bc:	6065      	str	r5, [r4, #4]
 80083be:	4630      	mov	r0, r6
 80083c0:	60ba      	str	r2, [r7, #8]
 80083c2:	6053      	str	r3, [r2, #4]
 80083c4:	f000 f9b6 	bl	8008734 <__malloc_unlock>
 80083c8:	3408      	adds	r4, #8
 80083ca:	4620      	mov	r0, r4
 80083cc:	b003      	add	sp, #12
 80083ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d2:	2814      	cmp	r0, #20
 80083d4:	d968      	bls.n	80084a8 <_malloc_r+0x3f8>
 80083d6:	2854      	cmp	r0, #84	; 0x54
 80083d8:	f200 8097 	bhi.w	800850a <_malloc_r+0x45a>
 80083dc:	0b28      	lsrs	r0, r5, #12
 80083de:	306e      	adds	r0, #110	; 0x6e
 80083e0:	0041      	lsls	r1, r0, #1
 80083e2:	e6a5      	b.n	8008130 <_malloc_r+0x80>
 80083e4:	20000530 	.word	0x20000530
 80083e8:	200104a4 	.word	0x200104a4
 80083ec:	200104a8 	.word	0x200104a8
 80083f0:	200104a0 	.word	0x200104a0
 80083f4:	2001049c 	.word	0x2001049c
 80083f8:	2000093c 	.word	0x2000093c
 80083fc:	0a5a      	lsrs	r2, r3, #9
 80083fe:	2a04      	cmp	r2, #4
 8008400:	d955      	bls.n	80084ae <_malloc_r+0x3fe>
 8008402:	2a14      	cmp	r2, #20
 8008404:	f200 80a7 	bhi.w	8008556 <_malloc_r+0x4a6>
 8008408:	325b      	adds	r2, #91	; 0x5b
 800840a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800840e:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 8008412:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80085d0 <_malloc_r+0x520>
 8008416:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800841a:	4561      	cmp	r1, ip
 800841c:	d07f      	beq.n	800851e <_malloc_r+0x46e>
 800841e:	684a      	ldr	r2, [r1, #4]
 8008420:	f022 0203 	bic.w	r2, r2, #3
 8008424:	4293      	cmp	r3, r2
 8008426:	d202      	bcs.n	800842e <_malloc_r+0x37e>
 8008428:	6889      	ldr	r1, [r1, #8]
 800842a:	458c      	cmp	ip, r1
 800842c:	d1f7      	bne.n	800841e <_malloc_r+0x36e>
 800842e:	68ca      	ldr	r2, [r1, #12]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	60e2      	str	r2, [r4, #12]
 8008434:	60a1      	str	r1, [r4, #8]
 8008436:	6094      	str	r4, [r2, #8]
 8008438:	60cc      	str	r4, [r1, #12]
 800843a:	e6bb      	b.n	80081b4 <_malloc_r+0x104>
 800843c:	1963      	adds	r3, r4, r5
 800843e:	f042 0701 	orr.w	r7, r2, #1
 8008442:	f045 0501 	orr.w	r5, r5, #1
 8008446:	6065      	str	r5, [r4, #4]
 8008448:	4630      	mov	r0, r6
 800844a:	614b      	str	r3, [r1, #20]
 800844c:	610b      	str	r3, [r1, #16]
 800844e:	f8c3 e00c 	str.w	lr, [r3, #12]
 8008452:	f8c3 e008 	str.w	lr, [r3, #8]
 8008456:	605f      	str	r7, [r3, #4]
 8008458:	509a      	str	r2, [r3, r2]
 800845a:	3408      	adds	r4, #8
 800845c:	f000 f96a 	bl	8008734 <__malloc_unlock>
 8008460:	e652      	b.n	8008108 <_malloc_r+0x58>
 8008462:	684b      	ldr	r3, [r1, #4]
 8008464:	e6a6      	b.n	80081b4 <_malloc_r+0x104>
 8008466:	f109 0901 	add.w	r9, r9, #1
 800846a:	f019 0f03 	tst.w	r9, #3
 800846e:	f10c 0c08 	add.w	ip, ip, #8
 8008472:	f47f aeb1 	bne.w	80081d8 <_malloc_r+0x128>
 8008476:	e02c      	b.n	80084d2 <_malloc_r+0x422>
 8008478:	f104 0308 	add.w	r3, r4, #8
 800847c:	6964      	ldr	r4, [r4, #20]
 800847e:	42a3      	cmp	r3, r4
 8008480:	bf08      	it	eq
 8008482:	3002      	addeq	r0, #2
 8008484:	f43f ae69 	beq.w	800815a <_malloc_r+0xaa>
 8008488:	e62e      	b.n	80080e8 <_malloc_r+0x38>
 800848a:	441a      	add	r2, r3
 800848c:	461c      	mov	r4, r3
 800848e:	6851      	ldr	r1, [r2, #4]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8008496:	f041 0101 	orr.w	r1, r1, #1
 800849a:	6051      	str	r1, [r2, #4]
 800849c:	4630      	mov	r0, r6
 800849e:	60eb      	str	r3, [r5, #12]
 80084a0:	609d      	str	r5, [r3, #8]
 80084a2:	f000 f947 	bl	8008734 <__malloc_unlock>
 80084a6:	e62f      	b.n	8008108 <_malloc_r+0x58>
 80084a8:	305b      	adds	r0, #91	; 0x5b
 80084aa:	0041      	lsls	r1, r0, #1
 80084ac:	e640      	b.n	8008130 <_malloc_r+0x80>
 80084ae:	099a      	lsrs	r2, r3, #6
 80084b0:	3238      	adds	r2, #56	; 0x38
 80084b2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80084b6:	e7aa      	b.n	800840e <_malloc_r+0x35e>
 80084b8:	42bc      	cmp	r4, r7
 80084ba:	4b45      	ldr	r3, [pc, #276]	; (80085d0 <_malloc_r+0x520>)
 80084bc:	f43f af0e 	beq.w	80082dc <_malloc_r+0x22c>
 80084c0:	689c      	ldr	r4, [r3, #8]
 80084c2:	6862      	ldr	r2, [r4, #4]
 80084c4:	f022 0203 	bic.w	r2, r2, #3
 80084c8:	e768      	b.n	800839c <_malloc_r+0x2ec>
 80084ca:	f8d8 8000 	ldr.w	r8, [r8]
 80084ce:	4598      	cmp	r8, r3
 80084d0:	d17c      	bne.n	80085cc <_malloc_r+0x51c>
 80084d2:	f010 0f03 	tst.w	r0, #3
 80084d6:	f1a8 0308 	sub.w	r3, r8, #8
 80084da:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80084de:	d1f4      	bne.n	80084ca <_malloc_r+0x41a>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	ea23 0304 	bic.w	r3, r3, r4
 80084e6:	607b      	str	r3, [r7, #4]
 80084e8:	0064      	lsls	r4, r4, #1
 80084ea:	429c      	cmp	r4, r3
 80084ec:	f63f aeca 	bhi.w	8008284 <_malloc_r+0x1d4>
 80084f0:	2c00      	cmp	r4, #0
 80084f2:	f43f aec7 	beq.w	8008284 <_malloc_r+0x1d4>
 80084f6:	4223      	tst	r3, r4
 80084f8:	4648      	mov	r0, r9
 80084fa:	f47f ae69 	bne.w	80081d0 <_malloc_r+0x120>
 80084fe:	0064      	lsls	r4, r4, #1
 8008500:	4223      	tst	r3, r4
 8008502:	f100 0004 	add.w	r0, r0, #4
 8008506:	d0fa      	beq.n	80084fe <_malloc_r+0x44e>
 8008508:	e662      	b.n	80081d0 <_malloc_r+0x120>
 800850a:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 800850e:	d818      	bhi.n	8008542 <_malloc_r+0x492>
 8008510:	0be8      	lsrs	r0, r5, #15
 8008512:	3077      	adds	r0, #119	; 0x77
 8008514:	0041      	lsls	r1, r0, #1
 8008516:	e60b      	b.n	8008130 <_malloc_r+0x80>
 8008518:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800851c:	e6fb      	b.n	8008316 <_malloc_r+0x266>
 800851e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008522:	1092      	asrs	r2, r2, #2
 8008524:	f04f 0c01 	mov.w	ip, #1
 8008528:	fa0c f202 	lsl.w	r2, ip, r2
 800852c:	4313      	orrs	r3, r2
 800852e:	f8c8 3004 	str.w	r3, [r8, #4]
 8008532:	460a      	mov	r2, r1
 8008534:	e77d      	b.n	8008432 <_malloc_r+0x382>
 8008536:	2301      	movs	r3, #1
 8008538:	f8c9 3004 	str.w	r3, [r9, #4]
 800853c:	464c      	mov	r4, r9
 800853e:	2200      	movs	r2, #0
 8008540:	e72c      	b.n	800839c <_malloc_r+0x2ec>
 8008542:	f240 5354 	movw	r3, #1364	; 0x554
 8008546:	4298      	cmp	r0, r3
 8008548:	d81c      	bhi.n	8008584 <_malloc_r+0x4d4>
 800854a:	0ca8      	lsrs	r0, r5, #18
 800854c:	307c      	adds	r0, #124	; 0x7c
 800854e:	0041      	lsls	r1, r0, #1
 8008550:	e5ee      	b.n	8008130 <_malloc_r+0x80>
 8008552:	3210      	adds	r2, #16
 8008554:	e6b4      	b.n	80082c0 <_malloc_r+0x210>
 8008556:	2a54      	cmp	r2, #84	; 0x54
 8008558:	d823      	bhi.n	80085a2 <_malloc_r+0x4f2>
 800855a:	0b1a      	lsrs	r2, r3, #12
 800855c:	326e      	adds	r2, #110	; 0x6e
 800855e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8008562:	e754      	b.n	800840e <_malloc_r+0x35e>
 8008564:	68bc      	ldr	r4, [r7, #8]
 8008566:	6862      	ldr	r2, [r4, #4]
 8008568:	f022 0203 	bic.w	r2, r2, #3
 800856c:	e716      	b.n	800839c <_malloc_r+0x2ec>
 800856e:	f3cb 000b 	ubfx	r0, fp, #0, #12
 8008572:	2800      	cmp	r0, #0
 8008574:	f47f aeb9 	bne.w	80082ea <_malloc_r+0x23a>
 8008578:	4442      	add	r2, r8
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f042 0201 	orr.w	r2, r2, #1
 8008580:	605a      	str	r2, [r3, #4]
 8008582:	e6fd      	b.n	8008380 <_malloc_r+0x2d0>
 8008584:	21fc      	movs	r1, #252	; 0xfc
 8008586:	207e      	movs	r0, #126	; 0x7e
 8008588:	e5d2      	b.n	8008130 <_malloc_r+0x80>
 800858a:	2201      	movs	r2, #1
 800858c:	f04f 0a00 	mov.w	sl, #0
 8008590:	e6d4      	b.n	800833c <_malloc_r+0x28c>
 8008592:	f104 0108 	add.w	r1, r4, #8
 8008596:	4630      	mov	r0, r6
 8008598:	f7ff fa24 	bl	80079e4 <_free_r>
 800859c:	f8da 1000 	ldr.w	r1, [sl]
 80085a0:	e6ee      	b.n	8008380 <_malloc_r+0x2d0>
 80085a2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80085a6:	d804      	bhi.n	80085b2 <_malloc_r+0x502>
 80085a8:	0bda      	lsrs	r2, r3, #15
 80085aa:	3277      	adds	r2, #119	; 0x77
 80085ac:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80085b0:	e72d      	b.n	800840e <_malloc_r+0x35e>
 80085b2:	f240 5154 	movw	r1, #1364	; 0x554
 80085b6:	428a      	cmp	r2, r1
 80085b8:	d804      	bhi.n	80085c4 <_malloc_r+0x514>
 80085ba:	0c9a      	lsrs	r2, r3, #18
 80085bc:	327c      	adds	r2, #124	; 0x7c
 80085be:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80085c2:	e724      	b.n	800840e <_malloc_r+0x35e>
 80085c4:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 80085c8:	227e      	movs	r2, #126	; 0x7e
 80085ca:	e720      	b.n	800840e <_malloc_r+0x35e>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	e78b      	b.n	80084e8 <_malloc_r+0x438>
 80085d0:	20000530 	.word	0x20000530

080085d4 <memchr>:
 80085d4:	0783      	lsls	r3, r0, #30
 80085d6:	b470      	push	{r4, r5, r6}
 80085d8:	b2c9      	uxtb	r1, r1
 80085da:	d040      	beq.n	800865e <memchr+0x8a>
 80085dc:	1e54      	subs	r4, r2, #1
 80085de:	2a00      	cmp	r2, #0
 80085e0:	d03f      	beq.n	8008662 <memchr+0x8e>
 80085e2:	7803      	ldrb	r3, [r0, #0]
 80085e4:	428b      	cmp	r3, r1
 80085e6:	bf18      	it	ne
 80085e8:	1c43      	addne	r3, r0, #1
 80085ea:	d106      	bne.n	80085fa <memchr+0x26>
 80085ec:	e01d      	b.n	800862a <memchr+0x56>
 80085ee:	b1f4      	cbz	r4, 800862e <memchr+0x5a>
 80085f0:	7802      	ldrb	r2, [r0, #0]
 80085f2:	428a      	cmp	r2, r1
 80085f4:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80085f8:	d017      	beq.n	800862a <memchr+0x56>
 80085fa:	f013 0f03 	tst.w	r3, #3
 80085fe:	4618      	mov	r0, r3
 8008600:	f103 0301 	add.w	r3, r3, #1
 8008604:	d1f3      	bne.n	80085ee <memchr+0x1a>
 8008606:	2c03      	cmp	r4, #3
 8008608:	d814      	bhi.n	8008634 <memchr+0x60>
 800860a:	b184      	cbz	r4, 800862e <memchr+0x5a>
 800860c:	7803      	ldrb	r3, [r0, #0]
 800860e:	428b      	cmp	r3, r1
 8008610:	d00b      	beq.n	800862a <memchr+0x56>
 8008612:	1905      	adds	r5, r0, r4
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	e002      	b.n	800861e <memchr+0x4a>
 8008618:	7802      	ldrb	r2, [r0, #0]
 800861a:	428a      	cmp	r2, r1
 800861c:	d005      	beq.n	800862a <memchr+0x56>
 800861e:	42ab      	cmp	r3, r5
 8008620:	4618      	mov	r0, r3
 8008622:	f103 0301 	add.w	r3, r3, #1
 8008626:	d1f7      	bne.n	8008618 <memchr+0x44>
 8008628:	2000      	movs	r0, #0
 800862a:	bc70      	pop	{r4, r5, r6}
 800862c:	4770      	bx	lr
 800862e:	4620      	mov	r0, r4
 8008630:	bc70      	pop	{r4, r5, r6}
 8008632:	4770      	bx	lr
 8008634:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8008638:	4602      	mov	r2, r0
 800863a:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800863e:	4610      	mov	r0, r2
 8008640:	3204      	adds	r2, #4
 8008642:	6803      	ldr	r3, [r0, #0]
 8008644:	4073      	eors	r3, r6
 8008646:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 800864a:	ea25 0303 	bic.w	r3, r5, r3
 800864e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8008652:	d1da      	bne.n	800860a <memchr+0x36>
 8008654:	3c04      	subs	r4, #4
 8008656:	2c03      	cmp	r4, #3
 8008658:	4610      	mov	r0, r2
 800865a:	d8f0      	bhi.n	800863e <memchr+0x6a>
 800865c:	e7d5      	b.n	800860a <memchr+0x36>
 800865e:	4614      	mov	r4, r2
 8008660:	e7d1      	b.n	8008606 <memchr+0x32>
 8008662:	4610      	mov	r0, r2
 8008664:	e7e1      	b.n	800862a <memchr+0x56>
 8008666:	bf00      	nop

08008668 <memmove>:
 8008668:	4288      	cmp	r0, r1
 800866a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800866c:	d90d      	bls.n	800868a <memmove+0x22>
 800866e:	188b      	adds	r3, r1, r2
 8008670:	4298      	cmp	r0, r3
 8008672:	d20a      	bcs.n	800868a <memmove+0x22>
 8008674:	1881      	adds	r1, r0, r2
 8008676:	2a00      	cmp	r2, #0
 8008678:	d054      	beq.n	8008724 <memmove+0xbc>
 800867a:	1a9a      	subs	r2, r3, r2
 800867c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008680:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008684:	4293      	cmp	r3, r2
 8008686:	d1f9      	bne.n	800867c <memmove+0x14>
 8008688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800868a:	2a0f      	cmp	r2, #15
 800868c:	d948      	bls.n	8008720 <memmove+0xb8>
 800868e:	ea40 0301 	orr.w	r3, r0, r1
 8008692:	079b      	lsls	r3, r3, #30
 8008694:	d147      	bne.n	8008726 <memmove+0xbe>
 8008696:	f100 0410 	add.w	r4, r0, #16
 800869a:	f101 0310 	add.w	r3, r1, #16
 800869e:	4615      	mov	r5, r2
 80086a0:	f853 6c10 	ldr.w	r6, [r3, #-16]
 80086a4:	f844 6c10 	str.w	r6, [r4, #-16]
 80086a8:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 80086ac:	f844 6c0c 	str.w	r6, [r4, #-12]
 80086b0:	f853 6c08 	ldr.w	r6, [r3, #-8]
 80086b4:	f844 6c08 	str.w	r6, [r4, #-8]
 80086b8:	3d10      	subs	r5, #16
 80086ba:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80086be:	f844 6c04 	str.w	r6, [r4, #-4]
 80086c2:	2d0f      	cmp	r5, #15
 80086c4:	f103 0310 	add.w	r3, r3, #16
 80086c8:	f104 0410 	add.w	r4, r4, #16
 80086cc:	d8e8      	bhi.n	80086a0 <memmove+0x38>
 80086ce:	f1a2 0310 	sub.w	r3, r2, #16
 80086d2:	f023 030f 	bic.w	r3, r3, #15
 80086d6:	f002 0e0f 	and.w	lr, r2, #15
 80086da:	3310      	adds	r3, #16
 80086dc:	f1be 0f03 	cmp.w	lr, #3
 80086e0:	4419      	add	r1, r3
 80086e2:	4403      	add	r3, r0
 80086e4:	d921      	bls.n	800872a <memmove+0xc2>
 80086e6:	1f1e      	subs	r6, r3, #4
 80086e8:	460d      	mov	r5, r1
 80086ea:	4674      	mov	r4, lr
 80086ec:	3c04      	subs	r4, #4
 80086ee:	f855 7b04 	ldr.w	r7, [r5], #4
 80086f2:	f846 7f04 	str.w	r7, [r6, #4]!
 80086f6:	2c03      	cmp	r4, #3
 80086f8:	d8f8      	bhi.n	80086ec <memmove+0x84>
 80086fa:	f1ae 0404 	sub.w	r4, lr, #4
 80086fe:	f024 0403 	bic.w	r4, r4, #3
 8008702:	3404      	adds	r4, #4
 8008704:	4423      	add	r3, r4
 8008706:	4421      	add	r1, r4
 8008708:	f002 0203 	and.w	r2, r2, #3
 800870c:	b152      	cbz	r2, 8008724 <memmove+0xbc>
 800870e:	3b01      	subs	r3, #1
 8008710:	440a      	add	r2, r1
 8008712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008716:	f803 4f01 	strb.w	r4, [r3, #1]!
 800871a:	4291      	cmp	r1, r2
 800871c:	d1f9      	bne.n	8008712 <memmove+0xaa>
 800871e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008720:	4603      	mov	r3, r0
 8008722:	e7f3      	b.n	800870c <memmove+0xa4>
 8008724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008726:	4603      	mov	r3, r0
 8008728:	e7f1      	b.n	800870e <memmove+0xa6>
 800872a:	4672      	mov	r2, lr
 800872c:	e7ee      	b.n	800870c <memmove+0xa4>
 800872e:	bf00      	nop

08008730 <__malloc_lock>:
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop

08008734 <__malloc_unlock>:
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop

08008738 <_Balloc>:
 8008738:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800873a:	b570      	push	{r4, r5, r6, lr}
 800873c:	4605      	mov	r5, r0
 800873e:	460c      	mov	r4, r1
 8008740:	b14b      	cbz	r3, 8008756 <_Balloc+0x1e>
 8008742:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008746:	b180      	cbz	r0, 800876a <_Balloc+0x32>
 8008748:	6802      	ldr	r2, [r0, #0]
 800874a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800874e:	2300      	movs	r3, #0
 8008750:	6103      	str	r3, [r0, #16]
 8008752:	60c3      	str	r3, [r0, #12]
 8008754:	bd70      	pop	{r4, r5, r6, pc}
 8008756:	2104      	movs	r1, #4
 8008758:	2221      	movs	r2, #33	; 0x21
 800875a:	f002 fd1f 	bl	800b19c <_calloc_r>
 800875e:	64e8      	str	r0, [r5, #76]	; 0x4c
 8008760:	4603      	mov	r3, r0
 8008762:	2800      	cmp	r0, #0
 8008764:	d1ed      	bne.n	8008742 <_Balloc+0xa>
 8008766:	2000      	movs	r0, #0
 8008768:	bd70      	pop	{r4, r5, r6, pc}
 800876a:	2101      	movs	r1, #1
 800876c:	fa01 f604 	lsl.w	r6, r1, r4
 8008770:	1d72      	adds	r2, r6, #5
 8008772:	4628      	mov	r0, r5
 8008774:	0092      	lsls	r2, r2, #2
 8008776:	f002 fd11 	bl	800b19c <_calloc_r>
 800877a:	2800      	cmp	r0, #0
 800877c:	d0f3      	beq.n	8008766 <_Balloc+0x2e>
 800877e:	6044      	str	r4, [r0, #4]
 8008780:	6086      	str	r6, [r0, #8]
 8008782:	e7e4      	b.n	800874e <_Balloc+0x16>

08008784 <_Bfree>:
 8008784:	b131      	cbz	r1, 8008794 <_Bfree+0x10>
 8008786:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008788:	684a      	ldr	r2, [r1, #4]
 800878a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800878e:	6008      	str	r0, [r1, #0]
 8008790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop

08008798 <__multadd>:
 8008798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800879a:	690c      	ldr	r4, [r1, #16]
 800879c:	b083      	sub	sp, #12
 800879e:	460d      	mov	r5, r1
 80087a0:	4606      	mov	r6, r0
 80087a2:	f101 0e14 	add.w	lr, r1, #20
 80087a6:	2700      	movs	r7, #0
 80087a8:	f8de 1000 	ldr.w	r1, [lr]
 80087ac:	b288      	uxth	r0, r1
 80087ae:	0c09      	lsrs	r1, r1, #16
 80087b0:	fb02 3300 	mla	r3, r2, r0, r3
 80087b4:	fb02 f101 	mul.w	r1, r2, r1
 80087b8:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 80087bc:	3701      	adds	r7, #1
 80087be:	b29b      	uxth	r3, r3
 80087c0:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 80087c4:	42bc      	cmp	r4, r7
 80087c6:	f84e 3b04 	str.w	r3, [lr], #4
 80087ca:	ea4f 4311 	mov.w	r3, r1, lsr #16
 80087ce:	dceb      	bgt.n	80087a8 <__multadd+0x10>
 80087d0:	b13b      	cbz	r3, 80087e2 <__multadd+0x4a>
 80087d2:	68aa      	ldr	r2, [r5, #8]
 80087d4:	4294      	cmp	r4, r2
 80087d6:	da07      	bge.n	80087e8 <__multadd+0x50>
 80087d8:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 80087dc:	3401      	adds	r4, #1
 80087de:	6153      	str	r3, [r2, #20]
 80087e0:	612c      	str	r4, [r5, #16]
 80087e2:	4628      	mov	r0, r5
 80087e4:	b003      	add	sp, #12
 80087e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087e8:	6869      	ldr	r1, [r5, #4]
 80087ea:	9301      	str	r3, [sp, #4]
 80087ec:	3101      	adds	r1, #1
 80087ee:	4630      	mov	r0, r6
 80087f0:	f7ff ffa2 	bl	8008738 <_Balloc>
 80087f4:	692a      	ldr	r2, [r5, #16]
 80087f6:	3202      	adds	r2, #2
 80087f8:	f105 010c 	add.w	r1, r5, #12
 80087fc:	4607      	mov	r7, r0
 80087fe:	0092      	lsls	r2, r2, #2
 8008800:	300c      	adds	r0, #12
 8008802:	f7fa ff6d 	bl	80036e0 <memcpy>
 8008806:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8008808:	6869      	ldr	r1, [r5, #4]
 800880a:	9b01      	ldr	r3, [sp, #4]
 800880c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8008810:	6028      	str	r0, [r5, #0]
 8008812:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8008816:	463d      	mov	r5, r7
 8008818:	e7de      	b.n	80087d8 <__multadd+0x40>
 800881a:	bf00      	nop

0800881c <__s2b>:
 800881c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008820:	4c23      	ldr	r4, [pc, #140]	; (80088b0 <__s2b+0x94>)
 8008822:	9e08      	ldr	r6, [sp, #32]
 8008824:	461f      	mov	r7, r3
 8008826:	3308      	adds	r3, #8
 8008828:	fb84 4e03 	smull	r4, lr, r4, r3
 800882c:	17db      	asrs	r3, r3, #31
 800882e:	ebc3 0e6e 	rsb	lr, r3, lr, asr #1
 8008832:	f1be 0f01 	cmp.w	lr, #1
 8008836:	4605      	mov	r5, r0
 8008838:	460c      	mov	r4, r1
 800883a:	4690      	mov	r8, r2
 800883c:	dd35      	ble.n	80088aa <__s2b+0x8e>
 800883e:	2301      	movs	r3, #1
 8008840:	2100      	movs	r1, #0
 8008842:	005b      	lsls	r3, r3, #1
 8008844:	459e      	cmp	lr, r3
 8008846:	f101 0101 	add.w	r1, r1, #1
 800884a:	dcfa      	bgt.n	8008842 <__s2b+0x26>
 800884c:	4628      	mov	r0, r5
 800884e:	f7ff ff73 	bl	8008738 <_Balloc>
 8008852:	2301      	movs	r3, #1
 8008854:	f1b8 0f09 	cmp.w	r8, #9
 8008858:	6146      	str	r6, [r0, #20]
 800885a:	6103      	str	r3, [r0, #16]
 800885c:	dd21      	ble.n	80088a2 <__s2b+0x86>
 800885e:	f104 0909 	add.w	r9, r4, #9
 8008862:	464e      	mov	r6, r9
 8008864:	4444      	add	r4, r8
 8008866:	f816 3b01 	ldrb.w	r3, [r6], #1
 800886a:	4601      	mov	r1, r0
 800886c:	3b30      	subs	r3, #48	; 0x30
 800886e:	4628      	mov	r0, r5
 8008870:	220a      	movs	r2, #10
 8008872:	f7ff ff91 	bl	8008798 <__multadd>
 8008876:	42a6      	cmp	r6, r4
 8008878:	d1f5      	bne.n	8008866 <__s2b+0x4a>
 800887a:	eb09 0408 	add.w	r4, r9, r8
 800887e:	3c08      	subs	r4, #8
 8008880:	4547      	cmp	r7, r8
 8008882:	dd0c      	ble.n	800889e <__s2b+0x82>
 8008884:	ebc8 0707 	rsb	r7, r8, r7
 8008888:	4427      	add	r7, r4
 800888a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800888e:	4601      	mov	r1, r0
 8008890:	3b30      	subs	r3, #48	; 0x30
 8008892:	4628      	mov	r0, r5
 8008894:	220a      	movs	r2, #10
 8008896:	f7ff ff7f 	bl	8008798 <__multadd>
 800889a:	42bc      	cmp	r4, r7
 800889c:	d1f5      	bne.n	800888a <__s2b+0x6e>
 800889e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088a2:	340a      	adds	r4, #10
 80088a4:	f04f 0809 	mov.w	r8, #9
 80088a8:	e7ea      	b.n	8008880 <__s2b+0x64>
 80088aa:	2100      	movs	r1, #0
 80088ac:	e7ce      	b.n	800884c <__s2b+0x30>
 80088ae:	bf00      	nop
 80088b0:	38e38e39 	.word	0x38e38e39

080088b4 <__hi0bits>:
 80088b4:	0c03      	lsrs	r3, r0, #16
 80088b6:	041b      	lsls	r3, r3, #16
 80088b8:	b9b3      	cbnz	r3, 80088e8 <__hi0bits+0x34>
 80088ba:	0400      	lsls	r0, r0, #16
 80088bc:	2310      	movs	r3, #16
 80088be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80088c2:	bf04      	itt	eq
 80088c4:	0200      	lsleq	r0, r0, #8
 80088c6:	3308      	addeq	r3, #8
 80088c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80088cc:	bf04      	itt	eq
 80088ce:	0100      	lsleq	r0, r0, #4
 80088d0:	3304      	addeq	r3, #4
 80088d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80088d6:	bf04      	itt	eq
 80088d8:	0080      	lsleq	r0, r0, #2
 80088da:	3302      	addeq	r3, #2
 80088dc:	2800      	cmp	r0, #0
 80088de:	db07      	blt.n	80088f0 <__hi0bits+0x3c>
 80088e0:	0042      	lsls	r2, r0, #1
 80088e2:	d403      	bmi.n	80088ec <__hi0bits+0x38>
 80088e4:	2020      	movs	r0, #32
 80088e6:	4770      	bx	lr
 80088e8:	2300      	movs	r3, #0
 80088ea:	e7e8      	b.n	80088be <__hi0bits+0xa>
 80088ec:	1c58      	adds	r0, r3, #1
 80088ee:	4770      	bx	lr
 80088f0:	4618      	mov	r0, r3
 80088f2:	4770      	bx	lr

080088f4 <__lo0bits>:
 80088f4:	6803      	ldr	r3, [r0, #0]
 80088f6:	f013 0207 	ands.w	r2, r3, #7
 80088fa:	d007      	beq.n	800890c <__lo0bits+0x18>
 80088fc:	07d9      	lsls	r1, r3, #31
 80088fe:	d420      	bmi.n	8008942 <__lo0bits+0x4e>
 8008900:	079a      	lsls	r2, r3, #30
 8008902:	d420      	bmi.n	8008946 <__lo0bits+0x52>
 8008904:	089b      	lsrs	r3, r3, #2
 8008906:	6003      	str	r3, [r0, #0]
 8008908:	2002      	movs	r0, #2
 800890a:	4770      	bx	lr
 800890c:	b299      	uxth	r1, r3
 800890e:	b909      	cbnz	r1, 8008914 <__lo0bits+0x20>
 8008910:	0c1b      	lsrs	r3, r3, #16
 8008912:	2210      	movs	r2, #16
 8008914:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008918:	bf04      	itt	eq
 800891a:	0a1b      	lsreq	r3, r3, #8
 800891c:	3208      	addeq	r2, #8
 800891e:	0719      	lsls	r1, r3, #28
 8008920:	bf04      	itt	eq
 8008922:	091b      	lsreq	r3, r3, #4
 8008924:	3204      	addeq	r2, #4
 8008926:	0799      	lsls	r1, r3, #30
 8008928:	bf04      	itt	eq
 800892a:	089b      	lsreq	r3, r3, #2
 800892c:	3202      	addeq	r2, #2
 800892e:	07d9      	lsls	r1, r3, #31
 8008930:	d404      	bmi.n	800893c <__lo0bits+0x48>
 8008932:	085b      	lsrs	r3, r3, #1
 8008934:	d101      	bne.n	800893a <__lo0bits+0x46>
 8008936:	2020      	movs	r0, #32
 8008938:	4770      	bx	lr
 800893a:	3201      	adds	r2, #1
 800893c:	6003      	str	r3, [r0, #0]
 800893e:	4610      	mov	r0, r2
 8008940:	4770      	bx	lr
 8008942:	2000      	movs	r0, #0
 8008944:	4770      	bx	lr
 8008946:	085b      	lsrs	r3, r3, #1
 8008948:	6003      	str	r3, [r0, #0]
 800894a:	2001      	movs	r0, #1
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop

08008950 <__i2b>:
 8008950:	b510      	push	{r4, lr}
 8008952:	460c      	mov	r4, r1
 8008954:	2101      	movs	r1, #1
 8008956:	f7ff feef 	bl	8008738 <_Balloc>
 800895a:	2201      	movs	r2, #1
 800895c:	6144      	str	r4, [r0, #20]
 800895e:	6102      	str	r2, [r0, #16]
 8008960:	bd10      	pop	{r4, pc}
 8008962:	bf00      	nop

08008964 <__multiply>:
 8008964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008968:	690f      	ldr	r7, [r1, #16]
 800896a:	6916      	ldr	r6, [r2, #16]
 800896c:	42b7      	cmp	r7, r6
 800896e:	b083      	sub	sp, #12
 8008970:	460d      	mov	r5, r1
 8008972:	4614      	mov	r4, r2
 8008974:	f2c0 808d 	blt.w	8008a92 <__multiply+0x12e>
 8008978:	4633      	mov	r3, r6
 800897a:	463e      	mov	r6, r7
 800897c:	461f      	mov	r7, r3
 800897e:	68ab      	ldr	r3, [r5, #8]
 8008980:	6869      	ldr	r1, [r5, #4]
 8008982:	eb06 0807 	add.w	r8, r6, r7
 8008986:	4598      	cmp	r8, r3
 8008988:	bfc8      	it	gt
 800898a:	3101      	addgt	r1, #1
 800898c:	f7ff fed4 	bl	8008738 <_Balloc>
 8008990:	f100 0c14 	add.w	ip, r0, #20
 8008994:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8008998:	45cc      	cmp	ip, r9
 800899a:	9000      	str	r0, [sp, #0]
 800899c:	d205      	bcs.n	80089aa <__multiply+0x46>
 800899e:	4663      	mov	r3, ip
 80089a0:	2100      	movs	r1, #0
 80089a2:	f843 1b04 	str.w	r1, [r3], #4
 80089a6:	4599      	cmp	r9, r3
 80089a8:	d8fb      	bhi.n	80089a2 <__multiply+0x3e>
 80089aa:	f104 0214 	add.w	r2, r4, #20
 80089ae:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 80089b2:	f105 0314 	add.w	r3, r5, #20
 80089b6:	4552      	cmp	r2, sl
 80089b8:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 80089bc:	d254      	bcs.n	8008a68 <__multiply+0x104>
 80089be:	f8cd 9004 	str.w	r9, [sp, #4]
 80089c2:	4699      	mov	r9, r3
 80089c4:	f852 3b04 	ldr.w	r3, [r2], #4
 80089c8:	fa1f fb83 	uxth.w	fp, r3
 80089cc:	f1bb 0f00 	cmp.w	fp, #0
 80089d0:	d020      	beq.n	8008a14 <__multiply+0xb0>
 80089d2:	2000      	movs	r0, #0
 80089d4:	464f      	mov	r7, r9
 80089d6:	4666      	mov	r6, ip
 80089d8:	4605      	mov	r5, r0
 80089da:	e000      	b.n	80089de <__multiply+0x7a>
 80089dc:	461e      	mov	r6, r3
 80089de:	f857 4b04 	ldr.w	r4, [r7], #4
 80089e2:	6830      	ldr	r0, [r6, #0]
 80089e4:	b2a1      	uxth	r1, r4
 80089e6:	b283      	uxth	r3, r0
 80089e8:	fb0b 3101 	mla	r1, fp, r1, r3
 80089ec:	0c24      	lsrs	r4, r4, #16
 80089ee:	0c00      	lsrs	r0, r0, #16
 80089f0:	194b      	adds	r3, r1, r5
 80089f2:	fb0b 0004 	mla	r0, fp, r4, r0
 80089f6:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 80089fa:	b299      	uxth	r1, r3
 80089fc:	4633      	mov	r3, r6
 80089fe:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a02:	45be      	cmp	lr, r7
 8008a04:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8008a08:	f843 1b04 	str.w	r1, [r3], #4
 8008a0c:	d8e6      	bhi.n	80089dc <__multiply+0x78>
 8008a0e:	6075      	str	r5, [r6, #4]
 8008a10:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8008a14:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8008a18:	d020      	beq.n	8008a5c <__multiply+0xf8>
 8008a1a:	f8dc 3000 	ldr.w	r3, [ip]
 8008a1e:	4667      	mov	r7, ip
 8008a20:	4618      	mov	r0, r3
 8008a22:	464d      	mov	r5, r9
 8008a24:	2100      	movs	r1, #0
 8008a26:	e000      	b.n	8008a2a <__multiply+0xc6>
 8008a28:	4637      	mov	r7, r6
 8008a2a:	882c      	ldrh	r4, [r5, #0]
 8008a2c:	0c00      	lsrs	r0, r0, #16
 8008a2e:	fb0b 0004 	mla	r0, fp, r4, r0
 8008a32:	4401      	add	r1, r0
 8008a34:	b29c      	uxth	r4, r3
 8008a36:	463e      	mov	r6, r7
 8008a38:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8008a3c:	f846 3b04 	str.w	r3, [r6], #4
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f855 4b04 	ldr.w	r4, [r5], #4
 8008a46:	b283      	uxth	r3, r0
 8008a48:	0c24      	lsrs	r4, r4, #16
 8008a4a:	fb0b 3404 	mla	r4, fp, r4, r3
 8008a4e:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8008a52:	45ae      	cmp	lr, r5
 8008a54:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8008a58:	d8e6      	bhi.n	8008a28 <__multiply+0xc4>
 8008a5a:	607b      	str	r3, [r7, #4]
 8008a5c:	4592      	cmp	sl, r2
 8008a5e:	f10c 0c04 	add.w	ip, ip, #4
 8008a62:	d8af      	bhi.n	80089c4 <__multiply+0x60>
 8008a64:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008a68:	f1b8 0f00 	cmp.w	r8, #0
 8008a6c:	dd0b      	ble.n	8008a86 <__multiply+0x122>
 8008a6e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8008a72:	f1a9 0904 	sub.w	r9, r9, #4
 8008a76:	b11b      	cbz	r3, 8008a80 <__multiply+0x11c>
 8008a78:	e005      	b.n	8008a86 <__multiply+0x122>
 8008a7a:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8008a7e:	b913      	cbnz	r3, 8008a86 <__multiply+0x122>
 8008a80:	f1b8 0801 	subs.w	r8, r8, #1
 8008a84:	d1f9      	bne.n	8008a7a <__multiply+0x116>
 8008a86:	9800      	ldr	r0, [sp, #0]
 8008a88:	f8c0 8010 	str.w	r8, [r0, #16]
 8008a8c:	b003      	add	sp, #12
 8008a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a92:	4615      	mov	r5, r2
 8008a94:	460c      	mov	r4, r1
 8008a96:	e772      	b.n	800897e <__multiply+0x1a>

08008a98 <__pow5mult>:
 8008a98:	f012 0303 	ands.w	r3, r2, #3
 8008a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa0:	4614      	mov	r4, r2
 8008aa2:	4607      	mov	r7, r0
 8008aa4:	460e      	mov	r6, r1
 8008aa6:	d12d      	bne.n	8008b04 <__pow5mult+0x6c>
 8008aa8:	10a4      	asrs	r4, r4, #2
 8008aaa:	d01c      	beq.n	8008ae6 <__pow5mult+0x4e>
 8008aac:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8008aae:	b395      	cbz	r5, 8008b16 <__pow5mult+0x7e>
 8008ab0:	07e3      	lsls	r3, r4, #31
 8008ab2:	f04f 0800 	mov.w	r8, #0
 8008ab6:	d406      	bmi.n	8008ac6 <__pow5mult+0x2e>
 8008ab8:	1064      	asrs	r4, r4, #1
 8008aba:	d014      	beq.n	8008ae6 <__pow5mult+0x4e>
 8008abc:	6828      	ldr	r0, [r5, #0]
 8008abe:	b1a8      	cbz	r0, 8008aec <__pow5mult+0x54>
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	07e3      	lsls	r3, r4, #31
 8008ac4:	d5f8      	bpl.n	8008ab8 <__pow5mult+0x20>
 8008ac6:	4638      	mov	r0, r7
 8008ac8:	4631      	mov	r1, r6
 8008aca:	462a      	mov	r2, r5
 8008acc:	f7ff ff4a 	bl	8008964 <__multiply>
 8008ad0:	b1b6      	cbz	r6, 8008b00 <__pow5mult+0x68>
 8008ad2:	6872      	ldr	r2, [r6, #4]
 8008ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ad6:	1064      	asrs	r4, r4, #1
 8008ad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008adc:	6031      	str	r1, [r6, #0]
 8008ade:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	d1ea      	bne.n	8008abc <__pow5mult+0x24>
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aec:	4629      	mov	r1, r5
 8008aee:	462a      	mov	r2, r5
 8008af0:	4638      	mov	r0, r7
 8008af2:	f7ff ff37 	bl	8008964 <__multiply>
 8008af6:	6028      	str	r0, [r5, #0]
 8008af8:	f8c0 8000 	str.w	r8, [r0]
 8008afc:	4605      	mov	r5, r0
 8008afe:	e7e0      	b.n	8008ac2 <__pow5mult+0x2a>
 8008b00:	4606      	mov	r6, r0
 8008b02:	e7d9      	b.n	8008ab8 <__pow5mult+0x20>
 8008b04:	1e5a      	subs	r2, r3, #1
 8008b06:	4d0b      	ldr	r5, [pc, #44]	; (8008b34 <__pow5mult+0x9c>)
 8008b08:	2300      	movs	r3, #0
 8008b0a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8008b0e:	f7ff fe43 	bl	8008798 <__multadd>
 8008b12:	4606      	mov	r6, r0
 8008b14:	e7c8      	b.n	8008aa8 <__pow5mult+0x10>
 8008b16:	2101      	movs	r1, #1
 8008b18:	4638      	mov	r0, r7
 8008b1a:	f7ff fe0d 	bl	8008738 <_Balloc>
 8008b1e:	f240 2171 	movw	r1, #625	; 0x271
 8008b22:	2201      	movs	r2, #1
 8008b24:	2300      	movs	r3, #0
 8008b26:	6141      	str	r1, [r0, #20]
 8008b28:	6102      	str	r2, [r0, #16]
 8008b2a:	4605      	mov	r5, r0
 8008b2c:	64b8      	str	r0, [r7, #72]	; 0x48
 8008b2e:	6003      	str	r3, [r0, #0]
 8008b30:	e7be      	b.n	8008ab0 <__pow5mult+0x18>
 8008b32:	bf00      	nop
 8008b34:	0800ca60 	.word	0x0800ca60

08008b38 <__lshift>:
 8008b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b3c:	690f      	ldr	r7, [r1, #16]
 8008b3e:	688b      	ldr	r3, [r1, #8]
 8008b40:	ea4f 1962 	mov.w	r9, r2, asr #5
 8008b44:	444f      	add	r7, r9
 8008b46:	1c7d      	adds	r5, r7, #1
 8008b48:	429d      	cmp	r5, r3
 8008b4a:	460e      	mov	r6, r1
 8008b4c:	4614      	mov	r4, r2
 8008b4e:	6849      	ldr	r1, [r1, #4]
 8008b50:	4680      	mov	r8, r0
 8008b52:	dd04      	ble.n	8008b5e <__lshift+0x26>
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	429d      	cmp	r5, r3
 8008b58:	f101 0101 	add.w	r1, r1, #1
 8008b5c:	dcfa      	bgt.n	8008b54 <__lshift+0x1c>
 8008b5e:	4640      	mov	r0, r8
 8008b60:	f7ff fdea 	bl	8008738 <_Balloc>
 8008b64:	f1b9 0f00 	cmp.w	r9, #0
 8008b68:	f100 0114 	add.w	r1, r0, #20
 8008b6c:	dd09      	ble.n	8008b82 <__lshift+0x4a>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	469e      	mov	lr, r3
 8008b72:	460a      	mov	r2, r1
 8008b74:	3301      	adds	r3, #1
 8008b76:	454b      	cmp	r3, r9
 8008b78:	f842 eb04 	str.w	lr, [r2], #4
 8008b7c:	d1fa      	bne.n	8008b74 <__lshift+0x3c>
 8008b7e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008b82:	6932      	ldr	r2, [r6, #16]
 8008b84:	f106 0314 	add.w	r3, r6, #20
 8008b88:	f014 0c1f 	ands.w	ip, r4, #31
 8008b8c:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 8008b90:	d01f      	beq.n	8008bd2 <__lshift+0x9a>
 8008b92:	f1cc 0920 	rsb	r9, ip, #32
 8008b96:	2200      	movs	r2, #0
 8008b98:	681c      	ldr	r4, [r3, #0]
 8008b9a:	fa04 f40c 	lsl.w	r4, r4, ip
 8008b9e:	4314      	orrs	r4, r2
 8008ba0:	468a      	mov	sl, r1
 8008ba2:	f841 4b04 	str.w	r4, [r1], #4
 8008ba6:	f853 4b04 	ldr.w	r4, [r3], #4
 8008baa:	459e      	cmp	lr, r3
 8008bac:	fa24 f209 	lsr.w	r2, r4, r9
 8008bb0:	d8f2      	bhi.n	8008b98 <__lshift+0x60>
 8008bb2:	f8ca 2004 	str.w	r2, [sl, #4]
 8008bb6:	b102      	cbz	r2, 8008bba <__lshift+0x82>
 8008bb8:	1cbd      	adds	r5, r7, #2
 8008bba:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8008bbe:	6872      	ldr	r2, [r6, #4]
 8008bc0:	3d01      	subs	r5, #1
 8008bc2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bc6:	6105      	str	r5, [r0, #16]
 8008bc8:	6031      	str	r1, [r6, #0]
 8008bca:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8008bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd2:	3904      	subs	r1, #4
 8008bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bdc:	459e      	cmp	lr, r3
 8008bde:	d8f9      	bhi.n	8008bd4 <__lshift+0x9c>
 8008be0:	e7eb      	b.n	8008bba <__lshift+0x82>
 8008be2:	bf00      	nop

08008be4 <__mcmp>:
 8008be4:	6902      	ldr	r2, [r0, #16]
 8008be6:	690b      	ldr	r3, [r1, #16]
 8008be8:	1ad2      	subs	r2, r2, r3
 8008bea:	d113      	bne.n	8008c14 <__mcmp+0x30>
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	3014      	adds	r0, #20
 8008bf0:	3114      	adds	r1, #20
 8008bf2:	4419      	add	r1, r3
 8008bf4:	b410      	push	{r4}
 8008bf6:	4403      	add	r3, r0
 8008bf8:	e001      	b.n	8008bfe <__mcmp+0x1a>
 8008bfa:	4298      	cmp	r0, r3
 8008bfc:	d20c      	bcs.n	8008c18 <__mcmp+0x34>
 8008bfe:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8008c02:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c06:	4294      	cmp	r4, r2
 8008c08:	d0f7      	beq.n	8008bfa <__mcmp+0x16>
 8008c0a:	d309      	bcc.n	8008c20 <__mcmp+0x3c>
 8008c0c:	2001      	movs	r0, #1
 8008c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c12:	4770      	bx	lr
 8008c14:	4610      	mov	r0, r2
 8008c16:	4770      	bx	lr
 8008c18:	2000      	movs	r0, #0
 8008c1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c1e:	4770      	bx	lr
 8008c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop

08008c2c <__mdiff>:
 8008c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c30:	460e      	mov	r6, r1
 8008c32:	4605      	mov	r5, r0
 8008c34:	4611      	mov	r1, r2
 8008c36:	4630      	mov	r0, r6
 8008c38:	4614      	mov	r4, r2
 8008c3a:	f7ff ffd3 	bl	8008be4 <__mcmp>
 8008c3e:	1e07      	subs	r7, r0, #0
 8008c40:	d054      	beq.n	8008cec <__mdiff+0xc0>
 8008c42:	db4d      	blt.n	8008ce0 <__mdiff+0xb4>
 8008c44:	f04f 0800 	mov.w	r8, #0
 8008c48:	6871      	ldr	r1, [r6, #4]
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	f7ff fd74 	bl	8008738 <_Balloc>
 8008c50:	6937      	ldr	r7, [r6, #16]
 8008c52:	6923      	ldr	r3, [r4, #16]
 8008c54:	f8c0 800c 	str.w	r8, [r0, #12]
 8008c58:	3614      	adds	r6, #20
 8008c5a:	f104 0214 	add.w	r2, r4, #20
 8008c5e:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8008c62:	f100 0514 	add.w	r5, r0, #20
 8008c66:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008c70:	f852 4b04 	ldr.w	r4, [r2], #4
 8008c74:	fa13 f388 	uxtah	r3, r3, r8
 8008c78:	b2a1      	uxth	r1, r4
 8008c7a:	0c24      	lsrs	r4, r4, #16
 8008c7c:	1a59      	subs	r1, r3, r1
 8008c7e:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 8008c82:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008c86:	b289      	uxth	r1, r1
 8008c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008c8c:	4594      	cmp	ip, r2
 8008c8e:	f845 1b04 	str.w	r1, [r5], #4
 8008c92:	ea4f 4323 	mov.w	r3, r3, asr #16
 8008c96:	4634      	mov	r4, r6
 8008c98:	d8e8      	bhi.n	8008c6c <__mdiff+0x40>
 8008c9a:	45b6      	cmp	lr, r6
 8008c9c:	46ac      	mov	ip, r5
 8008c9e:	d915      	bls.n	8008ccc <__mdiff+0xa0>
 8008ca0:	f854 2b04 	ldr.w	r2, [r4], #4
 8008ca4:	fa13 f182 	uxtah	r1, r3, r2
 8008ca8:	0c13      	lsrs	r3, r2, #16
 8008caa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008cae:	b289      	uxth	r1, r1
 8008cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008cb4:	45a6      	cmp	lr, r4
 8008cb6:	f845 1b04 	str.w	r1, [r5], #4
 8008cba:	ea4f 4323 	mov.w	r3, r3, asr #16
 8008cbe:	d8ef      	bhi.n	8008ca0 <__mdiff+0x74>
 8008cc0:	43f6      	mvns	r6, r6
 8008cc2:	4476      	add	r6, lr
 8008cc4:	f026 0503 	bic.w	r5, r6, #3
 8008cc8:	3504      	adds	r5, #4
 8008cca:	4465      	add	r5, ip
 8008ccc:	3d04      	subs	r5, #4
 8008cce:	b921      	cbnz	r1, 8008cda <__mdiff+0xae>
 8008cd0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008cd4:	3f01      	subs	r7, #1
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d0fa      	beq.n	8008cd0 <__mdiff+0xa4>
 8008cda:	6107      	str	r7, [r0, #16]
 8008cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ce0:	4633      	mov	r3, r6
 8008ce2:	f04f 0801 	mov.w	r8, #1
 8008ce6:	4626      	mov	r6, r4
 8008ce8:	461c      	mov	r4, r3
 8008cea:	e7ad      	b.n	8008c48 <__mdiff+0x1c>
 8008cec:	4628      	mov	r0, r5
 8008cee:	4639      	mov	r1, r7
 8008cf0:	f7ff fd22 	bl	8008738 <_Balloc>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	6147      	str	r7, [r0, #20]
 8008cf8:	6103      	str	r3, [r0, #16]
 8008cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cfe:	bf00      	nop

08008d00 <__ulp>:
 8008d00:	4b12      	ldr	r3, [pc, #72]	; (8008d4c <__ulp+0x4c>)
 8008d02:	ee10 2a90 	vmov	r2, s1
 8008d06:	401a      	ands	r2, r3
 8008d08:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	dd04      	ble.n	8008d1a <__ulp+0x1a>
 8008d10:	2000      	movs	r0, #0
 8008d12:	4619      	mov	r1, r3
 8008d14:	ec41 0b10 	vmov	d0, r0, r1
 8008d18:	4770      	bx	lr
 8008d1a:	425b      	negs	r3, r3
 8008d1c:	151b      	asrs	r3, r3, #20
 8008d1e:	2b13      	cmp	r3, #19
 8008d20:	dd0c      	ble.n	8008d3c <__ulp+0x3c>
 8008d22:	2b32      	cmp	r3, #50	; 0x32
 8008d24:	bfdd      	ittte	le
 8008d26:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
 8008d2a:	2201      	movle	r2, #1
 8008d2c:	fa02 f303 	lslle.w	r3, r2, r3
 8008d30:	2301      	movgt	r3, #1
 8008d32:	2100      	movs	r1, #0
 8008d34:	4618      	mov	r0, r3
 8008d36:	ec41 0b10 	vmov	d0, r0, r1
 8008d3a:	4770      	bx	lr
 8008d3c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008d40:	2000      	movs	r0, #0
 8008d42:	fa42 f103 	asr.w	r1, r2, r3
 8008d46:	ec41 0b10 	vmov	d0, r0, r1
 8008d4a:	4770      	bx	lr
 8008d4c:	7ff00000 	.word	0x7ff00000

08008d50 <__b2d>:
 8008d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d52:	6904      	ldr	r4, [r0, #16]
 8008d54:	f100 0714 	add.w	r7, r0, #20
 8008d58:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8008d5c:	460d      	mov	r5, r1
 8008d5e:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8008d62:	4630      	mov	r0, r6
 8008d64:	f7ff fda6 	bl	80088b4 <__hi0bits>
 8008d68:	f1c0 0320 	rsb	r3, r0, #32
 8008d6c:	280a      	cmp	r0, #10
 8008d6e:	602b      	str	r3, [r5, #0]
 8008d70:	f1a4 0104 	sub.w	r1, r4, #4
 8008d74:	dc16      	bgt.n	8008da4 <__b2d+0x54>
 8008d76:	428f      	cmp	r7, r1
 8008d78:	f1c0 050b 	rsb	r5, r0, #11
 8008d7c:	bf38      	it	cc
 8008d7e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 8008d82:	fa26 fe05 	lsr.w	lr, r6, r5
 8008d86:	f100 0015 	add.w	r0, r0, #21
 8008d8a:	f04e 537f 	orr.w	r3, lr, #1069547520	; 0x3fc00000
 8008d8e:	bf34      	ite	cc
 8008d90:	40e9      	lsrcc	r1, r5
 8008d92:	2100      	movcs	r1, #0
 8008d94:	4086      	lsls	r6, r0
 8008d96:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008d9a:	ea41 0206 	orr.w	r2, r1, r6
 8008d9e:	ec43 2b10 	vmov	d0, r2, r3
 8008da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008da4:	428f      	cmp	r7, r1
 8008da6:	d220      	bcs.n	8008dea <__b2d+0x9a>
 8008da8:	f1b0 0e0b 	subs.w	lr, r0, #11
 8008dac:	f1a4 0c08 	sub.w	ip, r4, #8
 8008db0:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8008db4:	d026      	beq.n	8008e04 <__b2d+0xb4>
 8008db6:	f1c0 052b 	rsb	r5, r0, #43	; 0x2b
 8008dba:	4567      	cmp	r7, ip
 8008dbc:	fa21 f305 	lsr.w	r3, r1, r5
 8008dc0:	fa06 f60e 	lsl.w	r6, r6, lr
 8008dc4:	ea46 0603 	orr.w	r6, r6, r3
 8008dc8:	bf38      	it	cc
 8008dca:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
 8008dce:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
 8008dd2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008dd6:	bf34      	ite	cc
 8008dd8:	40e8      	lsrcc	r0, r5
 8008dda:	2000      	movcs	r0, #0
 8008ddc:	fa01 f10e 	lsl.w	r1, r1, lr
 8008de0:	ea41 0200 	orr.w	r2, r1, r0
 8008de4:	ec43 2b10 	vmov	d0, r2, r3
 8008de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dea:	f1b0 0e0b 	subs.w	lr, r0, #11
 8008dee:	d008      	beq.n	8008e02 <__b2d+0xb2>
 8008df0:	fa06 f60e 	lsl.w	r6, r6, lr
 8008df4:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
 8008df8:	2000      	movs	r0, #0
 8008dfa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008dfe:	4601      	mov	r1, r0
 8008e00:	e7ec      	b.n	8008ddc <__b2d+0x8c>
 8008e02:	4671      	mov	r1, lr
 8008e04:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
 8008e08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008e0c:	460a      	mov	r2, r1
 8008e0e:	ec43 2b10 	vmov	d0, r2, r3
 8008e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e14 <__d2b>:
 8008e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e18:	ec57 6b10 	vmov	r6, r7, d0
 8008e1c:	b083      	sub	sp, #12
 8008e1e:	4688      	mov	r8, r1
 8008e20:	2101      	movs	r1, #1
 8008e22:	463c      	mov	r4, r7
 8008e24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e28:	4617      	mov	r7, r2
 8008e2a:	f7ff fc85 	bl	8008738 <_Balloc>
 8008e2e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008e32:	4681      	mov	r9, r0
 8008e34:	b10d      	cbz	r5, 8008e3a <__d2b+0x26>
 8008e36:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8008e3a:	9401      	str	r4, [sp, #4]
 8008e3c:	b31e      	cbz	r6, 8008e86 <__d2b+0x72>
 8008e3e:	a802      	add	r0, sp, #8
 8008e40:	f840 6d08 	str.w	r6, [r0, #-8]!
 8008e44:	f7ff fd56 	bl	80088f4 <__lo0bits>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	d134      	bne.n	8008eb6 <__d2b+0xa2>
 8008e4c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8008e50:	f8c9 2014 	str.w	r2, [r9, #20]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	bf14      	ite	ne
 8008e58:	2402      	movne	r4, #2
 8008e5a:	2401      	moveq	r4, #1
 8008e5c:	f8c9 3018 	str.w	r3, [r9, #24]
 8008e60:	f8c9 4010 	str.w	r4, [r9, #16]
 8008e64:	b9dd      	cbnz	r5, 8008e9e <__d2b+0x8a>
 8008e66:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 8008e6a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e6e:	f8c8 0000 	str.w	r0, [r8]
 8008e72:	6918      	ldr	r0, [r3, #16]
 8008e74:	f7ff fd1e 	bl	80088b4 <__hi0bits>
 8008e78:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8008e7c:	6038      	str	r0, [r7, #0]
 8008e7e:	4648      	mov	r0, r9
 8008e80:	b003      	add	sp, #12
 8008e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e86:	a801      	add	r0, sp, #4
 8008e88:	f7ff fd34 	bl	80088f4 <__lo0bits>
 8008e8c:	2401      	movs	r4, #1
 8008e8e:	9b01      	ldr	r3, [sp, #4]
 8008e90:	f8c9 3014 	str.w	r3, [r9, #20]
 8008e94:	3020      	adds	r0, #32
 8008e96:	f8c9 4010 	str.w	r4, [r9, #16]
 8008e9a:	2d00      	cmp	r5, #0
 8008e9c:	d0e3      	beq.n	8008e66 <__d2b+0x52>
 8008e9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ea2:	4405      	add	r5, r0
 8008ea4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ea8:	f8c8 5000 	str.w	r5, [r8]
 8008eac:	6038      	str	r0, [r7, #0]
 8008eae:	4648      	mov	r0, r9
 8008eb0:	b003      	add	sp, #12
 8008eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eb6:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8008eba:	f1c0 0120 	rsb	r1, r0, #32
 8008ebe:	fa03 f101 	lsl.w	r1, r3, r1
 8008ec2:	430a      	orrs	r2, r1
 8008ec4:	40c3      	lsrs	r3, r0
 8008ec6:	9301      	str	r3, [sp, #4]
 8008ec8:	f8c9 2014 	str.w	r2, [r9, #20]
 8008ecc:	e7c2      	b.n	8008e54 <__d2b+0x40>
 8008ece:	bf00      	nop

08008ed0 <__ratio>:
 8008ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ed4:	b083      	sub	sp, #12
 8008ed6:	4688      	mov	r8, r1
 8008ed8:	4669      	mov	r1, sp
 8008eda:	4681      	mov	r9, r0
 8008edc:	f7ff ff38 	bl	8008d50 <__b2d>
 8008ee0:	4640      	mov	r0, r8
 8008ee2:	a901      	add	r1, sp, #4
 8008ee4:	ec55 4b10 	vmov	r4, r5, d0
 8008ee8:	f7ff ff32 	bl	8008d50 <__b2d>
 8008eec:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8008ef0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8008ef4:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8008ef8:	1ac9      	subs	r1, r1, r3
 8008efa:	1a12      	subs	r2, r2, r0
 8008efc:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	ec57 6b10 	vmov	r6, r7, d0
 8008f06:	dd0d      	ble.n	8008f24 <__ratio+0x54>
 8008f08:	eb05 5103 	add.w	r1, r5, r3, lsl #20
 8008f0c:	460d      	mov	r5, r1
 8008f0e:	4620      	mov	r0, r4
 8008f10:	4629      	mov	r1, r5
 8008f12:	4632      	mov	r2, r6
 8008f14:	463b      	mov	r3, r7
 8008f16:	f002 fea5 	bl	800bc64 <__aeabi_ddiv>
 8008f1a:	ec41 0b10 	vmov	d0, r0, r1
 8008f1e:	b003      	add	sp, #12
 8008f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f24:	eba7 5903 	sub.w	r9, r7, r3, lsl #20
 8008f28:	ee10 6a10 	vmov	r6, s0
 8008f2c:	464f      	mov	r7, r9
 8008f2e:	e7ee      	b.n	8008f0e <__ratio+0x3e>

08008f30 <_mprec_log10>:
 8008f30:	2817      	cmp	r0, #23
 8008f32:	b510      	push	{r4, lr}
 8008f34:	4604      	mov	r4, r0
 8008f36:	dd0a      	ble.n	8008f4e <_mprec_log10+0x1e>
 8008f38:	4908      	ldr	r1, [pc, #32]	; (8008f5c <_mprec_log10+0x2c>)
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	4b08      	ldr	r3, [pc, #32]	; (8008f60 <_mprec_log10+0x30>)
 8008f40:	f002 fd66 	bl	800ba10 <__aeabi_dmul>
 8008f44:	3c01      	subs	r4, #1
 8008f46:	d1f9      	bne.n	8008f3c <_mprec_log10+0xc>
 8008f48:	ec41 0b10 	vmov	d0, r0, r1
 8008f4c:	bd10      	pop	{r4, pc}
 8008f4e:	4b05      	ldr	r3, [pc, #20]	; (8008f64 <_mprec_log10+0x34>)
 8008f50:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8008f54:	ed94 0b00 	vldr	d0, [r4]
 8008f58:	bd10      	pop	{r4, pc}
 8008f5a:	bf00      	nop
 8008f5c:	3ff00000 	.word	0x3ff00000
 8008f60:	40240000 	.word	0x40240000
 8008f64:	0800c998 	.word	0x0800c998

08008f68 <__copybits>:
 8008f68:	b470      	push	{r4, r5, r6}
 8008f6a:	6914      	ldr	r4, [r2, #16]
 8008f6c:	f102 0314 	add.w	r3, r2, #20
 8008f70:	3901      	subs	r1, #1
 8008f72:	114e      	asrs	r6, r1, #5
 8008f74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008f78:	3601      	adds	r6, #1
 8008f7a:	42a3      	cmp	r3, r4
 8008f7c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008f80:	d20c      	bcs.n	8008f9c <__copybits+0x34>
 8008f82:	1f01      	subs	r1, r0, #4
 8008f84:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f88:	f841 5f04 	str.w	r5, [r1, #4]!
 8008f8c:	429c      	cmp	r4, r3
 8008f8e:	d8f9      	bhi.n	8008f84 <__copybits+0x1c>
 8008f90:	1aa3      	subs	r3, r4, r2
 8008f92:	3b15      	subs	r3, #21
 8008f94:	f023 0303 	bic.w	r3, r3, #3
 8008f98:	3304      	adds	r3, #4
 8008f9a:	4418      	add	r0, r3
 8008f9c:	4286      	cmp	r6, r0
 8008f9e:	d904      	bls.n	8008faa <__copybits+0x42>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	f840 3b04 	str.w	r3, [r0], #4
 8008fa6:	4286      	cmp	r6, r0
 8008fa8:	d8fb      	bhi.n	8008fa2 <__copybits+0x3a>
 8008faa:	bc70      	pop	{r4, r5, r6}
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop

08008fb0 <__any_on>:
 8008fb0:	6903      	ldr	r3, [r0, #16]
 8008fb2:	114a      	asrs	r2, r1, #5
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	b410      	push	{r4}
 8008fb8:	f100 0414 	add.w	r4, r0, #20
 8008fbc:	da10      	bge.n	8008fe0 <__any_on+0x30>
 8008fbe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008fc2:	429c      	cmp	r4, r3
 8008fc4:	d221      	bcs.n	800900a <__any_on+0x5a>
 8008fc6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008fca:	3b04      	subs	r3, #4
 8008fcc:	b118      	cbz	r0, 8008fd6 <__any_on+0x26>
 8008fce:	e015      	b.n	8008ffc <__any_on+0x4c>
 8008fd0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008fd4:	b992      	cbnz	r2, 8008ffc <__any_on+0x4c>
 8008fd6:	429c      	cmp	r4, r3
 8008fd8:	d3fa      	bcc.n	8008fd0 <__any_on+0x20>
 8008fda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fde:	4770      	bx	lr
 8008fe0:	dd10      	ble.n	8009004 <__any_on+0x54>
 8008fe2:	f011 011f 	ands.w	r1, r1, #31
 8008fe6:	d00d      	beq.n	8009004 <__any_on+0x54>
 8008fe8:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 8008fec:	fa20 f301 	lsr.w	r3, r0, r1
 8008ff0:	fa03 f101 	lsl.w	r1, r3, r1
 8008ff4:	4281      	cmp	r1, r0
 8008ff6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ffa:	d0e2      	beq.n	8008fc2 <__any_on+0x12>
 8008ffc:	2001      	movs	r0, #1
 8008ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009008:	e7db      	b.n	8008fc2 <__any_on+0x12>
 800900a:	2000      	movs	r0, #0
 800900c:	e7e5      	b.n	8008fda <__any_on+0x2a>
 800900e:	bf00      	nop

08009010 <_realloc_r>:
 8009010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009014:	4617      	mov	r7, r2
 8009016:	b083      	sub	sp, #12
 8009018:	460e      	mov	r6, r1
 800901a:	2900      	cmp	r1, #0
 800901c:	f000 80e7 	beq.w	80091ee <_realloc_r+0x1de>
 8009020:	4681      	mov	r9, r0
 8009022:	f107 050b 	add.w	r5, r7, #11
 8009026:	f7ff fb83 	bl	8008730 <__malloc_lock>
 800902a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800902e:	2d16      	cmp	r5, #22
 8009030:	f023 0403 	bic.w	r4, r3, #3
 8009034:	f1a6 0808 	sub.w	r8, r6, #8
 8009038:	d84c      	bhi.n	80090d4 <_realloc_r+0xc4>
 800903a:	2210      	movs	r2, #16
 800903c:	4615      	mov	r5, r2
 800903e:	42af      	cmp	r7, r5
 8009040:	d84d      	bhi.n	80090de <_realloc_r+0xce>
 8009042:	4294      	cmp	r4, r2
 8009044:	f280 8084 	bge.w	8009150 <_realloc_r+0x140>
 8009048:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 80093f8 <_realloc_r+0x3e8>
 800904c:	f8db 0008 	ldr.w	r0, [fp, #8]
 8009050:	eb08 0104 	add.w	r1, r8, r4
 8009054:	4288      	cmp	r0, r1
 8009056:	f000 80d6 	beq.w	8009206 <_realloc_r+0x1f6>
 800905a:	6848      	ldr	r0, [r1, #4]
 800905c:	f020 0e01 	bic.w	lr, r0, #1
 8009060:	448e      	add	lr, r1
 8009062:	f8de e004 	ldr.w	lr, [lr, #4]
 8009066:	f01e 0f01 	tst.w	lr, #1
 800906a:	d13f      	bne.n	80090ec <_realloc_r+0xdc>
 800906c:	f020 0003 	bic.w	r0, r0, #3
 8009070:	4420      	add	r0, r4
 8009072:	4290      	cmp	r0, r2
 8009074:	f280 80c1 	bge.w	80091fa <_realloc_r+0x1ea>
 8009078:	07db      	lsls	r3, r3, #31
 800907a:	f100 808f 	bmi.w	800919c <_realloc_r+0x18c>
 800907e:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009082:	ebc3 0a08 	rsb	sl, r3, r8
 8009086:	f8da 3004 	ldr.w	r3, [sl, #4]
 800908a:	f023 0303 	bic.w	r3, r3, #3
 800908e:	eb00 0e03 	add.w	lr, r0, r3
 8009092:	4596      	cmp	lr, r2
 8009094:	db34      	blt.n	8009100 <_realloc_r+0xf0>
 8009096:	68cb      	ldr	r3, [r1, #12]
 8009098:	688a      	ldr	r2, [r1, #8]
 800909a:	4657      	mov	r7, sl
 800909c:	60d3      	str	r3, [r2, #12]
 800909e:	609a      	str	r2, [r3, #8]
 80090a0:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80090a4:	f8da 300c 	ldr.w	r3, [sl, #12]
 80090a8:	60cb      	str	r3, [r1, #12]
 80090aa:	1f22      	subs	r2, r4, #4
 80090ac:	2a24      	cmp	r2, #36	; 0x24
 80090ae:	6099      	str	r1, [r3, #8]
 80090b0:	f200 8136 	bhi.w	8009320 <_realloc_r+0x310>
 80090b4:	2a13      	cmp	r2, #19
 80090b6:	f240 80fd 	bls.w	80092b4 <_realloc_r+0x2a4>
 80090ba:	6833      	ldr	r3, [r6, #0]
 80090bc:	f8ca 3008 	str.w	r3, [sl, #8]
 80090c0:	6873      	ldr	r3, [r6, #4]
 80090c2:	f8ca 300c 	str.w	r3, [sl, #12]
 80090c6:	2a1b      	cmp	r2, #27
 80090c8:	f200 8140 	bhi.w	800934c <_realloc_r+0x33c>
 80090cc:	3608      	adds	r6, #8
 80090ce:	f10a 0310 	add.w	r3, sl, #16
 80090d2:	e0f0      	b.n	80092b6 <_realloc_r+0x2a6>
 80090d4:	f025 0507 	bic.w	r5, r5, #7
 80090d8:	2d00      	cmp	r5, #0
 80090da:	462a      	mov	r2, r5
 80090dc:	daaf      	bge.n	800903e <_realloc_r+0x2e>
 80090de:	230c      	movs	r3, #12
 80090e0:	2000      	movs	r0, #0
 80090e2:	f8c9 3000 	str.w	r3, [r9]
 80090e6:	b003      	add	sp, #12
 80090e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ec:	07d9      	lsls	r1, r3, #31
 80090ee:	d455      	bmi.n	800919c <_realloc_r+0x18c>
 80090f0:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80090f4:	ebc3 0a08 	rsb	sl, r3, r8
 80090f8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80090fc:	f023 0303 	bic.w	r3, r3, #3
 8009100:	4423      	add	r3, r4
 8009102:	4293      	cmp	r3, r2
 8009104:	db4a      	blt.n	800919c <_realloc_r+0x18c>
 8009106:	4657      	mov	r7, sl
 8009108:	f8da 100c 	ldr.w	r1, [sl, #12]
 800910c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009110:	1f22      	subs	r2, r4, #4
 8009112:	2a24      	cmp	r2, #36	; 0x24
 8009114:	60c1      	str	r1, [r0, #12]
 8009116:	6088      	str	r0, [r1, #8]
 8009118:	f200 810e 	bhi.w	8009338 <_realloc_r+0x328>
 800911c:	2a13      	cmp	r2, #19
 800911e:	f240 8109 	bls.w	8009334 <_realloc_r+0x324>
 8009122:	6831      	ldr	r1, [r6, #0]
 8009124:	f8ca 1008 	str.w	r1, [sl, #8]
 8009128:	6871      	ldr	r1, [r6, #4]
 800912a:	f8ca 100c 	str.w	r1, [sl, #12]
 800912e:	2a1b      	cmp	r2, #27
 8009130:	f200 8121 	bhi.w	8009376 <_realloc_r+0x366>
 8009134:	3608      	adds	r6, #8
 8009136:	f10a 0210 	add.w	r2, sl, #16
 800913a:	6831      	ldr	r1, [r6, #0]
 800913c:	6011      	str	r1, [r2, #0]
 800913e:	6871      	ldr	r1, [r6, #4]
 8009140:	6051      	str	r1, [r2, #4]
 8009142:	68b1      	ldr	r1, [r6, #8]
 8009144:	6091      	str	r1, [r2, #8]
 8009146:	461c      	mov	r4, r3
 8009148:	f8da 3004 	ldr.w	r3, [sl, #4]
 800914c:	463e      	mov	r6, r7
 800914e:	46d0      	mov	r8, sl
 8009150:	1b62      	subs	r2, r4, r5
 8009152:	2a0f      	cmp	r2, #15
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	d80e      	bhi.n	8009178 <_realloc_r+0x168>
 800915a:	4323      	orrs	r3, r4
 800915c:	4444      	add	r4, r8
 800915e:	f8c8 3004 	str.w	r3, [r8, #4]
 8009162:	6863      	ldr	r3, [r4, #4]
 8009164:	f043 0301 	orr.w	r3, r3, #1
 8009168:	6063      	str	r3, [r4, #4]
 800916a:	4648      	mov	r0, r9
 800916c:	f7ff fae2 	bl	8008734 <__malloc_unlock>
 8009170:	4630      	mov	r0, r6
 8009172:	b003      	add	sp, #12
 8009174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009178:	eb08 0105 	add.w	r1, r8, r5
 800917c:	431d      	orrs	r5, r3
 800917e:	f042 0301 	orr.w	r3, r2, #1
 8009182:	440a      	add	r2, r1
 8009184:	f8c8 5004 	str.w	r5, [r8, #4]
 8009188:	604b      	str	r3, [r1, #4]
 800918a:	6853      	ldr	r3, [r2, #4]
 800918c:	f043 0301 	orr.w	r3, r3, #1
 8009190:	3108      	adds	r1, #8
 8009192:	6053      	str	r3, [r2, #4]
 8009194:	4648      	mov	r0, r9
 8009196:	f7fe fc25 	bl	80079e4 <_free_r>
 800919a:	e7e6      	b.n	800916a <_realloc_r+0x15a>
 800919c:	4639      	mov	r1, r7
 800919e:	4648      	mov	r0, r9
 80091a0:	f7fe ff86 	bl	80080b0 <_malloc_r>
 80091a4:	4607      	mov	r7, r0
 80091a6:	b1d8      	cbz	r0, 80091e0 <_realloc_r+0x1d0>
 80091a8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80091ac:	f023 0201 	bic.w	r2, r3, #1
 80091b0:	4442      	add	r2, r8
 80091b2:	f1a0 0108 	sub.w	r1, r0, #8
 80091b6:	4291      	cmp	r1, r2
 80091b8:	f000 80ac 	beq.w	8009314 <_realloc_r+0x304>
 80091bc:	1f22      	subs	r2, r4, #4
 80091be:	2a24      	cmp	r2, #36	; 0x24
 80091c0:	f200 8099 	bhi.w	80092f6 <_realloc_r+0x2e6>
 80091c4:	2a13      	cmp	r2, #19
 80091c6:	d86a      	bhi.n	800929e <_realloc_r+0x28e>
 80091c8:	4603      	mov	r3, r0
 80091ca:	4632      	mov	r2, r6
 80091cc:	6811      	ldr	r1, [r2, #0]
 80091ce:	6019      	str	r1, [r3, #0]
 80091d0:	6851      	ldr	r1, [r2, #4]
 80091d2:	6059      	str	r1, [r3, #4]
 80091d4:	6892      	ldr	r2, [r2, #8]
 80091d6:	609a      	str	r2, [r3, #8]
 80091d8:	4631      	mov	r1, r6
 80091da:	4648      	mov	r0, r9
 80091dc:	f7fe fc02 	bl	80079e4 <_free_r>
 80091e0:	4648      	mov	r0, r9
 80091e2:	f7ff faa7 	bl	8008734 <__malloc_unlock>
 80091e6:	4638      	mov	r0, r7
 80091e8:	b003      	add	sp, #12
 80091ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ee:	4611      	mov	r1, r2
 80091f0:	b003      	add	sp, #12
 80091f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f6:	f7fe bf5b 	b.w	80080b0 <_malloc_r>
 80091fa:	68ca      	ldr	r2, [r1, #12]
 80091fc:	6889      	ldr	r1, [r1, #8]
 80091fe:	4604      	mov	r4, r0
 8009200:	60ca      	str	r2, [r1, #12]
 8009202:	6091      	str	r1, [r2, #8]
 8009204:	e7a4      	b.n	8009150 <_realloc_r+0x140>
 8009206:	6841      	ldr	r1, [r0, #4]
 8009208:	f021 0103 	bic.w	r1, r1, #3
 800920c:	4421      	add	r1, r4
 800920e:	f105 0010 	add.w	r0, r5, #16
 8009212:	4281      	cmp	r1, r0
 8009214:	da5b      	bge.n	80092ce <_realloc_r+0x2be>
 8009216:	07db      	lsls	r3, r3, #31
 8009218:	d4c0      	bmi.n	800919c <_realloc_r+0x18c>
 800921a:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800921e:	ebc3 0a08 	rsb	sl, r3, r8
 8009222:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009226:	f023 0303 	bic.w	r3, r3, #3
 800922a:	eb01 0c03 	add.w	ip, r1, r3
 800922e:	4560      	cmp	r0, ip
 8009230:	f73f af66 	bgt.w	8009100 <_realloc_r+0xf0>
 8009234:	4657      	mov	r7, sl
 8009236:	f8da 300c 	ldr.w	r3, [sl, #12]
 800923a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800923e:	1f22      	subs	r2, r4, #4
 8009240:	2a24      	cmp	r2, #36	; 0x24
 8009242:	60cb      	str	r3, [r1, #12]
 8009244:	6099      	str	r1, [r3, #8]
 8009246:	f200 80b8 	bhi.w	80093ba <_realloc_r+0x3aa>
 800924a:	2a13      	cmp	r2, #19
 800924c:	f240 80a9 	bls.w	80093a2 <_realloc_r+0x392>
 8009250:	6833      	ldr	r3, [r6, #0]
 8009252:	f8ca 3008 	str.w	r3, [sl, #8]
 8009256:	6873      	ldr	r3, [r6, #4]
 8009258:	f8ca 300c 	str.w	r3, [sl, #12]
 800925c:	2a1b      	cmp	r2, #27
 800925e:	f200 80b5 	bhi.w	80093cc <_realloc_r+0x3bc>
 8009262:	3608      	adds	r6, #8
 8009264:	f10a 0310 	add.w	r3, sl, #16
 8009268:	6832      	ldr	r2, [r6, #0]
 800926a:	601a      	str	r2, [r3, #0]
 800926c:	6872      	ldr	r2, [r6, #4]
 800926e:	605a      	str	r2, [r3, #4]
 8009270:	68b2      	ldr	r2, [r6, #8]
 8009272:	609a      	str	r2, [r3, #8]
 8009274:	eb0a 0205 	add.w	r2, sl, r5
 8009278:	ebc5 030c 	rsb	r3, r5, ip
 800927c:	f043 0301 	orr.w	r3, r3, #1
 8009280:	f8cb 2008 	str.w	r2, [fp, #8]
 8009284:	6053      	str	r3, [r2, #4]
 8009286:	f8da 3004 	ldr.w	r3, [sl, #4]
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	431d      	orrs	r5, r3
 8009290:	4648      	mov	r0, r9
 8009292:	f8ca 5004 	str.w	r5, [sl, #4]
 8009296:	f7ff fa4d 	bl	8008734 <__malloc_unlock>
 800929a:	4638      	mov	r0, r7
 800929c:	e769      	b.n	8009172 <_realloc_r+0x162>
 800929e:	6833      	ldr	r3, [r6, #0]
 80092a0:	6003      	str	r3, [r0, #0]
 80092a2:	6873      	ldr	r3, [r6, #4]
 80092a4:	6043      	str	r3, [r0, #4]
 80092a6:	2a1b      	cmp	r2, #27
 80092a8:	d829      	bhi.n	80092fe <_realloc_r+0x2ee>
 80092aa:	f100 0308 	add.w	r3, r0, #8
 80092ae:	f106 0208 	add.w	r2, r6, #8
 80092b2:	e78b      	b.n	80091cc <_realloc_r+0x1bc>
 80092b4:	463b      	mov	r3, r7
 80092b6:	6832      	ldr	r2, [r6, #0]
 80092b8:	601a      	str	r2, [r3, #0]
 80092ba:	6872      	ldr	r2, [r6, #4]
 80092bc:	605a      	str	r2, [r3, #4]
 80092be:	68b2      	ldr	r2, [r6, #8]
 80092c0:	609a      	str	r2, [r3, #8]
 80092c2:	463e      	mov	r6, r7
 80092c4:	4674      	mov	r4, lr
 80092c6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80092ca:	46d0      	mov	r8, sl
 80092cc:	e740      	b.n	8009150 <_realloc_r+0x140>
 80092ce:	eb08 0205 	add.w	r2, r8, r5
 80092d2:	1b4b      	subs	r3, r1, r5
 80092d4:	f043 0301 	orr.w	r3, r3, #1
 80092d8:	f8cb 2008 	str.w	r2, [fp, #8]
 80092dc:	6053      	str	r3, [r2, #4]
 80092de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	431d      	orrs	r5, r3
 80092e8:	4648      	mov	r0, r9
 80092ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80092ee:	f7ff fa21 	bl	8008734 <__malloc_unlock>
 80092f2:	4630      	mov	r0, r6
 80092f4:	e73d      	b.n	8009172 <_realloc_r+0x162>
 80092f6:	4631      	mov	r1, r6
 80092f8:	f7ff f9b6 	bl	8008668 <memmove>
 80092fc:	e76c      	b.n	80091d8 <_realloc_r+0x1c8>
 80092fe:	68b3      	ldr	r3, [r6, #8]
 8009300:	6083      	str	r3, [r0, #8]
 8009302:	68f3      	ldr	r3, [r6, #12]
 8009304:	60c3      	str	r3, [r0, #12]
 8009306:	2a24      	cmp	r2, #36	; 0x24
 8009308:	d02c      	beq.n	8009364 <_realloc_r+0x354>
 800930a:	f100 0310 	add.w	r3, r0, #16
 800930e:	f106 0210 	add.w	r2, r6, #16
 8009312:	e75b      	b.n	80091cc <_realloc_r+0x1bc>
 8009314:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009318:	f022 0203 	bic.w	r2, r2, #3
 800931c:	4414      	add	r4, r2
 800931e:	e717      	b.n	8009150 <_realloc_r+0x140>
 8009320:	4631      	mov	r1, r6
 8009322:	4638      	mov	r0, r7
 8009324:	4674      	mov	r4, lr
 8009326:	463e      	mov	r6, r7
 8009328:	f7ff f99e 	bl	8008668 <memmove>
 800932c:	46d0      	mov	r8, sl
 800932e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009332:	e70d      	b.n	8009150 <_realloc_r+0x140>
 8009334:	463a      	mov	r2, r7
 8009336:	e700      	b.n	800913a <_realloc_r+0x12a>
 8009338:	4631      	mov	r1, r6
 800933a:	4638      	mov	r0, r7
 800933c:	461c      	mov	r4, r3
 800933e:	463e      	mov	r6, r7
 8009340:	f7ff f992 	bl	8008668 <memmove>
 8009344:	46d0      	mov	r8, sl
 8009346:	f8da 3004 	ldr.w	r3, [sl, #4]
 800934a:	e701      	b.n	8009150 <_realloc_r+0x140>
 800934c:	68b3      	ldr	r3, [r6, #8]
 800934e:	f8ca 3010 	str.w	r3, [sl, #16]
 8009352:	68f3      	ldr	r3, [r6, #12]
 8009354:	f8ca 3014 	str.w	r3, [sl, #20]
 8009358:	2a24      	cmp	r2, #36	; 0x24
 800935a:	d018      	beq.n	800938e <_realloc_r+0x37e>
 800935c:	3610      	adds	r6, #16
 800935e:	f10a 0318 	add.w	r3, sl, #24
 8009362:	e7a8      	b.n	80092b6 <_realloc_r+0x2a6>
 8009364:	6933      	ldr	r3, [r6, #16]
 8009366:	6103      	str	r3, [r0, #16]
 8009368:	6973      	ldr	r3, [r6, #20]
 800936a:	6143      	str	r3, [r0, #20]
 800936c:	f106 0218 	add.w	r2, r6, #24
 8009370:	f100 0318 	add.w	r3, r0, #24
 8009374:	e72a      	b.n	80091cc <_realloc_r+0x1bc>
 8009376:	68b1      	ldr	r1, [r6, #8]
 8009378:	f8ca 1010 	str.w	r1, [sl, #16]
 800937c:	68f1      	ldr	r1, [r6, #12]
 800937e:	f8ca 1014 	str.w	r1, [sl, #20]
 8009382:	2a24      	cmp	r2, #36	; 0x24
 8009384:	d00f      	beq.n	80093a6 <_realloc_r+0x396>
 8009386:	3610      	adds	r6, #16
 8009388:	f10a 0218 	add.w	r2, sl, #24
 800938c:	e6d5      	b.n	800913a <_realloc_r+0x12a>
 800938e:	6933      	ldr	r3, [r6, #16]
 8009390:	f8ca 3018 	str.w	r3, [sl, #24]
 8009394:	6973      	ldr	r3, [r6, #20]
 8009396:	f8ca 301c 	str.w	r3, [sl, #28]
 800939a:	3618      	adds	r6, #24
 800939c:	f10a 0320 	add.w	r3, sl, #32
 80093a0:	e789      	b.n	80092b6 <_realloc_r+0x2a6>
 80093a2:	463b      	mov	r3, r7
 80093a4:	e760      	b.n	8009268 <_realloc_r+0x258>
 80093a6:	6932      	ldr	r2, [r6, #16]
 80093a8:	f8ca 2018 	str.w	r2, [sl, #24]
 80093ac:	6972      	ldr	r2, [r6, #20]
 80093ae:	f8ca 201c 	str.w	r2, [sl, #28]
 80093b2:	3618      	adds	r6, #24
 80093b4:	f10a 0220 	add.w	r2, sl, #32
 80093b8:	e6bf      	b.n	800913a <_realloc_r+0x12a>
 80093ba:	4631      	mov	r1, r6
 80093bc:	4638      	mov	r0, r7
 80093be:	f8cd c004 	str.w	ip, [sp, #4]
 80093c2:	f7ff f951 	bl	8008668 <memmove>
 80093c6:	f8dd c004 	ldr.w	ip, [sp, #4]
 80093ca:	e753      	b.n	8009274 <_realloc_r+0x264>
 80093cc:	68b3      	ldr	r3, [r6, #8]
 80093ce:	f8ca 3010 	str.w	r3, [sl, #16]
 80093d2:	68f3      	ldr	r3, [r6, #12]
 80093d4:	f8ca 3014 	str.w	r3, [sl, #20]
 80093d8:	2a24      	cmp	r2, #36	; 0x24
 80093da:	d003      	beq.n	80093e4 <_realloc_r+0x3d4>
 80093dc:	3610      	adds	r6, #16
 80093de:	f10a 0318 	add.w	r3, sl, #24
 80093e2:	e741      	b.n	8009268 <_realloc_r+0x258>
 80093e4:	6933      	ldr	r3, [r6, #16]
 80093e6:	f8ca 3018 	str.w	r3, [sl, #24]
 80093ea:	6973      	ldr	r3, [r6, #20]
 80093ec:	f8ca 301c 	str.w	r3, [sl, #28]
 80093f0:	3618      	adds	r6, #24
 80093f2:	f10a 0320 	add.w	r3, sl, #32
 80093f6:	e737      	b.n	8009268 <_realloc_r+0x258>
 80093f8:	20000530 	.word	0x20000530

080093fc <__fpclassifyd>:
 80093fc:	ec53 2b10 	vmov	r2, r3, d0
 8009400:	b410      	push	{r4}
 8009402:	f033 4400 	bics.w	r4, r3, #2147483648	; 0x80000000
 8009406:	d008      	beq.n	800941a <__fpclassifyd+0x1e>
 8009408:	4911      	ldr	r1, [pc, #68]	; (8009450 <__fpclassifyd+0x54>)
 800940a:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 800940e:	4288      	cmp	r0, r1
 8009410:	d808      	bhi.n	8009424 <__fpclassifyd+0x28>
 8009412:	2004      	movs	r0, #4
 8009414:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009418:	4770      	bx	lr
 800941a:	b91a      	cbnz	r2, 8009424 <__fpclassifyd+0x28>
 800941c:	2002      	movs	r0, #2
 800941e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009422:	4770      	bx	lr
 8009424:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8009428:	4909      	ldr	r1, [pc, #36]	; (8009450 <__fpclassifyd+0x54>)
 800942a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800942e:	428b      	cmp	r3, r1
 8009430:	d9ef      	bls.n	8009412 <__fpclassifyd+0x16>
 8009432:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009436:	d201      	bcs.n	800943c <__fpclassifyd+0x40>
 8009438:	2003      	movs	r0, #3
 800943a:	e7eb      	b.n	8009414 <__fpclassifyd+0x18>
 800943c:	4b05      	ldr	r3, [pc, #20]	; (8009454 <__fpclassifyd+0x58>)
 800943e:	429c      	cmp	r4, r3
 8009440:	d001      	beq.n	8009446 <__fpclassifyd+0x4a>
 8009442:	2000      	movs	r0, #0
 8009444:	e7e6      	b.n	8009414 <__fpclassifyd+0x18>
 8009446:	fab2 f082 	clz	r0, r2
 800944a:	0940      	lsrs	r0, r0, #5
 800944c:	e7e2      	b.n	8009414 <__fpclassifyd+0x18>
 800944e:	bf00      	nop
 8009450:	7fdfffff 	.word	0x7fdfffff
 8009454:	7ff00000 	.word	0x7ff00000

08009458 <_sbrk_r>:
 8009458:	b538      	push	{r3, r4, r5, lr}
 800945a:	4c07      	ldr	r4, [pc, #28]	; (8009478 <_sbrk_r+0x20>)
 800945c:	2300      	movs	r3, #0
 800945e:	4605      	mov	r5, r0
 8009460:	4608      	mov	r0, r1
 8009462:	6023      	str	r3, [r4, #0]
 8009464:	f7f7 fb1e 	bl	8000aa4 <_sbrk>
 8009468:	1c43      	adds	r3, r0, #1
 800946a:	d000      	beq.n	800946e <_sbrk_r+0x16>
 800946c:	bd38      	pop	{r3, r4, r5, pc}
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d0fb      	beq.n	800946c <_sbrk_r+0x14>
 8009474:	602b      	str	r3, [r5, #0]
 8009476:	bd38      	pop	{r3, r4, r5, pc}
 8009478:	2001066c 	.word	0x2001066c

0800947c <__sread>:
 800947c:	b510      	push	{r4, lr}
 800947e:	460c      	mov	r4, r1
 8009480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009484:	f001 ffce 	bl	800b424 <_read_r>
 8009488:	2800      	cmp	r0, #0
 800948a:	db03      	blt.n	8009494 <__sread+0x18>
 800948c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800948e:	4403      	add	r3, r0
 8009490:	6523      	str	r3, [r4, #80]	; 0x50
 8009492:	bd10      	pop	{r4, pc}
 8009494:	89a3      	ldrh	r3, [r4, #12]
 8009496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800949a:	81a3      	strh	r3, [r4, #12]
 800949c:	bd10      	pop	{r4, pc}
 800949e:	bf00      	nop

080094a0 <__seofread>:
 80094a0:	2000      	movs	r0, #0
 80094a2:	4770      	bx	lr

080094a4 <__swrite>:
 80094a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094a8:	4616      	mov	r6, r2
 80094aa:	898a      	ldrh	r2, [r1, #12]
 80094ac:	461d      	mov	r5, r3
 80094ae:	05d3      	lsls	r3, r2, #23
 80094b0:	460c      	mov	r4, r1
 80094b2:	4607      	mov	r7, r0
 80094b4:	d506      	bpl.n	80094c4 <__swrite+0x20>
 80094b6:	2200      	movs	r2, #0
 80094b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094bc:	2302      	movs	r3, #2
 80094be:	f001 ff9d 	bl	800b3fc <_lseek_r>
 80094c2:	89a2      	ldrh	r2, [r4, #12]
 80094c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80094cc:	81a2      	strh	r2, [r4, #12]
 80094ce:	4638      	mov	r0, r7
 80094d0:	4632      	mov	r2, r6
 80094d2:	462b      	mov	r3, r5
 80094d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094d8:	f001 bdfa 	b.w	800b0d0 <_write_r>

080094dc <__sseek>:
 80094dc:	b510      	push	{r4, lr}
 80094de:	460c      	mov	r4, r1
 80094e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e4:	f001 ff8a 	bl	800b3fc <_lseek_r>
 80094e8:	89a3      	ldrh	r3, [r4, #12]
 80094ea:	1c42      	adds	r2, r0, #1
 80094ec:	bf0e      	itee	eq
 80094ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094f6:	6520      	strne	r0, [r4, #80]	; 0x50
 80094f8:	81a3      	strh	r3, [r4, #12]
 80094fa:	bd10      	pop	{r4, pc}

080094fc <__sclose>:
 80094fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009500:	f001 be7c 	b.w	800b1fc <_close_r>
	...
 8009520:	eba2 0003 	sub.w	r0, r2, r3
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop

08009528 <strcmp>:
 8009528:	7802      	ldrb	r2, [r0, #0]
 800952a:	780b      	ldrb	r3, [r1, #0]
 800952c:	2a01      	cmp	r2, #1
 800952e:	bf28      	it	cs
 8009530:	429a      	cmpcs	r2, r3
 8009532:	d1f5      	bne.n	8009520 <__sclose+0x24>
 8009534:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8009538:	ea40 0401 	orr.w	r4, r0, r1
 800953c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009540:	f06f 0c00 	mvn.w	ip, #0
 8009544:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8009548:	b312      	cbz	r2, 8009590 <strcmp+0x68>
 800954a:	ea80 0401 	eor.w	r4, r0, r1
 800954e:	f014 0f07 	tst.w	r4, #7
 8009552:	d16a      	bne.n	800962a <strcmp+0x102>
 8009554:	f000 0407 	and.w	r4, r0, #7
 8009558:	f020 0007 	bic.w	r0, r0, #7
 800955c:	f004 0503 	and.w	r5, r4, #3
 8009560:	f021 0107 	bic.w	r1, r1, #7
 8009564:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8009568:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800956c:	f014 0f04 	tst.w	r4, #4
 8009570:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8009574:	fa0c f405 	lsl.w	r4, ip, r5
 8009578:	ea62 0204 	orn	r2, r2, r4
 800957c:	ea66 0604 	orn	r6, r6, r4
 8009580:	d00a      	beq.n	8009598 <strcmp+0x70>
 8009582:	ea63 0304 	orn	r3, r3, r4
 8009586:	4662      	mov	r2, ip
 8009588:	ea67 0704 	orn	r7, r7, r4
 800958c:	4666      	mov	r6, ip
 800958e:	e003      	b.n	8009598 <strcmp+0x70>
 8009590:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8009594:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8009598:	fa82 f54c 	uadd8	r5, r2, ip
 800959c:	ea82 0406 	eor.w	r4, r2, r6
 80095a0:	faa4 f48c 	sel	r4, r4, ip
 80095a4:	bb6c      	cbnz	r4, 8009602 <strcmp+0xda>
 80095a6:	fa83 f54c 	uadd8	r5, r3, ip
 80095aa:	ea83 0507 	eor.w	r5, r3, r7
 80095ae:	faa5 f58c 	sel	r5, r5, ip
 80095b2:	b995      	cbnz	r5, 80095da <strcmp+0xb2>
 80095b4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 80095b8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 80095bc:	fa82 f54c 	uadd8	r5, r2, ip
 80095c0:	ea82 0406 	eor.w	r4, r2, r6
 80095c4:	faa4 f48c 	sel	r4, r4, ip
 80095c8:	fa83 f54c 	uadd8	r5, r3, ip
 80095cc:	ea83 0507 	eor.w	r5, r3, r7
 80095d0:	faa5 f58c 	sel	r5, r5, ip
 80095d4:	4325      	orrs	r5, r4
 80095d6:	d0db      	beq.n	8009590 <strcmp+0x68>
 80095d8:	b99c      	cbnz	r4, 8009602 <strcmp+0xda>
 80095da:	ba2d      	rev	r5, r5
 80095dc:	fab5 f485 	clz	r4, r5
 80095e0:	f024 0407 	bic.w	r4, r4, #7
 80095e4:	fa27 f104 	lsr.w	r1, r7, r4
 80095e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80095ec:	fa23 f304 	lsr.w	r3, r3, r4
 80095f0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80095f4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80095f8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80095fc:	eba0 0001 	sub.w	r0, r0, r1
 8009600:	4770      	bx	lr
 8009602:	ba24      	rev	r4, r4
 8009604:	fab4 f484 	clz	r4, r4
 8009608:	f024 0407 	bic.w	r4, r4, #7
 800960c:	fa26 f104 	lsr.w	r1, r6, r4
 8009610:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009614:	fa22 f204 	lsr.w	r2, r2, r4
 8009618:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800961c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8009620:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8009624:	eba0 0001 	sub.w	r0, r0, r1
 8009628:	4770      	bx	lr
 800962a:	f014 0f03 	tst.w	r4, #3
 800962e:	d13c      	bne.n	80096aa <strcmp+0x182>
 8009630:	f010 0403 	ands.w	r4, r0, #3
 8009634:	d128      	bne.n	8009688 <strcmp+0x160>
 8009636:	f850 2b08 	ldr.w	r2, [r0], #8
 800963a:	f851 3b08 	ldr.w	r3, [r1], #8
 800963e:	fa82 f54c 	uadd8	r5, r2, ip
 8009642:	ea82 0503 	eor.w	r5, r2, r3
 8009646:	faa5 f58c 	sel	r5, r5, ip
 800964a:	b95d      	cbnz	r5, 8009664 <strcmp+0x13c>
 800964c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009654:	fa82 f54c 	uadd8	r5, r2, ip
 8009658:	ea82 0503 	eor.w	r5, r2, r3
 800965c:	faa5 f58c 	sel	r5, r5, ip
 8009660:	2d00      	cmp	r5, #0
 8009662:	d0e8      	beq.n	8009636 <strcmp+0x10e>
 8009664:	ba2d      	rev	r5, r5
 8009666:	fab5 f485 	clz	r4, r5
 800966a:	f024 0407 	bic.w	r4, r4, #7
 800966e:	fa23 f104 	lsr.w	r1, r3, r4
 8009672:	fa22 f204 	lsr.w	r2, r2, r4
 8009676:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800967a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800967e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8009682:	eba0 0001 	sub.w	r0, r0, r1
 8009686:	4770      	bx	lr
 8009688:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800968c:	f020 0003 	bic.w	r0, r0, #3
 8009690:	f850 2b08 	ldr.w	r2, [r0], #8
 8009694:	f021 0103 	bic.w	r1, r1, #3
 8009698:	f851 3b08 	ldr.w	r3, [r1], #8
 800969c:	fa0c f404 	lsl.w	r4, ip, r4
 80096a0:	ea62 0204 	orn	r2, r2, r4
 80096a4:	ea63 0304 	orn	r3, r3, r4
 80096a8:	e7c9      	b.n	800963e <strcmp+0x116>
 80096aa:	f010 0403 	ands.w	r4, r0, #3
 80096ae:	d01a      	beq.n	80096e6 <strcmp+0x1be>
 80096b0:	eba1 0104 	sub.w	r1, r1, r4
 80096b4:	f020 0003 	bic.w	r0, r0, #3
 80096b8:	07e4      	lsls	r4, r4, #31
 80096ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80096be:	d006      	beq.n	80096ce <strcmp+0x1a6>
 80096c0:	d20f      	bcs.n	80096e2 <strcmp+0x1ba>
 80096c2:	788b      	ldrb	r3, [r1, #2]
 80096c4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 80096c8:	1ae4      	subs	r4, r4, r3
 80096ca:	d106      	bne.n	80096da <strcmp+0x1b2>
 80096cc:	b12b      	cbz	r3, 80096da <strcmp+0x1b2>
 80096ce:	78cb      	ldrb	r3, [r1, #3]
 80096d0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 80096d4:	1ae4      	subs	r4, r4, r3
 80096d6:	d100      	bne.n	80096da <strcmp+0x1b2>
 80096d8:	b91b      	cbnz	r3, 80096e2 <strcmp+0x1ba>
 80096da:	4620      	mov	r0, r4
 80096dc:	f85d 4b10 	ldr.w	r4, [sp], #16
 80096e0:	4770      	bx	lr
 80096e2:	f101 0104 	add.w	r1, r1, #4
 80096e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80096ea:	07cc      	lsls	r4, r1, #31
 80096ec:	f021 0103 	bic.w	r1, r1, #3
 80096f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80096f4:	d848      	bhi.n	8009788 <strcmp+0x260>
 80096f6:	d224      	bcs.n	8009742 <strcmp+0x21a>
 80096f8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 80096fc:	fa82 f54c 	uadd8	r5, r2, ip
 8009700:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8009704:	faa5 f58c 	sel	r5, r5, ip
 8009708:	d10a      	bne.n	8009720 <strcmp+0x1f8>
 800970a:	b965      	cbnz	r5, 8009726 <strcmp+0x1fe>
 800970c:	f851 3b04 	ldr.w	r3, [r1], #4
 8009710:	ea84 0402 	eor.w	r4, r4, r2
 8009714:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8009718:	d10e      	bne.n	8009738 <strcmp+0x210>
 800971a:	f850 2b04 	ldr.w	r2, [r0], #4
 800971e:	e7eb      	b.n	80096f8 <strcmp+0x1d0>
 8009720:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8009724:	e055      	b.n	80097d2 <strcmp+0x2aa>
 8009726:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800972a:	d14d      	bne.n	80097c8 <strcmp+0x2a0>
 800972c:	7808      	ldrb	r0, [r1, #0]
 800972e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8009732:	f1c0 0000 	rsb	r0, r0, #0
 8009736:	4770      	bx	lr
 8009738:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800973c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8009740:	e047      	b.n	80097d2 <strcmp+0x2aa>
 8009742:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8009746:	fa82 f54c 	uadd8	r5, r2, ip
 800974a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800974e:	faa5 f58c 	sel	r5, r5, ip
 8009752:	d10a      	bne.n	800976a <strcmp+0x242>
 8009754:	b965      	cbnz	r5, 8009770 <strcmp+0x248>
 8009756:	f851 3b04 	ldr.w	r3, [r1], #4
 800975a:	ea84 0402 	eor.w	r4, r4, r2
 800975e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8009762:	d10c      	bne.n	800977e <strcmp+0x256>
 8009764:	f850 2b04 	ldr.w	r2, [r0], #4
 8009768:	e7eb      	b.n	8009742 <strcmp+0x21a>
 800976a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800976e:	e030      	b.n	80097d2 <strcmp+0x2aa>
 8009770:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8009774:	d128      	bne.n	80097c8 <strcmp+0x2a0>
 8009776:	880b      	ldrh	r3, [r1, #0]
 8009778:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800977c:	e029      	b.n	80097d2 <strcmp+0x2aa>
 800977e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8009782:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8009786:	e024      	b.n	80097d2 <strcmp+0x2aa>
 8009788:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800978c:	fa82 f54c 	uadd8	r5, r2, ip
 8009790:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8009794:	faa5 f58c 	sel	r5, r5, ip
 8009798:	d10a      	bne.n	80097b0 <strcmp+0x288>
 800979a:	b965      	cbnz	r5, 80097b6 <strcmp+0x28e>
 800979c:	f851 3b04 	ldr.w	r3, [r1], #4
 80097a0:	ea84 0402 	eor.w	r4, r4, r2
 80097a4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 80097a8:	d109      	bne.n	80097be <strcmp+0x296>
 80097aa:	f850 2b04 	ldr.w	r2, [r0], #4
 80097ae:	e7eb      	b.n	8009788 <strcmp+0x260>
 80097b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80097b4:	e00d      	b.n	80097d2 <strcmp+0x2aa>
 80097b6:	f015 0fff 	tst.w	r5, #255	; 0xff
 80097ba:	d105      	bne.n	80097c8 <strcmp+0x2a0>
 80097bc:	680b      	ldr	r3, [r1, #0]
 80097be:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80097c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80097c6:	e004      	b.n	80097d2 <strcmp+0x2aa>
 80097c8:	f04f 0000 	mov.w	r0, #0
 80097cc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80097d0:	4770      	bx	lr
 80097d2:	ba12      	rev	r2, r2
 80097d4:	ba1b      	rev	r3, r3
 80097d6:	fa82 f44c 	uadd8	r4, r2, ip
 80097da:	ea82 0403 	eor.w	r4, r2, r3
 80097de:	faa4 f58c 	sel	r5, r4, ip
 80097e2:	fab5 f485 	clz	r4, r5
 80097e6:	fa02 f204 	lsl.w	r2, r2, r4
 80097ea:	fa03 f304 	lsl.w	r3, r3, r4
 80097ee:	ea4f 6012 	mov.w	r0, r2, lsr #24
 80097f2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80097f6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 80097fa:	4770      	bx	lr

080097fc <__ssprint_r>:
 80097fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009800:	6893      	ldr	r3, [r2, #8]
 8009802:	f8d2 8000 	ldr.w	r8, [r2]
 8009806:	b083      	sub	sp, #12
 8009808:	4691      	mov	r9, r2
 800980a:	2b00      	cmp	r3, #0
 800980c:	d072      	beq.n	80098f4 <__ssprint_r+0xf8>
 800980e:	4607      	mov	r7, r0
 8009810:	f04f 0b00 	mov.w	fp, #0
 8009814:	6808      	ldr	r0, [r1, #0]
 8009816:	688b      	ldr	r3, [r1, #8]
 8009818:	460d      	mov	r5, r1
 800981a:	465c      	mov	r4, fp
 800981c:	2c00      	cmp	r4, #0
 800981e:	d045      	beq.n	80098ac <__ssprint_r+0xb0>
 8009820:	429c      	cmp	r4, r3
 8009822:	461e      	mov	r6, r3
 8009824:	469a      	mov	sl, r3
 8009826:	d348      	bcc.n	80098ba <__ssprint_r+0xbe>
 8009828:	89ab      	ldrh	r3, [r5, #12]
 800982a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800982e:	d02d      	beq.n	800988c <__ssprint_r+0x90>
 8009830:	696e      	ldr	r6, [r5, #20]
 8009832:	6929      	ldr	r1, [r5, #16]
 8009834:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8009838:	ebc1 0a00 	rsb	sl, r1, r0
 800983c:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8009840:	1c60      	adds	r0, r4, #1
 8009842:	1076      	asrs	r6, r6, #1
 8009844:	4450      	add	r0, sl
 8009846:	4286      	cmp	r6, r0
 8009848:	4632      	mov	r2, r6
 800984a:	bf3c      	itt	cc
 800984c:	4606      	movcc	r6, r0
 800984e:	4632      	movcc	r2, r6
 8009850:	055b      	lsls	r3, r3, #21
 8009852:	d535      	bpl.n	80098c0 <__ssprint_r+0xc4>
 8009854:	4611      	mov	r1, r2
 8009856:	4638      	mov	r0, r7
 8009858:	f7fe fc2a 	bl	80080b0 <_malloc_r>
 800985c:	2800      	cmp	r0, #0
 800985e:	d039      	beq.n	80098d4 <__ssprint_r+0xd8>
 8009860:	4652      	mov	r2, sl
 8009862:	6929      	ldr	r1, [r5, #16]
 8009864:	9001      	str	r0, [sp, #4]
 8009866:	f7f9 ff3b 	bl	80036e0 <memcpy>
 800986a:	89aa      	ldrh	r2, [r5, #12]
 800986c:	9b01      	ldr	r3, [sp, #4]
 800986e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8009872:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009876:	81aa      	strh	r2, [r5, #12]
 8009878:	ebca 0206 	rsb	r2, sl, r6
 800987c:	eb03 000a 	add.w	r0, r3, sl
 8009880:	616e      	str	r6, [r5, #20]
 8009882:	612b      	str	r3, [r5, #16]
 8009884:	6028      	str	r0, [r5, #0]
 8009886:	60aa      	str	r2, [r5, #8]
 8009888:	4626      	mov	r6, r4
 800988a:	46a2      	mov	sl, r4
 800988c:	4652      	mov	r2, sl
 800988e:	4659      	mov	r1, fp
 8009890:	f7fe feea 	bl	8008668 <memmove>
 8009894:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8009898:	68ab      	ldr	r3, [r5, #8]
 800989a:	6828      	ldr	r0, [r5, #0]
 800989c:	1b9b      	subs	r3, r3, r6
 800989e:	4450      	add	r0, sl
 80098a0:	1b14      	subs	r4, r2, r4
 80098a2:	60ab      	str	r3, [r5, #8]
 80098a4:	6028      	str	r0, [r5, #0]
 80098a6:	f8c9 4008 	str.w	r4, [r9, #8]
 80098aa:	b31c      	cbz	r4, 80098f4 <__ssprint_r+0xf8>
 80098ac:	f8d8 b000 	ldr.w	fp, [r8]
 80098b0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80098b4:	f108 0808 	add.w	r8, r8, #8
 80098b8:	e7b0      	b.n	800981c <__ssprint_r+0x20>
 80098ba:	4626      	mov	r6, r4
 80098bc:	46a2      	mov	sl, r4
 80098be:	e7e5      	b.n	800988c <__ssprint_r+0x90>
 80098c0:	4638      	mov	r0, r7
 80098c2:	f7ff fba5 	bl	8009010 <_realloc_r>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d1d5      	bne.n	8009878 <__ssprint_r+0x7c>
 80098cc:	4638      	mov	r0, r7
 80098ce:	6929      	ldr	r1, [r5, #16]
 80098d0:	f7fe f888 	bl	80079e4 <_free_r>
 80098d4:	230c      	movs	r3, #12
 80098d6:	603b      	str	r3, [r7, #0]
 80098d8:	89ab      	ldrh	r3, [r5, #12]
 80098da:	2200      	movs	r2, #0
 80098dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098e4:	81ab      	strh	r3, [r5, #12]
 80098e6:	f8c9 2008 	str.w	r2, [r9, #8]
 80098ea:	f8c9 2004 	str.w	r2, [r9, #4]
 80098ee:	b003      	add	sp, #12
 80098f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f4:	2000      	movs	r0, #0
 80098f6:	f8c9 0004 	str.w	r0, [r9, #4]
 80098fa:	b003      	add	sp, #12
 80098fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009900 <_svfiprintf_r>:
 8009900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009904:	4691      	mov	r9, r2
 8009906:	898a      	ldrh	r2, [r1, #12]
 8009908:	b0ad      	sub	sp, #180	; 0xb4
 800990a:	0612      	lsls	r2, r2, #24
 800990c:	468a      	mov	sl, r1
 800990e:	9306      	str	r3, [sp, #24]
 8009910:	9004      	str	r0, [sp, #16]
 8009912:	d503      	bpl.n	800991c <_svfiprintf_r+0x1c>
 8009914:	690b      	ldr	r3, [r1, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	f000 8514 	beq.w	800a344 <_svfiprintf_r+0xa44>
 800991c:	2300      	movs	r3, #0
 800991e:	f10d 0870 	add.w	r8, sp, #112	; 0x70
 8009922:	930a      	str	r3, [sp, #40]	; 0x28
 8009924:	9311      	str	r3, [sp, #68]	; 0x44
 8009926:	9310      	str	r3, [sp, #64]	; 0x40
 8009928:	9303      	str	r3, [sp, #12]
 800992a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800992e:	4644      	mov	r4, r8
 8009930:	f899 3000 	ldrb.w	r3, [r9]
 8009934:	2b00      	cmp	r3, #0
 8009936:	f000 8387 	beq.w	800a048 <_svfiprintf_r+0x748>
 800993a:	2b25      	cmp	r3, #37	; 0x25
 800993c:	f000 8384 	beq.w	800a048 <_svfiprintf_r+0x748>
 8009940:	464a      	mov	r2, r9
 8009942:	e001      	b.n	8009948 <_svfiprintf_r+0x48>
 8009944:	2b25      	cmp	r3, #37	; 0x25
 8009946:	d003      	beq.n	8009950 <_svfiprintf_r+0x50>
 8009948:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800994c:	2b00      	cmp	r3, #0
 800994e:	d1f9      	bne.n	8009944 <_svfiprintf_r+0x44>
 8009950:	ebc9 0602 	rsb	r6, r9, r2
 8009954:	4615      	mov	r5, r2
 8009956:	b17e      	cbz	r6, 8009978 <_svfiprintf_r+0x78>
 8009958:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800995a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800995c:	f8c4 9000 	str.w	r9, [r4]
 8009960:	3301      	adds	r3, #1
 8009962:	4432      	add	r2, r6
 8009964:	2b07      	cmp	r3, #7
 8009966:	6066      	str	r6, [r4, #4]
 8009968:	9211      	str	r2, [sp, #68]	; 0x44
 800996a:	9310      	str	r3, [sp, #64]	; 0x40
 800996c:	f300 8400 	bgt.w	800a170 <_svfiprintf_r+0x870>
 8009970:	3408      	adds	r4, #8
 8009972:	9b03      	ldr	r3, [sp, #12]
 8009974:	4433      	add	r3, r6
 8009976:	9303      	str	r3, [sp, #12]
 8009978:	782b      	ldrb	r3, [r5, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	f000 8389 	beq.w	800a092 <_svfiprintf_r+0x792>
 8009980:	2100      	movs	r1, #0
 8009982:	f04f 0300 	mov.w	r3, #0
 8009986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800998a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800998e:	1c68      	adds	r0, r5, #1
 8009990:	786b      	ldrb	r3, [r5, #1]
 8009992:	9100      	str	r1, [sp, #0]
 8009994:	9201      	str	r2, [sp, #4]
 8009996:	460d      	mov	r5, r1
 8009998:	f100 0901 	add.w	r9, r0, #1
 800999c:	f1a3 0220 	sub.w	r2, r3, #32
 80099a0:	2a58      	cmp	r2, #88	; 0x58
 80099a2:	f200 8288 	bhi.w	8009eb6 <_svfiprintf_r+0x5b6>
 80099a6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80099aa:	01e3      	.short	0x01e3
 80099ac:	02860286 	.word	0x02860286
 80099b0:	028601db 	.word	0x028601db
 80099b4:	02860286 	.word	0x02860286
 80099b8:	02860286 	.word	0x02860286
 80099bc:	02560286 	.word	0x02560286
 80099c0:	02860251 	.word	0x02860251
 80099c4:	026900b8 	.word	0x026900b8
 80099c8:	02490286 	.word	0x02490286
 80099cc:	023b023b 	.word	0x023b023b
 80099d0:	023b023b 	.word	0x023b023b
 80099d4:	023b023b 	.word	0x023b023b
 80099d8:	023b023b 	.word	0x023b023b
 80099dc:	0286023b 	.word	0x0286023b
 80099e0:	02860286 	.word	0x02860286
 80099e4:	02860286 	.word	0x02860286
 80099e8:	02860286 	.word	0x02860286
 80099ec:	02860286 	.word	0x02860286
 80099f0:	021f0286 	.word	0x021f0286
 80099f4:	02860286 	.word	0x02860286
 80099f8:	02860286 	.word	0x02860286
 80099fc:	02860286 	.word	0x02860286
 8009a00:	02860286 	.word	0x02860286
 8009a04:	02860286 	.word	0x02860286
 8009a08:	02860203 	.word	0x02860203
 8009a0c:	02860286 	.word	0x02860286
 8009a10:	02860286 	.word	0x02860286
 8009a14:	028601c6 	.word	0x028601c6
 8009a18:	01a20286 	.word	0x01a20286
 8009a1c:	02860286 	.word	0x02860286
 8009a20:	02860286 	.word	0x02860286
 8009a24:	02860286 	.word	0x02860286
 8009a28:	02860286 	.word	0x02860286
 8009a2c:	02860286 	.word	0x02860286
 8009a30:	01290145 	.word	0x01290145
 8009a34:	02860286 	.word	0x02860286
 8009a38:	01210286 	.word	0x01210286
 8009a3c:	02860129 	.word	0x02860129
 8009a40:	01160286 	.word	0x01160286
 8009a44:	01000286 	.word	0x01000286
 8009a48:	00eb00a7 	.word	0x00eb00a7
 8009a4c:	028600e3 	.word	0x028600e3
 8009a50:	028600c0 	.word	0x028600c0
 8009a54:	02860059 	.word	0x02860059
 8009a58:	01eb0286 	.word	0x01eb0286
 8009a5c:	9b00      	ldr	r3, [sp, #0]
 8009a5e:	9505      	str	r5, [sp, #20]
 8009a60:	069a      	lsls	r2, r3, #26
 8009a62:	f140 8171 	bpl.w	8009d48 <_svfiprintf_r+0x448>
 8009a66:	9b06      	ldr	r3, [sp, #24]
 8009a68:	3307      	adds	r3, #7
 8009a6a:	f023 0307 	bic.w	r3, r3, #7
 8009a6e:	f103 0208 	add.w	r2, r3, #8
 8009a72:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009a76:	9206      	str	r2, [sp, #24]
 8009a78:	2301      	movs	r3, #1
 8009a7a:	f04f 0200 	mov.w	r2, #0
 8009a7e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 8009a82:	9a01      	ldr	r2, [sp, #4]
 8009a84:	9202      	str	r2, [sp, #8]
 8009a86:	f04f 0b00 	mov.w	fp, #0
 8009a8a:	9a01      	ldr	r2, [sp, #4]
 8009a8c:	2a00      	cmp	r2, #0
 8009a8e:	db03      	blt.n	8009a98 <_svfiprintf_r+0x198>
 8009a90:	9a00      	ldr	r2, [sp, #0]
 8009a92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a96:	9200      	str	r2, [sp, #0]
 8009a98:	ea56 0207 	orrs.w	r2, r6, r7
 8009a9c:	f040 82d6 	bne.w	800a04c <_svfiprintf_r+0x74c>
 8009aa0:	9a01      	ldr	r2, [sp, #4]
 8009aa2:	2a00      	cmp	r2, #0
 8009aa4:	f000 8352 	beq.w	800a14c <_svfiprintf_r+0x84c>
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	f000 83b3 	beq.w	800a214 <_svfiprintf_r+0x914>
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	f000 8373 	beq.w	800a19a <_svfiprintf_r+0x89a>
 8009ab4:	4641      	mov	r1, r8
 8009ab6:	08f2      	lsrs	r2, r6, #3
 8009ab8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8009abc:	08f8      	lsrs	r0, r7, #3
 8009abe:	f006 0307 	and.w	r3, r6, #7
 8009ac2:	4607      	mov	r7, r0
 8009ac4:	4616      	mov	r6, r2
 8009ac6:	3330      	adds	r3, #48	; 0x30
 8009ac8:	ea56 0207 	orrs.w	r2, r6, r7
 8009acc:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8009ad0:	d1f1      	bne.n	8009ab6 <_svfiprintf_r+0x1b6>
 8009ad2:	9a00      	ldr	r2, [sp, #0]
 8009ad4:	9109      	str	r1, [sp, #36]	; 0x24
 8009ad6:	07d0      	lsls	r0, r2, #31
 8009ad8:	f140 8398 	bpl.w	800a20c <_svfiprintf_r+0x90c>
 8009adc:	2b30      	cmp	r3, #48	; 0x30
 8009ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ae0:	f000 82d3 	beq.w	800a08a <_svfiprintf_r+0x78a>
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8009aea:	ebc2 0208 	rsb	r2, r2, r8
 8009aee:	2330      	movs	r3, #48	; 0x30
 8009af0:	9202      	str	r2, [sp, #8]
 8009af2:	f801 3c01 	strb.w	r3, [r1, #-1]
 8009af6:	e32f      	b.n	800a158 <_svfiprintf_r+0x858>
 8009af8:	9b00      	ldr	r3, [sp, #0]
 8009afa:	9505      	str	r5, [sp, #20]
 8009afc:	f013 0320 	ands.w	r3, r3, #32
 8009b00:	f000 8160 	beq.w	8009dc4 <_svfiprintf_r+0x4c4>
 8009b04:	9b06      	ldr	r3, [sp, #24]
 8009b06:	3307      	adds	r3, #7
 8009b08:	f023 0307 	bic.w	r3, r3, #7
 8009b0c:	f103 0208 	add.w	r2, r3, #8
 8009b10:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009b14:	9206      	str	r2, [sp, #24]
 8009b16:	2300      	movs	r3, #0
 8009b18:	e7af      	b.n	8009a7a <_svfiprintf_r+0x17a>
 8009b1a:	4648      	mov	r0, r9
 8009b1c:	9b00      	ldr	r3, [sp, #0]
 8009b1e:	f043 0304 	orr.w	r3, r3, #4
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	f899 3000 	ldrb.w	r3, [r9]
 8009b28:	e736      	b.n	8009998 <_svfiprintf_r+0x98>
 8009b2a:	9a06      	ldr	r2, [sp, #24]
 8009b2c:	9505      	str	r5, [sp, #20]
 8009b2e:	6813      	ldr	r3, [r2, #0]
 8009b30:	9309      	str	r3, [sp, #36]	; 0x24
 8009b32:	f04f 0100 	mov.w	r1, #0
 8009b36:	1d16      	adds	r6, r2, #4
 8009b38:	9a01      	ldr	r2, [sp, #4]
 8009b3a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
 8009b3e:	9202      	str	r2, [sp, #8]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 83f4 	beq.w	800a32e <_svfiprintf_r+0xa2e>
 8009b46:	9b01      	ldr	r3, [sp, #4]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f2c0 83e6 	blt.w	800a31a <_svfiprintf_r+0xa1a>
 8009b4e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009b50:	461a      	mov	r2, r3
 8009b52:	4628      	mov	r0, r5
 8009b54:	2100      	movs	r1, #0
 8009b56:	f7fe fd3d 	bl	80085d4 <memchr>
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	f000 8403 	beq.w	800a366 <_svfiprintf_r+0xa66>
 8009b60:	1b43      	subs	r3, r0, r5
 8009b62:	9302      	str	r3, [sp, #8]
 8009b64:	2300      	movs	r3, #0
 8009b66:	9606      	str	r6, [sp, #24]
 8009b68:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
 8009b6c:	9301      	str	r3, [sp, #4]
 8009b6e:	e2f3      	b.n	800a158 <_svfiprintf_r+0x858>
 8009b70:	9b00      	ldr	r3, [sp, #0]
 8009b72:	f043 0320 	orr.w	r3, r3, #32
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	f899 3000 	ldrb.w	r3, [r9]
 8009b7c:	4648      	mov	r0, r9
 8009b7e:	e70b      	b.n	8009998 <_svfiprintf_r+0x98>
 8009b80:	9806      	ldr	r0, [sp, #24]
 8009b82:	9900      	ldr	r1, [sp, #0]
 8009b84:	9505      	str	r5, [sp, #20]
 8009b86:	2330      	movs	r3, #48	; 0x30
 8009b88:	4602      	mov	r2, r0
 8009b8a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 8009b8e:	2378      	movs	r3, #120	; 0x78
 8009b90:	f041 0102 	orr.w	r1, r1, #2
 8009b94:	3204      	adds	r2, #4
 8009b96:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 8009b9a:	4bb5      	ldr	r3, [pc, #724]	; (8009e70 <_svfiprintf_r+0x570>)
 8009b9c:	930a      	str	r3, [sp, #40]	; 0x28
 8009b9e:	6806      	ldr	r6, [r0, #0]
 8009ba0:	9100      	str	r1, [sp, #0]
 8009ba2:	9206      	str	r2, [sp, #24]
 8009ba4:	2700      	movs	r7, #0
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	e767      	b.n	8009a7a <_svfiprintf_r+0x17a>
 8009baa:	9b00      	ldr	r3, [sp, #0]
 8009bac:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
 8009bb0:	069d      	lsls	r5, r3, #26
 8009bb2:	f100 8380 	bmi.w	800a2b6 <_svfiprintf_r+0x9b6>
 8009bb6:	9b00      	ldr	r3, [sp, #0]
 8009bb8:	06d8      	lsls	r0, r3, #27
 8009bba:	f100 8395 	bmi.w	800a2e8 <_svfiprintf_r+0x9e8>
 8009bbe:	9b00      	ldr	r3, [sp, #0]
 8009bc0:	0659      	lsls	r1, r3, #25
 8009bc2:	f140 8391 	bpl.w	800a2e8 <_svfiprintf_r+0x9e8>
 8009bc6:	9a06      	ldr	r2, [sp, #24]
 8009bc8:	6813      	ldr	r3, [r2, #0]
 8009bca:	3204      	adds	r2, #4
 8009bcc:	9206      	str	r2, [sp, #24]
 8009bce:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8009bd2:	801a      	strh	r2, [r3, #0]
 8009bd4:	e6ac      	b.n	8009930 <_svfiprintf_r+0x30>
 8009bd6:	f899 3000 	ldrb.w	r3, [r9]
 8009bda:	2b6c      	cmp	r3, #108	; 0x6c
 8009bdc:	4648      	mov	r0, r9
 8009bde:	f000 8376 	beq.w	800a2ce <_svfiprintf_r+0x9ce>
 8009be2:	9a00      	ldr	r2, [sp, #0]
 8009be4:	f042 0210 	orr.w	r2, r2, #16
 8009be8:	9200      	str	r2, [sp, #0]
 8009bea:	e6d5      	b.n	8009998 <_svfiprintf_r+0x98>
 8009bec:	9b00      	ldr	r3, [sp, #0]
 8009bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	f899 3000 	ldrb.w	r3, [r9]
 8009bf8:	4648      	mov	r0, r9
 8009bfa:	e6cd      	b.n	8009998 <_svfiprintf_r+0x98>
 8009bfc:	9b00      	ldr	r3, [sp, #0]
 8009bfe:	9505      	str	r5, [sp, #20]
 8009c00:	069b      	lsls	r3, r3, #26
 8009c02:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
 8009c06:	f140 80fa 	bpl.w	8009dfe <_svfiprintf_r+0x4fe>
 8009c0a:	9906      	ldr	r1, [sp, #24]
 8009c0c:	3107      	adds	r1, #7
 8009c0e:	f021 0107 	bic.w	r1, r1, #7
 8009c12:	e9d1 2300 	ldrd	r2, r3, [r1]
 8009c16:	3108      	adds	r1, #8
 8009c18:	9106      	str	r1, [sp, #24]
 8009c1a:	4616      	mov	r6, r2
 8009c1c:	461f      	mov	r7, r3
 8009c1e:	2a00      	cmp	r2, #0
 8009c20:	f173 0300 	sbcs.w	r3, r3, #0
 8009c24:	f2c0 8326 	blt.w	800a274 <_svfiprintf_r+0x974>
 8009c28:	9b01      	ldr	r3, [sp, #4]
 8009c2a:	9302      	str	r3, [sp, #8]
 8009c2c:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
 8009c30:	2301      	movs	r3, #1
 8009c32:	e72a      	b.n	8009a8a <_svfiprintf_r+0x18a>
 8009c34:	9a06      	ldr	r2, [sp, #24]
 8009c36:	9505      	str	r5, [sp, #20]
 8009c38:	6813      	ldr	r3, [r2, #0]
 8009c3a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8009c3e:	4613      	mov	r3, r2
 8009c40:	3304      	adds	r3, #4
 8009c42:	2601      	movs	r6, #1
 8009c44:	f04f 0100 	mov.w	r1, #0
 8009c48:	9306      	str	r3, [sp, #24]
 8009c4a:	ab12      	add	r3, sp, #72	; 0x48
 8009c4c:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
 8009c50:	9602      	str	r6, [sp, #8]
 8009c52:	9309      	str	r3, [sp, #36]	; 0x24
 8009c54:	2300      	movs	r3, #0
 8009c56:	9301      	str	r3, [sp, #4]
 8009c58:	9b00      	ldr	r3, [sp, #0]
 8009c5a:	f013 0302 	ands.w	r3, r3, #2
 8009c5e:	9307      	str	r3, [sp, #28]
 8009c60:	9b00      	ldr	r3, [sp, #0]
 8009c62:	bf18      	it	ne
 8009c64:	3602      	addne	r6, #2
 8009c66:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8009c6a:	9308      	str	r3, [sp, #32]
 8009c6c:	f040 8136 	bne.w	8009edc <_svfiprintf_r+0x5dc>
 8009c70:	9b05      	ldr	r3, [sp, #20]
 8009c72:	1b9d      	subs	r5, r3, r6
 8009c74:	2d00      	cmp	r5, #0
 8009c76:	f340 8131 	ble.w	8009edc <_svfiprintf_r+0x5dc>
 8009c7a:	2d10      	cmp	r5, #16
 8009c7c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009c7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c80:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 8009e78 <_svfiprintf_r+0x578>
 8009c84:	dd27      	ble.n	8009cd6 <_svfiprintf_r+0x3d6>
 8009c86:	960b      	str	r6, [sp, #44]	; 0x2c
 8009c88:	2710      	movs	r7, #16
 8009c8a:	465e      	mov	r6, fp
 8009c8c:	46ab      	mov	fp, r5
 8009c8e:	9d04      	ldr	r5, [sp, #16]
 8009c90:	e006      	b.n	8009ca0 <_svfiprintf_r+0x3a0>
 8009c92:	f1ab 0b10 	sub.w	fp, fp, #16
 8009c96:	f1bb 0f10 	cmp.w	fp, #16
 8009c9a:	f104 0408 	add.w	r4, r4, #8
 8009c9e:	dd17      	ble.n	8009cd0 <_svfiprintf_r+0x3d0>
 8009ca0:	3201      	adds	r2, #1
 8009ca2:	3110      	adds	r1, #16
 8009ca4:	2a07      	cmp	r2, #7
 8009ca6:	9111      	str	r1, [sp, #68]	; 0x44
 8009ca8:	9210      	str	r2, [sp, #64]	; 0x40
 8009caa:	e884 00c0 	stmia.w	r4, {r6, r7}
 8009cae:	ddf0      	ble.n	8009c92 <_svfiprintf_r+0x392>
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	4651      	mov	r1, sl
 8009cb4:	aa0f      	add	r2, sp, #60	; 0x3c
 8009cb6:	f7ff fda1 	bl	80097fc <__ssprint_r>
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	f040 81f0 	bne.w	800a0a0 <_svfiprintf_r+0x7a0>
 8009cc0:	f1ab 0b10 	sub.w	fp, fp, #16
 8009cc4:	f1bb 0f10 	cmp.w	fp, #16
 8009cc8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009cca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ccc:	4644      	mov	r4, r8
 8009cce:	dce7      	bgt.n	8009ca0 <_svfiprintf_r+0x3a0>
 8009cd0:	465d      	mov	r5, fp
 8009cd2:	46b3      	mov	fp, r6
 8009cd4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009cd6:	f8c4 b000 	str.w	fp, [r4]
 8009cda:	3201      	adds	r2, #1
 8009cdc:	4429      	add	r1, r5
 8009cde:	2a07      	cmp	r2, #7
 8009ce0:	9111      	str	r1, [sp, #68]	; 0x44
 8009ce2:	9210      	str	r2, [sp, #64]	; 0x40
 8009ce4:	6065      	str	r5, [r4, #4]
 8009ce6:	f300 8281 	bgt.w	800a1ec <_svfiprintf_r+0x8ec>
 8009cea:	3408      	adds	r4, #8
 8009cec:	e0f8      	b.n	8009ee0 <_svfiprintf_r+0x5e0>
 8009cee:	4a61      	ldr	r2, [pc, #388]	; (8009e74 <_svfiprintf_r+0x574>)
 8009cf0:	920a      	str	r2, [sp, #40]	; 0x28
 8009cf2:	9a00      	ldr	r2, [sp, #0]
 8009cf4:	9505      	str	r5, [sp, #20]
 8009cf6:	0697      	lsls	r7, r2, #26
 8009cf8:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
 8009cfc:	d548      	bpl.n	8009d90 <_svfiprintf_r+0x490>
 8009cfe:	9a06      	ldr	r2, [sp, #24]
 8009d00:	3207      	adds	r2, #7
 8009d02:	f022 0207 	bic.w	r2, r2, #7
 8009d06:	e9d2 6700 	ldrd	r6, r7, [r2]
 8009d0a:	f102 0108 	add.w	r1, r2, #8
 8009d0e:	9106      	str	r1, [sp, #24]
 8009d10:	9a00      	ldr	r2, [sp, #0]
 8009d12:	07d5      	lsls	r5, r2, #31
 8009d14:	f140 80e0 	bpl.w	8009ed8 <_svfiprintf_r+0x5d8>
 8009d18:	ea56 0207 	orrs.w	r2, r6, r7
 8009d1c:	f000 80dc 	beq.w	8009ed8 <_svfiprintf_r+0x5d8>
 8009d20:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 8009d24:	9b00      	ldr	r3, [sp, #0]
 8009d26:	2230      	movs	r2, #48	; 0x30
 8009d28:	f043 0302 	orr.w	r3, r3, #2
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8009d32:	2302      	movs	r3, #2
 8009d34:	e6a1      	b.n	8009a7a <_svfiprintf_r+0x17a>
 8009d36:	9b00      	ldr	r3, [sp, #0]
 8009d38:	9505      	str	r5, [sp, #20]
 8009d3a:	f043 0310 	orr.w	r3, r3, #16
 8009d3e:	9300      	str	r3, [sp, #0]
 8009d40:	9b00      	ldr	r3, [sp, #0]
 8009d42:	069a      	lsls	r2, r3, #26
 8009d44:	f53f ae8f 	bmi.w	8009a66 <_svfiprintf_r+0x166>
 8009d48:	9b00      	ldr	r3, [sp, #0]
 8009d4a:	06db      	lsls	r3, r3, #27
 8009d4c:	f140 82a5 	bpl.w	800a29a <_svfiprintf_r+0x99a>
 8009d50:	9a06      	ldr	r2, [sp, #24]
 8009d52:	4613      	mov	r3, r2
 8009d54:	3204      	adds	r2, #4
 8009d56:	681e      	ldr	r6, [r3, #0]
 8009d58:	9206      	str	r2, [sp, #24]
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	2700      	movs	r7, #0
 8009d5e:	e68c      	b.n	8009a7a <_svfiprintf_r+0x17a>
 8009d60:	9b00      	ldr	r3, [sp, #0]
 8009d62:	f043 0301 	orr.w	r3, r3, #1
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	f899 3000 	ldrb.w	r3, [r9]
 8009d6c:	4648      	mov	r0, r9
 8009d6e:	e613      	b.n	8009998 <_svfiprintf_r+0x98>
 8009d70:	f899 3000 	ldrb.w	r3, [r9]
 8009d74:	4648      	mov	r0, r9
 8009d76:	2900      	cmp	r1, #0
 8009d78:	f47f ae0e 	bne.w	8009998 <_svfiprintf_r+0x98>
 8009d7c:	2120      	movs	r1, #32
 8009d7e:	e60b      	b.n	8009998 <_svfiprintf_r+0x98>
 8009d80:	4a3b      	ldr	r2, [pc, #236]	; (8009e70 <_svfiprintf_r+0x570>)
 8009d82:	920a      	str	r2, [sp, #40]	; 0x28
 8009d84:	9a00      	ldr	r2, [sp, #0]
 8009d86:	9505      	str	r5, [sp, #20]
 8009d88:	0697      	lsls	r7, r2, #26
 8009d8a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
 8009d8e:	d4b6      	bmi.n	8009cfe <_svfiprintf_r+0x3fe>
 8009d90:	9a00      	ldr	r2, [sp, #0]
 8009d92:	06d6      	lsls	r6, r2, #27
 8009d94:	f100 827a 	bmi.w	800a28c <_svfiprintf_r+0x98c>
 8009d98:	9a00      	ldr	r2, [sp, #0]
 8009d9a:	9906      	ldr	r1, [sp, #24]
 8009d9c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009da0:	460a      	mov	r2, r1
 8009da2:	f000 82b5 	beq.w	800a310 <_svfiprintf_r+0xa10>
 8009da6:	3204      	adds	r2, #4
 8009da8:	880e      	ldrh	r6, [r1, #0]
 8009daa:	9206      	str	r2, [sp, #24]
 8009dac:	2700      	movs	r7, #0
 8009dae:	e7af      	b.n	8009d10 <_svfiprintf_r+0x410>
 8009db0:	9b00      	ldr	r3, [sp, #0]
 8009db2:	9505      	str	r5, [sp, #20]
 8009db4:	f043 0310 	orr.w	r3, r3, #16
 8009db8:	9300      	str	r3, [sp, #0]
 8009dba:	9b00      	ldr	r3, [sp, #0]
 8009dbc:	f013 0320 	ands.w	r3, r3, #32
 8009dc0:	f47f aea0 	bne.w	8009b04 <_svfiprintf_r+0x204>
 8009dc4:	9a00      	ldr	r2, [sp, #0]
 8009dc6:	f012 0210 	ands.w	r2, r2, #16
 8009dca:	f040 823f 	bne.w	800a24c <_svfiprintf_r+0x94c>
 8009dce:	9b00      	ldr	r3, [sp, #0]
 8009dd0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8009dd4:	f000 823a 	beq.w	800a24c <_svfiprintf_r+0x94c>
 8009dd8:	9906      	ldr	r1, [sp, #24]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	460a      	mov	r2, r1
 8009dde:	3204      	adds	r2, #4
 8009de0:	880e      	ldrh	r6, [r1, #0]
 8009de2:	9206      	str	r2, [sp, #24]
 8009de4:	2700      	movs	r7, #0
 8009de6:	e648      	b.n	8009a7a <_svfiprintf_r+0x17a>
 8009de8:	9b00      	ldr	r3, [sp, #0]
 8009dea:	9505      	str	r5, [sp, #20]
 8009dec:	f043 0310 	orr.w	r3, r3, #16
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	9b00      	ldr	r3, [sp, #0]
 8009df4:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
 8009df8:	069b      	lsls	r3, r3, #26
 8009dfa:	f53f af06 	bmi.w	8009c0a <_svfiprintf_r+0x30a>
 8009dfe:	9b00      	ldr	r3, [sp, #0]
 8009e00:	06df      	lsls	r7, r3, #27
 8009e02:	f100 822a 	bmi.w	800a25a <_svfiprintf_r+0x95a>
 8009e06:	9b00      	ldr	r3, [sp, #0]
 8009e08:	065e      	lsls	r6, r3, #25
 8009e0a:	f140 8226 	bpl.w	800a25a <_svfiprintf_r+0x95a>
 8009e0e:	9906      	ldr	r1, [sp, #24]
 8009e10:	f9b1 6000 	ldrsh.w	r6, [r1]
 8009e14:	3104      	adds	r1, #4
 8009e16:	17f7      	asrs	r7, r6, #31
 8009e18:	4632      	mov	r2, r6
 8009e1a:	463b      	mov	r3, r7
 8009e1c:	9106      	str	r1, [sp, #24]
 8009e1e:	e6fe      	b.n	8009c1e <_svfiprintf_r+0x31e>
 8009e20:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009e24:	2500      	movs	r5, #0
 8009e26:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009e2a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8009e2e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8009e32:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009e36:	2a09      	cmp	r2, #9
 8009e38:	d9f5      	bls.n	8009e26 <_svfiprintf_r+0x526>
 8009e3a:	e5af      	b.n	800999c <_svfiprintf_r+0x9c>
 8009e3c:	9b00      	ldr	r3, [sp, #0]
 8009e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	f899 3000 	ldrb.w	r3, [r9]
 8009e48:	4648      	mov	r0, r9
 8009e4a:	e5a5      	b.n	8009998 <_svfiprintf_r+0x98>
 8009e4c:	f899 3000 	ldrb.w	r3, [r9]
 8009e50:	4648      	mov	r0, r9
 8009e52:	212b      	movs	r1, #43	; 0x2b
 8009e54:	e5a0      	b.n	8009998 <_svfiprintf_r+0x98>
 8009e56:	9a06      	ldr	r2, [sp, #24]
 8009e58:	6815      	ldr	r5, [r2, #0]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	2d00      	cmp	r5, #0
 8009e5e:	f103 0304 	add.w	r3, r3, #4
 8009e62:	f2c0 823d 	blt.w	800a2e0 <_svfiprintf_r+0x9e0>
 8009e66:	9306      	str	r3, [sp, #24]
 8009e68:	f899 3000 	ldrb.w	r3, [r9]
 8009e6c:	4648      	mov	r0, r9
 8009e6e:	e593      	b.n	8009998 <_svfiprintf_r+0x98>
 8009e70:	0800c938 	.word	0x0800c938
 8009e74:	0800c924 	.word	0x0800c924
 8009e78:	0800cac0 	.word	0x0800cac0
 8009e7c:	f899 3000 	ldrb.w	r3, [r9]
 8009e80:	2b2a      	cmp	r3, #42	; 0x2a
 8009e82:	f109 0001 	add.w	r0, r9, #1
 8009e86:	f000 8273 	beq.w	800a370 <_svfiprintf_r+0xa70>
 8009e8a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009e8e:	2a09      	cmp	r2, #9
 8009e90:	4681      	mov	r9, r0
 8009e92:	bf98      	it	ls
 8009e94:	2000      	movls	r0, #0
 8009e96:	f200 8262 	bhi.w	800a35e <_svfiprintf_r+0xa5e>
 8009e9a:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009e9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009ea2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8009ea6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009eaa:	2a09      	cmp	r2, #9
 8009eac:	d9f5      	bls.n	8009e9a <_svfiprintf_r+0x59a>
 8009eae:	ea40 72e0 	orr.w	r2, r0, r0, asr #31
 8009eb2:	9201      	str	r2, [sp, #4]
 8009eb4:	e572      	b.n	800999c <_svfiprintf_r+0x9c>
 8009eb6:	9505      	str	r5, [sp, #20]
 8009eb8:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f000 80e8 	beq.w	800a092 <_svfiprintf_r+0x792>
 8009ec2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8009ec6:	f04f 0300 	mov.w	r3, #0
 8009eca:	2601      	movs	r6, #1
 8009ecc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8009ed0:	ab12      	add	r3, sp, #72	; 0x48
 8009ed2:	9602      	str	r6, [sp, #8]
 8009ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ed6:	e6bd      	b.n	8009c54 <_svfiprintf_r+0x354>
 8009ed8:	2302      	movs	r3, #2
 8009eda:	e5ce      	b.n	8009a7a <_svfiprintf_r+0x17a>
 8009edc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009ede:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ee0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8009ee4:	b163      	cbz	r3, 8009f00 <_svfiprintf_r+0x600>
 8009ee6:	3201      	adds	r2, #1
 8009ee8:	3101      	adds	r1, #1
 8009eea:	f10d 0037 	add.w	r0, sp, #55	; 0x37
 8009eee:	2301      	movs	r3, #1
 8009ef0:	2a07      	cmp	r2, #7
 8009ef2:	9111      	str	r1, [sp, #68]	; 0x44
 8009ef4:	9210      	str	r2, [sp, #64]	; 0x40
 8009ef6:	e884 0009 	stmia.w	r4, {r0, r3}
 8009efa:	f300 815f 	bgt.w	800a1bc <_svfiprintf_r+0x8bc>
 8009efe:	3408      	adds	r4, #8
 8009f00:	9b07      	ldr	r3, [sp, #28]
 8009f02:	b15b      	cbz	r3, 8009f1c <_svfiprintf_r+0x61c>
 8009f04:	3201      	adds	r2, #1
 8009f06:	3102      	adds	r1, #2
 8009f08:	a80e      	add	r0, sp, #56	; 0x38
 8009f0a:	2302      	movs	r3, #2
 8009f0c:	2a07      	cmp	r2, #7
 8009f0e:	9111      	str	r1, [sp, #68]	; 0x44
 8009f10:	9210      	str	r2, [sp, #64]	; 0x40
 8009f12:	e884 0009 	stmia.w	r4, {r0, r3}
 8009f16:	f300 815d 	bgt.w	800a1d4 <_svfiprintf_r+0x8d4>
 8009f1a:	3408      	adds	r4, #8
 8009f1c:	9b08      	ldr	r3, [sp, #32]
 8009f1e:	2b80      	cmp	r3, #128	; 0x80
 8009f20:	f000 80ca 	beq.w	800a0b8 <_svfiprintf_r+0x7b8>
 8009f24:	9b01      	ldr	r3, [sp, #4]
 8009f26:	9802      	ldr	r0, [sp, #8]
 8009f28:	1a1d      	subs	r5, r3, r0
 8009f2a:	2d00      	cmp	r5, #0
 8009f2c:	dd31      	ble.n	8009f92 <_svfiprintf_r+0x692>
 8009f2e:	2d10      	cmp	r5, #16
 8009f30:	4fb4      	ldr	r7, [pc, #720]	; (800a204 <_svfiprintf_r+0x904>)
 8009f32:	dd24      	ble.n	8009f7e <_svfiprintf_r+0x67e>
 8009f34:	9601      	str	r6, [sp, #4]
 8009f36:	f04f 0b10 	mov.w	fp, #16
 8009f3a:	463e      	mov	r6, r7
 8009f3c:	462f      	mov	r7, r5
 8009f3e:	9d04      	ldr	r5, [sp, #16]
 8009f40:	e004      	b.n	8009f4c <_svfiprintf_r+0x64c>
 8009f42:	3f10      	subs	r7, #16
 8009f44:	2f10      	cmp	r7, #16
 8009f46:	f104 0408 	add.w	r4, r4, #8
 8009f4a:	dd15      	ble.n	8009f78 <_svfiprintf_r+0x678>
 8009f4c:	3201      	adds	r2, #1
 8009f4e:	3110      	adds	r1, #16
 8009f50:	2a07      	cmp	r2, #7
 8009f52:	9111      	str	r1, [sp, #68]	; 0x44
 8009f54:	9210      	str	r2, [sp, #64]	; 0x40
 8009f56:	e884 0840 	stmia.w	r4, {r6, fp}
 8009f5a:	ddf2      	ble.n	8009f42 <_svfiprintf_r+0x642>
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	4651      	mov	r1, sl
 8009f60:	aa0f      	add	r2, sp, #60	; 0x3c
 8009f62:	f7ff fc4b 	bl	80097fc <__ssprint_r>
 8009f66:	2800      	cmp	r0, #0
 8009f68:	f040 809a 	bne.w	800a0a0 <_svfiprintf_r+0x7a0>
 8009f6c:	3f10      	subs	r7, #16
 8009f6e:	2f10      	cmp	r7, #16
 8009f70:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009f72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f74:	4644      	mov	r4, r8
 8009f76:	dce9      	bgt.n	8009f4c <_svfiprintf_r+0x64c>
 8009f78:	463d      	mov	r5, r7
 8009f7a:	4637      	mov	r7, r6
 8009f7c:	9e01      	ldr	r6, [sp, #4]
 8009f7e:	6027      	str	r7, [r4, #0]
 8009f80:	3201      	adds	r2, #1
 8009f82:	4429      	add	r1, r5
 8009f84:	2a07      	cmp	r2, #7
 8009f86:	9111      	str	r1, [sp, #68]	; 0x44
 8009f88:	9210      	str	r2, [sp, #64]	; 0x40
 8009f8a:	6065      	str	r5, [r4, #4]
 8009f8c:	f300 80fa 	bgt.w	800a184 <_svfiprintf_r+0x884>
 8009f90:	3408      	adds	r4, #8
 8009f92:	9802      	ldr	r0, [sp, #8]
 8009f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f96:	6023      	str	r3, [r4, #0]
 8009f98:	3201      	adds	r2, #1
 8009f9a:	4401      	add	r1, r0
 8009f9c:	2a07      	cmp	r2, #7
 8009f9e:	9111      	str	r1, [sp, #68]	; 0x44
 8009fa0:	9210      	str	r2, [sp, #64]	; 0x40
 8009fa2:	6060      	str	r0, [r4, #4]
 8009fa4:	f300 80bf 	bgt.w	800a126 <_svfiprintf_r+0x826>
 8009fa8:	3408      	adds	r4, #8
 8009faa:	9b00      	ldr	r3, [sp, #0]
 8009fac:	075b      	lsls	r3, r3, #29
 8009fae:	d539      	bpl.n	800a024 <_svfiprintf_r+0x724>
 8009fb0:	9b05      	ldr	r3, [sp, #20]
 8009fb2:	1b9d      	subs	r5, r3, r6
 8009fb4:	2d00      	cmp	r5, #0
 8009fb6:	dd35      	ble.n	800a024 <_svfiprintf_r+0x724>
 8009fb8:	2d10      	cmp	r5, #16
 8009fba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009fbc:	f8df b248 	ldr.w	fp, [pc, #584]	; 800a208 <_svfiprintf_r+0x908>
 8009fc0:	dd26      	ble.n	800a010 <_svfiprintf_r+0x710>
 8009fc2:	9600      	str	r6, [sp, #0]
 8009fc4:	2710      	movs	r7, #16
 8009fc6:	465e      	mov	r6, fp
 8009fc8:	46ab      	mov	fp, r5
 8009fca:	9d04      	ldr	r5, [sp, #16]
 8009fcc:	e006      	b.n	8009fdc <_svfiprintf_r+0x6dc>
 8009fce:	f1ab 0b10 	sub.w	fp, fp, #16
 8009fd2:	f1bb 0f10 	cmp.w	fp, #16
 8009fd6:	f104 0408 	add.w	r4, r4, #8
 8009fda:	dd16      	ble.n	800a00a <_svfiprintf_r+0x70a>
 8009fdc:	3201      	adds	r2, #1
 8009fde:	3110      	adds	r1, #16
 8009fe0:	2a07      	cmp	r2, #7
 8009fe2:	9111      	str	r1, [sp, #68]	; 0x44
 8009fe4:	9210      	str	r2, [sp, #64]	; 0x40
 8009fe6:	e884 00c0 	stmia.w	r4, {r6, r7}
 8009fea:	ddf0      	ble.n	8009fce <_svfiprintf_r+0x6ce>
 8009fec:	4628      	mov	r0, r5
 8009fee:	4651      	mov	r1, sl
 8009ff0:	aa0f      	add	r2, sp, #60	; 0x3c
 8009ff2:	f7ff fc03 	bl	80097fc <__ssprint_r>
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	d152      	bne.n	800a0a0 <_svfiprintf_r+0x7a0>
 8009ffa:	f1ab 0b10 	sub.w	fp, fp, #16
 8009ffe:	f1bb 0f10 	cmp.w	fp, #16
 800a002:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a004:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a006:	4644      	mov	r4, r8
 800a008:	dce8      	bgt.n	8009fdc <_svfiprintf_r+0x6dc>
 800a00a:	465d      	mov	r5, fp
 800a00c:	46b3      	mov	fp, r6
 800a00e:	9e00      	ldr	r6, [sp, #0]
 800a010:	f8c4 b000 	str.w	fp, [r4]
 800a014:	3201      	adds	r2, #1
 800a016:	4429      	add	r1, r5
 800a018:	2a07      	cmp	r2, #7
 800a01a:	9111      	str	r1, [sp, #68]	; 0x44
 800a01c:	9210      	str	r2, [sp, #64]	; 0x40
 800a01e:	6065      	str	r5, [r4, #4]
 800a020:	f300 8101 	bgt.w	800a226 <_svfiprintf_r+0x926>
 800a024:	9b03      	ldr	r3, [sp, #12]
 800a026:	9a05      	ldr	r2, [sp, #20]
 800a028:	4296      	cmp	r6, r2
 800a02a:	bfac      	ite	ge
 800a02c:	199b      	addge	r3, r3, r6
 800a02e:	189b      	addlt	r3, r3, r2
 800a030:	9303      	str	r3, [sp, #12]
 800a032:	2900      	cmp	r1, #0
 800a034:	f040 8081 	bne.w	800a13a <_svfiprintf_r+0x83a>
 800a038:	2300      	movs	r3, #0
 800a03a:	9310      	str	r3, [sp, #64]	; 0x40
 800a03c:	f899 3000 	ldrb.w	r3, [r9]
 800a040:	4644      	mov	r4, r8
 800a042:	2b00      	cmp	r3, #0
 800a044:	f47f ac79 	bne.w	800993a <_svfiprintf_r+0x3a>
 800a048:	464d      	mov	r5, r9
 800a04a:	e495      	b.n	8009978 <_svfiprintf_r+0x78>
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	f47f ad2e 	bne.w	8009aae <_svfiprintf_r+0x1ae>
 800a052:	2f00      	cmp	r7, #0
 800a054:	bf08      	it	eq
 800a056:	2e0a      	cmpeq	r6, #10
 800a058:	f0c0 80dc 	bcc.w	800a214 <_svfiprintf_r+0x914>
 800a05c:	4645      	mov	r5, r8
 800a05e:	4630      	mov	r0, r6
 800a060:	4639      	mov	r1, r7
 800a062:	220a      	movs	r2, #10
 800a064:	2300      	movs	r3, #0
 800a066:	f001 ff95 	bl	800bf94 <__aeabi_uldivmod>
 800a06a:	3230      	adds	r2, #48	; 0x30
 800a06c:	4630      	mov	r0, r6
 800a06e:	4639      	mov	r1, r7
 800a070:	f805 2d01 	strb.w	r2, [r5, #-1]!
 800a074:	2300      	movs	r3, #0
 800a076:	220a      	movs	r2, #10
 800a078:	f001 ff8c 	bl	800bf94 <__aeabi_uldivmod>
 800a07c:	4606      	mov	r6, r0
 800a07e:	460f      	mov	r7, r1
 800a080:	ea56 0307 	orrs.w	r3, r6, r7
 800a084:	d1eb      	bne.n	800a05e <_svfiprintf_r+0x75e>
 800a086:	462b      	mov	r3, r5
 800a088:	9509      	str	r5, [sp, #36]	; 0x24
 800a08a:	ebc3 0308 	rsb	r3, r3, r8
 800a08e:	9302      	str	r3, [sp, #8]
 800a090:	e062      	b.n	800a158 <_svfiprintf_r+0x858>
 800a092:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a094:	b123      	cbz	r3, 800a0a0 <_svfiprintf_r+0x7a0>
 800a096:	9804      	ldr	r0, [sp, #16]
 800a098:	4651      	mov	r1, sl
 800a09a:	aa0f      	add	r2, sp, #60	; 0x3c
 800a09c:	f7ff fbae 	bl	80097fc <__ssprint_r>
 800a0a0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800a0a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a0a8:	9b03      	ldr	r3, [sp, #12]
 800a0aa:	bf18      	it	ne
 800a0ac:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	b02d      	add	sp, #180	; 0xb4
 800a0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b8:	9b05      	ldr	r3, [sp, #20]
 800a0ba:	1b9d      	subs	r5, r3, r6
 800a0bc:	2d00      	cmp	r5, #0
 800a0be:	f77f af31 	ble.w	8009f24 <_svfiprintf_r+0x624>
 800a0c2:	2d10      	cmp	r5, #16
 800a0c4:	4f4f      	ldr	r7, [pc, #316]	; (800a204 <_svfiprintf_r+0x904>)
 800a0c6:	dd23      	ble.n	800a110 <_svfiprintf_r+0x810>
 800a0c8:	9607      	str	r6, [sp, #28]
 800a0ca:	f04f 0b10 	mov.w	fp, #16
 800a0ce:	463e      	mov	r6, r7
 800a0d0:	462f      	mov	r7, r5
 800a0d2:	9d04      	ldr	r5, [sp, #16]
 800a0d4:	e004      	b.n	800a0e0 <_svfiprintf_r+0x7e0>
 800a0d6:	3f10      	subs	r7, #16
 800a0d8:	2f10      	cmp	r7, #16
 800a0da:	f104 0408 	add.w	r4, r4, #8
 800a0de:	dd14      	ble.n	800a10a <_svfiprintf_r+0x80a>
 800a0e0:	3201      	adds	r2, #1
 800a0e2:	3110      	adds	r1, #16
 800a0e4:	2a07      	cmp	r2, #7
 800a0e6:	9111      	str	r1, [sp, #68]	; 0x44
 800a0e8:	9210      	str	r2, [sp, #64]	; 0x40
 800a0ea:	e884 0840 	stmia.w	r4, {r6, fp}
 800a0ee:	ddf2      	ble.n	800a0d6 <_svfiprintf_r+0x7d6>
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	4651      	mov	r1, sl
 800a0f4:	aa0f      	add	r2, sp, #60	; 0x3c
 800a0f6:	f7ff fb81 	bl	80097fc <__ssprint_r>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d1d0      	bne.n	800a0a0 <_svfiprintf_r+0x7a0>
 800a0fe:	3f10      	subs	r7, #16
 800a100:	2f10      	cmp	r7, #16
 800a102:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a104:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a106:	4644      	mov	r4, r8
 800a108:	dcea      	bgt.n	800a0e0 <_svfiprintf_r+0x7e0>
 800a10a:	463d      	mov	r5, r7
 800a10c:	4637      	mov	r7, r6
 800a10e:	9e07      	ldr	r6, [sp, #28]
 800a110:	6027      	str	r7, [r4, #0]
 800a112:	3201      	adds	r2, #1
 800a114:	4429      	add	r1, r5
 800a116:	2a07      	cmp	r2, #7
 800a118:	9111      	str	r1, [sp, #68]	; 0x44
 800a11a:	9210      	str	r2, [sp, #64]	; 0x40
 800a11c:	6065      	str	r5, [r4, #4]
 800a11e:	f300 80eb 	bgt.w	800a2f8 <_svfiprintf_r+0x9f8>
 800a122:	3408      	adds	r4, #8
 800a124:	e6fe      	b.n	8009f24 <_svfiprintf_r+0x624>
 800a126:	9804      	ldr	r0, [sp, #16]
 800a128:	4651      	mov	r1, sl
 800a12a:	aa0f      	add	r2, sp, #60	; 0x3c
 800a12c:	f7ff fb66 	bl	80097fc <__ssprint_r>
 800a130:	2800      	cmp	r0, #0
 800a132:	d1b5      	bne.n	800a0a0 <_svfiprintf_r+0x7a0>
 800a134:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a136:	4644      	mov	r4, r8
 800a138:	e737      	b.n	8009faa <_svfiprintf_r+0x6aa>
 800a13a:	9804      	ldr	r0, [sp, #16]
 800a13c:	4651      	mov	r1, sl
 800a13e:	aa0f      	add	r2, sp, #60	; 0x3c
 800a140:	f7ff fb5c 	bl	80097fc <__ssprint_r>
 800a144:	2800      	cmp	r0, #0
 800a146:	f43f af77 	beq.w	800a038 <_svfiprintf_r+0x738>
 800a14a:	e7a9      	b.n	800a0a0 <_svfiprintf_r+0x7a0>
 800a14c:	b913      	cbnz	r3, 800a154 <_svfiprintf_r+0x854>
 800a14e:	9b00      	ldr	r3, [sp, #0]
 800a150:	07da      	lsls	r2, r3, #31
 800a152:	d472      	bmi.n	800a23a <_svfiprintf_r+0x93a>
 800a154:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800a158:	9b02      	ldr	r3, [sp, #8]
 800a15a:	9a01      	ldr	r2, [sp, #4]
 800a15c:	4293      	cmp	r3, r2
 800a15e:	bfb8      	it	lt
 800a160:	4613      	movlt	r3, r2
 800a162:	461e      	mov	r6, r3
 800a164:	f1bb 0f00 	cmp.w	fp, #0
 800a168:	f43f ad76 	beq.w	8009c58 <_svfiprintf_r+0x358>
 800a16c:	3601      	adds	r6, #1
 800a16e:	e573      	b.n	8009c58 <_svfiprintf_r+0x358>
 800a170:	9804      	ldr	r0, [sp, #16]
 800a172:	4651      	mov	r1, sl
 800a174:	aa0f      	add	r2, sp, #60	; 0x3c
 800a176:	f7ff fb41 	bl	80097fc <__ssprint_r>
 800a17a:	2800      	cmp	r0, #0
 800a17c:	d190      	bne.n	800a0a0 <_svfiprintf_r+0x7a0>
 800a17e:	4644      	mov	r4, r8
 800a180:	f7ff bbf7 	b.w	8009972 <_svfiprintf_r+0x72>
 800a184:	9804      	ldr	r0, [sp, #16]
 800a186:	4651      	mov	r1, sl
 800a188:	aa0f      	add	r2, sp, #60	; 0x3c
 800a18a:	f7ff fb37 	bl	80097fc <__ssprint_r>
 800a18e:	2800      	cmp	r0, #0
 800a190:	d186      	bne.n	800a0a0 <_svfiprintf_r+0x7a0>
 800a192:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a194:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a196:	4644      	mov	r4, r8
 800a198:	e6fb      	b.n	8009f92 <_svfiprintf_r+0x692>
 800a19a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a19c:	4645      	mov	r5, r8
 800a19e:	0933      	lsrs	r3, r6, #4
 800a1a0:	f006 010f 	and.w	r1, r6, #15
 800a1a4:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800a1a8:	093a      	lsrs	r2, r7, #4
 800a1aa:	461e      	mov	r6, r3
 800a1ac:	4617      	mov	r7, r2
 800a1ae:	5c43      	ldrb	r3, [r0, r1]
 800a1b0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a1b4:	ea56 0307 	orrs.w	r3, r6, r7
 800a1b8:	d1f1      	bne.n	800a19e <_svfiprintf_r+0x89e>
 800a1ba:	e764      	b.n	800a086 <_svfiprintf_r+0x786>
 800a1bc:	9804      	ldr	r0, [sp, #16]
 800a1be:	4651      	mov	r1, sl
 800a1c0:	aa0f      	add	r2, sp, #60	; 0x3c
 800a1c2:	f7ff fb1b 	bl	80097fc <__ssprint_r>
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	f47f af6a 	bne.w	800a0a0 <_svfiprintf_r+0x7a0>
 800a1cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a1ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a1d0:	4644      	mov	r4, r8
 800a1d2:	e695      	b.n	8009f00 <_svfiprintf_r+0x600>
 800a1d4:	9804      	ldr	r0, [sp, #16]
 800a1d6:	4651      	mov	r1, sl
 800a1d8:	aa0f      	add	r2, sp, #60	; 0x3c
 800a1da:	f7ff fb0f 	bl	80097fc <__ssprint_r>
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	f47f af5e 	bne.w	800a0a0 <_svfiprintf_r+0x7a0>
 800a1e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a1e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a1e8:	4644      	mov	r4, r8
 800a1ea:	e697      	b.n	8009f1c <_svfiprintf_r+0x61c>
 800a1ec:	9804      	ldr	r0, [sp, #16]
 800a1ee:	4651      	mov	r1, sl
 800a1f0:	aa0f      	add	r2, sp, #60	; 0x3c
 800a1f2:	f7ff fb03 	bl	80097fc <__ssprint_r>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	f47f af52 	bne.w	800a0a0 <_svfiprintf_r+0x7a0>
 800a1fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a1fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a200:	4644      	mov	r4, r8
 800a202:	e66d      	b.n	8009ee0 <_svfiprintf_r+0x5e0>
 800a204:	0800cad0 	.word	0x0800cad0
 800a208:	0800cac0 	.word	0x0800cac0
 800a20c:	ebc1 0308 	rsb	r3, r1, r8
 800a210:	9302      	str	r3, [sp, #8]
 800a212:	e7a1      	b.n	800a158 <_svfiprintf_r+0x858>
 800a214:	ad2c      	add	r5, sp, #176	; 0xb0
 800a216:	3630      	adds	r6, #48	; 0x30
 800a218:	f805 6d41 	strb.w	r6, [r5, #-65]!
 800a21c:	ebc5 0308 	rsb	r3, r5, r8
 800a220:	9302      	str	r3, [sp, #8]
 800a222:	9509      	str	r5, [sp, #36]	; 0x24
 800a224:	e798      	b.n	800a158 <_svfiprintf_r+0x858>
 800a226:	9804      	ldr	r0, [sp, #16]
 800a228:	4651      	mov	r1, sl
 800a22a:	aa0f      	add	r2, sp, #60	; 0x3c
 800a22c:	f7ff fae6 	bl	80097fc <__ssprint_r>
 800a230:	2800      	cmp	r0, #0
 800a232:	f47f af35 	bne.w	800a0a0 <_svfiprintf_r+0x7a0>
 800a236:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a238:	e6f4      	b.n	800a024 <_svfiprintf_r+0x724>
 800a23a:	ad2c      	add	r5, sp, #176	; 0xb0
 800a23c:	2330      	movs	r3, #48	; 0x30
 800a23e:	f805 3d41 	strb.w	r3, [r5, #-65]!
 800a242:	ebc5 0308 	rsb	r3, r5, r8
 800a246:	9302      	str	r3, [sp, #8]
 800a248:	9509      	str	r5, [sp, #36]	; 0x24
 800a24a:	e785      	b.n	800a158 <_svfiprintf_r+0x858>
 800a24c:	9906      	ldr	r1, [sp, #24]
 800a24e:	460a      	mov	r2, r1
 800a250:	3204      	adds	r2, #4
 800a252:	680e      	ldr	r6, [r1, #0]
 800a254:	9206      	str	r2, [sp, #24]
 800a256:	2700      	movs	r7, #0
 800a258:	e40f      	b.n	8009a7a <_svfiprintf_r+0x17a>
 800a25a:	9a06      	ldr	r2, [sp, #24]
 800a25c:	6816      	ldr	r6, [r2, #0]
 800a25e:	4613      	mov	r3, r2
 800a260:	3304      	adds	r3, #4
 800a262:	17f7      	asrs	r7, r6, #31
 800a264:	4632      	mov	r2, r6
 800a266:	9306      	str	r3, [sp, #24]
 800a268:	2a00      	cmp	r2, #0
 800a26a:	463b      	mov	r3, r7
 800a26c:	f173 0300 	sbcs.w	r3, r3, #0
 800a270:	f6bf acda 	bge.w	8009c28 <_svfiprintf_r+0x328>
 800a274:	9b01      	ldr	r3, [sp, #4]
 800a276:	9302      	str	r3, [sp, #8]
 800a278:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
 800a27c:	4276      	negs	r6, r6
 800a27e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800a282:	f88d b037 	strb.w	fp, [sp, #55]	; 0x37
 800a286:	2301      	movs	r3, #1
 800a288:	f7ff bbff 	b.w	8009a8a <_svfiprintf_r+0x18a>
 800a28c:	9906      	ldr	r1, [sp, #24]
 800a28e:	460a      	mov	r2, r1
 800a290:	3204      	adds	r2, #4
 800a292:	680e      	ldr	r6, [r1, #0]
 800a294:	9206      	str	r2, [sp, #24]
 800a296:	2700      	movs	r7, #0
 800a298:	e53a      	b.n	8009d10 <_svfiprintf_r+0x410>
 800a29a:	9b00      	ldr	r3, [sp, #0]
 800a29c:	9a06      	ldr	r2, [sp, #24]
 800a29e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	f43f ad56 	beq.w	8009d54 <_svfiprintf_r+0x454>
 800a2a8:	8816      	ldrh	r6, [r2, #0]
 800a2aa:	3204      	adds	r2, #4
 800a2ac:	2700      	movs	r7, #0
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	9206      	str	r2, [sp, #24]
 800a2b2:	f7ff bbe2 	b.w	8009a7a <_svfiprintf_r+0x17a>
 800a2b6:	9a06      	ldr	r2, [sp, #24]
 800a2b8:	9903      	ldr	r1, [sp, #12]
 800a2ba:	6813      	ldr	r3, [r2, #0]
 800a2bc:	17cf      	asrs	r7, r1, #31
 800a2be:	4608      	mov	r0, r1
 800a2c0:	3204      	adds	r2, #4
 800a2c2:	4639      	mov	r1, r7
 800a2c4:	9206      	str	r2, [sp, #24]
 800a2c6:	e9c3 0100 	strd	r0, r1, [r3]
 800a2ca:	f7ff bb31 	b.w	8009930 <_svfiprintf_r+0x30>
 800a2ce:	9b00      	ldr	r3, [sp, #0]
 800a2d0:	f043 0320 	orr.w	r3, r3, #32
 800a2d4:	9300      	str	r3, [sp, #0]
 800a2d6:	3001      	adds	r0, #1
 800a2d8:	f899 3001 	ldrb.w	r3, [r9, #1]
 800a2dc:	f7ff bb5c 	b.w	8009998 <_svfiprintf_r+0x98>
 800a2e0:	426d      	negs	r5, r5
 800a2e2:	9306      	str	r3, [sp, #24]
 800a2e4:	4648      	mov	r0, r9
 800a2e6:	e419      	b.n	8009b1c <_svfiprintf_r+0x21c>
 800a2e8:	9a06      	ldr	r2, [sp, #24]
 800a2ea:	6813      	ldr	r3, [r2, #0]
 800a2ec:	3204      	adds	r2, #4
 800a2ee:	9206      	str	r2, [sp, #24]
 800a2f0:	9a03      	ldr	r2, [sp, #12]
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	f7ff bb1c 	b.w	8009930 <_svfiprintf_r+0x30>
 800a2f8:	9804      	ldr	r0, [sp, #16]
 800a2fa:	4651      	mov	r1, sl
 800a2fc:	aa0f      	add	r2, sp, #60	; 0x3c
 800a2fe:	f7ff fa7d 	bl	80097fc <__ssprint_r>
 800a302:	2800      	cmp	r0, #0
 800a304:	f47f aecc 	bne.w	800a0a0 <_svfiprintf_r+0x7a0>
 800a308:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a30a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a30c:	4644      	mov	r4, r8
 800a30e:	e609      	b.n	8009f24 <_svfiprintf_r+0x624>
 800a310:	3204      	adds	r2, #4
 800a312:	680e      	ldr	r6, [r1, #0]
 800a314:	9206      	str	r2, [sp, #24]
 800a316:	2700      	movs	r7, #0
 800a318:	e4fa      	b.n	8009d10 <_svfiprintf_r+0x410>
 800a31a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a31c:	9606      	str	r6, [sp, #24]
 800a31e:	f7f9 fb6d 	bl	80039fc <strlen>
 800a322:	2300      	movs	r3, #0
 800a324:	9002      	str	r0, [sp, #8]
 800a326:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
 800a32a:	9301      	str	r3, [sp, #4]
 800a32c:	e714      	b.n	800a158 <_svfiprintf_r+0x858>
 800a32e:	2a06      	cmp	r2, #6
 800a330:	4613      	mov	r3, r2
 800a332:	bf28      	it	cs
 800a334:	2306      	movcs	r3, #6
 800a336:	9302      	str	r3, [sp, #8]
 800a338:	9606      	str	r6, [sp, #24]
 800a33a:	ea23 76e3 	bic.w	r6, r3, r3, asr #31
 800a33e:	4b17      	ldr	r3, [pc, #92]	; (800a39c <_svfiprintf_r+0xa9c>)
 800a340:	9309      	str	r3, [sp, #36]	; 0x24
 800a342:	e487      	b.n	8009c54 <_svfiprintf_r+0x354>
 800a344:	2140      	movs	r1, #64	; 0x40
 800a346:	f7fd feb3 	bl	80080b0 <_malloc_r>
 800a34a:	f8ca 0000 	str.w	r0, [sl]
 800a34e:	f8ca 0010 	str.w	r0, [sl, #16]
 800a352:	b1e0      	cbz	r0, 800a38e <_svfiprintf_r+0xa8e>
 800a354:	2340      	movs	r3, #64	; 0x40
 800a356:	f8ca 3014 	str.w	r3, [sl, #20]
 800a35a:	f7ff badf 	b.w	800991c <_svfiprintf_r+0x1c>
 800a35e:	2200      	movs	r2, #0
 800a360:	9201      	str	r2, [sp, #4]
 800a362:	f7ff bb1b 	b.w	800999c <_svfiprintf_r+0x9c>
 800a366:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
 800a36a:	9606      	str	r6, [sp, #24]
 800a36c:	9001      	str	r0, [sp, #4]
 800a36e:	e6f3      	b.n	800a158 <_svfiprintf_r+0x858>
 800a370:	9a06      	ldr	r2, [sp, #24]
 800a372:	6813      	ldr	r3, [r2, #0]
 800a374:	9301      	str	r3, [sp, #4]
 800a376:	3204      	adds	r2, #4
 800a378:	2b00      	cmp	r3, #0
 800a37a:	9206      	str	r2, [sp, #24]
 800a37c:	f899 3001 	ldrb.w	r3, [r9, #1]
 800a380:	f6bf ab0a 	bge.w	8009998 <_svfiprintf_r+0x98>
 800a384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a388:	9201      	str	r2, [sp, #4]
 800a38a:	f7ff bb05 	b.w	8009998 <_svfiprintf_r+0x98>
 800a38e:	9a04      	ldr	r2, [sp, #16]
 800a390:	230c      	movs	r3, #12
 800a392:	6013      	str	r3, [r2, #0]
 800a394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a398:	e68b      	b.n	800a0b2 <_svfiprintf_r+0x7b2>
 800a39a:	bf00      	nop
 800a39c:	0800c94c 	.word	0x0800c94c

0800a3a0 <__sprint_r.part.0>:
 800a3a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800a3a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a6:	049c      	lsls	r4, r3, #18
 800a3a8:	460f      	mov	r7, r1
 800a3aa:	4692      	mov	sl, r2
 800a3ac:	d52b      	bpl.n	800a406 <__sprint_r.part.0+0x66>
 800a3ae:	6893      	ldr	r3, [r2, #8]
 800a3b0:	6812      	ldr	r2, [r2, #0]
 800a3b2:	b333      	cbz	r3, 800a402 <__sprint_r.part.0+0x62>
 800a3b4:	4680      	mov	r8, r0
 800a3b6:	f102 0908 	add.w	r9, r2, #8
 800a3ba:	e919 0060 	ldmdb	r9, {r5, r6}
 800a3be:	08b6      	lsrs	r6, r6, #2
 800a3c0:	d017      	beq.n	800a3f2 <__sprint_r.part.0+0x52>
 800a3c2:	3d04      	subs	r5, #4
 800a3c4:	2400      	movs	r4, #0
 800a3c6:	e001      	b.n	800a3cc <__sprint_r.part.0+0x2c>
 800a3c8:	42a6      	cmp	r6, r4
 800a3ca:	d010      	beq.n	800a3ee <__sprint_r.part.0+0x4e>
 800a3cc:	4640      	mov	r0, r8
 800a3ce:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800a3d2:	463a      	mov	r2, r7
 800a3d4:	f000 ffc6 	bl	800b364 <_fputwc_r>
 800a3d8:	1c43      	adds	r3, r0, #1
 800a3da:	f104 0401 	add.w	r4, r4, #1
 800a3de:	d1f3      	bne.n	800a3c8 <__sprint_r.part.0+0x28>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	f8ca 3008 	str.w	r3, [sl, #8]
 800a3e6:	f8ca 3004 	str.w	r3, [sl, #4]
 800a3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ee:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a3f2:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 800a3f6:	f8ca 3008 	str.w	r3, [sl, #8]
 800a3fa:	f109 0908 	add.w	r9, r9, #8
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1db      	bne.n	800a3ba <__sprint_r.part.0+0x1a>
 800a402:	2000      	movs	r0, #0
 800a404:	e7ec      	b.n	800a3e0 <__sprint_r.part.0+0x40>
 800a406:	f7fd fbc5 	bl	8007b94 <__sfvwrite_r>
 800a40a:	2300      	movs	r3, #0
 800a40c:	f8ca 3008 	str.w	r3, [sl, #8]
 800a410:	f8ca 3004 	str.w	r3, [sl, #4]
 800a414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a418 <__sprint_r>:
 800a418:	6893      	ldr	r3, [r2, #8]
 800a41a:	b410      	push	{r4}
 800a41c:	b11b      	cbz	r3, 800a426 <__sprint_r+0xe>
 800a41e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a422:	f7ff bfbd 	b.w	800a3a0 <__sprint_r.part.0>
 800a426:	4618      	mov	r0, r3
 800a428:	6053      	str	r3, [r2, #4]
 800a42a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <_vfiprintf_r>:
 800a430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a434:	b0ab      	sub	sp, #172	; 0xac
 800a436:	461c      	mov	r4, r3
 800a438:	9100      	str	r1, [sp, #0]
 800a43a:	4693      	mov	fp, r2
 800a43c:	9304      	str	r3, [sp, #16]
 800a43e:	9001      	str	r0, [sp, #4]
 800a440:	b118      	cbz	r0, 800a44a <_vfiprintf_r+0x1a>
 800a442:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a444:	2b00      	cmp	r3, #0
 800a446:	f000 80e3 	beq.w	800a610 <_vfiprintf_r+0x1e0>
 800a44a:	9b00      	ldr	r3, [sp, #0]
 800a44c:	8999      	ldrh	r1, [r3, #12]
 800a44e:	b28a      	uxth	r2, r1
 800a450:	0490      	lsls	r0, r2, #18
 800a452:	d408      	bmi.n	800a466 <_vfiprintf_r+0x36>
 800a454:	4618      	mov	r0, r3
 800a456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a458:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 800a45c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a460:	8182      	strh	r2, [r0, #12]
 800a462:	6643      	str	r3, [r0, #100]	; 0x64
 800a464:	b292      	uxth	r2, r2
 800a466:	0711      	lsls	r1, r2, #28
 800a468:	f140 80b2 	bpl.w	800a5d0 <_vfiprintf_r+0x1a0>
 800a46c:	9b00      	ldr	r3, [sp, #0]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	2b00      	cmp	r3, #0
 800a472:	f000 80ad 	beq.w	800a5d0 <_vfiprintf_r+0x1a0>
 800a476:	f002 021a 	and.w	r2, r2, #26
 800a47a:	2a0a      	cmp	r2, #10
 800a47c:	f000 80b4 	beq.w	800a5e8 <_vfiprintf_r+0x1b8>
 800a480:	2300      	movs	r3, #0
 800a482:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800a486:	9309      	str	r3, [sp, #36]	; 0x24
 800a488:	930f      	str	r3, [sp, #60]	; 0x3c
 800a48a:	930e      	str	r3, [sp, #56]	; 0x38
 800a48c:	9302      	str	r3, [sp, #8]
 800a48e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a492:	4654      	mov	r4, sl
 800a494:	f89b 3000 	ldrb.w	r3, [fp]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f000 84a3 	beq.w	800ade4 <_vfiprintf_r+0x9b4>
 800a49e:	2b25      	cmp	r3, #37	; 0x25
 800a4a0:	f000 84a0 	beq.w	800ade4 <_vfiprintf_r+0x9b4>
 800a4a4:	465a      	mov	r2, fp
 800a4a6:	e001      	b.n	800a4ac <_vfiprintf_r+0x7c>
 800a4a8:	2b25      	cmp	r3, #37	; 0x25
 800a4aa:	d003      	beq.n	800a4b4 <_vfiprintf_r+0x84>
 800a4ac:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1f9      	bne.n	800a4a8 <_vfiprintf_r+0x78>
 800a4b4:	ebcb 0602 	rsb	r6, fp, r2
 800a4b8:	4615      	mov	r5, r2
 800a4ba:	b196      	cbz	r6, 800a4e2 <_vfiprintf_r+0xb2>
 800a4bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4c0:	f8c4 b000 	str.w	fp, [r4]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	4432      	add	r2, r6
 800a4c8:	2b07      	cmp	r3, #7
 800a4ca:	6066      	str	r6, [r4, #4]
 800a4cc:	920f      	str	r2, [sp, #60]	; 0x3c
 800a4ce:	930e      	str	r3, [sp, #56]	; 0x38
 800a4d0:	dd79      	ble.n	800a5c6 <_vfiprintf_r+0x196>
 800a4d2:	2a00      	cmp	r2, #0
 800a4d4:	f040 84af 	bne.w	800ae36 <_vfiprintf_r+0xa06>
 800a4d8:	9b02      	ldr	r3, [sp, #8]
 800a4da:	920e      	str	r2, [sp, #56]	; 0x38
 800a4dc:	4433      	add	r3, r6
 800a4de:	4654      	mov	r4, sl
 800a4e0:	9302      	str	r3, [sp, #8]
 800a4e2:	782b      	ldrb	r3, [r5, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f000 8360 	beq.w	800abaa <_vfiprintf_r+0x77a>
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	f04f 0300 	mov.w	r3, #0
 800a4f0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800a4f4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 800a4f8:	1c68      	adds	r0, r5, #1
 800a4fa:	786b      	ldrb	r3, [r5, #1]
 800a4fc:	4688      	mov	r8, r1
 800a4fe:	460d      	mov	r5, r1
 800a500:	4666      	mov	r6, ip
 800a502:	f100 0b01 	add.w	fp, r0, #1
 800a506:	f1a3 0220 	sub.w	r2, r3, #32
 800a50a:	2a58      	cmp	r2, #88	; 0x58
 800a50c:	f200 82ab 	bhi.w	800aa66 <_vfiprintf_r+0x636>
 800a510:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a514:	02a9029b 	.word	0x02a9029b
 800a518:	02a302a9 	.word	0x02a302a9
 800a51c:	02a902a9 	.word	0x02a902a9
 800a520:	02a902a9 	.word	0x02a902a9
 800a524:	02a902a9 	.word	0x02a902a9
 800a528:	02620255 	.word	0x02620255
 800a52c:	010d02a9 	.word	0x010d02a9
 800a530:	02a9026e 	.word	0x02a9026e
 800a534:	012f0129 	.word	0x012f0129
 800a538:	012f012f 	.word	0x012f012f
 800a53c:	012f012f 	.word	0x012f012f
 800a540:	012f012f 	.word	0x012f012f
 800a544:	012f012f 	.word	0x012f012f
 800a548:	02a902a9 	.word	0x02a902a9
 800a54c:	02a902a9 	.word	0x02a902a9
 800a550:	02a902a9 	.word	0x02a902a9
 800a554:	02a902a9 	.word	0x02a902a9
 800a558:	02a902a9 	.word	0x02a902a9
 800a55c:	02a9013d 	.word	0x02a9013d
 800a560:	02a902a9 	.word	0x02a902a9
 800a564:	02a902a9 	.word	0x02a902a9
 800a568:	02a902a9 	.word	0x02a902a9
 800a56c:	02a902a9 	.word	0x02a902a9
 800a570:	017402a9 	.word	0x017402a9
 800a574:	02a902a9 	.word	0x02a902a9
 800a578:	02a902a9 	.word	0x02a902a9
 800a57c:	018b02a9 	.word	0x018b02a9
 800a580:	02a902a9 	.word	0x02a902a9
 800a584:	02a901a3 	.word	0x02a901a3
 800a588:	02a902a9 	.word	0x02a902a9
 800a58c:	02a902a9 	.word	0x02a902a9
 800a590:	02a902a9 	.word	0x02a902a9
 800a594:	02a902a9 	.word	0x02a902a9
 800a598:	01c702a9 	.word	0x01c702a9
 800a59c:	02a901da 	.word	0x02a901da
 800a5a0:	02a902a9 	.word	0x02a902a9
 800a5a4:	01da0123 	.word	0x01da0123
 800a5a8:	02a902a9 	.word	0x02a902a9
 800a5ac:	02a9024c 	.word	0x02a9024c
 800a5b0:	0113028a 	.word	0x0113028a
 800a5b4:	020701f3 	.word	0x020701f3
 800a5b8:	020d02a9 	.word	0x020d02a9
 800a5bc:	008102a9 	.word	0x008102a9
 800a5c0:	02a902a9 	.word	0x02a902a9
 800a5c4:	0233      	.short	0x0233
 800a5c6:	3408      	adds	r4, #8
 800a5c8:	9b02      	ldr	r3, [sp, #8]
 800a5ca:	4433      	add	r3, r6
 800a5cc:	9302      	str	r3, [sp, #8]
 800a5ce:	e788      	b.n	800a4e2 <_vfiprintf_r+0xb2>
 800a5d0:	9801      	ldr	r0, [sp, #4]
 800a5d2:	9900      	ldr	r1, [sp, #0]
 800a5d4:	f7fb ff02 	bl	80063dc <__swsetup_r>
 800a5d8:	b9a8      	cbnz	r0, 800a606 <_vfiprintf_r+0x1d6>
 800a5da:	9b00      	ldr	r3, [sp, #0]
 800a5dc:	899a      	ldrh	r2, [r3, #12]
 800a5de:	f002 021a 	and.w	r2, r2, #26
 800a5e2:	2a0a      	cmp	r2, #10
 800a5e4:	f47f af4c 	bne.w	800a480 <_vfiprintf_r+0x50>
 800a5e8:	9b00      	ldr	r3, [sp, #0]
 800a5ea:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f6ff af46 	blt.w	800a480 <_vfiprintf_r+0x50>
 800a5f4:	9801      	ldr	r0, [sp, #4]
 800a5f6:	9900      	ldr	r1, [sp, #0]
 800a5f8:	465a      	mov	r2, fp
 800a5fa:	4623      	mov	r3, r4
 800a5fc:	f000 fd2c 	bl	800b058 <__sbprintf>
 800a600:	b02b      	add	sp, #172	; 0xac
 800a602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a60a:	b02b      	add	sp, #172	; 0xac
 800a60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a610:	f7fd f962 	bl	80078d8 <__sinit>
 800a614:	e719      	b.n	800a44a <_vfiprintf_r+0x1a>
 800a616:	f018 0f20 	tst.w	r8, #32
 800a61a:	9503      	str	r5, [sp, #12]
 800a61c:	46b4      	mov	ip, r6
 800a61e:	f000 810c 	beq.w	800a83a <_vfiprintf_r+0x40a>
 800a622:	9b04      	ldr	r3, [sp, #16]
 800a624:	3307      	adds	r3, #7
 800a626:	f023 0307 	bic.w	r3, r3, #7
 800a62a:	f103 0208 	add.w	r2, r3, #8
 800a62e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a632:	9204      	str	r2, [sp, #16]
 800a634:	2301      	movs	r3, #1
 800a636:	f04f 0200 	mov.w	r2, #0
 800a63a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 800a63e:	46e1      	mov	r9, ip
 800a640:	2500      	movs	r5, #0
 800a642:	f1bc 0f00 	cmp.w	ip, #0
 800a646:	bfa8      	it	ge
 800a648:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
 800a64c:	ea56 0207 	orrs.w	r2, r6, r7
 800a650:	f040 80c4 	bne.w	800a7dc <_vfiprintf_r+0x3ac>
 800a654:	f1bc 0f00 	cmp.w	ip, #0
 800a658:	f000 8381 	beq.w	800ad5e <_vfiprintf_r+0x92e>
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	f000 80c5 	beq.w	800a7ec <_vfiprintf_r+0x3bc>
 800a662:	2b02      	cmp	r3, #2
 800a664:	f000 8387 	beq.w	800ad76 <_vfiprintf_r+0x946>
 800a668:	4651      	mov	r1, sl
 800a66a:	08f2      	lsrs	r2, r6, #3
 800a66c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800a670:	08f8      	lsrs	r0, r7, #3
 800a672:	f006 0307 	and.w	r3, r6, #7
 800a676:	4607      	mov	r7, r0
 800a678:	4616      	mov	r6, r2
 800a67a:	3330      	adds	r3, #48	; 0x30
 800a67c:	ea56 0207 	orrs.w	r2, r6, r7
 800a680:	f801 3d01 	strb.w	r3, [r1, #-1]!
 800a684:	d1f1      	bne.n	800a66a <_vfiprintf_r+0x23a>
 800a686:	f018 0f01 	tst.w	r8, #1
 800a68a:	9107      	str	r1, [sp, #28]
 800a68c:	f040 83fc 	bne.w	800ae88 <_vfiprintf_r+0xa58>
 800a690:	ebc1 090a 	rsb	r9, r1, sl
 800a694:	45e1      	cmp	r9, ip
 800a696:	464e      	mov	r6, r9
 800a698:	bfb8      	it	lt
 800a69a:	4666      	movlt	r6, ip
 800a69c:	b105      	cbz	r5, 800a6a0 <_vfiprintf_r+0x270>
 800a69e:	3601      	adds	r6, #1
 800a6a0:	f018 0302 	ands.w	r3, r8, #2
 800a6a4:	9305      	str	r3, [sp, #20]
 800a6a6:	bf18      	it	ne
 800a6a8:	3602      	addne	r6, #2
 800a6aa:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 800a6ae:	9306      	str	r3, [sp, #24]
 800a6b0:	f040 81fa 	bne.w	800aaa8 <_vfiprintf_r+0x678>
 800a6b4:	9b03      	ldr	r3, [sp, #12]
 800a6b6:	1b9d      	subs	r5, r3, r6
 800a6b8:	2d00      	cmp	r5, #0
 800a6ba:	f340 81f5 	ble.w	800aaa8 <_vfiprintf_r+0x678>
 800a6be:	2d10      	cmp	r5, #16
 800a6c0:	f340 848c 	ble.w	800afdc <_vfiprintf_r+0xbac>
 800a6c4:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 800a6c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a6ca:	4fc6      	ldr	r7, [pc, #792]	; (800a9e4 <_vfiprintf_r+0x5b4>)
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	2310      	movs	r3, #16
 800a6d0:	4664      	mov	r4, ip
 800a6d2:	4671      	mov	r1, lr
 800a6d4:	4684      	mov	ip, r0
 800a6d6:	e007      	b.n	800a6e8 <_vfiprintf_r+0x2b8>
 800a6d8:	f101 0e02 	add.w	lr, r1, #2
 800a6dc:	f10c 0c08 	add.w	ip, ip, #8
 800a6e0:	4601      	mov	r1, r0
 800a6e2:	3d10      	subs	r5, #16
 800a6e4:	2d10      	cmp	r5, #16
 800a6e6:	dd13      	ble.n	800a710 <_vfiprintf_r+0x2e0>
 800a6e8:	1c48      	adds	r0, r1, #1
 800a6ea:	3210      	adds	r2, #16
 800a6ec:	2807      	cmp	r0, #7
 800a6ee:	920f      	str	r2, [sp, #60]	; 0x3c
 800a6f0:	f8cc 7000 	str.w	r7, [ip]
 800a6f4:	f8cc 3004 	str.w	r3, [ip, #4]
 800a6f8:	900e      	str	r0, [sp, #56]	; 0x38
 800a6fa:	dded      	ble.n	800a6d8 <_vfiprintf_r+0x2a8>
 800a6fc:	2a00      	cmp	r2, #0
 800a6fe:	f040 81c3 	bne.w	800aa88 <_vfiprintf_r+0x658>
 800a702:	3d10      	subs	r5, #16
 800a704:	2d10      	cmp	r5, #16
 800a706:	4611      	mov	r1, r2
 800a708:	f04f 0e01 	mov.w	lr, #1
 800a70c:	46d4      	mov	ip, sl
 800a70e:	dceb      	bgt.n	800a6e8 <_vfiprintf_r+0x2b8>
 800a710:	4663      	mov	r3, ip
 800a712:	4671      	mov	r1, lr
 800a714:	46a4      	mov	ip, r4
 800a716:	461c      	mov	r4, r3
 800a718:	442a      	add	r2, r5
 800a71a:	2907      	cmp	r1, #7
 800a71c:	920f      	str	r2, [sp, #60]	; 0x3c
 800a71e:	6027      	str	r7, [r4, #0]
 800a720:	6065      	str	r5, [r4, #4]
 800a722:	910e      	str	r1, [sp, #56]	; 0x38
 800a724:	f300 8346 	bgt.w	800adb4 <_vfiprintf_r+0x984>
 800a728:	3408      	adds	r4, #8
 800a72a:	1c48      	adds	r0, r1, #1
 800a72c:	e1bf      	b.n	800aaae <_vfiprintf_r+0x67e>
 800a72e:	4658      	mov	r0, fp
 800a730:	f048 0804 	orr.w	r8, r8, #4
 800a734:	f89b 3000 	ldrb.w	r3, [fp]
 800a738:	e6e3      	b.n	800a502 <_vfiprintf_r+0xd2>
 800a73a:	f018 0320 	ands.w	r3, r8, #32
 800a73e:	9503      	str	r5, [sp, #12]
 800a740:	46b4      	mov	ip, r6
 800a742:	d062      	beq.n	800a80a <_vfiprintf_r+0x3da>
 800a744:	9b04      	ldr	r3, [sp, #16]
 800a746:	3307      	adds	r3, #7
 800a748:	f023 0307 	bic.w	r3, r3, #7
 800a74c:	f103 0208 	add.w	r2, r3, #8
 800a750:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a754:	9204      	str	r2, [sp, #16]
 800a756:	2300      	movs	r3, #0
 800a758:	e76d      	b.n	800a636 <_vfiprintf_r+0x206>
 800a75a:	f048 0840 	orr.w	r8, r8, #64	; 0x40
 800a75e:	f89b 3000 	ldrb.w	r3, [fp]
 800a762:	4658      	mov	r0, fp
 800a764:	e6cd      	b.n	800a502 <_vfiprintf_r+0xd2>
 800a766:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 800a76a:	f89b 3000 	ldrb.w	r3, [fp]
 800a76e:	4658      	mov	r0, fp
 800a770:	e6c7      	b.n	800a502 <_vfiprintf_r+0xd2>
 800a772:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a776:	2500      	movs	r5, #0
 800a778:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800a77c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800a780:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 800a784:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a788:	2a09      	cmp	r2, #9
 800a78a:	d9f5      	bls.n	800a778 <_vfiprintf_r+0x348>
 800a78c:	e6bb      	b.n	800a506 <_vfiprintf_r+0xd6>
 800a78e:	f048 0810 	orr.w	r8, r8, #16
 800a792:	f018 0f20 	tst.w	r8, #32
 800a796:	9503      	str	r5, [sp, #12]
 800a798:	46b4      	mov	ip, r6
 800a79a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 800a79e:	f000 809b 	beq.w	800a8d8 <_vfiprintf_r+0x4a8>
 800a7a2:	9904      	ldr	r1, [sp, #16]
 800a7a4:	3107      	adds	r1, #7
 800a7a6:	f021 0107 	bic.w	r1, r1, #7
 800a7aa:	e9d1 2300 	ldrd	r2, r3, [r1]
 800a7ae:	3108      	adds	r1, #8
 800a7b0:	9104      	str	r1, [sp, #16]
 800a7b2:	4616      	mov	r6, r2
 800a7b4:	461f      	mov	r7, r3
 800a7b6:	2a00      	cmp	r2, #0
 800a7b8:	f173 0300 	sbcs.w	r3, r3, #0
 800a7bc:	f2c0 83a6 	blt.w	800af0c <_vfiprintf_r+0xadc>
 800a7c0:	f1bc 0f00 	cmp.w	ip, #0
 800a7c4:	bfa8      	it	ge
 800a7c6:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
 800a7ca:	ea56 0207 	orrs.w	r2, r6, r7
 800a7ce:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 800a7d2:	46e1      	mov	r9, ip
 800a7d4:	f04f 0301 	mov.w	r3, #1
 800a7d8:	f43f af3c 	beq.w	800a654 <_vfiprintf_r+0x224>
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	f47f af40 	bne.w	800a662 <_vfiprintf_r+0x232>
 800a7e2:	2f00      	cmp	r7, #0
 800a7e4:	bf08      	it	eq
 800a7e6:	2e0a      	cmpeq	r6, #10
 800a7e8:	f080 8334 	bcs.w	800ae54 <_vfiprintf_r+0xa24>
 800a7ec:	ab2a      	add	r3, sp, #168	; 0xa8
 800a7ee:	3630      	adds	r6, #48	; 0x30
 800a7f0:	f803 6d41 	strb.w	r6, [r3, #-65]!
 800a7f4:	ebc3 090a 	rsb	r9, r3, sl
 800a7f8:	9307      	str	r3, [sp, #28]
 800a7fa:	e74b      	b.n	800a694 <_vfiprintf_r+0x264>
 800a7fc:	f048 0810 	orr.w	r8, r8, #16
 800a800:	f018 0320 	ands.w	r3, r8, #32
 800a804:	9503      	str	r5, [sp, #12]
 800a806:	46b4      	mov	ip, r6
 800a808:	d19c      	bne.n	800a744 <_vfiprintf_r+0x314>
 800a80a:	f018 0210 	ands.w	r2, r8, #16
 800a80e:	f040 82f7 	bne.w	800ae00 <_vfiprintf_r+0x9d0>
 800a812:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 800a816:	f000 82f3 	beq.w	800ae00 <_vfiprintf_r+0x9d0>
 800a81a:	9904      	ldr	r1, [sp, #16]
 800a81c:	4613      	mov	r3, r2
 800a81e:	460a      	mov	r2, r1
 800a820:	3204      	adds	r2, #4
 800a822:	880e      	ldrh	r6, [r1, #0]
 800a824:	9204      	str	r2, [sp, #16]
 800a826:	2700      	movs	r7, #0
 800a828:	e705      	b.n	800a636 <_vfiprintf_r+0x206>
 800a82a:	f048 0810 	orr.w	r8, r8, #16
 800a82e:	f018 0f20 	tst.w	r8, #32
 800a832:	9503      	str	r5, [sp, #12]
 800a834:	46b4      	mov	ip, r6
 800a836:	f47f aef4 	bne.w	800a622 <_vfiprintf_r+0x1f2>
 800a83a:	9a04      	ldr	r2, [sp, #16]
 800a83c:	f018 0f10 	tst.w	r8, #16
 800a840:	4613      	mov	r3, r2
 800a842:	f040 82e4 	bne.w	800ae0e <_vfiprintf_r+0x9de>
 800a846:	f018 0f40 	tst.w	r8, #64	; 0x40
 800a84a:	f000 82e0 	beq.w	800ae0e <_vfiprintf_r+0x9de>
 800a84e:	8816      	ldrh	r6, [r2, #0]
 800a850:	3204      	adds	r2, #4
 800a852:	2700      	movs	r7, #0
 800a854:	2301      	movs	r3, #1
 800a856:	9204      	str	r2, [sp, #16]
 800a858:	e6ed      	b.n	800a636 <_vfiprintf_r+0x206>
 800a85a:	4a63      	ldr	r2, [pc, #396]	; (800a9e8 <_vfiprintf_r+0x5b8>)
 800a85c:	9503      	str	r5, [sp, #12]
 800a85e:	f018 0f20 	tst.w	r8, #32
 800a862:	46b4      	mov	ip, r6
 800a864:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 800a868:	9209      	str	r2, [sp, #36]	; 0x24
 800a86a:	f000 8090 	beq.w	800a98e <_vfiprintf_r+0x55e>
 800a86e:	9a04      	ldr	r2, [sp, #16]
 800a870:	3207      	adds	r2, #7
 800a872:	f022 0207 	bic.w	r2, r2, #7
 800a876:	e9d2 6700 	ldrd	r6, r7, [r2]
 800a87a:	f102 0108 	add.w	r1, r2, #8
 800a87e:	9104      	str	r1, [sp, #16]
 800a880:	f018 0f01 	tst.w	r8, #1
 800a884:	f000 8290 	beq.w	800ada8 <_vfiprintf_r+0x978>
 800a888:	ea56 0207 	orrs.w	r2, r6, r7
 800a88c:	f000 828c 	beq.w	800ada8 <_vfiprintf_r+0x978>
 800a890:	2230      	movs	r2, #48	; 0x30
 800a892:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 800a896:	f048 0802 	orr.w	r8, r8, #2
 800a89a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800a89e:	2302      	movs	r3, #2
 800a8a0:	e6c9      	b.n	800a636 <_vfiprintf_r+0x206>
 800a8a2:	9a04      	ldr	r2, [sp, #16]
 800a8a4:	9503      	str	r5, [sp, #12]
 800a8a6:	6813      	ldr	r3, [r2, #0]
 800a8a8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800a8ac:	4613      	mov	r3, r2
 800a8ae:	3304      	adds	r3, #4
 800a8b0:	2601      	movs	r6, #1
 800a8b2:	f04f 0100 	mov.w	r1, #0
 800a8b6:	9304      	str	r3, [sp, #16]
 800a8b8:	ab10      	add	r3, sp, #64	; 0x40
 800a8ba:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 800a8be:	46b1      	mov	r9, r6
 800a8c0:	9307      	str	r3, [sp, #28]
 800a8c2:	f04f 0c00 	mov.w	ip, #0
 800a8c6:	e6eb      	b.n	800a6a0 <_vfiprintf_r+0x270>
 800a8c8:	f018 0f20 	tst.w	r8, #32
 800a8cc:	9503      	str	r5, [sp, #12]
 800a8ce:	46b4      	mov	ip, r6
 800a8d0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 800a8d4:	f47f af65 	bne.w	800a7a2 <_vfiprintf_r+0x372>
 800a8d8:	f018 0f10 	tst.w	r8, #16
 800a8dc:	f040 82a2 	bne.w	800ae24 <_vfiprintf_r+0x9f4>
 800a8e0:	f018 0f40 	tst.w	r8, #64	; 0x40
 800a8e4:	f000 829e 	beq.w	800ae24 <_vfiprintf_r+0x9f4>
 800a8e8:	9904      	ldr	r1, [sp, #16]
 800a8ea:	f9b1 6000 	ldrsh.w	r6, [r1]
 800a8ee:	3104      	adds	r1, #4
 800a8f0:	17f7      	asrs	r7, r6, #31
 800a8f2:	4632      	mov	r2, r6
 800a8f4:	463b      	mov	r3, r7
 800a8f6:	9104      	str	r1, [sp, #16]
 800a8f8:	e75d      	b.n	800a7b6 <_vfiprintf_r+0x386>
 800a8fa:	9904      	ldr	r1, [sp, #16]
 800a8fc:	9503      	str	r5, [sp, #12]
 800a8fe:	2330      	movs	r3, #48	; 0x30
 800a900:	460a      	mov	r2, r1
 800a902:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 800a906:	2378      	movs	r3, #120	; 0x78
 800a908:	3204      	adds	r2, #4
 800a90a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 800a90e:	4b37      	ldr	r3, [pc, #220]	; (800a9ec <_vfiprintf_r+0x5bc>)
 800a910:	9309      	str	r3, [sp, #36]	; 0x24
 800a912:	46b4      	mov	ip, r6
 800a914:	f048 0802 	orr.w	r8, r8, #2
 800a918:	680e      	ldr	r6, [r1, #0]
 800a91a:	9204      	str	r2, [sp, #16]
 800a91c:	2700      	movs	r7, #0
 800a91e:	2302      	movs	r3, #2
 800a920:	e689      	b.n	800a636 <_vfiprintf_r+0x206>
 800a922:	f048 0820 	orr.w	r8, r8, #32
 800a926:	f89b 3000 	ldrb.w	r3, [fp]
 800a92a:	4658      	mov	r0, fp
 800a92c:	e5e9      	b.n	800a502 <_vfiprintf_r+0xd2>
 800a92e:	9a04      	ldr	r2, [sp, #16]
 800a930:	9503      	str	r5, [sp, #12]
 800a932:	6813      	ldr	r3, [r2, #0]
 800a934:	9307      	str	r3, [sp, #28]
 800a936:	f04f 0100 	mov.w	r1, #0
 800a93a:	46b4      	mov	ip, r6
 800a93c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 800a940:	1d16      	adds	r6, r2, #4
 800a942:	2b00      	cmp	r3, #0
 800a944:	f000 8350 	beq.w	800afe8 <_vfiprintf_r+0xbb8>
 800a948:	f1bc 0f00 	cmp.w	ip, #0
 800a94c:	f2c0 832a 	blt.w	800afa4 <_vfiprintf_r+0xb74>
 800a950:	9d07      	ldr	r5, [sp, #28]
 800a952:	f8cd c010 	str.w	ip, [sp, #16]
 800a956:	4662      	mov	r2, ip
 800a958:	4628      	mov	r0, r5
 800a95a:	2100      	movs	r1, #0
 800a95c:	f7fd fe3a 	bl	80085d4 <memchr>
 800a960:	f8dd c010 	ldr.w	ip, [sp, #16]
 800a964:	2800      	cmp	r0, #0
 800a966:	f000 8350 	beq.w	800b00a <_vfiprintf_r+0xbda>
 800a96a:	ebc5 0900 	rsb	r9, r5, r0
 800a96e:	9604      	str	r6, [sp, #16]
 800a970:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 800a974:	f04f 0c00 	mov.w	ip, #0
 800a978:	e68c      	b.n	800a694 <_vfiprintf_r+0x264>
 800a97a:	4a1c      	ldr	r2, [pc, #112]	; (800a9ec <_vfiprintf_r+0x5bc>)
 800a97c:	9503      	str	r5, [sp, #12]
 800a97e:	f018 0f20 	tst.w	r8, #32
 800a982:	46b4      	mov	ip, r6
 800a984:	9209      	str	r2, [sp, #36]	; 0x24
 800a986:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 800a98a:	f47f af70 	bne.w	800a86e <_vfiprintf_r+0x43e>
 800a98e:	9904      	ldr	r1, [sp, #16]
 800a990:	f018 0f10 	tst.w	r8, #16
 800a994:	460a      	mov	r2, r1
 800a996:	f040 8240 	bne.w	800ae1a <_vfiprintf_r+0x9ea>
 800a99a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800a99e:	f000 823c 	beq.w	800ae1a <_vfiprintf_r+0x9ea>
 800a9a2:	3204      	adds	r2, #4
 800a9a4:	880e      	ldrh	r6, [r1, #0]
 800a9a6:	9204      	str	r2, [sp, #16]
 800a9a8:	2700      	movs	r7, #0
 800a9aa:	e769      	b.n	800a880 <_vfiprintf_r+0x450>
 800a9ac:	f89b 3000 	ldrb.w	r3, [fp]
 800a9b0:	2b6c      	cmp	r3, #108	; 0x6c
 800a9b2:	f000 82ea 	beq.w	800af8a <_vfiprintf_r+0xb5a>
 800a9b6:	f048 0810 	orr.w	r8, r8, #16
 800a9ba:	4658      	mov	r0, fp
 800a9bc:	e5a1      	b.n	800a502 <_vfiprintf_r+0xd2>
 800a9be:	9a04      	ldr	r2, [sp, #16]
 800a9c0:	6815      	ldr	r5, [r2, #0]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	2d00      	cmp	r5, #0
 800a9c6:	f103 0304 	add.w	r3, r3, #4
 800a9ca:	f2c0 82e6 	blt.w	800af9a <_vfiprintf_r+0xb6a>
 800a9ce:	9304      	str	r3, [sp, #16]
 800a9d0:	f89b 3000 	ldrb.w	r3, [fp]
 800a9d4:	4658      	mov	r0, fp
 800a9d6:	e594      	b.n	800a502 <_vfiprintf_r+0xd2>
 800a9d8:	f89b 3000 	ldrb.w	r3, [fp]
 800a9dc:	4658      	mov	r0, fp
 800a9de:	212b      	movs	r1, #43	; 0x2b
 800a9e0:	e58f      	b.n	800a502 <_vfiprintf_r+0xd2>
 800a9e2:	bf00      	nop
 800a9e4:	0800caf0 	.word	0x0800caf0
 800a9e8:	0800c924 	.word	0x0800c924
 800a9ec:	0800c938 	.word	0x0800c938
 800a9f0:	f89b 3000 	ldrb.w	r3, [fp]
 800a9f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a9f6:	f10b 0001 	add.w	r0, fp, #1
 800a9fa:	f000 830f 	beq.w	800b01c <_vfiprintf_r+0xbec>
 800a9fe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800aa02:	2a09      	cmp	r2, #9
 800aa04:	4683      	mov	fp, r0
 800aa06:	f04f 0600 	mov.w	r6, #0
 800aa0a:	f63f ad7c 	bhi.w	800a506 <_vfiprintf_r+0xd6>
 800aa0e:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800aa12:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800aa16:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 800aa1a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800aa1e:	2a09      	cmp	r2, #9
 800aa20:	d9f5      	bls.n	800aa0e <_vfiprintf_r+0x5de>
 800aa22:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 800aa26:	e56e      	b.n	800a506 <_vfiprintf_r+0xd6>
 800aa28:	f018 0f20 	tst.w	r8, #32
 800aa2c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 800aa30:	f000 8283 	beq.w	800af3a <_vfiprintf_r+0xb0a>
 800aa34:	9a04      	ldr	r2, [sp, #16]
 800aa36:	9902      	ldr	r1, [sp, #8]
 800aa38:	6813      	ldr	r3, [r2, #0]
 800aa3a:	17cf      	asrs	r7, r1, #31
 800aa3c:	4608      	mov	r0, r1
 800aa3e:	3204      	adds	r2, #4
 800aa40:	4639      	mov	r1, r7
 800aa42:	9204      	str	r2, [sp, #16]
 800aa44:	e9c3 0100 	strd	r0, r1, [r3]
 800aa48:	e524      	b.n	800a494 <_vfiprintf_r+0x64>
 800aa4a:	4658      	mov	r0, fp
 800aa4c:	f89b 3000 	ldrb.w	r3, [fp]
 800aa50:	2900      	cmp	r1, #0
 800aa52:	f47f ad56 	bne.w	800a502 <_vfiprintf_r+0xd2>
 800aa56:	2120      	movs	r1, #32
 800aa58:	e553      	b.n	800a502 <_vfiprintf_r+0xd2>
 800aa5a:	f048 0801 	orr.w	r8, r8, #1
 800aa5e:	4658      	mov	r0, fp
 800aa60:	f89b 3000 	ldrb.w	r3, [fp]
 800aa64:	e54d      	b.n	800a502 <_vfiprintf_r+0xd2>
 800aa66:	9503      	str	r5, [sp, #12]
 800aa68:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f000 809c 	beq.w	800abaa <_vfiprintf_r+0x77a>
 800aa72:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800aa76:	f04f 0300 	mov.w	r3, #0
 800aa7a:	2601      	movs	r6, #1
 800aa7c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 800aa80:	ab10      	add	r3, sp, #64	; 0x40
 800aa82:	46b1      	mov	r9, r6
 800aa84:	9307      	str	r3, [sp, #28]
 800aa86:	e71c      	b.n	800a8c2 <_vfiprintf_r+0x492>
 800aa88:	9801      	ldr	r0, [sp, #4]
 800aa8a:	9900      	ldr	r1, [sp, #0]
 800aa8c:	9308      	str	r3, [sp, #32]
 800aa8e:	aa0d      	add	r2, sp, #52	; 0x34
 800aa90:	f7ff fc86 	bl	800a3a0 <__sprint_r.part.0>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	f040 808f 	bne.w	800abb8 <_vfiprintf_r+0x788>
 800aa9a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800aa9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aa9e:	9b08      	ldr	r3, [sp, #32]
 800aaa0:	f101 0e01 	add.w	lr, r1, #1
 800aaa4:	46d4      	mov	ip, sl
 800aaa6:	e61c      	b.n	800a6e2 <_vfiprintf_r+0x2b2>
 800aaa8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800aaaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aaac:	1c48      	adds	r0, r1, #1
 800aaae:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800aab2:	b16b      	cbz	r3, 800aad0 <_vfiprintf_r+0x6a0>
 800aab4:	3201      	adds	r2, #1
 800aab6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800aaba:	2101      	movs	r1, #1
 800aabc:	2807      	cmp	r0, #7
 800aabe:	920f      	str	r2, [sp, #60]	; 0x3c
 800aac0:	900e      	str	r0, [sp, #56]	; 0x38
 800aac2:	6023      	str	r3, [r4, #0]
 800aac4:	6061      	str	r1, [r4, #4]
 800aac6:	f300 8134 	bgt.w	800ad32 <_vfiprintf_r+0x902>
 800aaca:	4601      	mov	r1, r0
 800aacc:	3408      	adds	r4, #8
 800aace:	3001      	adds	r0, #1
 800aad0:	9b05      	ldr	r3, [sp, #20]
 800aad2:	b163      	cbz	r3, 800aaee <_vfiprintf_r+0x6be>
 800aad4:	3202      	adds	r2, #2
 800aad6:	a90c      	add	r1, sp, #48	; 0x30
 800aad8:	2302      	movs	r3, #2
 800aada:	2807      	cmp	r0, #7
 800aadc:	920f      	str	r2, [sp, #60]	; 0x3c
 800aade:	900e      	str	r0, [sp, #56]	; 0x38
 800aae0:	e884 000a 	stmia.w	r4, {r1, r3}
 800aae4:	f300 8134 	bgt.w	800ad50 <_vfiprintf_r+0x920>
 800aae8:	4601      	mov	r1, r0
 800aaea:	3408      	adds	r4, #8
 800aaec:	3001      	adds	r0, #1
 800aaee:	9b06      	ldr	r3, [sp, #24]
 800aaf0:	2b80      	cmp	r3, #128	; 0x80
 800aaf2:	f000 80d4 	beq.w	800ac9e <_vfiprintf_r+0x86e>
 800aaf6:	ebc9 070c 	rsb	r7, r9, ip
 800aafa:	2f00      	cmp	r7, #0
 800aafc:	dd2b      	ble.n	800ab56 <_vfiprintf_r+0x726>
 800aafe:	2f10      	cmp	r7, #16
 800ab00:	4daa      	ldr	r5, [pc, #680]	; (800adac <_vfiprintf_r+0x97c>)
 800ab02:	dd1f      	ble.n	800ab44 <_vfiprintf_r+0x714>
 800ab04:	46a6      	mov	lr, r4
 800ab06:	2310      	movs	r3, #16
 800ab08:	9c01      	ldr	r4, [sp, #4]
 800ab0a:	e007      	b.n	800ab1c <_vfiprintf_r+0x6ec>
 800ab0c:	f101 0c02 	add.w	ip, r1, #2
 800ab10:	f10e 0e08 	add.w	lr, lr, #8
 800ab14:	4601      	mov	r1, r0
 800ab16:	3f10      	subs	r7, #16
 800ab18:	2f10      	cmp	r7, #16
 800ab1a:	dd11      	ble.n	800ab40 <_vfiprintf_r+0x710>
 800ab1c:	1c48      	adds	r0, r1, #1
 800ab1e:	3210      	adds	r2, #16
 800ab20:	2807      	cmp	r0, #7
 800ab22:	920f      	str	r2, [sp, #60]	; 0x3c
 800ab24:	f8ce 5000 	str.w	r5, [lr]
 800ab28:	f8ce 3004 	str.w	r3, [lr, #4]
 800ab2c:	900e      	str	r0, [sp, #56]	; 0x38
 800ab2e:	dded      	ble.n	800ab0c <_vfiprintf_r+0x6dc>
 800ab30:	bb6a      	cbnz	r2, 800ab8e <_vfiprintf_r+0x75e>
 800ab32:	3f10      	subs	r7, #16
 800ab34:	2f10      	cmp	r7, #16
 800ab36:	f04f 0c01 	mov.w	ip, #1
 800ab3a:	4611      	mov	r1, r2
 800ab3c:	46d6      	mov	lr, sl
 800ab3e:	dced      	bgt.n	800ab1c <_vfiprintf_r+0x6ec>
 800ab40:	4674      	mov	r4, lr
 800ab42:	4660      	mov	r0, ip
 800ab44:	443a      	add	r2, r7
 800ab46:	2807      	cmp	r0, #7
 800ab48:	920f      	str	r2, [sp, #60]	; 0x3c
 800ab4a:	e884 00a0 	stmia.w	r4, {r5, r7}
 800ab4e:	900e      	str	r0, [sp, #56]	; 0x38
 800ab50:	dc3b      	bgt.n	800abca <_vfiprintf_r+0x79a>
 800ab52:	3408      	adds	r4, #8
 800ab54:	3001      	adds	r0, #1
 800ab56:	eb02 0309 	add.w	r3, r2, r9
 800ab5a:	9a07      	ldr	r2, [sp, #28]
 800ab5c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab5e:	2807      	cmp	r0, #7
 800ab60:	e884 0204 	stmia.w	r4, {r2, r9}
 800ab64:	900e      	str	r0, [sp, #56]	; 0x38
 800ab66:	dd3d      	ble.n	800abe4 <_vfiprintf_r+0x7b4>
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f040 813e 	bne.w	800adea <_vfiprintf_r+0x9ba>
 800ab6e:	f018 0f04 	tst.w	r8, #4
 800ab72:	930e      	str	r3, [sp, #56]	; 0x38
 800ab74:	f040 812f 	bne.w	800add6 <_vfiprintf_r+0x9a6>
 800ab78:	9b02      	ldr	r3, [sp, #8]
 800ab7a:	9a03      	ldr	r2, [sp, #12]
 800ab7c:	4296      	cmp	r6, r2
 800ab7e:	bfac      	ite	ge
 800ab80:	199b      	addge	r3, r3, r6
 800ab82:	189b      	addlt	r3, r3, r2
 800ab84:	9302      	str	r3, [sp, #8]
 800ab86:	2300      	movs	r3, #0
 800ab88:	930e      	str	r3, [sp, #56]	; 0x38
 800ab8a:	4654      	mov	r4, sl
 800ab8c:	e482      	b.n	800a494 <_vfiprintf_r+0x64>
 800ab8e:	4620      	mov	r0, r4
 800ab90:	9900      	ldr	r1, [sp, #0]
 800ab92:	9305      	str	r3, [sp, #20]
 800ab94:	aa0d      	add	r2, sp, #52	; 0x34
 800ab96:	f7ff fc03 	bl	800a3a0 <__sprint_r.part.0>
 800ab9a:	b968      	cbnz	r0, 800abb8 <_vfiprintf_r+0x788>
 800ab9c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ab9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aba0:	9b05      	ldr	r3, [sp, #20]
 800aba2:	f101 0c01 	add.w	ip, r1, #1
 800aba6:	46d6      	mov	lr, sl
 800aba8:	e7b5      	b.n	800ab16 <_vfiprintf_r+0x6e6>
 800abaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abac:	b123      	cbz	r3, 800abb8 <_vfiprintf_r+0x788>
 800abae:	9801      	ldr	r0, [sp, #4]
 800abb0:	9900      	ldr	r1, [sp, #0]
 800abb2:	aa0d      	add	r2, sp, #52	; 0x34
 800abb4:	f7ff fbf4 	bl	800a3a0 <__sprint_r.part.0>
 800abb8:	9b00      	ldr	r3, [sp, #0]
 800abba:	899b      	ldrh	r3, [r3, #12]
 800abbc:	065b      	lsls	r3, r3, #25
 800abbe:	f53f ad22 	bmi.w	800a606 <_vfiprintf_r+0x1d6>
 800abc2:	9802      	ldr	r0, [sp, #8]
 800abc4:	b02b      	add	sp, #172	; 0xac
 800abc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abca:	2a00      	cmp	r2, #0
 800abcc:	f040 8191 	bne.w	800aef2 <_vfiprintf_r+0xac2>
 800abd0:	2201      	movs	r2, #1
 800abd2:	9907      	ldr	r1, [sp, #28]
 800abd4:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 800abd8:	464b      	mov	r3, r9
 800abda:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800abde:	911a      	str	r1, [sp, #104]	; 0x68
 800abe0:	920e      	str	r2, [sp, #56]	; 0x38
 800abe2:	4654      	mov	r4, sl
 800abe4:	f104 0208 	add.w	r2, r4, #8
 800abe8:	f018 0f04 	tst.w	r8, #4
 800abec:	d039      	beq.n	800ac62 <_vfiprintf_r+0x832>
 800abee:	9903      	ldr	r1, [sp, #12]
 800abf0:	1b8d      	subs	r5, r1, r6
 800abf2:	2d00      	cmp	r5, #0
 800abf4:	dd35      	ble.n	800ac62 <_vfiprintf_r+0x832>
 800abf6:	2d10      	cmp	r5, #16
 800abf8:	f340 8202 	ble.w	800b000 <_vfiprintf_r+0xbd0>
 800abfc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800abfe:	4f6c      	ldr	r7, [pc, #432]	; (800adb0 <_vfiprintf_r+0x980>)
 800ac00:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ac04:	f8dd 9000 	ldr.w	r9, [sp]
 800ac08:	2410      	movs	r4, #16
 800ac0a:	e006      	b.n	800ac1a <_vfiprintf_r+0x7ea>
 800ac0c:	f100 0e02 	add.w	lr, r0, #2
 800ac10:	3208      	adds	r2, #8
 800ac12:	4608      	mov	r0, r1
 800ac14:	3d10      	subs	r5, #16
 800ac16:	2d10      	cmp	r5, #16
 800ac18:	dd10      	ble.n	800ac3c <_vfiprintf_r+0x80c>
 800ac1a:	1c41      	adds	r1, r0, #1
 800ac1c:	3310      	adds	r3, #16
 800ac1e:	2907      	cmp	r1, #7
 800ac20:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac22:	6017      	str	r7, [r2, #0]
 800ac24:	6054      	str	r4, [r2, #4]
 800ac26:	910e      	str	r1, [sp, #56]	; 0x38
 800ac28:	ddf0      	ble.n	800ac0c <_vfiprintf_r+0x7dc>
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d12a      	bne.n	800ac84 <_vfiprintf_r+0x854>
 800ac2e:	3d10      	subs	r5, #16
 800ac30:	2d10      	cmp	r5, #16
 800ac32:	f04f 0e01 	mov.w	lr, #1
 800ac36:	4618      	mov	r0, r3
 800ac38:	4652      	mov	r2, sl
 800ac3a:	dcee      	bgt.n	800ac1a <_vfiprintf_r+0x7ea>
 800ac3c:	442b      	add	r3, r5
 800ac3e:	f1be 0f07 	cmp.w	lr, #7
 800ac42:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac44:	6017      	str	r7, [r2, #0]
 800ac46:	6055      	str	r5, [r2, #4]
 800ac48:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 800ac4c:	dd09      	ble.n	800ac62 <_vfiprintf_r+0x832>
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d092      	beq.n	800ab78 <_vfiprintf_r+0x748>
 800ac52:	9801      	ldr	r0, [sp, #4]
 800ac54:	9900      	ldr	r1, [sp, #0]
 800ac56:	aa0d      	add	r2, sp, #52	; 0x34
 800ac58:	f7ff fba2 	bl	800a3a0 <__sprint_r.part.0>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	d1ab      	bne.n	800abb8 <_vfiprintf_r+0x788>
 800ac60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac62:	9a02      	ldr	r2, [sp, #8]
 800ac64:	9903      	ldr	r1, [sp, #12]
 800ac66:	428e      	cmp	r6, r1
 800ac68:	bfac      	ite	ge
 800ac6a:	1992      	addge	r2, r2, r6
 800ac6c:	1852      	addlt	r2, r2, r1
 800ac6e:	9202      	str	r2, [sp, #8]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d088      	beq.n	800ab86 <_vfiprintf_r+0x756>
 800ac74:	9801      	ldr	r0, [sp, #4]
 800ac76:	9900      	ldr	r1, [sp, #0]
 800ac78:	aa0d      	add	r2, sp, #52	; 0x34
 800ac7a:	f7ff fb91 	bl	800a3a0 <__sprint_r.part.0>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d081      	beq.n	800ab86 <_vfiprintf_r+0x756>
 800ac82:	e799      	b.n	800abb8 <_vfiprintf_r+0x788>
 800ac84:	4640      	mov	r0, r8
 800ac86:	4649      	mov	r1, r9
 800ac88:	aa0d      	add	r2, sp, #52	; 0x34
 800ac8a:	f7ff fb89 	bl	800a3a0 <__sprint_r.part.0>
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	d192      	bne.n	800abb8 <_vfiprintf_r+0x788>
 800ac92:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ac94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac96:	f100 0e01 	add.w	lr, r0, #1
 800ac9a:	4652      	mov	r2, sl
 800ac9c:	e7ba      	b.n	800ac14 <_vfiprintf_r+0x7e4>
 800ac9e:	9b03      	ldr	r3, [sp, #12]
 800aca0:	1b9f      	subs	r7, r3, r6
 800aca2:	2f00      	cmp	r7, #0
 800aca4:	f77f af27 	ble.w	800aaf6 <_vfiprintf_r+0x6c6>
 800aca8:	2f10      	cmp	r7, #16
 800acaa:	4d40      	ldr	r5, [pc, #256]	; (800adac <_vfiprintf_r+0x97c>)
 800acac:	f340 81b4 	ble.w	800b018 <_vfiprintf_r+0xbe8>
 800acb0:	4620      	mov	r0, r4
 800acb2:	2310      	movs	r3, #16
 800acb4:	4664      	mov	r4, ip
 800acb6:	4684      	mov	ip, r0
 800acb8:	e007      	b.n	800acca <_vfiprintf_r+0x89a>
 800acba:	f101 0e02 	add.w	lr, r1, #2
 800acbe:	f10c 0c08 	add.w	ip, ip, #8
 800acc2:	4601      	mov	r1, r0
 800acc4:	3f10      	subs	r7, #16
 800acc6:	2f10      	cmp	r7, #16
 800acc8:	dd11      	ble.n	800acee <_vfiprintf_r+0x8be>
 800acca:	1c48      	adds	r0, r1, #1
 800accc:	3210      	adds	r2, #16
 800acce:	2807      	cmp	r0, #7
 800acd0:	920f      	str	r2, [sp, #60]	; 0x3c
 800acd2:	f8cc 5000 	str.w	r5, [ip]
 800acd6:	f8cc 3004 	str.w	r3, [ip, #4]
 800acda:	900e      	str	r0, [sp, #56]	; 0x38
 800acdc:	dded      	ble.n	800acba <_vfiprintf_r+0x88a>
 800acde:	b9c2      	cbnz	r2, 800ad12 <_vfiprintf_r+0x8e2>
 800ace0:	3f10      	subs	r7, #16
 800ace2:	2f10      	cmp	r7, #16
 800ace4:	f04f 0e01 	mov.w	lr, #1
 800ace8:	4611      	mov	r1, r2
 800acea:	46d4      	mov	ip, sl
 800acec:	dced      	bgt.n	800acca <_vfiprintf_r+0x89a>
 800acee:	4663      	mov	r3, ip
 800acf0:	46a4      	mov	ip, r4
 800acf2:	461c      	mov	r4, r3
 800acf4:	443a      	add	r2, r7
 800acf6:	f1be 0f07 	cmp.w	lr, #7
 800acfa:	920f      	str	r2, [sp, #60]	; 0x3c
 800acfc:	e884 00a0 	stmia.w	r4, {r5, r7}
 800ad00:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 800ad04:	f300 80ef 	bgt.w	800aee6 <_vfiprintf_r+0xab6>
 800ad08:	3408      	adds	r4, #8
 800ad0a:	f10e 0001 	add.w	r0, lr, #1
 800ad0e:	4671      	mov	r1, lr
 800ad10:	e6f1      	b.n	800aaf6 <_vfiprintf_r+0x6c6>
 800ad12:	9801      	ldr	r0, [sp, #4]
 800ad14:	9900      	ldr	r1, [sp, #0]
 800ad16:	9305      	str	r3, [sp, #20]
 800ad18:	aa0d      	add	r2, sp, #52	; 0x34
 800ad1a:	f7ff fb41 	bl	800a3a0 <__sprint_r.part.0>
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	f47f af4a 	bne.w	800abb8 <_vfiprintf_r+0x788>
 800ad24:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ad26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad28:	9b05      	ldr	r3, [sp, #20]
 800ad2a:	f101 0e01 	add.w	lr, r1, #1
 800ad2e:	46d4      	mov	ip, sl
 800ad30:	e7c8      	b.n	800acc4 <_vfiprintf_r+0x894>
 800ad32:	2a00      	cmp	r2, #0
 800ad34:	f040 80c6 	bne.w	800aec4 <_vfiprintf_r+0xa94>
 800ad38:	9b05      	ldr	r3, [sp, #20]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f000 8086 	beq.w	800ae4c <_vfiprintf_r+0xa1c>
 800ad40:	aa0c      	add	r2, sp, #48	; 0x30
 800ad42:	2302      	movs	r3, #2
 800ad44:	921a      	str	r2, [sp, #104]	; 0x68
 800ad46:	4608      	mov	r0, r1
 800ad48:	931b      	str	r3, [sp, #108]	; 0x6c
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	4654      	mov	r4, sl
 800ad4e:	e6cb      	b.n	800aae8 <_vfiprintf_r+0x6b8>
 800ad50:	2a00      	cmp	r2, #0
 800ad52:	f040 80a6 	bne.w	800aea2 <_vfiprintf_r+0xa72>
 800ad56:	2001      	movs	r0, #1
 800ad58:	4611      	mov	r1, r2
 800ad5a:	4654      	mov	r4, sl
 800ad5c:	e6c7      	b.n	800aaee <_vfiprintf_r+0x6be>
 800ad5e:	bb03      	cbnz	r3, 800ada2 <_vfiprintf_r+0x972>
 800ad60:	f018 0f01 	tst.w	r8, #1
 800ad64:	d01d      	beq.n	800ada2 <_vfiprintf_r+0x972>
 800ad66:	ab2a      	add	r3, sp, #168	; 0xa8
 800ad68:	2230      	movs	r2, #48	; 0x30
 800ad6a:	f803 2d41 	strb.w	r2, [r3, #-65]!
 800ad6e:	ebc3 090a 	rsb	r9, r3, sl
 800ad72:	9307      	str	r3, [sp, #28]
 800ad74:	e48e      	b.n	800a694 <_vfiprintf_r+0x264>
 800ad76:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad78:	46d1      	mov	r9, sl
 800ad7a:	0933      	lsrs	r3, r6, #4
 800ad7c:	f006 010f 	and.w	r1, r6, #15
 800ad80:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800ad84:	093a      	lsrs	r2, r7, #4
 800ad86:	461e      	mov	r6, r3
 800ad88:	4617      	mov	r7, r2
 800ad8a:	5c43      	ldrb	r3, [r0, r1]
 800ad8c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800ad90:	ea56 0307 	orrs.w	r3, r6, r7
 800ad94:	d1f1      	bne.n	800ad7a <_vfiprintf_r+0x94a>
 800ad96:	464b      	mov	r3, r9
 800ad98:	f8cd 901c 	str.w	r9, [sp, #28]
 800ad9c:	ebc3 090a 	rsb	r9, r3, sl
 800ada0:	e478      	b.n	800a694 <_vfiprintf_r+0x264>
 800ada2:	f8cd a01c 	str.w	sl, [sp, #28]
 800ada6:	e475      	b.n	800a694 <_vfiprintf_r+0x264>
 800ada8:	2302      	movs	r3, #2
 800adaa:	e444      	b.n	800a636 <_vfiprintf_r+0x206>
 800adac:	0800cae0 	.word	0x0800cae0
 800adb0:	0800caf0 	.word	0x0800caf0
 800adb4:	2a00      	cmp	r2, #0
 800adb6:	f040 80d7 	bne.w	800af68 <_vfiprintf_r+0xb38>
 800adba:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f000 80ae 	beq.w	800af20 <_vfiprintf_r+0xaf0>
 800adc4:	2301      	movs	r3, #1
 800adc6:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800adca:	4618      	mov	r0, r3
 800adcc:	931b      	str	r3, [sp, #108]	; 0x6c
 800adce:	461a      	mov	r2, r3
 800add0:	911a      	str	r1, [sp, #104]	; 0x68
 800add2:	4654      	mov	r4, sl
 800add4:	e679      	b.n	800aaca <_vfiprintf_r+0x69a>
 800add6:	9a03      	ldr	r2, [sp, #12]
 800add8:	1b95      	subs	r5, r2, r6
 800adda:	2d00      	cmp	r5, #0
 800addc:	4652      	mov	r2, sl
 800adde:	f73f af0a 	bgt.w	800abf6 <_vfiprintf_r+0x7c6>
 800ade2:	e6c9      	b.n	800ab78 <_vfiprintf_r+0x748>
 800ade4:	465d      	mov	r5, fp
 800ade6:	f7ff bb7c 	b.w	800a4e2 <_vfiprintf_r+0xb2>
 800adea:	9801      	ldr	r0, [sp, #4]
 800adec:	9900      	ldr	r1, [sp, #0]
 800adee:	aa0d      	add	r2, sp, #52	; 0x34
 800adf0:	f7ff fad6 	bl	800a3a0 <__sprint_r.part.0>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	f47f aedf 	bne.w	800abb8 <_vfiprintf_r+0x788>
 800adfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adfc:	4652      	mov	r2, sl
 800adfe:	e6f3      	b.n	800abe8 <_vfiprintf_r+0x7b8>
 800ae00:	9904      	ldr	r1, [sp, #16]
 800ae02:	460a      	mov	r2, r1
 800ae04:	3204      	adds	r2, #4
 800ae06:	680e      	ldr	r6, [r1, #0]
 800ae08:	9204      	str	r2, [sp, #16]
 800ae0a:	2700      	movs	r7, #0
 800ae0c:	e413      	b.n	800a636 <_vfiprintf_r+0x206>
 800ae0e:	3204      	adds	r2, #4
 800ae10:	681e      	ldr	r6, [r3, #0]
 800ae12:	9204      	str	r2, [sp, #16]
 800ae14:	2301      	movs	r3, #1
 800ae16:	2700      	movs	r7, #0
 800ae18:	e40d      	b.n	800a636 <_vfiprintf_r+0x206>
 800ae1a:	6816      	ldr	r6, [r2, #0]
 800ae1c:	3204      	adds	r2, #4
 800ae1e:	9204      	str	r2, [sp, #16]
 800ae20:	2700      	movs	r7, #0
 800ae22:	e52d      	b.n	800a880 <_vfiprintf_r+0x450>
 800ae24:	9a04      	ldr	r2, [sp, #16]
 800ae26:	6816      	ldr	r6, [r2, #0]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	3304      	adds	r3, #4
 800ae2c:	17f7      	asrs	r7, r6, #31
 800ae2e:	9304      	str	r3, [sp, #16]
 800ae30:	4632      	mov	r2, r6
 800ae32:	463b      	mov	r3, r7
 800ae34:	e4bf      	b.n	800a7b6 <_vfiprintf_r+0x386>
 800ae36:	9801      	ldr	r0, [sp, #4]
 800ae38:	9900      	ldr	r1, [sp, #0]
 800ae3a:	aa0d      	add	r2, sp, #52	; 0x34
 800ae3c:	f7ff fab0 	bl	800a3a0 <__sprint_r.part.0>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	f47f aeb9 	bne.w	800abb8 <_vfiprintf_r+0x788>
 800ae46:	4654      	mov	r4, sl
 800ae48:	f7ff bbbe 	b.w	800a5c8 <_vfiprintf_r+0x198>
 800ae4c:	4608      	mov	r0, r1
 800ae4e:	4654      	mov	r4, sl
 800ae50:	4611      	mov	r1, r2
 800ae52:	e64c      	b.n	800aaee <_vfiprintf_r+0x6be>
 800ae54:	46d1      	mov	r9, sl
 800ae56:	f8cd c014 	str.w	ip, [sp, #20]
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	4639      	mov	r1, r7
 800ae5e:	220a      	movs	r2, #10
 800ae60:	2300      	movs	r3, #0
 800ae62:	f001 f897 	bl	800bf94 <__aeabi_uldivmod>
 800ae66:	3230      	adds	r2, #48	; 0x30
 800ae68:	4630      	mov	r0, r6
 800ae6a:	4639      	mov	r1, r7
 800ae6c:	f809 2d01 	strb.w	r2, [r9, #-1]!
 800ae70:	2300      	movs	r3, #0
 800ae72:	220a      	movs	r2, #10
 800ae74:	f001 f88e 	bl	800bf94 <__aeabi_uldivmod>
 800ae78:	4606      	mov	r6, r0
 800ae7a:	460f      	mov	r7, r1
 800ae7c:	ea56 0307 	orrs.w	r3, r6, r7
 800ae80:	d1eb      	bne.n	800ae5a <_vfiprintf_r+0xa2a>
 800ae82:	f8dd c014 	ldr.w	ip, [sp, #20]
 800ae86:	e786      	b.n	800ad96 <_vfiprintf_r+0x966>
 800ae88:	2b30      	cmp	r3, #48	; 0x30
 800ae8a:	9b07      	ldr	r3, [sp, #28]
 800ae8c:	d086      	beq.n	800ad9c <_vfiprintf_r+0x96c>
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	461a      	mov	r2, r3
 800ae92:	9307      	str	r3, [sp, #28]
 800ae94:	2330      	movs	r3, #48	; 0x30
 800ae96:	ebc2 090a 	rsb	r9, r2, sl
 800ae9a:	f801 3c01 	strb.w	r3, [r1, #-1]
 800ae9e:	f7ff bbf9 	b.w	800a694 <_vfiprintf_r+0x264>
 800aea2:	9801      	ldr	r0, [sp, #4]
 800aea4:	9900      	ldr	r1, [sp, #0]
 800aea6:	f8cd c014 	str.w	ip, [sp, #20]
 800aeaa:	aa0d      	add	r2, sp, #52	; 0x34
 800aeac:	f7ff fa78 	bl	800a3a0 <__sprint_r.part.0>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	f47f ae81 	bne.w	800abb8 <_vfiprintf_r+0x788>
 800aeb6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800aeb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aeba:	f8dd c014 	ldr.w	ip, [sp, #20]
 800aebe:	1c48      	adds	r0, r1, #1
 800aec0:	4654      	mov	r4, sl
 800aec2:	e614      	b.n	800aaee <_vfiprintf_r+0x6be>
 800aec4:	9801      	ldr	r0, [sp, #4]
 800aec6:	9900      	ldr	r1, [sp, #0]
 800aec8:	f8cd c020 	str.w	ip, [sp, #32]
 800aecc:	aa0d      	add	r2, sp, #52	; 0x34
 800aece:	f7ff fa67 	bl	800a3a0 <__sprint_r.part.0>
 800aed2:	2800      	cmp	r0, #0
 800aed4:	f47f ae70 	bne.w	800abb8 <_vfiprintf_r+0x788>
 800aed8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800aeda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aedc:	f8dd c020 	ldr.w	ip, [sp, #32]
 800aee0:	1c48      	adds	r0, r1, #1
 800aee2:	4654      	mov	r4, sl
 800aee4:	e5f4      	b.n	800aad0 <_vfiprintf_r+0x6a0>
 800aee6:	2a00      	cmp	r2, #0
 800aee8:	d167      	bne.n	800afba <_vfiprintf_r+0xb8a>
 800aeea:	2001      	movs	r0, #1
 800aeec:	4611      	mov	r1, r2
 800aeee:	4654      	mov	r4, sl
 800aef0:	e601      	b.n	800aaf6 <_vfiprintf_r+0x6c6>
 800aef2:	9801      	ldr	r0, [sp, #4]
 800aef4:	9900      	ldr	r1, [sp, #0]
 800aef6:	aa0d      	add	r2, sp, #52	; 0x34
 800aef8:	f7ff fa52 	bl	800a3a0 <__sprint_r.part.0>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	f47f ae5b 	bne.w	800abb8 <_vfiprintf_r+0x788>
 800af02:	980e      	ldr	r0, [sp, #56]	; 0x38
 800af04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af06:	3001      	adds	r0, #1
 800af08:	4654      	mov	r4, sl
 800af0a:	e624      	b.n	800ab56 <_vfiprintf_r+0x726>
 800af0c:	252d      	movs	r5, #45	; 0x2d
 800af0e:	4276      	negs	r6, r6
 800af10:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800af14:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 800af18:	46e1      	mov	r9, ip
 800af1a:	2301      	movs	r3, #1
 800af1c:	f7ff bb91 	b.w	800a642 <_vfiprintf_r+0x212>
 800af20:	9b05      	ldr	r3, [sp, #20]
 800af22:	4611      	mov	r1, r2
 800af24:	2001      	movs	r0, #1
 800af26:	4654      	mov	r4, sl
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f43f ade4 	beq.w	800aaf6 <_vfiprintf_r+0x6c6>
 800af2e:	aa0c      	add	r2, sp, #48	; 0x30
 800af30:	2302      	movs	r3, #2
 800af32:	e88a 000c 	stmia.w	sl, {r2, r3}
 800af36:	461a      	mov	r2, r3
 800af38:	e5d6      	b.n	800aae8 <_vfiprintf_r+0x6b8>
 800af3a:	f018 0f10 	tst.w	r8, #16
 800af3e:	d10b      	bne.n	800af58 <_vfiprintf_r+0xb28>
 800af40:	f018 0f40 	tst.w	r8, #64	; 0x40
 800af44:	d008      	beq.n	800af58 <_vfiprintf_r+0xb28>
 800af46:	9a04      	ldr	r2, [sp, #16]
 800af48:	6813      	ldr	r3, [r2, #0]
 800af4a:	3204      	adds	r2, #4
 800af4c:	9204      	str	r2, [sp, #16]
 800af4e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800af52:	801a      	strh	r2, [r3, #0]
 800af54:	f7ff ba9e 	b.w	800a494 <_vfiprintf_r+0x64>
 800af58:	9a04      	ldr	r2, [sp, #16]
 800af5a:	6813      	ldr	r3, [r2, #0]
 800af5c:	3204      	adds	r2, #4
 800af5e:	9204      	str	r2, [sp, #16]
 800af60:	9a02      	ldr	r2, [sp, #8]
 800af62:	601a      	str	r2, [r3, #0]
 800af64:	f7ff ba96 	b.w	800a494 <_vfiprintf_r+0x64>
 800af68:	9801      	ldr	r0, [sp, #4]
 800af6a:	9900      	ldr	r1, [sp, #0]
 800af6c:	f8cd c020 	str.w	ip, [sp, #32]
 800af70:	aa0d      	add	r2, sp, #52	; 0x34
 800af72:	f7ff fa15 	bl	800a3a0 <__sprint_r.part.0>
 800af76:	2800      	cmp	r0, #0
 800af78:	f47f ae1e 	bne.w	800abb8 <_vfiprintf_r+0x788>
 800af7c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800af7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af80:	f8dd c020 	ldr.w	ip, [sp, #32]
 800af84:	1c48      	adds	r0, r1, #1
 800af86:	4654      	mov	r4, sl
 800af88:	e591      	b.n	800aaae <_vfiprintf_r+0x67e>
 800af8a:	f048 0820 	orr.w	r8, r8, #32
 800af8e:	f10b 0001 	add.w	r0, fp, #1
 800af92:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800af96:	f7ff bab4 	b.w	800a502 <_vfiprintf_r+0xd2>
 800af9a:	426d      	negs	r5, r5
 800af9c:	9304      	str	r3, [sp, #16]
 800af9e:	4658      	mov	r0, fp
 800afa0:	f7ff bbc6 	b.w	800a730 <_vfiprintf_r+0x300>
 800afa4:	9807      	ldr	r0, [sp, #28]
 800afa6:	9604      	str	r6, [sp, #16]
 800afa8:	f7f8 fd28 	bl	80039fc <strlen>
 800afac:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 800afb0:	4681      	mov	r9, r0
 800afb2:	f04f 0c00 	mov.w	ip, #0
 800afb6:	f7ff bb6d 	b.w	800a694 <_vfiprintf_r+0x264>
 800afba:	9801      	ldr	r0, [sp, #4]
 800afbc:	9900      	ldr	r1, [sp, #0]
 800afbe:	f8cd c014 	str.w	ip, [sp, #20]
 800afc2:	aa0d      	add	r2, sp, #52	; 0x34
 800afc4:	f7ff f9ec 	bl	800a3a0 <__sprint_r.part.0>
 800afc8:	2800      	cmp	r0, #0
 800afca:	f47f adf5 	bne.w	800abb8 <_vfiprintf_r+0x788>
 800afce:	990e      	ldr	r1, [sp, #56]	; 0x38
 800afd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afd2:	f8dd c014 	ldr.w	ip, [sp, #20]
 800afd6:	1c48      	adds	r0, r1, #1
 800afd8:	4654      	mov	r4, sl
 800afda:	e58c      	b.n	800aaf6 <_vfiprintf_r+0x6c6>
 800afdc:	990e      	ldr	r1, [sp, #56]	; 0x38
 800afde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afe0:	4f15      	ldr	r7, [pc, #84]	; (800b038 <_vfiprintf_r+0xc08>)
 800afe2:	3101      	adds	r1, #1
 800afe4:	f7ff bb98 	b.w	800a718 <_vfiprintf_r+0x2e8>
 800afe8:	f1bc 0f06 	cmp.w	ip, #6
 800afec:	bf28      	it	cs
 800afee:	f04f 0c06 	movcs.w	ip, #6
 800aff2:	4b12      	ldr	r3, [pc, #72]	; (800b03c <_vfiprintf_r+0xc0c>)
 800aff4:	9604      	str	r6, [sp, #16]
 800aff6:	46e1      	mov	r9, ip
 800aff8:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
 800affc:	9307      	str	r3, [sp, #28]
 800affe:	e460      	b.n	800a8c2 <_vfiprintf_r+0x492>
 800b000:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b002:	4f0d      	ldr	r7, [pc, #52]	; (800b038 <_vfiprintf_r+0xc08>)
 800b004:	f101 0e01 	add.w	lr, r1, #1
 800b008:	e618      	b.n	800ac3c <_vfiprintf_r+0x80c>
 800b00a:	46e1      	mov	r9, ip
 800b00c:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 800b010:	9604      	str	r6, [sp, #16]
 800b012:	4684      	mov	ip, r0
 800b014:	f7ff bb3e 	b.w	800a694 <_vfiprintf_r+0x264>
 800b018:	4686      	mov	lr, r0
 800b01a:	e66b      	b.n	800acf4 <_vfiprintf_r+0x8c4>
 800b01c:	9a04      	ldr	r2, [sp, #16]
 800b01e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800b022:	6816      	ldr	r6, [r2, #0]
 800b024:	3204      	adds	r2, #4
 800b026:	2e00      	cmp	r6, #0
 800b028:	9204      	str	r2, [sp, #16]
 800b02a:	f6bf aa6a 	bge.w	800a502 <_vfiprintf_r+0xd2>
 800b02e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800b032:	f7ff ba66 	b.w	800a502 <_vfiprintf_r+0xd2>
 800b036:	bf00      	nop
 800b038:	0800caf0 	.word	0x0800caf0
 800b03c:	0800c94c 	.word	0x0800c94c

0800b040 <vfiprintf>:
 800b040:	b430      	push	{r4, r5}
 800b042:	4c04      	ldr	r4, [pc, #16]	; (800b054 <vfiprintf+0x14>)
 800b044:	460d      	mov	r5, r1
 800b046:	4613      	mov	r3, r2
 800b048:	4601      	mov	r1, r0
 800b04a:	462a      	mov	r2, r5
 800b04c:	6820      	ldr	r0, [r4, #0]
 800b04e:	bc30      	pop	{r4, r5}
 800b050:	f7ff b9ee 	b.w	800a430 <_vfiprintf_r>
 800b054:	200004b0 	.word	0x200004b0

0800b058 <__sbprintf>:
 800b058:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 800b05c:	460c      	mov	r4, r1
 800b05e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 800b062:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 800b066:	69e7      	ldr	r7, [r4, #28]
 800b068:	6e49      	ldr	r1, [r1, #100]	; 0x64
 800b06a:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 800b06e:	9119      	str	r1, [sp, #100]	; 0x64
 800b070:	ad1a      	add	r5, sp, #104	; 0x68
 800b072:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800b076:	f02e 0e02 	bic.w	lr, lr, #2
 800b07a:	f04f 0c00 	mov.w	ip, #0
 800b07e:	9707      	str	r7, [sp, #28]
 800b080:	4669      	mov	r1, sp
 800b082:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800b084:	9500      	str	r5, [sp, #0]
 800b086:	9504      	str	r5, [sp, #16]
 800b088:	9602      	str	r6, [sp, #8]
 800b08a:	9605      	str	r6, [sp, #20]
 800b08c:	f8ad e00c 	strh.w	lr, [sp, #12]
 800b090:	f8ad 900e 	strh.w	r9, [sp, #14]
 800b094:	9709      	str	r7, [sp, #36]	; 0x24
 800b096:	f8cd c018 	str.w	ip, [sp, #24]
 800b09a:	4606      	mov	r6, r0
 800b09c:	f7ff f9c8 	bl	800a430 <_vfiprintf_r>
 800b0a0:	1e05      	subs	r5, r0, #0
 800b0a2:	db07      	blt.n	800b0b4 <__sbprintf+0x5c>
 800b0a4:	4630      	mov	r0, r6
 800b0a6:	4669      	mov	r1, sp
 800b0a8:	f7fc fb06 	bl	80076b8 <_fflush_r>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	bf18      	it	ne
 800b0b0:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800b0b4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b0b8:	065b      	lsls	r3, r3, #25
 800b0ba:	d503      	bpl.n	800b0c4 <__sbprintf+0x6c>
 800b0bc:	89a3      	ldrh	r3, [r4, #12]
 800b0be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0c2:	81a3      	strh	r3, [r4, #12]
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 800b0ca:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 800b0ce:	bf00      	nop

0800b0d0 <_write_r>:
 800b0d0:	b570      	push	{r4, r5, r6, lr}
 800b0d2:	4c08      	ldr	r4, [pc, #32]	; (800b0f4 <_write_r+0x24>)
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	2500      	movs	r5, #0
 800b0d8:	4608      	mov	r0, r1
 800b0da:	4611      	mov	r1, r2
 800b0dc:	461a      	mov	r2, r3
 800b0de:	6025      	str	r5, [r4, #0]
 800b0e0:	f7f5 fcf6 	bl	8000ad0 <_write>
 800b0e4:	1c43      	adds	r3, r0, #1
 800b0e6:	d000      	beq.n	800b0ea <_write_r+0x1a>
 800b0e8:	bd70      	pop	{r4, r5, r6, pc}
 800b0ea:	6823      	ldr	r3, [r4, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d0fb      	beq.n	800b0e8 <_write_r+0x18>
 800b0f0:	6033      	str	r3, [r6, #0]
 800b0f2:	bd70      	pop	{r4, r5, r6, pc}
 800b0f4:	2001066c 	.word	0x2001066c

0800b0f8 <__register_exitproc>:
 800b0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0fc:	4c25      	ldr	r4, [pc, #148]	; (800b194 <__register_exitproc+0x9c>)
 800b0fe:	6825      	ldr	r5, [r4, #0]
 800b100:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 800b104:	4606      	mov	r6, r0
 800b106:	4688      	mov	r8, r1
 800b108:	4692      	mov	sl, r2
 800b10a:	4699      	mov	r9, r3
 800b10c:	b3cc      	cbz	r4, 800b182 <__register_exitproc+0x8a>
 800b10e:	6860      	ldr	r0, [r4, #4]
 800b110:	281f      	cmp	r0, #31
 800b112:	dc18      	bgt.n	800b146 <__register_exitproc+0x4e>
 800b114:	1c43      	adds	r3, r0, #1
 800b116:	b17e      	cbz	r6, 800b138 <__register_exitproc+0x40>
 800b118:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800b11c:	2101      	movs	r1, #1
 800b11e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 800b122:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 800b126:	fa01 f200 	lsl.w	r2, r1, r0
 800b12a:	4317      	orrs	r7, r2
 800b12c:	2e02      	cmp	r6, #2
 800b12e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800b132:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 800b136:	d01e      	beq.n	800b176 <__register_exitproc+0x7e>
 800b138:	3002      	adds	r0, #2
 800b13a:	6063      	str	r3, [r4, #4]
 800b13c:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 800b140:	2000      	movs	r0, #0
 800b142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b146:	4b14      	ldr	r3, [pc, #80]	; (800b198 <__register_exitproc+0xa0>)
 800b148:	b303      	cbz	r3, 800b18c <__register_exitproc+0x94>
 800b14a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b14e:	f3af 8000 	nop.w
 800b152:	4604      	mov	r4, r0
 800b154:	b1d0      	cbz	r0, 800b18c <__register_exitproc+0x94>
 800b156:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800b15a:	2700      	movs	r7, #0
 800b15c:	e880 0088 	stmia.w	r0, {r3, r7}
 800b160:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800b164:	4638      	mov	r0, r7
 800b166:	2301      	movs	r3, #1
 800b168:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800b16c:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 800b170:	2e00      	cmp	r6, #0
 800b172:	d0e1      	beq.n	800b138 <__register_exitproc+0x40>
 800b174:	e7d0      	b.n	800b118 <__register_exitproc+0x20>
 800b176:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 800b17a:	430a      	orrs	r2, r1
 800b17c:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800b180:	e7da      	b.n	800b138 <__register_exitproc+0x40>
 800b182:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 800b186:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800b18a:	e7c0      	b.n	800b10e <__register_exitproc+0x16>
 800b18c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b194:	0800c8f0 	.word	0x0800c8f0
 800b198:	00000000 	.word	0x00000000

0800b19c <_calloc_r>:
 800b19c:	b510      	push	{r4, lr}
 800b19e:	fb02 f101 	mul.w	r1, r2, r1
 800b1a2:	f7fc ff85 	bl	80080b0 <_malloc_r>
 800b1a6:	4604      	mov	r4, r0
 800b1a8:	b168      	cbz	r0, 800b1c6 <_calloc_r+0x2a>
 800b1aa:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800b1ae:	f022 0203 	bic.w	r2, r2, #3
 800b1b2:	3a04      	subs	r2, #4
 800b1b4:	2a24      	cmp	r2, #36	; 0x24
 800b1b6:	d818      	bhi.n	800b1ea <_calloc_r+0x4e>
 800b1b8:	2a13      	cmp	r2, #19
 800b1ba:	d806      	bhi.n	800b1ca <_calloc_r+0x2e>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2200      	movs	r2, #0
 800b1c0:	601a      	str	r2, [r3, #0]
 800b1c2:	605a      	str	r2, [r3, #4]
 800b1c4:	609a      	str	r2, [r3, #8]
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	bd10      	pop	{r4, pc}
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	2a1b      	cmp	r2, #27
 800b1ce:	6003      	str	r3, [r0, #0]
 800b1d0:	6043      	str	r3, [r0, #4]
 800b1d2:	d90f      	bls.n	800b1f4 <_calloc_r+0x58>
 800b1d4:	2a24      	cmp	r2, #36	; 0x24
 800b1d6:	6083      	str	r3, [r0, #8]
 800b1d8:	60c3      	str	r3, [r0, #12]
 800b1da:	bf05      	ittet	eq
 800b1dc:	6103      	streq	r3, [r0, #16]
 800b1de:	6143      	streq	r3, [r0, #20]
 800b1e0:	f100 0310 	addne.w	r3, r0, #16
 800b1e4:	f100 0318 	addeq.w	r3, r0, #24
 800b1e8:	e7e9      	b.n	800b1be <_calloc_r+0x22>
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	f7f8 fb12 	bl	8003814 <memset>
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	bd10      	pop	{r4, pc}
 800b1f4:	f100 0308 	add.w	r3, r0, #8
 800b1f8:	e7e1      	b.n	800b1be <_calloc_r+0x22>
 800b1fa:	bf00      	nop

0800b1fc <_close_r>:
 800b1fc:	b538      	push	{r3, r4, r5, lr}
 800b1fe:	4c07      	ldr	r4, [pc, #28]	; (800b21c <_close_r+0x20>)
 800b200:	2300      	movs	r3, #0
 800b202:	4605      	mov	r5, r0
 800b204:	4608      	mov	r0, r1
 800b206:	6023      	str	r3, [r4, #0]
 800b208:	f7f5 fc6a 	bl	8000ae0 <_close>
 800b20c:	1c43      	adds	r3, r0, #1
 800b20e:	d000      	beq.n	800b212 <_close_r+0x16>
 800b210:	bd38      	pop	{r3, r4, r5, pc}
 800b212:	6823      	ldr	r3, [r4, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d0fb      	beq.n	800b210 <_close_r+0x14>
 800b218:	602b      	str	r3, [r5, #0]
 800b21a:	bd38      	pop	{r3, r4, r5, pc}
 800b21c:	2001066c 	.word	0x2001066c

0800b220 <_fclose_r>:
 800b220:	2900      	cmp	r1, #0
 800b222:	d03d      	beq.n	800b2a0 <_fclose_r+0x80>
 800b224:	b570      	push	{r4, r5, r6, lr}
 800b226:	4605      	mov	r5, r0
 800b228:	460c      	mov	r4, r1
 800b22a:	b108      	cbz	r0, 800b230 <_fclose_r+0x10>
 800b22c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b22e:	b37b      	cbz	r3, 800b290 <_fclose_r+0x70>
 800b230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b234:	b90b      	cbnz	r3, 800b23a <_fclose_r+0x1a>
 800b236:	2000      	movs	r0, #0
 800b238:	bd70      	pop	{r4, r5, r6, pc}
 800b23a:	4628      	mov	r0, r5
 800b23c:	4621      	mov	r1, r4
 800b23e:	f7fc f991 	bl	8007564 <__sflush_r>
 800b242:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b244:	4606      	mov	r6, r0
 800b246:	b133      	cbz	r3, 800b256 <_fclose_r+0x36>
 800b248:	4628      	mov	r0, r5
 800b24a:	69e1      	ldr	r1, [r4, #28]
 800b24c:	4798      	blx	r3
 800b24e:	2800      	cmp	r0, #0
 800b250:	bfb8      	it	lt
 800b252:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 800b256:	89a3      	ldrh	r3, [r4, #12]
 800b258:	061b      	lsls	r3, r3, #24
 800b25a:	d41c      	bmi.n	800b296 <_fclose_r+0x76>
 800b25c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b25e:	b141      	cbz	r1, 800b272 <_fclose_r+0x52>
 800b260:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b264:	4299      	cmp	r1, r3
 800b266:	d002      	beq.n	800b26e <_fclose_r+0x4e>
 800b268:	4628      	mov	r0, r5
 800b26a:	f7fc fbbb 	bl	80079e4 <_free_r>
 800b26e:	2300      	movs	r3, #0
 800b270:	6323      	str	r3, [r4, #48]	; 0x30
 800b272:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b274:	b121      	cbz	r1, 800b280 <_fclose_r+0x60>
 800b276:	4628      	mov	r0, r5
 800b278:	f7fc fbb4 	bl	80079e4 <_free_r>
 800b27c:	2300      	movs	r3, #0
 800b27e:	6463      	str	r3, [r4, #68]	; 0x44
 800b280:	f7fc fb30 	bl	80078e4 <__sfp_lock_acquire>
 800b284:	2300      	movs	r3, #0
 800b286:	81a3      	strh	r3, [r4, #12]
 800b288:	f7fc fb2e 	bl	80078e8 <__sfp_lock_release>
 800b28c:	4630      	mov	r0, r6
 800b28e:	bd70      	pop	{r4, r5, r6, pc}
 800b290:	f7fc fb22 	bl	80078d8 <__sinit>
 800b294:	e7cc      	b.n	800b230 <_fclose_r+0x10>
 800b296:	4628      	mov	r0, r5
 800b298:	6921      	ldr	r1, [r4, #16]
 800b29a:	f7fc fba3 	bl	80079e4 <_free_r>
 800b29e:	e7dd      	b.n	800b25c <_fclose_r+0x3c>
 800b2a0:	2000      	movs	r0, #0
 800b2a2:	4770      	bx	lr

0800b2a4 <fclose>:
 800b2a4:	4b02      	ldr	r3, [pc, #8]	; (800b2b0 <fclose+0xc>)
 800b2a6:	4601      	mov	r1, r0
 800b2a8:	6818      	ldr	r0, [r3, #0]
 800b2aa:	f7ff bfb9 	b.w	800b220 <_fclose_r>
 800b2ae:	bf00      	nop
 800b2b0:	200004b0 	.word	0x200004b0

0800b2b4 <__fputwc>:
 800b2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b8:	b082      	sub	sp, #8
 800b2ba:	4607      	mov	r7, r0
 800b2bc:	460e      	mov	r6, r1
 800b2be:	4614      	mov	r4, r2
 800b2c0:	f7fc fe6a 	bl	8007f98 <__locale_mb_cur_max>
 800b2c4:	2801      	cmp	r0, #1
 800b2c6:	d041      	beq.n	800b34c <__fputwc+0x98>
 800b2c8:	4638      	mov	r0, r7
 800b2ca:	a901      	add	r1, sp, #4
 800b2cc:	4632      	mov	r2, r6
 800b2ce:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800b2d2:	f000 f969 	bl	800b5a8 <_wcrtomb_r>
 800b2d6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b2da:	4680      	mov	r8, r0
 800b2dc:	d02f      	beq.n	800b33e <__fputwc+0x8a>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	d03c      	beq.n	800b35c <__fputwc+0xa8>
 800b2e2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b2e6:	2500      	movs	r5, #0
 800b2e8:	e009      	b.n	800b2fe <__fputwc+0x4a>
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	7019      	strb	r1, [r3, #0]
 800b2ee:	6823      	ldr	r3, [r4, #0]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	6023      	str	r3, [r4, #0]
 800b2f4:	3501      	adds	r5, #1
 800b2f6:	45a8      	cmp	r8, r5
 800b2f8:	d930      	bls.n	800b35c <__fputwc+0xa8>
 800b2fa:	ab01      	add	r3, sp, #4
 800b2fc:	5d59      	ldrb	r1, [r3, r5]
 800b2fe:	68a3      	ldr	r3, [r4, #8]
 800b300:	3b01      	subs	r3, #1
 800b302:	2b00      	cmp	r3, #0
 800b304:	60a3      	str	r3, [r4, #8]
 800b306:	daf0      	bge.n	800b2ea <__fputwc+0x36>
 800b308:	69a2      	ldr	r2, [r4, #24]
 800b30a:	4293      	cmp	r3, r2
 800b30c:	db07      	blt.n	800b31e <__fputwc+0x6a>
 800b30e:	6823      	ldr	r3, [r4, #0]
 800b310:	7019      	strb	r1, [r3, #0]
 800b312:	6823      	ldr	r3, [r4, #0]
 800b314:	7819      	ldrb	r1, [r3, #0]
 800b316:	290a      	cmp	r1, #10
 800b318:	f103 0301 	add.w	r3, r3, #1
 800b31c:	d1e9      	bne.n	800b2f2 <__fputwc+0x3e>
 800b31e:	4638      	mov	r0, r7
 800b320:	4622      	mov	r2, r4
 800b322:	f000 f8e5 	bl	800b4f0 <__swbuf_r>
 800b326:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 800b32a:	fab0 f080 	clz	r0, r0
 800b32e:	0940      	lsrs	r0, r0, #5
 800b330:	2800      	cmp	r0, #0
 800b332:	d0df      	beq.n	800b2f4 <__fputwc+0x40>
 800b334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b338:	b002      	add	sp, #8
 800b33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b33e:	89a3      	ldrh	r3, [r4, #12]
 800b340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b344:	81a3      	strh	r3, [r4, #12]
 800b346:	b002      	add	sp, #8
 800b348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b34c:	1e73      	subs	r3, r6, #1
 800b34e:	2bfe      	cmp	r3, #254	; 0xfe
 800b350:	d8ba      	bhi.n	800b2c8 <__fputwc+0x14>
 800b352:	b2f1      	uxtb	r1, r6
 800b354:	4680      	mov	r8, r0
 800b356:	f88d 1004 	strb.w	r1, [sp, #4]
 800b35a:	e7c4      	b.n	800b2e6 <__fputwc+0x32>
 800b35c:	4630      	mov	r0, r6
 800b35e:	b002      	add	sp, #8
 800b360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b364 <_fputwc_r>:
 800b364:	8993      	ldrh	r3, [r2, #12]
 800b366:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b36a:	d10b      	bne.n	800b384 <_fputwc_r+0x20>
 800b36c:	b410      	push	{r4}
 800b36e:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800b370:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b374:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800b378:	6654      	str	r4, [r2, #100]	; 0x64
 800b37a:	8193      	strh	r3, [r2, #12]
 800b37c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b380:	f7ff bf98 	b.w	800b2b4 <__fputwc>
 800b384:	f7ff bf96 	b.w	800b2b4 <__fputwc>

0800b388 <fputwc>:
 800b388:	4b08      	ldr	r3, [pc, #32]	; (800b3ac <fputwc+0x24>)
 800b38a:	b570      	push	{r4, r5, r6, lr}
 800b38c:	681c      	ldr	r4, [r3, #0]
 800b38e:	4606      	mov	r6, r0
 800b390:	460d      	mov	r5, r1
 800b392:	b124      	cbz	r4, 800b39e <fputwc+0x16>
 800b394:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b396:	b913      	cbnz	r3, 800b39e <fputwc+0x16>
 800b398:	4620      	mov	r0, r4
 800b39a:	f7fc fa9d 	bl	80078d8 <__sinit>
 800b39e:	4620      	mov	r0, r4
 800b3a0:	4631      	mov	r1, r6
 800b3a2:	462a      	mov	r2, r5
 800b3a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3a8:	f7ff bfdc 	b.w	800b364 <_fputwc_r>
 800b3ac:	200004b0 	.word	0x200004b0

0800b3b0 <_fstat_r>:
 800b3b0:	b538      	push	{r3, r4, r5, lr}
 800b3b2:	4c08      	ldr	r4, [pc, #32]	; (800b3d4 <_fstat_r+0x24>)
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	4605      	mov	r5, r0
 800b3b8:	4608      	mov	r0, r1
 800b3ba:	4611      	mov	r1, r2
 800b3bc:	6023      	str	r3, [r4, #0]
 800b3be:	f7f5 fb93 	bl	8000ae8 <_fstat>
 800b3c2:	1c43      	adds	r3, r0, #1
 800b3c4:	d000      	beq.n	800b3c8 <_fstat_r+0x18>
 800b3c6:	bd38      	pop	{r3, r4, r5, pc}
 800b3c8:	6823      	ldr	r3, [r4, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d0fb      	beq.n	800b3c6 <_fstat_r+0x16>
 800b3ce:	602b      	str	r3, [r5, #0]
 800b3d0:	bd38      	pop	{r3, r4, r5, pc}
 800b3d2:	bf00      	nop
 800b3d4:	2001066c 	.word	0x2001066c

0800b3d8 <_isatty_r>:
 800b3d8:	b538      	push	{r3, r4, r5, lr}
 800b3da:	4c07      	ldr	r4, [pc, #28]	; (800b3f8 <_isatty_r+0x20>)
 800b3dc:	2300      	movs	r3, #0
 800b3de:	4605      	mov	r5, r0
 800b3e0:	4608      	mov	r0, r1
 800b3e2:	6023      	str	r3, [r4, #0]
 800b3e4:	f7f5 fb86 	bl	8000af4 <_isatty>
 800b3e8:	1c43      	adds	r3, r0, #1
 800b3ea:	d000      	beq.n	800b3ee <_isatty_r+0x16>
 800b3ec:	bd38      	pop	{r3, r4, r5, pc}
 800b3ee:	6823      	ldr	r3, [r4, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d0fb      	beq.n	800b3ec <_isatty_r+0x14>
 800b3f4:	602b      	str	r3, [r5, #0]
 800b3f6:	bd38      	pop	{r3, r4, r5, pc}
 800b3f8:	2001066c 	.word	0x2001066c

0800b3fc <_lseek_r>:
 800b3fc:	b570      	push	{r4, r5, r6, lr}
 800b3fe:	4c08      	ldr	r4, [pc, #32]	; (800b420 <_lseek_r+0x24>)
 800b400:	4606      	mov	r6, r0
 800b402:	2500      	movs	r5, #0
 800b404:	4608      	mov	r0, r1
 800b406:	4611      	mov	r1, r2
 800b408:	461a      	mov	r2, r3
 800b40a:	6025      	str	r5, [r4, #0]
 800b40c:	f7f5 fb74 	bl	8000af8 <_lseek>
 800b410:	1c43      	adds	r3, r0, #1
 800b412:	d000      	beq.n	800b416 <_lseek_r+0x1a>
 800b414:	bd70      	pop	{r4, r5, r6, pc}
 800b416:	6823      	ldr	r3, [r4, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d0fb      	beq.n	800b414 <_lseek_r+0x18>
 800b41c:	6033      	str	r3, [r6, #0]
 800b41e:	bd70      	pop	{r4, r5, r6, pc}
 800b420:	2001066c 	.word	0x2001066c

0800b424 <_read_r>:
 800b424:	b570      	push	{r4, r5, r6, lr}
 800b426:	4c08      	ldr	r4, [pc, #32]	; (800b448 <_read_r+0x24>)
 800b428:	4606      	mov	r6, r0
 800b42a:	2500      	movs	r5, #0
 800b42c:	4608      	mov	r0, r1
 800b42e:	4611      	mov	r1, r2
 800b430:	461a      	mov	r2, r3
 800b432:	6025      	str	r5, [r4, #0]
 800b434:	f7f5 fb62 	bl	8000afc <_read>
 800b438:	1c43      	adds	r3, r0, #1
 800b43a:	d000      	beq.n	800b43e <_read_r+0x1a>
 800b43c:	bd70      	pop	{r4, r5, r6, pc}
 800b43e:	6823      	ldr	r3, [r4, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d0fb      	beq.n	800b43c <_read_r+0x18>
 800b444:	6033      	str	r3, [r6, #0]
 800b446:	bd70      	pop	{r4, r5, r6, pc}
 800b448:	2001066c 	.word	0x2001066c

0800b44c <cleanup_glue>:
 800b44c:	b538      	push	{r3, r4, r5, lr}
 800b44e:	460c      	mov	r4, r1
 800b450:	6809      	ldr	r1, [r1, #0]
 800b452:	4605      	mov	r5, r0
 800b454:	b109      	cbz	r1, 800b45a <cleanup_glue+0xe>
 800b456:	f7ff fff9 	bl	800b44c <cleanup_glue>
 800b45a:	4628      	mov	r0, r5
 800b45c:	4621      	mov	r1, r4
 800b45e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b462:	f7fc babf 	b.w	80079e4 <_free_r>
 800b466:	bf00      	nop

0800b468 <_reclaim_reent>:
 800b468:	4b20      	ldr	r3, [pc, #128]	; (800b4ec <_reclaim_reent+0x84>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4298      	cmp	r0, r3
 800b46e:	d03c      	beq.n	800b4ea <_reclaim_reent+0x82>
 800b470:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b472:	b570      	push	{r4, r5, r6, lr}
 800b474:	4605      	mov	r5, r0
 800b476:	b18b      	cbz	r3, 800b49c <_reclaim_reent+0x34>
 800b478:	2600      	movs	r6, #0
 800b47a:	5999      	ldr	r1, [r3, r6]
 800b47c:	b139      	cbz	r1, 800b48e <_reclaim_reent+0x26>
 800b47e:	680c      	ldr	r4, [r1, #0]
 800b480:	4628      	mov	r0, r5
 800b482:	f7fc faaf 	bl	80079e4 <_free_r>
 800b486:	4621      	mov	r1, r4
 800b488:	2c00      	cmp	r4, #0
 800b48a:	d1f8      	bne.n	800b47e <_reclaim_reent+0x16>
 800b48c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800b48e:	3604      	adds	r6, #4
 800b490:	2e80      	cmp	r6, #128	; 0x80
 800b492:	d1f2      	bne.n	800b47a <_reclaim_reent+0x12>
 800b494:	4619      	mov	r1, r3
 800b496:	4628      	mov	r0, r5
 800b498:	f7fc faa4 	bl	80079e4 <_free_r>
 800b49c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800b49e:	b111      	cbz	r1, 800b4a6 <_reclaim_reent+0x3e>
 800b4a0:	4628      	mov	r0, r5
 800b4a2:	f7fc fa9f 	bl	80079e4 <_free_r>
 800b4a6:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 800b4aa:	b151      	cbz	r1, 800b4c2 <_reclaim_reent+0x5a>
 800b4ac:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 800b4b0:	42b1      	cmp	r1, r6
 800b4b2:	d006      	beq.n	800b4c2 <_reclaim_reent+0x5a>
 800b4b4:	680c      	ldr	r4, [r1, #0]
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	f7fc fa94 	bl	80079e4 <_free_r>
 800b4bc:	42a6      	cmp	r6, r4
 800b4be:	4621      	mov	r1, r4
 800b4c0:	d1f8      	bne.n	800b4b4 <_reclaim_reent+0x4c>
 800b4c2:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800b4c4:	b111      	cbz	r1, 800b4cc <_reclaim_reent+0x64>
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	f7fc fa8c 	bl	80079e4 <_free_r>
 800b4cc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800b4ce:	b903      	cbnz	r3, 800b4d2 <_reclaim_reent+0x6a>
 800b4d0:	bd70      	pop	{r4, r5, r6, pc}
 800b4d2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	4798      	blx	r3
 800b4d8:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 800b4dc:	2900      	cmp	r1, #0
 800b4de:	d0f7      	beq.n	800b4d0 <_reclaim_reent+0x68>
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b4e6:	f7ff bfb1 	b.w	800b44c <cleanup_glue>
 800b4ea:	4770      	bx	lr
 800b4ec:	200004b0 	.word	0x200004b0

0800b4f0 <__swbuf_r>:
 800b4f0:	b570      	push	{r4, r5, r6, lr}
 800b4f2:	460d      	mov	r5, r1
 800b4f4:	4614      	mov	r4, r2
 800b4f6:	4606      	mov	r6, r0
 800b4f8:	b110      	cbz	r0, 800b500 <__swbuf_r+0x10>
 800b4fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d048      	beq.n	800b592 <__swbuf_r+0xa2>
 800b500:	89a2      	ldrh	r2, [r4, #12]
 800b502:	69a3      	ldr	r3, [r4, #24]
 800b504:	60a3      	str	r3, [r4, #8]
 800b506:	b291      	uxth	r1, r2
 800b508:	0708      	lsls	r0, r1, #28
 800b50a:	d538      	bpl.n	800b57e <__swbuf_r+0x8e>
 800b50c:	6923      	ldr	r3, [r4, #16]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d035      	beq.n	800b57e <__swbuf_r+0x8e>
 800b512:	0489      	lsls	r1, r1, #18
 800b514:	b2ed      	uxtb	r5, r5
 800b516:	d515      	bpl.n	800b544 <__swbuf_r+0x54>
 800b518:	6822      	ldr	r2, [r4, #0]
 800b51a:	6961      	ldr	r1, [r4, #20]
 800b51c:	1ad3      	subs	r3, r2, r3
 800b51e:	428b      	cmp	r3, r1
 800b520:	da1c      	bge.n	800b55c <__swbuf_r+0x6c>
 800b522:	3301      	adds	r3, #1
 800b524:	68a1      	ldr	r1, [r4, #8]
 800b526:	1c50      	adds	r0, r2, #1
 800b528:	3901      	subs	r1, #1
 800b52a:	60a1      	str	r1, [r4, #8]
 800b52c:	6020      	str	r0, [r4, #0]
 800b52e:	7015      	strb	r5, [r2, #0]
 800b530:	6962      	ldr	r2, [r4, #20]
 800b532:	429a      	cmp	r2, r3
 800b534:	d01a      	beq.n	800b56c <__swbuf_r+0x7c>
 800b536:	89a3      	ldrh	r3, [r4, #12]
 800b538:	07db      	lsls	r3, r3, #31
 800b53a:	d501      	bpl.n	800b540 <__swbuf_r+0x50>
 800b53c:	2d0a      	cmp	r5, #10
 800b53e:	d015      	beq.n	800b56c <__swbuf_r+0x7c>
 800b540:	4628      	mov	r0, r5
 800b542:	bd70      	pop	{r4, r5, r6, pc}
 800b544:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b546:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b54a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800b54e:	81a2      	strh	r2, [r4, #12]
 800b550:	6822      	ldr	r2, [r4, #0]
 800b552:	6661      	str	r1, [r4, #100]	; 0x64
 800b554:	6961      	ldr	r1, [r4, #20]
 800b556:	1ad3      	subs	r3, r2, r3
 800b558:	428b      	cmp	r3, r1
 800b55a:	dbe2      	blt.n	800b522 <__swbuf_r+0x32>
 800b55c:	4630      	mov	r0, r6
 800b55e:	4621      	mov	r1, r4
 800b560:	f7fc f8aa 	bl	80076b8 <_fflush_r>
 800b564:	b940      	cbnz	r0, 800b578 <__swbuf_r+0x88>
 800b566:	6822      	ldr	r2, [r4, #0]
 800b568:	2301      	movs	r3, #1
 800b56a:	e7db      	b.n	800b524 <__swbuf_r+0x34>
 800b56c:	4630      	mov	r0, r6
 800b56e:	4621      	mov	r1, r4
 800b570:	f7fc f8a2 	bl	80076b8 <_fflush_r>
 800b574:	2800      	cmp	r0, #0
 800b576:	d0e3      	beq.n	800b540 <__swbuf_r+0x50>
 800b578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b57c:	bd70      	pop	{r4, r5, r6, pc}
 800b57e:	4630      	mov	r0, r6
 800b580:	4621      	mov	r1, r4
 800b582:	f7fa ff2b 	bl	80063dc <__swsetup_r>
 800b586:	2800      	cmp	r0, #0
 800b588:	d1f6      	bne.n	800b578 <__swbuf_r+0x88>
 800b58a:	89a2      	ldrh	r2, [r4, #12]
 800b58c:	6923      	ldr	r3, [r4, #16]
 800b58e:	b291      	uxth	r1, r2
 800b590:	e7bf      	b.n	800b512 <__swbuf_r+0x22>
 800b592:	f7fc f9a1 	bl	80078d8 <__sinit>
 800b596:	e7b3      	b.n	800b500 <__swbuf_r+0x10>

0800b598 <__swbuf>:
 800b598:	4b02      	ldr	r3, [pc, #8]	; (800b5a4 <__swbuf+0xc>)
 800b59a:	460a      	mov	r2, r1
 800b59c:	4601      	mov	r1, r0
 800b59e:	6818      	ldr	r0, [r3, #0]
 800b5a0:	f7ff bfa6 	b.w	800b4f0 <__swbuf_r>
 800b5a4:	200004b0 	.word	0x200004b0

0800b5a8 <_wcrtomb_r>:
 800b5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ac:	4605      	mov	r5, r0
 800b5ae:	b086      	sub	sp, #24
 800b5b0:	461e      	mov	r6, r3
 800b5b2:	460c      	mov	r4, r1
 800b5b4:	b1a1      	cbz	r1, 800b5e0 <_wcrtomb_r+0x38>
 800b5b6:	4b10      	ldr	r3, [pc, #64]	; (800b5f8 <_wcrtomb_r+0x50>)
 800b5b8:	4617      	mov	r7, r2
 800b5ba:	f8d3 8000 	ldr.w	r8, [r3]
 800b5be:	f7fc fce7 	bl	8007f90 <__locale_charset>
 800b5c2:	9600      	str	r6, [sp, #0]
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	463a      	mov	r2, r7
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	47c0      	blx	r8
 800b5ce:	1c43      	adds	r3, r0, #1
 800b5d0:	d103      	bne.n	800b5da <_wcrtomb_r+0x32>
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	238a      	movs	r3, #138	; 0x8a
 800b5d6:	6032      	str	r2, [r6, #0]
 800b5d8:	602b      	str	r3, [r5, #0]
 800b5da:	b006      	add	sp, #24
 800b5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5e0:	4b05      	ldr	r3, [pc, #20]	; (800b5f8 <_wcrtomb_r+0x50>)
 800b5e2:	681f      	ldr	r7, [r3, #0]
 800b5e4:	f7fc fcd4 	bl	8007f90 <__locale_charset>
 800b5e8:	9600      	str	r6, [sp, #0]
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	4622      	mov	r2, r4
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	a903      	add	r1, sp, #12
 800b5f2:	47b8      	blx	r7
 800b5f4:	e7eb      	b.n	800b5ce <_wcrtomb_r+0x26>
 800b5f6:	bf00      	nop
 800b5f8:	20000940 	.word	0x20000940

0800b5fc <wcrtomb>:
 800b5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b600:	4b12      	ldr	r3, [pc, #72]	; (800b64c <wcrtomb+0x50>)
 800b602:	b086      	sub	sp, #24
 800b604:	4616      	mov	r6, r2
 800b606:	681d      	ldr	r5, [r3, #0]
 800b608:	4604      	mov	r4, r0
 800b60a:	b1a0      	cbz	r0, 800b636 <wcrtomb+0x3a>
 800b60c:	4b10      	ldr	r3, [pc, #64]	; (800b650 <wcrtomb+0x54>)
 800b60e:	460f      	mov	r7, r1
 800b610:	f8d3 8000 	ldr.w	r8, [r3]
 800b614:	f7fc fcbc 	bl	8007f90 <__locale_charset>
 800b618:	9600      	str	r6, [sp, #0]
 800b61a:	4603      	mov	r3, r0
 800b61c:	4621      	mov	r1, r4
 800b61e:	463a      	mov	r2, r7
 800b620:	4628      	mov	r0, r5
 800b622:	47c0      	blx	r8
 800b624:	1c43      	adds	r3, r0, #1
 800b626:	d103      	bne.n	800b630 <wcrtomb+0x34>
 800b628:	2200      	movs	r2, #0
 800b62a:	238a      	movs	r3, #138	; 0x8a
 800b62c:	6032      	str	r2, [r6, #0]
 800b62e:	602b      	str	r3, [r5, #0]
 800b630:	b006      	add	sp, #24
 800b632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b636:	4b06      	ldr	r3, [pc, #24]	; (800b650 <wcrtomb+0x54>)
 800b638:	681f      	ldr	r7, [r3, #0]
 800b63a:	f7fc fca9 	bl	8007f90 <__locale_charset>
 800b63e:	9600      	str	r6, [sp, #0]
 800b640:	4603      	mov	r3, r0
 800b642:	4622      	mov	r2, r4
 800b644:	4628      	mov	r0, r5
 800b646:	a903      	add	r1, sp, #12
 800b648:	47b8      	blx	r7
 800b64a:	e7eb      	b.n	800b624 <wcrtomb+0x28>
 800b64c:	200004b0 	.word	0x200004b0
 800b650:	20000940 	.word	0x20000940

0800b654 <__ascii_wctomb>:
 800b654:	b121      	cbz	r1, 800b660 <__ascii_wctomb+0xc>
 800b656:	2aff      	cmp	r2, #255	; 0xff
 800b658:	d804      	bhi.n	800b664 <__ascii_wctomb+0x10>
 800b65a:	700a      	strb	r2, [r1, #0]
 800b65c:	2001      	movs	r0, #1
 800b65e:	4770      	bx	lr
 800b660:	4608      	mov	r0, r1
 800b662:	4770      	bx	lr
 800b664:	238a      	movs	r3, #138	; 0x8a
 800b666:	6003      	str	r3, [r0, #0]
 800b668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop

0800b670 <_wctomb_r>:
 800b670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b674:	4c09      	ldr	r4, [pc, #36]	; (800b69c <_wctomb_r+0x2c>)
 800b676:	b082      	sub	sp, #8
 800b678:	4698      	mov	r8, r3
 800b67a:	4605      	mov	r5, r0
 800b67c:	460f      	mov	r7, r1
 800b67e:	4616      	mov	r6, r2
 800b680:	6824      	ldr	r4, [r4, #0]
 800b682:	f7fc fc85 	bl	8007f90 <__locale_charset>
 800b686:	f8cd 8000 	str.w	r8, [sp]
 800b68a:	4603      	mov	r3, r0
 800b68c:	4639      	mov	r1, r7
 800b68e:	4632      	mov	r2, r6
 800b690:	4628      	mov	r0, r5
 800b692:	47a0      	blx	r4
 800b694:	b002      	add	sp, #8
 800b696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b69a:	bf00      	nop
 800b69c:	20000940 	.word	0x20000940

0800b6a0 <__aeabi_drsub>:
 800b6a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800b6a4:	e002      	b.n	800b6ac <__adddf3>
 800b6a6:	bf00      	nop

0800b6a8 <__aeabi_dsub>:
 800b6a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800b6ac <__adddf3>:
 800b6ac:	b530      	push	{r4, r5, lr}
 800b6ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800b6b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800b6b6:	ea94 0f05 	teq	r4, r5
 800b6ba:	bf08      	it	eq
 800b6bc:	ea90 0f02 	teqeq	r0, r2
 800b6c0:	bf1f      	itttt	ne
 800b6c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 800b6c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 800b6ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800b6ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800b6d2:	f000 80e2 	beq.w	800b89a <__adddf3+0x1ee>
 800b6d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800b6da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800b6de:	bfb8      	it	lt
 800b6e0:	426d      	neglt	r5, r5
 800b6e2:	dd0c      	ble.n	800b6fe <__adddf3+0x52>
 800b6e4:	442c      	add	r4, r5
 800b6e6:	ea80 0202 	eor.w	r2, r0, r2
 800b6ea:	ea81 0303 	eor.w	r3, r1, r3
 800b6ee:	ea82 0000 	eor.w	r0, r2, r0
 800b6f2:	ea83 0101 	eor.w	r1, r3, r1
 800b6f6:	ea80 0202 	eor.w	r2, r0, r2
 800b6fa:	ea81 0303 	eor.w	r3, r1, r3
 800b6fe:	2d36      	cmp	r5, #54	; 0x36
 800b700:	bf88      	it	hi
 800b702:	bd30      	pophi	{r4, r5, pc}
 800b704:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800b708:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800b70c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800b710:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800b714:	d002      	beq.n	800b71c <__adddf3+0x70>
 800b716:	4240      	negs	r0, r0
 800b718:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b71c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800b720:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800b724:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800b728:	d002      	beq.n	800b730 <__adddf3+0x84>
 800b72a:	4252      	negs	r2, r2
 800b72c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800b730:	ea94 0f05 	teq	r4, r5
 800b734:	f000 80a7 	beq.w	800b886 <__adddf3+0x1da>
 800b738:	f1a4 0401 	sub.w	r4, r4, #1
 800b73c:	f1d5 0e20 	rsbs	lr, r5, #32
 800b740:	db0d      	blt.n	800b75e <__adddf3+0xb2>
 800b742:	fa02 fc0e 	lsl.w	ip, r2, lr
 800b746:	fa22 f205 	lsr.w	r2, r2, r5
 800b74a:	1880      	adds	r0, r0, r2
 800b74c:	f141 0100 	adc.w	r1, r1, #0
 800b750:	fa03 f20e 	lsl.w	r2, r3, lr
 800b754:	1880      	adds	r0, r0, r2
 800b756:	fa43 f305 	asr.w	r3, r3, r5
 800b75a:	4159      	adcs	r1, r3
 800b75c:	e00e      	b.n	800b77c <__adddf3+0xd0>
 800b75e:	f1a5 0520 	sub.w	r5, r5, #32
 800b762:	f10e 0e20 	add.w	lr, lr, #32
 800b766:	2a01      	cmp	r2, #1
 800b768:	fa03 fc0e 	lsl.w	ip, r3, lr
 800b76c:	bf28      	it	cs
 800b76e:	f04c 0c02 	orrcs.w	ip, ip, #2
 800b772:	fa43 f305 	asr.w	r3, r3, r5
 800b776:	18c0      	adds	r0, r0, r3
 800b778:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800b77c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b780:	d507      	bpl.n	800b792 <__adddf3+0xe6>
 800b782:	f04f 0e00 	mov.w	lr, #0
 800b786:	f1dc 0c00 	rsbs	ip, ip, #0
 800b78a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800b78e:	eb6e 0101 	sbc.w	r1, lr, r1
 800b792:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b796:	d31b      	bcc.n	800b7d0 <__adddf3+0x124>
 800b798:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800b79c:	d30c      	bcc.n	800b7b8 <__adddf3+0x10c>
 800b79e:	0849      	lsrs	r1, r1, #1
 800b7a0:	ea5f 0030 	movs.w	r0, r0, rrx
 800b7a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800b7a8:	f104 0401 	add.w	r4, r4, #1
 800b7ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800b7b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800b7b4:	f080 809a 	bcs.w	800b8ec <__adddf3+0x240>
 800b7b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800b7bc:	bf08      	it	eq
 800b7be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800b7c2:	f150 0000 	adcs.w	r0, r0, #0
 800b7c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800b7ca:	ea41 0105 	orr.w	r1, r1, r5
 800b7ce:	bd30      	pop	{r4, r5, pc}
 800b7d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800b7d4:	4140      	adcs	r0, r0
 800b7d6:	eb41 0101 	adc.w	r1, r1, r1
 800b7da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800b7de:	f1a4 0401 	sub.w	r4, r4, #1
 800b7e2:	d1e9      	bne.n	800b7b8 <__adddf3+0x10c>
 800b7e4:	f091 0f00 	teq	r1, #0
 800b7e8:	bf04      	itt	eq
 800b7ea:	4601      	moveq	r1, r0
 800b7ec:	2000      	moveq	r0, #0
 800b7ee:	fab1 f381 	clz	r3, r1
 800b7f2:	bf08      	it	eq
 800b7f4:	3320      	addeq	r3, #32
 800b7f6:	f1a3 030b 	sub.w	r3, r3, #11
 800b7fa:	f1b3 0220 	subs.w	r2, r3, #32
 800b7fe:	da0c      	bge.n	800b81a <__adddf3+0x16e>
 800b800:	320c      	adds	r2, #12
 800b802:	dd08      	ble.n	800b816 <__adddf3+0x16a>
 800b804:	f102 0c14 	add.w	ip, r2, #20
 800b808:	f1c2 020c 	rsb	r2, r2, #12
 800b80c:	fa01 f00c 	lsl.w	r0, r1, ip
 800b810:	fa21 f102 	lsr.w	r1, r1, r2
 800b814:	e00c      	b.n	800b830 <__adddf3+0x184>
 800b816:	f102 0214 	add.w	r2, r2, #20
 800b81a:	bfd8      	it	le
 800b81c:	f1c2 0c20 	rsble	ip, r2, #32
 800b820:	fa01 f102 	lsl.w	r1, r1, r2
 800b824:	fa20 fc0c 	lsr.w	ip, r0, ip
 800b828:	bfdc      	itt	le
 800b82a:	ea41 010c 	orrle.w	r1, r1, ip
 800b82e:	4090      	lslle	r0, r2
 800b830:	1ae4      	subs	r4, r4, r3
 800b832:	bfa2      	ittt	ge
 800b834:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800b838:	4329      	orrge	r1, r5
 800b83a:	bd30      	popge	{r4, r5, pc}
 800b83c:	ea6f 0404 	mvn.w	r4, r4
 800b840:	3c1f      	subs	r4, #31
 800b842:	da1c      	bge.n	800b87e <__adddf3+0x1d2>
 800b844:	340c      	adds	r4, #12
 800b846:	dc0e      	bgt.n	800b866 <__adddf3+0x1ba>
 800b848:	f104 0414 	add.w	r4, r4, #20
 800b84c:	f1c4 0220 	rsb	r2, r4, #32
 800b850:	fa20 f004 	lsr.w	r0, r0, r4
 800b854:	fa01 f302 	lsl.w	r3, r1, r2
 800b858:	ea40 0003 	orr.w	r0, r0, r3
 800b85c:	fa21 f304 	lsr.w	r3, r1, r4
 800b860:	ea45 0103 	orr.w	r1, r5, r3
 800b864:	bd30      	pop	{r4, r5, pc}
 800b866:	f1c4 040c 	rsb	r4, r4, #12
 800b86a:	f1c4 0220 	rsb	r2, r4, #32
 800b86e:	fa20 f002 	lsr.w	r0, r0, r2
 800b872:	fa01 f304 	lsl.w	r3, r1, r4
 800b876:	ea40 0003 	orr.w	r0, r0, r3
 800b87a:	4629      	mov	r1, r5
 800b87c:	bd30      	pop	{r4, r5, pc}
 800b87e:	fa21 f004 	lsr.w	r0, r1, r4
 800b882:	4629      	mov	r1, r5
 800b884:	bd30      	pop	{r4, r5, pc}
 800b886:	f094 0f00 	teq	r4, #0
 800b88a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800b88e:	bf06      	itte	eq
 800b890:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800b894:	3401      	addeq	r4, #1
 800b896:	3d01      	subne	r5, #1
 800b898:	e74e      	b.n	800b738 <__adddf3+0x8c>
 800b89a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800b89e:	bf18      	it	ne
 800b8a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800b8a4:	d029      	beq.n	800b8fa <__adddf3+0x24e>
 800b8a6:	ea94 0f05 	teq	r4, r5
 800b8aa:	bf08      	it	eq
 800b8ac:	ea90 0f02 	teqeq	r0, r2
 800b8b0:	d005      	beq.n	800b8be <__adddf3+0x212>
 800b8b2:	ea54 0c00 	orrs.w	ip, r4, r0
 800b8b6:	bf04      	itt	eq
 800b8b8:	4619      	moveq	r1, r3
 800b8ba:	4610      	moveq	r0, r2
 800b8bc:	bd30      	pop	{r4, r5, pc}
 800b8be:	ea91 0f03 	teq	r1, r3
 800b8c2:	bf1e      	ittt	ne
 800b8c4:	2100      	movne	r1, #0
 800b8c6:	2000      	movne	r0, #0
 800b8c8:	bd30      	popne	{r4, r5, pc}
 800b8ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800b8ce:	d105      	bne.n	800b8dc <__adddf3+0x230>
 800b8d0:	0040      	lsls	r0, r0, #1
 800b8d2:	4149      	adcs	r1, r1
 800b8d4:	bf28      	it	cs
 800b8d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800b8da:	bd30      	pop	{r4, r5, pc}
 800b8dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800b8e0:	bf3c      	itt	cc
 800b8e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800b8e6:	bd30      	popcc	{r4, r5, pc}
 800b8e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b8ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800b8f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b8f4:	f04f 0000 	mov.w	r0, #0
 800b8f8:	bd30      	pop	{r4, r5, pc}
 800b8fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800b8fe:	bf1a      	itte	ne
 800b900:	4619      	movne	r1, r3
 800b902:	4610      	movne	r0, r2
 800b904:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800b908:	bf1c      	itt	ne
 800b90a:	460b      	movne	r3, r1
 800b90c:	4602      	movne	r2, r0
 800b90e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800b912:	bf06      	itte	eq
 800b914:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800b918:	ea91 0f03 	teqeq	r1, r3
 800b91c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800b920:	bd30      	pop	{r4, r5, pc}
 800b922:	bf00      	nop

0800b924 <__aeabi_ui2d>:
 800b924:	f090 0f00 	teq	r0, #0
 800b928:	bf04      	itt	eq
 800b92a:	2100      	moveq	r1, #0
 800b92c:	4770      	bxeq	lr
 800b92e:	b530      	push	{r4, r5, lr}
 800b930:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800b934:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800b938:	f04f 0500 	mov.w	r5, #0
 800b93c:	f04f 0100 	mov.w	r1, #0
 800b940:	e750      	b.n	800b7e4 <__adddf3+0x138>
 800b942:	bf00      	nop

0800b944 <__aeabi_i2d>:
 800b944:	f090 0f00 	teq	r0, #0
 800b948:	bf04      	itt	eq
 800b94a:	2100      	moveq	r1, #0
 800b94c:	4770      	bxeq	lr
 800b94e:	b530      	push	{r4, r5, lr}
 800b950:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800b954:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800b958:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800b95c:	bf48      	it	mi
 800b95e:	4240      	negmi	r0, r0
 800b960:	f04f 0100 	mov.w	r1, #0
 800b964:	e73e      	b.n	800b7e4 <__adddf3+0x138>
 800b966:	bf00      	nop

0800b968 <__aeabi_f2d>:
 800b968:	0042      	lsls	r2, r0, #1
 800b96a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800b96e:	ea4f 0131 	mov.w	r1, r1, rrx
 800b972:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800b976:	bf1f      	itttt	ne
 800b978:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800b97c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800b980:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800b984:	4770      	bxne	lr
 800b986:	f092 0f00 	teq	r2, #0
 800b98a:	bf14      	ite	ne
 800b98c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800b990:	4770      	bxeq	lr
 800b992:	b530      	push	{r4, r5, lr}
 800b994:	f44f 7460 	mov.w	r4, #896	; 0x380
 800b998:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b99c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b9a0:	e720      	b.n	800b7e4 <__adddf3+0x138>
 800b9a2:	bf00      	nop

0800b9a4 <__aeabi_ul2d>:
 800b9a4:	ea50 0201 	orrs.w	r2, r0, r1
 800b9a8:	bf08      	it	eq
 800b9aa:	4770      	bxeq	lr
 800b9ac:	b530      	push	{r4, r5, lr}
 800b9ae:	f04f 0500 	mov.w	r5, #0
 800b9b2:	e00a      	b.n	800b9ca <__aeabi_l2d+0x16>

0800b9b4 <__aeabi_l2d>:
 800b9b4:	ea50 0201 	orrs.w	r2, r0, r1
 800b9b8:	bf08      	it	eq
 800b9ba:	4770      	bxeq	lr
 800b9bc:	b530      	push	{r4, r5, lr}
 800b9be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800b9c2:	d502      	bpl.n	800b9ca <__aeabi_l2d+0x16>
 800b9c4:	4240      	negs	r0, r0
 800b9c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b9ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800b9ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800b9d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800b9d6:	f43f aedc 	beq.w	800b792 <__adddf3+0xe6>
 800b9da:	f04f 0203 	mov.w	r2, #3
 800b9de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800b9e2:	bf18      	it	ne
 800b9e4:	3203      	addne	r2, #3
 800b9e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800b9ea:	bf18      	it	ne
 800b9ec:	3203      	addne	r2, #3
 800b9ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800b9f2:	f1c2 0320 	rsb	r3, r2, #32
 800b9f6:	fa00 fc03 	lsl.w	ip, r0, r3
 800b9fa:	fa20 f002 	lsr.w	r0, r0, r2
 800b9fe:	fa01 fe03 	lsl.w	lr, r1, r3
 800ba02:	ea40 000e 	orr.w	r0, r0, lr
 800ba06:	fa21 f102 	lsr.w	r1, r1, r2
 800ba0a:	4414      	add	r4, r2
 800ba0c:	e6c1      	b.n	800b792 <__adddf3+0xe6>
 800ba0e:	bf00      	nop

0800ba10 <__aeabi_dmul>:
 800ba10:	b570      	push	{r4, r5, r6, lr}
 800ba12:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800ba16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800ba1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800ba1e:	bf1d      	ittte	ne
 800ba20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800ba24:	ea94 0f0c 	teqne	r4, ip
 800ba28:	ea95 0f0c 	teqne	r5, ip
 800ba2c:	f000 f8de 	bleq	800bbec <__aeabi_dmul+0x1dc>
 800ba30:	442c      	add	r4, r5
 800ba32:	ea81 0603 	eor.w	r6, r1, r3
 800ba36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800ba3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800ba3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800ba42:	bf18      	it	ne
 800ba44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800ba48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ba4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba50:	d038      	beq.n	800bac4 <__aeabi_dmul+0xb4>
 800ba52:	fba0 ce02 	umull	ip, lr, r0, r2
 800ba56:	f04f 0500 	mov.w	r5, #0
 800ba5a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800ba5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800ba62:	fbe0 e503 	umlal	lr, r5, r0, r3
 800ba66:	f04f 0600 	mov.w	r6, #0
 800ba6a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800ba6e:	f09c 0f00 	teq	ip, #0
 800ba72:	bf18      	it	ne
 800ba74:	f04e 0e01 	orrne.w	lr, lr, #1
 800ba78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800ba7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800ba80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800ba84:	d204      	bcs.n	800ba90 <__aeabi_dmul+0x80>
 800ba86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800ba8a:	416d      	adcs	r5, r5
 800ba8c:	eb46 0606 	adc.w	r6, r6, r6
 800ba90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800ba94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800ba98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800ba9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800baa0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800baa4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800baa8:	bf88      	it	hi
 800baaa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800baae:	d81e      	bhi.n	800baee <__aeabi_dmul+0xde>
 800bab0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800bab4:	bf08      	it	eq
 800bab6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800baba:	f150 0000 	adcs.w	r0, r0, #0
 800babe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800bac2:	bd70      	pop	{r4, r5, r6, pc}
 800bac4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800bac8:	ea46 0101 	orr.w	r1, r6, r1
 800bacc:	ea40 0002 	orr.w	r0, r0, r2
 800bad0:	ea81 0103 	eor.w	r1, r1, r3
 800bad4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800bad8:	bfc2      	ittt	gt
 800bada:	ebd4 050c 	rsbsgt	r5, r4, ip
 800bade:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800bae2:	bd70      	popgt	{r4, r5, r6, pc}
 800bae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bae8:	f04f 0e00 	mov.w	lr, #0
 800baec:	3c01      	subs	r4, #1
 800baee:	f300 80ab 	bgt.w	800bc48 <__aeabi_dmul+0x238>
 800baf2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800baf6:	bfde      	ittt	le
 800baf8:	2000      	movle	r0, #0
 800bafa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800bafe:	bd70      	pople	{r4, r5, r6, pc}
 800bb00:	f1c4 0400 	rsb	r4, r4, #0
 800bb04:	3c20      	subs	r4, #32
 800bb06:	da35      	bge.n	800bb74 <__aeabi_dmul+0x164>
 800bb08:	340c      	adds	r4, #12
 800bb0a:	dc1b      	bgt.n	800bb44 <__aeabi_dmul+0x134>
 800bb0c:	f104 0414 	add.w	r4, r4, #20
 800bb10:	f1c4 0520 	rsb	r5, r4, #32
 800bb14:	fa00 f305 	lsl.w	r3, r0, r5
 800bb18:	fa20 f004 	lsr.w	r0, r0, r4
 800bb1c:	fa01 f205 	lsl.w	r2, r1, r5
 800bb20:	ea40 0002 	orr.w	r0, r0, r2
 800bb24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800bb28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bb2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800bb30:	fa21 f604 	lsr.w	r6, r1, r4
 800bb34:	eb42 0106 	adc.w	r1, r2, r6
 800bb38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800bb3c:	bf08      	it	eq
 800bb3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800bb42:	bd70      	pop	{r4, r5, r6, pc}
 800bb44:	f1c4 040c 	rsb	r4, r4, #12
 800bb48:	f1c4 0520 	rsb	r5, r4, #32
 800bb4c:	fa00 f304 	lsl.w	r3, r0, r4
 800bb50:	fa20 f005 	lsr.w	r0, r0, r5
 800bb54:	fa01 f204 	lsl.w	r2, r1, r4
 800bb58:	ea40 0002 	orr.w	r0, r0, r2
 800bb5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800bb60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800bb64:	f141 0100 	adc.w	r1, r1, #0
 800bb68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800bb6c:	bf08      	it	eq
 800bb6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800bb72:	bd70      	pop	{r4, r5, r6, pc}
 800bb74:	f1c4 0520 	rsb	r5, r4, #32
 800bb78:	fa00 f205 	lsl.w	r2, r0, r5
 800bb7c:	ea4e 0e02 	orr.w	lr, lr, r2
 800bb80:	fa20 f304 	lsr.w	r3, r0, r4
 800bb84:	fa01 f205 	lsl.w	r2, r1, r5
 800bb88:	ea43 0302 	orr.w	r3, r3, r2
 800bb8c:	fa21 f004 	lsr.w	r0, r1, r4
 800bb90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800bb94:	fa21 f204 	lsr.w	r2, r1, r4
 800bb98:	ea20 0002 	bic.w	r0, r0, r2
 800bb9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800bba0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800bba4:	bf08      	it	eq
 800bba6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800bbaa:	bd70      	pop	{r4, r5, r6, pc}
 800bbac:	f094 0f00 	teq	r4, #0
 800bbb0:	d10f      	bne.n	800bbd2 <__aeabi_dmul+0x1c2>
 800bbb2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800bbb6:	0040      	lsls	r0, r0, #1
 800bbb8:	eb41 0101 	adc.w	r1, r1, r1
 800bbbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800bbc0:	bf08      	it	eq
 800bbc2:	3c01      	subeq	r4, #1
 800bbc4:	d0f7      	beq.n	800bbb6 <__aeabi_dmul+0x1a6>
 800bbc6:	ea41 0106 	orr.w	r1, r1, r6
 800bbca:	f095 0f00 	teq	r5, #0
 800bbce:	bf18      	it	ne
 800bbd0:	4770      	bxne	lr
 800bbd2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800bbd6:	0052      	lsls	r2, r2, #1
 800bbd8:	eb43 0303 	adc.w	r3, r3, r3
 800bbdc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800bbe0:	bf08      	it	eq
 800bbe2:	3d01      	subeq	r5, #1
 800bbe4:	d0f7      	beq.n	800bbd6 <__aeabi_dmul+0x1c6>
 800bbe6:	ea43 0306 	orr.w	r3, r3, r6
 800bbea:	4770      	bx	lr
 800bbec:	ea94 0f0c 	teq	r4, ip
 800bbf0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800bbf4:	bf18      	it	ne
 800bbf6:	ea95 0f0c 	teqne	r5, ip
 800bbfa:	d00c      	beq.n	800bc16 <__aeabi_dmul+0x206>
 800bbfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800bc00:	bf18      	it	ne
 800bc02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800bc06:	d1d1      	bne.n	800bbac <__aeabi_dmul+0x19c>
 800bc08:	ea81 0103 	eor.w	r1, r1, r3
 800bc0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800bc10:	f04f 0000 	mov.w	r0, #0
 800bc14:	bd70      	pop	{r4, r5, r6, pc}
 800bc16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800bc1a:	bf06      	itte	eq
 800bc1c:	4610      	moveq	r0, r2
 800bc1e:	4619      	moveq	r1, r3
 800bc20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800bc24:	d019      	beq.n	800bc5a <__aeabi_dmul+0x24a>
 800bc26:	ea94 0f0c 	teq	r4, ip
 800bc2a:	d102      	bne.n	800bc32 <__aeabi_dmul+0x222>
 800bc2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800bc30:	d113      	bne.n	800bc5a <__aeabi_dmul+0x24a>
 800bc32:	ea95 0f0c 	teq	r5, ip
 800bc36:	d105      	bne.n	800bc44 <__aeabi_dmul+0x234>
 800bc38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800bc3c:	bf1c      	itt	ne
 800bc3e:	4610      	movne	r0, r2
 800bc40:	4619      	movne	r1, r3
 800bc42:	d10a      	bne.n	800bc5a <__aeabi_dmul+0x24a>
 800bc44:	ea81 0103 	eor.w	r1, r1, r3
 800bc48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800bc4c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800bc50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bc54:	f04f 0000 	mov.w	r0, #0
 800bc58:	bd70      	pop	{r4, r5, r6, pc}
 800bc5a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800bc5e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800bc62:	bd70      	pop	{r4, r5, r6, pc}

0800bc64 <__aeabi_ddiv>:
 800bc64:	b570      	push	{r4, r5, r6, lr}
 800bc66:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800bc6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800bc6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800bc72:	bf1d      	ittte	ne
 800bc74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800bc78:	ea94 0f0c 	teqne	r4, ip
 800bc7c:	ea95 0f0c 	teqne	r5, ip
 800bc80:	f000 f8a7 	bleq	800bdd2 <__aeabi_ddiv+0x16e>
 800bc84:	eba4 0405 	sub.w	r4, r4, r5
 800bc88:	ea81 0e03 	eor.w	lr, r1, r3
 800bc8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800bc90:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800bc94:	f000 8088 	beq.w	800bda8 <__aeabi_ddiv+0x144>
 800bc98:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800bc9c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800bca0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800bca4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800bca8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800bcac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800bcb0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800bcb4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800bcb8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800bcbc:	429d      	cmp	r5, r3
 800bcbe:	bf08      	it	eq
 800bcc0:	4296      	cmpeq	r6, r2
 800bcc2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800bcc6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800bcca:	d202      	bcs.n	800bcd2 <__aeabi_ddiv+0x6e>
 800bccc:	085b      	lsrs	r3, r3, #1
 800bcce:	ea4f 0232 	mov.w	r2, r2, rrx
 800bcd2:	1ab6      	subs	r6, r6, r2
 800bcd4:	eb65 0503 	sbc.w	r5, r5, r3
 800bcd8:	085b      	lsrs	r3, r3, #1
 800bcda:	ea4f 0232 	mov.w	r2, r2, rrx
 800bcde:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bce2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800bce6:	ebb6 0e02 	subs.w	lr, r6, r2
 800bcea:	eb75 0e03 	sbcs.w	lr, r5, r3
 800bcee:	bf22      	ittt	cs
 800bcf0:	1ab6      	subcs	r6, r6, r2
 800bcf2:	4675      	movcs	r5, lr
 800bcf4:	ea40 000c 	orrcs.w	r0, r0, ip
 800bcf8:	085b      	lsrs	r3, r3, #1
 800bcfa:	ea4f 0232 	mov.w	r2, r2, rrx
 800bcfe:	ebb6 0e02 	subs.w	lr, r6, r2
 800bd02:	eb75 0e03 	sbcs.w	lr, r5, r3
 800bd06:	bf22      	ittt	cs
 800bd08:	1ab6      	subcs	r6, r6, r2
 800bd0a:	4675      	movcs	r5, lr
 800bd0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800bd10:	085b      	lsrs	r3, r3, #1
 800bd12:	ea4f 0232 	mov.w	r2, r2, rrx
 800bd16:	ebb6 0e02 	subs.w	lr, r6, r2
 800bd1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800bd1e:	bf22      	ittt	cs
 800bd20:	1ab6      	subcs	r6, r6, r2
 800bd22:	4675      	movcs	r5, lr
 800bd24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800bd28:	085b      	lsrs	r3, r3, #1
 800bd2a:	ea4f 0232 	mov.w	r2, r2, rrx
 800bd2e:	ebb6 0e02 	subs.w	lr, r6, r2
 800bd32:	eb75 0e03 	sbcs.w	lr, r5, r3
 800bd36:	bf22      	ittt	cs
 800bd38:	1ab6      	subcs	r6, r6, r2
 800bd3a:	4675      	movcs	r5, lr
 800bd3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800bd40:	ea55 0e06 	orrs.w	lr, r5, r6
 800bd44:	d018      	beq.n	800bd78 <__aeabi_ddiv+0x114>
 800bd46:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800bd4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800bd4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800bd52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800bd56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800bd5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800bd5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800bd62:	d1c0      	bne.n	800bce6 <__aeabi_ddiv+0x82>
 800bd64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800bd68:	d10b      	bne.n	800bd82 <__aeabi_ddiv+0x11e>
 800bd6a:	ea41 0100 	orr.w	r1, r1, r0
 800bd6e:	f04f 0000 	mov.w	r0, #0
 800bd72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800bd76:	e7b6      	b.n	800bce6 <__aeabi_ddiv+0x82>
 800bd78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800bd7c:	bf04      	itt	eq
 800bd7e:	4301      	orreq	r1, r0
 800bd80:	2000      	moveq	r0, #0
 800bd82:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800bd86:	bf88      	it	hi
 800bd88:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800bd8c:	f63f aeaf 	bhi.w	800baee <__aeabi_dmul+0xde>
 800bd90:	ebb5 0c03 	subs.w	ip, r5, r3
 800bd94:	bf04      	itt	eq
 800bd96:	ebb6 0c02 	subseq.w	ip, r6, r2
 800bd9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800bd9e:	f150 0000 	adcs.w	r0, r0, #0
 800bda2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800bda6:	bd70      	pop	{r4, r5, r6, pc}
 800bda8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800bdac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800bdb0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800bdb4:	bfc2      	ittt	gt
 800bdb6:	ebd4 050c 	rsbsgt	r5, r4, ip
 800bdba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800bdbe:	bd70      	popgt	{r4, r5, r6, pc}
 800bdc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bdc4:	f04f 0e00 	mov.w	lr, #0
 800bdc8:	3c01      	subs	r4, #1
 800bdca:	e690      	b.n	800baee <__aeabi_dmul+0xde>
 800bdcc:	ea45 0e06 	orr.w	lr, r5, r6
 800bdd0:	e68d      	b.n	800baee <__aeabi_dmul+0xde>
 800bdd2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800bdd6:	ea94 0f0c 	teq	r4, ip
 800bdda:	bf08      	it	eq
 800bddc:	ea95 0f0c 	teqeq	r5, ip
 800bde0:	f43f af3b 	beq.w	800bc5a <__aeabi_dmul+0x24a>
 800bde4:	ea94 0f0c 	teq	r4, ip
 800bde8:	d10a      	bne.n	800be00 <__aeabi_ddiv+0x19c>
 800bdea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800bdee:	f47f af34 	bne.w	800bc5a <__aeabi_dmul+0x24a>
 800bdf2:	ea95 0f0c 	teq	r5, ip
 800bdf6:	f47f af25 	bne.w	800bc44 <__aeabi_dmul+0x234>
 800bdfa:	4610      	mov	r0, r2
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	e72c      	b.n	800bc5a <__aeabi_dmul+0x24a>
 800be00:	ea95 0f0c 	teq	r5, ip
 800be04:	d106      	bne.n	800be14 <__aeabi_ddiv+0x1b0>
 800be06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800be0a:	f43f aefd 	beq.w	800bc08 <__aeabi_dmul+0x1f8>
 800be0e:	4610      	mov	r0, r2
 800be10:	4619      	mov	r1, r3
 800be12:	e722      	b.n	800bc5a <__aeabi_dmul+0x24a>
 800be14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800be18:	bf18      	it	ne
 800be1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800be1e:	f47f aec5 	bne.w	800bbac <__aeabi_dmul+0x19c>
 800be22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800be26:	f47f af0d 	bne.w	800bc44 <__aeabi_dmul+0x234>
 800be2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800be2e:	f47f aeeb 	bne.w	800bc08 <__aeabi_dmul+0x1f8>
 800be32:	e712      	b.n	800bc5a <__aeabi_dmul+0x24a>

0800be34 <__gedf2>:
 800be34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800be38:	e006      	b.n	800be48 <__cmpdf2+0x4>
 800be3a:	bf00      	nop

0800be3c <__ledf2>:
 800be3c:	f04f 0c01 	mov.w	ip, #1
 800be40:	e002      	b.n	800be48 <__cmpdf2+0x4>
 800be42:	bf00      	nop

0800be44 <__cmpdf2>:
 800be44:	f04f 0c01 	mov.w	ip, #1
 800be48:	f84d cd04 	str.w	ip, [sp, #-4]!
 800be4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800be50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800be54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800be58:	bf18      	it	ne
 800be5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800be5e:	d01b      	beq.n	800be98 <__cmpdf2+0x54>
 800be60:	b001      	add	sp, #4
 800be62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800be66:	bf0c      	ite	eq
 800be68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800be6c:	ea91 0f03 	teqne	r1, r3
 800be70:	bf02      	ittt	eq
 800be72:	ea90 0f02 	teqeq	r0, r2
 800be76:	2000      	moveq	r0, #0
 800be78:	4770      	bxeq	lr
 800be7a:	f110 0f00 	cmn.w	r0, #0
 800be7e:	ea91 0f03 	teq	r1, r3
 800be82:	bf58      	it	pl
 800be84:	4299      	cmppl	r1, r3
 800be86:	bf08      	it	eq
 800be88:	4290      	cmpeq	r0, r2
 800be8a:	bf2c      	ite	cs
 800be8c:	17d8      	asrcs	r0, r3, #31
 800be8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800be92:	f040 0001 	orr.w	r0, r0, #1
 800be96:	4770      	bx	lr
 800be98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800be9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800bea0:	d102      	bne.n	800bea8 <__cmpdf2+0x64>
 800bea2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800bea6:	d107      	bne.n	800beb8 <__cmpdf2+0x74>
 800bea8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800beac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800beb0:	d1d6      	bne.n	800be60 <__cmpdf2+0x1c>
 800beb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800beb6:	d0d3      	beq.n	800be60 <__cmpdf2+0x1c>
 800beb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop

0800bec0 <__aeabi_cdrcmple>:
 800bec0:	4684      	mov	ip, r0
 800bec2:	4610      	mov	r0, r2
 800bec4:	4662      	mov	r2, ip
 800bec6:	468c      	mov	ip, r1
 800bec8:	4619      	mov	r1, r3
 800beca:	4663      	mov	r3, ip
 800becc:	e000      	b.n	800bed0 <__aeabi_cdcmpeq>
 800bece:	bf00      	nop

0800bed0 <__aeabi_cdcmpeq>:
 800bed0:	b501      	push	{r0, lr}
 800bed2:	f7ff ffb7 	bl	800be44 <__cmpdf2>
 800bed6:	2800      	cmp	r0, #0
 800bed8:	bf48      	it	mi
 800beda:	f110 0f00 	cmnmi.w	r0, #0
 800bede:	bd01      	pop	{r0, pc}

0800bee0 <__aeabi_dcmpeq>:
 800bee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800bee4:	f7ff fff4 	bl	800bed0 <__aeabi_cdcmpeq>
 800bee8:	bf0c      	ite	eq
 800beea:	2001      	moveq	r0, #1
 800beec:	2000      	movne	r0, #0
 800beee:	f85d fb08 	ldr.w	pc, [sp], #8
 800bef2:	bf00      	nop

0800bef4 <__aeabi_dcmplt>:
 800bef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800bef8:	f7ff ffea 	bl	800bed0 <__aeabi_cdcmpeq>
 800befc:	bf34      	ite	cc
 800befe:	2001      	movcc	r0, #1
 800bf00:	2000      	movcs	r0, #0
 800bf02:	f85d fb08 	ldr.w	pc, [sp], #8
 800bf06:	bf00      	nop

0800bf08 <__aeabi_dcmple>:
 800bf08:	f84d ed08 	str.w	lr, [sp, #-8]!
 800bf0c:	f7ff ffe0 	bl	800bed0 <__aeabi_cdcmpeq>
 800bf10:	bf94      	ite	ls
 800bf12:	2001      	movls	r0, #1
 800bf14:	2000      	movhi	r0, #0
 800bf16:	f85d fb08 	ldr.w	pc, [sp], #8
 800bf1a:	bf00      	nop

0800bf1c <__aeabi_dcmpge>:
 800bf1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800bf20:	f7ff ffce 	bl	800bec0 <__aeabi_cdrcmple>
 800bf24:	bf94      	ite	ls
 800bf26:	2001      	movls	r0, #1
 800bf28:	2000      	movhi	r0, #0
 800bf2a:	f85d fb08 	ldr.w	pc, [sp], #8
 800bf2e:	bf00      	nop

0800bf30 <__aeabi_dcmpgt>:
 800bf30:	f84d ed08 	str.w	lr, [sp, #-8]!
 800bf34:	f7ff ffc4 	bl	800bec0 <__aeabi_cdrcmple>
 800bf38:	bf34      	ite	cc
 800bf3a:	2001      	movcc	r0, #1
 800bf3c:	2000      	movcs	r0, #0
 800bf3e:	f85d fb08 	ldr.w	pc, [sp], #8
 800bf42:	bf00      	nop

0800bf44 <__aeabi_d2iz>:
 800bf44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800bf48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800bf4c:	d215      	bcs.n	800bf7a <__aeabi_d2iz+0x36>
 800bf4e:	d511      	bpl.n	800bf74 <__aeabi_d2iz+0x30>
 800bf50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800bf54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800bf58:	d912      	bls.n	800bf80 <__aeabi_d2iz+0x3c>
 800bf5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800bf5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800bf66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800bf6a:	fa23 f002 	lsr.w	r0, r3, r2
 800bf6e:	bf18      	it	ne
 800bf70:	4240      	negne	r0, r0
 800bf72:	4770      	bx	lr
 800bf74:	f04f 0000 	mov.w	r0, #0
 800bf78:	4770      	bx	lr
 800bf7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800bf7e:	d105      	bne.n	800bf8c <__aeabi_d2iz+0x48>
 800bf80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800bf84:	bf08      	it	eq
 800bf86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800bf8a:	4770      	bx	lr
 800bf8c:	f04f 0000 	mov.w	r0, #0
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop

0800bf94 <__aeabi_uldivmod>:
 800bf94:	b953      	cbnz	r3, 800bfac <__aeabi_uldivmod+0x18>
 800bf96:	b94a      	cbnz	r2, 800bfac <__aeabi_uldivmod+0x18>
 800bf98:	2900      	cmp	r1, #0
 800bf9a:	bf08      	it	eq
 800bf9c:	2800      	cmpeq	r0, #0
 800bf9e:	bf1c      	itt	ne
 800bfa0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800bfa4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800bfa8:	f000 b83c 	b.w	800c024 <__aeabi_idiv0>
 800bfac:	b082      	sub	sp, #8
 800bfae:	46ec      	mov	ip, sp
 800bfb0:	e92d 5000 	stmdb	sp!, {ip, lr}
 800bfb4:	f000 f81e 	bl	800bff4 <__gnu_uldivmod_helper>
 800bfb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bfbc:	b002      	add	sp, #8
 800bfbe:	bc0c      	pop	{r2, r3}
 800bfc0:	4770      	bx	lr
 800bfc2:	bf00      	nop

0800bfc4 <__gnu_ldivmod_helper>:
 800bfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc8:	9c06      	ldr	r4, [sp, #24]
 800bfca:	4615      	mov	r5, r2
 800bfcc:	4606      	mov	r6, r0
 800bfce:	460f      	mov	r7, r1
 800bfd0:	4698      	mov	r8, r3
 800bfd2:	f000 f829 	bl	800c028 <__divdi3>
 800bfd6:	fb05 f301 	mul.w	r3, r5, r1
 800bfda:	fb00 3808 	mla	r8, r0, r8, r3
 800bfde:	fba5 2300 	umull	r2, r3, r5, r0
 800bfe2:	1ab2      	subs	r2, r6, r2
 800bfe4:	4443      	add	r3, r8
 800bfe6:	eb67 0303 	sbc.w	r3, r7, r3
 800bfea:	e9c4 2300 	strd	r2, r3, [r4]
 800bfee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bff2:	bf00      	nop

0800bff4 <__gnu_uldivmod_helper>:
 800bff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bff8:	9c06      	ldr	r4, [sp, #24]
 800bffa:	4690      	mov	r8, r2
 800bffc:	4606      	mov	r6, r0
 800bffe:	460f      	mov	r7, r1
 800c000:	461d      	mov	r5, r3
 800c002:	f000 f95f 	bl	800c2c4 <__udivdi3>
 800c006:	fb00 f505 	mul.w	r5, r0, r5
 800c00a:	fba0 2308 	umull	r2, r3, r0, r8
 800c00e:	fb08 5501 	mla	r5, r8, r1, r5
 800c012:	1ab2      	subs	r2, r6, r2
 800c014:	442b      	add	r3, r5
 800c016:	eb67 0303 	sbc.w	r3, r7, r3
 800c01a:	e9c4 2300 	strd	r2, r3, [r4]
 800c01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c022:	bf00      	nop

0800c024 <__aeabi_idiv0>:
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop

0800c028 <__divdi3>:
 800c028:	2900      	cmp	r1, #0
 800c02a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c02e:	f2c0 80a6 	blt.w	800c17e <__divdi3+0x156>
 800c032:	2600      	movs	r6, #0
 800c034:	2b00      	cmp	r3, #0
 800c036:	f2c0 809c 	blt.w	800c172 <__divdi3+0x14a>
 800c03a:	4688      	mov	r8, r1
 800c03c:	4694      	mov	ip, r2
 800c03e:	469e      	mov	lr, r3
 800c040:	4615      	mov	r5, r2
 800c042:	4604      	mov	r4, r0
 800c044:	460f      	mov	r7, r1
 800c046:	2b00      	cmp	r3, #0
 800c048:	d13d      	bne.n	800c0c6 <__divdi3+0x9e>
 800c04a:	428a      	cmp	r2, r1
 800c04c:	d959      	bls.n	800c102 <__divdi3+0xda>
 800c04e:	fab2 f382 	clz	r3, r2
 800c052:	b13b      	cbz	r3, 800c064 <__divdi3+0x3c>
 800c054:	f1c3 0220 	rsb	r2, r3, #32
 800c058:	409f      	lsls	r7, r3
 800c05a:	fa20 f202 	lsr.w	r2, r0, r2
 800c05e:	409d      	lsls	r5, r3
 800c060:	4317      	orrs	r7, r2
 800c062:	409c      	lsls	r4, r3
 800c064:	0c29      	lsrs	r1, r5, #16
 800c066:	0c22      	lsrs	r2, r4, #16
 800c068:	fbb7 fef1 	udiv	lr, r7, r1
 800c06c:	b2a8      	uxth	r0, r5
 800c06e:	fb01 771e 	mls	r7, r1, lr, r7
 800c072:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800c076:	fb00 f30e 	mul.w	r3, r0, lr
 800c07a:	42bb      	cmp	r3, r7
 800c07c:	d90a      	bls.n	800c094 <__divdi3+0x6c>
 800c07e:	197f      	adds	r7, r7, r5
 800c080:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
 800c084:	f080 8105 	bcs.w	800c292 <__divdi3+0x26a>
 800c088:	42bb      	cmp	r3, r7
 800c08a:	f240 8102 	bls.w	800c292 <__divdi3+0x26a>
 800c08e:	f1ae 0e02 	sub.w	lr, lr, #2
 800c092:	442f      	add	r7, r5
 800c094:	1aff      	subs	r7, r7, r3
 800c096:	b2a4      	uxth	r4, r4
 800c098:	fbb7 f3f1 	udiv	r3, r7, r1
 800c09c:	fb01 7713 	mls	r7, r1, r3, r7
 800c0a0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800c0a4:	fb00 f003 	mul.w	r0, r0, r3
 800c0a8:	42b8      	cmp	r0, r7
 800c0aa:	d908      	bls.n	800c0be <__divdi3+0x96>
 800c0ac:	197f      	adds	r7, r7, r5
 800c0ae:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800c0b2:	f080 80f0 	bcs.w	800c296 <__divdi3+0x26e>
 800c0b6:	42b8      	cmp	r0, r7
 800c0b8:	f240 80ed 	bls.w	800c296 <__divdi3+0x26e>
 800c0bc:	3b02      	subs	r3, #2
 800c0be:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	e003      	b.n	800c0ce <__divdi3+0xa6>
 800c0c6:	428b      	cmp	r3, r1
 800c0c8:	d90f      	bls.n	800c0ea <__divdi3+0xc2>
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	1c34      	adds	r4, r6, #0
 800c0d0:	bf18      	it	ne
 800c0d2:	2401      	movne	r4, #1
 800c0d4:	4260      	negs	r0, r4
 800c0d6:	f04f 0500 	mov.w	r5, #0
 800c0da:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 800c0de:	4058      	eors	r0, r3
 800c0e0:	4051      	eors	r1, r2
 800c0e2:	1900      	adds	r0, r0, r4
 800c0e4:	4169      	adcs	r1, r5
 800c0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0ea:	fab3 f283 	clz	r2, r3
 800c0ee:	2a00      	cmp	r2, #0
 800c0f0:	f040 8086 	bne.w	800c200 <__divdi3+0x1d8>
 800c0f4:	428b      	cmp	r3, r1
 800c0f6:	d302      	bcc.n	800c0fe <__divdi3+0xd6>
 800c0f8:	4584      	cmp	ip, r0
 800c0fa:	f200 80db 	bhi.w	800c2b4 <__divdi3+0x28c>
 800c0fe:	2301      	movs	r3, #1
 800c100:	e7e5      	b.n	800c0ce <__divdi3+0xa6>
 800c102:	b912      	cbnz	r2, 800c10a <__divdi3+0xe2>
 800c104:	2301      	movs	r3, #1
 800c106:	fbb3 f5f2 	udiv	r5, r3, r2
 800c10a:	fab5 f085 	clz	r0, r5
 800c10e:	2800      	cmp	r0, #0
 800c110:	d13b      	bne.n	800c18a <__divdi3+0x162>
 800c112:	1b78      	subs	r0, r7, r5
 800c114:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800c118:	fa1f fc85 	uxth.w	ip, r5
 800c11c:	2201      	movs	r2, #1
 800c11e:	fbb0 f8fe 	udiv	r8, r0, lr
 800c122:	0c21      	lsrs	r1, r4, #16
 800c124:	fb0e 0718 	mls	r7, lr, r8, r0
 800c128:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 800c12c:	fb0c f308 	mul.w	r3, ip, r8
 800c130:	42bb      	cmp	r3, r7
 800c132:	d907      	bls.n	800c144 <__divdi3+0x11c>
 800c134:	197f      	adds	r7, r7, r5
 800c136:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 800c13a:	d202      	bcs.n	800c142 <__divdi3+0x11a>
 800c13c:	42bb      	cmp	r3, r7
 800c13e:	f200 80bd 	bhi.w	800c2bc <__divdi3+0x294>
 800c142:	4688      	mov	r8, r1
 800c144:	1aff      	subs	r7, r7, r3
 800c146:	b2a4      	uxth	r4, r4
 800c148:	fbb7 f3fe 	udiv	r3, r7, lr
 800c14c:	fb0e 7713 	mls	r7, lr, r3, r7
 800c150:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800c154:	fb0c fc03 	mul.w	ip, ip, r3
 800c158:	45bc      	cmp	ip, r7
 800c15a:	d907      	bls.n	800c16c <__divdi3+0x144>
 800c15c:	197f      	adds	r7, r7, r5
 800c15e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800c162:	d202      	bcs.n	800c16a <__divdi3+0x142>
 800c164:	45bc      	cmp	ip, r7
 800c166:	f200 80a7 	bhi.w	800c2b8 <__divdi3+0x290>
 800c16a:	460b      	mov	r3, r1
 800c16c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800c170:	e7ad      	b.n	800c0ce <__divdi3+0xa6>
 800c172:	4252      	negs	r2, r2
 800c174:	ea6f 0606 	mvn.w	r6, r6
 800c178:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800c17c:	e75d      	b.n	800c03a <__divdi3+0x12>
 800c17e:	4240      	negs	r0, r0
 800c180:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c184:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800c188:	e754      	b.n	800c034 <__divdi3+0xc>
 800c18a:	f1c0 0220 	rsb	r2, r0, #32
 800c18e:	fa24 f102 	lsr.w	r1, r4, r2
 800c192:	fa07 f300 	lsl.w	r3, r7, r0
 800c196:	4085      	lsls	r5, r0
 800c198:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800c19c:	40d7      	lsrs	r7, r2
 800c19e:	4319      	orrs	r1, r3
 800c1a0:	fbb7 f2fe 	udiv	r2, r7, lr
 800c1a4:	0c0b      	lsrs	r3, r1, #16
 800c1a6:	fb0e 7712 	mls	r7, lr, r2, r7
 800c1aa:	fa1f fc85 	uxth.w	ip, r5
 800c1ae:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c1b2:	fb0c f702 	mul.w	r7, ip, r2
 800c1b6:	429f      	cmp	r7, r3
 800c1b8:	fa04 f400 	lsl.w	r4, r4, r0
 800c1bc:	d907      	bls.n	800c1ce <__divdi3+0x1a6>
 800c1be:	195b      	adds	r3, r3, r5
 800c1c0:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800c1c4:	d274      	bcs.n	800c2b0 <__divdi3+0x288>
 800c1c6:	429f      	cmp	r7, r3
 800c1c8:	d972      	bls.n	800c2b0 <__divdi3+0x288>
 800c1ca:	3a02      	subs	r2, #2
 800c1cc:	442b      	add	r3, r5
 800c1ce:	1bdf      	subs	r7, r3, r7
 800c1d0:	b289      	uxth	r1, r1
 800c1d2:	fbb7 f8fe 	udiv	r8, r7, lr
 800c1d6:	fb0e 7318 	mls	r3, lr, r8, r7
 800c1da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c1de:	fb0c f708 	mul.w	r7, ip, r8
 800c1e2:	429f      	cmp	r7, r3
 800c1e4:	d908      	bls.n	800c1f8 <__divdi3+0x1d0>
 800c1e6:	195b      	adds	r3, r3, r5
 800c1e8:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 800c1ec:	d25c      	bcs.n	800c2a8 <__divdi3+0x280>
 800c1ee:	429f      	cmp	r7, r3
 800c1f0:	d95a      	bls.n	800c2a8 <__divdi3+0x280>
 800c1f2:	f1a8 0802 	sub.w	r8, r8, #2
 800c1f6:	442b      	add	r3, r5
 800c1f8:	1bd8      	subs	r0, r3, r7
 800c1fa:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 800c1fe:	e78e      	b.n	800c11e <__divdi3+0xf6>
 800c200:	f1c2 0320 	rsb	r3, r2, #32
 800c204:	fa2c f103 	lsr.w	r1, ip, r3
 800c208:	fa0e fe02 	lsl.w	lr, lr, r2
 800c20c:	fa20 f703 	lsr.w	r7, r0, r3
 800c210:	ea41 0e0e 	orr.w	lr, r1, lr
 800c214:	fa08 f002 	lsl.w	r0, r8, r2
 800c218:	fa28 f103 	lsr.w	r1, r8, r3
 800c21c:	ea4f 451e 	mov.w	r5, lr, lsr #16
 800c220:	4338      	orrs	r0, r7
 800c222:	fbb1 f8f5 	udiv	r8, r1, r5
 800c226:	0c03      	lsrs	r3, r0, #16
 800c228:	fb05 1118 	mls	r1, r5, r8, r1
 800c22c:	fa1f f78e 	uxth.w	r7, lr
 800c230:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800c234:	fb07 f308 	mul.w	r3, r7, r8
 800c238:	428b      	cmp	r3, r1
 800c23a:	fa0c fc02 	lsl.w	ip, ip, r2
 800c23e:	d909      	bls.n	800c254 <__divdi3+0x22c>
 800c240:	eb11 010e 	adds.w	r1, r1, lr
 800c244:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 800c248:	d230      	bcs.n	800c2ac <__divdi3+0x284>
 800c24a:	428b      	cmp	r3, r1
 800c24c:	d92e      	bls.n	800c2ac <__divdi3+0x284>
 800c24e:	f1a8 0802 	sub.w	r8, r8, #2
 800c252:	4471      	add	r1, lr
 800c254:	1ac9      	subs	r1, r1, r3
 800c256:	b280      	uxth	r0, r0
 800c258:	fbb1 f3f5 	udiv	r3, r1, r5
 800c25c:	fb05 1113 	mls	r1, r5, r3, r1
 800c260:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800c264:	fb07 f703 	mul.w	r7, r7, r3
 800c268:	428f      	cmp	r7, r1
 800c26a:	d908      	bls.n	800c27e <__divdi3+0x256>
 800c26c:	eb11 010e 	adds.w	r1, r1, lr
 800c270:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800c274:	d216      	bcs.n	800c2a4 <__divdi3+0x27c>
 800c276:	428f      	cmp	r7, r1
 800c278:	d914      	bls.n	800c2a4 <__divdi3+0x27c>
 800c27a:	3b02      	subs	r3, #2
 800c27c:	4471      	add	r1, lr
 800c27e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800c282:	1bc9      	subs	r1, r1, r7
 800c284:	fba3 890c 	umull	r8, r9, r3, ip
 800c288:	4549      	cmp	r1, r9
 800c28a:	d309      	bcc.n	800c2a0 <__divdi3+0x278>
 800c28c:	d005      	beq.n	800c29a <__divdi3+0x272>
 800c28e:	2200      	movs	r2, #0
 800c290:	e71d      	b.n	800c0ce <__divdi3+0xa6>
 800c292:	4696      	mov	lr, r2
 800c294:	e6fe      	b.n	800c094 <__divdi3+0x6c>
 800c296:	4613      	mov	r3, r2
 800c298:	e711      	b.n	800c0be <__divdi3+0x96>
 800c29a:	4094      	lsls	r4, r2
 800c29c:	4544      	cmp	r4, r8
 800c29e:	d2f6      	bcs.n	800c28e <__divdi3+0x266>
 800c2a0:	3b01      	subs	r3, #1
 800c2a2:	e7f4      	b.n	800c28e <__divdi3+0x266>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	e7ea      	b.n	800c27e <__divdi3+0x256>
 800c2a8:	4688      	mov	r8, r1
 800c2aa:	e7a5      	b.n	800c1f8 <__divdi3+0x1d0>
 800c2ac:	46c8      	mov	r8, r9
 800c2ae:	e7d1      	b.n	800c254 <__divdi3+0x22c>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	e78c      	b.n	800c1ce <__divdi3+0x1a6>
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	e70a      	b.n	800c0ce <__divdi3+0xa6>
 800c2b8:	3b02      	subs	r3, #2
 800c2ba:	e757      	b.n	800c16c <__divdi3+0x144>
 800c2bc:	f1a8 0802 	sub.w	r8, r8, #2
 800c2c0:	442f      	add	r7, r5
 800c2c2:	e73f      	b.n	800c144 <__divdi3+0x11c>

0800c2c4 <__udivdi3>:
 800c2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d144      	bne.n	800c356 <__udivdi3+0x92>
 800c2cc:	428a      	cmp	r2, r1
 800c2ce:	4615      	mov	r5, r2
 800c2d0:	4604      	mov	r4, r0
 800c2d2:	d94f      	bls.n	800c374 <__udivdi3+0xb0>
 800c2d4:	fab2 f782 	clz	r7, r2
 800c2d8:	460e      	mov	r6, r1
 800c2da:	b14f      	cbz	r7, 800c2f0 <__udivdi3+0x2c>
 800c2dc:	f1c7 0320 	rsb	r3, r7, #32
 800c2e0:	40b9      	lsls	r1, r7
 800c2e2:	fa20 f603 	lsr.w	r6, r0, r3
 800c2e6:	fa02 f507 	lsl.w	r5, r2, r7
 800c2ea:	430e      	orrs	r6, r1
 800c2ec:	fa00 f407 	lsl.w	r4, r0, r7
 800c2f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800c2f4:	0c23      	lsrs	r3, r4, #16
 800c2f6:	fbb6 f0fe 	udiv	r0, r6, lr
 800c2fa:	b2af      	uxth	r7, r5
 800c2fc:	fb0e 6110 	mls	r1, lr, r0, r6
 800c300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c304:	fb07 f100 	mul.w	r1, r7, r0
 800c308:	4299      	cmp	r1, r3
 800c30a:	d909      	bls.n	800c320 <__udivdi3+0x5c>
 800c30c:	195b      	adds	r3, r3, r5
 800c30e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800c312:	f080 80ec 	bcs.w	800c4ee <__udivdi3+0x22a>
 800c316:	4299      	cmp	r1, r3
 800c318:	f240 80e9 	bls.w	800c4ee <__udivdi3+0x22a>
 800c31c:	3802      	subs	r0, #2
 800c31e:	442b      	add	r3, r5
 800c320:	1a5a      	subs	r2, r3, r1
 800c322:	b2a4      	uxth	r4, r4
 800c324:	fbb2 f3fe 	udiv	r3, r2, lr
 800c328:	fb0e 2213 	mls	r2, lr, r3, r2
 800c32c:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800c330:	fb07 f703 	mul.w	r7, r7, r3
 800c334:	4297      	cmp	r7, r2
 800c336:	d908      	bls.n	800c34a <__udivdi3+0x86>
 800c338:	1952      	adds	r2, r2, r5
 800c33a:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800c33e:	f080 80d8 	bcs.w	800c4f2 <__udivdi3+0x22e>
 800c342:	4297      	cmp	r7, r2
 800c344:	f240 80d5 	bls.w	800c4f2 <__udivdi3+0x22e>
 800c348:	3b02      	subs	r3, #2
 800c34a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800c34e:	2600      	movs	r6, #0
 800c350:	4631      	mov	r1, r6
 800c352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c356:	428b      	cmp	r3, r1
 800c358:	d847      	bhi.n	800c3ea <__udivdi3+0x126>
 800c35a:	fab3 f683 	clz	r6, r3
 800c35e:	2e00      	cmp	r6, #0
 800c360:	d148      	bne.n	800c3f4 <__udivdi3+0x130>
 800c362:	428b      	cmp	r3, r1
 800c364:	d302      	bcc.n	800c36c <__udivdi3+0xa8>
 800c366:	4282      	cmp	r2, r0
 800c368:	f200 80cd 	bhi.w	800c506 <__udivdi3+0x242>
 800c36c:	2001      	movs	r0, #1
 800c36e:	4631      	mov	r1, r6
 800c370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c374:	b912      	cbnz	r2, 800c37c <__udivdi3+0xb8>
 800c376:	2501      	movs	r5, #1
 800c378:	fbb5 f5f2 	udiv	r5, r5, r2
 800c37c:	fab5 f885 	clz	r8, r5
 800c380:	f1b8 0f00 	cmp.w	r8, #0
 800c384:	d177      	bne.n	800c476 <__udivdi3+0x1b2>
 800c386:	1b4a      	subs	r2, r1, r5
 800c388:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800c38c:	b2af      	uxth	r7, r5
 800c38e:	2601      	movs	r6, #1
 800c390:	fbb2 f0fe 	udiv	r0, r2, lr
 800c394:	0c23      	lsrs	r3, r4, #16
 800c396:	fb0e 2110 	mls	r1, lr, r0, r2
 800c39a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800c39e:	fb07 f300 	mul.w	r3, r7, r0
 800c3a2:	428b      	cmp	r3, r1
 800c3a4:	d907      	bls.n	800c3b6 <__udivdi3+0xf2>
 800c3a6:	1949      	adds	r1, r1, r5
 800c3a8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800c3ac:	d202      	bcs.n	800c3b4 <__udivdi3+0xf0>
 800c3ae:	428b      	cmp	r3, r1
 800c3b0:	f200 80ba 	bhi.w	800c528 <__udivdi3+0x264>
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	1ac9      	subs	r1, r1, r3
 800c3b8:	b2a4      	uxth	r4, r4
 800c3ba:	fbb1 f3fe 	udiv	r3, r1, lr
 800c3be:	fb0e 1113 	mls	r1, lr, r3, r1
 800c3c2:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800c3c6:	fb07 f703 	mul.w	r7, r7, r3
 800c3ca:	42a7      	cmp	r7, r4
 800c3cc:	d908      	bls.n	800c3e0 <__udivdi3+0x11c>
 800c3ce:	1964      	adds	r4, r4, r5
 800c3d0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800c3d4:	f080 808f 	bcs.w	800c4f6 <__udivdi3+0x232>
 800c3d8:	42a7      	cmp	r7, r4
 800c3da:	f240 808c 	bls.w	800c4f6 <__udivdi3+0x232>
 800c3de:	3b02      	subs	r3, #2
 800c3e0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800c3e4:	4631      	mov	r1, r6
 800c3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3ea:	2600      	movs	r6, #0
 800c3ec:	4630      	mov	r0, r6
 800c3ee:	4631      	mov	r1, r6
 800c3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3f4:	f1c6 0420 	rsb	r4, r6, #32
 800c3f8:	fa22 f504 	lsr.w	r5, r2, r4
 800c3fc:	40b3      	lsls	r3, r6
 800c3fe:	432b      	orrs	r3, r5
 800c400:	fa20 fc04 	lsr.w	ip, r0, r4
 800c404:	fa01 f706 	lsl.w	r7, r1, r6
 800c408:	fa21 f504 	lsr.w	r5, r1, r4
 800c40c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c410:	ea4c 0707 	orr.w	r7, ip, r7
 800c414:	fbb5 f8fe 	udiv	r8, r5, lr
 800c418:	0c39      	lsrs	r1, r7, #16
 800c41a:	fb0e 5518 	mls	r5, lr, r8, r5
 800c41e:	fa1f fc83 	uxth.w	ip, r3
 800c422:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800c426:	fb0c f108 	mul.w	r1, ip, r8
 800c42a:	42a9      	cmp	r1, r5
 800c42c:	fa02 f206 	lsl.w	r2, r2, r6
 800c430:	d904      	bls.n	800c43c <__udivdi3+0x178>
 800c432:	18ed      	adds	r5, r5, r3
 800c434:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 800c438:	d367      	bcc.n	800c50a <__udivdi3+0x246>
 800c43a:	46a0      	mov	r8, r4
 800c43c:	1a6d      	subs	r5, r5, r1
 800c43e:	b2bf      	uxth	r7, r7
 800c440:	fbb5 f4fe 	udiv	r4, r5, lr
 800c444:	fb0e 5514 	mls	r5, lr, r4, r5
 800c448:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800c44c:	fb0c fc04 	mul.w	ip, ip, r4
 800c450:	458c      	cmp	ip, r1
 800c452:	d904      	bls.n	800c45e <__udivdi3+0x19a>
 800c454:	18c9      	adds	r1, r1, r3
 800c456:	f104 35ff 	add.w	r5, r4, #4294967295	; 0xffffffff
 800c45a:	d35c      	bcc.n	800c516 <__udivdi3+0x252>
 800c45c:	462c      	mov	r4, r5
 800c45e:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800c462:	ebcc 0101 	rsb	r1, ip, r1
 800c466:	fba4 2302 	umull	r2, r3, r4, r2
 800c46a:	4299      	cmp	r1, r3
 800c46c:	d348      	bcc.n	800c500 <__udivdi3+0x23c>
 800c46e:	d044      	beq.n	800c4fa <__udivdi3+0x236>
 800c470:	4620      	mov	r0, r4
 800c472:	2600      	movs	r6, #0
 800c474:	e76c      	b.n	800c350 <__udivdi3+0x8c>
 800c476:	f1c8 0420 	rsb	r4, r8, #32
 800c47a:	fa01 f308 	lsl.w	r3, r1, r8
 800c47e:	fa05 f508 	lsl.w	r5, r5, r8
 800c482:	fa20 f704 	lsr.w	r7, r0, r4
 800c486:	40e1      	lsrs	r1, r4
 800c488:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800c48c:	431f      	orrs	r7, r3
 800c48e:	fbb1 f6fe 	udiv	r6, r1, lr
 800c492:	0c3a      	lsrs	r2, r7, #16
 800c494:	fb0e 1116 	mls	r1, lr, r6, r1
 800c498:	fa1f fc85 	uxth.w	ip, r5
 800c49c:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 800c4a0:	fb0c f206 	mul.w	r2, ip, r6
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	fa00 f408 	lsl.w	r4, r0, r8
 800c4aa:	d907      	bls.n	800c4bc <__udivdi3+0x1f8>
 800c4ac:	195b      	adds	r3, r3, r5
 800c4ae:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 800c4b2:	d237      	bcs.n	800c524 <__udivdi3+0x260>
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d935      	bls.n	800c524 <__udivdi3+0x260>
 800c4b8:	3e02      	subs	r6, #2
 800c4ba:	442b      	add	r3, r5
 800c4bc:	1a9b      	subs	r3, r3, r2
 800c4be:	b2bf      	uxth	r7, r7
 800c4c0:	fbb3 f0fe 	udiv	r0, r3, lr
 800c4c4:	fb0e 3310 	mls	r3, lr, r0, r3
 800c4c8:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800c4cc:	fb0c f100 	mul.w	r1, ip, r0
 800c4d0:	4299      	cmp	r1, r3
 800c4d2:	d907      	bls.n	800c4e4 <__udivdi3+0x220>
 800c4d4:	195b      	adds	r3, r3, r5
 800c4d6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800c4da:	d221      	bcs.n	800c520 <__udivdi3+0x25c>
 800c4dc:	4299      	cmp	r1, r3
 800c4de:	d91f      	bls.n	800c520 <__udivdi3+0x25c>
 800c4e0:	3802      	subs	r0, #2
 800c4e2:	442b      	add	r3, r5
 800c4e4:	1a5a      	subs	r2, r3, r1
 800c4e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800c4ea:	4667      	mov	r7, ip
 800c4ec:	e750      	b.n	800c390 <__udivdi3+0xcc>
 800c4ee:	4610      	mov	r0, r2
 800c4f0:	e716      	b.n	800c320 <__udivdi3+0x5c>
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	e729      	b.n	800c34a <__udivdi3+0x86>
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	e772      	b.n	800c3e0 <__udivdi3+0x11c>
 800c4fa:	40b0      	lsls	r0, r6
 800c4fc:	4290      	cmp	r0, r2
 800c4fe:	d2b7      	bcs.n	800c470 <__udivdi3+0x1ac>
 800c500:	1e60      	subs	r0, r4, #1
 800c502:	2600      	movs	r6, #0
 800c504:	e724      	b.n	800c350 <__udivdi3+0x8c>
 800c506:	4630      	mov	r0, r6
 800c508:	e722      	b.n	800c350 <__udivdi3+0x8c>
 800c50a:	42a9      	cmp	r1, r5
 800c50c:	d995      	bls.n	800c43a <__udivdi3+0x176>
 800c50e:	f1a8 0802 	sub.w	r8, r8, #2
 800c512:	441d      	add	r5, r3
 800c514:	e792      	b.n	800c43c <__udivdi3+0x178>
 800c516:	458c      	cmp	ip, r1
 800c518:	d9a0      	bls.n	800c45c <__udivdi3+0x198>
 800c51a:	3c02      	subs	r4, #2
 800c51c:	4419      	add	r1, r3
 800c51e:	e79e      	b.n	800c45e <__udivdi3+0x19a>
 800c520:	4610      	mov	r0, r2
 800c522:	e7df      	b.n	800c4e4 <__udivdi3+0x220>
 800c524:	460e      	mov	r6, r1
 800c526:	e7c9      	b.n	800c4bc <__udivdi3+0x1f8>
 800c528:	3802      	subs	r0, #2
 800c52a:	4429      	add	r1, r5
 800c52c:	e743      	b.n	800c3b6 <__udivdi3+0xf2>
 800c52e:	bf00      	nop
 800c530:	756c6156 	.word	0x756c6156
 800c534:	65722065 	.word	0x65722065
 800c538:	203a6461 	.word	0x203a6461
 800c53c:	000a6425 	.word	0x000a6425
 800c540:	6e756f46 	.word	0x6e756f46
 800c544:	72652064 	.word	0x72652064
 800c548:	3a726f72 	.word	0x3a726f72
 800c54c:	00642520 	.word	0x00642520
 800c550:	2044454c 	.word	0x2044454c
 800c554:	64206425 	.word	0x64206425
 800c558:	2073656f 	.word	0x2073656f
 800c55c:	20746f6e 	.word	0x20746f6e
 800c560:	73697865 	.word	0x73697865
 800c564:	00000a74 	.word	0x00000a74
 800c568:	68616f77 	.word	0x68616f77
 800c56c:	65687420 	.word	0x65687420
 800c570:	202e6572 	.word	0x202e6572
 800c574:	65697274 	.word	0x65697274
 800c578:	6f742064 	.word	0x6f742064
 800c57c:	69727720 	.word	0x69727720
 800c580:	30206574 	.word	0x30206574
 800c584:	34302578 	.word	0x34302578
 800c588:	6f742078 	.word	0x6f742078
 800c58c:	67657220 	.word	0x67657220
 800c590:	32302520 	.word	0x32302520
 800c594:	75622064 	.word	0x75622064
 800c598:	74692074 	.word	0x74692074
 800c59c:	61657220 	.word	0x61657220
 800c5a0:	61622064 	.word	0x61622064
 800c5a4:	25206b63 	.word	0x25206b63
 800c5a8:	0d783430 	.word	0x0d783430
 800c5ac:	0000000a 	.word	0x0000000a
 800c5b0:	74656e65 	.word	0x74656e65
 800c5b4:	696e695f 	.word	0x696e695f
 800c5b8:	0d292874 	.word	0x0d292874
 800c5bc:	00000000 	.word	0x00000000
 800c5c0:	74696177 	.word	0x74696177
 800c5c4:	20676e69 	.word	0x20676e69
 800c5c8:	20726f66 	.word	0x20726f66
 800c5cc:	20594850 	.word	0x20594850
 800c5d0:	77206f74 	.word	0x77206f74
 800c5d4:	20656b61 	.word	0x20656b61
 800c5d8:	2e2e7075 	.word	0x2e2e7075
 800c5dc:	00000d2e 	.word	0x00000d2e
 800c5e0:	656e6f64 	.word	0x656e6f64
 800c5e4:	74697720 	.word	0x74697720
 800c5e8:	48502068 	.word	0x48502068
 800c5ec:	65722059 	.word	0x65722059
 800c5f0:	2e746573 	.word	0x2e746573
 800c5f4:	0000000d 	.word	0x0000000d
 800c5f8:	74746573 	.word	0x74746573
 800c5fc:	20676e69 	.word	0x20676e69
 800c600:	74666f73 	.word	0x74666f73
 800c604:	65726177 	.word	0x65726177
 800c608:	72747320 	.word	0x72747320
 800c60c:	72207061 	.word	0x72207061
 800c610:	73696765 	.word	0x73696765
 800c614:	73726574 	.word	0x73726574
 800c618:	0d2e2e2e 	.word	0x0d2e2e2e
 800c61c:	00000000 	.word	0x00000000
 800c620:	20594850 	.word	0x20594850
 800c624:	20676572 	.word	0x20676572
 800c628:	64323025 	.word	0x64323025
 800c62c:	30203d20 	.word	0x30203d20
 800c630:	34302578 	.word	0x34302578
 800c634:	000a0d78 	.word	0x000a0d78

0800c638 <g_eth_src_mac>:
 800c638:	00c1f3a4 00000001 68686861 686e7520     ........ahhh unh
 800c648:	6c646e61 62206465 20647561 65746172     andled baud rate
 800c658:	6425203a 00000a0d 6c786d64 696e695f     : %d....dmxl_ini
 800c668:	0d292874 00000000 63656863 6d75736b     t().....checksum
 800c678:	69616620 3a64656c 636f6c20 30206c61      failed: local 0
 800c688:	32302578 3d212078 63657220 65766965     x%02x != receive
 800c698:	78302064 78323025 00000a0d 68616f77     d 0x%02x....woah
 800c6a8:	65687420 70206572 6e747261 202e7265      there partner. 
 800c6b8:	78656e75 74636570 64206465 206c786d     unexpected dmxl 
 800c6c8:	73207872 65746174 00000d21 6c786d64     rx state!...dmxl
 800c6d8:	20642520 74617473 72207375 72757465      %d status retur
 800c6e8:	656c206e 206c6576 6425203d 0000000a     n level = %d....
 800c6f8:	6c756f63 74276e64 6c6f7020 7473206c     couldn't poll st
 800c708:	73757461 74657220 206e7275 6576656c     atus return leve
 800c718:	6f66206c 6d642072 25206c78 000a0d64     l for dmxl %d...
 800c728:	65636572 64657669 20787220 35322040     received rx @ 25
 800c738:	626b2030 66207469 206d6f72 6c786d64     0 kbit from dmxl
 800c748:	0d642520 0000000a 72206f6e 65722078      %d.....no rx re
 800c758:	76696563 66206465 206d6f72 6c786d64     ceived from dmxl
 800c768:	2e642520 74202e2e 6e697972 37352067      %d... trying 57
 800c778:	20303036 64756162 0d2e2e2e 0000000a     600 baud........
 800c788:	00000112 00000112                       ........

0800c790 <g_tactile_sensors_per_port>:
 800c790:	0b090909                                ....

0800c794 <g_tactile_palm_addrs>:
 800c794:	66646260 74727068 007a7876 74636174     `bdfhprtvxz.tact
 800c7a4:	5f656c69 64697262 725f6567 74657365     ile_bridge_reset
 800c7b4:	000d2928 74636174 5f656c69 74696e69     ()..tactile_init
 800c7c4:	000d2928 74636174 20656c69 64697262     ()..tactile brid
 800c7d4:	25206567 65722064 64252067 7830203a     ge %d reg %d: 0x
 800c7e4:	78323025 00000a0d 656e6f64 74697720     %02x....done wit
 800c7f4:	61742068 6c697463 6e695f65 29287469     h tactile_init()
 800c804:	0000000d                                ....

0800c808 <g_tactile_finger_addrs>:
 800c808:	06040200 14121008 00000016 5f636e65     ............enc_
 800c818:	74696e69 000d2928                       init()..

0800c820 <poll_targets>:
 800c820:	08002dd9 00000000 20010428 08002dd9     .-......(.. .-..
 800c830:	00000001 2001042c 08002dd9 00000002     ....,.. .-......
 800c840:	20010430 08002dd9 00000003 20010434     0.. .-......4.. 
 800c850:	08001f91 00000000 2000006c 08001f91     ........l.. ....
 800c860:	00000001 20000070 08001f91 00000002     ....p.. ........
 800c870:	20000074 08001f91 00000003 20000078     t.. ........x.. 
 800c880:	08003285 00000000 2000007c              .2......|.. 

0800c88c <errSequence>:
 800c88c:	01020408 00000000 02010408 00000000     ................
 800c89c:	01040208 00000000 04010208 00000000     ................
 800c8ac:	0e000804 00000000 08000804 00000000     ................
 800c8bc:	04000804 00000000 02000804 00000000     ................
 800c8cc:	08000204 00000000 04000204 00000000     ................
 800c8dc:	02000204 00000000 01000204 00000000     ................
 800c8ec:	00000043                                C...

0800c8f0 <_global_impure_ptr>:
 800c8f0:	20000088                                ... 

0800c8f4 <zeroes.6911>:
 800c8f4:	30303030 30303030 30303030 30303030     0000000000000000

0800c904 <blanks.6910>:
 800c904:	20202020 20202020 20202020 20202020                     
 800c914:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 800c924:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 800c934:	00000000 33323130 37363534 62613938     ....0123456789ab
 800c944:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 800c954:	00000030                                0...

0800c958 <zeroes.6926>:
 800c958:	30303030 30303030 30303030 30303030     0000000000000000

0800c968 <blanks.6925>:
 800c968:	20202020 20202020 20202020 20202020                     
 800c978:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 800c988:	49534f50 00000058 0000002e 00000000     POSIX...........

0800c998 <__mprec_tens>:
 800c998:	00000000 3ff00000 00000000 40240000     .......?......$@
 800c9a8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800c9b8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800c9c8:	00000000 412e8480 00000000 416312d0     .......A......cA
 800c9d8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800c9e8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800c9f8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800ca08:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800ca18:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800ca28:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800ca38:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800ca48:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800ca58:	79d99db4 44ea7843                       ...yCx.D

0800ca60 <p05.5302>:
 800ca60:	00000005 00000019 0000007d 00000000     ........}.......

0800ca70 <__mprec_bigtens>:
 800ca70:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800ca80:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800ca90:	7f73bf3c 75154fdd                       <.s..O.u

0800ca98 <__mprec_tinytens>:
 800ca98:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 800caa8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 800cab8:	64ac6f43 0ac80628                       Co.d(...

0800cac0 <blanks.6854>:
 800cac0:	20202020 20202020 20202020 20202020                     

0800cad0 <zeroes.6855>:
 800cad0:	30303030 30303030 30303030 30303030     0000000000000000

0800cae0 <zeroes.6869>:
 800cae0:	30303030 30303030 30303030 30303030     0000000000000000

0800caf0 <blanks.6868>:
 800caf0:	20202020 20202020 20202020 20202020                     

0800cb00 <_init>:
 800cb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb02:	bf00      	nop
 800cb04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb06:	bc08      	pop	{r3}
 800cb08:	469e      	mov	lr, r3
 800cb0a:	4770      	bx	lr

0800cb0c <__init_array_start>:
 800cb0c:	080064a1 	.word	0x080064a1

0800cb10 <__frame_dummy_init_array_entry>:
 800cb10:	08000425                                %...

0800cb14 <_fini>:
 800cb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb16:	bf00      	nop
 800cb18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb1a:	bc08      	pop	{r3}
 800cb1c:	469e      	mov	lr, r3
 800cb1e:	4770      	bx	lr

0800cb20 <__fini_array_start>:
 800cb20:	08000401 	.word	0x08000401
